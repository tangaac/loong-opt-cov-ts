	.file	"loop_unroll.cpp"
	.text
	.globl	_Z13record_resultdPKc           # -- Begin function _Z13record_resultdPKc
	.p2align	5
	.type	_Z13record_resultdPKc,@function
_Z13record_resultdPKc:                  # @_Z13record_resultdPKc
# %bb.0:
	addi.d	$sp, $sp, -48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	fst.d	$fs0, $sp, 0                    # 8-byte Folded Spill
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$fp, $a0
	fmov.d	$fs0, $fa0
	pcalau12i	$s0, %pc_hi20(current_test)
	beqz	$a2, .LBB0_2
# %bb.1:
	ld.w	$a0, $s0, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB0_4
.LBB0_2:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB0_5
# %bb.3:                                # %._crit_edge
	move	$a2, $a0
	ld.w	$a0, $s0, %pc_lo12(current_test)
.LBB0_4:
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fs0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s0, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 0                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.LBB0_5:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end0:
	.size	_Z13record_resultdPKc, .Lfunc_end0-_Z13record_resultdPKc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z9summarizePKciiii
.LCPI1_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.text
	.globl	_Z9summarizePKciiii
	.p2align	5
	.type	_Z9summarizePKciiii,@function
_Z9summarizePKciiii:                    # @_Z9summarizePKciiii
# %bb.0:
	addi.d	$sp, $sp, -128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 24                   # 8-byte Folded Spill
	pcalau12i	$s6, %pc_hi20(current_test)
	ld.w	$s0, $s6, %pc_lo12(current_test)
	move	$s8, $a4
	move	$s2, $a2
	move	$s3, $a1
	move	$fp, $a0
	ori	$s5, $zero, 1
	pcalau12i	$s7, %pc_hi20(results)
	blt	$s0, $s5, .LBB1_3
# %bb.1:                                # %.lr.ph
	ld.d	$a0, $s7, %pc_lo12(results)
	addi.d	$s4, $a0, 8
	ori	$s1, $zero, 12
	.p2align	4, , 16
.LBB1_2:                                # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $s4, 0
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	slt	$a1, $a0, $s1
	masknez	$a0, $a0, $a1
	maskeqz	$a1, $s1, $a1
	or	$s1, $a1, $a0
	addi.d	$s0, $s0, -1
	addi.d	$s4, $s4, 16
	bnez	$s0, .LBB1_2
	b	.LBB1_4
.LBB1_3:
	ori	$s1, $zero, 12
.LBB1_4:                                # %._crit_edge
	addi.w	$a1, $s1, -12
	pcalau12i	$a0, %pc_hi20(.L.str.1)
	addi.d	$a0, $a0, %pc_lo12(.L.str.1)
	pcalau12i	$a2, %pc_hi20(.L.str.2)
	addi.d	$s4, $a2, %pc_lo12(.L.str.2)
	move	$a2, $s4
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.3)
	addi.d	$a0, $a0, %pc_lo12(.L.str.3)
	move	$a1, $s1
	move	$a2, $s4
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s6, %pc_lo12(current_test)
	movgr2fr.d	$fs0, $zero
	blt	$a0, $s5, .LBB1_10
# %bb.5:                                # %.lr.ph45.preheader
	st.d	$s8, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	move	$s8, $zero
	move	$s4, $zero
	move	$s0, $zero
	movgr2fr.w	$fa0, $s3
	movgr2fr.w	$fa1, $s2
	pcalau12i	$a0, %pc_hi20(.LCPI1_0)
	fld.d	$fa2, $a0, %pc_lo12(.LCPI1_0)
	ffint.d.w	$fa0, $fa0
	ffint.d.w	$fa1, $fa1
	fmul.d	$fa0, $fa0, $fa1
	fdiv.d	$fs1, $fa0, $fa2
	pcalau12i	$a0, %pc_hi20(.L.str.4)
	addi.d	$s2, $a0, %pc_lo12(.L.str.4)
	pcalau12i	$a0, %pc_hi20(.L.str.5)
	addi.d	$s3, $a0, %pc_lo12(.L.str.5)
	.p2align	4, , 16
.LBB1_6:                                # %.lr.ph45
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$fp, $s7, %pc_lo12(results)
	add.d	$a0, $fp, $s8
	ld.d	$s5, $a0, 8
	move	$a0, $s5
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	fldx.d	$fa0, $fp, $s8
	fld.d	$fa1, $fp, 0
	sub.w	$a2, $s1, $a0
	fdiv.d	$fa2, $fs1, $fa0
	fdiv.d	$fa1, $fa0, $fa1
	movfr2gr.d	$a5, $fa0
	movfr2gr.d	$a6, $fa2
	movfr2gr.d	$a7, $fa1
	move	$a0, $s2
	move	$a1, $s4
	move	$a3, $s3
	move	$a4, $s5
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s6, %pc_lo12(current_test)
	addi.d	$s0, $s0, 1
	addi.w	$s4, $s4, 1
	addi.d	$s8, $s8, 16
	blt	$s0, $a0, .LBB1_6
# %bb.7:                                # %.preheader39
	ori	$a1, $zero, 1
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s8, $sp, 8                     # 8-byte Folded Reload
	blt	$a0, $a1, .LBB1_10
# %bb.8:                                # %.lr.ph49
	ld.d	$a1, $s7, %pc_lo12(results)
	movgr2fr.d	$fs0, $zero
	.p2align	4, , 16
.LBB1_9:                                # =>This Inner Loop Header: Depth=1
	fld.d	$fa0, $a1, 0
	fadd.d	$fs0, $fs0, $fa0
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 16
	bnez	$a0, .LBB1_9
.LBB1_10:                               # %._crit_edge50
	movfr2gr.d	$a2, $fs0
	pcalau12i	$a0, %pc_hi20(.L.str.6)
	addi.d	$a0, $a0, %pc_lo12(.L.str.6)
	move	$a1, $fp
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	beqz	$s8, .LBB1_15
# %bb.11:                               # %._crit_edge50
	ld.w	$a0, $s6, %pc_lo12(current_test)
	ori	$a1, $zero, 2
	blt	$a0, $a1, .LBB1_15
# %bb.12:                               # %.lr.ph54
	ld.d	$a0, $s7, %pc_lo12(results)
	fld.d	$fs1, $a0, 0
	addi.d	$s0, $a0, 16
	movgr2fr.d	$fs0, $zero
	ori	$s1, $zero, 1
	.p2align	4, , 16
.LBB1_13:                               # =>This Inner Loop Header: Depth=1
	fld.d	$fa0, $s0, 0
	fdiv.d	$fa0, $fa0, $fs1
	pcaddu18i	$ra, %call36(log)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s6, %pc_lo12(current_test)
	fadd.d	$fs0, $fs0, $fa0
	addi.d	$s1, $s1, 1
	addi.d	$s0, $s0, 16
	blt	$s1, $a0, .LBB1_13
# %bb.14:                               # %._crit_edge55
	addi.d	$a0, $a0, -1
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fdiv.d	$fa0, $fs0, $fa0
	pcaddu18i	$ra, %call36(exp)
	jirl	$ra, $ra, 0
	movfr2gr.d	$a2, $fa0
	pcalau12i	$a0, %pc_hi20(.L.str.7)
	addi.d	$a0, $a0, %pc_lo12(.L.str.7)
	move	$a1, $fp
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
.LBB1_15:
	st.w	$zero, $s6, %pc_lo12(current_test)
	fld.d	$fs1, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 32                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.Lfunc_end1:
	.size	_Z9summarizePKciiii, .Lfunc_end1-_Z9summarizePKciiii
                                        # -- End function
	.globl	_Z17summarize_simplefP8_IO_FILEPKc # -- Begin function _Z17summarize_simplefP8_IO_FILEPKc
	.p2align	5
	.type	_Z17summarize_simplefP8_IO_FILEPKc,@function
_Z17summarize_simplefP8_IO_FILEPKc:     # @_Z17summarize_simplefP8_IO_FILEPKc
# %bb.0:
	addi.d	$sp, $sp, -112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	st.d	$s8, $sp, 24                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 16                   # 8-byte Folded Spill
	pcalau12i	$s5, %pc_hi20(current_test)
	ld.w	$fp, $s5, %pc_lo12(current_test)
	move	$s0, $a1
	move	$s7, $a0
	ori	$s3, $zero, 1
	pcalau12i	$s4, %pc_hi20(results)
	blt	$fp, $s3, .LBB2_3
# %bb.1:                                # %.lr.ph
	ld.d	$a0, $s4, %pc_lo12(results)
	addi.d	$s2, $a0, 8
	ori	$s1, $zero, 12
	.p2align	4, , 16
.LBB2_2:                                # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $s2, 0
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	slt	$a1, $a0, $s1
	masknez	$a0, $a0, $a1
	maskeqz	$a1, $s1, $a1
	or	$s1, $a1, $a0
	addi.d	$fp, $fp, -1
	addi.d	$s2, $s2, 16
	bnez	$fp, .LBB2_2
	b	.LBB2_4
.LBB2_3:
	ori	$s1, $zero, 12
.LBB2_4:                                # %._crit_edge
	addi.w	$a2, $s1, -12
	pcalau12i	$a0, %pc_hi20(.L.str.8)
	addi.d	$a1, $a0, %pc_lo12(.L.str.8)
	pcalau12i	$a0, %pc_hi20(.L.str.2)
	addi.d	$s2, $a0, %pc_lo12(.L.str.2)
	move	$a0, $s7
	move	$a3, $s2
	pcaddu18i	$ra, %call36(fprintf)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.9)
	addi.d	$a1, $a0, %pc_lo12(.L.str.9)
	move	$a0, $s7
	move	$a2, $s1
	move	$a3, $s2
	pcaddu18i	$ra, %call36(fprintf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s5, %pc_lo12(current_test)
	movgr2fr.d	$fs0, $zero
	blt	$a0, $s3, .LBB2_10
# %bb.5:                                # %.lr.ph32.preheader
	st.d	$s0, $sp, 0                     # 8-byte Folded Spill
	move	$s8, $zero
	move	$s2, $zero
	move	$fp, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.10)
	addi.d	$a0, $a0, %pc_lo12(.L.str.10)
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(.L.str.5)
	addi.d	$s3, $a0, %pc_lo12(.L.str.5)
	.p2align	4, , 16
.LBB2_6:                                # %.lr.ph32
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$s6, $s4, %pc_lo12(results)
	add.d	$a0, $s6, $s8
	move	$s0, $s5
	ld.d	$s5, $a0, 8
	move	$a0, $s5
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	ldx.d	$a6, $s6, $s8
	sub.w	$a3, $s1, $a0
	move	$a0, $s7
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	move	$a2, $s2
	move	$a4, $s3
	move	$a5, $s5
	move	$s5, $s0
	pcaddu18i	$ra, %call36(fprintf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s0, %pc_lo12(current_test)
	addi.d	$fp, $fp, 1
	addi.w	$s2, $s2, 1
	addi.d	$s8, $s8, 16
	blt	$fp, $a0, .LBB2_6
# %bb.7:                                # %.preheader
	ori	$a1, $zero, 1
	ld.d	$s0, $sp, 0                     # 8-byte Folded Reload
	blt	$a0, $a1, .LBB2_10
# %bb.8:                                # %.lr.ph36
	ld.d	$a1, $s4, %pc_lo12(results)
	movgr2fr.d	$fs0, $zero
	.p2align	4, , 16
.LBB2_9:                                # =>This Inner Loop Header: Depth=1
	fld.d	$fa0, $a1, 0
	fadd.d	$fs0, $fs0, $fa0
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 16
	bnez	$a0, .LBB2_9
.LBB2_10:                               # %._crit_edge37
	movfr2gr.d	$a3, $fs0
	pcalau12i	$a0, %pc_hi20(.L.str.6)
	addi.d	$a1, $a0, %pc_lo12(.L.str.6)
	move	$a0, $s7
	move	$a2, $s0
	pcaddu18i	$ra, %call36(fprintf)
	jirl	$ra, $ra, 0
	st.w	$zero, $s5, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 16                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.Lfunc_end2:
	.size	_Z17summarize_simplefP8_IO_FILEPKc, .Lfunc_end2-_Z17summarize_simplefP8_IO_FILEPKc
                                        # -- End function
	.globl	_Z11start_timerv                # -- Begin function _Z11start_timerv
	.p2align	5
	.type	_Z11start_timerv,@function
_Z11start_timerv:                       # @_Z11start_timerv
# %bb.0:
	addi.d	$sp, $sp, -16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a0, $a1, %pc_lo12(start_time)
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end3:
	.size	_Z11start_timerv, .Lfunc_end3-_Z11start_timerv
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z5timerv
.LCPI4_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.text
	.globl	_Z5timerv
	.p2align	5
	.type	_Z5timerv,@function
_Z5timerv:                              # @_Z5timerv
# %bb.0:
	addi.d	$sp, $sp, -16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(start_time)
	ld.d	$a1, $a1, %pc_lo12(start_time)
	pcalau12i	$a2, %pc_hi20(end_time)
	pcalau12i	$a3, %pc_hi20(.LCPI4_0)
	fld.d	$fa0, $a3, %pc_lo12(.LCPI4_0)
	sub.d	$a1, $a0, $a1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	st.d	$a0, $a2, %pc_lo12(end_time)
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end4:
	.size	_Z5timerv, .Lfunc_end4-_Z5timerv
                                        # -- End function
	.globl	main                            # -- Begin function main
	.p2align	5
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	st.d	$s7, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	ori	$s1, $zero, 2
	pcalau12i	$s5, %pc_hi20(iterations)
	pcalau12i	$s6, %pc_hi20(init_value)
	blt	$a0, $s1, .LBB5_3
# %bb.1:
	move	$fp, $a1
	move	$s0, $a0
	ld.d	$a0, $a1, 8
	ori	$a2, $zero, 10
	move	$a1, $zero
	pcaddu18i	$ra, %call36(__isoc23_strtol)
	jirl	$ra, $ra, 0
	st.w	$a0, $s5, %pc_lo12(iterations)
	beq	$s0, $s1, .LBB5_3
# %bb.2:
	ld.d	$a0, $fp, 16
	move	$a1, $zero
	pcaddu18i	$ra, %call36(strtod)
	jirl	$ra, $ra, 0
	fst.d	$fa0, $s6, %pc_lo12(init_value)
.LBB5_3:                                # %vector.ph
	fld.d	$fa0, $s6, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	vreplgr2vr.w	$vr0, $a0
	lu12i.w	$a0, -8
	ori	$a0, $a0, 768
	pcalau12i	$a1, %pc_hi20(data32)
	addi.d	$a1, $a1, %pc_lo12(data32)
	lu12i.w	$a3, 7
	ori	$a2, $a3, 3328
	ori	$a3, $a3, 3344
	.p2align	4, , 16
.LBB5_4:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a4, $a1, $a0
	vstx	$vr0, $a4, $a2
	addi.d	$a0, $a0, 32
	vstx	$vr0, $a4, $a3
	bnez	$a0, .LBB5_4
# %bb.5:                                # %_Z4fillIPiiEvT_S1_T0_.exit
	pcalau12i	$a0, %pc_hi20(data32)
	addi.d	$s4, $a0, %pc_lo12(data32)
	pcalau12i	$a0, %pc_hi20(.L.str.11)
	addi.d	$a1, $a0, %pc_lo12(.L.str.11)
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_ZN14for_loop_testsILi28EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string+2047)
	addi.d	$s2, $a0, %pc_lo12(temp_string+2047)
	addi.d	$fp, $s2, 753
	lu12i.w	$s7, 1
	ori	$s3, $s7, 3904
	move	$a0, $s4
	move	$a1, $s3
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s0, $s2, 853
	move	$a0, $s4
	move	$a1, $s3
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s1, $s2, 953
	move	$a0, $s4
	move	$a1, $s3
	move	$a2, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s2, $s2, 1053
	move	$a0, $s4
	move	$a1, $s3
	move	$a2, $s2
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.12)
	addi.d	$a1, $a0, %pc_lo12(.L.str.12)
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_ZN16while_loop_testsILi28EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s4
	move	$a1, $s3
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s4
	move	$a1, $s3
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s4
	move	$a1, $s3
	move	$a2, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s4
	move	$a1, $s3
	move	$a2, $s2
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.13)
	addi.d	$a1, $a0, %pc_lo12(.L.str.13)
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_ZN13do_loop_testsILi28EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s4
	move	$a1, $s3
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s4
	move	$a1, $s3
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s4
	move	$a1, $s3
	move	$a2, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s4
	move	$a1, $s3
	move	$a2, $s2
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.14)
	addi.d	$a1, $a0, %pc_lo12(.L.str.14)
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_ZN15goto_loop_testsILi28EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s4
	move	$a1, $s3
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s4
	move	$a1, $s3
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s4
	move	$a1, $s3
	move	$a2, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s4
	move	$a1, $s3
	move	$a2, $s2
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s5, %pc_lo12(iterations)
	bstrpick.d	$a1, $a0, 62, 61
	add.w	$a0, $a0, $a1
	srli.d	$a0, $a0, 2
	fld.d	$fa0, $s6, %pc_lo12(init_value)
	st.w	$a0, $s5, %pc_lo12(iterations)
	pcalau12i	$a0, %pc_hi20(dataDouble+16)
	addi.d	$a0, $a0, %pc_lo12(dataDouble+16)
	vreplvei.d	$vr0, $vr0, 0
	.p2align	4, , 16
.LBB5_6:                                # %vector.body9
                                        # =>This Inner Loop Header: Depth=1
	vst	$vr0, $a0, -16
	vst	$vr0, $a0, 0
	addi.d	$s3, $s3, -4
	addi.d	$a0, $a0, 32
	bnez	$s3, .LBB5_6
# %bb.7:                                # %_Z4fillIPddEvT_S1_T0_.exit
	pcalau12i	$a0, %pc_hi20(dataDouble)
	addi.d	$s3, $a0, %pc_lo12(dataDouble)
	pcalau12i	$a0, %pc_hi20(.L.str.15)
	addi.d	$a1, $a0, %pc_lo12(.L.str.15)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZN14for_loop_testsILi28EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	ori	$s4, $s7, 3904
	move	$a0, $s3
	move	$a1, $s4
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s3
	move	$a1, $s4
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s3
	move	$a1, $s4
	move	$a2, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s3
	move	$a1, $s4
	move	$a2, $s2
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.16)
	addi.d	$a1, $a0, %pc_lo12(.L.str.16)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZN16while_loop_testsILi28EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s3
	move	$a1, $s4
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s3
	move	$a1, $s4
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s3
	move	$a1, $s4
	move	$a2, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s3
	move	$a1, $s4
	move	$a2, $s2
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.17)
	addi.d	$a1, $a0, %pc_lo12(.L.str.17)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZN13do_loop_testsILi28EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s3
	move	$a1, $s4
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s3
	move	$a1, $s4
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s3
	move	$a1, $s4
	move	$a2, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s3
	move	$a1, $s4
	move	$a2, $s2
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.18)
	addi.d	$a1, $a0, %pc_lo12(.L.str.18)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZN15goto_loop_testsILi28EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s3
	move	$a1, $s4
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s3
	move	$a1, $s4
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s3
	move	$a1, $s4
	move	$a2, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s3
	move	$a1, $s4
	move	$a2, $s2
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $zero
	ld.d	$s7, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.Lfunc_end5:
	.size	main, .Lfunc_end5-main
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc
.LCPI6_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI6_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 88                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB6_31
# %bb.1:                                # %.preheader48.lr.ph
	ori	$a0, $zero, 32
	blt	$s0, $a0, .LBB6_15
# %bb.2:                                # %.preheader48.us.preheader
	move	$s2, $zero
	addi.d	$a1, $s0, -31
	bstrpick.d	$s6, $a1, 31, 0
	sltu	$a1, $a0, $s6
	masknez	$a0, $a0, $a1
	maskeqz	$a1, $s6, $a1
	or	$a0, $a1, $a0
	addi.d	$a0, $a0, -1
	bstrins.d	$a0, $zero, 4, 0
	addi.d	$a1, $a0, 33
	sltu	$a2, $s0, $a1
	maskeqz	$a1, $a1, $a2
	masknez	$a2, $s0, $a2
	or	$a1, $a1, $a2
	addi.d	$a2, $a1, -32
	sub.d	$a3, $a2, $a0
	andi	$a1, $a1, 7
	st.d	$a3, $sp, 80                    # 8-byte Folded Spill
	sub.d	$a3, $a3, $a1
	st.d	$a3, $sp, 48                    # 8-byte Folded Spill
	addi.d	$s4, $s1, 144
	st.d	$a1, $sp, 64                    # 8-byte Folded Spill
	sub.d	$a1, $a2, $a1
	sub.d	$a0, $a1, $a0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -504557
	ori	$s8, $a0, 1792
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s5, $a0, 1536
	b	.LBB6_4
	.p2align	4, , 16
.LBB6_3:                                # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB6_4 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB6_31
.LBB6_4:                                # %.preheader48.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_5 Depth 2
                                        #     Child Loop BB6_9 Depth 2
                                        #     Child Loop BB6_12 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	ori	$a2, $zero, 32
	move	$a3, $s4
	.p2align	4, , 16
.LBB6_5:                                #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a4, $a1, $s1, 2
	slli.d	$a5, $a1, 2
	ldx.w	$a5, $s1, $a5
	ld.w	$a6, $a4, 4
	ld.w	$a7, $a4, 8
	ld.w	$t0, $a4, 12
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, 16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 36
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 40
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 44
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 48
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 52
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 56
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 60
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 64
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 68
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 72
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 76
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 80
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 84
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 88
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 92
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 96
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 100
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 104
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 108
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 112
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 116
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 120
	ld.w	$t1, $a4, 124
	add.d	$a4, $a5, $a6
	add.d	$a4, $a4, $a7
	add.d	$a6, $a4, $t0
	move	$a4, $a2
	move	$a5, $a3
	add.d	$a2, $a6, $t1
	mul.d	$a2, $a2, $fp
	add.d	$a0, $a0, $a2
	add.w	$a0, $a0, $s8
	addi.d	$a1, $a1, 32
	addi.d	$a2, $a4, 32
	addi.d	$a3, $a3, 128
	bltu	$a1, $s6, .LBB6_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB6_4 Depth=1
	addi.w	$a1, $a1, 0
	bge	$a1, $s0, .LBB6_13
# %bb.7:                                # %.lr.ph54.us.preheader
                                        #   in Loop: Header=BB6_4 Depth=1
	ld.d	$a1, $sp, 80                    # 8-byte Folded Reload
	ori	$a2, $zero, 8
	bltu	$a1, $a2, .LBB6_11
# %bb.8:                                # %vector.ph94
                                        #   in Loop: Header=BB6_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI6_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI6_0)
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	add.d	$a4, $a4, $a1
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB6_9:                                # %vector.body97
                                        #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a5, -16
	vld	$vr3, $a5, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s7
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a5, $a5, 32
	bnez	$a0, .LBB6_9
# %bb.10:                               # %middle.block104
                                        #   in Loop: Header=BB6_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	beqz	$a1, .LBB6_13
.LBB6_11:                               # %.lr.ph54.us.preheader109
                                        #   in Loop: Header=BB6_4 Depth=1
	alsl.d	$a1, $a4, $s1, 2
	.p2align	4, , 16
.LBB6_12:                               # %.lr.ph54.us
                                        #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a2, $a1, 0
	mul.d	$a2, $a2, $fp
	add.d	$a0, $a0, $a2
	add.w	$a0, $a0, $s7
	addi.d	$a4, $a4, 1
	addi.d	$a1, $a1, 4
	bltu	$a4, $s0, .LBB6_12
.LBB6_13:                               # %._crit_edge.us
                                        #   in Loop: Header=BB6_4 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s3
	add.w	$a1, $a1, $s5
	beq	$a0, $a1, .LBB6_3
# %bb.14:                               #   in Loop: Header=BB6_4 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	b	.LBB6_3
.LBB6_15:                               # %.preheader48.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB6_27
# %bb.16:                               # %.preheader48.us58.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	vst	$vr5, $sp, 32                   # 16-byte Folded Spill
	b	.LBB6_18
	.p2align	4, , 16
.LBB6_17:                               # %_Z9check_sumIiEvT_.exit.us61
                                        #   in Loop: Header=BB6_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB6_31
.LBB6_18:                               # %.preheader48.us58
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_21 Depth 2
                                        #     Child Loop BB6_24 Depth 2
	bgeu	$s0, $a5, .LBB6_20
# %bb.19:                               #   in Loop: Header=BB6_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB6_23
	.p2align	4, , 16
.LBB6_20:                               # %vector.body.preheader
                                        #   in Loop: Header=BB6_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB6_21:                               # %vector.body
                                        #   Parent Loop BB6_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB6_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB6_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB6_25
.LBB6_23:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB6_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB6_24:                               # %scalar.ph
                                        #   Parent Loop BB6_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB6_24
.LBB6_25:                               # %._crit_edge.us65
                                        #   in Loop: Header=BB6_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB6_17
# %bb.26:                               #   in Loop: Header=BB6_18 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 32                   # 16-byte Folded Reload
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB6_17
.LBB6_27:                               # %.preheader48.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB6_29
	.p2align	4, , 16
.LBB6_28:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB6_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB6_31
.LBB6_29:                               # %.preheader48
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB6_28
# %bb.30:                               #   in Loop: Header=BB6_29 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB6_28
.LBB6_31:                               # %._crit_edge57
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 88                    # 8-byte Folded Reload
	beqz	$a2, .LBB6_33
# %bb.32:                               # %._crit_edge57
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB6_35
.LBB6_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB6_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB6_35:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI6_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI6_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB6_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end6:
	.size	_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc, .Lfunc_end6-_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc
.LCPI7_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI7_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 80                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 72                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB7_31
# %bb.1:                                # %.preheader47.lr.ph
	ori	$a0, $zero, 31
	blt	$s0, $a0, .LBB7_15
# %bb.2:                                # %.preheader47.us.preheader
	addi.d	$a1, $s0, -30
	bstrpick.d	$s2, $a1, 31, 0
	sltu	$a1, $a0, $s2
	masknez	$a0, $a0, $a1
	maskeqz	$a1, $s2, $a1
	or	$a0, $a1, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a1, 135300
	ori	$a1, $a1, 529
	lu32i.d	$a1, 135300
	lu52i.d	$a1, $a1, 132
	mulh.du	$a1, $a0, $a1
	sub.d	$a0, $a0, $a1
	srli.d	$a0, $a0, 1
	add.d	$a0, $a0, $a1
	srli.d	$a0, $a0, 4
	slli.d	$a1, $a0, 5
	sub.d	$a0, $a1, $a0
	addi.d	$a1, $a0, 32
	sltu	$a2, $s0, $a1
	maskeqz	$a1, $a1, $a2
	masknez	$a2, $s0, $a2
	or	$a1, $a1, $a2
	sub.d	$a0, $a1, $a0
	addi.d	$a0, $a0, -31
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 140
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -226646
	ori	$s3, $a0, 3400
	lu12i.w	$a0, -277912
	ori	$s6, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s5, $a0, 1536
	b	.LBB7_4
	.p2align	4, , 16
.LBB7_3:                                # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB7_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB7_31
.LBB7_4:                                # %.preheader47.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_5 Depth 2
                                        #     Child Loop BB7_9 Depth 2
                                        #     Child Loop BB7_12 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	ori	$a2, $zero, 31
	move	$a3, $fp
	.p2align	4, , 16
.LBB7_5:                                #   Parent Loop BB7_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a4, $a1, $s1, 2
	slli.d	$a5, $a1, 2
	ldx.w	$a5, $s1, $a5
	ld.w	$a6, $a4, 4
	ld.w	$a7, $a4, 8
	ld.w	$t0, $a4, 12
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, 16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 36
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 40
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 44
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 48
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 52
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 56
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 60
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 64
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 68
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 72
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 76
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 80
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 84
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 88
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 92
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 96
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 100
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 104
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 108
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 112
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 116
	ld.w	$t1, $a4, 120
	add.d	$a4, $a5, $t0
	add.d	$a4, $a4, $a6
	add.d	$a6, $a4, $a7
	move	$a4, $a2
	move	$a5, $a3
	add.d	$a2, $a6, $t1
	mul.d	$a2, $a2, $s4
	add.d	$a0, $a0, $a2
	add.w	$a0, $a0, $s3
	addi.d	$a1, $a1, 31
	addi.d	$a2, $a4, 31
	addi.d	$a3, $a3, 124
	bltu	$a1, $s2, .LBB7_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB7_4 Depth=1
	addi.w	$a1, $a1, 0
	bge	$a1, $s0, .LBB7_13
# %bb.7:                                # %.lr.ph53.us.preheader
                                        #   in Loop: Header=BB7_4 Depth=1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	ori	$a2, $zero, 8
	bltu	$a1, $a2, .LBB7_11
# %bb.8:                                # %vector.ph93
                                        #   in Loop: Header=BB7_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI7_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI7_0)
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	add.d	$a4, $a4, $a1
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a1
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB7_9:                                # %vector.body96
                                        #   Parent Loop BB7_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a5, -16
	vld	$vr3, $a5, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s6
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a5, $a5, 32
	bnez	$a0, .LBB7_9
# %bb.10:                               # %middle.block103
                                        #   in Loop: Header=BB7_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	beq	$a1, $a2, .LBB7_13
.LBB7_11:                               # %.lr.ph53.us.preheader108
                                        #   in Loop: Header=BB7_4 Depth=1
	alsl.d	$a1, $a4, $s1, 2
	.p2align	4, , 16
.LBB7_12:                               # %.lr.ph53.us
                                        #   Parent Loop BB7_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a2, $a1, 0
	mul.d	$a2, $a2, $s4
	add.d	$a0, $a0, $a2
	add.w	$a0, $a0, $s6
	addi.d	$a4, $a4, 1
	addi.d	$a1, $a1, 4
	bltu	$a4, $s0, .LBB7_12
.LBB7_13:                               # %._crit_edge.us
                                        #   in Loop: Header=BB7_4 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s8
	add.w	$a1, $a1, $s5
	beq	$a0, $a1, .LBB7_3
# %bb.14:                               #   in Loop: Header=BB7_4 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	b	.LBB7_3
.LBB7_15:                               # %.preheader47.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB7_27
# %bb.16:                               # %.preheader47.us57.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB7_18
	.p2align	4, , 16
.LBB7_17:                               # %_Z9check_sumIiEvT_.exit.us60
                                        #   in Loop: Header=BB7_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB7_31
.LBB7_18:                               # %.preheader47.us57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_21 Depth 2
                                        #     Child Loop BB7_24 Depth 2
	bgeu	$s0, $a5, .LBB7_20
# %bb.19:                               #   in Loop: Header=BB7_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB7_23
	.p2align	4, , 16
.LBB7_20:                               # %vector.body.preheader
                                        #   in Loop: Header=BB7_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB7_21:                               # %vector.body
                                        #   Parent Loop BB7_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB7_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB7_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB7_25
.LBB7_23:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB7_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB7_24:                               # %scalar.ph
                                        #   Parent Loop BB7_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB7_24
.LBB7_25:                               # %._crit_edge.us64
                                        #   in Loop: Header=BB7_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB7_17
# %bb.26:                               #   in Loop: Header=BB7_18 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB7_17
.LBB7_27:                               # %.preheader47.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB7_29
	.p2align	4, , 16
.LBB7_28:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB7_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB7_31
.LBB7_29:                               # %.preheader47
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB7_28
# %bb.30:                               #   in Loop: Header=BB7_29 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB7_28
.LBB7_31:                               # %._crit_edge56
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 72                    # 8-byte Folded Reload
	beqz	$a2, .LBB7_33
# %bb.32:                               # %._crit_edge56
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB7_35
.LBB7_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB7_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB7_35:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI7_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI7_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB7_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end7:
	.size	_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc, .Lfunc_end7-_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc
.LCPI8_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI8_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB8_31
# %bb.1:                                # %.preheader46.lr.ph
	ori	$a0, $zero, 30
	blt	$s0, $a0, .LBB8_15
# %bb.2:                                # %.preheader46.us.preheader
	addi.d	$a2, $s0, -29
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -489336
	ori	$a3, $a3, 2185
	lu32i.d	$a3, -489336
	lu52i.d	$a3, $a3, -1912
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 4
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 31
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -30
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 136
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 51266
	ori	$s5, $a0, 912
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB8_4
	.p2align	4, , 16
.LBB8_3:                                # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB8_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB8_31
.LBB8_4:                                # %.preheader46.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_5 Depth 2
                                        #     Child Loop BB8_9 Depth 2
                                        #     Child Loop BB8_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a3, $zero, 30
	move	$a4, $fp
	.p2align	4, , 16
.LBB8_5:                                #   Parent Loop BB8_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a5, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a5, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 92
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 96
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 100
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 104
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 108
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 112
	ld.w	$t2, $a5, 116
	add.d	$a5, $a6, $t0
	add.d	$a5, $a5, $t1
	add.d	$a7, $a5, $a7
	move	$a5, $a3
	move	$a6, $a4
	add.d	$a3, $a7, $t2
	mul.d	$a3, $a3, $s4
	add.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s5
	addi.d	$a2, $a2, 30
	addi.d	$a3, $a5, 30
	addi.d	$a4, $a4, 120
	bltu	$a2, $s2, .LBB8_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB8_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB8_13
# %bb.7:                                # %.lr.ph52.us.preheader
                                        #   in Loop: Header=BB8_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a3, $zero, 8
	bltu	$a2, $a3, .LBB8_11
# %bb.8:                                # %vector.ph93
                                        #   in Loop: Header=BB8_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI8_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI8_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a5, $a5, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB8_9:                                # %vector.body96
                                        #   Parent Loop BB8_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s3
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB8_9
# %bb.10:                               # %middle.block103
                                        #   in Loop: Header=BB8_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a3, .LBB8_13
.LBB8_11:                               # %.lr.ph52.us.preheader108
                                        #   in Loop: Header=BB8_4 Depth=1
	alsl.d	$a2, $a5, $s1, 2
	.p2align	4, , 16
.LBB8_12:                               # %.lr.ph52.us
                                        #   Parent Loop BB8_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a2, 0
	mul.d	$a3, $a3, $s4
	add.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s3
	addi.d	$a5, $a5, 1
	addi.d	$a2, $a2, 4
	bltu	$a5, $s0, .LBB8_12
.LBB8_13:                               # %._crit_edge.us
                                        #   in Loop: Header=BB8_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB8_3
# %bb.14:                               #   in Loop: Header=BB8_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB8_3
.LBB8_15:                               # %.preheader46.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB8_27
# %bb.16:                               # %.preheader46.us56.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB8_18
	.p2align	4, , 16
.LBB8_17:                               # %_Z9check_sumIiEvT_.exit.us59
                                        #   in Loop: Header=BB8_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB8_31
.LBB8_18:                               # %.preheader46.us56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_21 Depth 2
                                        #     Child Loop BB8_24 Depth 2
	bgeu	$s0, $a5, .LBB8_20
# %bb.19:                               #   in Loop: Header=BB8_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB8_23
	.p2align	4, , 16
.LBB8_20:                               # %vector.body.preheader
                                        #   in Loop: Header=BB8_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB8_21:                               # %vector.body
                                        #   Parent Loop BB8_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB8_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB8_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB8_25
.LBB8_23:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB8_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB8_24:                               # %scalar.ph
                                        #   Parent Loop BB8_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB8_24
.LBB8_25:                               # %._crit_edge.us63
                                        #   in Loop: Header=BB8_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB8_17
# %bb.26:                               #   in Loop: Header=BB8_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB8_17
.LBB8_27:                               # %.preheader46.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB8_29
	.p2align	4, , 16
.LBB8_28:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB8_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB8_31
.LBB8_29:                               # %.preheader46
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB8_28
# %bb.30:                               #   in Loop: Header=BB8_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB8_28
.LBB8_31:                               # %._crit_edge55
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB8_33
# %bb.32:                               # %._crit_edge55
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB8_35
.LBB8_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB8_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB8_35:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI8_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI8_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB8_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end8:
	.size	_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc, .Lfunc_end8-_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN14for_loop_testsILi28EiE7do_testEPKiPKc,"axG",@progbits,_ZN14for_loop_testsILi28EiE7do_testEPKiPKc,comdat
	.weak	_ZN14for_loop_testsILi28EiE7do_testEPKiPKc # -- Begin function _ZN14for_loop_testsILi28EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN14for_loop_testsILi28EiE7do_testEPKiPKc,@function
_ZN14for_loop_testsILi28EiE7do_testEPKiPKc: # @_ZN14for_loop_testsILi28EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN14for_loop_testsILi19EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1900
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 2000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s1, $s1, 2047
	addi.d	$a2, $s1, 53
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 153
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 253
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 353
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 453
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 553
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 653
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end9:
	.size	_ZN14for_loop_testsILi28EiE7do_testEPKiPKc, .Lfunc_end9-_ZN14for_loop_testsILi28EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc
.LCPI10_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI10_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB10_31
# %bb.1:                                # %.preheader45.lr.ph
	ori	$a0, $zero, 29
	blt	$s0, $a0, .LBB10_15
# %bb.2:                                # %.preheader45.us.preheader
	addi.d	$a2, $s0, -28
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -361578
	ori	$a3, $a3, 283
	lu32i.d	$a3, -289263
	lu52i.d	$a3, $a3, 423
	mulh.du	$a3, $a2, $a3
	sub.d	$a2, $a2, $a3
	srli.d	$a2, $a2, 1
	add.d	$a2, $a2, $a3
	srli.d	$a2, $a2, 4
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 30
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -29
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 132
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 329177
	ori	$s5, $a0, 2520
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB10_4
	.p2align	4, , 16
.LBB10_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB10_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB10_31
.LBB10_4:                               # %.preheader45.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_5 Depth 2
                                        #     Child Loop BB10_9 Depth 2
                                        #     Child Loop BB10_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a4, $zero, 29
	move	$a5, $fp
	.p2align	4, , 16
.LBB10_5:                               #   Parent Loop BB10_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a3, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a3, 4
	ld.w	$t0, $a3, 8
	ld.w	$t1, $a3, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a3, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 92
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 96
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 100
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 104
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 108
	ld.w	$t2, $a3, 112
	add.d	$a3, $a6, $a7
	add.d	$a3, $a3, $t0
	add.d	$a7, $a3, $t1
	move	$a3, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a2, $a2, 29
	addi.d	$a4, $a3, 29
	addi.d	$a5, $a5, 116
	bltu	$a2, $s2, .LBB10_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB10_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB10_13
# %bb.7:                                # %.lr.ph51.us.preheader
                                        #   in Loop: Header=BB10_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a2, $a4, .LBB10_11
# %bb.8:                                # %vector.ph92
                                        #   in Loop: Header=BB10_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI10_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI10_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a3, $a3, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB10_9:                               # %vector.body95
                                        #   Parent Loop BB10_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s3
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB10_9
# %bb.10:                               # %middle.block102
                                        #   in Loop: Header=BB10_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a4, .LBB10_13
.LBB10_11:                              # %.lr.ph51.us.preheader107
                                        #   in Loop: Header=BB10_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	.p2align	4, , 16
.LBB10_12:                              # %.lr.ph51.us
                                        #   Parent Loop BB10_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a3, $a3, 1
	addi.d	$a2, $a2, 4
	bltu	$a3, $s0, .LBB10_12
.LBB10_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB10_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB10_3
# %bb.14:                               #   in Loop: Header=BB10_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB10_3
.LBB10_15:                              # %.preheader45.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB10_27
# %bb.16:                               # %.preheader45.us55.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB10_18
	.p2align	4, , 16
.LBB10_17:                              # %_Z9check_sumIiEvT_.exit.us58
                                        #   in Loop: Header=BB10_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB10_31
.LBB10_18:                              # %.preheader45.us55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_21 Depth 2
                                        #     Child Loop BB10_24 Depth 2
	bgeu	$s0, $a5, .LBB10_20
# %bb.19:                               #   in Loop: Header=BB10_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB10_23
	.p2align	4, , 16
.LBB10_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB10_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB10_21:                              # %vector.body
                                        #   Parent Loop BB10_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB10_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB10_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB10_25
.LBB10_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB10_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB10_24:                              # %scalar.ph
                                        #   Parent Loop BB10_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB10_24
.LBB10_25:                              # %._crit_edge.us62
                                        #   in Loop: Header=BB10_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB10_17
# %bb.26:                               #   in Loop: Header=BB10_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB10_17
.LBB10_27:                              # %.preheader45.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB10_29
	.p2align	4, , 16
.LBB10_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB10_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB10_31
.LBB10_29:                              # %.preheader45
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB10_28
# %bb.30:                               #   in Loop: Header=BB10_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB10_28
.LBB10_31:                              # %._crit_edge54
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB10_33
# %bb.32:                               # %._crit_edge54
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB10_35
.LBB10_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB10_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB10_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI10_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI10_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB10_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end10:
	.size	_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc, .Lfunc_end10-_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc
.LCPI11_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI11_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB11_31
# %bb.1:                                # %.preheader44.lr.ph
	ori	$a0, $zero, 28
	blt	$s0, $a0, .LBB11_15
# %bb.2:                                # %.preheader44.us.preheader
	addi.d	$a2, $s0, -27
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	srli.d	$a2, $a2, 2
	lu12i.w	$a3, 149796
	ori	$a3, $a3, 2341
	lu32i.d	$a3, 299593
	lu52i.d	$a3, $a3, 1170
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 1
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 29
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -28
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 128
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -441487
	ori	$s3, $a0, 32
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB11_4
	.p2align	4, , 16
.LBB11_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB11_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB11_31
.LBB11_4:                               # %.preheader44.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_5 Depth 2
                                        #     Child Loop BB11_9 Depth 2
                                        #     Child Loop BB11_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a4, $zero, 28
	move	$a5, $fp
	.p2align	4, , 16
.LBB11_5:                               #   Parent Loop BB11_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a3, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a3, 4
	ld.w	$t0, $a3, 8
	ld.w	$t1, $a3, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a3, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 92
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 96
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 100
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 104
	ld.w	$t2, $a3, 108
	add.d	$a3, $a6, $t1
	add.d	$a3, $a3, $a7
	add.d	$a7, $a3, $t0
	move	$a3, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 28
	addi.d	$a4, $a3, 28
	addi.d	$a5, $a5, 112
	bltu	$a2, $s2, .LBB11_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB11_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB11_13
# %bb.7:                                # %.lr.ph50.us.preheader
                                        #   in Loop: Header=BB11_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a2, $a4, .LBB11_11
# %bb.8:                                # %vector.ph91
                                        #   in Loop: Header=BB11_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI11_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI11_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a3, $a3, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB11_9:                               # %vector.body94
                                        #   Parent Loop BB11_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB11_9
# %bb.10:                               # %middle.block101
                                        #   in Loop: Header=BB11_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a4, .LBB11_13
.LBB11_11:                              # %.lr.ph50.us.preheader106
                                        #   in Loop: Header=BB11_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	.p2align	4, , 16
.LBB11_12:                              # %.lr.ph50.us
                                        #   Parent Loop BB11_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, 1
	addi.d	$a2, $a2, 4
	bltu	$a3, $s0, .LBB11_12
.LBB11_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB11_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB11_3
# %bb.14:                               #   in Loop: Header=BB11_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB11_3
.LBB11_15:                              # %.preheader44.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB11_27
# %bb.16:                               # %.preheader44.us54.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB11_18
	.p2align	4, , 16
.LBB11_17:                              # %_Z9check_sumIiEvT_.exit.us57
                                        #   in Loop: Header=BB11_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB11_31
.LBB11_18:                              # %.preheader44.us54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_21 Depth 2
                                        #     Child Loop BB11_24 Depth 2
	bgeu	$s0, $a5, .LBB11_20
# %bb.19:                               #   in Loop: Header=BB11_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB11_23
	.p2align	4, , 16
.LBB11_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB11_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB11_21:                              # %vector.body
                                        #   Parent Loop BB11_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB11_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB11_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB11_25
.LBB11_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB11_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB11_24:                              # %scalar.ph
                                        #   Parent Loop BB11_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB11_24
.LBB11_25:                              # %._crit_edge.us61
                                        #   in Loop: Header=BB11_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB11_17
# %bb.26:                               #   in Loop: Header=BB11_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB11_17
.LBB11_27:                              # %.preheader44.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB11_29
	.p2align	4, , 16
.LBB11_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB11_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB11_31
.LBB11_29:                              # %.preheader44
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB11_28
# %bb.30:                               #   in Loop: Header=BB11_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB11_28
.LBB11_31:                              # %._crit_edge53
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB11_33
# %bb.32:                               # %._crit_edge53
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB11_35
.LBB11_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB11_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB11_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI11_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI11_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB11_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end11:
	.size	_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc, .Lfunc_end11-_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc
.LCPI12_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI12_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB12_31
# %bb.1:                                # %.preheader43.lr.ph
	ori	$a0, $zero, 27
	blt	$s0, $a0, .LBB12_15
# %bb.2:                                # %.preheader43.us.preheader
	addi.d	$a2, $s0, -26
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, 38836
	ori	$a3, $a3, 607
	lu32i.d	$a3, 271853
	lu52i.d	$a3, $a3, -1669
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 4
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 28
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -27
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 124
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -163576
	ori	$s3, $a0, 1640
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB12_4
	.p2align	4, , 16
.LBB12_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB12_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB12_31
.LBB12_4:                               # %.preheader43.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_5 Depth 2
                                        #     Child Loop BB12_9 Depth 2
                                        #     Child Loop BB12_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a4, $zero, 27
	move	$a5, $fp
	.p2align	4, , 16
.LBB12_5:                               #   Parent Loop BB12_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a3, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a3, 4
	ld.w	$t0, $a3, 8
	ld.w	$t1, $a3, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a3, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 92
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 96
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 100
	ld.w	$t2, $a3, 104
	add.d	$a3, $a6, $t0
	add.d	$a3, $a3, $t1
	add.d	$a7, $a3, $a7
	move	$a3, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 27
	addi.d	$a4, $a3, 27
	addi.d	$a5, $a5, 108
	bltu	$a2, $s2, .LBB12_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB12_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB12_13
# %bb.7:                                # %.lr.ph49.us.preheader
                                        #   in Loop: Header=BB12_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a2, $a4, .LBB12_11
# %bb.8:                                # %vector.ph90
                                        #   in Loop: Header=BB12_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI12_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI12_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a3, $a3, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB12_9:                               # %vector.body93
                                        #   Parent Loop BB12_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB12_9
# %bb.10:                               # %middle.block100
                                        #   in Loop: Header=BB12_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a4, .LBB12_13
.LBB12_11:                              # %.lr.ph49.us.preheader105
                                        #   in Loop: Header=BB12_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	.p2align	4, , 16
.LBB12_12:                              # %.lr.ph49.us
                                        #   Parent Loop BB12_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, 1
	addi.d	$a2, $a2, 4
	bltu	$a3, $s0, .LBB12_12
.LBB12_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB12_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB12_3
# %bb.14:                               #   in Loop: Header=BB12_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB12_3
.LBB12_15:                              # %.preheader43.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB12_27
# %bb.16:                               # %.preheader43.us53.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB12_18
	.p2align	4, , 16
.LBB12_17:                              # %_Z9check_sumIiEvT_.exit.us56
                                        #   in Loop: Header=BB12_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB12_31
.LBB12_18:                              # %.preheader43.us53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_21 Depth 2
                                        #     Child Loop BB12_24 Depth 2
	bgeu	$s0, $a5, .LBB12_20
# %bb.19:                               #   in Loop: Header=BB12_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB12_23
	.p2align	4, , 16
.LBB12_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB12_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB12_21:                              # %vector.body
                                        #   Parent Loop BB12_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB12_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB12_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB12_25
.LBB12_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB12_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB12_24:                              # %scalar.ph
                                        #   Parent Loop BB12_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB12_24
.LBB12_25:                              # %._crit_edge.us60
                                        #   in Loop: Header=BB12_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB12_17
# %bb.26:                               #   in Loop: Header=BB12_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB12_17
.LBB12_27:                              # %.preheader43.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB12_29
	.p2align	4, , 16
.LBB12_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB12_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB12_31
.LBB12_29:                              # %.preheader43
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB12_28
# %bb.30:                               #   in Loop: Header=BB12_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB12_28
.LBB12_31:                              # %._crit_edge52
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB12_33
# %bb.32:                               # %._crit_edge52
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB12_35
.LBB12_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB12_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB12_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI12_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI12_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB12_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end12:
	.size	_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc, .Lfunc_end12-_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc
.LCPI13_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI13_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB13_31
# %bb.1:                                # %.preheader42.lr.ph
	ori	$a0, $zero, 26
	blt	$s0, $a0, .LBB13_15
# %bb.2:                                # %.preheader42.us.preheader
	addi.d	$a2, $s0, -25
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -241980
	ori	$a3, $a3, 3781
	lu32i.d	$a3, 322638
	lu52i.d	$a3, $a3, 1260
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 3
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 27
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$s8, $a0, -26
	move	$s7, $zero
	st.d	$s8, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$s8, $zero, 2, 0
	addi.d	$fp, $s1, 120
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	b	.LBB13_4
	.p2align	4, , 16
.LBB13_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB13_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB13_31
.LBB13_4:                               # %.preheader42.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_5 Depth 2
                                        #     Child Loop BB13_9 Depth 2
                                        #     Child Loop BB13_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a4, $zero, 26
	move	$a5, $fp
	.p2align	4, , 16
.LBB13_5:                               #   Parent Loop BB13_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a3, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a3, 4
	ld.w	$t0, $a3, 8
	ld.w	$t1, $a3, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a3, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 92
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 96
	ld.w	$t2, $a3, 100
	add.d	$a3, $a6, $a7
	add.w	$a3, $a3, $t0
	add.d	$a7, $a3, $t1
	move	$a3, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	addu16i.d	$a0, $a0, 7146
	addi.w	$a0, $a0, -848
	addi.d	$a2, $a2, 26
	addi.d	$a4, $a3, 26
	addi.d	$a5, $a5, 104
	bltu	$a2, $s2, .LBB13_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB13_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB13_13
# %bb.7:                                # %.lr.ph48.us.preheader
                                        #   in Loop: Header=BB13_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a2, $a4, .LBB13_11
# %bb.8:                                # %vector.ph89
                                        #   in Loop: Header=BB13_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI13_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI13_0)
	add.d	$a3, $a3, $s8
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $s8
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB13_9:                               # %vector.body92
                                        #   Parent Loop BB13_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s3
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB13_9
# %bb.10:                               # %middle.block99
                                        #   in Loop: Header=BB13_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	beq	$a2, $s8, .LBB13_13
.LBB13_11:                              # %.lr.ph48.us.preheader104
                                        #   in Loop: Header=BB13_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	.p2align	4, , 16
.LBB13_12:                              # %.lr.ph48.us
                                        #   Parent Loop BB13_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a3, $a3, 1
	addi.d	$a2, $a2, 4
	bltu	$a3, $s0, .LBB13_12
.LBB13_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB13_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB13_3
# %bb.14:                               #   in Loop: Header=BB13_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB13_3
.LBB13_15:                              # %.preheader42.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB13_27
# %bb.16:                               # %.preheader42.us52.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB13_18
	.p2align	4, , 16
.LBB13_17:                              # %_Z9check_sumIiEvT_.exit.us55
                                        #   in Loop: Header=BB13_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB13_31
.LBB13_18:                              # %.preheader42.us52
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_21 Depth 2
                                        #     Child Loop BB13_24 Depth 2
	bgeu	$s0, $a5, .LBB13_20
# %bb.19:                               #   in Loop: Header=BB13_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB13_23
	.p2align	4, , 16
.LBB13_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB13_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB13_21:                              # %vector.body
                                        #   Parent Loop BB13_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB13_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB13_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB13_25
.LBB13_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB13_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB13_24:                              # %scalar.ph
                                        #   Parent Loop BB13_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB13_24
.LBB13_25:                              # %._crit_edge.us59
                                        #   in Loop: Header=BB13_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB13_17
# %bb.26:                               #   in Loop: Header=BB13_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB13_17
.LBB13_27:                              # %.preheader42.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB13_29
	.p2align	4, , 16
.LBB13_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB13_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB13_31
.LBB13_29:                              # %.preheader42
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB13_28
# %bb.30:                               #   in Loop: Header=BB13_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB13_28
.LBB13_31:                              # %._crit_edge51
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB13_33
# %bb.32:                               # %._crit_edge51
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB13_35
.LBB13_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB13_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB13_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI13_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI13_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB13_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end13:
	.size	_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc, .Lfunc_end13-_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc
.LCPI14_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI14_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB14_31
# %bb.1:                                # %.preheader41.lr.ph
	ori	$a0, $zero, 25
	blt	$s0, $a0, .LBB14_15
# %bb.2:                                # %.preheader41.us.preheader
	addi.d	$a2, $s0, -24
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -125830
	ori	$a3, $a3, 3605
	lu32i.d	$a3, -125830
	lu52i.d	$a3, $a3, 1146
	mulh.du	$a3, $a2, $a3
	sub.d	$a2, $a2, $a3
	srli.d	$a2, $a2, 1
	add.d	$a2, $a2, $a3
	srli.d	$a2, $a2, 4
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 26
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -25
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 116
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 392247
	ori	$s3, $a0, 760
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB14_4
	.p2align	4, , 16
.LBB14_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB14_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB14_31
.LBB14_4:                               # %.preheader41.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_5 Depth 2
                                        #     Child Loop BB14_9 Depth 2
                                        #     Child Loop BB14_12 Depth 2
	move	$a3, $zero
	move	$a0, $zero
	ori	$a4, $zero, 25
	move	$a5, $fp
	.p2align	4, , 16
.LBB14_5:                               #   Parent Loop BB14_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a2, $a3, $s1, 2
	slli.d	$a6, $a3, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a2, 4
	ld.w	$t0, $a2, 8
	ld.w	$t1, $a2, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a2, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 92
	ld.w	$t2, $a2, 96
	add.d	$a2, $a6, $t1
	add.d	$a2, $a2, $a7
	add.d	$a7, $a2, $t0
	move	$a2, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a3, $a3, 25
	addi.d	$a4, $a2, 25
	addi.d	$a5, $a5, 100
	bltu	$a3, $s2, .LBB14_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB14_4 Depth=1
	addi.w	$a3, $a3, 0
	bge	$a3, $s0, .LBB14_13
# %bb.7:                                # %.lr.ph47.us.preheader
                                        #   in Loop: Header=BB14_4 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a3, $a4, .LBB14_11
# %bb.8:                                # %vector.ph88
                                        #   in Loop: Header=BB14_4 Depth=1
	pcalau12i	$a3, %pc_hi20(.LCPI14_0)
	vld	$vr0, $a3, %pc_lo12(.LCPI14_0)
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	add.d	$a2, $a2, $a3
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a3
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB14_9:                               # %vector.body91
                                        #   Parent Loop BB14_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB14_9
# %bb.10:                               # %middle.block98
                                        #   in Loop: Header=BB14_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB14_13
.LBB14_11:                              # %.lr.ph47.us.preheader103
                                        #   in Loop: Header=BB14_4 Depth=1
	alsl.d	$a3, $a2, $s1, 2
	.p2align	4, , 16
.LBB14_12:                              # %.lr.ph47.us
                                        #   Parent Loop BB14_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a2, $a2, 1
	addi.d	$a3, $a3, 4
	bltu	$a2, $s0, .LBB14_12
.LBB14_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB14_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB14_3
# %bb.14:                               #   in Loop: Header=BB14_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB14_3
.LBB14_15:                              # %.preheader41.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB14_27
# %bb.16:                               # %.preheader41.us51.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB14_18
	.p2align	4, , 16
.LBB14_17:                              # %_Z9check_sumIiEvT_.exit.us54
                                        #   in Loop: Header=BB14_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB14_31
.LBB14_18:                              # %.preheader41.us51
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_21 Depth 2
                                        #     Child Loop BB14_24 Depth 2
	bgeu	$s0, $a5, .LBB14_20
# %bb.19:                               #   in Loop: Header=BB14_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB14_23
	.p2align	4, , 16
.LBB14_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB14_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB14_21:                              # %vector.body
                                        #   Parent Loop BB14_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB14_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB14_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB14_25
.LBB14_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB14_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB14_24:                              # %scalar.ph
                                        #   Parent Loop BB14_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB14_24
.LBB14_25:                              # %._crit_edge.us58
                                        #   in Loop: Header=BB14_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB14_17
# %bb.26:                               #   in Loop: Header=BB14_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB14_17
.LBB14_27:                              # %.preheader41.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB14_29
	.p2align	4, , 16
.LBB14_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB14_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB14_31
.LBB14_29:                              # %.preheader41
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB14_28
# %bb.30:                               #   in Loop: Header=BB14_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB14_28
.LBB14_31:                              # %._crit_edge50
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB14_33
# %bb.32:                               # %._crit_edge50
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB14_35
.LBB14_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB14_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB14_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI14_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI14_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB14_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end14:
	.size	_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc, .Lfunc_end14-_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc
.LCPI15_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI15_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB15_31
# %bb.1:                                # %.preheader40.lr.ph
	ori	$a0, $zero, 24
	blt	$s0, $a0, .LBB15_15
# %bb.2:                                # %.preheader40.us.preheader
	addi.d	$a2, $s0, -23
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -349526
	ori	$a3, $a3, 2731
	lu32i.d	$a3, -349526
	lu52i.d	$a3, $a3, -1366
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 4
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 25
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -24
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 112
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -378418
	ori	$s3, $a0, 2368
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB15_4
	.p2align	4, , 16
.LBB15_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB15_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB15_31
.LBB15_4:                               # %.preheader40.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_5 Depth 2
                                        #     Child Loop BB15_9 Depth 2
                                        #     Child Loop BB15_12 Depth 2
	move	$a3, $zero
	move	$a0, $zero
	ori	$a4, $zero, 24
	move	$a5, $fp
	.p2align	4, , 16
.LBB15_5:                               #   Parent Loop BB15_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a2, $a3, $s1, 2
	slli.d	$a6, $a3, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a2, 4
	ld.w	$t0, $a2, 8
	ld.w	$t1, $a2, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a2, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 88
	ld.w	$t2, $a2, 92
	add.d	$a2, $a6, $t0
	add.d	$a2, $a2, $t1
	add.d	$a7, $a2, $a7
	move	$a2, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a3, $a3, 24
	addi.d	$a4, $a2, 24
	addi.d	$a5, $a5, 96
	bltu	$a3, $s2, .LBB15_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB15_4 Depth=1
	addi.w	$a3, $a3, 0
	bge	$a3, $s0, .LBB15_13
# %bb.7:                                # %.lr.ph46.us.preheader
                                        #   in Loop: Header=BB15_4 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a3, $a4, .LBB15_11
# %bb.8:                                # %vector.ph87
                                        #   in Loop: Header=BB15_4 Depth=1
	pcalau12i	$a3, %pc_hi20(.LCPI15_0)
	vld	$vr0, $a3, %pc_lo12(.LCPI15_0)
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	add.d	$a2, $a2, $a3
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a3
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB15_9:                               # %vector.body90
                                        #   Parent Loop BB15_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB15_9
# %bb.10:                               # %middle.block97
                                        #   in Loop: Header=BB15_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB15_13
.LBB15_11:                              # %.lr.ph46.us.preheader102
                                        #   in Loop: Header=BB15_4 Depth=1
	alsl.d	$a3, $a2, $s1, 2
	.p2align	4, , 16
.LBB15_12:                              # %.lr.ph46.us
                                        #   Parent Loop BB15_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a2, $a2, 1
	addi.d	$a3, $a3, 4
	bltu	$a2, $s0, .LBB15_12
.LBB15_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB15_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB15_3
# %bb.14:                               #   in Loop: Header=BB15_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB15_3
.LBB15_15:                              # %.preheader40.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB15_27
# %bb.16:                               # %.preheader40.us50.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB15_18
	.p2align	4, , 16
.LBB15_17:                              # %_Z9check_sumIiEvT_.exit.us53
                                        #   in Loop: Header=BB15_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB15_31
.LBB15_18:                              # %.preheader40.us50
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_21 Depth 2
                                        #     Child Loop BB15_24 Depth 2
	bgeu	$s0, $a5, .LBB15_20
# %bb.19:                               #   in Loop: Header=BB15_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB15_23
	.p2align	4, , 16
.LBB15_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB15_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB15_21:                              # %vector.body
                                        #   Parent Loop BB15_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB15_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB15_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB15_25
.LBB15_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB15_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB15_24:                              # %scalar.ph
                                        #   Parent Loop BB15_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB15_24
.LBB15_25:                              # %._crit_edge.us57
                                        #   in Loop: Header=BB15_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB15_17
# %bb.26:                               #   in Loop: Header=BB15_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB15_17
.LBB15_27:                              # %.preheader40.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB15_29
	.p2align	4, , 16
.LBB15_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB15_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB15_31
.LBB15_29:                              # %.preheader40
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB15_28
# %bb.30:                               #   in Loop: Header=BB15_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB15_28
.LBB15_31:                              # %._crit_edge49
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB15_33
# %bb.32:                               # %._crit_edge49
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB15_35
.LBB15_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB15_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB15_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI15_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI15_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB15_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end15:
	.size	_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc, .Lfunc_end15-_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc
.LCPI16_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI16_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB16_31
# %bb.1:                                # %.preheader39.lr.ph
	ori	$a0, $zero, 23
	blt	$s0, $a0, .LBB16_15
# %bb.2:                                # %.preheader39.us.preheader
	addi.d	$a2, $s0, -22
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -319132
	ori	$a3, $a3, 713
	lu32i.d	$a3, -227952
	lu52i.d	$a3, $a3, 1602
	mulh.du	$a3, $a2, $a3
	sub.d	$a2, $a2, $a3
	srli.d	$a2, $a2, 1
	add.d	$a2, $a2, $a3
	srli.d	$a2, $a2, 4
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 24
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -23
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 108
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -100507
	ori	$s3, $a0, 3976
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB16_4
	.p2align	4, , 16
.LBB16_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB16_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB16_31
.LBB16_4:                               # %.preheader39.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_5 Depth 2
                                        #     Child Loop BB16_9 Depth 2
                                        #     Child Loop BB16_12 Depth 2
	move	$a3, $zero
	move	$a0, $zero
	ori	$a4, $zero, 23
	move	$a5, $fp
	.p2align	4, , 16
.LBB16_5:                               #   Parent Loop BB16_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a2, $a3, $s1, 2
	slli.d	$a6, $a3, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a2, 4
	ld.w	$t0, $a2, 8
	ld.w	$t1, $a2, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a2, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 84
	ld.w	$t2, $a2, 88
	add.d	$a2, $a6, $a7
	add.d	$a2, $a2, $t0
	add.d	$a7, $a2, $t1
	move	$a2, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a3, $a3, 23
	addi.d	$a4, $a2, 23
	addi.d	$a5, $a5, 92
	bltu	$a3, $s2, .LBB16_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB16_4 Depth=1
	addi.w	$a3, $a3, 0
	bge	$a3, $s0, .LBB16_13
# %bb.7:                                # %.lr.ph45.us.preheader
                                        #   in Loop: Header=BB16_4 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a3, $a4, .LBB16_11
# %bb.8:                                # %vector.ph86
                                        #   in Loop: Header=BB16_4 Depth=1
	pcalau12i	$a3, %pc_hi20(.LCPI16_0)
	vld	$vr0, $a3, %pc_lo12(.LCPI16_0)
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	add.d	$a2, $a2, $a3
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a3
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB16_9:                               # %vector.body89
                                        #   Parent Loop BB16_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB16_9
# %bb.10:                               # %middle.block96
                                        #   in Loop: Header=BB16_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB16_13
.LBB16_11:                              # %.lr.ph45.us.preheader101
                                        #   in Loop: Header=BB16_4 Depth=1
	alsl.d	$a3, $a2, $s1, 2
	.p2align	4, , 16
.LBB16_12:                              # %.lr.ph45.us
                                        #   Parent Loop BB16_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a2, $a2, 1
	addi.d	$a3, $a3, 4
	bltu	$a2, $s0, .LBB16_12
.LBB16_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB16_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB16_3
# %bb.14:                               #   in Loop: Header=BB16_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB16_3
.LBB16_15:                              # %.preheader39.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB16_27
# %bb.16:                               # %.preheader39.us49.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB16_18
	.p2align	4, , 16
.LBB16_17:                              # %_Z9check_sumIiEvT_.exit.us52
                                        #   in Loop: Header=BB16_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB16_31
.LBB16_18:                              # %.preheader39.us49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_21 Depth 2
                                        #     Child Loop BB16_24 Depth 2
	bgeu	$s0, $a5, .LBB16_20
# %bb.19:                               #   in Loop: Header=BB16_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB16_23
	.p2align	4, , 16
.LBB16_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB16_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB16_21:                              # %vector.body
                                        #   Parent Loop BB16_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB16_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB16_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB16_25
.LBB16_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB16_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB16_24:                              # %scalar.ph
                                        #   Parent Loop BB16_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB16_24
.LBB16_25:                              # %._crit_edge.us56
                                        #   in Loop: Header=BB16_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB16_17
# %bb.26:                               #   in Loop: Header=BB16_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB16_17
.LBB16_27:                              # %.preheader39.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB16_29
	.p2align	4, , 16
.LBB16_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB16_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB16_31
.LBB16_29:                              # %.preheader39
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB16_28
# %bb.30:                               #   in Loop: Header=BB16_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB16_28
.LBB16_31:                              # %._crit_edge48
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB16_33
# %bb.32:                               # %._crit_edge48
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB16_35
.LBB16_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB16_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB16_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI16_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI16_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB16_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end16:
	.size	_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc, .Lfunc_end16-_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc
.LCPI17_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI17_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB17_31
# %bb.1:                                # %.preheader38.lr.ph
	ori	$a0, $zero, 22
	blt	$s0, $a0, .LBB17_15
# %bb.2:                                # %.preheader38.us.preheader
	addi.d	$a2, $s0, -21
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -285976
	ori	$a3, $a3, 2979
	lu32i.d	$a3, -285976
	lu52i.d	$a3, $a3, 744
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 2
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 23
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -22
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 104
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 177405
	ori	$s3, $a0, 1488
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB17_4
	.p2align	4, , 16
.LBB17_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB17_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB17_31
.LBB17_4:                               # %.preheader38.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_5 Depth 2
                                        #     Child Loop BB17_9 Depth 2
                                        #     Child Loop BB17_12 Depth 2
	move	$a3, $zero
	move	$a0, $zero
	ori	$a4, $zero, 22
	move	$a5, $fp
	.p2align	4, , 16
.LBB17_5:                               #   Parent Loop BB17_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a2, $a3, $s1, 2
	slli.d	$a6, $a3, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a2, 4
	ld.w	$t0, $a2, 8
	ld.w	$t1, $a2, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a2, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 80
	ld.w	$t2, $a2, 84
	add.d	$a2, $a6, $t1
	add.d	$a2, $a2, $a7
	add.d	$a7, $a2, $t0
	move	$a2, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a3, $a3, 22
	addi.d	$a4, $a2, 22
	addi.d	$a5, $a5, 88
	bltu	$a3, $s2, .LBB17_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB17_4 Depth=1
	addi.w	$a3, $a3, 0
	bge	$a3, $s0, .LBB17_13
# %bb.7:                                # %.lr.ph44.us.preheader
                                        #   in Loop: Header=BB17_4 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a3, $a4, .LBB17_11
# %bb.8:                                # %vector.ph85
                                        #   in Loop: Header=BB17_4 Depth=1
	pcalau12i	$a3, %pc_hi20(.LCPI17_0)
	vld	$vr0, $a3, %pc_lo12(.LCPI17_0)
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	add.d	$a2, $a2, $a3
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a3
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB17_9:                               # %vector.body88
                                        #   Parent Loop BB17_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB17_9
# %bb.10:                               # %middle.block95
                                        #   in Loop: Header=BB17_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB17_13
.LBB17_11:                              # %.lr.ph44.us.preheader100
                                        #   in Loop: Header=BB17_4 Depth=1
	alsl.d	$a3, $a2, $s1, 2
	.p2align	4, , 16
.LBB17_12:                              # %.lr.ph44.us
                                        #   Parent Loop BB17_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a2, $a2, 1
	addi.d	$a3, $a3, 4
	bltu	$a2, $s0, .LBB17_12
.LBB17_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB17_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB17_3
# %bb.14:                               #   in Loop: Header=BB17_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB17_3
.LBB17_15:                              # %.preheader38.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB17_27
# %bb.16:                               # %.preheader38.us48.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB17_18
	.p2align	4, , 16
.LBB17_17:                              # %_Z9check_sumIiEvT_.exit.us51
                                        #   in Loop: Header=BB17_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB17_31
.LBB17_18:                              # %.preheader38.us48
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_21 Depth 2
                                        #     Child Loop BB17_24 Depth 2
	bgeu	$s0, $a5, .LBB17_20
# %bb.19:                               #   in Loop: Header=BB17_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB17_23
	.p2align	4, , 16
.LBB17_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB17_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB17_21:                              # %vector.body
                                        #   Parent Loop BB17_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB17_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB17_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB17_25
.LBB17_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB17_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB17_24:                              # %scalar.ph
                                        #   Parent Loop BB17_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB17_24
.LBB17_25:                              # %._crit_edge.us55
                                        #   in Loop: Header=BB17_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB17_17
# %bb.26:                               #   in Loop: Header=BB17_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB17_17
.LBB17_27:                              # %.preheader38.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB17_29
	.p2align	4, , 16
.LBB17_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB17_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB17_31
.LBB17_29:                              # %.preheader38
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB17_28
# %bb.30:                               #   in Loop: Header=BB17_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB17_28
.LBB17_31:                              # %._crit_edge47
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB17_33
# %bb.32:                               # %._crit_edge47
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB17_35
.LBB17_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB17_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB17_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI17_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI17_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB17_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end17:
	.size	_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc, .Lfunc_end17-_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc
.LCPI18_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI18_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB18_31
# %bb.1:                                # %.preheader36.lr.ph
	ori	$a0, $zero, 21
	blt	$s0, $a0, .LBB18_15
# %bb.2:                                # %.preheader36.us.preheader
	addi.d	$a2, $s0, -20
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, 99864
	ori	$a3, $a3, 1561
	lu32i.d	$a3, -499322
	lu52i.d	$a3, $a3, -1951
	mulh.du	$a3, $a2, $a3
	sub.d	$a2, $a2, $a3
	srli.d	$a2, $a2, 1
	add.d	$a2, $a2, $a3
	srli.d	$a2, $a2, 4
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 22
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -21
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 100
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 455316
	ori	$s3, $a0, 3096
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB18_4
	.p2align	4, , 16
.LBB18_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB18_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB18_31
.LBB18_4:                               # %.preheader36.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_5 Depth 2
                                        #     Child Loop BB18_9 Depth 2
                                        #     Child Loop BB18_12 Depth 2
	move	$a3, $zero
	move	$a0, $zero
	ori	$a4, $zero, 21
	move	$a5, $fp
	.p2align	4, , 16
.LBB18_5:                               #   Parent Loop BB18_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a2, $a3, $s1, 2
	slli.d	$a6, $a3, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a2, 4
	ld.w	$t0, $a2, 8
	ld.w	$t1, $a2, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a2, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 76
	ld.w	$t2, $a2, 80
	add.d	$a2, $a6, $t0
	add.d	$a2, $a2, $t1
	add.d	$a7, $a2, $a7
	move	$a2, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a3, $a3, 21
	addi.d	$a4, $a2, 21
	addi.d	$a5, $a5, 84
	bltu	$a3, $s2, .LBB18_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB18_4 Depth=1
	addi.w	$a3, $a3, 0
	bge	$a3, $s0, .LBB18_13
# %bb.7:                                # %.lr.ph42.us.preheader
                                        #   in Loop: Header=BB18_4 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a3, $a4, .LBB18_11
# %bb.8:                                # %vector.ph83
                                        #   in Loop: Header=BB18_4 Depth=1
	pcalau12i	$a3, %pc_hi20(.LCPI18_0)
	vld	$vr0, $a3, %pc_lo12(.LCPI18_0)
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	add.d	$a2, $a2, $a3
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a3
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB18_9:                               # %vector.body86
                                        #   Parent Loop BB18_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB18_9
# %bb.10:                               # %middle.block93
                                        #   in Loop: Header=BB18_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB18_13
.LBB18_11:                              # %.lr.ph42.us.preheader98
                                        #   in Loop: Header=BB18_4 Depth=1
	alsl.d	$a3, $a2, $s1, 2
	.p2align	4, , 16
.LBB18_12:                              # %.lr.ph42.us
                                        #   Parent Loop BB18_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a2, $a2, 1
	addi.d	$a3, $a3, 4
	bltu	$a2, $s0, .LBB18_12
.LBB18_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB18_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB18_3
# %bb.14:                               #   in Loop: Header=BB18_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB18_3
.LBB18_15:                              # %.preheader36.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB18_27
# %bb.16:                               # %.preheader36.us46.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB18_18
	.p2align	4, , 16
.LBB18_17:                              # %_Z9check_sumIiEvT_.exit.us49
                                        #   in Loop: Header=BB18_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB18_31
.LBB18_18:                              # %.preheader36.us46
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_21 Depth 2
                                        #     Child Loop BB18_24 Depth 2
	bgeu	$s0, $a5, .LBB18_20
# %bb.19:                               #   in Loop: Header=BB18_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB18_23
	.p2align	4, , 16
.LBB18_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB18_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB18_21:                              # %vector.body
                                        #   Parent Loop BB18_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB18_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB18_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB18_25
.LBB18_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB18_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB18_24:                              # %scalar.ph
                                        #   Parent Loop BB18_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB18_24
.LBB18_25:                              # %._crit_edge.us53
                                        #   in Loop: Header=BB18_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB18_17
# %bb.26:                               #   in Loop: Header=BB18_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB18_17
.LBB18_27:                              # %.preheader36.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB18_29
	.p2align	4, , 16
.LBB18_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB18_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB18_31
.LBB18_29:                              # %.preheader36
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB18_28
# %bb.30:                               #   in Loop: Header=BB18_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB18_28
.LBB18_31:                              # %._crit_edge45
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB18_33
# %bb.32:                               # %._crit_edge45
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB18_35
.LBB18_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB18_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB18_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI18_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI18_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB18_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end18:
	.size	_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc, .Lfunc_end18-_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN14for_loop_testsILi19EiE7do_testEPKiPKc,"axG",@progbits,_ZN14for_loop_testsILi19EiE7do_testEPKiPKc,comdat
	.weak	_ZN14for_loop_testsILi19EiE7do_testEPKiPKc # -- Begin function _ZN14for_loop_testsILi19EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN14for_loop_testsILi19EiE7do_testEPKiPKc,@function
_ZN14for_loop_testsILi19EiE7do_testEPKiPKc: # @_ZN14for_loop_testsILi19EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN14for_loop_testsILi10EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1000
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1100
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1200
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1300
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1400
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1500
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1600
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1700
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1800
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end19:
	.size	_ZN14for_loop_testsILi19EiE7do_testEPKiPKc, .Lfunc_end19-_ZN14for_loop_testsILi19EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc
.LCPI20_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI20_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -240
	.cfi_def_cfa_offset 240
	st.d	$ra, $sp, 232                   # 8-byte Folded Spill
	st.d	$fp, $sp, 224                   # 8-byte Folded Spill
	st.d	$s0, $sp, 216                   # 8-byte Folded Spill
	st.d	$s1, $sp, 208                   # 8-byte Folded Spill
	st.d	$s2, $sp, 200                   # 8-byte Folded Spill
	st.d	$s3, $sp, 192                   # 8-byte Folded Spill
	st.d	$s4, $sp, 184                   # 8-byte Folded Spill
	st.d	$s5, $sp, 176                   # 8-byte Folded Spill
	st.d	$s6, $sp, 168                   # 8-byte Folded Spill
	st.d	$s7, $sp, 160                   # 8-byte Folded Spill
	st.d	$s8, $sp, 152                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 112                   # 8-byte Folded Spill
	ld.w	$a4, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a1, %pc_hi20(current_test)
	st.d	$a1, $sp, 120                   # 8-byte Folded Spill
	blt	$a4, $a0, .LBB20_31
# %bb.1:                                # %.preheader35.lr.ph
	ori	$a0, $zero, 20
	blt	$s0, $a0, .LBB20_15
# %bb.2:                                # %.preheader35.us.preheader
	addi.d	$a2, $s0, -19
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -209716
	ori	$a3, $a3, 3277
	lu32i.d	$a3, -209716
	lu52i.d	$a3, $a3, -820
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 4
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 21
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -20
	move	$a1, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 96
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -315348
	ori	$s3, $a0, 608
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	b	.LBB20_4
	.p2align	4, , 16
.LBB20_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB20_4 Depth=1
	addi.w	$a1, $fp, 1
	bge	$a1, $a4, .LBB20_31
.LBB20_4:                               # %.preheader35.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_5 Depth 2
                                        #     Child Loop BB20_9 Depth 2
                                        #     Child Loop BB20_12 Depth 2
	st.d	$a1, $sp, 128                   # 8-byte Folded Spill
	st.d	$a4, $sp, 144                   # 8-byte Folded Spill
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 20
	ld.d	$a6, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB20_5:                               #   Parent Loop BB20_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$s6, $a5, 52
	ld.w	$s8, $a5, 56
	ld.w	$a1, $a5, 60
	ld.w	$s7, $a5, 64
	ld.w	$s0, $a5, 68
	ld.w	$s5, $a5, 72
	ld.w	$a5, $a5, 76
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a6, $a6, $s6
	add.d	$a6, $a6, $s8
	add.d	$a1, $a6, $a1
	add.d	$a1, $a1, $s7
	add.d	$a1, $a1, $s0
	add.d	$a1, $a1, $s5
	add.d	$a1, $a1, $a5
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s3
	addi.d	$a4, $a4, 20
	addi.d	$a5, $a0, 20
	addi.d	$a6, $a3, 80
	bltu	$a4, $s2, .LBB20_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB20_4 Depth=1
	addi.w	$a1, $a4, 0
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	bge	$a1, $s0, .LBB20_13
# %bb.7:                                # %.lr.ph41.us.preheader
                                        #   in Loop: Header=BB20_4 Depth=1
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	bltu	$a1, $a4, .LBB20_11
# %bb.8:                                # %vector.ph82
                                        #   in Loop: Header=BB20_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI20_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI20_0)
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a1
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB20_9:                               # %vector.body85
                                        #   Parent Loop BB20_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB20_9
# %bb.10:                               # %middle.block92
                                        #   in Loop: Header=BB20_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 40                    # 8-byte Folded Reload
	beq	$a1, $a3, .LBB20_13
.LBB20_11:                              # %.lr.ph41.us.preheader97
                                        #   in Loop: Header=BB20_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB20_12:                              # %.lr.ph41.us
                                        #   Parent Loop BB20_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB20_12
.LBB20_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB20_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	add.w	$a0, $a0, $a1
	ld.d	$a4, $sp, 144                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	beq	$a2, $a0, .LBB20_3
# %bb.14:                               #   in Loop: Header=BB20_4 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB20_3
.LBB20_15:                              # %.preheader35.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB20_27
# %bb.16:                               # %.preheader35.us45.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 144                   # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 128                  # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 80                   # 16-byte Folded Spill
	vst	$vr5, $sp, 64                   # 16-byte Folded Spill
	b	.LBB20_18
	.p2align	4, , 16
.LBB20_17:                              # %_Z9check_sumIiEvT_.exit.us48
                                        #   in Loop: Header=BB20_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB20_31
.LBB20_18:                              # %.preheader35.us45
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_21 Depth 2
                                        #     Child Loop BB20_24 Depth 2
	bgeu	$s0, $a5, .LBB20_20
# %bb.19:                               #   in Loop: Header=BB20_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB20_23
	.p2align	4, , 16
.LBB20_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB20_18 Depth=1
	ld.d	$a0, $sp, 144                   # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 128                  # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB20_21:                              # %vector.body
                                        #   Parent Loop BB20_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB20_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB20_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB20_25
.LBB20_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB20_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB20_24:                              # %scalar.ph
                                        #   Parent Loop BB20_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $s6
	add.d	$a0, $a0, $a1
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB20_24
.LBB20_25:                              # %._crit_edge.us52
                                        #   in Loop: Header=BB20_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s5
	add.w	$a1, $a1, $s4
	beq	$a0, $a1, .LBB20_17
# %bb.26:                               #   in Loop: Header=BB20_18 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 64                   # 16-byte Folded Reload
	vld	$vr4, $sp, 80                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB20_17
.LBB20_27:                              # %.preheader35.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB20_29
	.p2align	4, , 16
.LBB20_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB20_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB20_31
.LBB20_29:                              # %.preheader35
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB20_28
# %bb.30:                               #   in Loop: Header=BB20_29 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB20_28
.LBB20_31:                              # %._crit_edge44
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 120                   # 8-byte Folded Reload
	beqz	$a2, .LBB20_33
# %bb.32:                               # %._crit_edge44
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB20_35
.LBB20_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB20_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB20_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI20_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI20_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 216                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 224                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 232                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 240
	ret
.LBB20_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end20:
	.size	_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc, .Lfunc_end20-_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc
.LCPI21_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI21_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -240
	.cfi_def_cfa_offset 240
	st.d	$ra, $sp, 232                   # 8-byte Folded Spill
	st.d	$fp, $sp, 224                   # 8-byte Folded Spill
	st.d	$s0, $sp, 216                   # 8-byte Folded Spill
	st.d	$s1, $sp, 208                   # 8-byte Folded Spill
	st.d	$s2, $sp, 200                   # 8-byte Folded Spill
	st.d	$s3, $sp, 192                   # 8-byte Folded Spill
	st.d	$s4, $sp, 184                   # 8-byte Folded Spill
	st.d	$s5, $sp, 176                   # 8-byte Folded Spill
	st.d	$s6, $sp, 168                   # 8-byte Folded Spill
	st.d	$s7, $sp, 160                   # 8-byte Folded Spill
	st.d	$s8, $sp, 152                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 112                   # 8-byte Folded Spill
	ld.w	$a4, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a1, %pc_hi20(current_test)
	st.d	$a1, $sp, 120                   # 8-byte Folded Spill
	blt	$a4, $a0, .LBB21_31
# %bb.1:                                # %.preheader34.lr.ph
	ori	$a0, $zero, 19
	blt	$s0, $a0, .LBB21_15
# %bb.2:                                # %.preheader34.us.preheader
	addi.d	$a2, $s0, -18
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, 55188
	ori	$a3, $a3, 863
	lu32i.d	$a3, 275941
	lu52i.d	$a3, $a3, -647
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 4
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 20
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -19
	move	$a1, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 92
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -37437
	ori	$s3, $a0, 2216
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	b	.LBB21_4
	.p2align	4, , 16
.LBB21_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB21_4 Depth=1
	addi.w	$a1, $fp, 1
	bge	$a1, $a4, .LBB21_31
.LBB21_4:                               # %.preheader34.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_5 Depth 2
                                        #     Child Loop BB21_9 Depth 2
                                        #     Child Loop BB21_12 Depth 2
	st.d	$a1, $sp, 128                   # 8-byte Folded Spill
	st.d	$a4, $sp, 144                   # 8-byte Folded Spill
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 19
	ld.d	$a6, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB21_5:                               #   Parent Loop BB21_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$s6, $a5, 52
	ld.w	$s8, $a5, 56
	ld.w	$a1, $a5, 60
	ld.w	$s7, $a5, 64
	ld.w	$s0, $a5, 68
	ld.w	$a5, $a5, 72
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a6, $a6, $s6
	add.d	$a6, $a6, $s8
	add.d	$a1, $a6, $a1
	add.d	$a1, $a1, $s7
	add.d	$a1, $a1, $s0
	add.d	$a1, $a1, $a5
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s3
	addi.d	$a4, $a4, 19
	addi.d	$a5, $a0, 19
	addi.d	$a6, $a3, 76
	bltu	$a4, $s2, .LBB21_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB21_4 Depth=1
	addi.w	$a1, $a4, 0
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	bge	$a1, $s0, .LBB21_13
# %bb.7:                                # %.lr.ph40.us.preheader
                                        #   in Loop: Header=BB21_4 Depth=1
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a1, $a4, .LBB21_11
# %bb.8:                                # %vector.ph81
                                        #   in Loop: Header=BB21_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI21_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI21_0)
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a1
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB21_9:                               # %vector.body84
                                        #   Parent Loop BB21_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB21_9
# %bb.10:                               # %middle.block91
                                        #   in Loop: Header=BB21_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 40                    # 8-byte Folded Reload
	beq	$a1, $a3, .LBB21_13
.LBB21_11:                              # %.lr.ph40.us.preheader96
                                        #   in Loop: Header=BB21_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB21_12:                              # %.lr.ph40.us
                                        #   Parent Loop BB21_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB21_12
.LBB21_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB21_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	add.w	$a0, $a0, $a1
	ld.d	$a4, $sp, 144                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	beq	$a2, $a0, .LBB21_3
# %bb.14:                               #   in Loop: Header=BB21_4 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB21_3
.LBB21_15:                              # %.preheader34.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB21_27
# %bb.16:                               # %.preheader34.us44.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 144                   # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 128                  # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 80                   # 16-byte Folded Spill
	vst	$vr5, $sp, 64                   # 16-byte Folded Spill
	b	.LBB21_18
	.p2align	4, , 16
.LBB21_17:                              # %_Z9check_sumIiEvT_.exit.us47
                                        #   in Loop: Header=BB21_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB21_31
.LBB21_18:                              # %.preheader34.us44
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_21 Depth 2
                                        #     Child Loop BB21_24 Depth 2
	bgeu	$s0, $a5, .LBB21_20
# %bb.19:                               #   in Loop: Header=BB21_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB21_23
	.p2align	4, , 16
.LBB21_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB21_18 Depth=1
	ld.d	$a0, $sp, 144                   # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 128                  # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB21_21:                              # %vector.body
                                        #   Parent Loop BB21_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB21_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB21_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB21_25
.LBB21_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB21_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB21_24:                              # %scalar.ph
                                        #   Parent Loop BB21_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $s6
	add.d	$a0, $a0, $a1
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB21_24
.LBB21_25:                              # %._crit_edge.us51
                                        #   in Loop: Header=BB21_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s5
	add.w	$a1, $a1, $s4
	beq	$a0, $a1, .LBB21_17
# %bb.26:                               #   in Loop: Header=BB21_18 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 64                   # 16-byte Folded Reload
	vld	$vr4, $sp, 80                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB21_17
.LBB21_27:                              # %.preheader34.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB21_29
	.p2align	4, , 16
.LBB21_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB21_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB21_31
.LBB21_29:                              # %.preheader34
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB21_28
# %bb.30:                               #   in Loop: Header=BB21_29 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB21_28
.LBB21_31:                              # %._crit_edge43
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 120                   # 8-byte Folded Reload
	beqz	$a2, .LBB21_33
# %bb.32:                               # %._crit_edge43
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB21_35
.LBB21_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB21_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB21_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI21_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI21_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 216                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 224                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 232                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 240
	ret
.LBB21_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end21:
	.size	_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc, .Lfunc_end21-_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc
.LCPI22_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI22_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -224
	.cfi_def_cfa_offset 224
	st.d	$ra, $sp, 216                   # 8-byte Folded Spill
	st.d	$fp, $sp, 208                   # 8-byte Folded Spill
	st.d	$s0, $sp, 200                   # 8-byte Folded Spill
	st.d	$s1, $sp, 192                   # 8-byte Folded Spill
	st.d	$s2, $sp, 184                   # 8-byte Folded Spill
	st.d	$s3, $sp, 176                   # 8-byte Folded Spill
	st.d	$s4, $sp, 168                   # 8-byte Folded Spill
	st.d	$s5, $sp, 160                   # 8-byte Folded Spill
	st.d	$s6, $sp, 152                   # 8-byte Folded Spill
	st.d	$s7, $sp, 144                   # 8-byte Folded Spill
	st.d	$s8, $sp, 136                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a4, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a1, %pc_hi20(current_test)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	blt	$a4, $a0, .LBB22_31
# %bb.1:                                # %.preheader33.lr.ph
	ori	$a0, $zero, 18
	blt	$s0, $a0, .LBB22_15
# %bb.2:                                # %.preheader33.us.preheader
	addi.d	$a2, $s0, -17
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -466034
	ori	$a3, $a3, 911
	lu32i.d	$a3, -116509
	lu52i.d	$a3, $a3, -456
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 4
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 19
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -18
	move	$a1, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 88
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 240474
	ori	$s3, $a0, 3824
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	b	.LBB22_4
	.p2align	4, , 16
.LBB22_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB22_4 Depth=1
	addi.w	$a1, $fp, 1
	bge	$a1, $a4, .LBB22_31
.LBB22_4:                               # %.preheader33.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_5 Depth 2
                                        #     Child Loop BB22_9 Depth 2
                                        #     Child Loop BB22_12 Depth 2
	st.d	$a1, $sp, 112                   # 8-byte Folded Spill
	st.d	$a4, $sp, 128                   # 8-byte Folded Spill
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 18
	ld.d	$a6, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB22_5:                               #   Parent Loop BB22_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$s6, $a5, 52
	ld.w	$s8, $a5, 56
	ld.w	$a1, $a5, 60
	ld.w	$s7, $a5, 64
	ld.w	$a5, $a5, 68
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a6, $a6, $s6
	add.d	$a6, $a6, $s8
	add.d	$a1, $a6, $a1
	add.d	$a1, $a1, $s7
	add.d	$a1, $a1, $a5
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s3
	addi.d	$a4, $a4, 18
	addi.d	$a5, $a0, 18
	addi.d	$a6, $a3, 72
	bltu	$a4, $s2, .LBB22_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB22_4 Depth=1
	addi.w	$a1, $a4, 0
	bge	$a1, $s0, .LBB22_13
# %bb.7:                                # %.lr.ph39.us.preheader
                                        #   in Loop: Header=BB22_4 Depth=1
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a1, $a4, .LBB22_11
# %bb.8:                                # %vector.ph80
                                        #   in Loop: Header=BB22_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI22_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI22_0)
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a1
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB22_9:                               # %vector.body83
                                        #   Parent Loop BB22_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB22_9
# %bb.10:                               # %middle.block90
                                        #   in Loop: Header=BB22_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 40                    # 8-byte Folded Reload
	beq	$a1, $a3, .LBB22_13
.LBB22_11:                              # %.lr.ph39.us.preheader95
                                        #   in Loop: Header=BB22_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB22_12:                              # %.lr.ph39.us
                                        #   Parent Loop BB22_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB22_12
.LBB22_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB22_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	add.w	$a0, $a0, $a1
	ld.d	$a4, $sp, 128                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	beq	$a2, $a0, .LBB22_3
# %bb.14:                               #   in Loop: Header=BB22_4 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB22_3
.LBB22_15:                              # %.preheader33.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB22_27
# %bb.16:                               # %.preheader33.us43.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 128                   # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 112                  # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 80                   # 16-byte Folded Spill
	vst	$vr5, $sp, 64                   # 16-byte Folded Spill
	b	.LBB22_18
	.p2align	4, , 16
.LBB22_17:                              # %_Z9check_sumIiEvT_.exit.us46
                                        #   in Loop: Header=BB22_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB22_31
.LBB22_18:                              # %.preheader33.us43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_21 Depth 2
                                        #     Child Loop BB22_24 Depth 2
	bgeu	$s0, $a5, .LBB22_20
# %bb.19:                               #   in Loop: Header=BB22_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB22_23
	.p2align	4, , 16
.LBB22_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB22_18 Depth=1
	ld.d	$a0, $sp, 128                   # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 112                  # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB22_21:                              # %vector.body
                                        #   Parent Loop BB22_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB22_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB22_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB22_25
.LBB22_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB22_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB22_24:                              # %scalar.ph
                                        #   Parent Loop BB22_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $s6
	add.d	$a0, $a0, $a1
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB22_24
.LBB22_25:                              # %._crit_edge.us50
                                        #   in Loop: Header=BB22_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s5
	add.w	$a1, $a1, $s4
	beq	$a0, $a1, .LBB22_17
# %bb.26:                               #   in Loop: Header=BB22_18 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 64                   # 16-byte Folded Reload
	vld	$vr4, $sp, 80                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB22_17
.LBB22_27:                              # %.preheader33.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB22_29
	.p2align	4, , 16
.LBB22_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB22_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB22_31
.LBB22_29:                              # %.preheader33
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB22_28
# %bb.30:                               #   in Loop: Header=BB22_29 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB22_28
.LBB22_31:                              # %._crit_edge42
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 104                   # 8-byte Folded Reload
	beqz	$a2, .LBB22_33
# %bb.32:                               # %._crit_edge42
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB22_35
.LBB22_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB22_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB22_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI22_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI22_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 200                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 208                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 216                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 224
	ret
.LBB22_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end22:
	.size	_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc, .Lfunc_end22-_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc
.LCPI23_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI23_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a4, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a1, %pc_hi20(current_test)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	blt	$a4, $a0, .LBB23_31
# %bb.1:                                # %.preheader32.lr.ph
	ori	$a0, $zero, 17
	blt	$s0, $a0, .LBB23_15
# %bb.2:                                # %.preheader32.us.preheader
	addi.d	$a2, $s0, -16
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -61681
	ori	$a2, $a2, 241
	lu32i.d	$a2, 61680
	lu52i.d	$a2, $a2, -241
	mulh.du	$a0, $a0, $a2
	addi.w	$a2, $zero, -16
	and	$a2, $a0, $a2
	srli.d	$a0, $a0, 4
	add.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 18
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -17
	move	$s7, $zero
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 84
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 518386
	ori	$s3, $a0, 1336
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	b	.LBB23_4
	.p2align	4, , 16
.LBB23_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB23_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a4, .LBB23_31
.LBB23_4:                               # %.preheader32.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_5 Depth 2
                                        #     Child Loop BB23_9 Depth 2
                                        #     Child Loop BB23_12 Depth 2
	st.d	$a4, $sp, 112                   # 8-byte Folded Spill
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 17
	ld.d	$a6, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB23_5:                               #   Parent Loop BB23_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$s6, $a5, 52
	ld.w	$s8, $a5, 56
	ld.w	$a1, $a5, 60
	ld.w	$a5, $a5, 64
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a6, $a6, $s6
	add.d	$a6, $a6, $s8
	add.d	$a1, $a6, $a1
	add.d	$a1, $a1, $a5
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s3
	addi.d	$a4, $a4, 17
	addi.d	$a5, $a0, 17
	addi.d	$a6, $a3, 68
	bltu	$a4, $s2, .LBB23_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB23_4 Depth=1
	addi.w	$a1, $a4, 0
	bge	$a1, $s0, .LBB23_13
# %bb.7:                                # %.lr.ph38.us.preheader
                                        #   in Loop: Header=BB23_4 Depth=1
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a1, $a4, .LBB23_11
# %bb.8:                                # %vector.ph79
                                        #   in Loop: Header=BB23_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI23_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI23_0)
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a1
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB23_9:                               # %vector.body82
                                        #   Parent Loop BB23_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB23_9
# %bb.10:                               # %middle.block89
                                        #   in Loop: Header=BB23_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	beq	$a1, $a3, .LBB23_13
.LBB23_11:                              # %.lr.ph38.us.preheader94
                                        #   in Loop: Header=BB23_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB23_12:                              # %.lr.ph38.us
                                        #   Parent Loop BB23_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB23_12
.LBB23_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB23_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a1
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	add.w	$a0, $a0, $a1
	ld.d	$a4, $sp, 112                   # 8-byte Folded Reload
	beq	$a2, $a0, .LBB23_3
# %bb.14:                               #   in Loop: Header=BB23_4 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB23_3
.LBB23_15:                              # %.preheader32.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB23_27
# %bb.16:                               # %.preheader32.us42.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB23_18
	.p2align	4, , 16
.LBB23_17:                              # %_Z9check_sumIiEvT_.exit.us45
                                        #   in Loop: Header=BB23_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB23_31
.LBB23_18:                              # %.preheader32.us42
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_21 Depth 2
                                        #     Child Loop BB23_24 Depth 2
	bgeu	$s0, $a5, .LBB23_20
# %bb.19:                               #   in Loop: Header=BB23_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB23_23
	.p2align	4, , 16
.LBB23_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB23_18 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB23_21:                              # %vector.body
                                        #   Parent Loop BB23_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB23_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB23_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB23_25
.LBB23_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB23_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB23_24:                              # %scalar.ph
                                        #   Parent Loop BB23_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $s6
	add.d	$a0, $a0, $a1
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB23_24
.LBB23_25:                              # %._crit_edge.us49
                                        #   in Loop: Header=BB23_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s5
	add.w	$a1, $a1, $s4
	beq	$a0, $a1, .LBB23_17
# %bb.26:                               #   in Loop: Header=BB23_18 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB23_17
.LBB23_27:                              # %.preheader32.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB23_29
	.p2align	4, , 16
.LBB23_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB23_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB23_31
.LBB23_29:                              # %.preheader32
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB23_28
# %bb.30:                               #   in Loop: Header=BB23_29 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB23_28
.LBB23_31:                              # %._crit_edge41
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 104                   # 8-byte Folded Reload
	beqz	$a2, .LBB23_33
# %bb.32:                               # %._crit_edge41
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB23_35
.LBB23_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB23_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB23_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI23_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI23_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB23_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end23:
	.size	_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc, .Lfunc_end23-_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc
.LCPI24_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI24_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 88                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 96                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB24_26
# %bb.1:                                # %.preheader31.lr.ph
	ori	$a0, $zero, 16
	blt	$s0, $a0, .LBB24_15
# %bb.2:                                # %.preheader31.us.preheader
	move	$s2, $zero
	addi.d	$a2, $s0, -15
	bstrpick.d	$s6, $a2, 31, 0
	sltu	$a2, $a0, $s6
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s6, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	bstrins.d	$a0, $zero, 3, 0
	addi.d	$a2, $a0, 17
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	addi.d	$a3, $a2, -16
	sub.d	$a4, $a3, $a0
	andi	$a2, $a2, 7
	st.d	$a4, $sp, 56                    # 8-byte Folded Spill
	sub.d	$a4, $a4, $a2
	st.d	$a4, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a4, $s1, 80
	st.d	$a4, $sp, 80                    # 8-byte Folded Spill
	st.d	$a2, $sp, 48                    # 8-byte Folded Spill
	sub.d	$a2, $a3, $a2
	sub.d	$a0, $a2, $a0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -252279
	ori	$s8, $a0, 2944
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	b	.LBB24_4
	.p2align	4, , 16
.LBB24_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB24_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB24_26
.LBB24_4:                               # %.preheader31.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_5 Depth 2
                                        #     Child Loop BB24_9 Depth 2
                                        #     Child Loop BB24_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 16
	ld.d	$a6, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB24_5:                               #   Parent Loop BB24_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$s4, $a5, 48
	ld.w	$s3, $a5, 52
	ld.w	$s5, $a5, 56
	ld.w	$a5, $a5, 60
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $s4
	add.d	$a6, $a6, $s3
	add.d	$a6, $a6, $s5
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $fp
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s8
	addi.d	$a4, $a4, 16
	addi.d	$a5, $a0, 16
	addi.d	$a6, $a3, 64
	bltu	$a4, $s6, .LBB24_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB24_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB24_13
# %bb.7:                                # %.lr.ph37.us.preheader
                                        #   in Loop: Header=BB24_4 Depth=1
	ld.d	$a4, $sp, 56                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB24_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB24_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI24_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI24_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB24_9:                               # %vector.body
                                        #   Parent Loop BB24_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s7
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB24_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB24_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	beqz	$a3, .LBB24_13
.LBB24_11:                              # %.lr.ph37.us.preheader76
                                        #   in Loop: Header=BB24_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB24_12:                              # %.lr.ph37.us
                                        #   Parent Loop BB24_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $fp
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s7
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB24_12
.LBB24_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB24_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a3, $sp, 72                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a3
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	add.w	$a0, $a0, $a3
	beq	$a2, $a0, .LBB24_3
# %bb.14:                               #   in Loop: Header=BB24_4 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB24_3
.LBB24_15:                              # %.preheader31.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB24_22
# %bb.16:                               # %.preheader31.us41.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB24_18
	.p2align	4, , 16
.LBB24_17:                              # %_Z9check_sumIiEvT_.exit.us44
                                        #   in Loop: Header=BB24_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB24_26
.LBB24_18:                              # %.preheader31.us41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB24_19:                              #   Parent Loop BB24_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB24_19
# %bb.20:                               # %._crit_edge.us48
                                        #   in Loop: Header=BB24_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB24_17
# %bb.21:                               #   in Loop: Header=BB24_18 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB24_17
.LBB24_22:                              # %.preheader31.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB24_24
	.p2align	4, , 16
.LBB24_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB24_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB24_26
.LBB24_24:                              # %.preheader31
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB24_23
# %bb.25:                               #   in Loop: Header=BB24_24 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB24_23
.LBB24_26:                              # %._crit_edge40
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	beqz	$a2, .LBB24_28
# %bb.27:                               # %._crit_edge40
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB24_30
.LBB24_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB24_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB24_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI24_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI24_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB24_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end24:
	.size	_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc, .Lfunc_end24-_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc
.LCPI25_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI25_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB25_26
# %bb.1:                                # %.preheader30.lr.ph
	ori	$a0, $zero, 15
	blt	$s0, $a0, .LBB25_15
# %bb.2:                                # %.preheader30.us.preheader
	addi.d	$a2, $s0, -14
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -489336
	ori	$a2, $a2, 2185
	lu32i.d	$a2, -489336
	lu52i.d	$a2, $a2, -1912
	mulh.du	$a0, $a0, $a2
	srli.d	$a0, $a0, 3
	slli.d	$a2, $a0, 4
	sub.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 16
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -15
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 76
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 25633
	ori	$s3, $a0, 456
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB25_4
	.p2align	4, , 16
.LBB25_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB25_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB25_26
.LBB25_4:                               # %.preheader30.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_5 Depth 2
                                        #     Child Loop BB25_9 Depth 2
                                        #     Child Loop BB25_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 15
	ld.d	$a6, $sp, 64                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB25_5:                               #   Parent Loop BB25_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$s6, $a5, 52
	ld.w	$a5, $a5, 56
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a6, $a6, $s6
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 15
	addi.d	$a5, $a0, 15
	addi.d	$a6, $a3, 60
	bltu	$a4, $s2, .LBB25_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB25_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB25_13
# %bb.7:                                # %.lr.ph36.us.preheader
                                        #   in Loop: Header=BB25_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB25_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB25_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI25_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI25_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB25_9:                               # %vector.body
                                        #   Parent Loop BB25_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB25_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB25_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB25_13
.LBB25_11:                              # %.lr.ph36.us.preheader75
                                        #   in Loop: Header=BB25_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB25_12:                              # %.lr.ph36.us
                                        #   Parent Loop BB25_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB25_12
.LBB25_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB25_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB25_3
# %bb.14:                               #   in Loop: Header=BB25_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB25_3
.LBB25_15:                              # %.preheader30.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB25_22
# %bb.16:                               # %.preheader30.us40.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB25_18
	.p2align	4, , 16
.LBB25_17:                              # %_Z9check_sumIiEvT_.exit.us43
                                        #   in Loop: Header=BB25_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB25_26
.LBB25_18:                              # %.preheader30.us40
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB25_19:                              #   Parent Loop BB25_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB25_19
# %bb.20:                               # %._crit_edge.us47
                                        #   in Loop: Header=BB25_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB25_17
# %bb.21:                               #   in Loop: Header=BB25_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB25_17
.LBB25_22:                              # %.preheader30.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB25_24
	.p2align	4, , 16
.LBB25_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB25_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB25_26
.LBB25_24:                              # %.preheader30
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB25_23
# %bb.25:                               #   in Loop: Header=BB25_24 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB25_23
.LBB25_26:                              # %._crit_edge39
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB25_28
# %bb.27:                               # %._crit_edge39
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB25_30
.LBB25_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB25_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB25_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI25_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI25_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB25_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end25:
	.size	_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc, .Lfunc_end25-_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc
.LCPI26_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI26_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB26_26
# %bb.1:                                # %.preheader29.lr.ph
	ori	$a0, $zero, 14
	blt	$s0, $a0, .LBB26_15
# %bb.2:                                # %.preheader29.us.preheader
	addi.d	$a2, $s0, -13
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	srli.d	$a2, $a2, 1
	lu12i.w	$a3, 149796
	ori	$a3, $a3, 2341
	lu32i.d	$a3, 299593
	lu52i.d	$a3, $a3, 1170
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 1
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 15
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -14
	move	$s7, $zero
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 72
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 303544
	ori	$s3, $a0, 2064
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB26_4
	.p2align	4, , 16
.LBB26_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB26_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB26_26
.LBB26_4:                               # %.preheader29.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_5 Depth 2
                                        #     Child Loop BB26_9 Depth 2
                                        #     Child Loop BB26_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 14
	ld.d	$a6, $sp, 48                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB26_5:                               #   Parent Loop BB26_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$a5, $a5, 52
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 14
	addi.d	$a5, $a0, 14
	addi.d	$a6, $a3, 56
	bltu	$a4, $s2, .LBB26_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB26_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB26_13
# %bb.7:                                # %.lr.ph35.us.preheader
                                        #   in Loop: Header=BB26_4 Depth=1
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB26_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB26_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI26_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI26_0)
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB26_9:                               # %vector.body
                                        #   Parent Loop BB26_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB26_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB26_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB26_13
.LBB26_11:                              # %.lr.ph35.us.preheader74
                                        #   in Loop: Header=BB26_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB26_12:                              # %.lr.ph35.us
                                        #   Parent Loop BB26_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB26_12
.LBB26_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB26_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB26_3
# %bb.14:                               #   in Loop: Header=BB26_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB26_3
.LBB26_15:                              # %.preheader29.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB26_22
# %bb.16:                               # %.preheader29.us39.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB26_18
	.p2align	4, , 16
.LBB26_17:                              # %_Z9check_sumIiEvT_.exit.us42
                                        #   in Loop: Header=BB26_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB26_26
.LBB26_18:                              # %.preheader29.us39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB26_19:                              #   Parent Loop BB26_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB26_19
# %bb.20:                               # %._crit_edge.us46
                                        #   in Loop: Header=BB26_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB26_17
# %bb.21:                               #   in Loop: Header=BB26_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB26_17
.LBB26_22:                              # %.preheader29.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB26_24
	.p2align	4, , 16
.LBB26_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB26_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB26_26
.LBB26_24:                              # %.preheader29
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB26_23
# %bb.25:                               #   in Loop: Header=BB26_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB26_23
.LBB26_26:                              # %._crit_edge38
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB26_28
# %bb.27:                               # %._crit_edge38
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB26_30
.LBB26_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB26_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB26_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI26_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI26_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB26_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end26:
	.size	_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc, .Lfunc_end26-_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc
.LCPI27_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI27_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 40                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 48                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB27_26
# %bb.1:                                # %.preheader28.lr.ph
	ori	$a0, $zero, 13
	blt	$s0, $a0, .LBB27_15
# %bb.2:                                # %.preheader28.us.preheader
	addi.d	$a2, $s0, -12
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -241980
	ori	$a3, $a3, 3781
	lu32i.d	$a3, 322638
	lu52i.d	$a3, $a3, 1260
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 2
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 14
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$s8, $a0, -13
	move	$s7, $zero
	st.d	$s8, $sp, 32                    # 8-byte Folded Spill
	bstrins.d	$s8, $zero, 2, 0
	addi.d	$fp, $s1, 68
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	b	.LBB27_4
	.p2align	4, , 16
.LBB27_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB27_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB27_26
.LBB27_4:                               # %.preheader28.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_5 Depth 2
                                        #     Child Loop BB27_9 Depth 2
                                        #     Child Loop BB27_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 13
	move	$a6, $fp
	.p2align	4, , 16
.LBB27_5:                               #   Parent Loop BB27_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$a5, $a5, 48
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.w	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	addu16i.d	$a2, $a2, -29195
	addi.w	$a2, $a2, -424
	addi.d	$a4, $a4, 13
	addi.d	$a5, $a0, 13
	addi.d	$a6, $a3, 52
	bltu	$a4, $s2, .LBB27_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB27_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB27_13
# %bb.7:                                # %.lr.ph34.us.preheader
                                        #   in Loop: Header=BB27_4 Depth=1
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB27_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB27_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI27_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI27_0)
	add.d	$a0, $a0, $s8
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $s8
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB27_9:                               # %vector.body
                                        #   Parent Loop BB27_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s3
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB27_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB27_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	beq	$a3, $s8, .LBB27_13
.LBB27_11:                              # %.lr.ph34.us.preheader73
                                        #   in Loop: Header=BB27_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB27_12:                              # %.lr.ph34.us
                                        #   Parent Loop BB27_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s3
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB27_12
.LBB27_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB27_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s5
	add.w	$a0, $a0, $s6
	beq	$a2, $a0, .LBB27_3
# %bb.14:                               #   in Loop: Header=BB27_4 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB27_3
.LBB27_15:                              # %.preheader28.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB27_22
# %bb.16:                               # %.preheader28.us38.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB27_18
	.p2align	4, , 16
.LBB27_17:                              # %_Z9check_sumIiEvT_.exit.us41
                                        #   in Loop: Header=BB27_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB27_26
.LBB27_18:                              # %.preheader28.us38
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB27_19:                              #   Parent Loop BB27_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB27_19
# %bb.20:                               # %._crit_edge.us45
                                        #   in Loop: Header=BB27_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB27_17
# %bb.21:                               #   in Loop: Header=BB27_18 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB27_17
.LBB27_22:                              # %.preheader28.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB27_24
	.p2align	4, , 16
.LBB27_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB27_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB27_26
.LBB27_24:                              # %.preheader28
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB27_23
# %bb.25:                               #   in Loop: Header=BB27_24 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB27_23
.LBB27_26:                              # %._crit_edge37
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	beqz	$a2, .LBB27_28
# %bb.27:                               # %._crit_edge37
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB27_30
.LBB27_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB27_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB27_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI27_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI27_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB27_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end27:
	.size	_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc, .Lfunc_end27-_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc
.LCPI28_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI28_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB28_26
# %bb.1:                                # %.preheader27.lr.ph
	ori	$a0, $zero, 12
	blt	$s0, $a0, .LBB28_15
# %bb.2:                                # %.preheader27.us.preheader
	addi.d	$a2, $s0, -11
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -349526
	ori	$a3, $a3, 2731
	lu32i.d	$a3, -349526
	lu52i.d	$a3, $a3, -1366
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 3
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 13
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -12
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 64
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -189209
	ori	$s3, $a0, 1184
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB28_4
	.p2align	4, , 16
.LBB28_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB28_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB28_26
.LBB28_4:                               # %.preheader27.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_5 Depth 2
                                        #     Child Loop BB28_9 Depth 2
                                        #     Child Loop BB28_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 12
	move	$a6, $fp
	.p2align	4, , 16
.LBB28_5:                               #   Parent Loop BB28_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$a5, $a5, 44
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 12
	addi.d	$a5, $a0, 12
	addi.d	$a6, $a3, 48
	bltu	$a4, $s2, .LBB28_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB28_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB28_13
# %bb.7:                                # %.lr.ph33.us.preheader
                                        #   in Loop: Header=BB28_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB28_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB28_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI28_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI28_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB28_9:                               # %vector.body
                                        #   Parent Loop BB28_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB28_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB28_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB28_13
.LBB28_11:                              # %.lr.ph33.us.preheader72
                                        #   in Loop: Header=BB28_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB28_12:                              # %.lr.ph33.us
                                        #   Parent Loop BB28_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB28_12
.LBB28_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB28_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB28_3
# %bb.14:                               #   in Loop: Header=BB28_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB28_3
.LBB28_15:                              # %.preheader27.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB28_22
# %bb.16:                               # %.preheader27.us37.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB28_18
	.p2align	4, , 16
.LBB28_17:                              # %_Z9check_sumIiEvT_.exit.us40
                                        #   in Loop: Header=BB28_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB28_26
.LBB28_18:                              # %.preheader27.us37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB28_19:                              #   Parent Loop BB28_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB28_19
# %bb.20:                               # %._crit_edge.us44
                                        #   in Loop: Header=BB28_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB28_17
# %bb.21:                               #   in Loop: Header=BB28_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB28_17
.LBB28_22:                              # %.preheader27.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB28_24
	.p2align	4, , 16
.LBB28_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB28_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB28_26
.LBB28_24:                              # %.preheader27
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB28_23
# %bb.25:                               #   in Loop: Header=BB28_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB28_23
.LBB28_26:                              # %._crit_edge36
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB28_28
# %bb.27:                               # %._crit_edge36
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB28_30
.LBB28_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB28_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB28_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI28_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI28_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB28_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end28:
	.size	_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc, .Lfunc_end28-_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN14for_loop_testsILi10EiE7do_testEPKiPKc,"axG",@progbits,_ZN14for_loop_testsILi10EiE7do_testEPKiPKc,comdat
	.weak	_ZN14for_loop_testsILi10EiE7do_testEPKiPKc # -- Begin function _ZN14for_loop_testsILi10EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN14for_loop_testsILi10EiE7do_testEPKiPKc,@function
_ZN14for_loop_testsILi10EiE7do_testEPKiPKc: # @_ZN14for_loop_testsILi10EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s0, $a0, %pc_lo12(temp_string)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	move	$a0, $fp
	move	$a1, $s1
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 100
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 200
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 300
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 400
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 500
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 600
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 700
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 800
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 900
	move	$a0, $fp
	move	$a1, $s1
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end29:
	.size	_ZN14for_loop_testsILi10EiE7do_testEPKiPKc, .Lfunc_end29-_ZN14for_loop_testsILi10EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc
.LCPI30_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI30_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB30_26
# %bb.1:                                # %.preheader26.lr.ph
	ori	$a0, $zero, 11
	blt	$s0, $a0, .LBB30_15
# %bb.2:                                # %.preheader26.us.preheader
	addi.d	$a2, $s0, -10
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -285976
	ori	$a3, $a3, 2979
	lu32i.d	$a3, -285976
	lu52i.d	$a3, $a3, 744
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 1
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 12
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -11
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 60
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 88702
	ori	$s3, $a0, 2792
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB30_4
	.p2align	4, , 16
.LBB30_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB30_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB30_26
.LBB30_4:                               # %.preheader26.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_5 Depth 2
                                        #     Child Loop BB30_9 Depth 2
                                        #     Child Loop BB30_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 11
	move	$a6, $fp
	.p2align	4, , 16
.LBB30_5:                               #   Parent Loop BB30_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$a5, $a5, 40
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 11
	addi.d	$a5, $a0, 11
	addi.d	$a6, $a3, 44
	bltu	$a4, $s2, .LBB30_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB30_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB30_13
# %bb.7:                                # %.lr.ph32.us.preheader
                                        #   in Loop: Header=BB30_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB30_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB30_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI30_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI30_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB30_9:                               # %vector.body
                                        #   Parent Loop BB30_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB30_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB30_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB30_13
.LBB30_11:                              # %.lr.ph32.us.preheader71
                                        #   in Loop: Header=BB30_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB30_12:                              # %.lr.ph32.us
                                        #   Parent Loop BB30_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB30_12
.LBB30_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB30_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB30_3
# %bb.14:                               #   in Loop: Header=BB30_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB30_3
.LBB30_15:                              # %.preheader26.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB30_22
# %bb.16:                               # %.preheader26.us36.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB30_18
	.p2align	4, , 16
.LBB30_17:                              # %_Z9check_sumIiEvT_.exit.us39
                                        #   in Loop: Header=BB30_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB30_26
.LBB30_18:                              # %.preheader26.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB30_19:                              #   Parent Loop BB30_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB30_19
# %bb.20:                               # %._crit_edge.us43
                                        #   in Loop: Header=BB30_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB30_17
# %bb.21:                               #   in Loop: Header=BB30_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB30_17
.LBB30_22:                              # %.preheader26.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB30_24
	.p2align	4, , 16
.LBB30_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB30_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB30_26
.LBB30_24:                              # %.preheader26
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB30_23
# %bb.25:                               #   in Loop: Header=BB30_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB30_23
.LBB30_26:                              # %._crit_edge35
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB30_28
# %bb.27:                               # %._crit_edge35
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB30_30
.LBB30_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB30_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB30_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI30_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI30_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB30_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end30:
	.size	_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc, .Lfunc_end30-_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc
.LCPI31_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI31_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB31_26
# %bb.1:                                # %.preheader25.lr.ph
	ori	$a0, $zero, 10
	blt	$s0, $a0, .LBB31_15
# %bb.2:                                # %.preheader25.us.preheader
	addi.d	$a2, $s0, -9
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -209716
	ori	$a3, $a3, 3277
	lu32i.d	$a3, -209716
	lu52i.d	$a3, $a3, -820
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 3
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 11
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -10
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 56
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 366614
	ori	$s3, $a0, 304
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB31_4
	.p2align	4, , 16
.LBB31_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB31_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB31_26
.LBB31_4:                               # %.preheader25.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_5 Depth 2
                                        #     Child Loop BB31_9 Depth 2
                                        #     Child Loop BB31_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 10
	move	$a6, $fp
	.p2align	4, , 16
.LBB31_5:                               #   Parent Loop BB31_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$a5, $a5, 36
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 10
	addi.d	$a5, $a0, 10
	addi.d	$a6, $a3, 40
	bltu	$a4, $s2, .LBB31_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB31_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB31_13
# %bb.7:                                # %.lr.ph31.us.preheader
                                        #   in Loop: Header=BB31_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB31_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB31_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI31_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI31_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB31_9:                               # %vector.body
                                        #   Parent Loop BB31_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB31_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB31_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB31_13
.LBB31_11:                              # %.lr.ph31.us.preheader70
                                        #   in Loop: Header=BB31_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB31_12:                              # %.lr.ph31.us
                                        #   Parent Loop BB31_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB31_12
.LBB31_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB31_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB31_3
# %bb.14:                               #   in Loop: Header=BB31_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB31_3
.LBB31_15:                              # %.preheader25.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB31_22
# %bb.16:                               # %.preheader25.us35.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB31_18
	.p2align	4, , 16
.LBB31_17:                              # %_Z9check_sumIiEvT_.exit.us38
                                        #   in Loop: Header=BB31_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB31_26
.LBB31_18:                              # %.preheader25.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB31_19:                              #   Parent Loop BB31_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB31_19
# %bb.20:                               # %._crit_edge.us42
                                        #   in Loop: Header=BB31_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB31_17
# %bb.21:                               #   in Loop: Header=BB31_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB31_17
.LBB31_22:                              # %.preheader25.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB31_24
	.p2align	4, , 16
.LBB31_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB31_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB31_26
.LBB31_24:                              # %.preheader25
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB31_23
# %bb.25:                               #   in Loop: Header=BB31_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB31_23
.LBB31_26:                              # %._crit_edge34
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB31_28
# %bb.27:                               # %._crit_edge34
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB31_30
.LBB31_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB31_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB31_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI31_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI31_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB31_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end31:
	.size	_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc, .Lfunc_end31-_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc
.LCPI32_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI32_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB32_26
# %bb.1:                                # %.preheader24.lr.ph
	ori	$a0, $zero, 9
	blt	$s0, $a0, .LBB32_15
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.d	$a2, $s0, -8
	bstrpick.d	$s6, $a2, 31, 0
	sltu	$a2, $a0, $s6
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s6, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -466034
	ori	$a2, $a2, 911
	lu32i.d	$a2, -116509
	lu52i.d	$a2, $a2, -456
	mulh.du	$a0, $a0, $a2
	addi.w	$a2, $zero, -8
	and	$a3, $a0, $a2
	srli.d	$a0, $a0, 3
	add.d	$a0, $a3, $a0
	addi.d	$a3, $a0, 10
	sltu	$a4, $s0, $a3
	maskeqz	$a3, $a3, $a4
	masknez	$a4, $s0, $a4
	or	$a3, $a3, $a4
	sub.d	$a0, $a3, $a0
	addi.d	$a0, $a0, -9
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	and	$a0, $a0, $a2
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 52
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -404051
	ori	$s3, $a0, 1912
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	b	.LBB32_4
	.p2align	4, , 16
.LBB32_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB32_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB32_26
.LBB32_4:                               # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_5 Depth 2
                                        #     Child Loop BB32_9 Depth 2
                                        #     Child Loop BB32_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 9
	move	$a6, $fp
	.p2align	4, , 16
.LBB32_5:                               #   Parent Loop BB32_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$a5, $a5, 32
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 9
	addi.d	$a5, $a0, 9
	addi.d	$a6, $a3, 36
	bltu	$a4, $s6, .LBB32_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB32_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB32_13
# %bb.7:                                # %.lr.ph30.us.preheader
                                        #   in Loop: Header=BB32_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB32_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB32_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI32_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI32_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB32_9:                               # %vector.body
                                        #   Parent Loop BB32_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB32_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB32_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB32_13
.LBB32_11:                              # %.lr.ph30.us.preheader69
                                        #   in Loop: Header=BB32_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB32_12:                              # %.lr.ph30.us
                                        #   Parent Loop BB32_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB32_12
.LBB32_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB32_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s8
	add.w	$a0, $a0, $s7
	beq	$a2, $a0, .LBB32_3
# %bb.14:                               #   in Loop: Header=BB32_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB32_3
.LBB32_15:                              # %.preheader24.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB32_22
# %bb.16:                               # %.preheader24.us34.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB32_18
	.p2align	4, , 16
.LBB32_17:                              # %_Z9check_sumIiEvT_.exit.us37
                                        #   in Loop: Header=BB32_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB32_26
.LBB32_18:                              # %.preheader24.us34
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB32_19:                              #   Parent Loop BB32_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB32_19
# %bb.20:                               # %._crit_edge.us41
                                        #   in Loop: Header=BB32_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB32_17
# %bb.21:                               #   in Loop: Header=BB32_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB32_17
.LBB32_22:                              # %.preheader24.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB32_24
	.p2align	4, , 16
.LBB32_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB32_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB32_26
.LBB32_24:                              # %.preheader24
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB32_23
# %bb.25:                               #   in Loop: Header=BB32_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB32_23
.LBB32_26:                              # %._crit_edge33
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB32_28
# %bb.27:                               # %._crit_edge33
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB32_30
.LBB32_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB32_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB32_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI32_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI32_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB32_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end32:
	.size	_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc, .Lfunc_end32-_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc
.LCPI33_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI33_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB33_26
# %bb.1:                                # %.preheader23.lr.ph
	ori	$t5, $zero, 8
	blt	$s0, $t5, .LBB33_15
# %bb.2:                                # %.preheader23.us.preheader
	move	$s6, $zero
	addi.d	$a0, $s0, -7
	bstrpick.d	$s7, $a0, 31, 0
	sltu	$a0, $t5, $s7
	masknez	$a2, $t5, $a0
	maskeqz	$a0, $s7, $a0
	or	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	bstrins.d	$a0, $zero, 2, 0
	addi.d	$a2, $a0, 9
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	addi.d	$a3, $a2, -8
	sub.d	$a4, $a3, $a0
	andi	$a2, $a2, 7
	st.d	$a4, $sp, 64                    # 8-byte Folded Spill
	sub.d	$a4, $a4, $a2
	st.d	$a4, $sp, 48                    # 8-byte Folded Spill
	addi.d	$s2, $s1, 48
	st.d	$a2, $sp, 56                    # 8-byte Folded Spill
	sub.d	$a2, $a3, $a2
	sub.d	$a0, $a2, $a0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -126140
	ori	$fp, $a0, 3520
	lu12i.w	$a0, -277912
	ori	$s8, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s5, $a0, 1536
	b	.LBB33_4
	.p2align	4, , 16
.LBB33_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB33_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB33_26
.LBB33_4:                               # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_5 Depth 2
                                        #     Child Loop BB33_9 Depth 2
                                        #     Child Loop BB33_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 8
	move	$a6, $s2
	.p2align	4, , 16
.LBB33_5:                               #   Parent Loop BB33_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$a5, $a5, 28
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $fp
	addi.d	$a4, $a4, 8
	addi.d	$a5, $a0, 8
	addi.d	$a6, $a3, 32
	bltu	$a4, $s7, .LBB33_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB33_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB33_13
# %bb.7:                                # %.lr.ph29.us.preheader
                                        #   in Loop: Header=BB33_4 Depth=1
	ld.d	$a4, $sp, 64                    # 8-byte Folded Reload
	bltu	$a4, $t5, .LBB33_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB33_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI33_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI33_0)
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a2, $sp, 40                    # 8-byte Folded Reload
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB33_9:                               # %vector.body
                                        #   Parent Loop BB33_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s8
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB33_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB33_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	beqz	$a3, .LBB33_13
.LBB33_11:                              # %.lr.ph29.us.preheader68
                                        #   in Loop: Header=BB33_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB33_12:                              # %.lr.ph29.us
                                        #   Parent Loop BB33_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s8
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB33_12
.LBB33_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB33_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s3
	add.w	$a0, $a0, $s5
	beq	$a2, $a0, .LBB33_3
# %bb.14:                               #   in Loop: Header=BB33_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB33_3
.LBB33_15:                              # %.preheader23.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB33_22
# %bb.16:                               # %.preheader23.us33.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB33_18
	.p2align	4, , 16
.LBB33_17:                              # %_Z9check_sumIiEvT_.exit.us36
                                        #   in Loop: Header=BB33_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB33_26
.LBB33_18:                              # %.preheader23.us33
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB33_19:                              #   Parent Loop BB33_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB33_19
# %bb.20:                               # %._crit_edge.us40
                                        #   in Loop: Header=BB33_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB33_17
# %bb.21:                               #   in Loop: Header=BB33_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB33_17
.LBB33_22:                              # %.preheader23.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB33_24
	.p2align	4, , 16
.LBB33_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB33_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB33_26
.LBB33_24:                              # %.preheader23
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB33_23
# %bb.25:                               #   in Loop: Header=BB33_24 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB33_23
.LBB33_26:                              # %._crit_edge32
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB33_28
# %bb.27:                               # %._crit_edge32
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB33_30
.LBB33_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB33_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB33_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI33_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI33_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB33_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end33:
	.size	_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc, .Lfunc_end33-_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc
.LCPI34_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI34_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB34_26
# %bb.1:                                # %.preheader22.lr.ph
	ori	$a0, $zero, 7
	blt	$s0, $a0, .LBB34_15
# %bb.2:                                # %.preheader22.us.preheader
	addi.d	$a2, $s0, -6
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -449390
	ori	$a2, $a2, 1171
	lu32i.d	$a2, 149796
	lu52i.d	$a2, $a2, 585
	mulh.du	$a2, $a0, $a2
	sub.d	$a0, $a0, $a2
	srli.d	$a0, $a0, 1
	add.d	$a0, $a0, $a2
	srli.d	$a0, $a0, 2
	slli.d	$a2, $a0, 3
	sub.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 8
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -7
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 44
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 151772
	ori	$s3, $a0, 1032
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB34_4
	.p2align	4, , 16
.LBB34_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB34_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB34_26
.LBB34_4:                               # %.preheader22.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_5 Depth 2
                                        #     Child Loop BB34_9 Depth 2
                                        #     Child Loop BB34_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 7
	move	$a6, $fp
	.p2align	4, , 16
.LBB34_5:                               #   Parent Loop BB34_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$a5, $a5, 24
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 7
	addi.d	$a5, $a0, 7
	addi.d	$a6, $a3, 28
	bltu	$a4, $s2, .LBB34_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB34_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB34_13
# %bb.7:                                # %.lr.ph28.us.preheader
                                        #   in Loop: Header=BB34_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB34_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB34_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI34_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI34_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB34_9:                               # %vector.body
                                        #   Parent Loop BB34_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB34_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB34_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB34_13
.LBB34_11:                              # %.lr.ph28.us.preheader67
                                        #   in Loop: Header=BB34_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB34_12:                              # %.lr.ph28.us
                                        #   Parent Loop BB34_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB34_12
.LBB34_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB34_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB34_3
# %bb.14:                               #   in Loop: Header=BB34_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB34_3
.LBB34_15:                              # %.preheader22.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB34_22
# %bb.16:                               # %.preheader22.us32.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB34_18
	.p2align	4, , 16
.LBB34_17:                              # %_Z9check_sumIiEvT_.exit.us35
                                        #   in Loop: Header=BB34_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB34_26
.LBB34_18:                              # %.preheader22.us32
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB34_19:                              #   Parent Loop BB34_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB34_19
# %bb.20:                               # %._crit_edge.us39
                                        #   in Loop: Header=BB34_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB34_17
# %bb.21:                               #   in Loop: Header=BB34_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB34_17
.LBB34_22:                              # %.preheader22.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB34_24
	.p2align	4, , 16
.LBB34_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB34_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB34_26
.LBB34_24:                              # %.preheader22
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB34_23
# %bb.25:                               #   in Loop: Header=BB34_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB34_23
.LBB34_26:                              # %._crit_edge31
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB34_28
# %bb.27:                               # %._crit_edge31
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB34_30
.LBB34_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB34_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB34_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI34_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI34_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB34_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end34:
	.size	_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc, .Lfunc_end34-_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc
.LCPI35_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI35_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB35_26
# %bb.1:                                # %.preheader21.lr.ph
	ori	$a0, $zero, 6
	blt	$s0, $a0, .LBB35_15
# %bb.2:                                # %.preheader21.us.preheader
	addi.d	$a2, $s0, -5
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -349526
	ori	$a3, $a3, 2731
	lu32i.d	$a3, -349526
	lu52i.d	$a3, $a3, -1366
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 2
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 7
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -6
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 40
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 429683
	ori	$s3, $a0, 2640
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB35_4
	.p2align	4, , 16
.LBB35_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB35_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB35_26
.LBB35_4:                               # %.preheader21.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_5 Depth 2
                                        #     Child Loop BB35_9 Depth 2
                                        #     Child Loop BB35_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 6
	move	$a6, $fp
	.p2align	4, , 16
.LBB35_5:                               #   Parent Loop BB35_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$a5, $a5, 20
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 6
	addi.d	$a5, $a0, 6
	addi.d	$a6, $a3, 24
	bltu	$a4, $s2, .LBB35_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB35_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB35_13
# %bb.7:                                # %.lr.ph27.us.preheader
                                        #   in Loop: Header=BB35_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB35_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB35_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI35_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI35_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB35_9:                               # %vector.body
                                        #   Parent Loop BB35_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB35_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB35_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB35_13
.LBB35_11:                              # %.lr.ph27.us.preheader66
                                        #   in Loop: Header=BB35_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB35_12:                              # %.lr.ph27.us
                                        #   Parent Loop BB35_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB35_12
.LBB35_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB35_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB35_3
# %bb.14:                               #   in Loop: Header=BB35_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB35_3
.LBB35_15:                              # %.preheader21.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB35_22
# %bb.16:                               # %.preheader21.us31.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB35_18
	.p2align	4, , 16
.LBB35_17:                              # %_Z9check_sumIiEvT_.exit.us34
                                        #   in Loop: Header=BB35_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB35_26
.LBB35_18:                              # %.preheader21.us31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB35_19:                              #   Parent Loop BB35_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB35_19
# %bb.20:                               # %._crit_edge.us38
                                        #   in Loop: Header=BB35_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB35_17
# %bb.21:                               #   in Loop: Header=BB35_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB35_17
.LBB35_22:                              # %.preheader21.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB35_24
	.p2align	4, , 16
.LBB35_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB35_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB35_26
.LBB35_24:                              # %.preheader21
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB35_23
# %bb.25:                               #   in Loop: Header=BB35_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB35_23
.LBB35_26:                              # %._crit_edge30
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB35_28
# %bb.27:                               # %._crit_edge30
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB35_30
.LBB35_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB35_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB35_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI35_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI35_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB35_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end35:
	.size	_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc, .Lfunc_end35-_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc
.LCPI36_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI36_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 112                   # 8-byte Folded Spill
	blt	$a1, $a0, .LBB36_32
# %bb.1:                                # %.preheader20.lr.ph
	ori	$a0, $zero, 5
	blt	$s0, $a0, .LBB36_21
# %bb.2:                                # %.preheader20.us.preheader
	move	$s2, $zero
	addi.w	$s4, $s0, -4
	bstrpick.d	$s7, $s4, 31, 0
	sltu	$a2, $a0, $s7
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s7, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -209716
	ori	$a2, $a2, 3277
	lu32i.d	$a2, -209716
	lu52i.d	$a2, $a2, -820
	mulh.du	$a0, $a0, $a2
	srli.d	$a2, $a0, 2
	addi.w	$a3, $zero, -4
	and	$a0, $a0, $a3
	add.d	$a0, $a0, $a2
	addi.d	$a3, $a0, 6
	sltu	$a4, $s0, $a3
	maskeqz	$a3, $a3, $a4
	masknez	$a4, $s0, $a4
	or	$a3, $a3, $a4
	sub.d	$a0, $a3, $a0
	addi.d	$a3, $a0, -5
	addi.d	$a0, $a2, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$fp, $a0, 3
	slli.d	$a2, $a0, 5
	alsl.d	$a0, $a0, $a2, 3
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 5
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	st.d	$a3, $sp, 88                    # 8-byte Folded Spill
	bstrins.d	$a3, $zero, 2, 0
	st.d	$a3, $sp, 32                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	addi.d	$a2, $a0, 80
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	ori	$t4, $zero, 36
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -340981
	ori	$s1, $a0, 152
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	b	.LBB36_4
	.p2align	4, , 16
.LBB36_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB36_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB36_32
.LBB36_4:                               # %.preheader20.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_7 Depth 2
                                        #     Child Loop BB36_10 Depth 2
                                        #     Child Loop BB36_15 Depth 2
                                        #     Child Loop BB36_18 Depth 2
	bgeu	$s4, $t4, .LBB36_6
# %bb.5:                                #   in Loop: Header=BB36_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	ori	$a4, $zero, 5
	b	.LBB36_9
	.p2align	4, , 16
.LBB36_6:                               # %vector.body70.preheader
                                        #   in Loop: Header=BB36_4 Depth=1
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	move	$a2, $fp
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB36_7:                               # %vector.body70
                                        #   Parent Loop BB36_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -80
	ld.w	$a4, $a0, -60
	ld.w	$a5, $a0, -40
	ld.w	$a6, $a0, -20
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 20
	ld.w	$a5, $a0, 40
	ld.w	$a6, $a0, 60
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -76
	ld.w	$a4, $a0, -56
	ld.w	$a5, $a0, -36
	ld.w	$a6, $a0, -16
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 24
	ld.w	$a5, $a0, 44
	ld.w	$a6, $a0, 64
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	ld.w	$a3, $a0, -72
	ld.w	$a4, $a0, -52
	ld.w	$a5, $a0, -32
	ld.w	$a6, $a0, -12
	vinsgr2vr.w	$vr6, $a3, 0
	vinsgr2vr.w	$vr6, $a4, 1
	vinsgr2vr.w	$vr6, $a5, 2
	vinsgr2vr.w	$vr6, $a6, 3
	ld.w	$a3, $a0, 8
	ld.w	$a4, $a0, 28
	ld.w	$a5, $a0, 48
	ld.w	$a6, $a0, 68
	vinsgr2vr.w	$vr7, $a3, 0
	vinsgr2vr.w	$vr7, $a4, 1
	vinsgr2vr.w	$vr7, $a5, 2
	vinsgr2vr.w	$vr7, $a6, 3
	ld.w	$a3, $a0, -68
	ld.w	$a4, $a0, -48
	ld.w	$a5, $a0, -28
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr8, $a3, 0
	vinsgr2vr.w	$vr8, $a4, 1
	vinsgr2vr.w	$vr8, $a5, 2
	vinsgr2vr.w	$vr8, $a6, 3
	ld.w	$a3, $a0, 12
	ld.w	$a4, $a0, 32
	ld.w	$a5, $a0, 52
	ld.w	$a6, $a0, 72
	vinsgr2vr.w	$vr9, $a3, 0
	vinsgr2vr.w	$vr9, $a4, 1
	vinsgr2vr.w	$vr9, $a5, 2
	vinsgr2vr.w	$vr9, $a6, 3
	ld.w	$a3, $a0, -64
	ld.w	$a4, $a0, -44
	ld.w	$a5, $a0, -24
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr10, $a3, 0
	vinsgr2vr.w	$vr10, $a4, 1
	vinsgr2vr.w	$vr10, $a5, 2
	vinsgr2vr.w	$vr10, $a6, 3
	ld.w	$a3, $a0, 16
	ld.w	$a4, $a0, 36
	ld.w	$a5, $a0, 56
	ld.w	$a6, $a0, 76
	vinsgr2vr.w	$vr11, $a3, 0
	vinsgr2vr.w	$vr11, $a4, 1
	vinsgr2vr.w	$vr11, $a5, 2
	vinsgr2vr.w	$vr11, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vadd.w	$vr2, $vr2, $vr6
	vadd.w	$vr3, $vr3, $vr7
	vadd.w	$vr2, $vr2, $vr8
	vadd.w	$vr3, $vr3, $vr9
	vadd.w	$vr2, $vr2, $vr10
	vadd.w	$vr3, $vr3, $vr11
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 160
	bnez	$a2, .LBB36_7
# %bb.8:                                # %middle.block76
                                        #   in Loop: Header=BB36_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	move	$a2, $a3
	ld.d	$a5, $sp, 56                    # 8-byte Folded Reload
	beq	$a5, $fp, .LBB36_11
.LBB36_9:                               # %scalar.ph65.preheader
                                        #   in Loop: Header=BB36_4 Depth=1
	addi.d	$a3, $a4, -5
	ld.d	$a4, $sp, 80                    # 8-byte Folded Reload
	alsl.d	$a4, $a2, $a4, 2
	.p2align	4, , 16
.LBB36_10:                              # %scalar.ph65
                                        #   Parent Loop BB36_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -8
	ld.w	$a6, $a4, -4
	ld.w	$a7, $a4, 0
	ld.w	$t0, $a4, 4
	ld.w	$t1, $a4, 8
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	mul.d	$a5, $a5, $s3
	add.d	$a0, $a0, $a5
	add.w	$a0, $a0, $s1
	addi.d	$a2, $a2, 5
	addi.d	$a3, $a3, 5
	addi.d	$a4, $a4, 20
	bltu	$a2, $s7, .LBB36_10
.LBB36_11:                              # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB36_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB36_19
# %bb.12:                               # %.lr.ph26.us.preheader
                                        #   in Loop: Header=BB36_4 Depth=1
	ld.d	$a2, $sp, 88                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bgeu	$a2, $a4, .LBB36_14
# %bb.13:                               #   in Loop: Header=BB36_4 Depth=1
	move	$a2, $a3
	b	.LBB36_17
	.p2align	4, , 16
.LBB36_14:                              # %vector.ph
                                        #   in Loop: Header=BB36_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI36_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI36_0)
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	add.d	$a2, $a3, $a4
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	alsl.d	$a0, $a3, $a0, 2
	move	$a3, $a4
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB36_15:                              # %vector.body
                                        #   Parent Loop BB36_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a3, $a3, -8
	addi.d	$a0, $a0, 32
	bnez	$a3, .LBB36_15
# %bb.16:                               # %middle.block
                                        #   in Loop: Header=BB36_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB36_19
.LBB36_17:                              # %.lr.ph26.us.preheader82
                                        #   in Loop: Header=BB36_4 Depth=1
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB36_18:                              # %.lr.ph26.us
                                        #   Parent Loop BB36_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a2, $a2, 1
	addi.d	$a3, $a3, 4
	bltu	$a2, $s0, .LBB36_18
.LBB36_19:                              # %._crit_edge.us
                                        #   in Loop: Header=BB36_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB36_3
# %bb.20:                               #   in Loop: Header=BB36_4 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t4, $zero, 36
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB36_3
.LBB36_21:                              # %.preheader20.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB36_28
# %bb.22:                               # %.preheader20.us30.preheader
	lu12i.w	$a0, 65881
	ori	$s1, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB36_24
	.p2align	4, , 16
.LBB36_23:                              # %_Z9check_sumIiEvT_.exit.us33
                                        #   in Loop: Header=BB36_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB36_32
.LBB36_24:                              # %.preheader20.us30
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_25 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	.p2align	4, , 16
.LBB36_25:                              #   Parent Loop BB36_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB36_25
# %bb.26:                               # %._crit_edge.us37
                                        #   in Loop: Header=BB36_24 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB36_23
# %bb.27:                               #   in Loop: Header=BB36_24 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB36_23
.LBB36_28:                              # %.preheader20.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB36_30
	.p2align	4, , 16
.LBB36_29:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB36_30 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB36_32
.LBB36_30:                              # %.preheader20
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB36_29
# %bb.31:                               #   in Loop: Header=BB36_30 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB36_29
.LBB36_32:                              # %._crit_edge29
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB36_34
# %bb.33:                               # %._crit_edge29
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB36_36
.LBB36_34:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB36_37
# %bb.35:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB36_36:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI36_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI36_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB36_37:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end36:
	.size	_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc, .Lfunc_end36-_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc
.LCPI37_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI37_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 112                   # 8-byte Folded Spill
	blt	$a1, $a0, .LBB37_32
# %bb.1:                                # %.preheader19.lr.ph
	ori	$a0, $zero, 4
	blt	$s0, $a0, .LBB37_21
# %bb.2:                                # %.preheader19.us.preheader
	move	$s2, $zero
	addi.w	$s4, $s0, -3
	bstrpick.d	$s7, $s4, 31, 0
	sltu	$a2, $a0, $s7
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s7, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	srli.d	$a2, $a0, 2
	bstrins.d	$a0, $zero, 1, 0
	addi.d	$a3, $a0, 5
	sltu	$a4, $s0, $a3
	maskeqz	$a3, $a3, $a4
	masknez	$a4, $s0, $a4
	or	$a3, $a3, $a4
	sub.d	$a0, $a3, $a0
	addi.d	$a3, $a0, -4
	addi.d	$a0, $a2, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$fp, $a0, 3
	slli.d	$a0, $a0, 5
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 4
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	st.d	$a3, $sp, 88                    # 8-byte Folded Spill
	bstrins.d	$a3, $zero, 2, 0
	st.d	$a3, $sp, 32                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	addi.d	$a2, $a0, 64
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	ori	$t3, $zero, 29
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -63070
	ori	$s5, $a0, 1760
	lu12i.w	$a0, -277912
	ori	$s1, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	b	.LBB37_4
	.p2align	4, , 16
.LBB37_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB37_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB37_32
.LBB37_4:                               # %.preheader19.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_7 Depth 2
                                        #     Child Loop BB37_10 Depth 2
                                        #     Child Loop BB37_15 Depth 2
                                        #     Child Loop BB37_18 Depth 2
	bgeu	$s4, $t3, .LBB37_6
# %bb.5:                                #   in Loop: Header=BB37_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	ori	$a4, $zero, 4
	b	.LBB37_9
	.p2align	4, , 16
.LBB37_6:                               # %vector.body69.preheader
                                        #   in Loop: Header=BB37_4 Depth=1
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	move	$a2, $fp
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB37_7:                               # %vector.body69
                                        #   Parent Loop BB37_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -64
	ld.w	$a4, $a0, -48
	ld.w	$a5, $a0, -32
	ld.w	$a6, $a0, -16
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 16
	ld.w	$a5, $a0, 32
	ld.w	$a6, $a0, 48
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -60
	ld.w	$a4, $a0, -44
	ld.w	$a5, $a0, -28
	ld.w	$a6, $a0, -12
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 20
	ld.w	$a5, $a0, 36
	ld.w	$a6, $a0, 52
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	ld.w	$a3, $a0, -56
	ld.w	$a4, $a0, -40
	ld.w	$a5, $a0, -24
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr6, $a3, 0
	vinsgr2vr.w	$vr6, $a4, 1
	vinsgr2vr.w	$vr6, $a5, 2
	vinsgr2vr.w	$vr6, $a6, 3
	ld.w	$a3, $a0, 8
	ld.w	$a4, $a0, 24
	ld.w	$a5, $a0, 40
	ld.w	$a6, $a0, 56
	vinsgr2vr.w	$vr7, $a3, 0
	vinsgr2vr.w	$vr7, $a4, 1
	vinsgr2vr.w	$vr7, $a5, 2
	vinsgr2vr.w	$vr7, $a6, 3
	ld.w	$a3, $a0, -52
	ld.w	$a4, $a0, -36
	ld.w	$a5, $a0, -20
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr8, $a3, 0
	vinsgr2vr.w	$vr8, $a4, 1
	vinsgr2vr.w	$vr8, $a5, 2
	vinsgr2vr.w	$vr8, $a6, 3
	ld.w	$a3, $a0, 12
	ld.w	$a4, $a0, 28
	ld.w	$a5, $a0, 44
	ld.w	$a6, $a0, 60
	vinsgr2vr.w	$vr9, $a3, 0
	vinsgr2vr.w	$vr9, $a4, 1
	vinsgr2vr.w	$vr9, $a5, 2
	vinsgr2vr.w	$vr9, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vadd.w	$vr2, $vr2, $vr6
	vadd.w	$vr3, $vr3, $vr7
	vadd.w	$vr2, $vr2, $vr8
	vadd.w	$vr3, $vr3, $vr9
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 128
	bnez	$a2, .LBB37_7
# %bb.8:                                # %middle.block75
                                        #   in Loop: Header=BB37_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	move	$a2, $a3
	ld.d	$a5, $sp, 56                    # 8-byte Folded Reload
	beq	$a5, $fp, .LBB37_11
.LBB37_9:                               # %scalar.ph64.preheader
                                        #   in Loop: Header=BB37_4 Depth=1
	addi.d	$a3, $a4, -4
	ld.d	$a4, $sp, 80                    # 8-byte Folded Reload
	alsl.d	$a4, $a2, $a4, 2
	.p2align	4, , 16
.LBB37_10:                              # %scalar.ph64
                                        #   Parent Loop BB37_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -8
	ld.w	$a6, $a4, -4
	ld.w	$a7, $a4, 0
	ld.w	$t0, $a4, 4
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	mul.d	$a5, $a5, $s3
	add.d	$a0, $a0, $a5
	add.w	$a0, $a0, $s5
	addi.d	$a2, $a2, 4
	addi.d	$a3, $a3, 4
	addi.d	$a4, $a4, 16
	bltu	$a2, $s7, .LBB37_10
.LBB37_11:                              # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB37_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB37_19
# %bb.12:                               # %.lr.ph25.us.preheader
                                        #   in Loop: Header=BB37_4 Depth=1
	ld.d	$a2, $sp, 88                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bgeu	$a2, $a4, .LBB37_14
# %bb.13:                               #   in Loop: Header=BB37_4 Depth=1
	move	$a2, $a3
	b	.LBB37_17
	.p2align	4, , 16
.LBB37_14:                              # %vector.ph
                                        #   in Loop: Header=BB37_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI37_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI37_0)
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	add.d	$a2, $a3, $a4
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	alsl.d	$a0, $a3, $a0, 2
	move	$a3, $a4
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB37_15:                              # %vector.body
                                        #   Parent Loop BB37_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a3, $a3, -8
	addi.d	$a0, $a0, 32
	bnez	$a3, .LBB37_15
# %bb.16:                               # %middle.block
                                        #   in Loop: Header=BB37_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB37_19
.LBB37_17:                              # %.lr.ph25.us.preheader81
                                        #   in Loop: Header=BB37_4 Depth=1
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB37_18:                              # %.lr.ph25.us
                                        #   Parent Loop BB37_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s1
	addi.d	$a2, $a2, 1
	addi.d	$a3, $a3, 4
	bltu	$a2, $s0, .LBB37_18
.LBB37_19:                              # %._crit_edge.us
                                        #   in Loop: Header=BB37_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB37_3
# %bb.20:                               #   in Loop: Header=BB37_4 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t3, $zero, 29
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB37_3
.LBB37_21:                              # %.preheader19.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB37_28
# %bb.22:                               # %.preheader19.us29.preheader
	lu12i.w	$a0, 65881
	ori	$s1, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB37_24
	.p2align	4, , 16
.LBB37_23:                              # %_Z9check_sumIiEvT_.exit.us32
                                        #   in Loop: Header=BB37_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB37_32
.LBB37_24:                              # %.preheader19.us29
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_25 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	.p2align	4, , 16
.LBB37_25:                              #   Parent Loop BB37_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB37_25
# %bb.26:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB37_24 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB37_23
# %bb.27:                               #   in Loop: Header=BB37_24 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB37_23
.LBB37_28:                              # %.preheader19.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB37_30
	.p2align	4, , 16
.LBB37_29:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB37_30 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB37_32
.LBB37_30:                              # %.preheader19
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB37_29
# %bb.31:                               #   in Loop: Header=BB37_30 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB37_29
.LBB37_32:                              # %._crit_edge28
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB37_34
# %bb.33:                               # %._crit_edge28
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB37_36
.LBB37_34:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB37_37
# %bb.35:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB37_36:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI37_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI37_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB37_37:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end37:
	.size	_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc, .Lfunc_end37-_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc
.LCPI38_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI38_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 112                   # 8-byte Folded Spill
	blt	$a1, $a0, .LBB38_32
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 3
	blt	$s0, $a0, .LBB38_21
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s4, $s0, -2
	bstrpick.d	$s7, $s4, 31, 0
	sltu	$a2, $a0, $s7
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s7, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -349526
	ori	$a2, $a2, 2731
	lu32i.d	$a2, -349526
	lu52i.d	$a2, $a2, -1366
	mulh.du	$a0, $a0, $a2
	srli.d	$a2, $a0, 1
	addi.w	$a3, $zero, -2
	and	$a0, $a0, $a3
	add.d	$a0, $a0, $a2
	addi.d	$a3, $a0, 4
	sltu	$a4, $s0, $a3
	maskeqz	$a3, $a3, $a4
	masknez	$a4, $s0, $a4
	or	$a3, $a3, $a4
	sub.d	$a0, $a3, $a0
	addi.d	$a3, $a0, -3
	addi.d	$a0, $a2, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$fp, $a0, 3
	slli.d	$a2, $a0, 4
	alsl.d	$a0, $a0, $a2, 3
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 3
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	st.d	$a3, $sp, 88                    # 8-byte Folded Spill
	bstrins.d	$a3, $zero, 2, 0
	st.d	$a3, $sp, 32                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	addi.d	$a2, $a0, 48
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	ori	$t2, $zero, 22
	lu12i.w	$a0, 65881
	ori	$s1, $a0, 1957
	lu12i.w	$a0, 214841
	ori	$s3, $a0, 3368
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	b	.LBB38_4
	.p2align	4, , 16
.LBB38_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB38_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB38_32
.LBB38_4:                               # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_7 Depth 2
                                        #     Child Loop BB38_10 Depth 2
                                        #     Child Loop BB38_15 Depth 2
                                        #     Child Loop BB38_18 Depth 2
	bgeu	$s4, $t2, .LBB38_6
# %bb.5:                                #   in Loop: Header=BB38_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	ori	$a4, $zero, 3
	b	.LBB38_9
	.p2align	4, , 16
.LBB38_6:                               # %vector.body68.preheader
                                        #   in Loop: Header=BB38_4 Depth=1
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	move	$a2, $fp
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB38_7:                               # %vector.body68
                                        #   Parent Loop BB38_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -48
	ld.w	$a4, $a0, -36
	ld.w	$a5, $a0, -24
	ld.w	$a6, $a0, -12
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 12
	ld.w	$a5, $a0, 24
	ld.w	$a6, $a0, 36
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -44
	ld.w	$a4, $a0, -32
	ld.w	$a5, $a0, -20
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 16
	ld.w	$a5, $a0, 28
	ld.w	$a6, $a0, 40
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	ld.w	$a3, $a0, -40
	ld.w	$a4, $a0, -28
	ld.w	$a5, $a0, -16
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr6, $a3, 0
	vinsgr2vr.w	$vr6, $a4, 1
	vinsgr2vr.w	$vr6, $a5, 2
	vinsgr2vr.w	$vr6, $a6, 3
	ld.w	$a3, $a0, 8
	ld.w	$a4, $a0, 20
	ld.w	$a5, $a0, 32
	ld.w	$a6, $a0, 44
	vinsgr2vr.w	$vr7, $a3, 0
	vinsgr2vr.w	$vr7, $a4, 1
	vinsgr2vr.w	$vr7, $a5, 2
	vinsgr2vr.w	$vr7, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vadd.w	$vr2, $vr2, $vr6
	vadd.w	$vr3, $vr3, $vr7
	vreplgr2vr.w	$vr4, $s1
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s3
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 96
	bnez	$a2, .LBB38_7
# %bb.8:                                # %middle.block74
                                        #   in Loop: Header=BB38_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	move	$a2, $a3
	ld.d	$a5, $sp, 56                    # 8-byte Folded Reload
	beq	$a5, $fp, .LBB38_11
.LBB38_9:                               # %scalar.ph63.preheader
                                        #   in Loop: Header=BB38_4 Depth=1
	addi.d	$a3, $a4, -3
	ld.d	$a4, $sp, 80                    # 8-byte Folded Reload
	alsl.d	$a4, $a2, $a4, 2
	.p2align	4, , 16
.LBB38_10:                              # %scalar.ph63
                                        #   Parent Loop BB38_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -8
	ld.w	$a6, $a4, -4
	ld.w	$a7, $a4, 0
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	mul.d	$a5, $a5, $s1
	add.d	$a0, $a0, $a5
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 3
	addi.d	$a3, $a3, 3
	addi.d	$a4, $a4, 12
	bltu	$a2, $s7, .LBB38_10
.LBB38_11:                              # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB38_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB38_19
# %bb.12:                               # %.lr.ph24.us.preheader
                                        #   in Loop: Header=BB38_4 Depth=1
	ld.d	$a2, $sp, 88                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bgeu	$a2, $a4, .LBB38_14
# %bb.13:                               #   in Loop: Header=BB38_4 Depth=1
	move	$a2, $a3
	b	.LBB38_17
	.p2align	4, , 16
.LBB38_14:                              # %vector.ph
                                        #   in Loop: Header=BB38_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI38_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI38_0)
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	add.d	$a2, $a3, $a4
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	alsl.d	$a0, $a3, $a0, 2
	move	$a3, $a4
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB38_15:                              # %vector.body
                                        #   Parent Loop BB38_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s1
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a3, $a3, -8
	addi.d	$a0, $a0, 32
	bnez	$a3, .LBB38_15
# %bb.16:                               # %middle.block
                                        #   in Loop: Header=BB38_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB38_19
.LBB38_17:                              # %.lr.ph24.us.preheader80
                                        #   in Loop: Header=BB38_4 Depth=1
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB38_18:                              # %.lr.ph24.us
                                        #   Parent Loop BB38_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a2, $a2, 1
	addi.d	$a3, $a3, 4
	bltu	$a2, $s0, .LBB38_18
.LBB38_19:                              # %._crit_edge.us
                                        #   in Loop: Header=BB38_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB38_3
# %bb.20:                               #   in Loop: Header=BB38_4 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 22
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB38_3
.LBB38_21:                              # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB38_28
# %bb.22:                               # %.preheader18.us28.preheader
	lu12i.w	$a0, 65881
	ori	$s1, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB38_24
	.p2align	4, , 16
.LBB38_23:                              # %_Z9check_sumIiEvT_.exit.us31
                                        #   in Loop: Header=BB38_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB38_32
.LBB38_24:                              # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_25 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	.p2align	4, , 16
.LBB38_25:                              #   Parent Loop BB38_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB38_25
# %bb.26:                               # %._crit_edge.us35
                                        #   in Loop: Header=BB38_24 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB38_23
# %bb.27:                               #   in Loop: Header=BB38_24 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB38_23
.LBB38_28:                              # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB38_30
	.p2align	4, , 16
.LBB38_29:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB38_30 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB38_32
.LBB38_30:                              # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB38_29
# %bb.31:                               #   in Loop: Header=BB38_30 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB38_29
.LBB38_32:                              # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB38_34
# %bb.33:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB38_36
.LBB38_34:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB38_37
# %bb.35:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB38_36:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI38_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI38_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB38_37:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end38:
	.size	_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc, .Lfunc_end38-_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc
.LCPI39_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI39_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s1, $a1
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 112                   # 8-byte Folded Spill
	blt	$a1, $a0, .LBB39_30
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 2
	blt	$s1, $a0, .LBB39_21
# %bb.2:                                # %.preheader17.us.preheader
	move	$s5, $zero
	addi.d	$a2, $s1, -1
	bstrpick.d	$s6, $a2, 31, 0
	sltu	$a2, $a0, $s6
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s6, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	srli.d	$a2, $a0, 1
	bstrins.d	$a0, $zero, 0, 0
	addi.d	$a3, $a0, 3
	sltu	$a4, $s1, $a3
	maskeqz	$a3, $a3, $a4
	masknez	$a4, $s1, $a4
	or	$a3, $a3, $a4
	sub.d	$a0, $a3, $a0
	addi.d	$a3, $a0, -2
	addi.d	$a0, $a2, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$fp, $a0, 3
	slli.d	$s3, $a0, 4
	addi.d	$a0, $s3, 2
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	st.d	$a3, $sp, 88                    # 8-byte Folded Spill
	bstrins.d	$a3, $zero, 2, 0
	st.d	$a3, $sp, 40                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 32
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 4
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	ori	$a7, $zero, 16
	lu12i.w	$a0, 65881
	ori	$s0, $a0, 1957
	lu12i.w	$a0, 492753
	ori	$s4, $a0, 880
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	b	.LBB39_4
	.p2align	4, , 16
.LBB39_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB39_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB39_30
.LBB39_4:                               # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_7 Depth 2
                                        #     Child Loop BB39_10 Depth 2
                                        #     Child Loop BB39_15 Depth 2
                                        #     Child Loop BB39_18 Depth 2
	bgeu	$s1, $a7, .LBB39_6
# %bb.5:                                #   in Loop: Header=BB39_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	ori	$a4, $zero, 2
	b	.LBB39_9
	.p2align	4, , 16
.LBB39_6:                               # %vector.body64.preheader
                                        #   in Loop: Header=BB39_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $fp
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB39_7:                               # %vector.body64
                                        #   Parent Loop BB39_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -32
	ld.w	$a4, $a0, -24
	ld.w	$a5, $a0, -16
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 8
	ld.w	$a5, $a0, 16
	ld.w	$a6, $a0, 24
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -28
	ld.w	$a4, $a0, -20
	ld.w	$a5, $a0, -12
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 12
	ld.w	$a5, $a0, 20
	ld.w	$a6, $a0, 28
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vreplgr2vr.w	$vr4, $s0
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 64
	bnez	$a2, .LBB39_7
# %bb.8:                                # %middle.block70
                                        #   in Loop: Header=BB39_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	move	$a2, $s3
	move	$a3, $s3
	ld.d	$a5, $sp, 56                    # 8-byte Folded Reload
	beq	$a5, $fp, .LBB39_11
.LBB39_9:                               # %scalar.ph59.preheader
                                        #   in Loop: Header=BB39_4 Depth=1
	addi.d	$a3, $a4, -2
	ld.d	$a4, $sp, 80                    # 8-byte Folded Reload
	alsl.d	$a4, $a2, $a4, 2
	.p2align	4, , 16
.LBB39_10:                              # %scalar.ph59
                                        #   Parent Loop BB39_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -4
	ld.w	$a6, $a4, 0
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s0
	add.d	$a0, $a0, $a5
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, 2
	addi.d	$a3, $a3, 2
	addi.d	$a4, $a4, 8
	bltu	$a2, $s6, .LBB39_10
.LBB39_11:                              # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB39_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s1, .LBB39_19
# %bb.12:                               # %.lr.ph23.us.preheader
                                        #   in Loop: Header=BB39_4 Depth=1
	ld.d	$a2, $sp, 88                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bgeu	$a2, $a4, .LBB39_14
# %bb.13:                               #   in Loop: Header=BB39_4 Depth=1
	move	$a2, $a3
	b	.LBB39_17
	.p2align	4, , 16
.LBB39_14:                              # %vector.ph
                                        #   in Loop: Header=BB39_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI39_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI39_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a2, $a3, $a4
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	alsl.d	$a0, $a3, $a0, 2
	move	$a3, $a4
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB39_15:                              # %vector.body
                                        #   Parent Loop BB39_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s0
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a3, $a3, -8
	addi.d	$a0, $a0, 32
	bnez	$a3, .LBB39_15
# %bb.16:                               # %middle.block
                                        #   in Loop: Header=BB39_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB39_19
.LBB39_17:                              # %.lr.ph23.us.preheader76
                                        #   in Loop: Header=BB39_4 Depth=1
	ld.d	$a3, $sp, 96                    # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB39_18:                              # %.lr.ph23.us
                                        #   Parent Loop BB39_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s0
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s2
	addi.d	$a2, $a2, 1
	addi.d	$a3, $a3, 4
	bltu	$a2, $s1, .LBB39_18
.LBB39_19:                              # %._crit_edge.us
                                        #   in Loop: Header=BB39_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB39_3
# %bb.20:                               #   in Loop: Header=BB39_4 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 16
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB39_3
.LBB39_21:                              # %.preheader17.lr.ph.split
	move	$fp, $zero
	ori	$a0, $zero, 1
	bne	$s1, $a0, .LBB39_26
# %bb.22:                               # %._crit_edge.us34.preheader
	lu12i.w	$a0, 65881
	ori	$s0, $a0, 1957
	pcalau12i	$s2, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -32110
	ori	$s4, $a0, 3144
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB39_24
	.p2align	4, , 16
.LBB39_23:                              # %_Z9check_sumIiEvT_.exit.us30
                                        #   in Loop: Header=BB39_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB39_30
.LBB39_24:                              # %._crit_edge.us34
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a0, $a0, 0
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	mul.w	$a0, $a0, $s0
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB39_23
# %bb.25:                               #   in Loop: Header=BB39_24 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB39_23
.LBB39_26:                              # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB39_28
	.p2align	4, , 16
.LBB39_27:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB39_28 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB39_30
.LBB39_28:                              # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB39_27
# %bb.29:                               #   in Loop: Header=BB39_28 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB39_27
.LBB39_30:                              # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB39_32
# %bb.31:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB39_34
.LBB39_32:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB39_35
# %bb.33:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB39_34:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI39_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI39_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB39_35:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end39:
	.size	_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc, .Lfunc_end39-_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc
.LCPI40_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB40_17
# %bb.1:                                # %.preheader17.lr.ph
	blez	$s0, .LBB40_13
# %bb.2:                                # %.preheader17.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	pcalau12i	$fp, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s5, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s4
	vreplgr2vr.w	$vr5, $s3
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB40_4
	.p2align	4, , 16
.LBB40_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB40_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB40_17
.LBB40_4:                               # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_7 Depth 2
                                        #     Child Loop BB40_10 Depth 2
	bgeu	$s0, $a5, .LBB40_6
# %bb.5:                                #   in Loop: Header=BB40_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB40_9
	.p2align	4, , 16
.LBB40_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB40_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB40_7:                               # %vector.body
                                        #   Parent Loop BB40_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB40_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB40_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB40_11
.LBB40_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB40_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB40_10:                              # %scalar.ph
                                        #   Parent Loop BB40_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB40_10
.LBB40_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB40_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.w	$a2, $a2, $s5
	beq	$a0, $a2, .LBB40_3
# %bb.12:                               #   in Loop: Header=BB40_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB40_3
.LBB40_13:                              # %.preheader17.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB40_15
	.p2align	4, , 16
.LBB40_14:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB40_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB40_17
.LBB40_15:                              # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB40_14
# %bb.16:                               #   in Loop: Header=BB40_15 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB40_14
.LBB40_17:                              # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB40_19
# %bb.18:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB40_21
.LBB40_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB40_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB40_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 0                     # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI40_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI40_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB40_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end40:
	.size	_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc, .Lfunc_end40-_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc
.LCPI41_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI41_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 88                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB41_31
# %bb.1:                                # %.preheader48.lr.ph
	ori	$a0, $zero, 32
	blt	$s0, $a0, .LBB41_15
# %bb.2:                                # %.preheader48.us.preheader
	move	$s2, $zero
	addi.d	$a1, $s0, -31
	bstrpick.d	$s6, $a1, 31, 0
	sltu	$a1, $a0, $s6
	masknez	$a0, $a0, $a1
	maskeqz	$a1, $s6, $a1
	or	$a0, $a1, $a0
	addi.d	$a0, $a0, -1
	bstrins.d	$a0, $zero, 4, 0
	addi.d	$a1, $a0, 33
	sltu	$a2, $s0, $a1
	maskeqz	$a1, $a1, $a2
	masknez	$a2, $s0, $a2
	or	$a1, $a1, $a2
	addi.d	$a2, $a1, -32
	sub.d	$a3, $a2, $a0
	andi	$a1, $a1, 7
	st.d	$a3, $sp, 80                    # 8-byte Folded Spill
	sub.d	$a3, $a3, $a1
	st.d	$a3, $sp, 48                    # 8-byte Folded Spill
	addi.d	$s4, $s1, 144
	st.d	$a1, $sp, 64                    # 8-byte Folded Spill
	sub.d	$a1, $a2, $a1
	sub.d	$a0, $a1, $a0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -504557
	ori	$s8, $a0, 1792
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s5, $a0, 1536
	b	.LBB41_4
	.p2align	4, , 16
.LBB41_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB41_4 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB41_31
.LBB41_4:                               # %.preheader48.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_5 Depth 2
                                        #     Child Loop BB41_9 Depth 2
                                        #     Child Loop BB41_12 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	ori	$a2, $zero, 32
	move	$a3, $s4
	.p2align	4, , 16
.LBB41_5:                               #   Parent Loop BB41_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a4, $a1, $s1, 2
	slli.d	$a5, $a1, 2
	ldx.w	$a5, $s1, $a5
	ld.w	$a6, $a4, 4
	ld.w	$a7, $a4, 8
	ld.w	$t0, $a4, 12
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, 16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 36
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 40
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 44
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 48
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 52
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 56
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 60
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 64
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 68
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 72
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 76
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 80
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 84
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 88
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 92
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 96
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 100
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 104
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 108
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 112
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 116
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 120
	ld.w	$t1, $a4, 124
	add.d	$a4, $a5, $a6
	add.d	$a4, $a4, $a7
	add.d	$a6, $a4, $t0
	move	$a4, $a2
	move	$a5, $a3
	add.d	$a2, $a6, $t1
	mul.d	$a2, $a2, $fp
	add.d	$a0, $a0, $a2
	add.w	$a0, $a0, $s8
	addi.d	$a1, $a1, 32
	addi.d	$a2, $a4, 32
	addi.d	$a3, $a3, 128
	bltu	$a1, $s6, .LBB41_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB41_4 Depth=1
	addi.w	$a1, $a1, 0
	bge	$a1, $s0, .LBB41_13
# %bb.7:                                # %.lr.ph54.us.preheader
                                        #   in Loop: Header=BB41_4 Depth=1
	ld.d	$a1, $sp, 80                    # 8-byte Folded Reload
	ori	$a2, $zero, 8
	bltu	$a1, $a2, .LBB41_11
# %bb.8:                                # %vector.ph94
                                        #   in Loop: Header=BB41_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI41_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI41_0)
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	add.d	$a4, $a4, $a1
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB41_9:                               # %vector.body97
                                        #   Parent Loop BB41_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a5, -16
	vld	$vr3, $a5, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s7
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a5, $a5, 32
	bnez	$a0, .LBB41_9
# %bb.10:                               # %middle.block104
                                        #   in Loop: Header=BB41_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	beqz	$a1, .LBB41_13
.LBB41_11:                              # %.lr.ph54.us.preheader109
                                        #   in Loop: Header=BB41_4 Depth=1
	alsl.d	$a1, $a4, $s1, 2
	.p2align	4, , 16
.LBB41_12:                              # %.lr.ph54.us
                                        #   Parent Loop BB41_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a2, $a1, 0
	mul.d	$a2, $a2, $fp
	add.d	$a0, $a0, $a2
	add.w	$a0, $a0, $s7
	addi.d	$a4, $a4, 1
	addi.d	$a1, $a1, 4
	bltu	$a4, $s0, .LBB41_12
.LBB41_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB41_4 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s3
	add.w	$a1, $a1, $s5
	beq	$a0, $a1, .LBB41_3
# %bb.14:                               #   in Loop: Header=BB41_4 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	b	.LBB41_3
.LBB41_15:                              # %.preheader48.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB41_27
# %bb.16:                               # %.preheader48.us58.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	vst	$vr5, $sp, 32                   # 16-byte Folded Spill
	b	.LBB41_18
	.p2align	4, , 16
.LBB41_17:                              # %_Z9check_sumIiEvT_.exit.us61
                                        #   in Loop: Header=BB41_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB41_31
.LBB41_18:                              # %.preheader48.us58
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_21 Depth 2
                                        #     Child Loop BB41_24 Depth 2
	bgeu	$s0, $a5, .LBB41_20
# %bb.19:                               #   in Loop: Header=BB41_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB41_23
	.p2align	4, , 16
.LBB41_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB41_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB41_21:                              # %vector.body
                                        #   Parent Loop BB41_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB41_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB41_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB41_25
.LBB41_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB41_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB41_24:                              # %scalar.ph
                                        #   Parent Loop BB41_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB41_24
.LBB41_25:                              # %._crit_edge.us65
                                        #   in Loop: Header=BB41_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB41_17
# %bb.26:                               #   in Loop: Header=BB41_18 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 32                   # 16-byte Folded Reload
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB41_17
.LBB41_27:                              # %.preheader48.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB41_29
	.p2align	4, , 16
.LBB41_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB41_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB41_31
.LBB41_29:                              # %.preheader48
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB41_28
# %bb.30:                               #   in Loop: Header=BB41_29 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB41_28
.LBB41_31:                              # %._crit_edge57
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 88                    # 8-byte Folded Reload
	beqz	$a2, .LBB41_33
# %bb.32:                               # %._crit_edge57
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB41_35
.LBB41_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB41_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB41_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI41_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI41_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB41_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end41:
	.size	_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc, .Lfunc_end41-_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc
.LCPI42_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI42_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 80                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 72                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB42_31
# %bb.1:                                # %.preheader47.lr.ph
	ori	$a0, $zero, 31
	blt	$s0, $a0, .LBB42_15
# %bb.2:                                # %.preheader47.us.preheader
	addi.d	$a1, $s0, -30
	bstrpick.d	$s2, $a1, 31, 0
	sltu	$a1, $a0, $s2
	masknez	$a0, $a0, $a1
	maskeqz	$a1, $s2, $a1
	or	$a0, $a1, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a1, 135300
	ori	$a1, $a1, 529
	lu32i.d	$a1, 135300
	lu52i.d	$a1, $a1, 132
	mulh.du	$a1, $a0, $a1
	sub.d	$a0, $a0, $a1
	srli.d	$a0, $a0, 1
	add.d	$a0, $a0, $a1
	srli.d	$a0, $a0, 4
	slli.d	$a1, $a0, 5
	sub.d	$a0, $a1, $a0
	addi.d	$a1, $a0, 32
	sltu	$a2, $s0, $a1
	maskeqz	$a1, $a1, $a2
	masknez	$a2, $s0, $a2
	or	$a1, $a1, $a2
	sub.d	$a0, $a1, $a0
	addi.d	$a0, $a0, -31
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 140
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -226646
	ori	$s3, $a0, 3400
	lu12i.w	$a0, -277912
	ori	$s6, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s5, $a0, 1536
	b	.LBB42_4
	.p2align	4, , 16
.LBB42_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB42_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB42_31
.LBB42_4:                               # %.preheader47.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_5 Depth 2
                                        #     Child Loop BB42_9 Depth 2
                                        #     Child Loop BB42_12 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	ori	$a2, $zero, 31
	move	$a3, $fp
	.p2align	4, , 16
.LBB42_5:                               #   Parent Loop BB42_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a4, $a1, $s1, 2
	slli.d	$a5, $a1, 2
	ldx.w	$a5, $s1, $a5
	ld.w	$a6, $a4, 4
	ld.w	$a7, $a4, 8
	ld.w	$t0, $a4, 12
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, 16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 36
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 40
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 44
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 48
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 52
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 56
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 60
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 64
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 68
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 72
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 76
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 80
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 84
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 88
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 92
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 96
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 100
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 104
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 108
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 112
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 116
	ld.w	$t1, $a4, 120
	add.d	$a4, $a5, $t0
	add.d	$a4, $a4, $a6
	add.d	$a6, $a4, $a7
	move	$a4, $a2
	move	$a5, $a3
	add.d	$a2, $a6, $t1
	mul.d	$a2, $a2, $s4
	add.d	$a0, $a0, $a2
	add.w	$a0, $a0, $s3
	addi.d	$a1, $a1, 31
	addi.d	$a2, $a4, 31
	addi.d	$a3, $a3, 124
	bltu	$a1, $s2, .LBB42_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB42_4 Depth=1
	addi.w	$a1, $a1, 0
	bge	$a1, $s0, .LBB42_13
# %bb.7:                                # %.lr.ph53.us.preheader
                                        #   in Loop: Header=BB42_4 Depth=1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	ori	$a2, $zero, 8
	bltu	$a1, $a2, .LBB42_11
# %bb.8:                                # %vector.ph93
                                        #   in Loop: Header=BB42_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI42_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI42_0)
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	add.d	$a4, $a4, $a1
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a1
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB42_9:                               # %vector.body96
                                        #   Parent Loop BB42_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a5, -16
	vld	$vr3, $a5, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s6
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a5, $a5, 32
	bnez	$a0, .LBB42_9
# %bb.10:                               # %middle.block103
                                        #   in Loop: Header=BB42_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	beq	$a1, $a2, .LBB42_13
.LBB42_11:                              # %.lr.ph53.us.preheader108
                                        #   in Loop: Header=BB42_4 Depth=1
	alsl.d	$a1, $a4, $s1, 2
	.p2align	4, , 16
.LBB42_12:                              # %.lr.ph53.us
                                        #   Parent Loop BB42_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a2, $a1, 0
	mul.d	$a2, $a2, $s4
	add.d	$a0, $a0, $a2
	add.w	$a0, $a0, $s6
	addi.d	$a4, $a4, 1
	addi.d	$a1, $a1, 4
	bltu	$a4, $s0, .LBB42_12
.LBB42_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB42_4 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s8
	add.w	$a1, $a1, $s5
	beq	$a0, $a1, .LBB42_3
# %bb.14:                               #   in Loop: Header=BB42_4 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	b	.LBB42_3
.LBB42_15:                              # %.preheader47.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB42_27
# %bb.16:                               # %.preheader47.us57.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB42_18
	.p2align	4, , 16
.LBB42_17:                              # %_Z9check_sumIiEvT_.exit.us60
                                        #   in Loop: Header=BB42_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB42_31
.LBB42_18:                              # %.preheader47.us57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_21 Depth 2
                                        #     Child Loop BB42_24 Depth 2
	bgeu	$s0, $a5, .LBB42_20
# %bb.19:                               #   in Loop: Header=BB42_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB42_23
	.p2align	4, , 16
.LBB42_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB42_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB42_21:                              # %vector.body
                                        #   Parent Loop BB42_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB42_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB42_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB42_25
.LBB42_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB42_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB42_24:                              # %scalar.ph
                                        #   Parent Loop BB42_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB42_24
.LBB42_25:                              # %._crit_edge.us64
                                        #   in Loop: Header=BB42_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB42_17
# %bb.26:                               #   in Loop: Header=BB42_18 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB42_17
.LBB42_27:                              # %.preheader47.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB42_29
	.p2align	4, , 16
.LBB42_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB42_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB42_31
.LBB42_29:                              # %.preheader47
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB42_28
# %bb.30:                               #   in Loop: Header=BB42_29 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB42_28
.LBB42_31:                              # %._crit_edge56
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 72                    # 8-byte Folded Reload
	beqz	$a2, .LBB42_33
# %bb.32:                               # %._crit_edge56
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB42_35
.LBB42_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB42_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB42_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI42_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI42_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB42_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end42:
	.size	_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc, .Lfunc_end42-_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc
.LCPI43_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI43_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB43_31
# %bb.1:                                # %.preheader46.lr.ph
	ori	$a0, $zero, 30
	blt	$s0, $a0, .LBB43_15
# %bb.2:                                # %.preheader46.us.preheader
	addi.d	$a2, $s0, -29
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -489336
	ori	$a3, $a3, 2185
	lu32i.d	$a3, -489336
	lu52i.d	$a3, $a3, -1912
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 4
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 31
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -30
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 136
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 51266
	ori	$s5, $a0, 912
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB43_4
	.p2align	4, , 16
.LBB43_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB43_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB43_31
.LBB43_4:                               # %.preheader46.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_5 Depth 2
                                        #     Child Loop BB43_9 Depth 2
                                        #     Child Loop BB43_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a3, $zero, 30
	move	$a4, $fp
	.p2align	4, , 16
.LBB43_5:                               #   Parent Loop BB43_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a5, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a5, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 92
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 96
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 100
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 104
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 108
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 112
	ld.w	$t2, $a5, 116
	add.d	$a5, $a6, $t0
	add.d	$a5, $a5, $t1
	add.d	$a7, $a5, $a7
	move	$a5, $a3
	move	$a6, $a4
	add.d	$a3, $a7, $t2
	mul.d	$a3, $a3, $s4
	add.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s5
	addi.d	$a2, $a2, 30
	addi.d	$a3, $a5, 30
	addi.d	$a4, $a4, 120
	bltu	$a2, $s2, .LBB43_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB43_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB43_13
# %bb.7:                                # %.lr.ph52.us.preheader
                                        #   in Loop: Header=BB43_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a3, $zero, 8
	bltu	$a2, $a3, .LBB43_11
# %bb.8:                                # %vector.ph93
                                        #   in Loop: Header=BB43_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI43_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI43_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a5, $a5, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB43_9:                               # %vector.body96
                                        #   Parent Loop BB43_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s3
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB43_9
# %bb.10:                               # %middle.block103
                                        #   in Loop: Header=BB43_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a3, .LBB43_13
.LBB43_11:                              # %.lr.ph52.us.preheader108
                                        #   in Loop: Header=BB43_4 Depth=1
	alsl.d	$a2, $a5, $s1, 2
	.p2align	4, , 16
.LBB43_12:                              # %.lr.ph52.us
                                        #   Parent Loop BB43_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a2, 0
	mul.d	$a3, $a3, $s4
	add.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s3
	addi.d	$a5, $a5, 1
	addi.d	$a2, $a2, 4
	bltu	$a5, $s0, .LBB43_12
.LBB43_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB43_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB43_3
# %bb.14:                               #   in Loop: Header=BB43_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB43_3
.LBB43_15:                              # %.preheader46.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB43_27
# %bb.16:                               # %.preheader46.us56.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB43_18
	.p2align	4, , 16
.LBB43_17:                              # %_Z9check_sumIiEvT_.exit.us59
                                        #   in Loop: Header=BB43_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB43_31
.LBB43_18:                              # %.preheader46.us56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_21 Depth 2
                                        #     Child Loop BB43_24 Depth 2
	bgeu	$s0, $a5, .LBB43_20
# %bb.19:                               #   in Loop: Header=BB43_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB43_23
	.p2align	4, , 16
.LBB43_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB43_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB43_21:                              # %vector.body
                                        #   Parent Loop BB43_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB43_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB43_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB43_25
.LBB43_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB43_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB43_24:                              # %scalar.ph
                                        #   Parent Loop BB43_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB43_24
.LBB43_25:                              # %._crit_edge.us63
                                        #   in Loop: Header=BB43_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB43_17
# %bb.26:                               #   in Loop: Header=BB43_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB43_17
.LBB43_27:                              # %.preheader46.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB43_29
	.p2align	4, , 16
.LBB43_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB43_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB43_31
.LBB43_29:                              # %.preheader46
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB43_28
# %bb.30:                               #   in Loop: Header=BB43_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB43_28
.LBB43_31:                              # %._crit_edge55
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB43_33
# %bb.32:                               # %._crit_edge55
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB43_35
.LBB43_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB43_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB43_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI43_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI43_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB43_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end43:
	.size	_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc, .Lfunc_end43-_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN16while_loop_testsILi28EiE7do_testEPKiPKc,"axG",@progbits,_ZN16while_loop_testsILi28EiE7do_testEPKiPKc,comdat
	.weak	_ZN16while_loop_testsILi28EiE7do_testEPKiPKc # -- Begin function _ZN16while_loop_testsILi28EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN16while_loop_testsILi28EiE7do_testEPKiPKc,@function
_ZN16while_loop_testsILi28EiE7do_testEPKiPKc: # @_ZN16while_loop_testsILi28EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN16while_loop_testsILi19EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1900
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 2000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s1, $s1, 2047
	addi.d	$a2, $s1, 53
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 153
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 253
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 353
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 453
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 553
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 653
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end44:
	.size	_ZN16while_loop_testsILi28EiE7do_testEPKiPKc, .Lfunc_end44-_ZN16while_loop_testsILi28EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc
.LCPI45_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI45_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB45_31
# %bb.1:                                # %.preheader45.lr.ph
	ori	$a0, $zero, 29
	blt	$s0, $a0, .LBB45_15
# %bb.2:                                # %.preheader45.us.preheader
	addi.d	$a2, $s0, -28
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -361578
	ori	$a3, $a3, 283
	lu32i.d	$a3, -289263
	lu52i.d	$a3, $a3, 423
	mulh.du	$a3, $a2, $a3
	sub.d	$a2, $a2, $a3
	srli.d	$a2, $a2, 1
	add.d	$a2, $a2, $a3
	srli.d	$a2, $a2, 4
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 30
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -29
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 132
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 329177
	ori	$s5, $a0, 2520
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB45_4
	.p2align	4, , 16
.LBB45_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB45_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB45_31
.LBB45_4:                               # %.preheader45.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_5 Depth 2
                                        #     Child Loop BB45_9 Depth 2
                                        #     Child Loop BB45_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a4, $zero, 29
	move	$a5, $fp
	.p2align	4, , 16
.LBB45_5:                               #   Parent Loop BB45_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a3, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a3, 4
	ld.w	$t0, $a3, 8
	ld.w	$t1, $a3, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a3, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 92
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 96
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 100
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 104
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 108
	ld.w	$t2, $a3, 112
	add.d	$a3, $a6, $a7
	add.d	$a3, $a3, $t0
	add.d	$a7, $a3, $t1
	move	$a3, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a2, $a2, 29
	addi.d	$a4, $a3, 29
	addi.d	$a5, $a5, 116
	bltu	$a2, $s2, .LBB45_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB45_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB45_13
# %bb.7:                                # %.lr.ph51.us.preheader
                                        #   in Loop: Header=BB45_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a2, $a4, .LBB45_11
# %bb.8:                                # %vector.ph92
                                        #   in Loop: Header=BB45_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI45_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI45_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a3, $a3, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB45_9:                               # %vector.body95
                                        #   Parent Loop BB45_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s3
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB45_9
# %bb.10:                               # %middle.block102
                                        #   in Loop: Header=BB45_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a4, .LBB45_13
.LBB45_11:                              # %.lr.ph51.us.preheader107
                                        #   in Loop: Header=BB45_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	.p2align	4, , 16
.LBB45_12:                              # %.lr.ph51.us
                                        #   Parent Loop BB45_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a3, $a3, 1
	addi.d	$a2, $a2, 4
	bltu	$a3, $s0, .LBB45_12
.LBB45_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB45_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB45_3
# %bb.14:                               #   in Loop: Header=BB45_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB45_3
.LBB45_15:                              # %.preheader45.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB45_27
# %bb.16:                               # %.preheader45.us55.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB45_18
	.p2align	4, , 16
.LBB45_17:                              # %_Z9check_sumIiEvT_.exit.us58
                                        #   in Loop: Header=BB45_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB45_31
.LBB45_18:                              # %.preheader45.us55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_21 Depth 2
                                        #     Child Loop BB45_24 Depth 2
	bgeu	$s0, $a5, .LBB45_20
# %bb.19:                               #   in Loop: Header=BB45_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB45_23
	.p2align	4, , 16
.LBB45_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB45_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB45_21:                              # %vector.body
                                        #   Parent Loop BB45_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB45_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB45_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB45_25
.LBB45_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB45_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB45_24:                              # %scalar.ph
                                        #   Parent Loop BB45_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB45_24
.LBB45_25:                              # %._crit_edge.us62
                                        #   in Loop: Header=BB45_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB45_17
# %bb.26:                               #   in Loop: Header=BB45_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB45_17
.LBB45_27:                              # %.preheader45.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB45_29
	.p2align	4, , 16
.LBB45_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB45_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB45_31
.LBB45_29:                              # %.preheader45
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB45_28
# %bb.30:                               #   in Loop: Header=BB45_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB45_28
.LBB45_31:                              # %._crit_edge54
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB45_33
# %bb.32:                               # %._crit_edge54
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB45_35
.LBB45_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB45_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB45_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI45_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI45_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB45_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end45:
	.size	_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc, .Lfunc_end45-_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc
.LCPI46_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI46_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB46_31
# %bb.1:                                # %.preheader44.lr.ph
	ori	$a0, $zero, 28
	blt	$s0, $a0, .LBB46_15
# %bb.2:                                # %.preheader44.us.preheader
	addi.d	$a2, $s0, -27
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	srli.d	$a2, $a2, 2
	lu12i.w	$a3, 149796
	ori	$a3, $a3, 2341
	lu32i.d	$a3, 299593
	lu52i.d	$a3, $a3, 1170
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 1
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 29
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -28
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 128
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -441487
	ori	$s3, $a0, 32
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB46_4
	.p2align	4, , 16
.LBB46_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB46_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB46_31
.LBB46_4:                               # %.preheader44.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_5 Depth 2
                                        #     Child Loop BB46_9 Depth 2
                                        #     Child Loop BB46_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a4, $zero, 28
	move	$a5, $fp
	.p2align	4, , 16
.LBB46_5:                               #   Parent Loop BB46_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a3, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a3, 4
	ld.w	$t0, $a3, 8
	ld.w	$t1, $a3, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a3, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 92
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 96
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 100
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 104
	ld.w	$t2, $a3, 108
	add.d	$a3, $a6, $t1
	add.d	$a3, $a3, $a7
	add.d	$a7, $a3, $t0
	move	$a3, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 28
	addi.d	$a4, $a3, 28
	addi.d	$a5, $a5, 112
	bltu	$a2, $s2, .LBB46_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB46_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB46_13
# %bb.7:                                # %.lr.ph50.us.preheader
                                        #   in Loop: Header=BB46_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a2, $a4, .LBB46_11
# %bb.8:                                # %vector.ph91
                                        #   in Loop: Header=BB46_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI46_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI46_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a3, $a3, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB46_9:                               # %vector.body94
                                        #   Parent Loop BB46_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB46_9
# %bb.10:                               # %middle.block101
                                        #   in Loop: Header=BB46_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a4, .LBB46_13
.LBB46_11:                              # %.lr.ph50.us.preheader106
                                        #   in Loop: Header=BB46_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	.p2align	4, , 16
.LBB46_12:                              # %.lr.ph50.us
                                        #   Parent Loop BB46_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, 1
	addi.d	$a2, $a2, 4
	bltu	$a3, $s0, .LBB46_12
.LBB46_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB46_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB46_3
# %bb.14:                               #   in Loop: Header=BB46_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB46_3
.LBB46_15:                              # %.preheader44.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB46_27
# %bb.16:                               # %.preheader44.us54.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB46_18
	.p2align	4, , 16
.LBB46_17:                              # %_Z9check_sumIiEvT_.exit.us57
                                        #   in Loop: Header=BB46_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB46_31
.LBB46_18:                              # %.preheader44.us54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_21 Depth 2
                                        #     Child Loop BB46_24 Depth 2
	bgeu	$s0, $a5, .LBB46_20
# %bb.19:                               #   in Loop: Header=BB46_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB46_23
	.p2align	4, , 16
.LBB46_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB46_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB46_21:                              # %vector.body
                                        #   Parent Loop BB46_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB46_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB46_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB46_25
.LBB46_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB46_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB46_24:                              # %scalar.ph
                                        #   Parent Loop BB46_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB46_24
.LBB46_25:                              # %._crit_edge.us61
                                        #   in Loop: Header=BB46_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB46_17
# %bb.26:                               #   in Loop: Header=BB46_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB46_17
.LBB46_27:                              # %.preheader44.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB46_29
	.p2align	4, , 16
.LBB46_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB46_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB46_31
.LBB46_29:                              # %.preheader44
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB46_28
# %bb.30:                               #   in Loop: Header=BB46_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB46_28
.LBB46_31:                              # %._crit_edge53
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB46_33
# %bb.32:                               # %._crit_edge53
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB46_35
.LBB46_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB46_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB46_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI46_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI46_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB46_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end46:
	.size	_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc, .Lfunc_end46-_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc
.LCPI47_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI47_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB47_31
# %bb.1:                                # %.preheader43.lr.ph
	ori	$a0, $zero, 27
	blt	$s0, $a0, .LBB47_15
# %bb.2:                                # %.preheader43.us.preheader
	addi.d	$a2, $s0, -26
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, 38836
	ori	$a3, $a3, 607
	lu32i.d	$a3, 271853
	lu52i.d	$a3, $a3, -1669
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 4
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 28
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -27
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 124
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -163576
	ori	$s3, $a0, 1640
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB47_4
	.p2align	4, , 16
.LBB47_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB47_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB47_31
.LBB47_4:                               # %.preheader43.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_5 Depth 2
                                        #     Child Loop BB47_9 Depth 2
                                        #     Child Loop BB47_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a4, $zero, 27
	move	$a5, $fp
	.p2align	4, , 16
.LBB47_5:                               #   Parent Loop BB47_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a3, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a3, 4
	ld.w	$t0, $a3, 8
	ld.w	$t1, $a3, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a3, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 92
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 96
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 100
	ld.w	$t2, $a3, 104
	add.d	$a3, $a6, $t0
	add.d	$a3, $a3, $t1
	add.d	$a7, $a3, $a7
	move	$a3, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 27
	addi.d	$a4, $a3, 27
	addi.d	$a5, $a5, 108
	bltu	$a2, $s2, .LBB47_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB47_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB47_13
# %bb.7:                                # %.lr.ph49.us.preheader
                                        #   in Loop: Header=BB47_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a2, $a4, .LBB47_11
# %bb.8:                                # %vector.ph90
                                        #   in Loop: Header=BB47_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI47_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI47_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a3, $a3, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB47_9:                               # %vector.body93
                                        #   Parent Loop BB47_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB47_9
# %bb.10:                               # %middle.block100
                                        #   in Loop: Header=BB47_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a4, .LBB47_13
.LBB47_11:                              # %.lr.ph49.us.preheader105
                                        #   in Loop: Header=BB47_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	.p2align	4, , 16
.LBB47_12:                              # %.lr.ph49.us
                                        #   Parent Loop BB47_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, 1
	addi.d	$a2, $a2, 4
	bltu	$a3, $s0, .LBB47_12
.LBB47_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB47_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB47_3
# %bb.14:                               #   in Loop: Header=BB47_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB47_3
.LBB47_15:                              # %.preheader43.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB47_27
# %bb.16:                               # %.preheader43.us53.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB47_18
	.p2align	4, , 16
.LBB47_17:                              # %_Z9check_sumIiEvT_.exit.us56
                                        #   in Loop: Header=BB47_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB47_31
.LBB47_18:                              # %.preheader43.us53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_21 Depth 2
                                        #     Child Loop BB47_24 Depth 2
	bgeu	$s0, $a5, .LBB47_20
# %bb.19:                               #   in Loop: Header=BB47_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB47_23
	.p2align	4, , 16
.LBB47_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB47_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB47_21:                              # %vector.body
                                        #   Parent Loop BB47_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB47_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB47_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB47_25
.LBB47_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB47_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB47_24:                              # %scalar.ph
                                        #   Parent Loop BB47_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB47_24
.LBB47_25:                              # %._crit_edge.us60
                                        #   in Loop: Header=BB47_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB47_17
# %bb.26:                               #   in Loop: Header=BB47_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB47_17
.LBB47_27:                              # %.preheader43.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB47_29
	.p2align	4, , 16
.LBB47_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB47_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB47_31
.LBB47_29:                              # %.preheader43
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB47_28
# %bb.30:                               #   in Loop: Header=BB47_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB47_28
.LBB47_31:                              # %._crit_edge52
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB47_33
# %bb.32:                               # %._crit_edge52
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB47_35
.LBB47_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB47_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB47_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI47_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI47_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB47_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end47:
	.size	_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc, .Lfunc_end47-_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc
.LCPI48_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI48_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB48_31
# %bb.1:                                # %.preheader42.lr.ph
	ori	$a0, $zero, 26
	blt	$s0, $a0, .LBB48_15
# %bb.2:                                # %.preheader42.us.preheader
	addi.d	$a2, $s0, -25
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -241980
	ori	$a3, $a3, 3781
	lu32i.d	$a3, 322638
	lu52i.d	$a3, $a3, 1260
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 3
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 27
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$s8, $a0, -26
	move	$s7, $zero
	st.d	$s8, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$s8, $zero, 2, 0
	addi.d	$fp, $s1, 120
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	b	.LBB48_4
	.p2align	4, , 16
.LBB48_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB48_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB48_31
.LBB48_4:                               # %.preheader42.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_5 Depth 2
                                        #     Child Loop BB48_9 Depth 2
                                        #     Child Loop BB48_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a4, $zero, 26
	move	$a5, $fp
	.p2align	4, , 16
.LBB48_5:                               #   Parent Loop BB48_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a3, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a3, 4
	ld.w	$t0, $a3, 8
	ld.w	$t1, $a3, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a3, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 92
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 96
	ld.w	$t2, $a3, 100
	add.d	$a3, $a6, $a7
	add.w	$a3, $a3, $t0
	add.d	$a7, $a3, $t1
	move	$a3, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	addu16i.d	$a0, $a0, 7146
	addi.w	$a0, $a0, -848
	addi.d	$a2, $a2, 26
	addi.d	$a4, $a3, 26
	addi.d	$a5, $a5, 104
	bltu	$a2, $s2, .LBB48_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB48_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB48_13
# %bb.7:                                # %.lr.ph48.us.preheader
                                        #   in Loop: Header=BB48_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a2, $a4, .LBB48_11
# %bb.8:                                # %vector.ph89
                                        #   in Loop: Header=BB48_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI48_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI48_0)
	add.d	$a3, $a3, $s8
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $s8
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB48_9:                               # %vector.body92
                                        #   Parent Loop BB48_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s3
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB48_9
# %bb.10:                               # %middle.block99
                                        #   in Loop: Header=BB48_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	beq	$a2, $s8, .LBB48_13
.LBB48_11:                              # %.lr.ph48.us.preheader104
                                        #   in Loop: Header=BB48_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	.p2align	4, , 16
.LBB48_12:                              # %.lr.ph48.us
                                        #   Parent Loop BB48_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a3, $a3, 1
	addi.d	$a2, $a2, 4
	bltu	$a3, $s0, .LBB48_12
.LBB48_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB48_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB48_3
# %bb.14:                               #   in Loop: Header=BB48_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB48_3
.LBB48_15:                              # %.preheader42.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB48_27
# %bb.16:                               # %.preheader42.us52.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB48_18
	.p2align	4, , 16
.LBB48_17:                              # %_Z9check_sumIiEvT_.exit.us55
                                        #   in Loop: Header=BB48_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB48_31
.LBB48_18:                              # %.preheader42.us52
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_21 Depth 2
                                        #     Child Loop BB48_24 Depth 2
	bgeu	$s0, $a5, .LBB48_20
# %bb.19:                               #   in Loop: Header=BB48_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB48_23
	.p2align	4, , 16
.LBB48_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB48_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB48_21:                              # %vector.body
                                        #   Parent Loop BB48_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB48_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB48_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB48_25
.LBB48_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB48_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB48_24:                              # %scalar.ph
                                        #   Parent Loop BB48_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB48_24
.LBB48_25:                              # %._crit_edge.us59
                                        #   in Loop: Header=BB48_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB48_17
# %bb.26:                               #   in Loop: Header=BB48_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB48_17
.LBB48_27:                              # %.preheader42.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB48_29
	.p2align	4, , 16
.LBB48_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB48_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB48_31
.LBB48_29:                              # %.preheader42
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB48_28
# %bb.30:                               #   in Loop: Header=BB48_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB48_28
.LBB48_31:                              # %._crit_edge51
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB48_33
# %bb.32:                               # %._crit_edge51
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB48_35
.LBB48_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB48_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB48_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI48_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI48_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB48_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end48:
	.size	_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc, .Lfunc_end48-_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc
.LCPI49_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI49_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB49_31
# %bb.1:                                # %.preheader41.lr.ph
	ori	$a0, $zero, 25
	blt	$s0, $a0, .LBB49_15
# %bb.2:                                # %.preheader41.us.preheader
	addi.d	$a2, $s0, -24
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -125830
	ori	$a3, $a3, 3605
	lu32i.d	$a3, -125830
	lu52i.d	$a3, $a3, 1146
	mulh.du	$a3, $a2, $a3
	sub.d	$a2, $a2, $a3
	srli.d	$a2, $a2, 1
	add.d	$a2, $a2, $a3
	srli.d	$a2, $a2, 4
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 26
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -25
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 116
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 392247
	ori	$s3, $a0, 760
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB49_4
	.p2align	4, , 16
.LBB49_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB49_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB49_31
.LBB49_4:                               # %.preheader41.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_5 Depth 2
                                        #     Child Loop BB49_9 Depth 2
                                        #     Child Loop BB49_12 Depth 2
	move	$a3, $zero
	move	$a0, $zero
	ori	$a4, $zero, 25
	move	$a5, $fp
	.p2align	4, , 16
.LBB49_5:                               #   Parent Loop BB49_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a2, $a3, $s1, 2
	slli.d	$a6, $a3, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a2, 4
	ld.w	$t0, $a2, 8
	ld.w	$t1, $a2, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a2, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 92
	ld.w	$t2, $a2, 96
	add.d	$a2, $a6, $t1
	add.d	$a2, $a2, $a7
	add.d	$a7, $a2, $t0
	move	$a2, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a3, $a3, 25
	addi.d	$a4, $a2, 25
	addi.d	$a5, $a5, 100
	bltu	$a3, $s2, .LBB49_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB49_4 Depth=1
	addi.w	$a3, $a3, 0
	bge	$a3, $s0, .LBB49_13
# %bb.7:                                # %.lr.ph47.us.preheader
                                        #   in Loop: Header=BB49_4 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a3, $a4, .LBB49_11
# %bb.8:                                # %vector.ph88
                                        #   in Loop: Header=BB49_4 Depth=1
	pcalau12i	$a3, %pc_hi20(.LCPI49_0)
	vld	$vr0, $a3, %pc_lo12(.LCPI49_0)
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	add.d	$a2, $a2, $a3
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a3
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB49_9:                               # %vector.body91
                                        #   Parent Loop BB49_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB49_9
# %bb.10:                               # %middle.block98
                                        #   in Loop: Header=BB49_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB49_13
.LBB49_11:                              # %.lr.ph47.us.preheader103
                                        #   in Loop: Header=BB49_4 Depth=1
	alsl.d	$a3, $a2, $s1, 2
	.p2align	4, , 16
.LBB49_12:                              # %.lr.ph47.us
                                        #   Parent Loop BB49_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a2, $a2, 1
	addi.d	$a3, $a3, 4
	bltu	$a2, $s0, .LBB49_12
.LBB49_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB49_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB49_3
# %bb.14:                               #   in Loop: Header=BB49_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB49_3
.LBB49_15:                              # %.preheader41.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB49_27
# %bb.16:                               # %.preheader41.us51.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB49_18
	.p2align	4, , 16
.LBB49_17:                              # %_Z9check_sumIiEvT_.exit.us54
                                        #   in Loop: Header=BB49_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB49_31
.LBB49_18:                              # %.preheader41.us51
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_21 Depth 2
                                        #     Child Loop BB49_24 Depth 2
	bgeu	$s0, $a5, .LBB49_20
# %bb.19:                               #   in Loop: Header=BB49_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB49_23
	.p2align	4, , 16
.LBB49_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB49_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB49_21:                              # %vector.body
                                        #   Parent Loop BB49_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB49_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB49_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB49_25
.LBB49_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB49_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB49_24:                              # %scalar.ph
                                        #   Parent Loop BB49_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB49_24
.LBB49_25:                              # %._crit_edge.us58
                                        #   in Loop: Header=BB49_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB49_17
# %bb.26:                               #   in Loop: Header=BB49_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB49_17
.LBB49_27:                              # %.preheader41.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB49_29
	.p2align	4, , 16
.LBB49_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB49_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB49_31
.LBB49_29:                              # %.preheader41
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB49_28
# %bb.30:                               #   in Loop: Header=BB49_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB49_28
.LBB49_31:                              # %._crit_edge50
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB49_33
# %bb.32:                               # %._crit_edge50
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB49_35
.LBB49_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB49_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB49_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI49_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI49_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB49_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end49:
	.size	_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc, .Lfunc_end49-_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc
.LCPI50_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI50_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB50_31
# %bb.1:                                # %.preheader40.lr.ph
	ori	$a0, $zero, 24
	blt	$s0, $a0, .LBB50_15
# %bb.2:                                # %.preheader40.us.preheader
	addi.d	$a2, $s0, -23
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -349526
	ori	$a3, $a3, 2731
	lu32i.d	$a3, -349526
	lu52i.d	$a3, $a3, -1366
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 4
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 25
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -24
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 112
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -378418
	ori	$s3, $a0, 2368
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB50_4
	.p2align	4, , 16
.LBB50_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB50_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB50_31
.LBB50_4:                               # %.preheader40.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_5 Depth 2
                                        #     Child Loop BB50_9 Depth 2
                                        #     Child Loop BB50_12 Depth 2
	move	$a3, $zero
	move	$a0, $zero
	ori	$a4, $zero, 24
	move	$a5, $fp
	.p2align	4, , 16
.LBB50_5:                               #   Parent Loop BB50_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a2, $a3, $s1, 2
	slli.d	$a6, $a3, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a2, 4
	ld.w	$t0, $a2, 8
	ld.w	$t1, $a2, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a2, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 88
	ld.w	$t2, $a2, 92
	add.d	$a2, $a6, $t0
	add.d	$a2, $a2, $t1
	add.d	$a7, $a2, $a7
	move	$a2, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a3, $a3, 24
	addi.d	$a4, $a2, 24
	addi.d	$a5, $a5, 96
	bltu	$a3, $s2, .LBB50_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB50_4 Depth=1
	addi.w	$a3, $a3, 0
	bge	$a3, $s0, .LBB50_13
# %bb.7:                                # %.lr.ph46.us.preheader
                                        #   in Loop: Header=BB50_4 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a3, $a4, .LBB50_11
# %bb.8:                                # %vector.ph87
                                        #   in Loop: Header=BB50_4 Depth=1
	pcalau12i	$a3, %pc_hi20(.LCPI50_0)
	vld	$vr0, $a3, %pc_lo12(.LCPI50_0)
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	add.d	$a2, $a2, $a3
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a3
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB50_9:                               # %vector.body90
                                        #   Parent Loop BB50_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB50_9
# %bb.10:                               # %middle.block97
                                        #   in Loop: Header=BB50_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB50_13
.LBB50_11:                              # %.lr.ph46.us.preheader102
                                        #   in Loop: Header=BB50_4 Depth=1
	alsl.d	$a3, $a2, $s1, 2
	.p2align	4, , 16
.LBB50_12:                              # %.lr.ph46.us
                                        #   Parent Loop BB50_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a2, $a2, 1
	addi.d	$a3, $a3, 4
	bltu	$a2, $s0, .LBB50_12
.LBB50_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB50_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB50_3
# %bb.14:                               #   in Loop: Header=BB50_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB50_3
.LBB50_15:                              # %.preheader40.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB50_27
# %bb.16:                               # %.preheader40.us50.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB50_18
	.p2align	4, , 16
.LBB50_17:                              # %_Z9check_sumIiEvT_.exit.us53
                                        #   in Loop: Header=BB50_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB50_31
.LBB50_18:                              # %.preheader40.us50
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_21 Depth 2
                                        #     Child Loop BB50_24 Depth 2
	bgeu	$s0, $a5, .LBB50_20
# %bb.19:                               #   in Loop: Header=BB50_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB50_23
	.p2align	4, , 16
.LBB50_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB50_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB50_21:                              # %vector.body
                                        #   Parent Loop BB50_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB50_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB50_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB50_25
.LBB50_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB50_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB50_24:                              # %scalar.ph
                                        #   Parent Loop BB50_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB50_24
.LBB50_25:                              # %._crit_edge.us57
                                        #   in Loop: Header=BB50_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB50_17
# %bb.26:                               #   in Loop: Header=BB50_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB50_17
.LBB50_27:                              # %.preheader40.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB50_29
	.p2align	4, , 16
.LBB50_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB50_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB50_31
.LBB50_29:                              # %.preheader40
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB50_28
# %bb.30:                               #   in Loop: Header=BB50_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB50_28
.LBB50_31:                              # %._crit_edge49
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB50_33
# %bb.32:                               # %._crit_edge49
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB50_35
.LBB50_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB50_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB50_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI50_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI50_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB50_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end50:
	.size	_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc, .Lfunc_end50-_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc
.LCPI51_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI51_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB51_31
# %bb.1:                                # %.preheader39.lr.ph
	ori	$a0, $zero, 23
	blt	$s0, $a0, .LBB51_15
# %bb.2:                                # %.preheader39.us.preheader
	addi.d	$a2, $s0, -22
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -319132
	ori	$a3, $a3, 713
	lu32i.d	$a3, -227952
	lu52i.d	$a3, $a3, 1602
	mulh.du	$a3, $a2, $a3
	sub.d	$a2, $a2, $a3
	srli.d	$a2, $a2, 1
	add.d	$a2, $a2, $a3
	srli.d	$a2, $a2, 4
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 24
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -23
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 108
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -100507
	ori	$s3, $a0, 3976
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB51_4
	.p2align	4, , 16
.LBB51_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB51_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB51_31
.LBB51_4:                               # %.preheader39.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_5 Depth 2
                                        #     Child Loop BB51_9 Depth 2
                                        #     Child Loop BB51_12 Depth 2
	move	$a3, $zero
	move	$a0, $zero
	ori	$a4, $zero, 23
	move	$a5, $fp
	.p2align	4, , 16
.LBB51_5:                               #   Parent Loop BB51_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a2, $a3, $s1, 2
	slli.d	$a6, $a3, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a2, 4
	ld.w	$t0, $a2, 8
	ld.w	$t1, $a2, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a2, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 84
	ld.w	$t2, $a2, 88
	add.d	$a2, $a6, $a7
	add.d	$a2, $a2, $t0
	add.d	$a7, $a2, $t1
	move	$a2, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a3, $a3, 23
	addi.d	$a4, $a2, 23
	addi.d	$a5, $a5, 92
	bltu	$a3, $s2, .LBB51_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB51_4 Depth=1
	addi.w	$a3, $a3, 0
	bge	$a3, $s0, .LBB51_13
# %bb.7:                                # %.lr.ph45.us.preheader
                                        #   in Loop: Header=BB51_4 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a3, $a4, .LBB51_11
# %bb.8:                                # %vector.ph86
                                        #   in Loop: Header=BB51_4 Depth=1
	pcalau12i	$a3, %pc_hi20(.LCPI51_0)
	vld	$vr0, $a3, %pc_lo12(.LCPI51_0)
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	add.d	$a2, $a2, $a3
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a3
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB51_9:                               # %vector.body89
                                        #   Parent Loop BB51_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB51_9
# %bb.10:                               # %middle.block96
                                        #   in Loop: Header=BB51_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB51_13
.LBB51_11:                              # %.lr.ph45.us.preheader101
                                        #   in Loop: Header=BB51_4 Depth=1
	alsl.d	$a3, $a2, $s1, 2
	.p2align	4, , 16
.LBB51_12:                              # %.lr.ph45.us
                                        #   Parent Loop BB51_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a2, $a2, 1
	addi.d	$a3, $a3, 4
	bltu	$a2, $s0, .LBB51_12
.LBB51_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB51_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB51_3
# %bb.14:                               #   in Loop: Header=BB51_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB51_3
.LBB51_15:                              # %.preheader39.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB51_27
# %bb.16:                               # %.preheader39.us49.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB51_18
	.p2align	4, , 16
.LBB51_17:                              # %_Z9check_sumIiEvT_.exit.us52
                                        #   in Loop: Header=BB51_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB51_31
.LBB51_18:                              # %.preheader39.us49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_21 Depth 2
                                        #     Child Loop BB51_24 Depth 2
	bgeu	$s0, $a5, .LBB51_20
# %bb.19:                               #   in Loop: Header=BB51_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB51_23
	.p2align	4, , 16
.LBB51_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB51_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB51_21:                              # %vector.body
                                        #   Parent Loop BB51_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB51_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB51_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB51_25
.LBB51_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB51_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB51_24:                              # %scalar.ph
                                        #   Parent Loop BB51_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB51_24
.LBB51_25:                              # %._crit_edge.us56
                                        #   in Loop: Header=BB51_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB51_17
# %bb.26:                               #   in Loop: Header=BB51_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB51_17
.LBB51_27:                              # %.preheader39.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB51_29
	.p2align	4, , 16
.LBB51_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB51_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB51_31
.LBB51_29:                              # %.preheader39
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB51_28
# %bb.30:                               #   in Loop: Header=BB51_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB51_28
.LBB51_31:                              # %._crit_edge48
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB51_33
# %bb.32:                               # %._crit_edge48
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB51_35
.LBB51_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB51_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB51_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI51_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI51_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB51_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end51:
	.size	_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc, .Lfunc_end51-_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc
.LCPI52_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI52_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB52_31
# %bb.1:                                # %.preheader38.lr.ph
	ori	$a0, $zero, 22
	blt	$s0, $a0, .LBB52_15
# %bb.2:                                # %.preheader38.us.preheader
	addi.d	$a2, $s0, -21
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -285976
	ori	$a3, $a3, 2979
	lu32i.d	$a3, -285976
	lu52i.d	$a3, $a3, 744
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 2
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 23
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -22
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 104
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 177405
	ori	$s3, $a0, 1488
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB52_4
	.p2align	4, , 16
.LBB52_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB52_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB52_31
.LBB52_4:                               # %.preheader38.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_5 Depth 2
                                        #     Child Loop BB52_9 Depth 2
                                        #     Child Loop BB52_12 Depth 2
	move	$a3, $zero
	move	$a0, $zero
	ori	$a4, $zero, 22
	move	$a5, $fp
	.p2align	4, , 16
.LBB52_5:                               #   Parent Loop BB52_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a2, $a3, $s1, 2
	slli.d	$a6, $a3, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a2, 4
	ld.w	$t0, $a2, 8
	ld.w	$t1, $a2, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a2, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 80
	ld.w	$t2, $a2, 84
	add.d	$a2, $a6, $t1
	add.d	$a2, $a2, $a7
	add.d	$a7, $a2, $t0
	move	$a2, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a3, $a3, 22
	addi.d	$a4, $a2, 22
	addi.d	$a5, $a5, 88
	bltu	$a3, $s2, .LBB52_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB52_4 Depth=1
	addi.w	$a3, $a3, 0
	bge	$a3, $s0, .LBB52_13
# %bb.7:                                # %.lr.ph44.us.preheader
                                        #   in Loop: Header=BB52_4 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a3, $a4, .LBB52_11
# %bb.8:                                # %vector.ph85
                                        #   in Loop: Header=BB52_4 Depth=1
	pcalau12i	$a3, %pc_hi20(.LCPI52_0)
	vld	$vr0, $a3, %pc_lo12(.LCPI52_0)
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	add.d	$a2, $a2, $a3
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a3
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB52_9:                               # %vector.body88
                                        #   Parent Loop BB52_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB52_9
# %bb.10:                               # %middle.block95
                                        #   in Loop: Header=BB52_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB52_13
.LBB52_11:                              # %.lr.ph44.us.preheader100
                                        #   in Loop: Header=BB52_4 Depth=1
	alsl.d	$a3, $a2, $s1, 2
	.p2align	4, , 16
.LBB52_12:                              # %.lr.ph44.us
                                        #   Parent Loop BB52_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a2, $a2, 1
	addi.d	$a3, $a3, 4
	bltu	$a2, $s0, .LBB52_12
.LBB52_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB52_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB52_3
# %bb.14:                               #   in Loop: Header=BB52_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB52_3
.LBB52_15:                              # %.preheader38.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB52_27
# %bb.16:                               # %.preheader38.us48.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB52_18
	.p2align	4, , 16
.LBB52_17:                              # %_Z9check_sumIiEvT_.exit.us51
                                        #   in Loop: Header=BB52_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB52_31
.LBB52_18:                              # %.preheader38.us48
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_21 Depth 2
                                        #     Child Loop BB52_24 Depth 2
	bgeu	$s0, $a5, .LBB52_20
# %bb.19:                               #   in Loop: Header=BB52_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB52_23
	.p2align	4, , 16
.LBB52_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB52_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB52_21:                              # %vector.body
                                        #   Parent Loop BB52_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB52_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB52_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB52_25
.LBB52_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB52_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB52_24:                              # %scalar.ph
                                        #   Parent Loop BB52_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB52_24
.LBB52_25:                              # %._crit_edge.us55
                                        #   in Loop: Header=BB52_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB52_17
# %bb.26:                               #   in Loop: Header=BB52_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB52_17
.LBB52_27:                              # %.preheader38.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB52_29
	.p2align	4, , 16
.LBB52_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB52_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB52_31
.LBB52_29:                              # %.preheader38
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB52_28
# %bb.30:                               #   in Loop: Header=BB52_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB52_28
.LBB52_31:                              # %._crit_edge47
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB52_33
# %bb.32:                               # %._crit_edge47
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB52_35
.LBB52_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB52_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB52_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI52_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI52_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB52_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end52:
	.size	_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc, .Lfunc_end52-_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc
.LCPI53_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI53_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB53_31
# %bb.1:                                # %.preheader36.lr.ph
	ori	$a0, $zero, 21
	blt	$s0, $a0, .LBB53_15
# %bb.2:                                # %.preheader36.us.preheader
	addi.d	$a2, $s0, -20
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, 99864
	ori	$a3, $a3, 1561
	lu32i.d	$a3, -499322
	lu52i.d	$a3, $a3, -1951
	mulh.du	$a3, $a2, $a3
	sub.d	$a2, $a2, $a3
	srli.d	$a2, $a2, 1
	add.d	$a2, $a2, $a3
	srli.d	$a2, $a2, 4
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 22
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -21
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 100
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 455316
	ori	$s3, $a0, 3096
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB53_4
	.p2align	4, , 16
.LBB53_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB53_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB53_31
.LBB53_4:                               # %.preheader36.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_5 Depth 2
                                        #     Child Loop BB53_9 Depth 2
                                        #     Child Loop BB53_12 Depth 2
	move	$a3, $zero
	move	$a0, $zero
	ori	$a4, $zero, 21
	move	$a5, $fp
	.p2align	4, , 16
.LBB53_5:                               #   Parent Loop BB53_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a2, $a3, $s1, 2
	slli.d	$a6, $a3, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a2, 4
	ld.w	$t0, $a2, 8
	ld.w	$t1, $a2, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a2, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a2, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a2, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a2, 76
	ld.w	$t2, $a2, 80
	add.d	$a2, $a6, $t0
	add.d	$a2, $a2, $t1
	add.d	$a7, $a2, $a7
	move	$a2, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a3, $a3, 21
	addi.d	$a4, $a2, 21
	addi.d	$a5, $a5, 84
	bltu	$a3, $s2, .LBB53_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB53_4 Depth=1
	addi.w	$a3, $a3, 0
	bge	$a3, $s0, .LBB53_13
# %bb.7:                                # %.lr.ph42.us.preheader
                                        #   in Loop: Header=BB53_4 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a3, $a4, .LBB53_11
# %bb.8:                                # %vector.ph83
                                        #   in Loop: Header=BB53_4 Depth=1
	pcalau12i	$a3, %pc_hi20(.LCPI53_0)
	vld	$vr0, $a3, %pc_lo12(.LCPI53_0)
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	add.d	$a2, $a2, $a3
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a3
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB53_9:                               # %vector.body86
                                        #   Parent Loop BB53_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB53_9
# %bb.10:                               # %middle.block93
                                        #   in Loop: Header=BB53_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB53_13
.LBB53_11:                              # %.lr.ph42.us.preheader98
                                        #   in Loop: Header=BB53_4 Depth=1
	alsl.d	$a3, $a2, $s1, 2
	.p2align	4, , 16
.LBB53_12:                              # %.lr.ph42.us
                                        #   Parent Loop BB53_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a2, $a2, 1
	addi.d	$a3, $a3, 4
	bltu	$a2, $s0, .LBB53_12
.LBB53_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB53_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB53_3
# %bb.14:                               #   in Loop: Header=BB53_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB53_3
.LBB53_15:                              # %.preheader36.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB53_27
# %bb.16:                               # %.preheader36.us46.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB53_18
	.p2align	4, , 16
.LBB53_17:                              # %_Z9check_sumIiEvT_.exit.us49
                                        #   in Loop: Header=BB53_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB53_31
.LBB53_18:                              # %.preheader36.us46
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_21 Depth 2
                                        #     Child Loop BB53_24 Depth 2
	bgeu	$s0, $a5, .LBB53_20
# %bb.19:                               #   in Loop: Header=BB53_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB53_23
	.p2align	4, , 16
.LBB53_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB53_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB53_21:                              # %vector.body
                                        #   Parent Loop BB53_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB53_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB53_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB53_25
.LBB53_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB53_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB53_24:                              # %scalar.ph
                                        #   Parent Loop BB53_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB53_24
.LBB53_25:                              # %._crit_edge.us53
                                        #   in Loop: Header=BB53_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB53_17
# %bb.26:                               #   in Loop: Header=BB53_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB53_17
.LBB53_27:                              # %.preheader36.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB53_29
	.p2align	4, , 16
.LBB53_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB53_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB53_31
.LBB53_29:                              # %.preheader36
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB53_28
# %bb.30:                               #   in Loop: Header=BB53_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB53_28
.LBB53_31:                              # %._crit_edge45
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB53_33
# %bb.32:                               # %._crit_edge45
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB53_35
.LBB53_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB53_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB53_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI53_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI53_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB53_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end53:
	.size	_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc, .Lfunc_end53-_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN16while_loop_testsILi19EiE7do_testEPKiPKc,"axG",@progbits,_ZN16while_loop_testsILi19EiE7do_testEPKiPKc,comdat
	.weak	_ZN16while_loop_testsILi19EiE7do_testEPKiPKc # -- Begin function _ZN16while_loop_testsILi19EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN16while_loop_testsILi19EiE7do_testEPKiPKc,@function
_ZN16while_loop_testsILi19EiE7do_testEPKiPKc: # @_ZN16while_loop_testsILi19EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN16while_loop_testsILi10EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1000
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1100
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1200
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1300
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1400
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1500
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1600
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1700
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1800
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end54:
	.size	_ZN16while_loop_testsILi19EiE7do_testEPKiPKc, .Lfunc_end54-_ZN16while_loop_testsILi19EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc
.LCPI55_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI55_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -240
	.cfi_def_cfa_offset 240
	st.d	$ra, $sp, 232                   # 8-byte Folded Spill
	st.d	$fp, $sp, 224                   # 8-byte Folded Spill
	st.d	$s0, $sp, 216                   # 8-byte Folded Spill
	st.d	$s1, $sp, 208                   # 8-byte Folded Spill
	st.d	$s2, $sp, 200                   # 8-byte Folded Spill
	st.d	$s3, $sp, 192                   # 8-byte Folded Spill
	st.d	$s4, $sp, 184                   # 8-byte Folded Spill
	st.d	$s5, $sp, 176                   # 8-byte Folded Spill
	st.d	$s6, $sp, 168                   # 8-byte Folded Spill
	st.d	$s7, $sp, 160                   # 8-byte Folded Spill
	st.d	$s8, $sp, 152                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 112                   # 8-byte Folded Spill
	ld.w	$a4, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a1, %pc_hi20(current_test)
	st.d	$a1, $sp, 120                   # 8-byte Folded Spill
	blt	$a4, $a0, .LBB55_31
# %bb.1:                                # %.preheader35.lr.ph
	ori	$a0, $zero, 20
	blt	$s0, $a0, .LBB55_15
# %bb.2:                                # %.preheader35.us.preheader
	addi.d	$a2, $s0, -19
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -209716
	ori	$a3, $a3, 3277
	lu32i.d	$a3, -209716
	lu52i.d	$a3, $a3, -820
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 4
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 21
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -20
	move	$a1, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 96
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -315348
	ori	$s3, $a0, 608
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	b	.LBB55_4
	.p2align	4, , 16
.LBB55_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB55_4 Depth=1
	addi.w	$a1, $fp, 1
	bge	$a1, $a4, .LBB55_31
.LBB55_4:                               # %.preheader35.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_5 Depth 2
                                        #     Child Loop BB55_9 Depth 2
                                        #     Child Loop BB55_12 Depth 2
	st.d	$a1, $sp, 128                   # 8-byte Folded Spill
	st.d	$a4, $sp, 144                   # 8-byte Folded Spill
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 20
	ld.d	$a6, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB55_5:                               #   Parent Loop BB55_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$s6, $a5, 52
	ld.w	$s8, $a5, 56
	ld.w	$a1, $a5, 60
	ld.w	$s7, $a5, 64
	ld.w	$s0, $a5, 68
	ld.w	$s5, $a5, 72
	ld.w	$a5, $a5, 76
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a6, $a6, $s6
	add.d	$a6, $a6, $s8
	add.d	$a1, $a6, $a1
	add.d	$a1, $a1, $s7
	add.d	$a1, $a1, $s0
	add.d	$a1, $a1, $s5
	add.d	$a1, $a1, $a5
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s3
	addi.d	$a4, $a4, 20
	addi.d	$a5, $a0, 20
	addi.d	$a6, $a3, 80
	bltu	$a4, $s2, .LBB55_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB55_4 Depth=1
	addi.w	$a1, $a4, 0
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	bge	$a1, $s0, .LBB55_13
# %bb.7:                                # %.lr.ph41.us.preheader
                                        #   in Loop: Header=BB55_4 Depth=1
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	bltu	$a1, $a4, .LBB55_11
# %bb.8:                                # %vector.ph82
                                        #   in Loop: Header=BB55_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI55_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI55_0)
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a1
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB55_9:                               # %vector.body85
                                        #   Parent Loop BB55_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB55_9
# %bb.10:                               # %middle.block92
                                        #   in Loop: Header=BB55_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 40                    # 8-byte Folded Reload
	beq	$a1, $a3, .LBB55_13
.LBB55_11:                              # %.lr.ph41.us.preheader97
                                        #   in Loop: Header=BB55_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB55_12:                              # %.lr.ph41.us
                                        #   Parent Loop BB55_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB55_12
.LBB55_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB55_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	add.w	$a0, $a0, $a1
	ld.d	$a4, $sp, 144                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	beq	$a2, $a0, .LBB55_3
# %bb.14:                               #   in Loop: Header=BB55_4 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB55_3
.LBB55_15:                              # %.preheader35.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB55_27
# %bb.16:                               # %.preheader35.us45.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 144                   # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 128                  # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 80                   # 16-byte Folded Spill
	vst	$vr5, $sp, 64                   # 16-byte Folded Spill
	b	.LBB55_18
	.p2align	4, , 16
.LBB55_17:                              # %_Z9check_sumIiEvT_.exit.us48
                                        #   in Loop: Header=BB55_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB55_31
.LBB55_18:                              # %.preheader35.us45
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_21 Depth 2
                                        #     Child Loop BB55_24 Depth 2
	bgeu	$s0, $a5, .LBB55_20
# %bb.19:                               #   in Loop: Header=BB55_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB55_23
	.p2align	4, , 16
.LBB55_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB55_18 Depth=1
	ld.d	$a0, $sp, 144                   # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 128                  # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB55_21:                              # %vector.body
                                        #   Parent Loop BB55_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB55_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB55_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB55_25
.LBB55_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB55_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB55_24:                              # %scalar.ph
                                        #   Parent Loop BB55_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $s6
	add.d	$a0, $a0, $a1
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB55_24
.LBB55_25:                              # %._crit_edge.us52
                                        #   in Loop: Header=BB55_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s5
	add.w	$a1, $a1, $s4
	beq	$a0, $a1, .LBB55_17
# %bb.26:                               #   in Loop: Header=BB55_18 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 64                   # 16-byte Folded Reload
	vld	$vr4, $sp, 80                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB55_17
.LBB55_27:                              # %.preheader35.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB55_29
	.p2align	4, , 16
.LBB55_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB55_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB55_31
.LBB55_29:                              # %.preheader35
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB55_28
# %bb.30:                               #   in Loop: Header=BB55_29 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB55_28
.LBB55_31:                              # %._crit_edge44
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 120                   # 8-byte Folded Reload
	beqz	$a2, .LBB55_33
# %bb.32:                               # %._crit_edge44
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB55_35
.LBB55_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB55_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB55_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI55_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI55_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 216                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 224                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 232                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 240
	ret
.LBB55_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end55:
	.size	_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc, .Lfunc_end55-_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc
.LCPI56_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI56_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -240
	.cfi_def_cfa_offset 240
	st.d	$ra, $sp, 232                   # 8-byte Folded Spill
	st.d	$fp, $sp, 224                   # 8-byte Folded Spill
	st.d	$s0, $sp, 216                   # 8-byte Folded Spill
	st.d	$s1, $sp, 208                   # 8-byte Folded Spill
	st.d	$s2, $sp, 200                   # 8-byte Folded Spill
	st.d	$s3, $sp, 192                   # 8-byte Folded Spill
	st.d	$s4, $sp, 184                   # 8-byte Folded Spill
	st.d	$s5, $sp, 176                   # 8-byte Folded Spill
	st.d	$s6, $sp, 168                   # 8-byte Folded Spill
	st.d	$s7, $sp, 160                   # 8-byte Folded Spill
	st.d	$s8, $sp, 152                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 112                   # 8-byte Folded Spill
	ld.w	$a4, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a1, %pc_hi20(current_test)
	st.d	$a1, $sp, 120                   # 8-byte Folded Spill
	blt	$a4, $a0, .LBB56_31
# %bb.1:                                # %.preheader34.lr.ph
	ori	$a0, $zero, 19
	blt	$s0, $a0, .LBB56_15
# %bb.2:                                # %.preheader34.us.preheader
	addi.d	$a2, $s0, -18
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, 55188
	ori	$a3, $a3, 863
	lu32i.d	$a3, 275941
	lu52i.d	$a3, $a3, -647
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 4
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 20
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -19
	move	$a1, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 92
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -37437
	ori	$s3, $a0, 2216
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	b	.LBB56_4
	.p2align	4, , 16
.LBB56_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB56_4 Depth=1
	addi.w	$a1, $fp, 1
	bge	$a1, $a4, .LBB56_31
.LBB56_4:                               # %.preheader34.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_5 Depth 2
                                        #     Child Loop BB56_9 Depth 2
                                        #     Child Loop BB56_12 Depth 2
	st.d	$a1, $sp, 128                   # 8-byte Folded Spill
	st.d	$a4, $sp, 144                   # 8-byte Folded Spill
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 19
	ld.d	$a6, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB56_5:                               #   Parent Loop BB56_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$s6, $a5, 52
	ld.w	$s8, $a5, 56
	ld.w	$a1, $a5, 60
	ld.w	$s7, $a5, 64
	ld.w	$s0, $a5, 68
	ld.w	$a5, $a5, 72
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a6, $a6, $s6
	add.d	$a6, $a6, $s8
	add.d	$a1, $a6, $a1
	add.d	$a1, $a1, $s7
	add.d	$a1, $a1, $s0
	add.d	$a1, $a1, $a5
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s3
	addi.d	$a4, $a4, 19
	addi.d	$a5, $a0, 19
	addi.d	$a6, $a3, 76
	bltu	$a4, $s2, .LBB56_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB56_4 Depth=1
	addi.w	$a1, $a4, 0
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	bge	$a1, $s0, .LBB56_13
# %bb.7:                                # %.lr.ph40.us.preheader
                                        #   in Loop: Header=BB56_4 Depth=1
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a1, $a4, .LBB56_11
# %bb.8:                                # %vector.ph81
                                        #   in Loop: Header=BB56_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI56_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI56_0)
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a1
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB56_9:                               # %vector.body84
                                        #   Parent Loop BB56_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB56_9
# %bb.10:                               # %middle.block91
                                        #   in Loop: Header=BB56_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 40                    # 8-byte Folded Reload
	beq	$a1, $a3, .LBB56_13
.LBB56_11:                              # %.lr.ph40.us.preheader96
                                        #   in Loop: Header=BB56_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB56_12:                              # %.lr.ph40.us
                                        #   Parent Loop BB56_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB56_12
.LBB56_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB56_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	add.w	$a0, $a0, $a1
	ld.d	$a4, $sp, 144                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	beq	$a2, $a0, .LBB56_3
# %bb.14:                               #   in Loop: Header=BB56_4 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB56_3
.LBB56_15:                              # %.preheader34.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB56_27
# %bb.16:                               # %.preheader34.us44.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 144                   # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 128                  # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 80                   # 16-byte Folded Spill
	vst	$vr5, $sp, 64                   # 16-byte Folded Spill
	b	.LBB56_18
	.p2align	4, , 16
.LBB56_17:                              # %_Z9check_sumIiEvT_.exit.us47
                                        #   in Loop: Header=BB56_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB56_31
.LBB56_18:                              # %.preheader34.us44
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_21 Depth 2
                                        #     Child Loop BB56_24 Depth 2
	bgeu	$s0, $a5, .LBB56_20
# %bb.19:                               #   in Loop: Header=BB56_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB56_23
	.p2align	4, , 16
.LBB56_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB56_18 Depth=1
	ld.d	$a0, $sp, 144                   # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 128                  # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB56_21:                              # %vector.body
                                        #   Parent Loop BB56_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB56_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB56_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB56_25
.LBB56_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB56_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB56_24:                              # %scalar.ph
                                        #   Parent Loop BB56_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $s6
	add.d	$a0, $a0, $a1
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB56_24
.LBB56_25:                              # %._crit_edge.us51
                                        #   in Loop: Header=BB56_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s5
	add.w	$a1, $a1, $s4
	beq	$a0, $a1, .LBB56_17
# %bb.26:                               #   in Loop: Header=BB56_18 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 64                   # 16-byte Folded Reload
	vld	$vr4, $sp, 80                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB56_17
.LBB56_27:                              # %.preheader34.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB56_29
	.p2align	4, , 16
.LBB56_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB56_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB56_31
.LBB56_29:                              # %.preheader34
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB56_28
# %bb.30:                               #   in Loop: Header=BB56_29 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB56_28
.LBB56_31:                              # %._crit_edge43
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 120                   # 8-byte Folded Reload
	beqz	$a2, .LBB56_33
# %bb.32:                               # %._crit_edge43
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB56_35
.LBB56_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB56_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB56_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI56_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI56_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 216                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 224                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 232                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 240
	ret
.LBB56_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end56:
	.size	_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc, .Lfunc_end56-_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc
.LCPI57_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI57_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -224
	.cfi_def_cfa_offset 224
	st.d	$ra, $sp, 216                   # 8-byte Folded Spill
	st.d	$fp, $sp, 208                   # 8-byte Folded Spill
	st.d	$s0, $sp, 200                   # 8-byte Folded Spill
	st.d	$s1, $sp, 192                   # 8-byte Folded Spill
	st.d	$s2, $sp, 184                   # 8-byte Folded Spill
	st.d	$s3, $sp, 176                   # 8-byte Folded Spill
	st.d	$s4, $sp, 168                   # 8-byte Folded Spill
	st.d	$s5, $sp, 160                   # 8-byte Folded Spill
	st.d	$s6, $sp, 152                   # 8-byte Folded Spill
	st.d	$s7, $sp, 144                   # 8-byte Folded Spill
	st.d	$s8, $sp, 136                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a4, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a1, %pc_hi20(current_test)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	blt	$a4, $a0, .LBB57_31
# %bb.1:                                # %.preheader33.lr.ph
	ori	$a0, $zero, 18
	blt	$s0, $a0, .LBB57_15
# %bb.2:                                # %.preheader33.us.preheader
	addi.d	$a2, $s0, -17
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -466034
	ori	$a3, $a3, 911
	lu32i.d	$a3, -116509
	lu52i.d	$a3, $a3, -456
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 4
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 19
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -18
	move	$a1, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 88
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 240474
	ori	$s3, $a0, 3824
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	b	.LBB57_4
	.p2align	4, , 16
.LBB57_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB57_4 Depth=1
	addi.w	$a1, $fp, 1
	bge	$a1, $a4, .LBB57_31
.LBB57_4:                               # %.preheader33.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_5 Depth 2
                                        #     Child Loop BB57_9 Depth 2
                                        #     Child Loop BB57_12 Depth 2
	st.d	$a1, $sp, 112                   # 8-byte Folded Spill
	st.d	$a4, $sp, 128                   # 8-byte Folded Spill
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 18
	ld.d	$a6, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB57_5:                               #   Parent Loop BB57_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$s6, $a5, 52
	ld.w	$s8, $a5, 56
	ld.w	$a1, $a5, 60
	ld.w	$s7, $a5, 64
	ld.w	$a5, $a5, 68
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a6, $a6, $s6
	add.d	$a6, $a6, $s8
	add.d	$a1, $a6, $a1
	add.d	$a1, $a1, $s7
	add.d	$a1, $a1, $a5
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s3
	addi.d	$a4, $a4, 18
	addi.d	$a5, $a0, 18
	addi.d	$a6, $a3, 72
	bltu	$a4, $s2, .LBB57_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB57_4 Depth=1
	addi.w	$a1, $a4, 0
	bge	$a1, $s0, .LBB57_13
# %bb.7:                                # %.lr.ph39.us.preheader
                                        #   in Loop: Header=BB57_4 Depth=1
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a1, $a4, .LBB57_11
# %bb.8:                                # %vector.ph80
                                        #   in Loop: Header=BB57_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI57_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI57_0)
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a1
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB57_9:                               # %vector.body83
                                        #   Parent Loop BB57_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB57_9
# %bb.10:                               # %middle.block90
                                        #   in Loop: Header=BB57_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 40                    # 8-byte Folded Reload
	beq	$a1, $a3, .LBB57_13
.LBB57_11:                              # %.lr.ph39.us.preheader95
                                        #   in Loop: Header=BB57_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB57_12:                              # %.lr.ph39.us
                                        #   Parent Loop BB57_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB57_12
.LBB57_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB57_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	add.w	$a0, $a0, $a1
	ld.d	$a4, $sp, 128                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	beq	$a2, $a0, .LBB57_3
# %bb.14:                               #   in Loop: Header=BB57_4 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB57_3
.LBB57_15:                              # %.preheader33.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB57_27
# %bb.16:                               # %.preheader33.us43.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 128                   # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 112                  # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 80                   # 16-byte Folded Spill
	vst	$vr5, $sp, 64                   # 16-byte Folded Spill
	b	.LBB57_18
	.p2align	4, , 16
.LBB57_17:                              # %_Z9check_sumIiEvT_.exit.us46
                                        #   in Loop: Header=BB57_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB57_31
.LBB57_18:                              # %.preheader33.us43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_21 Depth 2
                                        #     Child Loop BB57_24 Depth 2
	bgeu	$s0, $a5, .LBB57_20
# %bb.19:                               #   in Loop: Header=BB57_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB57_23
	.p2align	4, , 16
.LBB57_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB57_18 Depth=1
	ld.d	$a0, $sp, 128                   # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 112                  # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB57_21:                              # %vector.body
                                        #   Parent Loop BB57_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB57_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB57_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB57_25
.LBB57_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB57_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB57_24:                              # %scalar.ph
                                        #   Parent Loop BB57_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $s6
	add.d	$a0, $a0, $a1
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB57_24
.LBB57_25:                              # %._crit_edge.us50
                                        #   in Loop: Header=BB57_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s5
	add.w	$a1, $a1, $s4
	beq	$a0, $a1, .LBB57_17
# %bb.26:                               #   in Loop: Header=BB57_18 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 64                   # 16-byte Folded Reload
	vld	$vr4, $sp, 80                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB57_17
.LBB57_27:                              # %.preheader33.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB57_29
	.p2align	4, , 16
.LBB57_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB57_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB57_31
.LBB57_29:                              # %.preheader33
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB57_28
# %bb.30:                               #   in Loop: Header=BB57_29 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB57_28
.LBB57_31:                              # %._crit_edge42
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 104                   # 8-byte Folded Reload
	beqz	$a2, .LBB57_33
# %bb.32:                               # %._crit_edge42
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB57_35
.LBB57_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB57_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB57_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI57_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI57_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 200                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 208                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 216                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 224
	ret
.LBB57_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end57:
	.size	_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc, .Lfunc_end57-_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc
.LCPI58_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI58_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a4, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a1, %pc_hi20(current_test)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	blt	$a4, $a0, .LBB58_31
# %bb.1:                                # %.preheader32.lr.ph
	ori	$a0, $zero, 17
	blt	$s0, $a0, .LBB58_15
# %bb.2:                                # %.preheader32.us.preheader
	addi.d	$a2, $s0, -16
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -61681
	ori	$a2, $a2, 241
	lu32i.d	$a2, 61680
	lu52i.d	$a2, $a2, -241
	mulh.du	$a0, $a0, $a2
	addi.w	$a2, $zero, -16
	and	$a2, $a0, $a2
	srli.d	$a0, $a0, 4
	add.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 18
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -17
	move	$s7, $zero
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 84
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 518386
	ori	$s3, $a0, 1336
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	b	.LBB58_4
	.p2align	4, , 16
.LBB58_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB58_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a4, .LBB58_31
.LBB58_4:                               # %.preheader32.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_5 Depth 2
                                        #     Child Loop BB58_9 Depth 2
                                        #     Child Loop BB58_12 Depth 2
	st.d	$a4, $sp, 112                   # 8-byte Folded Spill
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 17
	ld.d	$a6, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB58_5:                               #   Parent Loop BB58_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$s6, $a5, 52
	ld.w	$s8, $a5, 56
	ld.w	$a1, $a5, 60
	ld.w	$a5, $a5, 64
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a6, $a6, $s6
	add.d	$a6, $a6, $s8
	add.d	$a1, $a6, $a1
	add.d	$a1, $a1, $a5
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s3
	addi.d	$a4, $a4, 17
	addi.d	$a5, $a0, 17
	addi.d	$a6, $a3, 68
	bltu	$a4, $s2, .LBB58_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB58_4 Depth=1
	addi.w	$a1, $a4, 0
	bge	$a1, $s0, .LBB58_13
# %bb.7:                                # %.lr.ph38.us.preheader
                                        #   in Loop: Header=BB58_4 Depth=1
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a1, $a4, .LBB58_11
# %bb.8:                                # %vector.ph79
                                        #   in Loop: Header=BB58_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI58_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI58_0)
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a1
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB58_9:                               # %vector.body82
                                        #   Parent Loop BB58_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB58_9
# %bb.10:                               # %middle.block89
                                        #   in Loop: Header=BB58_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	beq	$a1, $a3, .LBB58_13
.LBB58_11:                              # %.lr.ph38.us.preheader94
                                        #   in Loop: Header=BB58_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB58_12:                              # %.lr.ph38.us
                                        #   Parent Loop BB58_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB58_12
.LBB58_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB58_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a1
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	add.w	$a0, $a0, $a1
	ld.d	$a4, $sp, 112                   # 8-byte Folded Reload
	beq	$a2, $a0, .LBB58_3
# %bb.14:                               #   in Loop: Header=BB58_4 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB58_3
.LBB58_15:                              # %.preheader32.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB58_27
# %bb.16:                               # %.preheader32.us42.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB58_18
	.p2align	4, , 16
.LBB58_17:                              # %_Z9check_sumIiEvT_.exit.us45
                                        #   in Loop: Header=BB58_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB58_31
.LBB58_18:                              # %.preheader32.us42
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_21 Depth 2
                                        #     Child Loop BB58_24 Depth 2
	bgeu	$s0, $a5, .LBB58_20
# %bb.19:                               #   in Loop: Header=BB58_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB58_23
	.p2align	4, , 16
.LBB58_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB58_18 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB58_21:                              # %vector.body
                                        #   Parent Loop BB58_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB58_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB58_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB58_25
.LBB58_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB58_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB58_24:                              # %scalar.ph
                                        #   Parent Loop BB58_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $s6
	add.d	$a0, $a0, $a1
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB58_24
.LBB58_25:                              # %._crit_edge.us49
                                        #   in Loop: Header=BB58_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s5
	add.w	$a1, $a1, $s4
	beq	$a0, $a1, .LBB58_17
# %bb.26:                               #   in Loop: Header=BB58_18 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB58_17
.LBB58_27:                              # %.preheader32.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB58_29
	.p2align	4, , 16
.LBB58_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB58_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB58_31
.LBB58_29:                              # %.preheader32
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB58_28
# %bb.30:                               #   in Loop: Header=BB58_29 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB58_28
.LBB58_31:                              # %._crit_edge41
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 104                   # 8-byte Folded Reload
	beqz	$a2, .LBB58_33
# %bb.32:                               # %._crit_edge41
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB58_35
.LBB58_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB58_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB58_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI58_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI58_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB58_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end58:
	.size	_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc, .Lfunc_end58-_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc
.LCPI59_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI59_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 88                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 96                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB59_26
# %bb.1:                                # %.preheader31.lr.ph
	ori	$a0, $zero, 16
	blt	$s0, $a0, .LBB59_15
# %bb.2:                                # %.preheader31.us.preheader
	move	$s2, $zero
	addi.d	$a2, $s0, -15
	bstrpick.d	$s6, $a2, 31, 0
	sltu	$a2, $a0, $s6
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s6, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	bstrins.d	$a0, $zero, 3, 0
	addi.d	$a2, $a0, 17
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	addi.d	$a3, $a2, -16
	sub.d	$a4, $a3, $a0
	andi	$a2, $a2, 7
	st.d	$a4, $sp, 56                    # 8-byte Folded Spill
	sub.d	$a4, $a4, $a2
	st.d	$a4, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a4, $s1, 80
	st.d	$a4, $sp, 80                    # 8-byte Folded Spill
	st.d	$a2, $sp, 48                    # 8-byte Folded Spill
	sub.d	$a2, $a3, $a2
	sub.d	$a0, $a2, $a0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -252279
	ori	$s8, $a0, 2944
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	b	.LBB59_4
	.p2align	4, , 16
.LBB59_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB59_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB59_26
.LBB59_4:                               # %.preheader31.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_5 Depth 2
                                        #     Child Loop BB59_9 Depth 2
                                        #     Child Loop BB59_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 16
	ld.d	$a6, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB59_5:                               #   Parent Loop BB59_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$s4, $a5, 48
	ld.w	$s3, $a5, 52
	ld.w	$s5, $a5, 56
	ld.w	$a5, $a5, 60
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $s4
	add.d	$a6, $a6, $s3
	add.d	$a6, $a6, $s5
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $fp
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s8
	addi.d	$a4, $a4, 16
	addi.d	$a5, $a0, 16
	addi.d	$a6, $a3, 64
	bltu	$a4, $s6, .LBB59_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB59_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB59_13
# %bb.7:                                # %.lr.ph37.us.preheader
                                        #   in Loop: Header=BB59_4 Depth=1
	ld.d	$a4, $sp, 56                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB59_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB59_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI59_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI59_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB59_9:                               # %vector.body
                                        #   Parent Loop BB59_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s7
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB59_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB59_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	beqz	$a3, .LBB59_13
.LBB59_11:                              # %.lr.ph37.us.preheader76
                                        #   in Loop: Header=BB59_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB59_12:                              # %.lr.ph37.us
                                        #   Parent Loop BB59_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $fp
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s7
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB59_12
.LBB59_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB59_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a3, $sp, 72                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a3
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	add.w	$a0, $a0, $a3
	beq	$a2, $a0, .LBB59_3
# %bb.14:                               #   in Loop: Header=BB59_4 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB59_3
.LBB59_15:                              # %.preheader31.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB59_22
# %bb.16:                               # %.preheader31.us41.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB59_18
	.p2align	4, , 16
.LBB59_17:                              # %_Z9check_sumIiEvT_.exit.us44
                                        #   in Loop: Header=BB59_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB59_26
.LBB59_18:                              # %.preheader31.us41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB59_19:                              #   Parent Loop BB59_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB59_19
# %bb.20:                               # %._crit_edge.us48
                                        #   in Loop: Header=BB59_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB59_17
# %bb.21:                               #   in Loop: Header=BB59_18 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB59_17
.LBB59_22:                              # %.preheader31.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB59_24
	.p2align	4, , 16
.LBB59_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB59_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB59_26
.LBB59_24:                              # %.preheader31
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB59_23
# %bb.25:                               #   in Loop: Header=BB59_24 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB59_23
.LBB59_26:                              # %._crit_edge40
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	beqz	$a2, .LBB59_28
# %bb.27:                               # %._crit_edge40
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB59_30
.LBB59_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB59_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB59_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI59_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI59_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB59_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end59:
	.size	_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc, .Lfunc_end59-_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc
.LCPI60_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI60_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB60_26
# %bb.1:                                # %.preheader30.lr.ph
	ori	$a0, $zero, 15
	blt	$s0, $a0, .LBB60_15
# %bb.2:                                # %.preheader30.us.preheader
	addi.d	$a2, $s0, -14
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -489336
	ori	$a2, $a2, 2185
	lu32i.d	$a2, -489336
	lu52i.d	$a2, $a2, -1912
	mulh.du	$a0, $a0, $a2
	srli.d	$a0, $a0, 3
	slli.d	$a2, $a0, 4
	sub.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 16
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -15
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 76
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 25633
	ori	$s3, $a0, 456
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB60_4
	.p2align	4, , 16
.LBB60_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB60_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB60_26
.LBB60_4:                               # %.preheader30.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_5 Depth 2
                                        #     Child Loop BB60_9 Depth 2
                                        #     Child Loop BB60_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 15
	ld.d	$a6, $sp, 64                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB60_5:                               #   Parent Loop BB60_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$s6, $a5, 52
	ld.w	$a5, $a5, 56
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a6, $a6, $s6
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 15
	addi.d	$a5, $a0, 15
	addi.d	$a6, $a3, 60
	bltu	$a4, $s2, .LBB60_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB60_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB60_13
# %bb.7:                                # %.lr.ph36.us.preheader
                                        #   in Loop: Header=BB60_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB60_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB60_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI60_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI60_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB60_9:                               # %vector.body
                                        #   Parent Loop BB60_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB60_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB60_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB60_13
.LBB60_11:                              # %.lr.ph36.us.preheader75
                                        #   in Loop: Header=BB60_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB60_12:                              # %.lr.ph36.us
                                        #   Parent Loop BB60_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB60_12
.LBB60_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB60_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB60_3
# %bb.14:                               #   in Loop: Header=BB60_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB60_3
.LBB60_15:                              # %.preheader30.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB60_22
# %bb.16:                               # %.preheader30.us40.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB60_18
	.p2align	4, , 16
.LBB60_17:                              # %_Z9check_sumIiEvT_.exit.us43
                                        #   in Loop: Header=BB60_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB60_26
.LBB60_18:                              # %.preheader30.us40
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB60_19:                              #   Parent Loop BB60_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB60_19
# %bb.20:                               # %._crit_edge.us47
                                        #   in Loop: Header=BB60_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB60_17
# %bb.21:                               #   in Loop: Header=BB60_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB60_17
.LBB60_22:                              # %.preheader30.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB60_24
	.p2align	4, , 16
.LBB60_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB60_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB60_26
.LBB60_24:                              # %.preheader30
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB60_23
# %bb.25:                               #   in Loop: Header=BB60_24 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB60_23
.LBB60_26:                              # %._crit_edge39
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB60_28
# %bb.27:                               # %._crit_edge39
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB60_30
.LBB60_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB60_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB60_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI60_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI60_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB60_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end60:
	.size	_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc, .Lfunc_end60-_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc
.LCPI61_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI61_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB61_26
# %bb.1:                                # %.preheader29.lr.ph
	ori	$a0, $zero, 14
	blt	$s0, $a0, .LBB61_15
# %bb.2:                                # %.preheader29.us.preheader
	addi.d	$a2, $s0, -13
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	srli.d	$a2, $a2, 1
	lu12i.w	$a3, 149796
	ori	$a3, $a3, 2341
	lu32i.d	$a3, 299593
	lu52i.d	$a3, $a3, 1170
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 1
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 15
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -14
	move	$s7, $zero
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 72
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 303544
	ori	$s3, $a0, 2064
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB61_4
	.p2align	4, , 16
.LBB61_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB61_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB61_26
.LBB61_4:                               # %.preheader29.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_5 Depth 2
                                        #     Child Loop BB61_9 Depth 2
                                        #     Child Loop BB61_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 14
	ld.d	$a6, $sp, 48                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB61_5:                               #   Parent Loop BB61_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$a5, $a5, 52
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 14
	addi.d	$a5, $a0, 14
	addi.d	$a6, $a3, 56
	bltu	$a4, $s2, .LBB61_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB61_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB61_13
# %bb.7:                                # %.lr.ph35.us.preheader
                                        #   in Loop: Header=BB61_4 Depth=1
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB61_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB61_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI61_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI61_0)
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB61_9:                               # %vector.body
                                        #   Parent Loop BB61_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB61_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB61_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB61_13
.LBB61_11:                              # %.lr.ph35.us.preheader74
                                        #   in Loop: Header=BB61_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB61_12:                              # %.lr.ph35.us
                                        #   Parent Loop BB61_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB61_12
.LBB61_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB61_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB61_3
# %bb.14:                               #   in Loop: Header=BB61_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB61_3
.LBB61_15:                              # %.preheader29.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB61_22
# %bb.16:                               # %.preheader29.us39.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB61_18
	.p2align	4, , 16
.LBB61_17:                              # %_Z9check_sumIiEvT_.exit.us42
                                        #   in Loop: Header=BB61_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB61_26
.LBB61_18:                              # %.preheader29.us39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB61_19:                              #   Parent Loop BB61_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB61_19
# %bb.20:                               # %._crit_edge.us46
                                        #   in Loop: Header=BB61_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB61_17
# %bb.21:                               #   in Loop: Header=BB61_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB61_17
.LBB61_22:                              # %.preheader29.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB61_24
	.p2align	4, , 16
.LBB61_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB61_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB61_26
.LBB61_24:                              # %.preheader29
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB61_23
# %bb.25:                               #   in Loop: Header=BB61_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB61_23
.LBB61_26:                              # %._crit_edge38
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB61_28
# %bb.27:                               # %._crit_edge38
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB61_30
.LBB61_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB61_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB61_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI61_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI61_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB61_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end61:
	.size	_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc, .Lfunc_end61-_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc
.LCPI62_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI62_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 40                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 48                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB62_26
# %bb.1:                                # %.preheader28.lr.ph
	ori	$a0, $zero, 13
	blt	$s0, $a0, .LBB62_15
# %bb.2:                                # %.preheader28.us.preheader
	addi.d	$a2, $s0, -12
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -241980
	ori	$a3, $a3, 3781
	lu32i.d	$a3, 322638
	lu52i.d	$a3, $a3, 1260
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 2
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 14
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$s8, $a0, -13
	move	$s7, $zero
	st.d	$s8, $sp, 32                    # 8-byte Folded Spill
	bstrins.d	$s8, $zero, 2, 0
	addi.d	$fp, $s1, 68
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	b	.LBB62_4
	.p2align	4, , 16
.LBB62_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB62_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB62_26
.LBB62_4:                               # %.preheader28.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_5 Depth 2
                                        #     Child Loop BB62_9 Depth 2
                                        #     Child Loop BB62_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 13
	move	$a6, $fp
	.p2align	4, , 16
.LBB62_5:                               #   Parent Loop BB62_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$a5, $a5, 48
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.w	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	addu16i.d	$a2, $a2, -29195
	addi.w	$a2, $a2, -424
	addi.d	$a4, $a4, 13
	addi.d	$a5, $a0, 13
	addi.d	$a6, $a3, 52
	bltu	$a4, $s2, .LBB62_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB62_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB62_13
# %bb.7:                                # %.lr.ph34.us.preheader
                                        #   in Loop: Header=BB62_4 Depth=1
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB62_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB62_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI62_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI62_0)
	add.d	$a0, $a0, $s8
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $s8
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB62_9:                               # %vector.body
                                        #   Parent Loop BB62_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s3
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB62_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB62_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	beq	$a3, $s8, .LBB62_13
.LBB62_11:                              # %.lr.ph34.us.preheader73
                                        #   in Loop: Header=BB62_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB62_12:                              # %.lr.ph34.us
                                        #   Parent Loop BB62_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s3
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB62_12
.LBB62_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB62_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s5
	add.w	$a0, $a0, $s6
	beq	$a2, $a0, .LBB62_3
# %bb.14:                               #   in Loop: Header=BB62_4 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB62_3
.LBB62_15:                              # %.preheader28.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB62_22
# %bb.16:                               # %.preheader28.us38.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB62_18
	.p2align	4, , 16
.LBB62_17:                              # %_Z9check_sumIiEvT_.exit.us41
                                        #   in Loop: Header=BB62_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB62_26
.LBB62_18:                              # %.preheader28.us38
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB62_19:                              #   Parent Loop BB62_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB62_19
# %bb.20:                               # %._crit_edge.us45
                                        #   in Loop: Header=BB62_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB62_17
# %bb.21:                               #   in Loop: Header=BB62_18 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB62_17
.LBB62_22:                              # %.preheader28.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB62_24
	.p2align	4, , 16
.LBB62_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB62_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB62_26
.LBB62_24:                              # %.preheader28
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB62_23
# %bb.25:                               #   in Loop: Header=BB62_24 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB62_23
.LBB62_26:                              # %._crit_edge37
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	beqz	$a2, .LBB62_28
# %bb.27:                               # %._crit_edge37
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB62_30
.LBB62_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB62_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB62_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI62_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI62_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB62_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end62:
	.size	_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc, .Lfunc_end62-_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc
.LCPI63_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI63_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB63_26
# %bb.1:                                # %.preheader27.lr.ph
	ori	$a0, $zero, 12
	blt	$s0, $a0, .LBB63_15
# %bb.2:                                # %.preheader27.us.preheader
	addi.d	$a2, $s0, -11
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -349526
	ori	$a3, $a3, 2731
	lu32i.d	$a3, -349526
	lu52i.d	$a3, $a3, -1366
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 3
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 13
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -12
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 64
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -189209
	ori	$s3, $a0, 1184
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB63_4
	.p2align	4, , 16
.LBB63_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB63_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB63_26
.LBB63_4:                               # %.preheader27.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_5 Depth 2
                                        #     Child Loop BB63_9 Depth 2
                                        #     Child Loop BB63_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 12
	move	$a6, $fp
	.p2align	4, , 16
.LBB63_5:                               #   Parent Loop BB63_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$a5, $a5, 44
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 12
	addi.d	$a5, $a0, 12
	addi.d	$a6, $a3, 48
	bltu	$a4, $s2, .LBB63_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB63_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB63_13
# %bb.7:                                # %.lr.ph33.us.preheader
                                        #   in Loop: Header=BB63_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB63_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB63_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI63_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI63_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB63_9:                               # %vector.body
                                        #   Parent Loop BB63_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB63_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB63_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB63_13
.LBB63_11:                              # %.lr.ph33.us.preheader72
                                        #   in Loop: Header=BB63_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB63_12:                              # %.lr.ph33.us
                                        #   Parent Loop BB63_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB63_12
.LBB63_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB63_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB63_3
# %bb.14:                               #   in Loop: Header=BB63_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB63_3
.LBB63_15:                              # %.preheader27.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB63_22
# %bb.16:                               # %.preheader27.us37.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB63_18
	.p2align	4, , 16
.LBB63_17:                              # %_Z9check_sumIiEvT_.exit.us40
                                        #   in Loop: Header=BB63_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB63_26
.LBB63_18:                              # %.preheader27.us37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB63_19:                              #   Parent Loop BB63_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB63_19
# %bb.20:                               # %._crit_edge.us44
                                        #   in Loop: Header=BB63_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB63_17
# %bb.21:                               #   in Loop: Header=BB63_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB63_17
.LBB63_22:                              # %.preheader27.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB63_24
	.p2align	4, , 16
.LBB63_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB63_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB63_26
.LBB63_24:                              # %.preheader27
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB63_23
# %bb.25:                               #   in Loop: Header=BB63_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB63_23
.LBB63_26:                              # %._crit_edge36
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB63_28
# %bb.27:                               # %._crit_edge36
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB63_30
.LBB63_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB63_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB63_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI63_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI63_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB63_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end63:
	.size	_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc, .Lfunc_end63-_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN16while_loop_testsILi10EiE7do_testEPKiPKc,"axG",@progbits,_ZN16while_loop_testsILi10EiE7do_testEPKiPKc,comdat
	.weak	_ZN16while_loop_testsILi10EiE7do_testEPKiPKc # -- Begin function _ZN16while_loop_testsILi10EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN16while_loop_testsILi10EiE7do_testEPKiPKc,@function
_ZN16while_loop_testsILi10EiE7do_testEPKiPKc: # @_ZN16while_loop_testsILi10EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s0, $a0, %pc_lo12(temp_string)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	move	$a0, $fp
	move	$a1, $s1
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 100
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 200
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 300
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 400
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 500
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 600
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 700
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 800
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 900
	move	$a0, $fp
	move	$a1, $s1
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end64:
	.size	_ZN16while_loop_testsILi10EiE7do_testEPKiPKc, .Lfunc_end64-_ZN16while_loop_testsILi10EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc
.LCPI65_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI65_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB65_26
# %bb.1:                                # %.preheader26.lr.ph
	ori	$a0, $zero, 11
	blt	$s0, $a0, .LBB65_15
# %bb.2:                                # %.preheader26.us.preheader
	addi.d	$a2, $s0, -10
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -285976
	ori	$a3, $a3, 2979
	lu32i.d	$a3, -285976
	lu52i.d	$a3, $a3, 744
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 1
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 12
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -11
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 60
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 88702
	ori	$s3, $a0, 2792
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB65_4
	.p2align	4, , 16
.LBB65_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB65_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB65_26
.LBB65_4:                               # %.preheader26.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_5 Depth 2
                                        #     Child Loop BB65_9 Depth 2
                                        #     Child Loop BB65_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 11
	move	$a6, $fp
	.p2align	4, , 16
.LBB65_5:                               #   Parent Loop BB65_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$a5, $a5, 40
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 11
	addi.d	$a5, $a0, 11
	addi.d	$a6, $a3, 44
	bltu	$a4, $s2, .LBB65_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB65_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB65_13
# %bb.7:                                # %.lr.ph32.us.preheader
                                        #   in Loop: Header=BB65_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB65_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB65_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI65_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI65_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB65_9:                               # %vector.body
                                        #   Parent Loop BB65_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB65_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB65_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB65_13
.LBB65_11:                              # %.lr.ph32.us.preheader71
                                        #   in Loop: Header=BB65_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB65_12:                              # %.lr.ph32.us
                                        #   Parent Loop BB65_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB65_12
.LBB65_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB65_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB65_3
# %bb.14:                               #   in Loop: Header=BB65_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB65_3
.LBB65_15:                              # %.preheader26.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB65_22
# %bb.16:                               # %.preheader26.us36.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB65_18
	.p2align	4, , 16
.LBB65_17:                              # %_Z9check_sumIiEvT_.exit.us39
                                        #   in Loop: Header=BB65_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB65_26
.LBB65_18:                              # %.preheader26.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB65_19:                              #   Parent Loop BB65_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB65_19
# %bb.20:                               # %._crit_edge.us43
                                        #   in Loop: Header=BB65_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB65_17
# %bb.21:                               #   in Loop: Header=BB65_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB65_17
.LBB65_22:                              # %.preheader26.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB65_24
	.p2align	4, , 16
.LBB65_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB65_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB65_26
.LBB65_24:                              # %.preheader26
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB65_23
# %bb.25:                               #   in Loop: Header=BB65_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB65_23
.LBB65_26:                              # %._crit_edge35
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB65_28
# %bb.27:                               # %._crit_edge35
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB65_30
.LBB65_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB65_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB65_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI65_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI65_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB65_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end65:
	.size	_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc, .Lfunc_end65-_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc
.LCPI66_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI66_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB66_26
# %bb.1:                                # %.preheader25.lr.ph
	ori	$a0, $zero, 10
	blt	$s0, $a0, .LBB66_15
# %bb.2:                                # %.preheader25.us.preheader
	addi.d	$a2, $s0, -9
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -209716
	ori	$a3, $a3, 3277
	lu32i.d	$a3, -209716
	lu52i.d	$a3, $a3, -820
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 3
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 11
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -10
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 56
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 366614
	ori	$s3, $a0, 304
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB66_4
	.p2align	4, , 16
.LBB66_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB66_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB66_26
.LBB66_4:                               # %.preheader25.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_5 Depth 2
                                        #     Child Loop BB66_9 Depth 2
                                        #     Child Loop BB66_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 10
	move	$a6, $fp
	.p2align	4, , 16
.LBB66_5:                               #   Parent Loop BB66_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$a5, $a5, 36
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 10
	addi.d	$a5, $a0, 10
	addi.d	$a6, $a3, 40
	bltu	$a4, $s2, .LBB66_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB66_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB66_13
# %bb.7:                                # %.lr.ph31.us.preheader
                                        #   in Loop: Header=BB66_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB66_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB66_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI66_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI66_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB66_9:                               # %vector.body
                                        #   Parent Loop BB66_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB66_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB66_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB66_13
.LBB66_11:                              # %.lr.ph31.us.preheader70
                                        #   in Loop: Header=BB66_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB66_12:                              # %.lr.ph31.us
                                        #   Parent Loop BB66_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB66_12
.LBB66_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB66_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB66_3
# %bb.14:                               #   in Loop: Header=BB66_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB66_3
.LBB66_15:                              # %.preheader25.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB66_22
# %bb.16:                               # %.preheader25.us35.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB66_18
	.p2align	4, , 16
.LBB66_17:                              # %_Z9check_sumIiEvT_.exit.us38
                                        #   in Loop: Header=BB66_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB66_26
.LBB66_18:                              # %.preheader25.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB66_19:                              #   Parent Loop BB66_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB66_19
# %bb.20:                               # %._crit_edge.us42
                                        #   in Loop: Header=BB66_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB66_17
# %bb.21:                               #   in Loop: Header=BB66_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB66_17
.LBB66_22:                              # %.preheader25.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB66_24
	.p2align	4, , 16
.LBB66_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB66_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB66_26
.LBB66_24:                              # %.preheader25
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB66_23
# %bb.25:                               #   in Loop: Header=BB66_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB66_23
.LBB66_26:                              # %._crit_edge34
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB66_28
# %bb.27:                               # %._crit_edge34
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB66_30
.LBB66_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB66_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB66_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI66_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI66_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB66_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end66:
	.size	_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc, .Lfunc_end66-_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc
.LCPI67_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI67_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB67_26
# %bb.1:                                # %.preheader24.lr.ph
	ori	$a0, $zero, 9
	blt	$s0, $a0, .LBB67_15
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.d	$a2, $s0, -8
	bstrpick.d	$s6, $a2, 31, 0
	sltu	$a2, $a0, $s6
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s6, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -466034
	ori	$a2, $a2, 911
	lu32i.d	$a2, -116509
	lu52i.d	$a2, $a2, -456
	mulh.du	$a0, $a0, $a2
	addi.w	$a2, $zero, -8
	and	$a3, $a0, $a2
	srli.d	$a0, $a0, 3
	add.d	$a0, $a3, $a0
	addi.d	$a3, $a0, 10
	sltu	$a4, $s0, $a3
	maskeqz	$a3, $a3, $a4
	masknez	$a4, $s0, $a4
	or	$a3, $a3, $a4
	sub.d	$a0, $a3, $a0
	addi.d	$a0, $a0, -9
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	and	$a0, $a0, $a2
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 52
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -404051
	ori	$s3, $a0, 1912
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	b	.LBB67_4
	.p2align	4, , 16
.LBB67_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB67_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB67_26
.LBB67_4:                               # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_5 Depth 2
                                        #     Child Loop BB67_9 Depth 2
                                        #     Child Loop BB67_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 9
	move	$a6, $fp
	.p2align	4, , 16
.LBB67_5:                               #   Parent Loop BB67_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$a5, $a5, 32
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 9
	addi.d	$a5, $a0, 9
	addi.d	$a6, $a3, 36
	bltu	$a4, $s6, .LBB67_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB67_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB67_13
# %bb.7:                                # %.lr.ph30.us.preheader
                                        #   in Loop: Header=BB67_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB67_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB67_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI67_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI67_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB67_9:                               # %vector.body
                                        #   Parent Loop BB67_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB67_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB67_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB67_13
.LBB67_11:                              # %.lr.ph30.us.preheader69
                                        #   in Loop: Header=BB67_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB67_12:                              # %.lr.ph30.us
                                        #   Parent Loop BB67_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB67_12
.LBB67_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB67_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s8
	add.w	$a0, $a0, $s7
	beq	$a2, $a0, .LBB67_3
# %bb.14:                               #   in Loop: Header=BB67_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB67_3
.LBB67_15:                              # %.preheader24.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB67_22
# %bb.16:                               # %.preheader24.us34.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB67_18
	.p2align	4, , 16
.LBB67_17:                              # %_Z9check_sumIiEvT_.exit.us37
                                        #   in Loop: Header=BB67_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB67_26
.LBB67_18:                              # %.preheader24.us34
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB67_19:                              #   Parent Loop BB67_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB67_19
# %bb.20:                               # %._crit_edge.us41
                                        #   in Loop: Header=BB67_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB67_17
# %bb.21:                               #   in Loop: Header=BB67_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB67_17
.LBB67_22:                              # %.preheader24.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB67_24
	.p2align	4, , 16
.LBB67_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB67_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB67_26
.LBB67_24:                              # %.preheader24
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB67_23
# %bb.25:                               #   in Loop: Header=BB67_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB67_23
.LBB67_26:                              # %._crit_edge33
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB67_28
# %bb.27:                               # %._crit_edge33
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB67_30
.LBB67_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB67_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB67_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI67_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI67_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB67_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end67:
	.size	_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc, .Lfunc_end67-_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc
.LCPI68_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI68_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB68_26
# %bb.1:                                # %.preheader23.lr.ph
	ori	$t5, $zero, 8
	blt	$s0, $t5, .LBB68_15
# %bb.2:                                # %.preheader23.us.preheader
	move	$s6, $zero
	addi.d	$a0, $s0, -7
	bstrpick.d	$s7, $a0, 31, 0
	sltu	$a0, $t5, $s7
	masknez	$a2, $t5, $a0
	maskeqz	$a0, $s7, $a0
	or	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	bstrins.d	$a0, $zero, 2, 0
	addi.d	$a2, $a0, 9
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	addi.d	$a3, $a2, -8
	sub.d	$a4, $a3, $a0
	andi	$a2, $a2, 7
	st.d	$a4, $sp, 64                    # 8-byte Folded Spill
	sub.d	$a4, $a4, $a2
	st.d	$a4, $sp, 48                    # 8-byte Folded Spill
	addi.d	$s2, $s1, 48
	st.d	$a2, $sp, 56                    # 8-byte Folded Spill
	sub.d	$a2, $a3, $a2
	sub.d	$a0, $a2, $a0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -126140
	ori	$fp, $a0, 3520
	lu12i.w	$a0, -277912
	ori	$s8, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s5, $a0, 1536
	b	.LBB68_4
	.p2align	4, , 16
.LBB68_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB68_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB68_26
.LBB68_4:                               # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_5 Depth 2
                                        #     Child Loop BB68_9 Depth 2
                                        #     Child Loop BB68_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 8
	move	$a6, $s2
	.p2align	4, , 16
.LBB68_5:                               #   Parent Loop BB68_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$a5, $a5, 28
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $fp
	addi.d	$a4, $a4, 8
	addi.d	$a5, $a0, 8
	addi.d	$a6, $a3, 32
	bltu	$a4, $s7, .LBB68_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB68_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB68_13
# %bb.7:                                # %.lr.ph29.us.preheader
                                        #   in Loop: Header=BB68_4 Depth=1
	ld.d	$a4, $sp, 64                    # 8-byte Folded Reload
	bltu	$a4, $t5, .LBB68_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB68_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI68_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI68_0)
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a2, $sp, 40                    # 8-byte Folded Reload
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB68_9:                               # %vector.body
                                        #   Parent Loop BB68_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s8
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB68_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB68_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	beqz	$a3, .LBB68_13
.LBB68_11:                              # %.lr.ph29.us.preheader68
                                        #   in Loop: Header=BB68_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB68_12:                              # %.lr.ph29.us
                                        #   Parent Loop BB68_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s8
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB68_12
.LBB68_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB68_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s3
	add.w	$a0, $a0, $s5
	beq	$a2, $a0, .LBB68_3
# %bb.14:                               #   in Loop: Header=BB68_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB68_3
.LBB68_15:                              # %.preheader23.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB68_22
# %bb.16:                               # %.preheader23.us33.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB68_18
	.p2align	4, , 16
.LBB68_17:                              # %_Z9check_sumIiEvT_.exit.us36
                                        #   in Loop: Header=BB68_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB68_26
.LBB68_18:                              # %.preheader23.us33
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB68_19:                              #   Parent Loop BB68_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB68_19
# %bb.20:                               # %._crit_edge.us40
                                        #   in Loop: Header=BB68_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB68_17
# %bb.21:                               #   in Loop: Header=BB68_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB68_17
.LBB68_22:                              # %.preheader23.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB68_24
	.p2align	4, , 16
.LBB68_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB68_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB68_26
.LBB68_24:                              # %.preheader23
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB68_23
# %bb.25:                               #   in Loop: Header=BB68_24 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB68_23
.LBB68_26:                              # %._crit_edge32
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB68_28
# %bb.27:                               # %._crit_edge32
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB68_30
.LBB68_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB68_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB68_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI68_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI68_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB68_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end68:
	.size	_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc, .Lfunc_end68-_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc
.LCPI69_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI69_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB69_26
# %bb.1:                                # %.preheader22.lr.ph
	ori	$a0, $zero, 7
	blt	$s0, $a0, .LBB69_15
# %bb.2:                                # %.preheader22.us.preheader
	addi.d	$a2, $s0, -6
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -449390
	ori	$a2, $a2, 1171
	lu32i.d	$a2, 149796
	lu52i.d	$a2, $a2, 585
	mulh.du	$a2, $a0, $a2
	sub.d	$a0, $a0, $a2
	srli.d	$a0, $a0, 1
	add.d	$a0, $a0, $a2
	srli.d	$a0, $a0, 2
	slli.d	$a2, $a0, 3
	sub.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 8
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -7
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 44
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 151772
	ori	$s3, $a0, 1032
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB69_4
	.p2align	4, , 16
.LBB69_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB69_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB69_26
.LBB69_4:                               # %.preheader22.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_5 Depth 2
                                        #     Child Loop BB69_9 Depth 2
                                        #     Child Loop BB69_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 7
	move	$a6, $fp
	.p2align	4, , 16
.LBB69_5:                               #   Parent Loop BB69_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$a5, $a5, 24
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 7
	addi.d	$a5, $a0, 7
	addi.d	$a6, $a3, 28
	bltu	$a4, $s2, .LBB69_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB69_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB69_13
# %bb.7:                                # %.lr.ph28.us.preheader
                                        #   in Loop: Header=BB69_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB69_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB69_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI69_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI69_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB69_9:                               # %vector.body
                                        #   Parent Loop BB69_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB69_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB69_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB69_13
.LBB69_11:                              # %.lr.ph28.us.preheader67
                                        #   in Loop: Header=BB69_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB69_12:                              # %.lr.ph28.us
                                        #   Parent Loop BB69_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB69_12
.LBB69_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB69_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB69_3
# %bb.14:                               #   in Loop: Header=BB69_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB69_3
.LBB69_15:                              # %.preheader22.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB69_22
# %bb.16:                               # %.preheader22.us32.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB69_18
	.p2align	4, , 16
.LBB69_17:                              # %_Z9check_sumIiEvT_.exit.us35
                                        #   in Loop: Header=BB69_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB69_26
.LBB69_18:                              # %.preheader22.us32
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB69_19:                              #   Parent Loop BB69_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB69_19
# %bb.20:                               # %._crit_edge.us39
                                        #   in Loop: Header=BB69_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB69_17
# %bb.21:                               #   in Loop: Header=BB69_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB69_17
.LBB69_22:                              # %.preheader22.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB69_24
	.p2align	4, , 16
.LBB69_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB69_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB69_26
.LBB69_24:                              # %.preheader22
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB69_23
# %bb.25:                               #   in Loop: Header=BB69_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB69_23
.LBB69_26:                              # %._crit_edge31
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB69_28
# %bb.27:                               # %._crit_edge31
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB69_30
.LBB69_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB69_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB69_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI69_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI69_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB69_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end69:
	.size	_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc, .Lfunc_end69-_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc
.LCPI70_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI70_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB70_26
# %bb.1:                                # %.preheader21.lr.ph
	ori	$a0, $zero, 6
	blt	$s0, $a0, .LBB70_15
# %bb.2:                                # %.preheader21.us.preheader
	addi.d	$a2, $s0, -5
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -349526
	ori	$a3, $a3, 2731
	lu32i.d	$a3, -349526
	lu52i.d	$a3, $a3, -1366
	mulh.du	$a2, $a2, $a3
	srli.d	$a2, $a2, 2
	mul.d	$a0, $a2, $a0
	addi.d	$a2, $a0, 7
	sltu	$a3, $s0, $a2
	maskeqz	$a2, $a2, $a3
	masknez	$a3, $s0, $a3
	or	$a2, $a2, $a3
	sub.d	$a0, $a2, $a0
	addi.d	$a0, $a0, -6
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 40
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 429683
	ori	$s3, $a0, 2640
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB70_4
	.p2align	4, , 16
.LBB70_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB70_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB70_26
.LBB70_4:                               # %.preheader21.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_5 Depth 2
                                        #     Child Loop BB70_9 Depth 2
                                        #     Child Loop BB70_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 6
	move	$a6, $fp
	.p2align	4, , 16
.LBB70_5:                               #   Parent Loop BB70_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$a5, $a5, 20
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 6
	addi.d	$a5, $a0, 6
	addi.d	$a6, $a3, 24
	bltu	$a4, $s2, .LBB70_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB70_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB70_13
# %bb.7:                                # %.lr.ph27.us.preheader
                                        #   in Loop: Header=BB70_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB70_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB70_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI70_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI70_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB70_9:                               # %vector.body
                                        #   Parent Loop BB70_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB70_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB70_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB70_13
.LBB70_11:                              # %.lr.ph27.us.preheader66
                                        #   in Loop: Header=BB70_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	.p2align	4, , 16
.LBB70_12:                              # %.lr.ph27.us
                                        #   Parent Loop BB70_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 4
	bltu	$a0, $s0, .LBB70_12
.LBB70_13:                              # %._crit_edge.us
                                        #   in Loop: Header=BB70_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB70_3
# %bb.14:                               #   in Loop: Header=BB70_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB70_3
.LBB70_15:                              # %.preheader21.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB70_22
# %bb.16:                               # %.preheader21.us31.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB70_18
	.p2align	4, , 16
.LBB70_17:                              # %_Z9check_sumIiEvT_.exit.us34
                                        #   in Loop: Header=BB70_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB70_26
.LBB70_18:                              # %.preheader21.us31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB70_19:                              #   Parent Loop BB70_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB70_19
# %bb.20:                               # %._crit_edge.us38
                                        #   in Loop: Header=BB70_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB70_17
# %bb.21:                               #   in Loop: Header=BB70_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB70_17
.LBB70_22:                              # %.preheader21.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB70_24
	.p2align	4, , 16
.LBB70_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB70_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB70_26
.LBB70_24:                              # %.preheader21
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB70_23
# %bb.25:                               #   in Loop: Header=BB70_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB70_23
.LBB70_26:                              # %._crit_edge30
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB70_28
# %bb.27:                               # %._crit_edge30
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB70_30
.LBB70_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB70_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB70_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI70_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI70_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB70_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end70:
	.size	_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc, .Lfunc_end70-_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc
.LCPI71_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI71_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 112                   # 8-byte Folded Spill
	blt	$a1, $a0, .LBB71_32
# %bb.1:                                # %.preheader20.lr.ph
	ori	$a0, $zero, 5
	blt	$s0, $a0, .LBB71_21
# %bb.2:                                # %.preheader20.us.preheader
	move	$s2, $zero
	addi.w	$s4, $s0, -4
	bstrpick.d	$s7, $s4, 31, 0
	sltu	$a2, $a0, $s7
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s7, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -209716
	ori	$a2, $a2, 3277
	lu32i.d	$a2, -209716
	lu52i.d	$a2, $a2, -820
	mulh.du	$a0, $a0, $a2
	srli.d	$a2, $a0, 2
	addi.w	$a3, $zero, -4
	and	$a0, $a0, $a3
	add.d	$a0, $a0, $a2
	addi.d	$a3, $a0, 6
	sltu	$a4, $s0, $a3
	maskeqz	$a3, $a3, $a4
	masknez	$a4, $s0, $a4
	or	$a3, $a3, $a4
	sub.d	$a0, $a3, $a0
	addi.d	$a3, $a0, -5
	addi.d	$a0, $a2, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$fp, $a0, 3
	slli.d	$a2, $a0, 5
	alsl.d	$a0, $a0, $a2, 3
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 5
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	st.d	$a3, $sp, 88                    # 8-byte Folded Spill
	bstrins.d	$a3, $zero, 2, 0
	st.d	$a3, $sp, 32                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	addi.d	$a2, $a0, 80
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	ori	$t4, $zero, 36
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -340981
	ori	$s1, $a0, 152
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	b	.LBB71_4
	.p2align	4, , 16
.LBB71_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB71_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB71_32
.LBB71_4:                               # %.preheader20.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_7 Depth 2
                                        #     Child Loop BB71_10 Depth 2
                                        #     Child Loop BB71_15 Depth 2
                                        #     Child Loop BB71_18 Depth 2
	bgeu	$s4, $t4, .LBB71_6
# %bb.5:                                #   in Loop: Header=BB71_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	ori	$a4, $zero, 5
	b	.LBB71_9
	.p2align	4, , 16
.LBB71_6:                               # %vector.body70.preheader
                                        #   in Loop: Header=BB71_4 Depth=1
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	move	$a2, $fp
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB71_7:                               # %vector.body70
                                        #   Parent Loop BB71_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -80
	ld.w	$a4, $a0, -60
	ld.w	$a5, $a0, -40
	ld.w	$a6, $a0, -20
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 20
	ld.w	$a5, $a0, 40
	ld.w	$a6, $a0, 60
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -76
	ld.w	$a4, $a0, -56
	ld.w	$a5, $a0, -36
	ld.w	$a6, $a0, -16
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 24
	ld.w	$a5, $a0, 44
	ld.w	$a6, $a0, 64
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	ld.w	$a3, $a0, -72
	ld.w	$a4, $a0, -52
	ld.w	$a5, $a0, -32
	ld.w	$a6, $a0, -12
	vinsgr2vr.w	$vr6, $a3, 0
	vinsgr2vr.w	$vr6, $a4, 1
	vinsgr2vr.w	$vr6, $a5, 2
	vinsgr2vr.w	$vr6, $a6, 3
	ld.w	$a3, $a0, 8
	ld.w	$a4, $a0, 28
	ld.w	$a5, $a0, 48
	ld.w	$a6, $a0, 68
	vinsgr2vr.w	$vr7, $a3, 0
	vinsgr2vr.w	$vr7, $a4, 1
	vinsgr2vr.w	$vr7, $a5, 2
	vinsgr2vr.w	$vr7, $a6, 3
	ld.w	$a3, $a0, -68
	ld.w	$a4, $a0, -48
	ld.w	$a5, $a0, -28
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr8, $a3, 0
	vinsgr2vr.w	$vr8, $a4, 1
	vinsgr2vr.w	$vr8, $a5, 2
	vinsgr2vr.w	$vr8, $a6, 3
	ld.w	$a3, $a0, 12
	ld.w	$a4, $a0, 32
	ld.w	$a5, $a0, 52
	ld.w	$a6, $a0, 72
	vinsgr2vr.w	$vr9, $a3, 0
	vinsgr2vr.w	$vr9, $a4, 1
	vinsgr2vr.w	$vr9, $a5, 2
	vinsgr2vr.w	$vr9, $a6, 3
	ld.w	$a3, $a0, -64
	ld.w	$a4, $a0, -44
	ld.w	$a5, $a0, -24
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr10, $a3, 0
	vinsgr2vr.w	$vr10, $a4, 1
	vinsgr2vr.w	$vr10, $a5, 2
	vinsgr2vr.w	$vr10, $a6, 3
	ld.w	$a3, $a0, 16
	ld.w	$a4, $a0, 36
	ld.w	$a5, $a0, 56
	ld.w	$a6, $a0, 76
	vinsgr2vr.w	$vr11, $a3, 0
	vinsgr2vr.w	$vr11, $a4, 1
	vinsgr2vr.w	$vr11, $a5, 2
	vinsgr2vr.w	$vr11, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vadd.w	$vr2, $vr2, $vr6
	vadd.w	$vr3, $vr3, $vr7
	vadd.w	$vr2, $vr2, $vr8
	vadd.w	$vr3, $vr3, $vr9
	vadd.w	$vr2, $vr2, $vr10
	vadd.w	$vr3, $vr3, $vr11
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 160
	bnez	$a2, .LBB71_7
# %bb.8:                                # %middle.block76
                                        #   in Loop: Header=BB71_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	move	$a2, $a3
	ld.d	$a5, $sp, 56                    # 8-byte Folded Reload
	beq	$a5, $fp, .LBB71_11
.LBB71_9:                               # %scalar.ph65.preheader
                                        #   in Loop: Header=BB71_4 Depth=1
	addi.d	$a3, $a4, -5
	ld.d	$a4, $sp, 80                    # 8-byte Folded Reload
	alsl.d	$a4, $a2, $a4, 2
	.p2align	4, , 16
.LBB71_10:                              # %scalar.ph65
                                        #   Parent Loop BB71_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -8
	ld.w	$a6, $a4, -4
	ld.w	$a7, $a4, 0
	ld.w	$t0, $a4, 4
	ld.w	$t1, $a4, 8
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	mul.d	$a5, $a5, $s3
	add.d	$a0, $a0, $a5
	add.w	$a0, $a0, $s1
	addi.d	$a2, $a2, 5
	addi.d	$a3, $a3, 5
	addi.d	$a4, $a4, 20
	bltu	$a2, $s7, .LBB71_10
.LBB71_11:                              # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB71_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB71_19
# %bb.12:                               # %.lr.ph26.us.preheader
                                        #   in Loop: Header=BB71_4 Depth=1
	ld.d	$a2, $sp, 88                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bgeu	$a2, $a4, .LBB71_14
# %bb.13:                               #   in Loop: Header=BB71_4 Depth=1
	move	$a2, $a3
	b	.LBB71_17
	.p2align	4, , 16
.LBB71_14:                              # %vector.ph
                                        #   in Loop: Header=BB71_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI71_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI71_0)
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	add.d	$a2, $a3, $a4
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	alsl.d	$a0, $a3, $a0, 2
	move	$a3, $a4
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB71_15:                              # %vector.body
                                        #   Parent Loop BB71_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a3, $a3, -8
	addi.d	$a0, $a0, 32
	bnez	$a3, .LBB71_15
# %bb.16:                               # %middle.block
                                        #   in Loop: Header=BB71_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB71_19
.LBB71_17:                              # %.lr.ph26.us.preheader82
                                        #   in Loop: Header=BB71_4 Depth=1
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB71_18:                              # %.lr.ph26.us
                                        #   Parent Loop BB71_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a2, $a2, 1
	addi.d	$a3, $a3, 4
	bltu	$a2, $s0, .LBB71_18
.LBB71_19:                              # %._crit_edge.us
                                        #   in Loop: Header=BB71_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB71_3
# %bb.20:                               #   in Loop: Header=BB71_4 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t4, $zero, 36
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB71_3
.LBB71_21:                              # %.preheader20.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB71_28
# %bb.22:                               # %.preheader20.us30.preheader
	lu12i.w	$a0, 65881
	ori	$s1, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB71_24
	.p2align	4, , 16
.LBB71_23:                              # %_Z9check_sumIiEvT_.exit.us33
                                        #   in Loop: Header=BB71_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB71_32
.LBB71_24:                              # %.preheader20.us30
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_25 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	.p2align	4, , 16
.LBB71_25:                              #   Parent Loop BB71_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB71_25
# %bb.26:                               # %._crit_edge.us37
                                        #   in Loop: Header=BB71_24 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB71_23
# %bb.27:                               #   in Loop: Header=BB71_24 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB71_23
.LBB71_28:                              # %.preheader20.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB71_30
	.p2align	4, , 16
.LBB71_29:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB71_30 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB71_32
.LBB71_30:                              # %.preheader20
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB71_29
# %bb.31:                               #   in Loop: Header=BB71_30 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB71_29
.LBB71_32:                              # %._crit_edge29
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB71_34
# %bb.33:                               # %._crit_edge29
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB71_36
.LBB71_34:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB71_37
# %bb.35:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB71_36:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI71_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI71_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB71_37:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end71:
	.size	_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc, .Lfunc_end71-_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc
.LCPI72_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI72_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 112                   # 8-byte Folded Spill
	blt	$a1, $a0, .LBB72_32
# %bb.1:                                # %.preheader19.lr.ph
	ori	$a0, $zero, 4
	blt	$s0, $a0, .LBB72_21
# %bb.2:                                # %.preheader19.us.preheader
	move	$s2, $zero
	addi.w	$s4, $s0, -3
	bstrpick.d	$s7, $s4, 31, 0
	sltu	$a2, $a0, $s7
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s7, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	srli.d	$a2, $a0, 2
	bstrins.d	$a0, $zero, 1, 0
	addi.d	$a3, $a0, 5
	sltu	$a4, $s0, $a3
	maskeqz	$a3, $a3, $a4
	masknez	$a4, $s0, $a4
	or	$a3, $a3, $a4
	sub.d	$a0, $a3, $a0
	addi.d	$a3, $a0, -4
	addi.d	$a0, $a2, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$fp, $a0, 3
	slli.d	$a0, $a0, 5
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 4
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	st.d	$a3, $sp, 88                    # 8-byte Folded Spill
	bstrins.d	$a3, $zero, 2, 0
	st.d	$a3, $sp, 32                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	addi.d	$a2, $a0, 64
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	ori	$t3, $zero, 29
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -63070
	ori	$s5, $a0, 1760
	lu12i.w	$a0, -277912
	ori	$s1, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	b	.LBB72_4
	.p2align	4, , 16
.LBB72_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB72_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB72_32
.LBB72_4:                               # %.preheader19.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_7 Depth 2
                                        #     Child Loop BB72_10 Depth 2
                                        #     Child Loop BB72_15 Depth 2
                                        #     Child Loop BB72_18 Depth 2
	bgeu	$s4, $t3, .LBB72_6
# %bb.5:                                #   in Loop: Header=BB72_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	ori	$a4, $zero, 4
	b	.LBB72_9
	.p2align	4, , 16
.LBB72_6:                               # %vector.body69.preheader
                                        #   in Loop: Header=BB72_4 Depth=1
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	move	$a2, $fp
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB72_7:                               # %vector.body69
                                        #   Parent Loop BB72_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -64
	ld.w	$a4, $a0, -48
	ld.w	$a5, $a0, -32
	ld.w	$a6, $a0, -16
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 16
	ld.w	$a5, $a0, 32
	ld.w	$a6, $a0, 48
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -60
	ld.w	$a4, $a0, -44
	ld.w	$a5, $a0, -28
	ld.w	$a6, $a0, -12
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 20
	ld.w	$a5, $a0, 36
	ld.w	$a6, $a0, 52
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	ld.w	$a3, $a0, -56
	ld.w	$a4, $a0, -40
	ld.w	$a5, $a0, -24
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr6, $a3, 0
	vinsgr2vr.w	$vr6, $a4, 1
	vinsgr2vr.w	$vr6, $a5, 2
	vinsgr2vr.w	$vr6, $a6, 3
	ld.w	$a3, $a0, 8
	ld.w	$a4, $a0, 24
	ld.w	$a5, $a0, 40
	ld.w	$a6, $a0, 56
	vinsgr2vr.w	$vr7, $a3, 0
	vinsgr2vr.w	$vr7, $a4, 1
	vinsgr2vr.w	$vr7, $a5, 2
	vinsgr2vr.w	$vr7, $a6, 3
	ld.w	$a3, $a0, -52
	ld.w	$a4, $a0, -36
	ld.w	$a5, $a0, -20
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr8, $a3, 0
	vinsgr2vr.w	$vr8, $a4, 1
	vinsgr2vr.w	$vr8, $a5, 2
	vinsgr2vr.w	$vr8, $a6, 3
	ld.w	$a3, $a0, 12
	ld.w	$a4, $a0, 28
	ld.w	$a5, $a0, 44
	ld.w	$a6, $a0, 60
	vinsgr2vr.w	$vr9, $a3, 0
	vinsgr2vr.w	$vr9, $a4, 1
	vinsgr2vr.w	$vr9, $a5, 2
	vinsgr2vr.w	$vr9, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vadd.w	$vr2, $vr2, $vr6
	vadd.w	$vr3, $vr3, $vr7
	vadd.w	$vr2, $vr2, $vr8
	vadd.w	$vr3, $vr3, $vr9
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 128
	bnez	$a2, .LBB72_7
# %bb.8:                                # %middle.block75
                                        #   in Loop: Header=BB72_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	move	$a2, $a3
	ld.d	$a5, $sp, 56                    # 8-byte Folded Reload
	beq	$a5, $fp, .LBB72_11
.LBB72_9:                               # %scalar.ph64.preheader
                                        #   in Loop: Header=BB72_4 Depth=1
	addi.d	$a3, $a4, -4
	ld.d	$a4, $sp, 80                    # 8-byte Folded Reload
	alsl.d	$a4, $a2, $a4, 2
	.p2align	4, , 16
.LBB72_10:                              # %scalar.ph64
                                        #   Parent Loop BB72_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -8
	ld.w	$a6, $a4, -4
	ld.w	$a7, $a4, 0
	ld.w	$t0, $a4, 4
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	mul.d	$a5, $a5, $s3
	add.d	$a0, $a0, $a5
	add.w	$a0, $a0, $s5
	addi.d	$a2, $a2, 4
	addi.d	$a3, $a3, 4
	addi.d	$a4, $a4, 16
	bltu	$a2, $s7, .LBB72_10
.LBB72_11:                              # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB72_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB72_19
# %bb.12:                               # %.lr.ph25.us.preheader
                                        #   in Loop: Header=BB72_4 Depth=1
	ld.d	$a2, $sp, 88                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bgeu	$a2, $a4, .LBB72_14
# %bb.13:                               #   in Loop: Header=BB72_4 Depth=1
	move	$a2, $a3
	b	.LBB72_17
	.p2align	4, , 16
.LBB72_14:                              # %vector.ph
                                        #   in Loop: Header=BB72_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI72_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI72_0)
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	add.d	$a2, $a3, $a4
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	alsl.d	$a0, $a3, $a0, 2
	move	$a3, $a4
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB72_15:                              # %vector.body
                                        #   Parent Loop BB72_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a3, $a3, -8
	addi.d	$a0, $a0, 32
	bnez	$a3, .LBB72_15
# %bb.16:                               # %middle.block
                                        #   in Loop: Header=BB72_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB72_19
.LBB72_17:                              # %.lr.ph25.us.preheader81
                                        #   in Loop: Header=BB72_4 Depth=1
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB72_18:                              # %.lr.ph25.us
                                        #   Parent Loop BB72_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s1
	addi.d	$a2, $a2, 1
	addi.d	$a3, $a3, 4
	bltu	$a2, $s0, .LBB72_18
.LBB72_19:                              # %._crit_edge.us
                                        #   in Loop: Header=BB72_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB72_3
# %bb.20:                               #   in Loop: Header=BB72_4 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t3, $zero, 29
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB72_3
.LBB72_21:                              # %.preheader19.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB72_28
# %bb.22:                               # %.preheader19.us29.preheader
	lu12i.w	$a0, 65881
	ori	$s1, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB72_24
	.p2align	4, , 16
.LBB72_23:                              # %_Z9check_sumIiEvT_.exit.us32
                                        #   in Loop: Header=BB72_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB72_32
.LBB72_24:                              # %.preheader19.us29
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_25 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	.p2align	4, , 16
.LBB72_25:                              #   Parent Loop BB72_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB72_25
# %bb.26:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB72_24 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB72_23
# %bb.27:                               #   in Loop: Header=BB72_24 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB72_23
.LBB72_28:                              # %.preheader19.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB72_30
	.p2align	4, , 16
.LBB72_29:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB72_30 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB72_32
.LBB72_30:                              # %.preheader19
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB72_29
# %bb.31:                               #   in Loop: Header=BB72_30 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB72_29
.LBB72_32:                              # %._crit_edge28
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB72_34
# %bb.33:                               # %._crit_edge28
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB72_36
.LBB72_34:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB72_37
# %bb.35:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB72_36:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI72_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI72_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB72_37:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end72:
	.size	_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc, .Lfunc_end72-_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc
.LCPI73_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI73_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 112                   # 8-byte Folded Spill
	blt	$a1, $a0, .LBB73_32
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 3
	blt	$s0, $a0, .LBB73_21
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s4, $s0, -2
	bstrpick.d	$s7, $s4, 31, 0
	sltu	$a2, $a0, $s7
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s7, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -349526
	ori	$a2, $a2, 2731
	lu32i.d	$a2, -349526
	lu52i.d	$a2, $a2, -1366
	mulh.du	$a0, $a0, $a2
	srli.d	$a2, $a0, 1
	addi.w	$a3, $zero, -2
	and	$a0, $a0, $a3
	add.d	$a0, $a0, $a2
	addi.d	$a3, $a0, 4
	sltu	$a4, $s0, $a3
	maskeqz	$a3, $a3, $a4
	masknez	$a4, $s0, $a4
	or	$a3, $a3, $a4
	sub.d	$a0, $a3, $a0
	addi.d	$a3, $a0, -3
	addi.d	$a0, $a2, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$fp, $a0, 3
	slli.d	$a2, $a0, 4
	alsl.d	$a0, $a0, $a2, 3
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 3
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	st.d	$a3, $sp, 88                    # 8-byte Folded Spill
	bstrins.d	$a3, $zero, 2, 0
	st.d	$a3, $sp, 32                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	addi.d	$a2, $a0, 48
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	ori	$t2, $zero, 22
	lu12i.w	$a0, 65881
	ori	$s1, $a0, 1957
	lu12i.w	$a0, 214841
	ori	$s3, $a0, 3368
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	b	.LBB73_4
	.p2align	4, , 16
.LBB73_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB73_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB73_32
.LBB73_4:                               # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_7 Depth 2
                                        #     Child Loop BB73_10 Depth 2
                                        #     Child Loop BB73_15 Depth 2
                                        #     Child Loop BB73_18 Depth 2
	bgeu	$s4, $t2, .LBB73_6
# %bb.5:                                #   in Loop: Header=BB73_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	ori	$a4, $zero, 3
	b	.LBB73_9
	.p2align	4, , 16
.LBB73_6:                               # %vector.body68.preheader
                                        #   in Loop: Header=BB73_4 Depth=1
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	move	$a2, $fp
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB73_7:                               # %vector.body68
                                        #   Parent Loop BB73_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -48
	ld.w	$a4, $a0, -36
	ld.w	$a5, $a0, -24
	ld.w	$a6, $a0, -12
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 12
	ld.w	$a5, $a0, 24
	ld.w	$a6, $a0, 36
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -44
	ld.w	$a4, $a0, -32
	ld.w	$a5, $a0, -20
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 16
	ld.w	$a5, $a0, 28
	ld.w	$a6, $a0, 40
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	ld.w	$a3, $a0, -40
	ld.w	$a4, $a0, -28
	ld.w	$a5, $a0, -16
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr6, $a3, 0
	vinsgr2vr.w	$vr6, $a4, 1
	vinsgr2vr.w	$vr6, $a5, 2
	vinsgr2vr.w	$vr6, $a6, 3
	ld.w	$a3, $a0, 8
	ld.w	$a4, $a0, 20
	ld.w	$a5, $a0, 32
	ld.w	$a6, $a0, 44
	vinsgr2vr.w	$vr7, $a3, 0
	vinsgr2vr.w	$vr7, $a4, 1
	vinsgr2vr.w	$vr7, $a5, 2
	vinsgr2vr.w	$vr7, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vadd.w	$vr2, $vr2, $vr6
	vadd.w	$vr3, $vr3, $vr7
	vreplgr2vr.w	$vr4, $s1
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s3
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 96
	bnez	$a2, .LBB73_7
# %bb.8:                                # %middle.block74
                                        #   in Loop: Header=BB73_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	move	$a2, $a3
	ld.d	$a5, $sp, 56                    # 8-byte Folded Reload
	beq	$a5, $fp, .LBB73_11
.LBB73_9:                               # %scalar.ph63.preheader
                                        #   in Loop: Header=BB73_4 Depth=1
	addi.d	$a3, $a4, -3
	ld.d	$a4, $sp, 80                    # 8-byte Folded Reload
	alsl.d	$a4, $a2, $a4, 2
	.p2align	4, , 16
.LBB73_10:                              # %scalar.ph63
                                        #   Parent Loop BB73_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -8
	ld.w	$a6, $a4, -4
	ld.w	$a7, $a4, 0
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	mul.d	$a5, $a5, $s1
	add.d	$a0, $a0, $a5
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 3
	addi.d	$a3, $a3, 3
	addi.d	$a4, $a4, 12
	bltu	$a2, $s7, .LBB73_10
.LBB73_11:                              # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB73_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB73_19
# %bb.12:                               # %.lr.ph24.us.preheader
                                        #   in Loop: Header=BB73_4 Depth=1
	ld.d	$a2, $sp, 88                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bgeu	$a2, $a4, .LBB73_14
# %bb.13:                               #   in Loop: Header=BB73_4 Depth=1
	move	$a2, $a3
	b	.LBB73_17
	.p2align	4, , 16
.LBB73_14:                              # %vector.ph
                                        #   in Loop: Header=BB73_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI73_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI73_0)
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	add.d	$a2, $a3, $a4
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	alsl.d	$a0, $a3, $a0, 2
	move	$a3, $a4
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB73_15:                              # %vector.body
                                        #   Parent Loop BB73_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s1
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a3, $a3, -8
	addi.d	$a0, $a0, 32
	bnez	$a3, .LBB73_15
# %bb.16:                               # %middle.block
                                        #   in Loop: Header=BB73_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB73_19
.LBB73_17:                              # %.lr.ph24.us.preheader80
                                        #   in Loop: Header=BB73_4 Depth=1
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB73_18:                              # %.lr.ph24.us
                                        #   Parent Loop BB73_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a2, $a2, 1
	addi.d	$a3, $a3, 4
	bltu	$a2, $s0, .LBB73_18
.LBB73_19:                              # %._crit_edge.us
                                        #   in Loop: Header=BB73_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB73_3
# %bb.20:                               #   in Loop: Header=BB73_4 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 22
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB73_3
.LBB73_21:                              # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB73_28
# %bb.22:                               # %.preheader18.us28.preheader
	lu12i.w	$a0, 65881
	ori	$s1, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB73_24
	.p2align	4, , 16
.LBB73_23:                              # %_Z9check_sumIiEvT_.exit.us31
                                        #   in Loop: Header=BB73_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB73_32
.LBB73_24:                              # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_25 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	.p2align	4, , 16
.LBB73_25:                              #   Parent Loop BB73_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB73_25
# %bb.26:                               # %._crit_edge.us35
                                        #   in Loop: Header=BB73_24 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB73_23
# %bb.27:                               #   in Loop: Header=BB73_24 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB73_23
.LBB73_28:                              # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB73_30
	.p2align	4, , 16
.LBB73_29:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB73_30 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB73_32
.LBB73_30:                              # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB73_29
# %bb.31:                               #   in Loop: Header=BB73_30 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB73_29
.LBB73_32:                              # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB73_34
# %bb.33:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB73_36
.LBB73_34:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB73_37
# %bb.35:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB73_36:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI73_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI73_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB73_37:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end73:
	.size	_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc, .Lfunc_end73-_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc
.LCPI74_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI74_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s1, $a1
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 112                   # 8-byte Folded Spill
	blt	$a1, $a0, .LBB74_30
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 2
	blt	$s1, $a0, .LBB74_21
# %bb.2:                                # %.preheader17.us.preheader
	move	$s5, $zero
	addi.d	$a2, $s1, -1
	bstrpick.d	$s6, $a2, 31, 0
	sltu	$a2, $a0, $s6
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s6, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	srli.d	$a2, $a0, 1
	bstrins.d	$a0, $zero, 0, 0
	addi.d	$a3, $a0, 3
	sltu	$a4, $s1, $a3
	maskeqz	$a3, $a3, $a4
	masknez	$a4, $s1, $a4
	or	$a3, $a3, $a4
	sub.d	$a0, $a3, $a0
	addi.d	$a3, $a0, -2
	addi.d	$a0, $a2, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$fp, $a0, 3
	slli.d	$s3, $a0, 4
	addi.d	$a0, $s3, 2
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	st.d	$a3, $sp, 88                    # 8-byte Folded Spill
	bstrins.d	$a3, $zero, 2, 0
	st.d	$a3, $sp, 40                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 32
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 4
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	ori	$a7, $zero, 16
	lu12i.w	$a0, 65881
	ori	$s0, $a0, 1957
	lu12i.w	$a0, 492753
	ori	$s4, $a0, 880
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	b	.LBB74_4
	.p2align	4, , 16
.LBB74_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB74_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB74_30
.LBB74_4:                               # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_7 Depth 2
                                        #     Child Loop BB74_10 Depth 2
                                        #     Child Loop BB74_15 Depth 2
                                        #     Child Loop BB74_18 Depth 2
	bgeu	$s1, $a7, .LBB74_6
# %bb.5:                                #   in Loop: Header=BB74_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	ori	$a4, $zero, 2
	b	.LBB74_9
	.p2align	4, , 16
.LBB74_6:                               # %vector.body64.preheader
                                        #   in Loop: Header=BB74_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $fp
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB74_7:                               # %vector.body64
                                        #   Parent Loop BB74_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -32
	ld.w	$a4, $a0, -24
	ld.w	$a5, $a0, -16
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 8
	ld.w	$a5, $a0, 16
	ld.w	$a6, $a0, 24
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -28
	ld.w	$a4, $a0, -20
	ld.w	$a5, $a0, -12
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 12
	ld.w	$a5, $a0, 20
	ld.w	$a6, $a0, 28
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vreplgr2vr.w	$vr4, $s0
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 64
	bnez	$a2, .LBB74_7
# %bb.8:                                # %middle.block70
                                        #   in Loop: Header=BB74_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	move	$a2, $s3
	move	$a3, $s3
	ld.d	$a5, $sp, 56                    # 8-byte Folded Reload
	beq	$a5, $fp, .LBB74_11
.LBB74_9:                               # %scalar.ph59.preheader
                                        #   in Loop: Header=BB74_4 Depth=1
	addi.d	$a3, $a4, -2
	ld.d	$a4, $sp, 80                    # 8-byte Folded Reload
	alsl.d	$a4, $a2, $a4, 2
	.p2align	4, , 16
.LBB74_10:                              # %scalar.ph59
                                        #   Parent Loop BB74_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -4
	ld.w	$a6, $a4, 0
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s0
	add.d	$a0, $a0, $a5
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, 2
	addi.d	$a3, $a3, 2
	addi.d	$a4, $a4, 8
	bltu	$a2, $s6, .LBB74_10
.LBB74_11:                              # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB74_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s1, .LBB74_19
# %bb.12:                               # %.lr.ph23.us.preheader
                                        #   in Loop: Header=BB74_4 Depth=1
	ld.d	$a2, $sp, 88                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bgeu	$a2, $a4, .LBB74_14
# %bb.13:                               #   in Loop: Header=BB74_4 Depth=1
	move	$a2, $a3
	b	.LBB74_17
	.p2align	4, , 16
.LBB74_14:                              # %vector.ph
                                        #   in Loop: Header=BB74_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI74_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI74_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a2, $a3, $a4
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	alsl.d	$a0, $a3, $a0, 2
	move	$a3, $a4
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB74_15:                              # %vector.body
                                        #   Parent Loop BB74_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s0
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a3, $a3, -8
	addi.d	$a0, $a0, 32
	bnez	$a3, .LBB74_15
# %bb.16:                               # %middle.block
                                        #   in Loop: Header=BB74_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB74_19
.LBB74_17:                              # %.lr.ph23.us.preheader76
                                        #   in Loop: Header=BB74_4 Depth=1
	ld.d	$a3, $sp, 96                    # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB74_18:                              # %.lr.ph23.us
                                        #   Parent Loop BB74_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s0
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s2
	addi.d	$a2, $a2, 1
	addi.d	$a3, $a3, 4
	bltu	$a2, $s1, .LBB74_18
.LBB74_19:                              # %._crit_edge.us
                                        #   in Loop: Header=BB74_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB74_3
# %bb.20:                               #   in Loop: Header=BB74_4 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 16
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB74_3
.LBB74_21:                              # %.preheader17.lr.ph.split
	move	$fp, $zero
	ori	$a0, $zero, 1
	bne	$s1, $a0, .LBB74_26
# %bb.22:                               # %._crit_edge.us34.preheader
	lu12i.w	$a0, 65881
	ori	$s0, $a0, 1957
	pcalau12i	$s2, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -32110
	ori	$s4, $a0, 3144
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB74_24
	.p2align	4, , 16
.LBB74_23:                              # %_Z9check_sumIiEvT_.exit.us30
                                        #   in Loop: Header=BB74_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB74_30
.LBB74_24:                              # %._crit_edge.us34
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a0, $a0, 0
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	mul.w	$a0, $a0, $s0
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB74_23
# %bb.25:                               #   in Loop: Header=BB74_24 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB74_23
.LBB74_26:                              # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB74_28
	.p2align	4, , 16
.LBB74_27:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB74_28 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB74_30
.LBB74_28:                              # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB74_27
# %bb.29:                               #   in Loop: Header=BB74_28 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB74_27
.LBB74_30:                              # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB74_32
# %bb.31:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB74_34
.LBB74_32:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB74_35
# %bb.33:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB74_34:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI74_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI74_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB74_35:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end74:
	.size	_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc, .Lfunc_end74-_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc
.LCPI75_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB75_17
# %bb.1:                                # %.preheader17.lr.ph
	blez	$s0, .LBB75_13
# %bb.2:                                # %.preheader17.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	pcalau12i	$fp, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s5, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s4
	vreplgr2vr.w	$vr5, $s3
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB75_4
	.p2align	4, , 16
.LBB75_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB75_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB75_17
.LBB75_4:                               # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_7 Depth 2
                                        #     Child Loop BB75_10 Depth 2
	bgeu	$s0, $a5, .LBB75_6
# %bb.5:                                #   in Loop: Header=BB75_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB75_9
	.p2align	4, , 16
.LBB75_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB75_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB75_7:                               # %vector.body
                                        #   Parent Loop BB75_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB75_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB75_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB75_11
.LBB75_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB75_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB75_10:                              # %scalar.ph
                                        #   Parent Loop BB75_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB75_10
.LBB75_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB75_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.w	$a2, $a2, $s5
	beq	$a0, $a2, .LBB75_3
# %bb.12:                               #   in Loop: Header=BB75_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB75_3
.LBB75_13:                              # %.preheader17.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB75_15
	.p2align	4, , 16
.LBB75_14:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB75_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB75_17
.LBB75_15:                              # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB75_14
# %bb.16:                               #   in Loop: Header=BB75_15 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB75_14
.LBB75_17:                              # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB75_19
# %bb.18:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB75_21
.LBB75_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB75_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB75_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 0                     # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI75_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI75_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB75_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end75:
	.size	_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc, .Lfunc_end75-_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc
.LCPI76_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI76_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 88                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB76_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 32
	blt	$s0, $a0, .LBB76_15
# %bb.2:                                # %.preheader54.us.preheader
	move	$s2, $zero
	addi.d	$a1, $s0, -31
	bstrpick.d	$s6, $a1, 31, 0
	addi.d	$a1, $s0, -32
	sltu	$a2, $a0, $s6
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s6, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	addi.w	$a2, $zero, -32
	and	$a0, $a0, $a2
	sub.d	$a2, $a1, $a0
	andi	$a3, $s0, 7
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	sub.d	$a2, $a2, $a3
	st.d	$a2, $sp, 48                    # 8-byte Folded Spill
	addi.d	$s4, $s1, 144
	st.d	$a3, $sp, 64                    # 8-byte Folded Spill
	sub.d	$a1, $a1, $a3
	sub.d	$a0, $a1, $a0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -504557
	ori	$s8, $a0, 1792
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s5, $a0, 1536
	b	.LBB76_4
	.p2align	4, , 16
.LBB76_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB76_4 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB76_31
.LBB76_4:                               # %.preheader54.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_5 Depth 2
                                        #     Child Loop BB76_9 Depth 2
                                        #     Child Loop BB76_12 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	ori	$a2, $zero, 32
	move	$a3, $s4
	.p2align	4, , 16
.LBB76_5:                               #   Parent Loop BB76_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a4, $a1, $s1, 2
	slli.d	$a5, $a1, 2
	ldx.w	$a5, $s1, $a5
	ld.w	$a6, $a4, 4
	ld.w	$a7, $a4, 8
	ld.w	$t0, $a4, 12
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, 16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 36
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 40
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 44
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 48
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 52
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 56
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 60
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 64
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 68
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 72
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 76
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 80
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 84
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 88
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 92
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 96
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 100
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 104
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 108
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 112
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 116
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 120
	ld.w	$t1, $a4, 124
	add.d	$a4, $a5, $a6
	add.d	$a4, $a4, $a7
	add.d	$a6, $a4, $t0
	move	$a4, $a2
	move	$a5, $a3
	add.d	$a2, $a6, $t1
	mul.d	$a2, $a2, $fp
	add.d	$a0, $a0, $a2
	add.w	$a0, $a0, $s8
	addi.d	$a1, $a1, 32
	addi.d	$a2, $a4, 32
	addi.d	$a3, $a3, 128
	bltu	$a1, $s6, .LBB76_5
# %bb.6:                                # %.loopexit55.us
                                        #   in Loop: Header=BB76_4 Depth=1
	addi.w	$a1, $a1, 0
	bge	$a1, $s0, .LBB76_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB76_4 Depth=1
	ld.d	$a1, $sp, 80                    # 8-byte Folded Reload
	ori	$a2, $zero, 8
	bltu	$a1, $a2, .LBB76_11
# %bb.8:                                # %vector.ph94
                                        #   in Loop: Header=BB76_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI76_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI76_0)
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	add.d	$a4, $a4, $a1
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB76_9:                               # %vector.body97
                                        #   Parent Loop BB76_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a5, -16
	vld	$vr3, $a5, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s7
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a5, $a5, 32
	bnez	$a0, .LBB76_9
# %bb.10:                               # %middle.block104
                                        #   in Loop: Header=BB76_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	beqz	$a1, .LBB76_13
.LBB76_11:                              # %.preheader.us.preheader109
                                        #   in Loop: Header=BB76_4 Depth=1
	alsl.d	$a1, $a4, $s1, 2
	sub.d	$a2, $s0, $a4
	.p2align	4, , 16
.LBB76_12:                              # %.preheader.us
                                        #   Parent Loop BB76_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a1, 0
	mul.d	$a3, $a3, $fp
	add.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s7
	addi.d	$a2, $a2, -1
	addi.d	$a1, $a1, 4
	bnez	$a2, .LBB76_12
.LBB76_13:                              # %.loopexit.us
                                        #   in Loop: Header=BB76_4 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s3
	add.w	$a1, $a1, $s5
	beq	$a0, $a1, .LBB76_3
# %bb.14:                               #   in Loop: Header=BB76_4 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	b	.LBB76_3
.LBB76_15:                              # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB76_27
# %bb.16:                               # %.preheader.us65.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	vst	$vr5, $sp, 32                   # 16-byte Folded Spill
	b	.LBB76_18
	.p2align	4, , 16
.LBB76_17:                              # %_Z9check_sumIiEvT_.exit.us64
                                        #   in Loop: Header=BB76_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB76_31
.LBB76_18:                              # %.preheader.us65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_21 Depth 2
                                        #     Child Loop BB76_24 Depth 2
	bgeu	$s0, $a5, .LBB76_20
# %bb.19:                               #   in Loop: Header=BB76_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB76_23
	.p2align	4, , 16
.LBB76_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB76_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB76_21:                              # %vector.body
                                        #   Parent Loop BB76_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB76_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB76_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB76_25
.LBB76_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB76_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB76_24:                              # %scalar.ph
                                        #   Parent Loop BB76_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB76_24
.LBB76_25:                              # %.loopexit.us66
                                        #   in Loop: Header=BB76_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB76_17
# %bb.26:                               #   in Loop: Header=BB76_18 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 32                   # 16-byte Folded Reload
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB76_17
.LBB76_27:                              # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB76_29
	.p2align	4, , 16
.LBB76_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB76_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB76_31
.LBB76_29:                              # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB76_28
# %bb.30:                               #   in Loop: Header=BB76_29 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB76_28
.LBB76_31:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 88                    # 8-byte Folded Reload
	beqz	$a2, .LBB76_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB76_35
.LBB76_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB76_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB76_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI76_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI76_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB76_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end76:
	.size	_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc, .Lfunc_end76-_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc
.LCPI77_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI77_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 80                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 72                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB77_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 31
	blt	$s0, $a0, .LBB77_15
# %bb.2:                                # %.preheader53.us.preheader
	addi.d	$a1, $s0, -30
	bstrpick.d	$s2, $a1, 31, 0
	sltu	$a1, $a0, $s2
	masknez	$a0, $a0, $a1
	maskeqz	$a1, $s2, $a1
	or	$a0, $a1, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a1, 135300
	ori	$a1, $a1, 529
	lu32i.d	$a1, 135300
	lu52i.d	$a1, $a1, 132
	mulh.du	$a1, $a0, $a1
	sub.d	$a0, $a0, $a1
	srli.d	$a0, $a0, 1
	add.d	$a0, $a0, $a1
	srli.d	$a0, $a0, 4
	slli.d	$a1, $a0, 5
	sub.d	$a0, $a0, $a1
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -31
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 140
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -226646
	ori	$s3, $a0, 3400
	lu12i.w	$a0, -277912
	ori	$s6, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s5, $a0, 1536
	b	.LBB77_4
	.p2align	4, , 16
.LBB77_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB77_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB77_31
.LBB77_4:                               # %.preheader53.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_5 Depth 2
                                        #     Child Loop BB77_9 Depth 2
                                        #     Child Loop BB77_12 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	ori	$a2, $zero, 31
	move	$a3, $fp
	.p2align	4, , 16
.LBB77_5:                               #   Parent Loop BB77_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a4, $a1, $s1, 2
	slli.d	$a5, $a1, 2
	ldx.w	$a5, $s1, $a5
	ld.w	$a6, $a4, 4
	ld.w	$a7, $a4, 8
	ld.w	$t0, $a4, 12
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, 16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 36
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 40
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 44
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 48
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 52
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 56
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 60
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 64
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 68
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 72
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 76
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 80
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 84
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 88
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 92
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 96
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 100
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 104
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 108
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 112
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 116
	ld.w	$t1, $a4, 120
	add.d	$a4, $a5, $t0
	add.d	$a4, $a4, $a6
	add.d	$a6, $a4, $a7
	move	$a4, $a2
	move	$a5, $a3
	add.d	$a2, $a6, $t1
	mul.d	$a2, $a2, $s4
	add.d	$a0, $a0, $a2
	add.w	$a0, $a0, $s3
	addi.d	$a1, $a1, 31
	addi.d	$a2, $a4, 31
	addi.d	$a3, $a3, 124
	bltu	$a1, $s2, .LBB77_5
# %bb.6:                                # %.loopexit54.us
                                        #   in Loop: Header=BB77_4 Depth=1
	addi.w	$a1, $a1, 0
	bge	$a1, $s0, .LBB77_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB77_4 Depth=1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	ori	$a2, $zero, 8
	bltu	$a1, $a2, .LBB77_11
# %bb.8:                                # %vector.ph93
                                        #   in Loop: Header=BB77_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI77_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI77_0)
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	add.d	$a4, $a4, $a1
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a1
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB77_9:                               # %vector.body96
                                        #   Parent Loop BB77_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a5, -16
	vld	$vr3, $a5, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s6
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a5, $a5, 32
	bnez	$a0, .LBB77_9
# %bb.10:                               # %middle.block103
                                        #   in Loop: Header=BB77_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	beq	$a1, $a2, .LBB77_13
.LBB77_11:                              # %.preheader.us.preheader108
                                        #   in Loop: Header=BB77_4 Depth=1
	alsl.d	$a1, $a4, $s1, 2
	sub.d	$a2, $s0, $a4
	.p2align	4, , 16
.LBB77_12:                              # %.preheader.us
                                        #   Parent Loop BB77_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a1, 0
	mul.d	$a3, $a3, $s4
	add.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s6
	addi.d	$a2, $a2, -1
	addi.d	$a1, $a1, 4
	bnez	$a2, .LBB77_12
.LBB77_13:                              # %.loopexit.us
                                        #   in Loop: Header=BB77_4 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s8
	add.w	$a1, $a1, $s5
	beq	$a0, $a1, .LBB77_3
# %bb.14:                               #   in Loop: Header=BB77_4 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	b	.LBB77_3
.LBB77_15:                              # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB77_27
# %bb.16:                               # %.preheader.us64.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB77_18
	.p2align	4, , 16
.LBB77_17:                              # %_Z9check_sumIiEvT_.exit.us63
                                        #   in Loop: Header=BB77_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB77_31
.LBB77_18:                              # %.preheader.us64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_21 Depth 2
                                        #     Child Loop BB77_24 Depth 2
	bgeu	$s0, $a5, .LBB77_20
# %bb.19:                               #   in Loop: Header=BB77_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB77_23
	.p2align	4, , 16
.LBB77_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB77_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB77_21:                              # %vector.body
                                        #   Parent Loop BB77_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB77_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB77_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB77_25
.LBB77_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB77_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB77_24:                              # %scalar.ph
                                        #   Parent Loop BB77_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB77_24
.LBB77_25:                              # %.loopexit.us65
                                        #   in Loop: Header=BB77_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB77_17
# %bb.26:                               #   in Loop: Header=BB77_18 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB77_17
.LBB77_27:                              # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB77_29
	.p2align	4, , 16
.LBB77_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB77_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB77_31
.LBB77_29:                              # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB77_28
# %bb.30:                               #   in Loop: Header=BB77_29 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB77_28
.LBB77_31:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 72                    # 8-byte Folded Reload
	beqz	$a2, .LBB77_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB77_35
.LBB77_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB77_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB77_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI77_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI77_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB77_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end77:
	.size	_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc, .Lfunc_end77-_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc
.LCPI78_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI78_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB78_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 30
	blt	$s0, $a0, .LBB78_15
# %bb.2:                                # %.preheader52.us.preheader
	addi.d	$a2, $s0, -29
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -489336
	ori	$a3, $a3, 2185
	lu32i.d	$a3, -489336
	lu52i.d	$a3, $a3, -1912
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 4
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -30
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 136
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 51266
	ori	$s3, $a0, 912
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB78_4
	.p2align	4, , 16
.LBB78_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB78_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB78_31
.LBB78_4:                               # %.preheader52.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_5 Depth 2
                                        #     Child Loop BB78_9 Depth 2
                                        #     Child Loop BB78_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a3, $zero, 30
	move	$a4, $fp
	.p2align	4, , 16
.LBB78_5:                               #   Parent Loop BB78_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a5, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a5, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 92
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 96
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 100
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 104
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 108
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 112
	ld.w	$t2, $a5, 116
	add.d	$a5, $a6, $t0
	add.d	$a5, $a5, $t1
	add.d	$a7, $a5, $a7
	move	$a5, $a3
	move	$a6, $a4
	add.d	$a3, $a7, $t2
	mul.d	$a3, $a3, $s4
	add.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 30
	addi.d	$a3, $a5, 30
	addi.d	$a4, $a4, 120
	bltu	$a2, $s2, .LBB78_5
# %bb.6:                                # %.loopexit53.us
                                        #   in Loop: Header=BB78_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB78_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB78_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a3, $zero, 8
	bltu	$a2, $a3, .LBB78_11
# %bb.8:                                # %vector.ph93
                                        #   in Loop: Header=BB78_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI78_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI78_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a5, $a5, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB78_9:                               # %vector.body96
                                        #   Parent Loop BB78_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB78_9
# %bb.10:                               # %middle.block103
                                        #   in Loop: Header=BB78_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a3, .LBB78_13
.LBB78_11:                              # %.preheader.us.preheader108
                                        #   in Loop: Header=BB78_4 Depth=1
	alsl.d	$a2, $a5, $s1, 2
	sub.d	$a3, $s0, $a5
	.p2align	4, , 16
.LBB78_12:                              # %.preheader.us
                                        #   Parent Loop BB78_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB78_12
.LBB78_13:                              # %.loopexit.us
                                        #   in Loop: Header=BB78_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB78_3
# %bb.14:                               #   in Loop: Header=BB78_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB78_3
.LBB78_15:                              # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB78_27
# %bb.16:                               # %.preheader.us63.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB78_18
	.p2align	4, , 16
.LBB78_17:                              # %_Z9check_sumIiEvT_.exit.us62
                                        #   in Loop: Header=BB78_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB78_31
.LBB78_18:                              # %.preheader.us63
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_21 Depth 2
                                        #     Child Loop BB78_24 Depth 2
	bgeu	$s0, $a5, .LBB78_20
# %bb.19:                               #   in Loop: Header=BB78_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB78_23
	.p2align	4, , 16
.LBB78_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB78_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB78_21:                              # %vector.body
                                        #   Parent Loop BB78_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB78_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB78_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB78_25
.LBB78_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB78_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB78_24:                              # %scalar.ph
                                        #   Parent Loop BB78_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB78_24
.LBB78_25:                              # %.loopexit.us64
                                        #   in Loop: Header=BB78_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB78_17
# %bb.26:                               #   in Loop: Header=BB78_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB78_17
.LBB78_27:                              # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB78_29
	.p2align	4, , 16
.LBB78_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB78_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB78_31
.LBB78_29:                              # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB78_28
# %bb.30:                               #   in Loop: Header=BB78_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB78_28
.LBB78_31:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB78_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB78_35
.LBB78_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB78_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB78_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI78_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI78_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB78_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end78:
	.size	_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc, .Lfunc_end78-_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN13do_loop_testsILi28EiE7do_testEPKiPKc,"axG",@progbits,_ZN13do_loop_testsILi28EiE7do_testEPKiPKc,comdat
	.weak	_ZN13do_loop_testsILi28EiE7do_testEPKiPKc # -- Begin function _ZN13do_loop_testsILi28EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN13do_loop_testsILi28EiE7do_testEPKiPKc,@function
_ZN13do_loop_testsILi28EiE7do_testEPKiPKc: # @_ZN13do_loop_testsILi28EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN13do_loop_testsILi19EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1900
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 2000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s1, $s1, 2047
	addi.d	$a2, $s1, 53
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 153
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 253
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 353
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 453
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 553
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 653
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end79:
	.size	_ZN13do_loop_testsILi28EiE7do_testEPKiPKc, .Lfunc_end79-_ZN13do_loop_testsILi28EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc
.LCPI80_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI80_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB80_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 29
	blt	$s0, $a0, .LBB80_15
# %bb.2:                                # %.preheader51.us.preheader
	addi.d	$a2, $s0, -28
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -361578
	ori	$a3, $a3, 283
	lu32i.d	$a3, -289263
	lu52i.d	$a3, $a3, 423
	mulh.du	$a3, $a2, $a3
	sub.d	$a4, $a2, $a3
	srli.d	$a4, $a4, 1
	add.d	$a3, $a4, $a3
	srli.d	$a3, $a3, 4
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -29
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 132
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 329177
	ori	$s3, $a0, 2520
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB80_4
	.p2align	4, , 16
.LBB80_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB80_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB80_31
.LBB80_4:                               # %.preheader51.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_5 Depth 2
                                        #     Child Loop BB80_9 Depth 2
                                        #     Child Loop BB80_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a3, $zero, 29
	move	$a4, $fp
	.p2align	4, , 16
.LBB80_5:                               #   Parent Loop BB80_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a5, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a5, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 92
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 96
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 100
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 104
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 108
	ld.w	$t2, $a5, 112
	add.d	$a5, $a6, $a7
	add.d	$a5, $a5, $t0
	add.d	$a7, $a5, $t1
	move	$a5, $a3
	move	$a6, $a4
	add.d	$a3, $a7, $t2
	mul.d	$a3, $a3, $s4
	add.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 29
	addi.d	$a3, $a5, 29
	addi.d	$a4, $a4, 116
	bltu	$a2, $s2, .LBB80_5
# %bb.6:                                # %.loopexit52.us
                                        #   in Loop: Header=BB80_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB80_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB80_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a3, $zero, 8
	bltu	$a2, $a3, .LBB80_11
# %bb.8:                                # %vector.ph92
                                        #   in Loop: Header=BB80_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI80_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI80_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a5, $a5, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB80_9:                               # %vector.body95
                                        #   Parent Loop BB80_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB80_9
# %bb.10:                               # %middle.block102
                                        #   in Loop: Header=BB80_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a3, .LBB80_13
.LBB80_11:                              # %.preheader.us.preheader107
                                        #   in Loop: Header=BB80_4 Depth=1
	alsl.d	$a2, $a5, $s1, 2
	sub.d	$a3, $s0, $a5
	.p2align	4, , 16
.LBB80_12:                              # %.preheader.us
                                        #   Parent Loop BB80_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB80_12
.LBB80_13:                              # %.loopexit.us
                                        #   in Loop: Header=BB80_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB80_3
# %bb.14:                               #   in Loop: Header=BB80_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB80_3
.LBB80_15:                              # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB80_27
# %bb.16:                               # %.preheader.us62.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB80_18
	.p2align	4, , 16
.LBB80_17:                              # %_Z9check_sumIiEvT_.exit.us61
                                        #   in Loop: Header=BB80_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB80_31
.LBB80_18:                              # %.preheader.us62
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_21 Depth 2
                                        #     Child Loop BB80_24 Depth 2
	bgeu	$s0, $a5, .LBB80_20
# %bb.19:                               #   in Loop: Header=BB80_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB80_23
	.p2align	4, , 16
.LBB80_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB80_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB80_21:                              # %vector.body
                                        #   Parent Loop BB80_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB80_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB80_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB80_25
.LBB80_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB80_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB80_24:                              # %scalar.ph
                                        #   Parent Loop BB80_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB80_24
.LBB80_25:                              # %.loopexit.us63
                                        #   in Loop: Header=BB80_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB80_17
# %bb.26:                               #   in Loop: Header=BB80_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB80_17
.LBB80_27:                              # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB80_29
	.p2align	4, , 16
.LBB80_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB80_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB80_31
.LBB80_29:                              # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB80_28
# %bb.30:                               #   in Loop: Header=BB80_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB80_28
.LBB80_31:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB80_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB80_35
.LBB80_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB80_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB80_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI80_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI80_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB80_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end80:
	.size	_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc, .Lfunc_end80-_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc
.LCPI81_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI81_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB81_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 28
	blt	$s0, $a0, .LBB81_15
# %bb.2:                                # %.preheader50.us.preheader
	addi.d	$a2, $s0, -27
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	srli.d	$a3, $a2, 2
	lu12i.w	$a4, 149796
	ori	$a4, $a4, 2341
	lu32i.d	$a4, 299593
	lu52i.d	$a4, $a4, 1170
	mulh.du	$a3, $a3, $a4
	srli.d	$a3, $a3, 1
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -28
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 128
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -441487
	ori	$s3, $a0, 32
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB81_4
	.p2align	4, , 16
.LBB81_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB81_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB81_31
.LBB81_4:                               # %.preheader50.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_5 Depth 2
                                        #     Child Loop BB81_9 Depth 2
                                        #     Child Loop BB81_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a3, $zero, 28
	move	$a4, $fp
	.p2align	4, , 16
.LBB81_5:                               #   Parent Loop BB81_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a5, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a5, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 92
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 96
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 100
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 104
	ld.w	$t2, $a5, 108
	add.d	$a5, $a6, $t1
	add.d	$a5, $a5, $a7
	add.d	$a7, $a5, $t0
	move	$a5, $a3
	move	$a6, $a4
	add.d	$a3, $a7, $t2
	mul.d	$a3, $a3, $s4
	add.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 28
	addi.d	$a3, $a5, 28
	addi.d	$a4, $a4, 112
	bltu	$a2, $s2, .LBB81_5
# %bb.6:                                # %.loopexit51.us
                                        #   in Loop: Header=BB81_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB81_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB81_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a3, $zero, 8
	bltu	$a2, $a3, .LBB81_11
# %bb.8:                                # %vector.ph91
                                        #   in Loop: Header=BB81_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI81_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI81_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a5, $a5, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB81_9:                               # %vector.body94
                                        #   Parent Loop BB81_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB81_9
# %bb.10:                               # %middle.block101
                                        #   in Loop: Header=BB81_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a3, .LBB81_13
.LBB81_11:                              # %.preheader.us.preheader106
                                        #   in Loop: Header=BB81_4 Depth=1
	alsl.d	$a2, $a5, $s1, 2
	sub.d	$a3, $s0, $a5
	.p2align	4, , 16
.LBB81_12:                              # %.preheader.us
                                        #   Parent Loop BB81_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB81_12
.LBB81_13:                              # %.loopexit.us
                                        #   in Loop: Header=BB81_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB81_3
# %bb.14:                               #   in Loop: Header=BB81_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB81_3
.LBB81_15:                              # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB81_27
# %bb.16:                               # %.preheader.us61.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB81_18
	.p2align	4, , 16
.LBB81_17:                              # %_Z9check_sumIiEvT_.exit.us60
                                        #   in Loop: Header=BB81_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB81_31
.LBB81_18:                              # %.preheader.us61
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_21 Depth 2
                                        #     Child Loop BB81_24 Depth 2
	bgeu	$s0, $a5, .LBB81_20
# %bb.19:                               #   in Loop: Header=BB81_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB81_23
	.p2align	4, , 16
.LBB81_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB81_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB81_21:                              # %vector.body
                                        #   Parent Loop BB81_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB81_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB81_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB81_25
.LBB81_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB81_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB81_24:                              # %scalar.ph
                                        #   Parent Loop BB81_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB81_24
.LBB81_25:                              # %.loopexit.us62
                                        #   in Loop: Header=BB81_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB81_17
# %bb.26:                               #   in Loop: Header=BB81_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB81_17
.LBB81_27:                              # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB81_29
	.p2align	4, , 16
.LBB81_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB81_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB81_31
.LBB81_29:                              # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB81_28
# %bb.30:                               #   in Loop: Header=BB81_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB81_28
.LBB81_31:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB81_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB81_35
.LBB81_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB81_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB81_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI81_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI81_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB81_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end81:
	.size	_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc, .Lfunc_end81-_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc
.LCPI82_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI82_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB82_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 27
	blt	$s0, $a0, .LBB82_15
# %bb.2:                                # %.preheader49.us.preheader
	addi.d	$a2, $s0, -26
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, 38836
	ori	$a3, $a3, 607
	lu32i.d	$a3, 271853
	lu52i.d	$a3, $a3, -1669
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 4
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -27
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 124
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -163576
	ori	$s3, $a0, 1640
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB82_4
	.p2align	4, , 16
.LBB82_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB82_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB82_31
.LBB82_4:                               # %.preheader49.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_5 Depth 2
                                        #     Child Loop BB82_9 Depth 2
                                        #     Child Loop BB82_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a3, $zero, 27
	move	$a4, $fp
	.p2align	4, , 16
.LBB82_5:                               #   Parent Loop BB82_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a5, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a5, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 92
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 96
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 100
	ld.w	$t2, $a5, 104
	add.d	$a5, $a6, $t0
	add.d	$a5, $a5, $t1
	add.d	$a7, $a5, $a7
	move	$a5, $a3
	move	$a6, $a4
	add.d	$a3, $a7, $t2
	mul.d	$a3, $a3, $s4
	add.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 27
	addi.d	$a3, $a5, 27
	addi.d	$a4, $a4, 108
	bltu	$a2, $s2, .LBB82_5
# %bb.6:                                # %.loopexit50.us
                                        #   in Loop: Header=BB82_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB82_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB82_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a3, $zero, 8
	bltu	$a2, $a3, .LBB82_11
# %bb.8:                                # %vector.ph90
                                        #   in Loop: Header=BB82_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI82_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI82_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a5, $a5, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB82_9:                               # %vector.body93
                                        #   Parent Loop BB82_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB82_9
# %bb.10:                               # %middle.block100
                                        #   in Loop: Header=BB82_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a3, .LBB82_13
.LBB82_11:                              # %.preheader.us.preheader105
                                        #   in Loop: Header=BB82_4 Depth=1
	alsl.d	$a2, $a5, $s1, 2
	sub.d	$a3, $s0, $a5
	.p2align	4, , 16
.LBB82_12:                              # %.preheader.us
                                        #   Parent Loop BB82_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB82_12
.LBB82_13:                              # %.loopexit.us
                                        #   in Loop: Header=BB82_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB82_3
# %bb.14:                               #   in Loop: Header=BB82_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB82_3
.LBB82_15:                              # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB82_27
# %bb.16:                               # %.preheader.us60.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB82_18
	.p2align	4, , 16
.LBB82_17:                              # %_Z9check_sumIiEvT_.exit.us59
                                        #   in Loop: Header=BB82_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB82_31
.LBB82_18:                              # %.preheader.us60
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_21 Depth 2
                                        #     Child Loop BB82_24 Depth 2
	bgeu	$s0, $a5, .LBB82_20
# %bb.19:                               #   in Loop: Header=BB82_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB82_23
	.p2align	4, , 16
.LBB82_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB82_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB82_21:                              # %vector.body
                                        #   Parent Loop BB82_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB82_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB82_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB82_25
.LBB82_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB82_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB82_24:                              # %scalar.ph
                                        #   Parent Loop BB82_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB82_24
.LBB82_25:                              # %.loopexit.us61
                                        #   in Loop: Header=BB82_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB82_17
# %bb.26:                               #   in Loop: Header=BB82_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB82_17
.LBB82_27:                              # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB82_29
	.p2align	4, , 16
.LBB82_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB82_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB82_31
.LBB82_29:                              # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB82_28
# %bb.30:                               #   in Loop: Header=BB82_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB82_28
.LBB82_31:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB82_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB82_35
.LBB82_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB82_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB82_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI82_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI82_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB82_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end82:
	.size	_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc, .Lfunc_end82-_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc
.LCPI83_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI83_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB83_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 26
	blt	$s0, $a0, .LBB83_15
# %bb.2:                                # %.preheader48.us.preheader
	addi.d	$a2, $s0, -25
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -241980
	ori	$a3, $a3, 3781
	lu32i.d	$a3, 322638
	lu52i.d	$a3, $a3, 1260
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 3
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$s8, $a0, -26
	move	$s7, $zero
	st.d	$s8, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$s8, $zero, 2, 0
	addi.d	$fp, $s1, 120
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	b	.LBB83_4
	.p2align	4, , 16
.LBB83_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB83_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB83_31
.LBB83_4:                               # %.preheader48.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_5 Depth 2
                                        #     Child Loop BB83_9 Depth 2
                                        #     Child Loop BB83_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a3, $zero, 26
	move	$a4, $fp
	.p2align	4, , 16
.LBB83_5:                               #   Parent Loop BB83_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a5, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a5, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 92
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 96
	ld.w	$t2, $a5, 100
	add.d	$a5, $a6, $a7
	add.w	$a5, $a5, $t0
	add.d	$a7, $a5, $t1
	move	$a5, $a3
	move	$a6, $a4
	add.d	$a3, $a7, $t2
	mul.d	$a3, $a3, $s4
	add.d	$a0, $a0, $a3
	addu16i.d	$a0, $a0, 7146
	addi.w	$a0, $a0, -848
	addi.d	$a2, $a2, 26
	addi.d	$a3, $a5, 26
	addi.d	$a4, $a4, 104
	bltu	$a2, $s2, .LBB83_5
# %bb.6:                                # %.loopexit49.us
                                        #   in Loop: Header=BB83_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB83_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB83_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a3, $zero, 8
	bltu	$a2, $a3, .LBB83_11
# %bb.8:                                # %vector.ph89
                                        #   in Loop: Header=BB83_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI83_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI83_0)
	add.d	$a5, $a5, $s8
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $s8
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB83_9:                               # %vector.body92
                                        #   Parent Loop BB83_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s3
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB83_9
# %bb.10:                               # %middle.block99
                                        #   in Loop: Header=BB83_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	beq	$a2, $s8, .LBB83_13
.LBB83_11:                              # %.preheader.us.preheader104
                                        #   in Loop: Header=BB83_4 Depth=1
	alsl.d	$a2, $a5, $s1, 2
	sub.d	$a3, $s0, $a5
	.p2align	4, , 16
.LBB83_12:                              # %.preheader.us
                                        #   Parent Loop BB83_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB83_12
.LBB83_13:                              # %.loopexit.us
                                        #   in Loop: Header=BB83_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB83_3
# %bb.14:                               #   in Loop: Header=BB83_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB83_3
.LBB83_15:                              # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB83_27
# %bb.16:                               # %.preheader.us59.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB83_18
	.p2align	4, , 16
.LBB83_17:                              # %_Z9check_sumIiEvT_.exit.us58
                                        #   in Loop: Header=BB83_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB83_31
.LBB83_18:                              # %.preheader.us59
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_21 Depth 2
                                        #     Child Loop BB83_24 Depth 2
	bgeu	$s0, $a5, .LBB83_20
# %bb.19:                               #   in Loop: Header=BB83_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB83_23
	.p2align	4, , 16
.LBB83_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB83_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB83_21:                              # %vector.body
                                        #   Parent Loop BB83_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB83_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB83_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB83_25
.LBB83_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB83_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB83_24:                              # %scalar.ph
                                        #   Parent Loop BB83_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB83_24
.LBB83_25:                              # %.loopexit.us60
                                        #   in Loop: Header=BB83_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB83_17
# %bb.26:                               #   in Loop: Header=BB83_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB83_17
.LBB83_27:                              # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB83_29
	.p2align	4, , 16
.LBB83_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB83_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB83_31
.LBB83_29:                              # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB83_28
# %bb.30:                               #   in Loop: Header=BB83_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB83_28
.LBB83_31:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB83_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB83_35
.LBB83_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB83_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB83_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI83_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI83_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB83_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end83:
	.size	_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc, .Lfunc_end83-_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc
.LCPI84_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI84_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB84_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 25
	blt	$s0, $a0, .LBB84_15
# %bb.2:                                # %.preheader47.us.preheader
	addi.d	$a2, $s0, -24
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -125830
	ori	$a3, $a3, 3605
	lu32i.d	$a3, -125830
	lu52i.d	$a3, $a3, 1146
	mulh.du	$a3, $a2, $a3
	sub.d	$a4, $a2, $a3
	srli.d	$a4, $a4, 1
	add.d	$a3, $a4, $a3
	srli.d	$a3, $a3, 4
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -25
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 116
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 392247
	ori	$s3, $a0, 760
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB84_4
	.p2align	4, , 16
.LBB84_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB84_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB84_31
.LBB84_4:                               # %.preheader47.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_5 Depth 2
                                        #     Child Loop BB84_9 Depth 2
                                        #     Child Loop BB84_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a3, $zero, 25
	move	$a4, $fp
	.p2align	4, , 16
.LBB84_5:                               #   Parent Loop BB84_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a5, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a5, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 92
	ld.w	$t2, $a5, 96
	add.d	$a5, $a6, $t1
	add.d	$a5, $a5, $a7
	add.d	$a7, $a5, $t0
	move	$a5, $a3
	move	$a6, $a4
	add.d	$a3, $a7, $t2
	mul.d	$a3, $a3, $s4
	add.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 25
	addi.d	$a3, $a5, 25
	addi.d	$a4, $a4, 100
	bltu	$a2, $s2, .LBB84_5
# %bb.6:                                # %.loopexit48.us
                                        #   in Loop: Header=BB84_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB84_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB84_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a3, $zero, 8
	bltu	$a2, $a3, .LBB84_11
# %bb.8:                                # %vector.ph88
                                        #   in Loop: Header=BB84_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI84_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI84_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a5, $a5, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB84_9:                               # %vector.body91
                                        #   Parent Loop BB84_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB84_9
# %bb.10:                               # %middle.block98
                                        #   in Loop: Header=BB84_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a3, .LBB84_13
.LBB84_11:                              # %.preheader.us.preheader103
                                        #   in Loop: Header=BB84_4 Depth=1
	alsl.d	$a2, $a5, $s1, 2
	sub.d	$a3, $s0, $a5
	.p2align	4, , 16
.LBB84_12:                              # %.preheader.us
                                        #   Parent Loop BB84_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB84_12
.LBB84_13:                              # %.loopexit.us
                                        #   in Loop: Header=BB84_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB84_3
# %bb.14:                               #   in Loop: Header=BB84_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB84_3
.LBB84_15:                              # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB84_27
# %bb.16:                               # %.preheader.us58.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB84_18
	.p2align	4, , 16
.LBB84_17:                              # %_Z9check_sumIiEvT_.exit.us57
                                        #   in Loop: Header=BB84_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB84_31
.LBB84_18:                              # %.preheader.us58
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_21 Depth 2
                                        #     Child Loop BB84_24 Depth 2
	bgeu	$s0, $a5, .LBB84_20
# %bb.19:                               #   in Loop: Header=BB84_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB84_23
	.p2align	4, , 16
.LBB84_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB84_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB84_21:                              # %vector.body
                                        #   Parent Loop BB84_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB84_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB84_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB84_25
.LBB84_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB84_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB84_24:                              # %scalar.ph
                                        #   Parent Loop BB84_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB84_24
.LBB84_25:                              # %.loopexit.us59
                                        #   in Loop: Header=BB84_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB84_17
# %bb.26:                               #   in Loop: Header=BB84_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB84_17
.LBB84_27:                              # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB84_29
	.p2align	4, , 16
.LBB84_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB84_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB84_31
.LBB84_29:                              # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB84_28
# %bb.30:                               #   in Loop: Header=BB84_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB84_28
.LBB84_31:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB84_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB84_35
.LBB84_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB84_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB84_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI84_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI84_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB84_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end84:
	.size	_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc, .Lfunc_end84-_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc
.LCPI85_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI85_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB85_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 24
	blt	$s0, $a0, .LBB85_15
# %bb.2:                                # %.preheader46.us.preheader
	addi.d	$a2, $s0, -23
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -349526
	ori	$a3, $a3, 2731
	lu32i.d	$a3, -349526
	lu52i.d	$a3, $a3, -1366
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 4
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -24
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 112
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -378418
	ori	$s3, $a0, 2368
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB85_4
	.p2align	4, , 16
.LBB85_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB85_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB85_31
.LBB85_4:                               # %.preheader46.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_5 Depth 2
                                        #     Child Loop BB85_9 Depth 2
                                        #     Child Loop BB85_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a3, $zero, 24
	move	$a4, $fp
	.p2align	4, , 16
.LBB85_5:                               #   Parent Loop BB85_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a5, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a5, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 88
	ld.w	$t2, $a5, 92
	add.d	$a5, $a6, $t0
	add.d	$a5, $a5, $t1
	add.d	$a7, $a5, $a7
	move	$a5, $a3
	move	$a6, $a4
	add.d	$a3, $a7, $t2
	mul.d	$a3, $a3, $s4
	add.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 24
	addi.d	$a3, $a5, 24
	addi.d	$a4, $a4, 96
	bltu	$a2, $s2, .LBB85_5
# %bb.6:                                # %.loopexit47.us
                                        #   in Loop: Header=BB85_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB85_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB85_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a3, $zero, 8
	bltu	$a2, $a3, .LBB85_11
# %bb.8:                                # %vector.ph87
                                        #   in Loop: Header=BB85_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI85_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI85_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a5, $a5, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB85_9:                               # %vector.body90
                                        #   Parent Loop BB85_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB85_9
# %bb.10:                               # %middle.block97
                                        #   in Loop: Header=BB85_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a3, .LBB85_13
.LBB85_11:                              # %.preheader.us.preheader102
                                        #   in Loop: Header=BB85_4 Depth=1
	alsl.d	$a2, $a5, $s1, 2
	sub.d	$a3, $s0, $a5
	.p2align	4, , 16
.LBB85_12:                              # %.preheader.us
                                        #   Parent Loop BB85_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB85_12
.LBB85_13:                              # %.loopexit.us
                                        #   in Loop: Header=BB85_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB85_3
# %bb.14:                               #   in Loop: Header=BB85_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB85_3
.LBB85_15:                              # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB85_27
# %bb.16:                               # %.preheader.us57.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB85_18
	.p2align	4, , 16
.LBB85_17:                              # %_Z9check_sumIiEvT_.exit.us56
                                        #   in Loop: Header=BB85_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB85_31
.LBB85_18:                              # %.preheader.us57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_21 Depth 2
                                        #     Child Loop BB85_24 Depth 2
	bgeu	$s0, $a5, .LBB85_20
# %bb.19:                               #   in Loop: Header=BB85_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB85_23
	.p2align	4, , 16
.LBB85_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB85_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB85_21:                              # %vector.body
                                        #   Parent Loop BB85_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB85_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB85_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB85_25
.LBB85_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB85_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB85_24:                              # %scalar.ph
                                        #   Parent Loop BB85_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB85_24
.LBB85_25:                              # %.loopexit.us58
                                        #   in Loop: Header=BB85_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB85_17
# %bb.26:                               #   in Loop: Header=BB85_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB85_17
.LBB85_27:                              # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB85_29
	.p2align	4, , 16
.LBB85_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB85_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB85_31
.LBB85_29:                              # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB85_28
# %bb.30:                               #   in Loop: Header=BB85_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB85_28
.LBB85_31:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB85_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB85_35
.LBB85_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB85_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB85_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI85_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI85_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB85_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end85:
	.size	_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc, .Lfunc_end85-_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc
.LCPI86_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI86_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB86_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 23
	blt	$s0, $a0, .LBB86_15
# %bb.2:                                # %.preheader45.us.preheader
	addi.d	$a2, $s0, -22
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -319132
	ori	$a3, $a3, 713
	lu32i.d	$a3, -227952
	lu52i.d	$a3, $a3, 1602
	mulh.du	$a3, $a2, $a3
	sub.d	$a4, $a2, $a3
	srli.d	$a4, $a4, 1
	add.d	$a3, $a4, $a3
	srli.d	$a3, $a3, 4
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -23
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 108
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -100507
	ori	$s3, $a0, 3976
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB86_4
	.p2align	4, , 16
.LBB86_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB86_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB86_31
.LBB86_4:                               # %.preheader45.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_5 Depth 2
                                        #     Child Loop BB86_9 Depth 2
                                        #     Child Loop BB86_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a4, $zero, 23
	move	$a5, $fp
	.p2align	4, , 16
.LBB86_5:                               #   Parent Loop BB86_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a3, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a3, 4
	ld.w	$t0, $a3, 8
	ld.w	$t1, $a3, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a3, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 84
	ld.w	$t2, $a3, 88
	add.d	$a3, $a6, $a7
	add.d	$a3, $a3, $t0
	add.d	$a7, $a3, $t1
	move	$a3, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 23
	addi.d	$a4, $a3, 23
	addi.d	$a5, $a5, 92
	bltu	$a2, $s2, .LBB86_5
# %bb.6:                                # %.loopexit46.us
                                        #   in Loop: Header=BB86_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB86_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB86_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a2, $a4, .LBB86_11
# %bb.8:                                # %vector.ph86
                                        #   in Loop: Header=BB86_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI86_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI86_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a3, $a3, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB86_9:                               # %vector.body89
                                        #   Parent Loop BB86_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB86_9
# %bb.10:                               # %middle.block96
                                        #   in Loop: Header=BB86_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a4, .LBB86_13
.LBB86_11:                              # %.preheader.us.preheader101
                                        #   in Loop: Header=BB86_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB86_12:                              # %.preheader.us
                                        #   Parent Loop BB86_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB86_12
.LBB86_13:                              # %.loopexit.us
                                        #   in Loop: Header=BB86_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB86_3
# %bb.14:                               #   in Loop: Header=BB86_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB86_3
.LBB86_15:                              # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB86_27
# %bb.16:                               # %.preheader.us56.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB86_18
	.p2align	4, , 16
.LBB86_17:                              # %_Z9check_sumIiEvT_.exit.us55
                                        #   in Loop: Header=BB86_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB86_31
.LBB86_18:                              # %.preheader.us56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_21 Depth 2
                                        #     Child Loop BB86_24 Depth 2
	bgeu	$s0, $a5, .LBB86_20
# %bb.19:                               #   in Loop: Header=BB86_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB86_23
	.p2align	4, , 16
.LBB86_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB86_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB86_21:                              # %vector.body
                                        #   Parent Loop BB86_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB86_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB86_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB86_25
.LBB86_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB86_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB86_24:                              # %scalar.ph
                                        #   Parent Loop BB86_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB86_24
.LBB86_25:                              # %.loopexit.us57
                                        #   in Loop: Header=BB86_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB86_17
# %bb.26:                               #   in Loop: Header=BB86_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB86_17
.LBB86_27:                              # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB86_29
	.p2align	4, , 16
.LBB86_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB86_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB86_31
.LBB86_29:                              # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB86_28
# %bb.30:                               #   in Loop: Header=BB86_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB86_28
.LBB86_31:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB86_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB86_35
.LBB86_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB86_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB86_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI86_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI86_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB86_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end86:
	.size	_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc, .Lfunc_end86-_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc
.LCPI87_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI87_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB87_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 22
	blt	$s0, $a0, .LBB87_15
# %bb.2:                                # %.preheader44.us.preheader
	addi.d	$a2, $s0, -21
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -285976
	ori	$a3, $a3, 2979
	lu32i.d	$a3, -285976
	lu52i.d	$a3, $a3, 744
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 2
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -22
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 104
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 177405
	ori	$s3, $a0, 1488
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB87_4
	.p2align	4, , 16
.LBB87_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB87_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB87_31
.LBB87_4:                               # %.preheader44.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_5 Depth 2
                                        #     Child Loop BB87_9 Depth 2
                                        #     Child Loop BB87_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a4, $zero, 22
	move	$a5, $fp
	.p2align	4, , 16
.LBB87_5:                               #   Parent Loop BB87_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a3, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a3, 4
	ld.w	$t0, $a3, 8
	ld.w	$t1, $a3, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a3, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 80
	ld.w	$t2, $a3, 84
	add.d	$a3, $a6, $t1
	add.d	$a3, $a3, $a7
	add.d	$a7, $a3, $t0
	move	$a3, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 22
	addi.d	$a4, $a3, 22
	addi.d	$a5, $a5, 88
	bltu	$a2, $s2, .LBB87_5
# %bb.6:                                # %.loopexit45.us
                                        #   in Loop: Header=BB87_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB87_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB87_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a2, $a4, .LBB87_11
# %bb.8:                                # %vector.ph85
                                        #   in Loop: Header=BB87_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI87_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI87_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a3, $a3, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB87_9:                               # %vector.body88
                                        #   Parent Loop BB87_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB87_9
# %bb.10:                               # %middle.block95
                                        #   in Loop: Header=BB87_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a4, .LBB87_13
.LBB87_11:                              # %.preheader.us.preheader100
                                        #   in Loop: Header=BB87_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB87_12:                              # %.preheader.us
                                        #   Parent Loop BB87_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB87_12
.LBB87_13:                              # %.loopexit.us
                                        #   in Loop: Header=BB87_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB87_3
# %bb.14:                               #   in Loop: Header=BB87_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB87_3
.LBB87_15:                              # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB87_27
# %bb.16:                               # %.preheader.us55.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB87_18
	.p2align	4, , 16
.LBB87_17:                              # %_Z9check_sumIiEvT_.exit.us54
                                        #   in Loop: Header=BB87_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB87_31
.LBB87_18:                              # %.preheader.us55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_21 Depth 2
                                        #     Child Loop BB87_24 Depth 2
	bgeu	$s0, $a5, .LBB87_20
# %bb.19:                               #   in Loop: Header=BB87_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB87_23
	.p2align	4, , 16
.LBB87_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB87_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB87_21:                              # %vector.body
                                        #   Parent Loop BB87_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB87_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB87_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB87_25
.LBB87_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB87_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB87_24:                              # %scalar.ph
                                        #   Parent Loop BB87_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB87_24
.LBB87_25:                              # %.loopexit.us56
                                        #   in Loop: Header=BB87_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB87_17
# %bb.26:                               #   in Loop: Header=BB87_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB87_17
.LBB87_27:                              # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB87_29
	.p2align	4, , 16
.LBB87_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB87_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB87_31
.LBB87_29:                              # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB87_28
# %bb.30:                               #   in Loop: Header=BB87_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB87_28
.LBB87_31:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB87_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB87_35
.LBB87_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB87_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB87_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI87_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI87_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB87_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end87:
	.size	_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc, .Lfunc_end87-_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc
.LCPI88_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI88_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB88_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 21
	blt	$s0, $a0, .LBB88_15
# %bb.2:                                # %.preheader42.us.preheader
	addi.d	$a2, $s0, -20
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, 99864
	ori	$a3, $a3, 1561
	lu32i.d	$a3, -499322
	lu52i.d	$a3, $a3, -1951
	mulh.du	$a3, $a2, $a3
	sub.d	$a4, $a2, $a3
	srli.d	$a4, $a4, 1
	add.d	$a3, $a4, $a3
	srli.d	$a3, $a3, 4
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -21
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 100
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 455316
	ori	$s3, $a0, 3096
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB88_4
	.p2align	4, , 16
.LBB88_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB88_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB88_31
.LBB88_4:                               # %.preheader42.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_5 Depth 2
                                        #     Child Loop BB88_9 Depth 2
                                        #     Child Loop BB88_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a4, $zero, 21
	move	$a5, $fp
	.p2align	4, , 16
.LBB88_5:                               #   Parent Loop BB88_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a3, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a3, 4
	ld.w	$t0, $a3, 8
	ld.w	$t1, $a3, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a3, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 76
	ld.w	$t2, $a3, 80
	add.d	$a3, $a6, $t0
	add.d	$a3, $a3, $t1
	add.d	$a7, $a3, $a7
	move	$a3, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 21
	addi.d	$a4, $a3, 21
	addi.d	$a5, $a5, 84
	bltu	$a2, $s2, .LBB88_5
# %bb.6:                                # %.loopexit43.us
                                        #   in Loop: Header=BB88_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB88_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB88_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a2, $a4, .LBB88_11
# %bb.8:                                # %vector.ph83
                                        #   in Loop: Header=BB88_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI88_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI88_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a3, $a3, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB88_9:                               # %vector.body86
                                        #   Parent Loop BB88_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB88_9
# %bb.10:                               # %middle.block93
                                        #   in Loop: Header=BB88_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a4, .LBB88_13
.LBB88_11:                              # %.preheader.us.preheader98
                                        #   in Loop: Header=BB88_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB88_12:                              # %.preheader.us
                                        #   Parent Loop BB88_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB88_12
.LBB88_13:                              # %.loopexit.us
                                        #   in Loop: Header=BB88_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB88_3
# %bb.14:                               #   in Loop: Header=BB88_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB88_3
.LBB88_15:                              # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB88_27
# %bb.16:                               # %.preheader.us53.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB88_18
	.p2align	4, , 16
.LBB88_17:                              # %_Z9check_sumIiEvT_.exit.us52
                                        #   in Loop: Header=BB88_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB88_31
.LBB88_18:                              # %.preheader.us53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_21 Depth 2
                                        #     Child Loop BB88_24 Depth 2
	bgeu	$s0, $a5, .LBB88_20
# %bb.19:                               #   in Loop: Header=BB88_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB88_23
	.p2align	4, , 16
.LBB88_20:                              # %vector.body.preheader
                                        #   in Loop: Header=BB88_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB88_21:                              # %vector.body
                                        #   Parent Loop BB88_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB88_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB88_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB88_25
.LBB88_23:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB88_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB88_24:                              # %scalar.ph
                                        #   Parent Loop BB88_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB88_24
.LBB88_25:                              # %.loopexit.us54
                                        #   in Loop: Header=BB88_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB88_17
# %bb.26:                               #   in Loop: Header=BB88_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB88_17
.LBB88_27:                              # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB88_29
	.p2align	4, , 16
.LBB88_28:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB88_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB88_31
.LBB88_29:                              # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB88_28
# %bb.30:                               #   in Loop: Header=BB88_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB88_28
.LBB88_31:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB88_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB88_35
.LBB88_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB88_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB88_35:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI88_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI88_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB88_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end88:
	.size	_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc, .Lfunc_end88-_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN13do_loop_testsILi19EiE7do_testEPKiPKc,"axG",@progbits,_ZN13do_loop_testsILi19EiE7do_testEPKiPKc,comdat
	.weak	_ZN13do_loop_testsILi19EiE7do_testEPKiPKc # -- Begin function _ZN13do_loop_testsILi19EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN13do_loop_testsILi19EiE7do_testEPKiPKc,@function
_ZN13do_loop_testsILi19EiE7do_testEPKiPKc: # @_ZN13do_loop_testsILi19EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN13do_loop_testsILi10EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1000
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1100
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1200
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1300
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1400
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1500
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1600
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1700
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1800
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end89:
	.size	_ZN13do_loop_testsILi19EiE7do_testEPKiPKc, .Lfunc_end89-_ZN13do_loop_testsILi19EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc
.LCPI90_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI90_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -240
	.cfi_def_cfa_offset 240
	st.d	$ra, $sp, 232                   # 8-byte Folded Spill
	st.d	$fp, $sp, 224                   # 8-byte Folded Spill
	st.d	$s0, $sp, 216                   # 8-byte Folded Spill
	st.d	$s1, $sp, 208                   # 8-byte Folded Spill
	st.d	$s2, $sp, 200                   # 8-byte Folded Spill
	st.d	$s3, $sp, 192                   # 8-byte Folded Spill
	st.d	$s4, $sp, 184                   # 8-byte Folded Spill
	st.d	$s5, $sp, 176                   # 8-byte Folded Spill
	st.d	$s6, $sp, 168                   # 8-byte Folded Spill
	st.d	$s7, $sp, 160                   # 8-byte Folded Spill
	st.d	$s8, $sp, 152                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 112                   # 8-byte Folded Spill
	ld.w	$a4, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a1, %pc_hi20(current_test)
	st.d	$a1, $sp, 120                   # 8-byte Folded Spill
	blt	$a4, $a0, .LBB90_32
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 20
	blt	$s0, $a0, .LBB90_16
# %bb.2:                                # %.preheader41.us.preheader
	addi.d	$a2, $s0, -19
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -209716
	ori	$a3, $a3, 3277
	lu32i.d	$a3, -209716
	lu52i.d	$a3, $a3, -820
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 4
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -20
	move	$a1, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 96
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -315348
	ori	$s3, $a0, 608
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	b	.LBB90_4
	.p2align	4, , 16
.LBB90_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB90_4 Depth=1
	addi.w	$a1, $fp, 1
	bge	$a1, $a4, .LBB90_32
.LBB90_4:                               # %.preheader41.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_5 Depth 2
                                        #     Child Loop BB90_9 Depth 2
                                        #     Child Loop BB90_12 Depth 2
	st.d	$a1, $sp, 128                   # 8-byte Folded Spill
	st.d	$a4, $sp, 144                   # 8-byte Folded Spill
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 20
	ld.d	$a6, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB90_5:                               #   Parent Loop BB90_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$s6, $a5, 52
	ld.w	$s8, $a5, 56
	ld.w	$a1, $a5, 60
	ld.w	$s0, $a5, 64
	ld.w	$s7, $a5, 68
	ld.w	$s5, $a5, 72
	ld.w	$a5, $a5, 76
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a6, $a6, $s6
	add.d	$a6, $a6, $s8
	add.d	$a1, $a6, $a1
	add.d	$a1, $a1, $s0
	add.d	$a1, $a1, $s7
	add.d	$a1, $a1, $s5
	add.d	$a1, $a1, $a5
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s3
	addi.d	$a4, $a4, 20
	addi.d	$a5, $a0, 20
	addi.d	$a6, $a3, 80
	bltu	$a4, $s2, .LBB90_5
# %bb.6:                                # %.loopexit42.us
                                        #   in Loop: Header=BB90_4 Depth=1
	addi.w	$a1, $a4, 0
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	bge	$a1, $s0, .LBB90_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB90_4 Depth=1
	ld.d	$a4, $sp, 144                   # 8-byte Folded Reload
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	bltu	$a1, $a5, .LBB90_11
# %bb.8:                                # %vector.ph82
                                        #   in Loop: Header=BB90_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI90_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI90_0)
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a1
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB90_9:                               # %vector.body85
                                        #   Parent Loop BB90_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB90_9
# %bb.10:                               # %middle.block92
                                        #   in Loop: Header=BB90_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 40                    # 8-byte Folded Reload
	beq	$a1, $a3, .LBB90_14
.LBB90_11:                              # %.preheader.us.preheader97
                                        #   in Loop: Header=BB90_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB90_12:                              # %.preheader.us
                                        #   Parent Loop BB90_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a3, 0
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB90_12
	b	.LBB90_14
	.p2align	4, , 16
.LBB90_13:                              #   in Loop: Header=BB90_4 Depth=1
	ld.d	$a4, $sp, 144                   # 8-byte Folded Reload
.LBB90_14:                              # %.loopexit.us
                                        #   in Loop: Header=BB90_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	add.w	$a0, $a0, $a1
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	beq	$a2, $a0, .LBB90_3
# %bb.15:                               #   in Loop: Header=BB90_4 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB90_3
.LBB90_16:                              # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB90_28
# %bb.17:                               # %.preheader.us52.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 144                   # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 128                  # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 80                   # 16-byte Folded Spill
	vst	$vr5, $sp, 64                   # 16-byte Folded Spill
	b	.LBB90_19
	.p2align	4, , 16
.LBB90_18:                              # %_Z9check_sumIiEvT_.exit.us51
                                        #   in Loop: Header=BB90_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB90_32
.LBB90_19:                              # %.preheader.us52
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_22 Depth 2
                                        #     Child Loop BB90_25 Depth 2
	bgeu	$s0, $a5, .LBB90_21
# %bb.20:                               #   in Loop: Header=BB90_19 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB90_24
	.p2align	4, , 16
.LBB90_21:                              # %vector.body.preheader
                                        #   in Loop: Header=BB90_19 Depth=1
	ld.d	$a0, $sp, 144                   # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 128                  # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB90_22:                              # %vector.body
                                        #   Parent Loop BB90_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB90_22
# %bb.23:                               # %middle.block
                                        #   in Loop: Header=BB90_19 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB90_26
.LBB90_24:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB90_19 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB90_25:                              # %scalar.ph
                                        #   Parent Loop BB90_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $s6
	add.d	$a0, $a0, $a1
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB90_25
.LBB90_26:                              # %.loopexit.us53
                                        #   in Loop: Header=BB90_19 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s5
	add.w	$a1, $a1, $s4
	beq	$a0, $a1, .LBB90_18
# %bb.27:                               #   in Loop: Header=BB90_19 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 64                   # 16-byte Folded Reload
	vld	$vr4, $sp, 80                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB90_18
.LBB90_28:                              # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB90_30
	.p2align	4, , 16
.LBB90_29:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB90_30 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB90_32
.LBB90_30:                              # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB90_29
# %bb.31:                               #   in Loop: Header=BB90_30 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB90_29
.LBB90_32:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 120                   # 8-byte Folded Reload
	beqz	$a2, .LBB90_34
# %bb.33:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB90_36
.LBB90_34:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB90_37
# %bb.35:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB90_36:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI90_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI90_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 216                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 224                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 232                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 240
	ret
.LBB90_37:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end90:
	.size	_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc, .Lfunc_end90-_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc
.LCPI91_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI91_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -240
	.cfi_def_cfa_offset 240
	st.d	$ra, $sp, 232                   # 8-byte Folded Spill
	st.d	$fp, $sp, 224                   # 8-byte Folded Spill
	st.d	$s0, $sp, 216                   # 8-byte Folded Spill
	st.d	$s1, $sp, 208                   # 8-byte Folded Spill
	st.d	$s2, $sp, 200                   # 8-byte Folded Spill
	st.d	$s3, $sp, 192                   # 8-byte Folded Spill
	st.d	$s4, $sp, 184                   # 8-byte Folded Spill
	st.d	$s5, $sp, 176                   # 8-byte Folded Spill
	st.d	$s6, $sp, 168                   # 8-byte Folded Spill
	st.d	$s7, $sp, 160                   # 8-byte Folded Spill
	st.d	$s8, $sp, 152                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 112                   # 8-byte Folded Spill
	ld.w	$a4, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a1, %pc_hi20(current_test)
	st.d	$a1, $sp, 120                   # 8-byte Folded Spill
	blt	$a4, $a0, .LBB91_32
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 19
	blt	$s0, $a0, .LBB91_16
# %bb.2:                                # %.preheader40.us.preheader
	addi.d	$a2, $s0, -18
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, 55188
	ori	$a3, $a3, 863
	lu32i.d	$a3, 275941
	lu52i.d	$a3, $a3, -647
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 4
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -19
	move	$a1, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 92
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -37437
	ori	$s3, $a0, 2216
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	b	.LBB91_4
	.p2align	4, , 16
.LBB91_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB91_4 Depth=1
	addi.w	$a1, $fp, 1
	bge	$a1, $a4, .LBB91_32
.LBB91_4:                               # %.preheader40.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_5 Depth 2
                                        #     Child Loop BB91_9 Depth 2
                                        #     Child Loop BB91_12 Depth 2
	st.d	$a1, $sp, 128                   # 8-byte Folded Spill
	st.d	$a4, $sp, 144                   # 8-byte Folded Spill
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 19
	ld.d	$a6, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB91_5:                               #   Parent Loop BB91_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$s6, $a5, 52
	ld.w	$s8, $a5, 56
	ld.w	$a1, $a5, 60
	ld.w	$s0, $a5, 64
	ld.w	$s7, $a5, 68
	ld.w	$a5, $a5, 72
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a6, $a6, $s6
	add.d	$a6, $a6, $s8
	add.d	$a1, $a6, $a1
	add.d	$a1, $a1, $s0
	add.d	$a1, $a1, $s7
	add.d	$a1, $a1, $a5
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s3
	addi.d	$a4, $a4, 19
	addi.d	$a5, $a0, 19
	addi.d	$a6, $a3, 76
	bltu	$a4, $s2, .LBB91_5
# %bb.6:                                # %.loopexit41.us
                                        #   in Loop: Header=BB91_4 Depth=1
	addi.w	$a1, $a4, 0
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	bge	$a1, $s0, .LBB91_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB91_4 Depth=1
	ld.d	$a4, $sp, 144                   # 8-byte Folded Reload
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a1, $a5, .LBB91_11
# %bb.8:                                # %vector.ph81
                                        #   in Loop: Header=BB91_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI91_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI91_0)
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a1
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB91_9:                               # %vector.body84
                                        #   Parent Loop BB91_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB91_9
# %bb.10:                               # %middle.block91
                                        #   in Loop: Header=BB91_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 40                    # 8-byte Folded Reload
	beq	$a1, $a3, .LBB91_14
.LBB91_11:                              # %.preheader.us.preheader96
                                        #   in Loop: Header=BB91_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB91_12:                              # %.preheader.us
                                        #   Parent Loop BB91_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a3, 0
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB91_12
	b	.LBB91_14
	.p2align	4, , 16
.LBB91_13:                              #   in Loop: Header=BB91_4 Depth=1
	ld.d	$a4, $sp, 144                   # 8-byte Folded Reload
.LBB91_14:                              # %.loopexit.us
                                        #   in Loop: Header=BB91_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	add.w	$a0, $a0, $a1
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	beq	$a2, $a0, .LBB91_3
# %bb.15:                               #   in Loop: Header=BB91_4 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB91_3
.LBB91_16:                              # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB91_28
# %bb.17:                               # %.preheader.us51.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 144                   # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 128                  # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 80                   # 16-byte Folded Spill
	vst	$vr5, $sp, 64                   # 16-byte Folded Spill
	b	.LBB91_19
	.p2align	4, , 16
.LBB91_18:                              # %_Z9check_sumIiEvT_.exit.us50
                                        #   in Loop: Header=BB91_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB91_32
.LBB91_19:                              # %.preheader.us51
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_22 Depth 2
                                        #     Child Loop BB91_25 Depth 2
	bgeu	$s0, $a5, .LBB91_21
# %bb.20:                               #   in Loop: Header=BB91_19 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB91_24
	.p2align	4, , 16
.LBB91_21:                              # %vector.body.preheader
                                        #   in Loop: Header=BB91_19 Depth=1
	ld.d	$a0, $sp, 144                   # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 128                  # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB91_22:                              # %vector.body
                                        #   Parent Loop BB91_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB91_22
# %bb.23:                               # %middle.block
                                        #   in Loop: Header=BB91_19 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB91_26
.LBB91_24:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB91_19 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB91_25:                              # %scalar.ph
                                        #   Parent Loop BB91_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $s6
	add.d	$a0, $a0, $a1
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB91_25
.LBB91_26:                              # %.loopexit.us52
                                        #   in Loop: Header=BB91_19 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s5
	add.w	$a1, $a1, $s4
	beq	$a0, $a1, .LBB91_18
# %bb.27:                               #   in Loop: Header=BB91_19 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 64                   # 16-byte Folded Reload
	vld	$vr4, $sp, 80                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB91_18
.LBB91_28:                              # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB91_30
	.p2align	4, , 16
.LBB91_29:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB91_30 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB91_32
.LBB91_30:                              # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB91_29
# %bb.31:                               #   in Loop: Header=BB91_30 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB91_29
.LBB91_32:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 120                   # 8-byte Folded Reload
	beqz	$a2, .LBB91_34
# %bb.33:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB91_36
.LBB91_34:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB91_37
# %bb.35:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB91_36:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI91_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI91_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 216                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 224                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 232                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 240
	ret
.LBB91_37:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end91:
	.size	_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc, .Lfunc_end91-_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc
.LCPI92_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI92_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -224
	.cfi_def_cfa_offset 224
	st.d	$ra, $sp, 216                   # 8-byte Folded Spill
	st.d	$fp, $sp, 208                   # 8-byte Folded Spill
	st.d	$s0, $sp, 200                   # 8-byte Folded Spill
	st.d	$s1, $sp, 192                   # 8-byte Folded Spill
	st.d	$s2, $sp, 184                   # 8-byte Folded Spill
	st.d	$s3, $sp, 176                   # 8-byte Folded Spill
	st.d	$s4, $sp, 168                   # 8-byte Folded Spill
	st.d	$s5, $sp, 160                   # 8-byte Folded Spill
	st.d	$s6, $sp, 152                   # 8-byte Folded Spill
	st.d	$s7, $sp, 144                   # 8-byte Folded Spill
	st.d	$s8, $sp, 136                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 112                   # 8-byte Folded Spill
	ld.w	$a4, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a1, %pc_hi20(current_test)
	st.d	$a1, $sp, 120                   # 8-byte Folded Spill
	blt	$a4, $a0, .LBB92_32
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 18
	blt	$s0, $a0, .LBB92_16
# %bb.2:                                # %.preheader39.us.preheader
	addi.d	$a2, $s0, -17
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -466034
	ori	$a3, $a3, 911
	lu32i.d	$a3, -116509
	lu52i.d	$a3, $a3, -456
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 4
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -18
	move	$s7, $zero
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 88
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 240474
	ori	$s3, $a0, 3824
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	b	.LBB92_4
	.p2align	4, , 16
.LBB92_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB92_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a4, .LBB92_32
.LBB92_4:                               # %.preheader39.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_5 Depth 2
                                        #     Child Loop BB92_9 Depth 2
                                        #     Child Loop BB92_12 Depth 2
	st.d	$a4, $sp, 128                   # 8-byte Folded Spill
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 18
	ld.d	$a6, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB92_5:                               #   Parent Loop BB92_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$s6, $a5, 52
	ld.w	$s8, $a5, 56
	ld.w	$a1, $a5, 60
	ld.w	$s0, $a5, 64
	ld.w	$a5, $a5, 68
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a6, $a6, $s6
	add.d	$a6, $a6, $s8
	add.d	$a1, $a6, $a1
	add.d	$a1, $a1, $s0
	add.d	$a1, $a1, $a5
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s3
	addi.d	$a4, $a4, 18
	addi.d	$a5, $a0, 18
	addi.d	$a6, $a3, 72
	bltu	$a4, $s2, .LBB92_5
# %bb.6:                                # %.loopexit40.us
                                        #   in Loop: Header=BB92_4 Depth=1
	addi.w	$a1, $a4, 0
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	bge	$a1, $s0, .LBB92_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB92_4 Depth=1
	ld.d	$a4, $sp, 128                   # 8-byte Folded Reload
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a1, $a5, .LBB92_11
# %bb.8:                                # %vector.ph80
                                        #   in Loop: Header=BB92_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI92_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI92_0)
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a1
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB92_9:                               # %vector.body83
                                        #   Parent Loop BB92_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB92_9
# %bb.10:                               # %middle.block90
                                        #   in Loop: Header=BB92_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	beq	$a1, $a3, .LBB92_14
.LBB92_11:                              # %.preheader.us.preheader95
                                        #   in Loop: Header=BB92_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB92_12:                              # %.preheader.us
                                        #   Parent Loop BB92_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a3, 0
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB92_12
	b	.LBB92_14
	.p2align	4, , 16
.LBB92_13:                              #   in Loop: Header=BB92_4 Depth=1
	ld.d	$a4, $sp, 128                   # 8-byte Folded Reload
.LBB92_14:                              # %.loopexit.us
                                        #   in Loop: Header=BB92_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a1
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	add.w	$a0, $a0, $a1
	beq	$a2, $a0, .LBB92_3
# %bb.15:                               #   in Loop: Header=BB92_4 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB92_3
.LBB92_16:                              # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB92_28
# %bb.17:                               # %.preheader.us50.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 128                   # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB92_19
	.p2align	4, , 16
.LBB92_18:                              # %_Z9check_sumIiEvT_.exit.us49
                                        #   in Loop: Header=BB92_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB92_32
.LBB92_19:                              # %.preheader.us50
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_22 Depth 2
                                        #     Child Loop BB92_25 Depth 2
	bgeu	$s0, $a5, .LBB92_21
# %bb.20:                               #   in Loop: Header=BB92_19 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB92_24
	.p2align	4, , 16
.LBB92_21:                              # %vector.body.preheader
                                        #   in Loop: Header=BB92_19 Depth=1
	ld.d	$a0, $sp, 128                   # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB92_22:                              # %vector.body
                                        #   Parent Loop BB92_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB92_22
# %bb.23:                               # %middle.block
                                        #   in Loop: Header=BB92_19 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB92_26
.LBB92_24:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB92_19 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB92_25:                              # %scalar.ph
                                        #   Parent Loop BB92_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $s6
	add.d	$a0, $a0, $a1
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB92_25
.LBB92_26:                              # %.loopexit.us51
                                        #   in Loop: Header=BB92_19 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s5
	add.w	$a1, $a1, $s4
	beq	$a0, $a1, .LBB92_18
# %bb.27:                               #   in Loop: Header=BB92_19 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB92_18
.LBB92_28:                              # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB92_30
	.p2align	4, , 16
.LBB92_29:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB92_30 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB92_32
.LBB92_30:                              # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB92_29
# %bb.31:                               #   in Loop: Header=BB92_30 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB92_29
.LBB92_32:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 120                   # 8-byte Folded Reload
	beqz	$a2, .LBB92_34
# %bb.33:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB92_36
.LBB92_34:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB92_37
# %bb.35:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB92_36:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI92_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI92_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 200                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 208                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 216                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 224
	ret
.LBB92_37:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end92:
	.size	_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc, .Lfunc_end92-_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc
.LCPI93_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI93_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$fp, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a4, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a1, %pc_hi20(current_test)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	blt	$a4, $a0, .LBB93_32
# %bb.1:                                # %.lr.ph
	move	$a5, $fp
	ori	$a0, $zero, 17
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	blt	$fp, $a0, .LBB93_16
# %bb.2:                                # %.preheader38.us.preheader
	addi.d	$a2, $a5, -16
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -61681
	ori	$a2, $a2, 241
	lu32i.d	$a2, 61680
	lu52i.d	$a2, $a2, -241
	mulh.du	$a2, $a0, $a2
	addi.w	$a3, $zero, -16
	and	$a3, $a2, $a3
	srli.d	$a2, $a2, 4
	add.d	$a2, $a3, $a2
	sub.d	$a2, $a0, $a2
	sub.d	$a0, $a2, $a0
	add.d	$a0, $a5, $a0
	addi.d	$a0, $a0, -17
	move	$s7, $zero
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 84
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 518386
	ori	$s3, $a0, 1336
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	b	.LBB93_4
	.p2align	4, , 16
.LBB93_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB93_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a4, .LBB93_32
.LBB93_4:                               # %.preheader38.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_5 Depth 2
                                        #     Child Loop BB93_9 Depth 2
                                        #     Child Loop BB93_12 Depth 2
	move	$s0, $a4
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 17
	ld.d	$a6, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB93_5:                               #   Parent Loop BB93_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$s6, $a5, 52
	ld.w	$s8, $a5, 56
	ld.w	$a1, $a5, 60
	ld.w	$a5, $a5, 64
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a6, $a6, $s6
	add.d	$a6, $a6, $s8
	add.d	$a1, $a6, $a1
	add.d	$a1, $a1, $a5
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s3
	addi.d	$a4, $a4, 17
	addi.d	$a5, $a0, 17
	addi.d	$a6, $a3, 68
	bltu	$a4, $s2, .LBB93_5
# %bb.6:                                # %.loopexit39.us
                                        #   in Loop: Header=BB93_4 Depth=1
	addi.w	$a1, $a4, 0
	ld.d	$a5, $sp, 112                   # 8-byte Folded Reload
	bge	$a1, $a5, .LBB93_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB93_4 Depth=1
	move	$a4, $s0
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	ori	$a6, $zero, 8
	bltu	$a1, $a6, .LBB93_11
# %bb.8:                                # %vector.ph79
                                        #   in Loop: Header=BB93_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI93_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI93_0)
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a1
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB93_9:                               # %vector.body82
                                        #   Parent Loop BB93_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB93_9
# %bb.10:                               # %middle.block89
                                        #   in Loop: Header=BB93_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	beq	$a1, $a3, .LBB93_14
.LBB93_11:                              # %.preheader.us.preheader94
                                        #   in Loop: Header=BB93_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $a5, $a0
	.p2align	4, , 16
.LBB93_12:                              # %.preheader.us
                                        #   Parent Loop BB93_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a3, 0
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB93_12
	b	.LBB93_14
	.p2align	4, , 16
.LBB93_13:                              #   in Loop: Header=BB93_4 Depth=1
	move	$a4, $s0
.LBB93_14:                              # %.loopexit.us
                                        #   in Loop: Header=BB93_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a1
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	add.w	$a0, $a0, $a1
	beq	$a2, $a0, .LBB93_3
# %bb.15:                               #   in Loop: Header=BB93_4 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB93_3
.LBB93_16:                              # %.lr.ph.split
	move	$fp, $zero
	blez	$a5, .LBB93_28
# %bb.17:                               # %.preheader.us49.preheader
	bstrpick.d	$a0, $a5, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$s0, $s1, 16
	ori	$a6, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB93_19
	.p2align	4, , 16
.LBB93_18:                              # %_Z9check_sumIiEvT_.exit.us48
                                        #   in Loop: Header=BB93_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB93_32
.LBB93_19:                              # %.preheader.us49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_22 Depth 2
                                        #     Child Loop BB93_25 Depth 2
	bgeu	$a5, $a6, .LBB93_21
# %bb.20:                               #   in Loop: Header=BB93_19 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB93_24
	.p2align	4, , 16
.LBB93_21:                              # %vector.body.preheader
                                        #   in Loop: Header=BB93_19 Depth=1
	move	$a0, $s0
	move	$a2, $s3
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB93_22:                              # %vector.body
                                        #   Parent Loop BB93_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB93_22
# %bb.23:                               # %middle.block
                                        #   in Loop: Header=BB93_19 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $a5, .LBB93_26
.LBB93_24:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB93_19 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $a5, $a3
	.p2align	4, , 16
.LBB93_25:                              # %scalar.ph
                                        #   Parent Loop BB93_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $s6
	add.d	$a0, $a0, $a1
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB93_25
.LBB93_26:                              # %.loopexit.us50
                                        #   in Loop: Header=BB93_19 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s5
	add.w	$a1, $a1, $s4
	beq	$a0, $a1, .LBB93_18
# %bb.27:                               #   in Loop: Header=BB93_19 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ori	$a6, $zero, 8
	ld.d	$a5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB93_18
.LBB93_28:                              # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB93_30
	.p2align	4, , 16
.LBB93_29:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB93_30 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB93_32
.LBB93_30:                              # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB93_29
# %bb.31:                               #   in Loop: Header=BB93_30 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB93_29
.LBB93_32:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 104                   # 8-byte Folded Reload
	beqz	$a2, .LBB93_34
# %bb.33:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB93_36
.LBB93_34:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB93_37
# %bb.35:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB93_36:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI93_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI93_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB93_37:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end93:
	.size	_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc, .Lfunc_end93-_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc
.LCPI94_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI94_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 88                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 96                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB94_26
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 16
	blt	$s0, $a0, .LBB94_15
# %bb.2:                                # %.preheader37.us.preheader
	move	$s2, $zero
	addi.d	$a2, $s0, -15
	bstrpick.d	$s6, $a2, 31, 0
	addi.d	$a2, $s0, -16
	sltu	$a3, $a0, $s6
	masknez	$a0, $a0, $a3
	maskeqz	$a3, $s6, $a3
	or	$a0, $a3, $a0
	addi.d	$a0, $a0, -1
	addi.w	$a3, $zero, -16
	and	$a0, $a0, $a3
	sub.d	$a3, $a2, $a0
	andi	$a4, $s0, 7
	st.d	$a3, $sp, 56                    # 8-byte Folded Spill
	sub.d	$a3, $a3, $a4
	st.d	$a3, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a3, $s1, 80
	st.d	$a3, $sp, 80                    # 8-byte Folded Spill
	st.d	$a4, $sp, 48                    # 8-byte Folded Spill
	sub.d	$a2, $a2, $a4
	sub.d	$a0, $a2, $a0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -252279
	ori	$s8, $a0, 2944
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	b	.LBB94_4
	.p2align	4, , 16
.LBB94_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB94_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB94_26
.LBB94_4:                               # %.preheader37.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_5 Depth 2
                                        #     Child Loop BB94_9 Depth 2
                                        #     Child Loop BB94_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 16
	ld.d	$a6, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB94_5:                               #   Parent Loop BB94_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$s4, $a5, 48
	ld.w	$s3, $a5, 52
	ld.w	$s5, $a5, 56
	ld.w	$a5, $a5, 60
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $s4
	add.d	$a6, $a6, $s3
	add.d	$a6, $a6, $s5
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $fp
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s8
	addi.d	$a4, $a4, 16
	addi.d	$a5, $a0, 16
	addi.d	$a6, $a3, 64
	bltu	$a4, $s6, .LBB94_5
# %bb.6:                                # %.loopexit38.us
                                        #   in Loop: Header=BB94_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB94_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB94_4 Depth=1
	ld.d	$a4, $sp, 56                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB94_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB94_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI94_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI94_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB94_9:                               # %vector.body
                                        #   Parent Loop BB94_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s7
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB94_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB94_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	beqz	$a3, .LBB94_13
.LBB94_11:                              # %.preheader.us.preheader76
                                        #   in Loop: Header=BB94_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB94_12:                              # %.preheader.us
                                        #   Parent Loop BB94_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $fp
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s7
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB94_12
.LBB94_13:                              # %.loopexit.us
                                        #   in Loop: Header=BB94_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a3, $sp, 72                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a3
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	add.w	$a0, $a0, $a3
	beq	$a2, $a0, .LBB94_3
# %bb.14:                               #   in Loop: Header=BB94_4 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB94_3
.LBB94_15:                              # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB94_22
# %bb.16:                               # %.preheader.us48.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB94_18
	.p2align	4, , 16
.LBB94_17:                              # %_Z9check_sumIiEvT_.exit.us47
                                        #   in Loop: Header=BB94_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB94_26
.LBB94_18:                              # %.preheader.us48
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB94_19:                              #   Parent Loop BB94_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB94_19
# %bb.20:                               # %.loopexit.us49
                                        #   in Loop: Header=BB94_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB94_17
# %bb.21:                               #   in Loop: Header=BB94_18 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB94_17
.LBB94_22:                              # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB94_24
	.p2align	4, , 16
.LBB94_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB94_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB94_26
.LBB94_24:                              # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB94_23
# %bb.25:                               #   in Loop: Header=BB94_24 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB94_23
.LBB94_26:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	beqz	$a2, .LBB94_28
# %bb.27:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB94_30
.LBB94_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB94_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB94_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI94_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI94_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB94_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end94:
	.size	_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc, .Lfunc_end94-_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc
.LCPI95_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI95_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB95_26
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 15
	blt	$s0, $a0, .LBB95_15
# %bb.2:                                # %.preheader36.us.preheader
	addi.d	$a2, $s0, -14
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -489336
	ori	$a2, $a2, 2185
	lu32i.d	$a2, -489336
	lu52i.d	$a2, $a2, -1912
	mulh.du	$a0, $a0, $a2
	srli.d	$a0, $a0, 3
	slli.d	$a2, $a0, 4
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -15
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 76
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 25633
	ori	$s3, $a0, 456
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB95_4
	.p2align	4, , 16
.LBB95_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB95_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB95_26
.LBB95_4:                               # %.preheader36.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_5 Depth 2
                                        #     Child Loop BB95_9 Depth 2
                                        #     Child Loop BB95_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 15
	ld.d	$a6, $sp, 64                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB95_5:                               #   Parent Loop BB95_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$s6, $a5, 52
	ld.w	$a5, $a5, 56
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a6, $a6, $s6
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 15
	addi.d	$a5, $a0, 15
	addi.d	$a6, $a3, 60
	bltu	$a4, $s2, .LBB95_5
# %bb.6:                                # %.loopexit37.us
                                        #   in Loop: Header=BB95_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB95_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB95_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB95_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB95_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI95_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI95_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB95_9:                               # %vector.body
                                        #   Parent Loop BB95_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB95_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB95_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB95_13
.LBB95_11:                              # %.preheader.us.preheader75
                                        #   in Loop: Header=BB95_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB95_12:                              # %.preheader.us
                                        #   Parent Loop BB95_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB95_12
.LBB95_13:                              # %.loopexit.us
                                        #   in Loop: Header=BB95_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB95_3
# %bb.14:                               #   in Loop: Header=BB95_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB95_3
.LBB95_15:                              # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB95_22
# %bb.16:                               # %.preheader.us47.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB95_18
	.p2align	4, , 16
.LBB95_17:                              # %_Z9check_sumIiEvT_.exit.us46
                                        #   in Loop: Header=BB95_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB95_26
.LBB95_18:                              # %.preheader.us47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB95_19:                              #   Parent Loop BB95_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB95_19
# %bb.20:                               # %.loopexit.us48
                                        #   in Loop: Header=BB95_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB95_17
# %bb.21:                               #   in Loop: Header=BB95_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB95_17
.LBB95_22:                              # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB95_24
	.p2align	4, , 16
.LBB95_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB95_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB95_26
.LBB95_24:                              # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB95_23
# %bb.25:                               #   in Loop: Header=BB95_24 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB95_23
.LBB95_26:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB95_28
# %bb.27:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB95_30
.LBB95_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB95_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB95_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI95_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI95_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB95_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end95:
	.size	_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc, .Lfunc_end95-_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc
.LCPI96_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI96_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB96_26
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 14
	blt	$s0, $a0, .LBB96_15
# %bb.2:                                # %.preheader35.us.preheader
	addi.d	$a2, $s0, -13
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	srli.d	$a3, $a2, 1
	lu12i.w	$a4, 149796
	ori	$a4, $a4, 2341
	lu32i.d	$a4, 299593
	lu52i.d	$a4, $a4, 1170
	mulh.du	$a3, $a3, $a4
	srli.d	$a3, $a3, 1
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -14
	move	$s7, $zero
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 72
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 303544
	ori	$s3, $a0, 2064
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB96_4
	.p2align	4, , 16
.LBB96_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB96_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB96_26
.LBB96_4:                               # %.preheader35.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_5 Depth 2
                                        #     Child Loop BB96_9 Depth 2
                                        #     Child Loop BB96_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 14
	ld.d	$a6, $sp, 48                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB96_5:                               #   Parent Loop BB96_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$a5, $a5, 52
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 14
	addi.d	$a5, $a0, 14
	addi.d	$a6, $a3, 56
	bltu	$a4, $s2, .LBB96_5
# %bb.6:                                # %.loopexit36.us
                                        #   in Loop: Header=BB96_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB96_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB96_4 Depth=1
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB96_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB96_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI96_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI96_0)
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB96_9:                               # %vector.body
                                        #   Parent Loop BB96_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB96_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB96_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB96_13
.LBB96_11:                              # %.preheader.us.preheader74
                                        #   in Loop: Header=BB96_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB96_12:                              # %.preheader.us
                                        #   Parent Loop BB96_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB96_12
.LBB96_13:                              # %.loopexit.us
                                        #   in Loop: Header=BB96_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB96_3
# %bb.14:                               #   in Loop: Header=BB96_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB96_3
.LBB96_15:                              # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB96_22
# %bb.16:                               # %.preheader.us46.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB96_18
	.p2align	4, , 16
.LBB96_17:                              # %_Z9check_sumIiEvT_.exit.us45
                                        #   in Loop: Header=BB96_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB96_26
.LBB96_18:                              # %.preheader.us46
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB96_19:                              #   Parent Loop BB96_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB96_19
# %bb.20:                               # %.loopexit.us47
                                        #   in Loop: Header=BB96_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB96_17
# %bb.21:                               #   in Loop: Header=BB96_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB96_17
.LBB96_22:                              # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB96_24
	.p2align	4, , 16
.LBB96_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB96_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB96_26
.LBB96_24:                              # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB96_23
# %bb.25:                               #   in Loop: Header=BB96_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB96_23
.LBB96_26:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB96_28
# %bb.27:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB96_30
.LBB96_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB96_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB96_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI96_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI96_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB96_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end96:
	.size	_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc, .Lfunc_end96-_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc
.LCPI97_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI97_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 40                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 48                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB97_26
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 13
	blt	$s0, $a0, .LBB97_15
# %bb.2:                                # %.preheader34.us.preheader
	addi.d	$a2, $s0, -12
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -241980
	ori	$a3, $a3, 3781
	lu32i.d	$a3, 322638
	lu52i.d	$a3, $a3, 1260
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 2
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$s8, $a0, -13
	move	$s7, $zero
	st.d	$s8, $sp, 32                    # 8-byte Folded Spill
	bstrins.d	$s8, $zero, 2, 0
	addi.d	$fp, $s1, 68
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	b	.LBB97_4
	.p2align	4, , 16
.LBB97_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB97_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB97_26
.LBB97_4:                               # %.preheader34.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_5 Depth 2
                                        #     Child Loop BB97_9 Depth 2
                                        #     Child Loop BB97_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 13
	move	$a6, $fp
	.p2align	4, , 16
.LBB97_5:                               #   Parent Loop BB97_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$a5, $a5, 48
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.w	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	addu16i.d	$a2, $a2, -29195
	addi.w	$a2, $a2, -424
	addi.d	$a4, $a4, 13
	addi.d	$a5, $a0, 13
	addi.d	$a6, $a3, 52
	bltu	$a4, $s2, .LBB97_5
# %bb.6:                                # %.loopexit35.us
                                        #   in Loop: Header=BB97_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB97_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB97_4 Depth=1
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB97_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB97_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI97_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI97_0)
	add.d	$a0, $a0, $s8
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $s8
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB97_9:                               # %vector.body
                                        #   Parent Loop BB97_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s3
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB97_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB97_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	beq	$a3, $s8, .LBB97_13
.LBB97_11:                              # %.preheader.us.preheader73
                                        #   in Loop: Header=BB97_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB97_12:                              # %.preheader.us
                                        #   Parent Loop BB97_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s3
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB97_12
.LBB97_13:                              # %.loopexit.us
                                        #   in Loop: Header=BB97_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s5
	add.w	$a0, $a0, $s6
	beq	$a2, $a0, .LBB97_3
# %bb.14:                               #   in Loop: Header=BB97_4 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB97_3
.LBB97_15:                              # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB97_22
# %bb.16:                               # %.preheader.us45.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB97_18
	.p2align	4, , 16
.LBB97_17:                              # %_Z9check_sumIiEvT_.exit.us44
                                        #   in Loop: Header=BB97_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB97_26
.LBB97_18:                              # %.preheader.us45
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB97_19:                              #   Parent Loop BB97_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB97_19
# %bb.20:                               # %.loopexit.us46
                                        #   in Loop: Header=BB97_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB97_17
# %bb.21:                               #   in Loop: Header=BB97_18 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB97_17
.LBB97_22:                              # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB97_24
	.p2align	4, , 16
.LBB97_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB97_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB97_26
.LBB97_24:                              # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB97_23
# %bb.25:                               #   in Loop: Header=BB97_24 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB97_23
.LBB97_26:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	beqz	$a2, .LBB97_28
# %bb.27:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB97_30
.LBB97_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB97_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB97_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI97_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI97_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB97_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end97:
	.size	_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc, .Lfunc_end97-_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc
.LCPI98_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI98_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB98_26
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 12
	blt	$s0, $a0, .LBB98_15
# %bb.2:                                # %.preheader33.us.preheader
	addi.d	$a2, $s0, -11
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -349526
	ori	$a3, $a3, 2731
	lu32i.d	$a3, -349526
	lu52i.d	$a3, $a3, -1366
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 3
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -12
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 64
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -189209
	ori	$s3, $a0, 1184
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB98_4
	.p2align	4, , 16
.LBB98_3:                               # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB98_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB98_26
.LBB98_4:                               # %.preheader33.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_5 Depth 2
                                        #     Child Loop BB98_9 Depth 2
                                        #     Child Loop BB98_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 12
	move	$a6, $fp
	.p2align	4, , 16
.LBB98_5:                               #   Parent Loop BB98_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$a5, $a5, 44
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 12
	addi.d	$a5, $a0, 12
	addi.d	$a6, $a3, 48
	bltu	$a4, $s2, .LBB98_5
# %bb.6:                                # %.loopexit34.us
                                        #   in Loop: Header=BB98_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB98_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB98_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB98_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB98_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI98_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI98_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB98_9:                               # %vector.body
                                        #   Parent Loop BB98_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB98_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB98_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB98_13
.LBB98_11:                              # %.preheader.us.preheader72
                                        #   in Loop: Header=BB98_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB98_12:                              # %.preheader.us
                                        #   Parent Loop BB98_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB98_12
.LBB98_13:                              # %.loopexit.us
                                        #   in Loop: Header=BB98_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB98_3
# %bb.14:                               #   in Loop: Header=BB98_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB98_3
.LBB98_15:                              # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB98_22
# %bb.16:                               # %.preheader.us44.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB98_18
	.p2align	4, , 16
.LBB98_17:                              # %_Z9check_sumIiEvT_.exit.us43
                                        #   in Loop: Header=BB98_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB98_26
.LBB98_18:                              # %.preheader.us44
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB98_19:                              #   Parent Loop BB98_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB98_19
# %bb.20:                               # %.loopexit.us45
                                        #   in Loop: Header=BB98_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB98_17
# %bb.21:                               #   in Loop: Header=BB98_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB98_17
.LBB98_22:                              # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB98_24
	.p2align	4, , 16
.LBB98_23:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB98_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB98_26
.LBB98_24:                              # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB98_23
# %bb.25:                               #   in Loop: Header=BB98_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB98_23
.LBB98_26:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB98_28
# %bb.27:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB98_30
.LBB98_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB98_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB98_30:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI98_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI98_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB98_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end98:
	.size	_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc, .Lfunc_end98-_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN13do_loop_testsILi10EiE7do_testEPKiPKc,"axG",@progbits,_ZN13do_loop_testsILi10EiE7do_testEPKiPKc,comdat
	.weak	_ZN13do_loop_testsILi10EiE7do_testEPKiPKc # -- Begin function _ZN13do_loop_testsILi10EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN13do_loop_testsILi10EiE7do_testEPKiPKc,@function
_ZN13do_loop_testsILi10EiE7do_testEPKiPKc: # @_ZN13do_loop_testsILi10EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s0, $a0, %pc_lo12(temp_string)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	move	$a0, $fp
	move	$a1, $s1
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 100
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 200
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 300
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 400
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 500
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 600
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 700
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 800
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 900
	move	$a0, $fp
	move	$a1, $s1
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end99:
	.size	_ZN13do_loop_testsILi10EiE7do_testEPKiPKc, .Lfunc_end99-_ZN13do_loop_testsILi10EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc
.LCPI100_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI100_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB100_26
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 11
	blt	$s0, $a0, .LBB100_15
# %bb.2:                                # %.preheader32.us.preheader
	addi.d	$a2, $s0, -10
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -285976
	ori	$a3, $a3, 2979
	lu32i.d	$a3, -285976
	lu52i.d	$a3, $a3, 744
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 1
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -11
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 60
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 88702
	ori	$s3, $a0, 2792
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB100_4
	.p2align	4, , 16
.LBB100_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB100_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB100_26
.LBB100_4:                              # %.preheader32.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_5 Depth 2
                                        #     Child Loop BB100_9 Depth 2
                                        #     Child Loop BB100_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 11
	move	$a6, $fp
	.p2align	4, , 16
.LBB100_5:                              #   Parent Loop BB100_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$a5, $a5, 40
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 11
	addi.d	$a5, $a0, 11
	addi.d	$a6, $a3, 44
	bltu	$a4, $s2, .LBB100_5
# %bb.6:                                # %.loopexit33.us
                                        #   in Loop: Header=BB100_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB100_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB100_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB100_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB100_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI100_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI100_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB100_9:                              # %vector.body
                                        #   Parent Loop BB100_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB100_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB100_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB100_13
.LBB100_11:                             # %.preheader.us.preheader71
                                        #   in Loop: Header=BB100_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB100_12:                             # %.preheader.us
                                        #   Parent Loop BB100_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB100_12
.LBB100_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB100_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB100_3
# %bb.14:                               #   in Loop: Header=BB100_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB100_3
.LBB100_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB100_22
# %bb.16:                               # %.preheader.us43.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB100_18
	.p2align	4, , 16
.LBB100_17:                             # %_Z9check_sumIiEvT_.exit.us42
                                        #   in Loop: Header=BB100_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB100_26
.LBB100_18:                             # %.preheader.us43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB100_19:                             #   Parent Loop BB100_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB100_19
# %bb.20:                               # %.loopexit.us44
                                        #   in Loop: Header=BB100_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB100_17
# %bb.21:                               #   in Loop: Header=BB100_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB100_17
.LBB100_22:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB100_24
	.p2align	4, , 16
.LBB100_23:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB100_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB100_26
.LBB100_24:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB100_23
# %bb.25:                               #   in Loop: Header=BB100_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB100_23
.LBB100_26:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB100_28
# %bb.27:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB100_30
.LBB100_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB100_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB100_30:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI100_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI100_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB100_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end100:
	.size	_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc, .Lfunc_end100-_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc
.LCPI101_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI101_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB101_26
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 10
	blt	$s0, $a0, .LBB101_15
# %bb.2:                                # %.preheader31.us.preheader
	addi.d	$a2, $s0, -9
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -209716
	ori	$a3, $a3, 3277
	lu32i.d	$a3, -209716
	lu52i.d	$a3, $a3, -820
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 3
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -10
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 56
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 366614
	ori	$s3, $a0, 304
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB101_4
	.p2align	4, , 16
.LBB101_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB101_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB101_26
.LBB101_4:                              # %.preheader31.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_5 Depth 2
                                        #     Child Loop BB101_9 Depth 2
                                        #     Child Loop BB101_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 10
	move	$a6, $fp
	.p2align	4, , 16
.LBB101_5:                              #   Parent Loop BB101_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$a5, $a5, 36
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 10
	addi.d	$a5, $a0, 10
	addi.d	$a6, $a3, 40
	bltu	$a4, $s2, .LBB101_5
# %bb.6:                                # %.loopexit32.us
                                        #   in Loop: Header=BB101_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB101_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB101_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB101_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB101_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI101_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI101_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB101_9:                              # %vector.body
                                        #   Parent Loop BB101_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB101_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB101_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB101_13
.LBB101_11:                             # %.preheader.us.preheader70
                                        #   in Loop: Header=BB101_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB101_12:                             # %.preheader.us
                                        #   Parent Loop BB101_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB101_12
.LBB101_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB101_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB101_3
# %bb.14:                               #   in Loop: Header=BB101_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB101_3
.LBB101_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB101_22
# %bb.16:                               # %.preheader.us42.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB101_18
	.p2align	4, , 16
.LBB101_17:                             # %_Z9check_sumIiEvT_.exit.us41
                                        #   in Loop: Header=BB101_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB101_26
.LBB101_18:                             # %.preheader.us42
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB101_19:                             #   Parent Loop BB101_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB101_19
# %bb.20:                               # %.loopexit.us43
                                        #   in Loop: Header=BB101_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB101_17
# %bb.21:                               #   in Loop: Header=BB101_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB101_17
.LBB101_22:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB101_24
	.p2align	4, , 16
.LBB101_23:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB101_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB101_26
.LBB101_24:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB101_23
# %bb.25:                               #   in Loop: Header=BB101_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB101_23
.LBB101_26:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB101_28
# %bb.27:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB101_30
.LBB101_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB101_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB101_30:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI101_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI101_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB101_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end101:
	.size	_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc, .Lfunc_end101-_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc
.LCPI102_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI102_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB102_26
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 9
	blt	$s0, $a0, .LBB102_15
# %bb.2:                                # %.preheader30.us.preheader
	move	$s2, $zero
	addi.d	$a2, $s0, -8
	bstrpick.d	$s6, $a2, 31, 0
	sltu	$a2, $a0, $s6
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s6, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -466034
	ori	$a2, $a2, 911
	lu32i.d	$a2, -116509
	lu52i.d	$a2, $a2, -456
	mulh.du	$a2, $a0, $a2
	addi.w	$a3, $zero, -8
	and	$a4, $a2, $a3
	srli.d	$a2, $a2, 3
	add.d	$a2, $a4, $a2
	sub.d	$a2, $a0, $a2
	sub.d	$a0, $a2, $a0
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -9
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	and	$a0, $a0, $a3
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 52
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -404051
	ori	$s3, $a0, 1912
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	b	.LBB102_4
	.p2align	4, , 16
.LBB102_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB102_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB102_26
.LBB102_4:                              # %.preheader30.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_5 Depth 2
                                        #     Child Loop BB102_9 Depth 2
                                        #     Child Loop BB102_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 9
	move	$a6, $fp
	.p2align	4, , 16
.LBB102_5:                              #   Parent Loop BB102_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$a5, $a5, 32
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 9
	addi.d	$a5, $a0, 9
	addi.d	$a6, $a3, 36
	bltu	$a4, $s6, .LBB102_5
# %bb.6:                                # %.loopexit31.us
                                        #   in Loop: Header=BB102_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB102_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB102_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB102_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB102_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI102_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI102_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB102_9:                              # %vector.body
                                        #   Parent Loop BB102_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB102_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB102_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB102_13
.LBB102_11:                             # %.preheader.us.preheader69
                                        #   in Loop: Header=BB102_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB102_12:                             # %.preheader.us
                                        #   Parent Loop BB102_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB102_12
.LBB102_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB102_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s8
	add.w	$a0, $a0, $s7
	beq	$a2, $a0, .LBB102_3
# %bb.14:                               #   in Loop: Header=BB102_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB102_3
.LBB102_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB102_22
# %bb.16:                               # %.preheader.us41.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB102_18
	.p2align	4, , 16
.LBB102_17:                             # %_Z9check_sumIiEvT_.exit.us40
                                        #   in Loop: Header=BB102_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB102_26
.LBB102_18:                             # %.preheader.us41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB102_19:                             #   Parent Loop BB102_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB102_19
# %bb.20:                               # %.loopexit.us42
                                        #   in Loop: Header=BB102_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB102_17
# %bb.21:                               #   in Loop: Header=BB102_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB102_17
.LBB102_22:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB102_24
	.p2align	4, , 16
.LBB102_23:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB102_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB102_26
.LBB102_24:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB102_23
# %bb.25:                               #   in Loop: Header=BB102_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB102_23
.LBB102_26:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB102_28
# %bb.27:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB102_30
.LBB102_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB102_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB102_30:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI102_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI102_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB102_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end102:
	.size	_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc, .Lfunc_end102-_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc
.LCPI103_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI103_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB103_26
# %bb.1:                                # %.lr.ph
	ori	$t5, $zero, 8
	blt	$s0, $t5, .LBB103_15
# %bb.2:                                # %.preheader29.us.preheader
	move	$s6, $zero
	addi.d	$a0, $s0, -7
	bstrpick.d	$s7, $a0, 31, 0
	addi.d	$a0, $s0, -8
	sltu	$a2, $t5, $s7
	masknez	$a3, $t5, $a2
	maskeqz	$a2, $s7, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	addi.w	$a3, $zero, -8
	and	$a2, $a2, $a3
	sub.d	$a3, $a0, $a2
	andi	$a4, $s0, 7
	st.d	$a3, $sp, 64                    # 8-byte Folded Spill
	sub.d	$a3, $a3, $a4
	st.d	$a3, $sp, 48                    # 8-byte Folded Spill
	addi.d	$s2, $s1, 48
	st.d	$a4, $sp, 56                    # 8-byte Folded Spill
	sub.d	$a0, $a0, $a4
	sub.d	$a0, $a0, $a2
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -126140
	ori	$fp, $a0, 3520
	lu12i.w	$a0, -277912
	ori	$s8, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s5, $a0, 1536
	b	.LBB103_4
	.p2align	4, , 16
.LBB103_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB103_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB103_26
.LBB103_4:                              # %.preheader29.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_5 Depth 2
                                        #     Child Loop BB103_9 Depth 2
                                        #     Child Loop BB103_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 8
	move	$a6, $s2
	.p2align	4, , 16
.LBB103_5:                              #   Parent Loop BB103_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$a5, $a5, 28
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $fp
	addi.d	$a4, $a4, 8
	addi.d	$a5, $a0, 8
	addi.d	$a6, $a3, 32
	bltu	$a4, $s7, .LBB103_5
# %bb.6:                                # %.loopexit30.us
                                        #   in Loop: Header=BB103_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB103_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB103_4 Depth=1
	ld.d	$a4, $sp, 64                    # 8-byte Folded Reload
	bltu	$a4, $t5, .LBB103_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB103_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI103_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI103_0)
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a2, $sp, 40                    # 8-byte Folded Reload
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB103_9:                              # %vector.body
                                        #   Parent Loop BB103_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s8
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB103_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB103_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	beqz	$a3, .LBB103_13
.LBB103_11:                             # %.preheader.us.preheader68
                                        #   in Loop: Header=BB103_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB103_12:                             # %.preheader.us
                                        #   Parent Loop BB103_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s8
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB103_12
.LBB103_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB103_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s3
	add.w	$a0, $a0, $s5
	beq	$a2, $a0, .LBB103_3
# %bb.14:                               #   in Loop: Header=BB103_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB103_3
.LBB103_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB103_22
# %bb.16:                               # %.preheader.us40.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB103_18
	.p2align	4, , 16
.LBB103_17:                             # %_Z9check_sumIiEvT_.exit.us39
                                        #   in Loop: Header=BB103_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB103_26
.LBB103_18:                             # %.preheader.us40
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB103_19:                             #   Parent Loop BB103_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB103_19
# %bb.20:                               # %.loopexit.us41
                                        #   in Loop: Header=BB103_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB103_17
# %bb.21:                               #   in Loop: Header=BB103_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB103_17
.LBB103_22:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB103_24
	.p2align	4, , 16
.LBB103_23:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB103_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB103_26
.LBB103_24:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB103_23
# %bb.25:                               #   in Loop: Header=BB103_24 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB103_23
.LBB103_26:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB103_28
# %bb.27:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB103_30
.LBB103_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB103_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB103_30:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI103_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI103_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB103_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end103:
	.size	_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc, .Lfunc_end103-_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc
.LCPI104_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI104_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB104_26
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 7
	blt	$s0, $a0, .LBB104_15
# %bb.2:                                # %.preheader28.us.preheader
	addi.d	$a2, $s0, -6
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -449390
	ori	$a2, $a2, 1171
	lu32i.d	$a2, 149796
	lu52i.d	$a2, $a2, 585
	mulh.du	$a2, $a0, $a2
	sub.d	$a0, $a0, $a2
	srli.d	$a0, $a0, 1
	add.d	$a0, $a0, $a2
	srli.d	$a0, $a0, 2
	slli.d	$a2, $a0, 3
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -7
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 44
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 151772
	ori	$s3, $a0, 1032
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB104_4
	.p2align	4, , 16
.LBB104_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB104_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB104_26
.LBB104_4:                              # %.preheader28.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_5 Depth 2
                                        #     Child Loop BB104_9 Depth 2
                                        #     Child Loop BB104_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 7
	move	$a6, $fp
	.p2align	4, , 16
.LBB104_5:                              #   Parent Loop BB104_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$a5, $a5, 24
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 7
	addi.d	$a5, $a0, 7
	addi.d	$a6, $a3, 28
	bltu	$a4, $s2, .LBB104_5
# %bb.6:                                # %.loopexit29.us
                                        #   in Loop: Header=BB104_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB104_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB104_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB104_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB104_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI104_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI104_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB104_9:                              # %vector.body
                                        #   Parent Loop BB104_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB104_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB104_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB104_13
.LBB104_11:                             # %.preheader.us.preheader67
                                        #   in Loop: Header=BB104_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB104_12:                             # %.preheader.us
                                        #   Parent Loop BB104_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB104_12
.LBB104_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB104_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB104_3
# %bb.14:                               #   in Loop: Header=BB104_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB104_3
.LBB104_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB104_22
# %bb.16:                               # %.preheader.us39.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB104_18
	.p2align	4, , 16
.LBB104_17:                             # %_Z9check_sumIiEvT_.exit.us38
                                        #   in Loop: Header=BB104_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB104_26
.LBB104_18:                             # %.preheader.us39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB104_19:                             #   Parent Loop BB104_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB104_19
# %bb.20:                               # %.loopexit.us40
                                        #   in Loop: Header=BB104_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB104_17
# %bb.21:                               #   in Loop: Header=BB104_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB104_17
.LBB104_22:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB104_24
	.p2align	4, , 16
.LBB104_23:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB104_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB104_26
.LBB104_24:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB104_23
# %bb.25:                               #   in Loop: Header=BB104_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB104_23
.LBB104_26:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB104_28
# %bb.27:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB104_30
.LBB104_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB104_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB104_30:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI104_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI104_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB104_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end104:
	.size	_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc, .Lfunc_end104-_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc
.LCPI105_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI105_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB105_26
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 6
	blt	$s0, $a0, .LBB105_15
# %bb.2:                                # %.preheader27.us.preheader
	addi.d	$a2, $s0, -5
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -349526
	ori	$a3, $a3, 2731
	lu32i.d	$a3, -349526
	lu52i.d	$a3, $a3, -1366
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 2
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -6
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 40
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 429683
	ori	$s3, $a0, 2640
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB105_4
	.p2align	4, , 16
.LBB105_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB105_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB105_26
.LBB105_4:                              # %.preheader27.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_5 Depth 2
                                        #     Child Loop BB105_9 Depth 2
                                        #     Child Loop BB105_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 6
	move	$a6, $fp
	.p2align	4, , 16
.LBB105_5:                              #   Parent Loop BB105_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$a5, $a5, 20
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 6
	addi.d	$a5, $a0, 6
	addi.d	$a6, $a3, 24
	bltu	$a4, $s2, .LBB105_5
# %bb.6:                                # %.loopexit28.us
                                        #   in Loop: Header=BB105_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB105_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB105_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB105_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB105_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI105_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI105_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB105_9:                              # %vector.body
                                        #   Parent Loop BB105_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB105_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB105_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB105_13
.LBB105_11:                             # %.preheader.us.preheader66
                                        #   in Loop: Header=BB105_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB105_12:                             # %.preheader.us
                                        #   Parent Loop BB105_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB105_12
.LBB105_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB105_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB105_3
# %bb.14:                               #   in Loop: Header=BB105_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB105_3
.LBB105_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB105_22
# %bb.16:                               # %.preheader.us38.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB105_18
	.p2align	4, , 16
.LBB105_17:                             # %_Z9check_sumIiEvT_.exit.us37
                                        #   in Loop: Header=BB105_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB105_26
.LBB105_18:                             # %.preheader.us38
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB105_19:                             #   Parent Loop BB105_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB105_19
# %bb.20:                               # %.loopexit.us39
                                        #   in Loop: Header=BB105_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB105_17
# %bb.21:                               #   in Loop: Header=BB105_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB105_17
.LBB105_22:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB105_24
	.p2align	4, , 16
.LBB105_23:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB105_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB105_26
.LBB105_24:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB105_23
# %bb.25:                               #   in Loop: Header=BB105_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB105_23
.LBB105_26:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB105_28
# %bb.27:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB105_30
.LBB105_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB105_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB105_30:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI105_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI105_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB105_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end105:
	.size	_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc, .Lfunc_end105-_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc
.LCPI106_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI106_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 112                   # 8-byte Folded Spill
	blt	$a1, $a0, .LBB106_32
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 5
	blt	$s0, $a0, .LBB106_21
# %bb.2:                                # %.preheader26.us.preheader
	move	$s2, $zero
	addi.w	$s4, $s0, -4
	bstrpick.d	$s7, $s4, 31, 0
	sltu	$a2, $a0, $s7
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s7, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -209716
	ori	$a2, $a2, 3277
	lu32i.d	$a2, -209716
	lu52i.d	$a2, $a2, -820
	mulh.du	$a0, $a0, $a2
	srli.d	$a2, $a0, 2
	addi.w	$a3, $zero, -4
	and	$a0, $a0, $a3
	add.d	$a0, $a0, $a2
	sub.d	$a0, $s0, $a0
	addi.d	$a3, $a0, -5
	addi.d	$a0, $a2, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$fp, $a0, 3
	slli.d	$a2, $a0, 5
	alsl.d	$a0, $a0, $a2, 3
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 5
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	st.d	$a3, $sp, 88                    # 8-byte Folded Spill
	bstrins.d	$a3, $zero, 2, 0
	st.d	$a3, $sp, 32                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	addi.d	$a2, $a0, 80
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	ori	$t4, $zero, 36
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -340981
	ori	$s5, $a0, 152
	lu12i.w	$a0, -277912
	ori	$s1, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	b	.LBB106_4
	.p2align	4, , 16
.LBB106_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB106_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB106_32
.LBB106_4:                              # %.preheader26.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_7 Depth 2
                                        #     Child Loop BB106_10 Depth 2
                                        #     Child Loop BB106_15 Depth 2
                                        #     Child Loop BB106_18 Depth 2
	bgeu	$s4, $t4, .LBB106_6
# %bb.5:                                #   in Loop: Header=BB106_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	ori	$a4, $zero, 5
	b	.LBB106_9
	.p2align	4, , 16
.LBB106_6:                              # %vector.body70.preheader
                                        #   in Loop: Header=BB106_4 Depth=1
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	move	$a2, $fp
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB106_7:                              # %vector.body70
                                        #   Parent Loop BB106_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -80
	ld.w	$a4, $a0, -60
	ld.w	$a5, $a0, -40
	ld.w	$a6, $a0, -20
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 20
	ld.w	$a5, $a0, 40
	ld.w	$a6, $a0, 60
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -76
	ld.w	$a4, $a0, -56
	ld.w	$a5, $a0, -36
	ld.w	$a6, $a0, -16
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 24
	ld.w	$a5, $a0, 44
	ld.w	$a6, $a0, 64
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	ld.w	$a3, $a0, -72
	ld.w	$a4, $a0, -52
	ld.w	$a5, $a0, -32
	ld.w	$a6, $a0, -12
	vinsgr2vr.w	$vr6, $a3, 0
	vinsgr2vr.w	$vr6, $a4, 1
	vinsgr2vr.w	$vr6, $a5, 2
	vinsgr2vr.w	$vr6, $a6, 3
	ld.w	$a3, $a0, 8
	ld.w	$a4, $a0, 28
	ld.w	$a5, $a0, 48
	ld.w	$a6, $a0, 68
	vinsgr2vr.w	$vr7, $a3, 0
	vinsgr2vr.w	$vr7, $a4, 1
	vinsgr2vr.w	$vr7, $a5, 2
	vinsgr2vr.w	$vr7, $a6, 3
	ld.w	$a3, $a0, -68
	ld.w	$a4, $a0, -48
	ld.w	$a5, $a0, -28
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr8, $a3, 0
	vinsgr2vr.w	$vr8, $a4, 1
	vinsgr2vr.w	$vr8, $a5, 2
	vinsgr2vr.w	$vr8, $a6, 3
	ld.w	$a3, $a0, 12
	ld.w	$a4, $a0, 32
	ld.w	$a5, $a0, 52
	ld.w	$a6, $a0, 72
	vinsgr2vr.w	$vr9, $a3, 0
	vinsgr2vr.w	$vr9, $a4, 1
	vinsgr2vr.w	$vr9, $a5, 2
	vinsgr2vr.w	$vr9, $a6, 3
	ld.w	$a3, $a0, -64
	ld.w	$a4, $a0, -44
	ld.w	$a5, $a0, -24
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr10, $a3, 0
	vinsgr2vr.w	$vr10, $a4, 1
	vinsgr2vr.w	$vr10, $a5, 2
	vinsgr2vr.w	$vr10, $a6, 3
	ld.w	$a3, $a0, 16
	ld.w	$a4, $a0, 36
	ld.w	$a5, $a0, 56
	ld.w	$a6, $a0, 76
	vinsgr2vr.w	$vr11, $a3, 0
	vinsgr2vr.w	$vr11, $a4, 1
	vinsgr2vr.w	$vr11, $a5, 2
	vinsgr2vr.w	$vr11, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vadd.w	$vr2, $vr2, $vr6
	vadd.w	$vr3, $vr3, $vr7
	vadd.w	$vr2, $vr2, $vr8
	vadd.w	$vr3, $vr3, $vr9
	vadd.w	$vr2, $vr2, $vr10
	vadd.w	$vr3, $vr3, $vr11
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 160
	bnez	$a2, .LBB106_7
# %bb.8:                                # %middle.block76
                                        #   in Loop: Header=BB106_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	move	$a3, $a2
	ld.d	$a5, $sp, 56                    # 8-byte Folded Reload
	beq	$a5, $fp, .LBB106_11
.LBB106_9:                              # %scalar.ph65.preheader
                                        #   in Loop: Header=BB106_4 Depth=1
	addi.d	$a2, $a4, -5
	ld.d	$a4, $sp, 80                    # 8-byte Folded Reload
	alsl.d	$a4, $a3, $a4, 2
	.p2align	4, , 16
.LBB106_10:                             # %scalar.ph65
                                        #   Parent Loop BB106_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -8
	ld.w	$a6, $a4, -4
	ld.w	$a7, $a4, 0
	ld.w	$t0, $a4, 4
	ld.w	$t1, $a4, 8
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	mul.d	$a5, $a5, $s3
	add.d	$a0, $a0, $a5
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, 5
	addi.d	$a2, $a2, 5
	addi.d	$a4, $a4, 20
	bltu	$a3, $s7, .LBB106_10
.LBB106_11:                             # %.loopexit27.us
                                        #   in Loop: Header=BB106_4 Depth=1
	addi.w	$a3, $a3, 0
	bge	$a3, $s0, .LBB106_19
# %bb.12:                               # %.preheader.us.preheader
                                        #   in Loop: Header=BB106_4 Depth=1
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bgeu	$a3, $a4, .LBB106_14
# %bb.13:                               #   in Loop: Header=BB106_4 Depth=1
	move	$a3, $a2
	b	.LBB106_17
	.p2align	4, , 16
.LBB106_14:                             # %vector.ph
                                        #   in Loop: Header=BB106_4 Depth=1
	pcalau12i	$a3, %pc_hi20(.LCPI106_0)
	vld	$vr0, $a3, %pc_lo12(.LCPI106_0)
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	add.d	$a3, $a2, $a4
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a4
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB106_15:                             # %vector.body
                                        #   Parent Loop BB106_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB106_15
# %bb.16:                               # %middle.block
                                        #   in Loop: Header=BB106_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	beq	$a2, $a4, .LBB106_19
.LBB106_17:                             # %.preheader.us.preheader82
                                        #   in Loop: Header=BB106_4 Depth=1
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB106_18:                             # %.preheader.us
                                        #   Parent Loop BB106_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s1
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB106_18
.LBB106_19:                             # %.loopexit.us
                                        #   in Loop: Header=BB106_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB106_3
# %bb.20:                               #   in Loop: Header=BB106_4 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t4, $zero, 36
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB106_3
.LBB106_21:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB106_28
# %bb.22:                               # %.preheader.us37.preheader
	lu12i.w	$a0, 65881
	ori	$s1, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB106_24
	.p2align	4, , 16
.LBB106_23:                             # %_Z9check_sumIiEvT_.exit.us36
                                        #   in Loop: Header=BB106_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB106_32
.LBB106_24:                             # %.preheader.us37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_25 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	.p2align	4, , 16
.LBB106_25:                             #   Parent Loop BB106_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB106_25
# %bb.26:                               # %.loopexit.us38
                                        #   in Loop: Header=BB106_24 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB106_23
# %bb.27:                               #   in Loop: Header=BB106_24 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB106_23
.LBB106_28:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB106_30
	.p2align	4, , 16
.LBB106_29:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB106_30 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB106_32
.LBB106_30:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB106_29
# %bb.31:                               #   in Loop: Header=BB106_30 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB106_29
.LBB106_32:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB106_34
# %bb.33:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB106_36
.LBB106_34:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB106_37
# %bb.35:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB106_36:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI106_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI106_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB106_37:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end106:
	.size	_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc, .Lfunc_end106-_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc
.LCPI107_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI107_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 112                   # 8-byte Folded Spill
	blt	$a1, $a0, .LBB107_32
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 4
	blt	$s0, $a0, .LBB107_21
# %bb.2:                                # %.preheader25.us.preheader
	move	$s2, $zero
	addi.w	$s4, $s0, -3
	bstrpick.d	$s7, $s4, 31, 0
	sltu	$a2, $a0, $s7
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s7, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	srli.d	$a2, $a0, 2
	bstrins.d	$a0, $zero, 1, 0
	sub.d	$a0, $s0, $a0
	addi.d	$a3, $a0, -4
	addi.d	$a0, $a2, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$fp, $a0, 3
	slli.d	$a0, $a0, 5
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 4
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	st.d	$a3, $sp, 88                    # 8-byte Folded Spill
	bstrins.d	$a3, $zero, 2, 0
	st.d	$a3, $sp, 32                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	addi.d	$a2, $a0, 64
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	ori	$t3, $zero, 29
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -63070
	ori	$s5, $a0, 1760
	lu12i.w	$a0, -277912
	ori	$s1, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	b	.LBB107_4
	.p2align	4, , 16
.LBB107_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB107_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB107_32
.LBB107_4:                              # %.preheader25.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_7 Depth 2
                                        #     Child Loop BB107_10 Depth 2
                                        #     Child Loop BB107_15 Depth 2
                                        #     Child Loop BB107_18 Depth 2
	bgeu	$s4, $t3, .LBB107_6
# %bb.5:                                #   in Loop: Header=BB107_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	ori	$a4, $zero, 4
	b	.LBB107_9
	.p2align	4, , 16
.LBB107_6:                              # %vector.body69.preheader
                                        #   in Loop: Header=BB107_4 Depth=1
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	move	$a2, $fp
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB107_7:                              # %vector.body69
                                        #   Parent Loop BB107_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -64
	ld.w	$a4, $a0, -48
	ld.w	$a5, $a0, -32
	ld.w	$a6, $a0, -16
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 16
	ld.w	$a5, $a0, 32
	ld.w	$a6, $a0, 48
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -60
	ld.w	$a4, $a0, -44
	ld.w	$a5, $a0, -28
	ld.w	$a6, $a0, -12
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 20
	ld.w	$a5, $a0, 36
	ld.w	$a6, $a0, 52
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	ld.w	$a3, $a0, -56
	ld.w	$a4, $a0, -40
	ld.w	$a5, $a0, -24
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr6, $a3, 0
	vinsgr2vr.w	$vr6, $a4, 1
	vinsgr2vr.w	$vr6, $a5, 2
	vinsgr2vr.w	$vr6, $a6, 3
	ld.w	$a3, $a0, 8
	ld.w	$a4, $a0, 24
	ld.w	$a5, $a0, 40
	ld.w	$a6, $a0, 56
	vinsgr2vr.w	$vr7, $a3, 0
	vinsgr2vr.w	$vr7, $a4, 1
	vinsgr2vr.w	$vr7, $a5, 2
	vinsgr2vr.w	$vr7, $a6, 3
	ld.w	$a3, $a0, -52
	ld.w	$a4, $a0, -36
	ld.w	$a5, $a0, -20
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr8, $a3, 0
	vinsgr2vr.w	$vr8, $a4, 1
	vinsgr2vr.w	$vr8, $a5, 2
	vinsgr2vr.w	$vr8, $a6, 3
	ld.w	$a3, $a0, 12
	ld.w	$a4, $a0, 28
	ld.w	$a5, $a0, 44
	ld.w	$a6, $a0, 60
	vinsgr2vr.w	$vr9, $a3, 0
	vinsgr2vr.w	$vr9, $a4, 1
	vinsgr2vr.w	$vr9, $a5, 2
	vinsgr2vr.w	$vr9, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vadd.w	$vr2, $vr2, $vr6
	vadd.w	$vr3, $vr3, $vr7
	vadd.w	$vr2, $vr2, $vr8
	vadd.w	$vr3, $vr3, $vr9
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 128
	bnez	$a2, .LBB107_7
# %bb.8:                                # %middle.block75
                                        #   in Loop: Header=BB107_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	move	$a3, $a2
	ld.d	$a5, $sp, 56                    # 8-byte Folded Reload
	beq	$a5, $fp, .LBB107_11
.LBB107_9:                              # %scalar.ph64.preheader
                                        #   in Loop: Header=BB107_4 Depth=1
	addi.d	$a2, $a4, -4
	ld.d	$a4, $sp, 80                    # 8-byte Folded Reload
	alsl.d	$a4, $a3, $a4, 2
	.p2align	4, , 16
.LBB107_10:                             # %scalar.ph64
                                        #   Parent Loop BB107_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -8
	ld.w	$a6, $a4, -4
	ld.w	$a7, $a4, 0
	ld.w	$t0, $a4, 4
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	mul.d	$a5, $a5, $s3
	add.d	$a0, $a0, $a5
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, 4
	addi.d	$a2, $a2, 4
	addi.d	$a4, $a4, 16
	bltu	$a3, $s7, .LBB107_10
.LBB107_11:                             # %.loopexit26.us
                                        #   in Loop: Header=BB107_4 Depth=1
	addi.w	$a3, $a3, 0
	bge	$a3, $s0, .LBB107_19
# %bb.12:                               # %.preheader.us.preheader
                                        #   in Loop: Header=BB107_4 Depth=1
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bgeu	$a3, $a4, .LBB107_14
# %bb.13:                               #   in Loop: Header=BB107_4 Depth=1
	move	$a3, $a2
	b	.LBB107_17
	.p2align	4, , 16
.LBB107_14:                             # %vector.ph
                                        #   in Loop: Header=BB107_4 Depth=1
	pcalau12i	$a3, %pc_hi20(.LCPI107_0)
	vld	$vr0, $a3, %pc_lo12(.LCPI107_0)
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	add.d	$a3, $a2, $a4
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a4
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB107_15:                             # %vector.body
                                        #   Parent Loop BB107_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB107_15
# %bb.16:                               # %middle.block
                                        #   in Loop: Header=BB107_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	beq	$a2, $a4, .LBB107_19
.LBB107_17:                             # %.preheader.us.preheader81
                                        #   in Loop: Header=BB107_4 Depth=1
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB107_18:                             # %.preheader.us
                                        #   Parent Loop BB107_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s1
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB107_18
.LBB107_19:                             # %.loopexit.us
                                        #   in Loop: Header=BB107_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB107_3
# %bb.20:                               #   in Loop: Header=BB107_4 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t3, $zero, 29
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB107_3
.LBB107_21:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB107_28
# %bb.22:                               # %.preheader.us36.preheader
	lu12i.w	$a0, 65881
	ori	$s1, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB107_24
	.p2align	4, , 16
.LBB107_23:                             # %_Z9check_sumIiEvT_.exit.us35
                                        #   in Loop: Header=BB107_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB107_32
.LBB107_24:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_25 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	.p2align	4, , 16
.LBB107_25:                             #   Parent Loop BB107_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB107_25
# %bb.26:                               # %.loopexit.us37
                                        #   in Loop: Header=BB107_24 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB107_23
# %bb.27:                               #   in Loop: Header=BB107_24 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB107_23
.LBB107_28:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB107_30
	.p2align	4, , 16
.LBB107_29:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB107_30 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB107_32
.LBB107_30:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB107_29
# %bb.31:                               #   in Loop: Header=BB107_30 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB107_29
.LBB107_32:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB107_34
# %bb.33:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB107_36
.LBB107_34:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB107_37
# %bb.35:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB107_36:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI107_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI107_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB107_37:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end107:
	.size	_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc, .Lfunc_end107-_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc
.LCPI108_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI108_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 112                   # 8-byte Folded Spill
	blt	$a1, $a0, .LBB108_32
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 3
	blt	$s0, $a0, .LBB108_21
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s4, $s0, -2
	bstrpick.d	$s7, $s4, 31, 0
	sltu	$a2, $a0, $s7
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s7, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -349526
	ori	$a2, $a2, 2731
	lu32i.d	$a2, -349526
	lu52i.d	$a2, $a2, -1366
	mulh.du	$a0, $a0, $a2
	srli.d	$a2, $a0, 1
	addi.w	$a3, $zero, -2
	and	$a0, $a0, $a3
	add.d	$a0, $a0, $a2
	sub.d	$a0, $s0, $a0
	addi.d	$a3, $a0, -3
	addi.d	$a0, $a2, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$fp, $a0, 3
	slli.d	$a2, $a0, 4
	alsl.d	$a0, $a0, $a2, 3
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 3
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	st.d	$a3, $sp, 88                    # 8-byte Folded Spill
	bstrins.d	$a3, $zero, 2, 0
	st.d	$a3, $sp, 32                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	addi.d	$a2, $a0, 48
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	ori	$t2, $zero, 22
	lu12i.w	$a0, 65881
	ori	$s1, $a0, 1957
	lu12i.w	$a0, 214841
	ori	$s3, $a0, 3368
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	b	.LBB108_4
	.p2align	4, , 16
.LBB108_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB108_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB108_32
.LBB108_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_7 Depth 2
                                        #     Child Loop BB108_10 Depth 2
                                        #     Child Loop BB108_15 Depth 2
                                        #     Child Loop BB108_18 Depth 2
	bgeu	$s4, $t2, .LBB108_6
# %bb.5:                                #   in Loop: Header=BB108_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	ori	$a4, $zero, 3
	b	.LBB108_9
	.p2align	4, , 16
.LBB108_6:                              # %vector.body68.preheader
                                        #   in Loop: Header=BB108_4 Depth=1
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	move	$a2, $fp
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB108_7:                              # %vector.body68
                                        #   Parent Loop BB108_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -48
	ld.w	$a4, $a0, -36
	ld.w	$a5, $a0, -24
	ld.w	$a6, $a0, -12
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 12
	ld.w	$a5, $a0, 24
	ld.w	$a6, $a0, 36
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -44
	ld.w	$a4, $a0, -32
	ld.w	$a5, $a0, -20
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 16
	ld.w	$a5, $a0, 28
	ld.w	$a6, $a0, 40
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	ld.w	$a3, $a0, -40
	ld.w	$a4, $a0, -28
	ld.w	$a5, $a0, -16
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr6, $a3, 0
	vinsgr2vr.w	$vr6, $a4, 1
	vinsgr2vr.w	$vr6, $a5, 2
	vinsgr2vr.w	$vr6, $a6, 3
	ld.w	$a3, $a0, 8
	ld.w	$a4, $a0, 20
	ld.w	$a5, $a0, 32
	ld.w	$a6, $a0, 44
	vinsgr2vr.w	$vr7, $a3, 0
	vinsgr2vr.w	$vr7, $a4, 1
	vinsgr2vr.w	$vr7, $a5, 2
	vinsgr2vr.w	$vr7, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vadd.w	$vr2, $vr2, $vr6
	vadd.w	$vr3, $vr3, $vr7
	vreplgr2vr.w	$vr4, $s1
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s3
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 96
	bnez	$a2, .LBB108_7
# %bb.8:                                # %middle.block74
                                        #   in Loop: Header=BB108_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	move	$a3, $a2
	ld.d	$a5, $sp, 56                    # 8-byte Folded Reload
	beq	$a5, $fp, .LBB108_11
.LBB108_9:                              # %scalar.ph63.preheader
                                        #   in Loop: Header=BB108_4 Depth=1
	addi.d	$a2, $a4, -3
	ld.d	$a4, $sp, 80                    # 8-byte Folded Reload
	alsl.d	$a4, $a3, $a4, 2
	.p2align	4, , 16
.LBB108_10:                             # %scalar.ph63
                                        #   Parent Loop BB108_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -8
	ld.w	$a6, $a4, -4
	ld.w	$a7, $a4, 0
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	mul.d	$a5, $a5, $s1
	add.d	$a0, $a0, $a5
	add.w	$a0, $a0, $s3
	addi.d	$a3, $a3, 3
	addi.d	$a2, $a2, 3
	addi.d	$a4, $a4, 12
	bltu	$a3, $s7, .LBB108_10
.LBB108_11:                             # %.loopexit25.us
                                        #   in Loop: Header=BB108_4 Depth=1
	addi.w	$a3, $a3, 0
	bge	$a3, $s0, .LBB108_19
# %bb.12:                               # %.preheader.us.preheader
                                        #   in Loop: Header=BB108_4 Depth=1
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bgeu	$a3, $a4, .LBB108_14
# %bb.13:                               #   in Loop: Header=BB108_4 Depth=1
	move	$a3, $a2
	b	.LBB108_17
	.p2align	4, , 16
.LBB108_14:                             # %vector.ph
                                        #   in Loop: Header=BB108_4 Depth=1
	pcalau12i	$a3, %pc_hi20(.LCPI108_0)
	vld	$vr0, $a3, %pc_lo12(.LCPI108_0)
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	add.d	$a3, $a2, $a4
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a4
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB108_15:                             # %vector.body
                                        #   Parent Loop BB108_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s1
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB108_15
# %bb.16:                               # %middle.block
                                        #   in Loop: Header=BB108_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	beq	$a2, $a4, .LBB108_19
.LBB108_17:                             # %.preheader.us.preheader80
                                        #   in Loop: Header=BB108_4 Depth=1
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB108_18:                             # %.preheader.us
                                        #   Parent Loop BB108_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB108_18
.LBB108_19:                             # %.loopexit.us
                                        #   in Loop: Header=BB108_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB108_3
# %bb.20:                               #   in Loop: Header=BB108_4 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 22
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB108_3
.LBB108_21:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB108_28
# %bb.22:                               # %.preheader.us35.preheader
	lu12i.w	$a0, 65881
	ori	$s1, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB108_24
	.p2align	4, , 16
.LBB108_23:                             # %_Z9check_sumIiEvT_.exit.us34
                                        #   in Loop: Header=BB108_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB108_32
.LBB108_24:                             # %.preheader.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_25 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	.p2align	4, , 16
.LBB108_25:                             #   Parent Loop BB108_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB108_25
# %bb.26:                               # %.loopexit.us36
                                        #   in Loop: Header=BB108_24 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB108_23
# %bb.27:                               #   in Loop: Header=BB108_24 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB108_23
.LBB108_28:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB108_30
	.p2align	4, , 16
.LBB108_29:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB108_30 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB108_32
.LBB108_30:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB108_29
# %bb.31:                               #   in Loop: Header=BB108_30 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB108_29
.LBB108_32:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB108_34
# %bb.33:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB108_36
.LBB108_34:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB108_37
# %bb.35:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB108_36:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI108_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI108_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB108_37:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end108:
	.size	_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc, .Lfunc_end108-_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc
.LCPI109_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI109_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s1, $a1
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 112                   # 8-byte Folded Spill
	blt	$a1, $a0, .LBB109_30
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 2
	blt	$s1, $a0, .LBB109_21
# %bb.2:                                # %.preheader23.us.preheader
	move	$s5, $zero
	addi.d	$a2, $s1, -1
	bstrpick.d	$s6, $a2, 31, 0
	sltu	$a2, $a0, $s6
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s6, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	srli.d	$a2, $a0, 1
	bstrins.d	$a0, $zero, 0, 0
	sub.d	$a0, $s1, $a0
	addi.d	$a3, $a0, -2
	addi.d	$a0, $a2, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$fp, $a0, 3
	slli.d	$s3, $a0, 4
	addi.d	$a0, $s3, 2
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	st.d	$a3, $sp, 88                    # 8-byte Folded Spill
	bstrins.d	$a3, $zero, 2, 0
	st.d	$a3, $sp, 40                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 32
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 4
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	ori	$a7, $zero, 16
	lu12i.w	$a0, 65881
	ori	$s2, $a0, 1957
	lu12i.w	$a0, 492753
	ori	$s4, $a0, 880
	lu12i.w	$a0, -277912
	ori	$s0, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	b	.LBB109_4
	.p2align	4, , 16
.LBB109_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB109_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB109_30
.LBB109_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_7 Depth 2
                                        #     Child Loop BB109_10 Depth 2
                                        #     Child Loop BB109_15 Depth 2
                                        #     Child Loop BB109_18 Depth 2
	bgeu	$s1, $a7, .LBB109_6
# %bb.5:                                #   in Loop: Header=BB109_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	ori	$a4, $zero, 2
	b	.LBB109_9
	.p2align	4, , 16
.LBB109_6:                              # %vector.body65.preheader
                                        #   in Loop: Header=BB109_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $fp
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB109_7:                              # %vector.body65
                                        #   Parent Loop BB109_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -32
	ld.w	$a4, $a0, -24
	ld.w	$a5, $a0, -16
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 8
	ld.w	$a5, $a0, 16
	ld.w	$a6, $a0, 24
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -28
	ld.w	$a4, $a0, -20
	ld.w	$a5, $a0, -12
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 12
	ld.w	$a5, $a0, 20
	ld.w	$a6, $a0, 28
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vreplgr2vr.w	$vr4, $s2
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 64
	bnez	$a2, .LBB109_7
# %bb.8:                                # %middle.block71
                                        #   in Loop: Header=BB109_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	move	$a3, $s3
	move	$a2, $s3
	ld.d	$a5, $sp, 56                    # 8-byte Folded Reload
	beq	$a5, $fp, .LBB109_11
.LBB109_9:                              # %scalar.ph60.preheader
                                        #   in Loop: Header=BB109_4 Depth=1
	addi.d	$a2, $a4, -2
	ld.d	$a4, $sp, 80                    # 8-byte Folded Reload
	alsl.d	$a4, $a3, $a4, 2
	.p2align	4, , 16
.LBB109_10:                             # %scalar.ph60
                                        #   Parent Loop BB109_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -4
	ld.w	$a6, $a4, 0
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s2
	add.d	$a0, $a0, $a5
	add.w	$a0, $a0, $s4
	addi.d	$a3, $a3, 2
	addi.d	$a2, $a2, 2
	addi.d	$a4, $a4, 8
	bltu	$a3, $s6, .LBB109_10
.LBB109_11:                             # %.loopexit24.us
                                        #   in Loop: Header=BB109_4 Depth=1
	addi.w	$a3, $a3, 0
	bge	$a3, $s1, .LBB109_19
# %bb.12:                               # %.preheader.us.preheader
                                        #   in Loop: Header=BB109_4 Depth=1
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bgeu	$a3, $a4, .LBB109_14
# %bb.13:                               #   in Loop: Header=BB109_4 Depth=1
	move	$a3, $a2
	b	.LBB109_17
	.p2align	4, , 16
.LBB109_14:                             # %vector.ph
                                        #   in Loop: Header=BB109_4 Depth=1
	pcalau12i	$a3, %pc_hi20(.LCPI109_0)
	vld	$vr0, $a3, %pc_lo12(.LCPI109_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a3, $a2, $a4
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a4
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB109_15:                             # %vector.body
                                        #   Parent Loop BB109_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s2
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s0
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB109_15
# %bb.16:                               # %middle.block
                                        #   in Loop: Header=BB109_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a2, $a4, .LBB109_19
.LBB109_17:                             # %.preheader.us.preheader77
                                        #   in Loop: Header=BB109_4 Depth=1
	ld.d	$a2, $sp, 96                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB109_18:                             # %.preheader.us
                                        #   Parent Loop BB109_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s2
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB109_18
.LBB109_19:                             # %.loopexit.us
                                        #   in Loop: Header=BB109_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB109_3
# %bb.20:                               #   in Loop: Header=BB109_4 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 16
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB109_3
.LBB109_21:                             # %.lr.ph.split
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ori	$a0, $zero, 1
	bne	$s1, $a0, .LBB109_26
# %bb.22:                               # %.preheader.us34.preheader
	move	$s0, $zero
	lu12i.w	$a0, 65881
	ori	$s2, $a0, 1957
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -32110
	ori	$s4, $a0, 3144
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB109_24
	.p2align	4, , 16
.LBB109_23:                             # %_Z9check_sumIiEvT_.exit.us33
                                        #   in Loop: Header=BB109_24 Depth=1
	addi.w	$s0, $s0, 1
	bge	$s0, $a1, .LBB109_30
.LBB109_24:                             # %.preheader.us34
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a0, $a0, 0
	mul.w	$a0, $a0, $s2
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a2, $fa1
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB109_23
# %bb.25:                               #   in Loop: Header=BB109_24 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB109_23
.LBB109_26:                             # %.lr.ph.split.split.preheader
	move	$s1, $zero
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB109_28
	.p2align	4, , 16
.LBB109_27:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB109_28 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB109_30
.LBB109_28:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB109_27
# %bb.29:                               #   in Loop: Header=BB109_28 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB109_27
.LBB109_30:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB109_32
# %bb.31:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB109_34
.LBB109_32:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB109_35
# %bb.33:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB109_34:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI109_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI109_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB109_35:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end109:
	.size	_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc, .Lfunc_end109-_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc
.LCPI110_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB110_17
# %bb.1:                                # %.lr.ph
	blez	$s0, .LBB110_13
# %bb.2:                                # %.preheader23.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	pcalau12i	$fp, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s5, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s4
	vreplgr2vr.w	$vr5, $s3
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB110_4
	.p2align	4, , 16
.LBB110_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB110_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB110_17
.LBB110_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_7 Depth 2
                                        #     Child Loop BB110_10 Depth 2
	bgeu	$s0, $a5, .LBB110_6
# %bb.5:                                #   in Loop: Header=BB110_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB110_9
	.p2align	4, , 16
.LBB110_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB110_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB110_7:                              # %vector.body
                                        #   Parent Loop BB110_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB110_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB110_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB110_11
.LBB110_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB110_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB110_10:                             # %scalar.ph
                                        #   Parent Loop BB110_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB110_10
.LBB110_11:                             # %.loopexit.us
                                        #   in Loop: Header=BB110_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.w	$a2, $a2, $s5
	beq	$a0, $a2, .LBB110_3
# %bb.12:                               #   in Loop: Header=BB110_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB110_3
.LBB110_13:                             # %.lr.ph.split.split.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB110_15
	.p2align	4, , 16
.LBB110_14:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB110_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB110_17
.LBB110_15:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB110_14
# %bb.16:                               #   in Loop: Header=BB110_15 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB110_14
.LBB110_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB110_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB110_21
.LBB110_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB110_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB110_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 0                     # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI110_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI110_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB110_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end110:
	.size	_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc, .Lfunc_end110-_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc
.LCPI111_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI111_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 88                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB111_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 32
	blt	$s0, $a0, .LBB111_15
# %bb.2:                                # %.preheader54.us.preheader
	move	$s2, $zero
	addi.d	$a1, $s0, -31
	bstrpick.d	$s6, $a1, 31, 0
	addi.d	$a1, $s0, -32
	sltu	$a2, $a0, $s6
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s6, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	addi.w	$a2, $zero, -32
	and	$a0, $a0, $a2
	sub.d	$a2, $a1, $a0
	andi	$a3, $s0, 7
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	sub.d	$a2, $a2, $a3
	st.d	$a2, $sp, 48                    # 8-byte Folded Spill
	addi.d	$s4, $s1, 144
	st.d	$a3, $sp, 64                    # 8-byte Folded Spill
	sub.d	$a1, $a1, $a3
	sub.d	$a0, $a1, $a0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -504557
	ori	$s8, $a0, 1792
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s5, $a0, 1536
	b	.LBB111_4
	.p2align	4, , 16
.LBB111_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB111_4 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB111_31
.LBB111_4:                              # %.preheader54.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_5 Depth 2
                                        #     Child Loop BB111_9 Depth 2
                                        #     Child Loop BB111_12 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	ori	$a2, $zero, 32
	move	$a3, $s4
	.p2align	4, , 16
.LBB111_5:                              #   Parent Loop BB111_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a4, $a1, $s1, 2
	slli.d	$a5, $a1, 2
	ldx.w	$a5, $s1, $a5
	ld.w	$a6, $a4, 4
	ld.w	$a7, $a4, 8
	ld.w	$t0, $a4, 12
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, 16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 36
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 40
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 44
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 48
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 52
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 56
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 60
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 64
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 68
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 72
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 76
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 80
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 84
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 88
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 92
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 96
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 100
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 104
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 108
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 112
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 116
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 120
	ld.w	$t1, $a4, 124
	add.d	$a4, $a5, $a6
	add.d	$a4, $a4, $a7
	add.d	$a6, $a4, $t0
	move	$a4, $a2
	move	$a5, $a3
	add.d	$a2, $a6, $t1
	mul.d	$a2, $a2, $fp
	add.d	$a0, $a0, $a2
	add.w	$a0, $a0, $s8
	addi.d	$a1, $a1, 32
	addi.d	$a2, $a4, 32
	addi.d	$a3, $a3, 128
	bltu	$a1, $s6, .LBB111_5
# %bb.6:                                # %.loopexit55.us
                                        #   in Loop: Header=BB111_4 Depth=1
	addi.w	$a1, $a1, 0
	bge	$a1, $s0, .LBB111_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB111_4 Depth=1
	ld.d	$a1, $sp, 80                    # 8-byte Folded Reload
	ori	$a2, $zero, 8
	bltu	$a1, $a2, .LBB111_11
# %bb.8:                                # %vector.ph94
                                        #   in Loop: Header=BB111_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI111_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI111_0)
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	add.d	$a4, $a4, $a1
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB111_9:                              # %vector.body97
                                        #   Parent Loop BB111_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a5, -16
	vld	$vr3, $a5, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s7
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a5, $a5, 32
	bnez	$a0, .LBB111_9
# %bb.10:                               # %middle.block104
                                        #   in Loop: Header=BB111_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	beqz	$a1, .LBB111_13
.LBB111_11:                             # %.preheader.us.preheader109
                                        #   in Loop: Header=BB111_4 Depth=1
	alsl.d	$a1, $a4, $s1, 2
	sub.d	$a2, $s0, $a4
	.p2align	4, , 16
.LBB111_12:                             # %.preheader.us
                                        #   Parent Loop BB111_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a1, 0
	mul.d	$a3, $a3, $fp
	add.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s7
	addi.d	$a2, $a2, -1
	addi.d	$a1, $a1, 4
	bnez	$a2, .LBB111_12
.LBB111_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB111_4 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s3
	add.w	$a1, $a1, $s5
	beq	$a0, $a1, .LBB111_3
# %bb.14:                               #   in Loop: Header=BB111_4 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	b	.LBB111_3
.LBB111_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB111_27
# %bb.16:                               # %.preheader.us65.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	vst	$vr5, $sp, 32                   # 16-byte Folded Spill
	b	.LBB111_18
	.p2align	4, , 16
.LBB111_17:                             # %_Z9check_sumIiEvT_.exit.us64
                                        #   in Loop: Header=BB111_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB111_31
.LBB111_18:                             # %.preheader.us65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_21 Depth 2
                                        #     Child Loop BB111_24 Depth 2
	bgeu	$s0, $a5, .LBB111_20
# %bb.19:                               #   in Loop: Header=BB111_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB111_23
	.p2align	4, , 16
.LBB111_20:                             # %vector.body.preheader
                                        #   in Loop: Header=BB111_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB111_21:                             # %vector.body
                                        #   Parent Loop BB111_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB111_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB111_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB111_25
.LBB111_23:                             # %scalar.ph.preheader
                                        #   in Loop: Header=BB111_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB111_24:                             # %scalar.ph
                                        #   Parent Loop BB111_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB111_24
.LBB111_25:                             # %.loopexit.us66
                                        #   in Loop: Header=BB111_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB111_17
# %bb.26:                               #   in Loop: Header=BB111_18 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 32                   # 16-byte Folded Reload
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB111_17
.LBB111_27:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB111_29
	.p2align	4, , 16
.LBB111_28:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB111_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB111_31
.LBB111_29:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB111_28
# %bb.30:                               #   in Loop: Header=BB111_29 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB111_28
.LBB111_31:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 88                    # 8-byte Folded Reload
	beqz	$a2, .LBB111_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB111_35
.LBB111_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB111_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB111_35:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI111_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI111_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB111_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end111:
	.size	_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc, .Lfunc_end111-_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc
.LCPI112_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI112_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 80                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 72                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB112_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 31
	blt	$s0, $a0, .LBB112_15
# %bb.2:                                # %.preheader53.us.preheader
	addi.d	$a1, $s0, -30
	bstrpick.d	$s2, $a1, 31, 0
	sltu	$a1, $a0, $s2
	masknez	$a0, $a0, $a1
	maskeqz	$a1, $s2, $a1
	or	$a0, $a1, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a1, 135300
	ori	$a1, $a1, 529
	lu32i.d	$a1, 135300
	lu52i.d	$a1, $a1, 132
	mulh.du	$a1, $a0, $a1
	sub.d	$a0, $a0, $a1
	srli.d	$a0, $a0, 1
	add.d	$a0, $a0, $a1
	srli.d	$a0, $a0, 4
	slli.d	$a1, $a0, 5
	sub.d	$a0, $a0, $a1
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -31
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 140
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -226646
	ori	$s3, $a0, 3400
	lu12i.w	$a0, -277912
	ori	$s6, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s5, $a0, 1536
	b	.LBB112_4
	.p2align	4, , 16
.LBB112_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB112_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB112_31
.LBB112_4:                              # %.preheader53.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_5 Depth 2
                                        #     Child Loop BB112_9 Depth 2
                                        #     Child Loop BB112_12 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	ori	$a2, $zero, 31
	move	$a3, $fp
	.p2align	4, , 16
.LBB112_5:                              #   Parent Loop BB112_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a4, $a1, $s1, 2
	slli.d	$a5, $a1, 2
	ldx.w	$a5, $s1, $a5
	ld.w	$a6, $a4, 4
	ld.w	$a7, $a4, 8
	ld.w	$t0, $a4, 12
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, 16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 36
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 40
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 44
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 48
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 52
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 56
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 60
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 64
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 68
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 72
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 76
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 80
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 84
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 88
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 92
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 96
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 100
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 104
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 108
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 112
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 116
	ld.w	$t1, $a4, 120
	add.d	$a4, $a5, $t0
	add.d	$a4, $a4, $a6
	add.d	$a6, $a4, $a7
	move	$a4, $a2
	move	$a5, $a3
	add.d	$a2, $a6, $t1
	mul.d	$a2, $a2, $s4
	add.d	$a0, $a0, $a2
	add.w	$a0, $a0, $s3
	addi.d	$a1, $a1, 31
	addi.d	$a2, $a4, 31
	addi.d	$a3, $a3, 124
	bltu	$a1, $s2, .LBB112_5
# %bb.6:                                # %.loopexit54.us
                                        #   in Loop: Header=BB112_4 Depth=1
	addi.w	$a1, $a1, 0
	bge	$a1, $s0, .LBB112_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB112_4 Depth=1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	ori	$a2, $zero, 8
	bltu	$a1, $a2, .LBB112_11
# %bb.8:                                # %vector.ph93
                                        #   in Loop: Header=BB112_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI112_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI112_0)
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	add.d	$a4, $a4, $a1
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a1
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB112_9:                              # %vector.body96
                                        #   Parent Loop BB112_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a5, -16
	vld	$vr3, $a5, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s6
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a5, $a5, 32
	bnez	$a0, .LBB112_9
# %bb.10:                               # %middle.block103
                                        #   in Loop: Header=BB112_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	beq	$a1, $a2, .LBB112_13
.LBB112_11:                             # %.preheader.us.preheader108
                                        #   in Loop: Header=BB112_4 Depth=1
	alsl.d	$a1, $a4, $s1, 2
	sub.d	$a2, $s0, $a4
	.p2align	4, , 16
.LBB112_12:                             # %.preheader.us
                                        #   Parent Loop BB112_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a1, 0
	mul.d	$a3, $a3, $s4
	add.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s6
	addi.d	$a2, $a2, -1
	addi.d	$a1, $a1, 4
	bnez	$a2, .LBB112_12
.LBB112_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB112_4 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s8
	add.w	$a1, $a1, $s5
	beq	$a0, $a1, .LBB112_3
# %bb.14:                               #   in Loop: Header=BB112_4 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	b	.LBB112_3
.LBB112_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB112_27
# %bb.16:                               # %.preheader.us64.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB112_18
	.p2align	4, , 16
.LBB112_17:                             # %_Z9check_sumIiEvT_.exit.us63
                                        #   in Loop: Header=BB112_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB112_31
.LBB112_18:                             # %.preheader.us64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_21 Depth 2
                                        #     Child Loop BB112_24 Depth 2
	bgeu	$s0, $a5, .LBB112_20
# %bb.19:                               #   in Loop: Header=BB112_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB112_23
	.p2align	4, , 16
.LBB112_20:                             # %vector.body.preheader
                                        #   in Loop: Header=BB112_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB112_21:                             # %vector.body
                                        #   Parent Loop BB112_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB112_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB112_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB112_25
.LBB112_23:                             # %scalar.ph.preheader
                                        #   in Loop: Header=BB112_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB112_24:                             # %scalar.ph
                                        #   Parent Loop BB112_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB112_24
.LBB112_25:                             # %.loopexit.us65
                                        #   in Loop: Header=BB112_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB112_17
# %bb.26:                               #   in Loop: Header=BB112_18 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB112_17
.LBB112_27:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB112_29
	.p2align	4, , 16
.LBB112_28:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB112_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB112_31
.LBB112_29:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB112_28
# %bb.30:                               #   in Loop: Header=BB112_29 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB112_28
.LBB112_31:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 72                    # 8-byte Folded Reload
	beqz	$a2, .LBB112_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB112_35
.LBB112_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB112_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB112_35:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI112_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI112_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB112_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end112:
	.size	_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc, .Lfunc_end112-_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc
.LCPI113_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI113_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB113_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 30
	blt	$s0, $a0, .LBB113_15
# %bb.2:                                # %.preheader52.us.preheader
	addi.d	$a2, $s0, -29
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -489336
	ori	$a3, $a3, 2185
	lu32i.d	$a3, -489336
	lu52i.d	$a3, $a3, -1912
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 4
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -30
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 136
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 51266
	ori	$s3, $a0, 912
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB113_4
	.p2align	4, , 16
.LBB113_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB113_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB113_31
.LBB113_4:                              # %.preheader52.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_5 Depth 2
                                        #     Child Loop BB113_9 Depth 2
                                        #     Child Loop BB113_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a3, $zero, 30
	move	$a4, $fp
	.p2align	4, , 16
.LBB113_5:                              #   Parent Loop BB113_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a5, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a5, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 92
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 96
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 100
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 104
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 108
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 112
	ld.w	$t2, $a5, 116
	add.d	$a5, $a6, $t0
	add.d	$a5, $a5, $t1
	add.d	$a7, $a5, $a7
	move	$a5, $a3
	move	$a6, $a4
	add.d	$a3, $a7, $t2
	mul.d	$a3, $a3, $s4
	add.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 30
	addi.d	$a3, $a5, 30
	addi.d	$a4, $a4, 120
	bltu	$a2, $s2, .LBB113_5
# %bb.6:                                # %.loopexit53.us
                                        #   in Loop: Header=BB113_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB113_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB113_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a3, $zero, 8
	bltu	$a2, $a3, .LBB113_11
# %bb.8:                                # %vector.ph93
                                        #   in Loop: Header=BB113_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI113_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI113_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a5, $a5, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB113_9:                              # %vector.body96
                                        #   Parent Loop BB113_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB113_9
# %bb.10:                               # %middle.block103
                                        #   in Loop: Header=BB113_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a3, .LBB113_13
.LBB113_11:                             # %.preheader.us.preheader108
                                        #   in Loop: Header=BB113_4 Depth=1
	alsl.d	$a2, $a5, $s1, 2
	sub.d	$a3, $s0, $a5
	.p2align	4, , 16
.LBB113_12:                             # %.preheader.us
                                        #   Parent Loop BB113_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB113_12
.LBB113_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB113_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB113_3
# %bb.14:                               #   in Loop: Header=BB113_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB113_3
.LBB113_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB113_27
# %bb.16:                               # %.preheader.us63.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB113_18
	.p2align	4, , 16
.LBB113_17:                             # %_Z9check_sumIiEvT_.exit.us62
                                        #   in Loop: Header=BB113_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB113_31
.LBB113_18:                             # %.preheader.us63
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_21 Depth 2
                                        #     Child Loop BB113_24 Depth 2
	bgeu	$s0, $a5, .LBB113_20
# %bb.19:                               #   in Loop: Header=BB113_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB113_23
	.p2align	4, , 16
.LBB113_20:                             # %vector.body.preheader
                                        #   in Loop: Header=BB113_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB113_21:                             # %vector.body
                                        #   Parent Loop BB113_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB113_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB113_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB113_25
.LBB113_23:                             # %scalar.ph.preheader
                                        #   in Loop: Header=BB113_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB113_24:                             # %scalar.ph
                                        #   Parent Loop BB113_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB113_24
.LBB113_25:                             # %.loopexit.us64
                                        #   in Loop: Header=BB113_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB113_17
# %bb.26:                               #   in Loop: Header=BB113_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB113_17
.LBB113_27:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB113_29
	.p2align	4, , 16
.LBB113_28:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB113_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB113_31
.LBB113_29:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB113_28
# %bb.30:                               #   in Loop: Header=BB113_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB113_28
.LBB113_31:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB113_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB113_35
.LBB113_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB113_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB113_35:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI113_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI113_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB113_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end113:
	.size	_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc, .Lfunc_end113-_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN15goto_loop_testsILi28EiE7do_testEPKiPKc,"axG",@progbits,_ZN15goto_loop_testsILi28EiE7do_testEPKiPKc,comdat
	.weak	_ZN15goto_loop_testsILi28EiE7do_testEPKiPKc # -- Begin function _ZN15goto_loop_testsILi28EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN15goto_loop_testsILi28EiE7do_testEPKiPKc,@function
_ZN15goto_loop_testsILi28EiE7do_testEPKiPKc: # @_ZN15goto_loop_testsILi28EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN15goto_loop_testsILi19EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1900
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 2000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s1, $s1, 2047
	addi.d	$a2, $s1, 53
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 153
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 253
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 353
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 453
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 553
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 653
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end114:
	.size	_ZN15goto_loop_testsILi28EiE7do_testEPKiPKc, .Lfunc_end114-_ZN15goto_loop_testsILi28EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc
.LCPI115_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI115_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB115_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 29
	blt	$s0, $a0, .LBB115_15
# %bb.2:                                # %.preheader51.us.preheader
	addi.d	$a2, $s0, -28
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -361578
	ori	$a3, $a3, 283
	lu32i.d	$a3, -289263
	lu52i.d	$a3, $a3, 423
	mulh.du	$a3, $a2, $a3
	sub.d	$a4, $a2, $a3
	srli.d	$a4, $a4, 1
	add.d	$a3, $a4, $a3
	srli.d	$a3, $a3, 4
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -29
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 132
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 329177
	ori	$s3, $a0, 2520
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB115_4
	.p2align	4, , 16
.LBB115_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB115_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB115_31
.LBB115_4:                              # %.preheader51.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_5 Depth 2
                                        #     Child Loop BB115_9 Depth 2
                                        #     Child Loop BB115_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a3, $zero, 29
	move	$a4, $fp
	.p2align	4, , 16
.LBB115_5:                              #   Parent Loop BB115_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a5, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a5, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 92
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 96
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 100
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 104
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 108
	ld.w	$t2, $a5, 112
	add.d	$a5, $a6, $a7
	add.d	$a5, $a5, $t0
	add.d	$a7, $a5, $t1
	move	$a5, $a3
	move	$a6, $a4
	add.d	$a3, $a7, $t2
	mul.d	$a3, $a3, $s4
	add.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 29
	addi.d	$a3, $a5, 29
	addi.d	$a4, $a4, 116
	bltu	$a2, $s2, .LBB115_5
# %bb.6:                                # %.loopexit52.us
                                        #   in Loop: Header=BB115_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB115_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB115_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a3, $zero, 8
	bltu	$a2, $a3, .LBB115_11
# %bb.8:                                # %vector.ph92
                                        #   in Loop: Header=BB115_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI115_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI115_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a5, $a5, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB115_9:                              # %vector.body95
                                        #   Parent Loop BB115_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB115_9
# %bb.10:                               # %middle.block102
                                        #   in Loop: Header=BB115_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a3, .LBB115_13
.LBB115_11:                             # %.preheader.us.preheader107
                                        #   in Loop: Header=BB115_4 Depth=1
	alsl.d	$a2, $a5, $s1, 2
	sub.d	$a3, $s0, $a5
	.p2align	4, , 16
.LBB115_12:                             # %.preheader.us
                                        #   Parent Loop BB115_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB115_12
.LBB115_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB115_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB115_3
# %bb.14:                               #   in Loop: Header=BB115_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB115_3
.LBB115_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB115_27
# %bb.16:                               # %.preheader.us62.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB115_18
	.p2align	4, , 16
.LBB115_17:                             # %_Z9check_sumIiEvT_.exit.us61
                                        #   in Loop: Header=BB115_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB115_31
.LBB115_18:                             # %.preheader.us62
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_21 Depth 2
                                        #     Child Loop BB115_24 Depth 2
	bgeu	$s0, $a5, .LBB115_20
# %bb.19:                               #   in Loop: Header=BB115_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB115_23
	.p2align	4, , 16
.LBB115_20:                             # %vector.body.preheader
                                        #   in Loop: Header=BB115_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB115_21:                             # %vector.body
                                        #   Parent Loop BB115_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB115_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB115_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB115_25
.LBB115_23:                             # %scalar.ph.preheader
                                        #   in Loop: Header=BB115_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB115_24:                             # %scalar.ph
                                        #   Parent Loop BB115_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB115_24
.LBB115_25:                             # %.loopexit.us63
                                        #   in Loop: Header=BB115_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB115_17
# %bb.26:                               #   in Loop: Header=BB115_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB115_17
.LBB115_27:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB115_29
	.p2align	4, , 16
.LBB115_28:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB115_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB115_31
.LBB115_29:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB115_28
# %bb.30:                               #   in Loop: Header=BB115_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB115_28
.LBB115_31:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB115_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB115_35
.LBB115_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB115_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB115_35:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI115_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI115_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB115_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end115:
	.size	_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc, .Lfunc_end115-_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc
.LCPI116_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI116_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB116_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 28
	blt	$s0, $a0, .LBB116_15
# %bb.2:                                # %.preheader50.us.preheader
	addi.d	$a2, $s0, -27
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	srli.d	$a3, $a2, 2
	lu12i.w	$a4, 149796
	ori	$a4, $a4, 2341
	lu32i.d	$a4, 299593
	lu52i.d	$a4, $a4, 1170
	mulh.du	$a3, $a3, $a4
	srli.d	$a3, $a3, 1
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -28
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 128
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -441487
	ori	$s3, $a0, 32
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB116_4
	.p2align	4, , 16
.LBB116_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB116_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB116_31
.LBB116_4:                              # %.preheader50.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_5 Depth 2
                                        #     Child Loop BB116_9 Depth 2
                                        #     Child Loop BB116_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a3, $zero, 28
	move	$a4, $fp
	.p2align	4, , 16
.LBB116_5:                              #   Parent Loop BB116_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a5, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a5, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 92
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 96
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 100
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 104
	ld.w	$t2, $a5, 108
	add.d	$a5, $a6, $t1
	add.d	$a5, $a5, $a7
	add.d	$a7, $a5, $t0
	move	$a5, $a3
	move	$a6, $a4
	add.d	$a3, $a7, $t2
	mul.d	$a3, $a3, $s4
	add.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 28
	addi.d	$a3, $a5, 28
	addi.d	$a4, $a4, 112
	bltu	$a2, $s2, .LBB116_5
# %bb.6:                                # %.loopexit51.us
                                        #   in Loop: Header=BB116_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB116_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB116_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a3, $zero, 8
	bltu	$a2, $a3, .LBB116_11
# %bb.8:                                # %vector.ph91
                                        #   in Loop: Header=BB116_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI116_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI116_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a5, $a5, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB116_9:                              # %vector.body94
                                        #   Parent Loop BB116_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB116_9
# %bb.10:                               # %middle.block101
                                        #   in Loop: Header=BB116_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a3, .LBB116_13
.LBB116_11:                             # %.preheader.us.preheader106
                                        #   in Loop: Header=BB116_4 Depth=1
	alsl.d	$a2, $a5, $s1, 2
	sub.d	$a3, $s0, $a5
	.p2align	4, , 16
.LBB116_12:                             # %.preheader.us
                                        #   Parent Loop BB116_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB116_12
.LBB116_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB116_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB116_3
# %bb.14:                               #   in Loop: Header=BB116_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB116_3
.LBB116_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB116_27
# %bb.16:                               # %.preheader.us61.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB116_18
	.p2align	4, , 16
.LBB116_17:                             # %_Z9check_sumIiEvT_.exit.us60
                                        #   in Loop: Header=BB116_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB116_31
.LBB116_18:                             # %.preheader.us61
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_21 Depth 2
                                        #     Child Loop BB116_24 Depth 2
	bgeu	$s0, $a5, .LBB116_20
# %bb.19:                               #   in Loop: Header=BB116_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB116_23
	.p2align	4, , 16
.LBB116_20:                             # %vector.body.preheader
                                        #   in Loop: Header=BB116_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB116_21:                             # %vector.body
                                        #   Parent Loop BB116_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB116_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB116_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB116_25
.LBB116_23:                             # %scalar.ph.preheader
                                        #   in Loop: Header=BB116_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB116_24:                             # %scalar.ph
                                        #   Parent Loop BB116_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB116_24
.LBB116_25:                             # %.loopexit.us62
                                        #   in Loop: Header=BB116_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB116_17
# %bb.26:                               #   in Loop: Header=BB116_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB116_17
.LBB116_27:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB116_29
	.p2align	4, , 16
.LBB116_28:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB116_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB116_31
.LBB116_29:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB116_28
# %bb.30:                               #   in Loop: Header=BB116_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB116_28
.LBB116_31:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB116_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB116_35
.LBB116_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB116_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB116_35:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI116_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI116_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB116_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end116:
	.size	_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc, .Lfunc_end116-_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc
.LCPI117_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI117_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB117_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 27
	blt	$s0, $a0, .LBB117_15
# %bb.2:                                # %.preheader49.us.preheader
	addi.d	$a2, $s0, -26
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, 38836
	ori	$a3, $a3, 607
	lu32i.d	$a3, 271853
	lu52i.d	$a3, $a3, -1669
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 4
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -27
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 124
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -163576
	ori	$s3, $a0, 1640
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB117_4
	.p2align	4, , 16
.LBB117_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB117_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB117_31
.LBB117_4:                              # %.preheader49.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_5 Depth 2
                                        #     Child Loop BB117_9 Depth 2
                                        #     Child Loop BB117_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a3, $zero, 27
	move	$a4, $fp
	.p2align	4, , 16
.LBB117_5:                              #   Parent Loop BB117_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a5, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a5, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 92
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 96
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 100
	ld.w	$t2, $a5, 104
	add.d	$a5, $a6, $t0
	add.d	$a5, $a5, $t1
	add.d	$a7, $a5, $a7
	move	$a5, $a3
	move	$a6, $a4
	add.d	$a3, $a7, $t2
	mul.d	$a3, $a3, $s4
	add.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 27
	addi.d	$a3, $a5, 27
	addi.d	$a4, $a4, 108
	bltu	$a2, $s2, .LBB117_5
# %bb.6:                                # %.loopexit50.us
                                        #   in Loop: Header=BB117_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB117_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB117_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a3, $zero, 8
	bltu	$a2, $a3, .LBB117_11
# %bb.8:                                # %vector.ph90
                                        #   in Loop: Header=BB117_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI117_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI117_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a5, $a5, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB117_9:                              # %vector.body93
                                        #   Parent Loop BB117_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB117_9
# %bb.10:                               # %middle.block100
                                        #   in Loop: Header=BB117_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a3, .LBB117_13
.LBB117_11:                             # %.preheader.us.preheader105
                                        #   in Loop: Header=BB117_4 Depth=1
	alsl.d	$a2, $a5, $s1, 2
	sub.d	$a3, $s0, $a5
	.p2align	4, , 16
.LBB117_12:                             # %.preheader.us
                                        #   Parent Loop BB117_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB117_12
.LBB117_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB117_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB117_3
# %bb.14:                               #   in Loop: Header=BB117_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB117_3
.LBB117_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB117_27
# %bb.16:                               # %.preheader.us60.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB117_18
	.p2align	4, , 16
.LBB117_17:                             # %_Z9check_sumIiEvT_.exit.us59
                                        #   in Loop: Header=BB117_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB117_31
.LBB117_18:                             # %.preheader.us60
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_21 Depth 2
                                        #     Child Loop BB117_24 Depth 2
	bgeu	$s0, $a5, .LBB117_20
# %bb.19:                               #   in Loop: Header=BB117_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB117_23
	.p2align	4, , 16
.LBB117_20:                             # %vector.body.preheader
                                        #   in Loop: Header=BB117_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB117_21:                             # %vector.body
                                        #   Parent Loop BB117_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB117_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB117_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB117_25
.LBB117_23:                             # %scalar.ph.preheader
                                        #   in Loop: Header=BB117_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB117_24:                             # %scalar.ph
                                        #   Parent Loop BB117_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB117_24
.LBB117_25:                             # %.loopexit.us61
                                        #   in Loop: Header=BB117_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB117_17
# %bb.26:                               #   in Loop: Header=BB117_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB117_17
.LBB117_27:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB117_29
	.p2align	4, , 16
.LBB117_28:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB117_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB117_31
.LBB117_29:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB117_28
# %bb.30:                               #   in Loop: Header=BB117_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB117_28
.LBB117_31:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB117_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB117_35
.LBB117_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB117_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB117_35:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI117_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI117_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB117_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end117:
	.size	_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc, .Lfunc_end117-_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc
.LCPI118_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI118_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB118_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 26
	blt	$s0, $a0, .LBB118_15
# %bb.2:                                # %.preheader48.us.preheader
	addi.d	$a2, $s0, -25
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -241980
	ori	$a3, $a3, 3781
	lu32i.d	$a3, 322638
	lu52i.d	$a3, $a3, 1260
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 3
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$s8, $a0, -26
	move	$s7, $zero
	st.d	$s8, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$s8, $zero, 2, 0
	addi.d	$fp, $s1, 120
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	b	.LBB118_4
	.p2align	4, , 16
.LBB118_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB118_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB118_31
.LBB118_4:                              # %.preheader48.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_5 Depth 2
                                        #     Child Loop BB118_9 Depth 2
                                        #     Child Loop BB118_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a3, $zero, 26
	move	$a4, $fp
	.p2align	4, , 16
.LBB118_5:                              #   Parent Loop BB118_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a5, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a5, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 92
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 96
	ld.w	$t2, $a5, 100
	add.d	$a5, $a6, $a7
	add.w	$a5, $a5, $t0
	add.d	$a7, $a5, $t1
	move	$a5, $a3
	move	$a6, $a4
	add.d	$a3, $a7, $t2
	mul.d	$a3, $a3, $s4
	add.d	$a0, $a0, $a3
	addu16i.d	$a0, $a0, 7146
	addi.w	$a0, $a0, -848
	addi.d	$a2, $a2, 26
	addi.d	$a3, $a5, 26
	addi.d	$a4, $a4, 104
	bltu	$a2, $s2, .LBB118_5
# %bb.6:                                # %.loopexit49.us
                                        #   in Loop: Header=BB118_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB118_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB118_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a3, $zero, 8
	bltu	$a2, $a3, .LBB118_11
# %bb.8:                                # %vector.ph89
                                        #   in Loop: Header=BB118_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI118_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI118_0)
	add.d	$a5, $a5, $s8
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $s8
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB118_9:                              # %vector.body92
                                        #   Parent Loop BB118_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s3
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB118_9
# %bb.10:                               # %middle.block99
                                        #   in Loop: Header=BB118_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	beq	$a2, $s8, .LBB118_13
.LBB118_11:                             # %.preheader.us.preheader104
                                        #   in Loop: Header=BB118_4 Depth=1
	alsl.d	$a2, $a5, $s1, 2
	sub.d	$a3, $s0, $a5
	.p2align	4, , 16
.LBB118_12:                             # %.preheader.us
                                        #   Parent Loop BB118_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB118_12
.LBB118_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB118_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB118_3
# %bb.14:                               #   in Loop: Header=BB118_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB118_3
.LBB118_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB118_27
# %bb.16:                               # %.preheader.us59.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB118_18
	.p2align	4, , 16
.LBB118_17:                             # %_Z9check_sumIiEvT_.exit.us58
                                        #   in Loop: Header=BB118_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB118_31
.LBB118_18:                             # %.preheader.us59
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_21 Depth 2
                                        #     Child Loop BB118_24 Depth 2
	bgeu	$s0, $a5, .LBB118_20
# %bb.19:                               #   in Loop: Header=BB118_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB118_23
	.p2align	4, , 16
.LBB118_20:                             # %vector.body.preheader
                                        #   in Loop: Header=BB118_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB118_21:                             # %vector.body
                                        #   Parent Loop BB118_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB118_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB118_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB118_25
.LBB118_23:                             # %scalar.ph.preheader
                                        #   in Loop: Header=BB118_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB118_24:                             # %scalar.ph
                                        #   Parent Loop BB118_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB118_24
.LBB118_25:                             # %.loopexit.us60
                                        #   in Loop: Header=BB118_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB118_17
# %bb.26:                               #   in Loop: Header=BB118_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB118_17
.LBB118_27:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB118_29
	.p2align	4, , 16
.LBB118_28:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB118_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB118_31
.LBB118_29:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB118_28
# %bb.30:                               #   in Loop: Header=BB118_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB118_28
.LBB118_31:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB118_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB118_35
.LBB118_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB118_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB118_35:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI118_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI118_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB118_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end118:
	.size	_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc, .Lfunc_end118-_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc
.LCPI119_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI119_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB119_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 25
	blt	$s0, $a0, .LBB119_15
# %bb.2:                                # %.preheader47.us.preheader
	addi.d	$a2, $s0, -24
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -125830
	ori	$a3, $a3, 3605
	lu32i.d	$a3, -125830
	lu52i.d	$a3, $a3, 1146
	mulh.du	$a3, $a2, $a3
	sub.d	$a4, $a2, $a3
	srli.d	$a4, $a4, 1
	add.d	$a3, $a4, $a3
	srli.d	$a3, $a3, 4
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -25
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 116
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 392247
	ori	$s3, $a0, 760
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB119_4
	.p2align	4, , 16
.LBB119_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB119_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB119_31
.LBB119_4:                              # %.preheader47.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_5 Depth 2
                                        #     Child Loop BB119_9 Depth 2
                                        #     Child Loop BB119_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a3, $zero, 25
	move	$a4, $fp
	.p2align	4, , 16
.LBB119_5:                              #   Parent Loop BB119_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a5, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a5, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 88
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 92
	ld.w	$t2, $a5, 96
	add.d	$a5, $a6, $t1
	add.d	$a5, $a5, $a7
	add.d	$a7, $a5, $t0
	move	$a5, $a3
	move	$a6, $a4
	add.d	$a3, $a7, $t2
	mul.d	$a3, $a3, $s4
	add.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 25
	addi.d	$a3, $a5, 25
	addi.d	$a4, $a4, 100
	bltu	$a2, $s2, .LBB119_5
# %bb.6:                                # %.loopexit48.us
                                        #   in Loop: Header=BB119_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB119_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB119_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a3, $zero, 8
	bltu	$a2, $a3, .LBB119_11
# %bb.8:                                # %vector.ph88
                                        #   in Loop: Header=BB119_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI119_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI119_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a5, $a5, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB119_9:                              # %vector.body91
                                        #   Parent Loop BB119_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB119_9
# %bb.10:                               # %middle.block98
                                        #   in Loop: Header=BB119_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a3, .LBB119_13
.LBB119_11:                             # %.preheader.us.preheader103
                                        #   in Loop: Header=BB119_4 Depth=1
	alsl.d	$a2, $a5, $s1, 2
	sub.d	$a3, $s0, $a5
	.p2align	4, , 16
.LBB119_12:                             # %.preheader.us
                                        #   Parent Loop BB119_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB119_12
.LBB119_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB119_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB119_3
# %bb.14:                               #   in Loop: Header=BB119_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB119_3
.LBB119_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB119_27
# %bb.16:                               # %.preheader.us58.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB119_18
	.p2align	4, , 16
.LBB119_17:                             # %_Z9check_sumIiEvT_.exit.us57
                                        #   in Loop: Header=BB119_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB119_31
.LBB119_18:                             # %.preheader.us58
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_21 Depth 2
                                        #     Child Loop BB119_24 Depth 2
	bgeu	$s0, $a5, .LBB119_20
# %bb.19:                               #   in Loop: Header=BB119_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB119_23
	.p2align	4, , 16
.LBB119_20:                             # %vector.body.preheader
                                        #   in Loop: Header=BB119_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB119_21:                             # %vector.body
                                        #   Parent Loop BB119_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB119_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB119_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB119_25
.LBB119_23:                             # %scalar.ph.preheader
                                        #   in Loop: Header=BB119_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB119_24:                             # %scalar.ph
                                        #   Parent Loop BB119_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB119_24
.LBB119_25:                             # %.loopexit.us59
                                        #   in Loop: Header=BB119_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB119_17
# %bb.26:                               #   in Loop: Header=BB119_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB119_17
.LBB119_27:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB119_29
	.p2align	4, , 16
.LBB119_28:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB119_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB119_31
.LBB119_29:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB119_28
# %bb.30:                               #   in Loop: Header=BB119_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB119_28
.LBB119_31:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB119_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB119_35
.LBB119_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB119_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB119_35:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI119_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI119_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB119_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end119:
	.size	_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc, .Lfunc_end119-_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc
.LCPI120_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI120_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB120_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 24
	blt	$s0, $a0, .LBB120_15
# %bb.2:                                # %.preheader46.us.preheader
	addi.d	$a2, $s0, -23
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -349526
	ori	$a3, $a3, 2731
	lu32i.d	$a3, -349526
	lu52i.d	$a3, $a3, -1366
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 4
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -24
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 112
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -378418
	ori	$s3, $a0, 2368
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB120_4
	.p2align	4, , 16
.LBB120_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB120_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB120_31
.LBB120_4:                              # %.preheader46.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_5 Depth 2
                                        #     Child Loop BB120_9 Depth 2
                                        #     Child Loop BB120_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a3, $zero, 24
	move	$a4, $fp
	.p2align	4, , 16
.LBB120_5:                              #   Parent Loop BB120_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a5, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a5, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a5, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a5, 84
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a5, 88
	ld.w	$t2, $a5, 92
	add.d	$a5, $a6, $t0
	add.d	$a5, $a5, $t1
	add.d	$a7, $a5, $a7
	move	$a5, $a3
	move	$a6, $a4
	add.d	$a3, $a7, $t2
	mul.d	$a3, $a3, $s4
	add.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 24
	addi.d	$a3, $a5, 24
	addi.d	$a4, $a4, 96
	bltu	$a2, $s2, .LBB120_5
# %bb.6:                                # %.loopexit47.us
                                        #   in Loop: Header=BB120_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB120_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB120_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a3, $zero, 8
	bltu	$a2, $a3, .LBB120_11
# %bb.8:                                # %vector.ph87
                                        #   in Loop: Header=BB120_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI120_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI120_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a5, $a5, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB120_9:                              # %vector.body90
                                        #   Parent Loop BB120_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB120_9
# %bb.10:                               # %middle.block97
                                        #   in Loop: Header=BB120_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a3, .LBB120_13
.LBB120_11:                             # %.preheader.us.preheader102
                                        #   in Loop: Header=BB120_4 Depth=1
	alsl.d	$a2, $a5, $s1, 2
	sub.d	$a3, $s0, $a5
	.p2align	4, , 16
.LBB120_12:                             # %.preheader.us
                                        #   Parent Loop BB120_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB120_12
.LBB120_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB120_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB120_3
# %bb.14:                               #   in Loop: Header=BB120_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB120_3
.LBB120_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB120_27
# %bb.16:                               # %.preheader.us57.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB120_18
	.p2align	4, , 16
.LBB120_17:                             # %_Z9check_sumIiEvT_.exit.us56
                                        #   in Loop: Header=BB120_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB120_31
.LBB120_18:                             # %.preheader.us57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_21 Depth 2
                                        #     Child Loop BB120_24 Depth 2
	bgeu	$s0, $a5, .LBB120_20
# %bb.19:                               #   in Loop: Header=BB120_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB120_23
	.p2align	4, , 16
.LBB120_20:                             # %vector.body.preheader
                                        #   in Loop: Header=BB120_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB120_21:                             # %vector.body
                                        #   Parent Loop BB120_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB120_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB120_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB120_25
.LBB120_23:                             # %scalar.ph.preheader
                                        #   in Loop: Header=BB120_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB120_24:                             # %scalar.ph
                                        #   Parent Loop BB120_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB120_24
.LBB120_25:                             # %.loopexit.us58
                                        #   in Loop: Header=BB120_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB120_17
# %bb.26:                               #   in Loop: Header=BB120_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB120_17
.LBB120_27:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB120_29
	.p2align	4, , 16
.LBB120_28:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB120_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB120_31
.LBB120_29:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB120_28
# %bb.30:                               #   in Loop: Header=BB120_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB120_28
.LBB120_31:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB120_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB120_35
.LBB120_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB120_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB120_35:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI120_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI120_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB120_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end120:
	.size	_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc, .Lfunc_end120-_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc
.LCPI121_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI121_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB121_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 23
	blt	$s0, $a0, .LBB121_15
# %bb.2:                                # %.preheader45.us.preheader
	addi.d	$a2, $s0, -22
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -319132
	ori	$a3, $a3, 713
	lu32i.d	$a3, -227952
	lu52i.d	$a3, $a3, 1602
	mulh.du	$a3, $a2, $a3
	sub.d	$a4, $a2, $a3
	srli.d	$a4, $a4, 1
	add.d	$a3, $a4, $a3
	srli.d	$a3, $a3, 4
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -23
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 108
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -100507
	ori	$s3, $a0, 3976
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB121_4
	.p2align	4, , 16
.LBB121_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB121_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB121_31
.LBB121_4:                              # %.preheader45.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_5 Depth 2
                                        #     Child Loop BB121_9 Depth 2
                                        #     Child Loop BB121_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a4, $zero, 23
	move	$a5, $fp
	.p2align	4, , 16
.LBB121_5:                              #   Parent Loop BB121_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a3, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a3, 4
	ld.w	$t0, $a3, 8
	ld.w	$t1, $a3, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a3, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 80
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 84
	ld.w	$t2, $a3, 88
	add.d	$a3, $a6, $a7
	add.d	$a3, $a3, $t0
	add.d	$a7, $a3, $t1
	move	$a3, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 23
	addi.d	$a4, $a3, 23
	addi.d	$a5, $a5, 92
	bltu	$a2, $s2, .LBB121_5
# %bb.6:                                # %.loopexit46.us
                                        #   in Loop: Header=BB121_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB121_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB121_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a2, $a4, .LBB121_11
# %bb.8:                                # %vector.ph86
                                        #   in Loop: Header=BB121_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI121_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI121_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a3, $a3, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB121_9:                              # %vector.body89
                                        #   Parent Loop BB121_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB121_9
# %bb.10:                               # %middle.block96
                                        #   in Loop: Header=BB121_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a4, .LBB121_13
.LBB121_11:                             # %.preheader.us.preheader101
                                        #   in Loop: Header=BB121_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB121_12:                             # %.preheader.us
                                        #   Parent Loop BB121_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB121_12
.LBB121_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB121_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB121_3
# %bb.14:                               #   in Loop: Header=BB121_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB121_3
.LBB121_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB121_27
# %bb.16:                               # %.preheader.us56.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB121_18
	.p2align	4, , 16
.LBB121_17:                             # %_Z9check_sumIiEvT_.exit.us55
                                        #   in Loop: Header=BB121_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB121_31
.LBB121_18:                             # %.preheader.us56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_21 Depth 2
                                        #     Child Loop BB121_24 Depth 2
	bgeu	$s0, $a5, .LBB121_20
# %bb.19:                               #   in Loop: Header=BB121_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB121_23
	.p2align	4, , 16
.LBB121_20:                             # %vector.body.preheader
                                        #   in Loop: Header=BB121_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB121_21:                             # %vector.body
                                        #   Parent Loop BB121_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB121_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB121_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB121_25
.LBB121_23:                             # %scalar.ph.preheader
                                        #   in Loop: Header=BB121_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB121_24:                             # %scalar.ph
                                        #   Parent Loop BB121_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB121_24
.LBB121_25:                             # %.loopexit.us57
                                        #   in Loop: Header=BB121_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB121_17
# %bb.26:                               #   in Loop: Header=BB121_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB121_17
.LBB121_27:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB121_29
	.p2align	4, , 16
.LBB121_28:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB121_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB121_31
.LBB121_29:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB121_28
# %bb.30:                               #   in Loop: Header=BB121_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB121_28
.LBB121_31:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB121_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB121_35
.LBB121_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB121_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB121_35:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI121_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI121_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB121_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end121:
	.size	_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc, .Lfunc_end121-_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc
.LCPI122_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI122_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB122_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 22
	blt	$s0, $a0, .LBB122_15
# %bb.2:                                # %.preheader44.us.preheader
	addi.d	$a2, $s0, -21
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -285976
	ori	$a3, $a3, 2979
	lu32i.d	$a3, -285976
	lu52i.d	$a3, $a3, 744
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 2
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -22
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 104
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 177405
	ori	$s3, $a0, 1488
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB122_4
	.p2align	4, , 16
.LBB122_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB122_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB122_31
.LBB122_4:                              # %.preheader44.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_5 Depth 2
                                        #     Child Loop BB122_9 Depth 2
                                        #     Child Loop BB122_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a4, $zero, 22
	move	$a5, $fp
	.p2align	4, , 16
.LBB122_5:                              #   Parent Loop BB122_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a3, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a3, 4
	ld.w	$t0, $a3, 8
	ld.w	$t1, $a3, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a3, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 76
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 80
	ld.w	$t2, $a3, 84
	add.d	$a3, $a6, $t1
	add.d	$a3, $a3, $a7
	add.d	$a7, $a3, $t0
	move	$a3, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 22
	addi.d	$a4, $a3, 22
	addi.d	$a5, $a5, 88
	bltu	$a2, $s2, .LBB122_5
# %bb.6:                                # %.loopexit45.us
                                        #   in Loop: Header=BB122_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB122_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB122_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a2, $a4, .LBB122_11
# %bb.8:                                # %vector.ph85
                                        #   in Loop: Header=BB122_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI122_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI122_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a3, $a3, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB122_9:                              # %vector.body88
                                        #   Parent Loop BB122_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB122_9
# %bb.10:                               # %middle.block95
                                        #   in Loop: Header=BB122_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a4, .LBB122_13
.LBB122_11:                             # %.preheader.us.preheader100
                                        #   in Loop: Header=BB122_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB122_12:                             # %.preheader.us
                                        #   Parent Loop BB122_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB122_12
.LBB122_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB122_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB122_3
# %bb.14:                               #   in Loop: Header=BB122_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB122_3
.LBB122_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB122_27
# %bb.16:                               # %.preheader.us55.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB122_18
	.p2align	4, , 16
.LBB122_17:                             # %_Z9check_sumIiEvT_.exit.us54
                                        #   in Loop: Header=BB122_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB122_31
.LBB122_18:                             # %.preheader.us55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_21 Depth 2
                                        #     Child Loop BB122_24 Depth 2
	bgeu	$s0, $a5, .LBB122_20
# %bb.19:                               #   in Loop: Header=BB122_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB122_23
	.p2align	4, , 16
.LBB122_20:                             # %vector.body.preheader
                                        #   in Loop: Header=BB122_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB122_21:                             # %vector.body
                                        #   Parent Loop BB122_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB122_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB122_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB122_25
.LBB122_23:                             # %scalar.ph.preheader
                                        #   in Loop: Header=BB122_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB122_24:                             # %scalar.ph
                                        #   Parent Loop BB122_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB122_24
.LBB122_25:                             # %.loopexit.us56
                                        #   in Loop: Header=BB122_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB122_17
# %bb.26:                               #   in Loop: Header=BB122_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB122_17
.LBB122_27:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB122_29
	.p2align	4, , 16
.LBB122_28:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB122_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB122_31
.LBB122_29:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB122_28
# %bb.30:                               #   in Loop: Header=BB122_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB122_28
.LBB122_31:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB122_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB122_35
.LBB122_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB122_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB122_35:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI122_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI122_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB122_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end122:
	.size	_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc, .Lfunc_end122-_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc
.LCPI123_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI123_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB123_31
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 21
	blt	$s0, $a0, .LBB123_15
# %bb.2:                                # %.preheader42.us.preheader
	addi.d	$a2, $s0, -20
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, 99864
	ori	$a3, $a3, 1561
	lu32i.d	$a3, -499322
	lu52i.d	$a3, $a3, -1951
	mulh.du	$a3, $a2, $a3
	sub.d	$a4, $a2, $a3
	srli.d	$a4, $a4, 1
	add.d	$a3, $a4, $a3
	srli.d	$a3, $a3, 4
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -21
	move	$s7, $zero
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 100
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 455316
	ori	$s3, $a0, 3096
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB123_4
	.p2align	4, , 16
.LBB123_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB123_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB123_31
.LBB123_4:                              # %.preheader42.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_5 Depth 2
                                        #     Child Loop BB123_9 Depth 2
                                        #     Child Loop BB123_12 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	ori	$a4, $zero, 21
	move	$a5, $fp
	.p2align	4, , 16
.LBB123_5:                              #   Parent Loop BB123_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	alsl.d	$a3, $a2, $s1, 2
	slli.d	$a6, $a2, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a3, 4
	ld.w	$t0, $a3, 8
	ld.w	$t1, $a3, 12
	add.d	$a6, $a7, $a6
	ld.w	$a7, $a3, 16
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 20
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 24
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 28
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 32
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 36
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 40
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 44
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 48
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 52
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 56
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 60
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 64
	add.d	$a6, $a6, $t0
	ld.w	$t0, $a3, 68
	add.d	$a6, $a6, $t1
	ld.w	$t1, $a3, 72
	add.d	$a6, $a6, $a7
	ld.w	$a7, $a3, 76
	ld.w	$t2, $a3, 80
	add.d	$a3, $a6, $t0
	add.d	$a3, $a3, $t1
	add.d	$a7, $a3, $a7
	move	$a3, $a4
	move	$a6, $a5
	add.d	$a4, $a7, $t2
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, 21
	addi.d	$a4, $a3, 21
	addi.d	$a5, $a5, 84
	bltu	$a2, $s2, .LBB123_5
# %bb.6:                                # %.loopexit43.us
                                        #   in Loop: Header=BB123_4 Depth=1
	addi.w	$a2, $a2, 0
	bge	$a2, $s0, .LBB123_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB123_4 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bltu	$a2, $a4, .LBB123_11
# %bb.8:                                # %vector.ph83
                                        #   in Loop: Header=BB123_4 Depth=1
	pcalau12i	$a2, %pc_hi20(.LCPI123_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI123_0)
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	add.d	$a3, $a3, $a2
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a0, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB123_9:                              # %vector.body86
                                        #   Parent Loop BB123_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a0, $a0, -8
	addi.d	$a6, $a6, 32
	bnez	$a0, .LBB123_9
# %bb.10:                               # %middle.block93
                                        #   in Loop: Header=BB123_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	beq	$a2, $a4, .LBB123_13
.LBB123_11:                             # %.preheader.us.preheader98
                                        #   in Loop: Header=BB123_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB123_12:                             # %.preheader.us
                                        #   Parent Loop BB123_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB123_12
.LBB123_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB123_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB123_3
# %bb.14:                               #   in Loop: Header=BB123_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB123_3
.LBB123_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB123_27
# %bb.16:                               # %.preheader.us53.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB123_18
	.p2align	4, , 16
.LBB123_17:                             # %_Z9check_sumIiEvT_.exit.us52
                                        #   in Loop: Header=BB123_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB123_31
.LBB123_18:                             # %.preheader.us53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_21 Depth 2
                                        #     Child Loop BB123_24 Depth 2
	bgeu	$s0, $a5, .LBB123_20
# %bb.19:                               #   in Loop: Header=BB123_18 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB123_23
	.p2align	4, , 16
.LBB123_20:                             # %vector.body.preheader
                                        #   in Loop: Header=BB123_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB123_21:                             # %vector.body
                                        #   Parent Loop BB123_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB123_21
# %bb.22:                               # %middle.block
                                        #   in Loop: Header=BB123_18 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB123_25
.LBB123_23:                             # %scalar.ph.preheader
                                        #   in Loop: Header=BB123_18 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB123_24:                             # %scalar.ph
                                        #   Parent Loop BB123_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s6
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB123_24
.LBB123_25:                             # %.loopexit.us54
                                        #   in Loop: Header=BB123_18 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB123_17
# %bb.26:                               #   in Loop: Header=BB123_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB123_17
.LBB123_27:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB123_29
	.p2align	4, , 16
.LBB123_28:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB123_29 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB123_31
.LBB123_29:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB123_28
# %bb.30:                               #   in Loop: Header=BB123_29 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB123_28
.LBB123_31:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB123_33
# %bb.32:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB123_35
.LBB123_33:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB123_36
# %bb.34:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB123_35:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI123_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI123_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB123_36:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end123:
	.size	_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc, .Lfunc_end123-_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN15goto_loop_testsILi19EiE7do_testEPKiPKc,"axG",@progbits,_ZN15goto_loop_testsILi19EiE7do_testEPKiPKc,comdat
	.weak	_ZN15goto_loop_testsILi19EiE7do_testEPKiPKc # -- Begin function _ZN15goto_loop_testsILi19EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN15goto_loop_testsILi19EiE7do_testEPKiPKc,@function
_ZN15goto_loop_testsILi19EiE7do_testEPKiPKc: # @_ZN15goto_loop_testsILi19EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN15goto_loop_testsILi10EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1000
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1100
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1200
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1300
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1400
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1500
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1600
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1700
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1800
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end124:
	.size	_ZN15goto_loop_testsILi19EiE7do_testEPKiPKc, .Lfunc_end124-_ZN15goto_loop_testsILi19EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc
.LCPI125_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI125_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -240
	.cfi_def_cfa_offset 240
	st.d	$ra, $sp, 232                   # 8-byte Folded Spill
	st.d	$fp, $sp, 224                   # 8-byte Folded Spill
	st.d	$s0, $sp, 216                   # 8-byte Folded Spill
	st.d	$s1, $sp, 208                   # 8-byte Folded Spill
	st.d	$s2, $sp, 200                   # 8-byte Folded Spill
	st.d	$s3, $sp, 192                   # 8-byte Folded Spill
	st.d	$s4, $sp, 184                   # 8-byte Folded Spill
	st.d	$s5, $sp, 176                   # 8-byte Folded Spill
	st.d	$s6, $sp, 168                   # 8-byte Folded Spill
	st.d	$s7, $sp, 160                   # 8-byte Folded Spill
	st.d	$s8, $sp, 152                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 112                   # 8-byte Folded Spill
	ld.w	$a4, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a1, %pc_hi20(current_test)
	st.d	$a1, $sp, 120                   # 8-byte Folded Spill
	blt	$a4, $a0, .LBB125_32
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 20
	blt	$s0, $a0, .LBB125_16
# %bb.2:                                # %.preheader41.us.preheader
	addi.d	$a2, $s0, -19
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -209716
	ori	$a3, $a3, 3277
	lu32i.d	$a3, -209716
	lu52i.d	$a3, $a3, -820
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 4
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -20
	move	$a1, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 96
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -315348
	ori	$s3, $a0, 608
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	b	.LBB125_4
	.p2align	4, , 16
.LBB125_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB125_4 Depth=1
	addi.w	$a1, $fp, 1
	bge	$a1, $a4, .LBB125_32
.LBB125_4:                              # %.preheader41.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_5 Depth 2
                                        #     Child Loop BB125_9 Depth 2
                                        #     Child Loop BB125_12 Depth 2
	st.d	$a1, $sp, 128                   # 8-byte Folded Spill
	st.d	$a4, $sp, 144                   # 8-byte Folded Spill
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 20
	ld.d	$a6, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB125_5:                              #   Parent Loop BB125_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$s6, $a5, 52
	ld.w	$s8, $a5, 56
	ld.w	$a1, $a5, 60
	ld.w	$s0, $a5, 64
	ld.w	$s7, $a5, 68
	ld.w	$s5, $a5, 72
	ld.w	$a5, $a5, 76
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a6, $a6, $s6
	add.d	$a6, $a6, $s8
	add.d	$a1, $a6, $a1
	add.d	$a1, $a1, $s0
	add.d	$a1, $a1, $s7
	add.d	$a1, $a1, $s5
	add.d	$a1, $a1, $a5
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s3
	addi.d	$a4, $a4, 20
	addi.d	$a5, $a0, 20
	addi.d	$a6, $a3, 80
	bltu	$a4, $s2, .LBB125_5
# %bb.6:                                # %.loopexit42.us
                                        #   in Loop: Header=BB125_4 Depth=1
	addi.w	$a1, $a4, 0
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	bge	$a1, $s0, .LBB125_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB125_4 Depth=1
	ld.d	$a4, $sp, 144                   # 8-byte Folded Reload
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	bltu	$a1, $a5, .LBB125_11
# %bb.8:                                # %vector.ph82
                                        #   in Loop: Header=BB125_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI125_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI125_0)
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a1
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB125_9:                              # %vector.body85
                                        #   Parent Loop BB125_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB125_9
# %bb.10:                               # %middle.block92
                                        #   in Loop: Header=BB125_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 40                    # 8-byte Folded Reload
	beq	$a1, $a3, .LBB125_14
.LBB125_11:                             # %.preheader.us.preheader97
                                        #   in Loop: Header=BB125_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB125_12:                             # %.preheader.us
                                        #   Parent Loop BB125_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a3, 0
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB125_12
	b	.LBB125_14
	.p2align	4, , 16
.LBB125_13:                             #   in Loop: Header=BB125_4 Depth=1
	ld.d	$a4, $sp, 144                   # 8-byte Folded Reload
.LBB125_14:                             # %.loopexit.us
                                        #   in Loop: Header=BB125_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	add.w	$a0, $a0, $a1
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	beq	$a2, $a0, .LBB125_3
# %bb.15:                               #   in Loop: Header=BB125_4 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB125_3
.LBB125_16:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB125_28
# %bb.17:                               # %.preheader.us52.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 144                   # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 128                  # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 80                   # 16-byte Folded Spill
	vst	$vr5, $sp, 64                   # 16-byte Folded Spill
	b	.LBB125_19
	.p2align	4, , 16
.LBB125_18:                             # %_Z9check_sumIiEvT_.exit.us51
                                        #   in Loop: Header=BB125_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB125_32
.LBB125_19:                             # %.preheader.us52
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_22 Depth 2
                                        #     Child Loop BB125_25 Depth 2
	bgeu	$s0, $a5, .LBB125_21
# %bb.20:                               #   in Loop: Header=BB125_19 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB125_24
	.p2align	4, , 16
.LBB125_21:                             # %vector.body.preheader
                                        #   in Loop: Header=BB125_19 Depth=1
	ld.d	$a0, $sp, 144                   # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 128                  # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB125_22:                             # %vector.body
                                        #   Parent Loop BB125_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB125_22
# %bb.23:                               # %middle.block
                                        #   in Loop: Header=BB125_19 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB125_26
.LBB125_24:                             # %scalar.ph.preheader
                                        #   in Loop: Header=BB125_19 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB125_25:                             # %scalar.ph
                                        #   Parent Loop BB125_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $s6
	add.d	$a0, $a0, $a1
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB125_25
.LBB125_26:                             # %.loopexit.us53
                                        #   in Loop: Header=BB125_19 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s5
	add.w	$a1, $a1, $s4
	beq	$a0, $a1, .LBB125_18
# %bb.27:                               #   in Loop: Header=BB125_19 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 64                   # 16-byte Folded Reload
	vld	$vr4, $sp, 80                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB125_18
.LBB125_28:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB125_30
	.p2align	4, , 16
.LBB125_29:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB125_30 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB125_32
.LBB125_30:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB125_29
# %bb.31:                               #   in Loop: Header=BB125_30 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB125_29
.LBB125_32:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 120                   # 8-byte Folded Reload
	beqz	$a2, .LBB125_34
# %bb.33:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB125_36
.LBB125_34:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB125_37
# %bb.35:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB125_36:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI125_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI125_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 216                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 224                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 232                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 240
	ret
.LBB125_37:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end125:
	.size	_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc, .Lfunc_end125-_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc
.LCPI126_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI126_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -240
	.cfi_def_cfa_offset 240
	st.d	$ra, $sp, 232                   # 8-byte Folded Spill
	st.d	$fp, $sp, 224                   # 8-byte Folded Spill
	st.d	$s0, $sp, 216                   # 8-byte Folded Spill
	st.d	$s1, $sp, 208                   # 8-byte Folded Spill
	st.d	$s2, $sp, 200                   # 8-byte Folded Spill
	st.d	$s3, $sp, 192                   # 8-byte Folded Spill
	st.d	$s4, $sp, 184                   # 8-byte Folded Spill
	st.d	$s5, $sp, 176                   # 8-byte Folded Spill
	st.d	$s6, $sp, 168                   # 8-byte Folded Spill
	st.d	$s7, $sp, 160                   # 8-byte Folded Spill
	st.d	$s8, $sp, 152                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 112                   # 8-byte Folded Spill
	ld.w	$a4, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a1, %pc_hi20(current_test)
	st.d	$a1, $sp, 120                   # 8-byte Folded Spill
	blt	$a4, $a0, .LBB126_32
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 19
	blt	$s0, $a0, .LBB126_16
# %bb.2:                                # %.preheader40.us.preheader
	addi.d	$a2, $s0, -18
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, 55188
	ori	$a3, $a3, 863
	lu32i.d	$a3, 275941
	lu52i.d	$a3, $a3, -647
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 4
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -19
	move	$a1, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 92
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -37437
	ori	$s3, $a0, 2216
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	b	.LBB126_4
	.p2align	4, , 16
.LBB126_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB126_4 Depth=1
	addi.w	$a1, $fp, 1
	bge	$a1, $a4, .LBB126_32
.LBB126_4:                              # %.preheader40.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_5 Depth 2
                                        #     Child Loop BB126_9 Depth 2
                                        #     Child Loop BB126_12 Depth 2
	st.d	$a1, $sp, 128                   # 8-byte Folded Spill
	st.d	$a4, $sp, 144                   # 8-byte Folded Spill
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 19
	ld.d	$a6, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB126_5:                              #   Parent Loop BB126_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$s6, $a5, 52
	ld.w	$s8, $a5, 56
	ld.w	$a1, $a5, 60
	ld.w	$s0, $a5, 64
	ld.w	$s7, $a5, 68
	ld.w	$a5, $a5, 72
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a6, $a6, $s6
	add.d	$a6, $a6, $s8
	add.d	$a1, $a6, $a1
	add.d	$a1, $a1, $s0
	add.d	$a1, $a1, $s7
	add.d	$a1, $a1, $a5
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s3
	addi.d	$a4, $a4, 19
	addi.d	$a5, $a0, 19
	addi.d	$a6, $a3, 76
	bltu	$a4, $s2, .LBB126_5
# %bb.6:                                # %.loopexit41.us
                                        #   in Loop: Header=BB126_4 Depth=1
	addi.w	$a1, $a4, 0
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	bge	$a1, $s0, .LBB126_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB126_4 Depth=1
	ld.d	$a4, $sp, 144                   # 8-byte Folded Reload
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a1, $a5, .LBB126_11
# %bb.8:                                # %vector.ph81
                                        #   in Loop: Header=BB126_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI126_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI126_0)
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a1
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB126_9:                              # %vector.body84
                                        #   Parent Loop BB126_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB126_9
# %bb.10:                               # %middle.block91
                                        #   in Loop: Header=BB126_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 40                    # 8-byte Folded Reload
	beq	$a1, $a3, .LBB126_14
.LBB126_11:                             # %.preheader.us.preheader96
                                        #   in Loop: Header=BB126_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB126_12:                             # %.preheader.us
                                        #   Parent Loop BB126_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a3, 0
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB126_12
	b	.LBB126_14
	.p2align	4, , 16
.LBB126_13:                             #   in Loop: Header=BB126_4 Depth=1
	ld.d	$a4, $sp, 144                   # 8-byte Folded Reload
.LBB126_14:                             # %.loopexit.us
                                        #   in Loop: Header=BB126_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	add.w	$a0, $a0, $a1
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	beq	$a2, $a0, .LBB126_3
# %bb.15:                               #   in Loop: Header=BB126_4 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB126_3
.LBB126_16:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB126_28
# %bb.17:                               # %.preheader.us51.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 144                   # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 128                  # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 80                   # 16-byte Folded Spill
	vst	$vr5, $sp, 64                   # 16-byte Folded Spill
	b	.LBB126_19
	.p2align	4, , 16
.LBB126_18:                             # %_Z9check_sumIiEvT_.exit.us50
                                        #   in Loop: Header=BB126_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB126_32
.LBB126_19:                             # %.preheader.us51
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_22 Depth 2
                                        #     Child Loop BB126_25 Depth 2
	bgeu	$s0, $a5, .LBB126_21
# %bb.20:                               #   in Loop: Header=BB126_19 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB126_24
	.p2align	4, , 16
.LBB126_21:                             # %vector.body.preheader
                                        #   in Loop: Header=BB126_19 Depth=1
	ld.d	$a0, $sp, 144                   # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 128                  # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB126_22:                             # %vector.body
                                        #   Parent Loop BB126_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB126_22
# %bb.23:                               # %middle.block
                                        #   in Loop: Header=BB126_19 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB126_26
.LBB126_24:                             # %scalar.ph.preheader
                                        #   in Loop: Header=BB126_19 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB126_25:                             # %scalar.ph
                                        #   Parent Loop BB126_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $s6
	add.d	$a0, $a0, $a1
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB126_25
.LBB126_26:                             # %.loopexit.us52
                                        #   in Loop: Header=BB126_19 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s5
	add.w	$a1, $a1, $s4
	beq	$a0, $a1, .LBB126_18
# %bb.27:                               #   in Loop: Header=BB126_19 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 64                   # 16-byte Folded Reload
	vld	$vr4, $sp, 80                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB126_18
.LBB126_28:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB126_30
	.p2align	4, , 16
.LBB126_29:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB126_30 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB126_32
.LBB126_30:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB126_29
# %bb.31:                               #   in Loop: Header=BB126_30 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB126_29
.LBB126_32:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 120                   # 8-byte Folded Reload
	beqz	$a2, .LBB126_34
# %bb.33:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB126_36
.LBB126_34:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB126_37
# %bb.35:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB126_36:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI126_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI126_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 216                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 224                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 232                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 240
	ret
.LBB126_37:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end126:
	.size	_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc, .Lfunc_end126-_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc
.LCPI127_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI127_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -224
	.cfi_def_cfa_offset 224
	st.d	$ra, $sp, 216                   # 8-byte Folded Spill
	st.d	$fp, $sp, 208                   # 8-byte Folded Spill
	st.d	$s0, $sp, 200                   # 8-byte Folded Spill
	st.d	$s1, $sp, 192                   # 8-byte Folded Spill
	st.d	$s2, $sp, 184                   # 8-byte Folded Spill
	st.d	$s3, $sp, 176                   # 8-byte Folded Spill
	st.d	$s4, $sp, 168                   # 8-byte Folded Spill
	st.d	$s5, $sp, 160                   # 8-byte Folded Spill
	st.d	$s6, $sp, 152                   # 8-byte Folded Spill
	st.d	$s7, $sp, 144                   # 8-byte Folded Spill
	st.d	$s8, $sp, 136                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 112                   # 8-byte Folded Spill
	ld.w	$a4, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a1, %pc_hi20(current_test)
	st.d	$a1, $sp, 120                   # 8-byte Folded Spill
	blt	$a4, $a0, .LBB127_32
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 18
	blt	$s0, $a0, .LBB127_16
# %bb.2:                                # %.preheader39.us.preheader
	addi.d	$a2, $s0, -17
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -466034
	ori	$a3, $a3, 911
	lu32i.d	$a3, -116509
	lu52i.d	$a3, $a3, -456
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 4
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -18
	move	$s7, $zero
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 88
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 240474
	ori	$s3, $a0, 3824
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	b	.LBB127_4
	.p2align	4, , 16
.LBB127_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB127_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a4, .LBB127_32
.LBB127_4:                              # %.preheader39.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_5 Depth 2
                                        #     Child Loop BB127_9 Depth 2
                                        #     Child Loop BB127_12 Depth 2
	st.d	$a4, $sp, 128                   # 8-byte Folded Spill
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 18
	ld.d	$a6, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB127_5:                              #   Parent Loop BB127_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$s6, $a5, 52
	ld.w	$s8, $a5, 56
	ld.w	$a1, $a5, 60
	ld.w	$s0, $a5, 64
	ld.w	$a5, $a5, 68
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a6, $a6, $s6
	add.d	$a6, $a6, $s8
	add.d	$a1, $a6, $a1
	add.d	$a1, $a1, $s0
	add.d	$a1, $a1, $a5
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s3
	addi.d	$a4, $a4, 18
	addi.d	$a5, $a0, 18
	addi.d	$a6, $a3, 72
	bltu	$a4, $s2, .LBB127_5
# %bb.6:                                # %.loopexit40.us
                                        #   in Loop: Header=BB127_4 Depth=1
	addi.w	$a1, $a4, 0
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	bge	$a1, $s0, .LBB127_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB127_4 Depth=1
	ld.d	$a4, $sp, 128                   # 8-byte Folded Reload
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a1, $a5, .LBB127_11
# %bb.8:                                # %vector.ph80
                                        #   in Loop: Header=BB127_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI127_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI127_0)
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a1
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB127_9:                              # %vector.body83
                                        #   Parent Loop BB127_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB127_9
# %bb.10:                               # %middle.block90
                                        #   in Loop: Header=BB127_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	beq	$a1, $a3, .LBB127_14
.LBB127_11:                             # %.preheader.us.preheader95
                                        #   in Loop: Header=BB127_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB127_12:                             # %.preheader.us
                                        #   Parent Loop BB127_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a3, 0
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB127_12
	b	.LBB127_14
	.p2align	4, , 16
.LBB127_13:                             #   in Loop: Header=BB127_4 Depth=1
	ld.d	$a4, $sp, 128                   # 8-byte Folded Reload
.LBB127_14:                             # %.loopexit.us
                                        #   in Loop: Header=BB127_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a1
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	add.w	$a0, $a0, $a1
	beq	$a2, $a0, .LBB127_3
# %bb.15:                               #   in Loop: Header=BB127_4 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB127_3
.LBB127_16:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB127_28
# %bb.17:                               # %.preheader.us50.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 128                   # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB127_19
	.p2align	4, , 16
.LBB127_18:                             # %_Z9check_sumIiEvT_.exit.us49
                                        #   in Loop: Header=BB127_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB127_32
.LBB127_19:                             # %.preheader.us50
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_22 Depth 2
                                        #     Child Loop BB127_25 Depth 2
	bgeu	$s0, $a5, .LBB127_21
# %bb.20:                               #   in Loop: Header=BB127_19 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB127_24
	.p2align	4, , 16
.LBB127_21:                             # %vector.body.preheader
                                        #   in Loop: Header=BB127_19 Depth=1
	ld.d	$a0, $sp, 128                   # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB127_22:                             # %vector.body
                                        #   Parent Loop BB127_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB127_22
# %bb.23:                               # %middle.block
                                        #   in Loop: Header=BB127_19 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB127_26
.LBB127_24:                             # %scalar.ph.preheader
                                        #   in Loop: Header=BB127_19 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB127_25:                             # %scalar.ph
                                        #   Parent Loop BB127_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $s6
	add.d	$a0, $a0, $a1
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB127_25
.LBB127_26:                             # %.loopexit.us51
                                        #   in Loop: Header=BB127_19 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s5
	add.w	$a1, $a1, $s4
	beq	$a0, $a1, .LBB127_18
# %bb.27:                               #   in Loop: Header=BB127_19 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB127_18
.LBB127_28:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB127_30
	.p2align	4, , 16
.LBB127_29:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB127_30 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB127_32
.LBB127_30:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB127_29
# %bb.31:                               #   in Loop: Header=BB127_30 Depth=1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB127_29
.LBB127_32:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 120                   # 8-byte Folded Reload
	beqz	$a2, .LBB127_34
# %bb.33:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB127_36
.LBB127_34:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB127_37
# %bb.35:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB127_36:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI127_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI127_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 200                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 208                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 216                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 224
	ret
.LBB127_37:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end127:
	.size	_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc, .Lfunc_end127-_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc
.LCPI128_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI128_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$fp, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a4, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a1, %pc_hi20(current_test)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	blt	$a4, $a0, .LBB128_32
# %bb.1:                                # %.lr.ph
	move	$a5, $fp
	ori	$a0, $zero, 17
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	blt	$fp, $a0, .LBB128_16
# %bb.2:                                # %.preheader38.us.preheader
	addi.d	$a2, $a5, -16
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -61681
	ori	$a2, $a2, 241
	lu32i.d	$a2, 61680
	lu52i.d	$a2, $a2, -241
	mulh.du	$a2, $a0, $a2
	addi.w	$a3, $zero, -16
	and	$a3, $a2, $a3
	srli.d	$a2, $a2, 4
	add.d	$a2, $a3, $a2
	sub.d	$a2, $a0, $a2
	sub.d	$a0, $a2, $a0
	add.d	$a0, $a5, $a0
	addi.d	$a0, $a0, -17
	move	$s7, $zero
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 84
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 518386
	ori	$s3, $a0, 1336
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	b	.LBB128_4
	.p2align	4, , 16
.LBB128_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB128_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a4, .LBB128_32
.LBB128_4:                              # %.preheader38.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_5 Depth 2
                                        #     Child Loop BB128_9 Depth 2
                                        #     Child Loop BB128_12 Depth 2
	move	$s0, $a4
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 17
	ld.d	$a6, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB128_5:                              #   Parent Loop BB128_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$s6, $a5, 52
	ld.w	$s8, $a5, 56
	ld.w	$a1, $a5, 60
	ld.w	$a5, $a5, 64
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a6, $a6, $s6
	add.d	$a6, $a6, $s8
	add.d	$a1, $a6, $a1
	add.d	$a1, $a1, $a5
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s3
	addi.d	$a4, $a4, 17
	addi.d	$a5, $a0, 17
	addi.d	$a6, $a3, 68
	bltu	$a4, $s2, .LBB128_5
# %bb.6:                                # %.loopexit39.us
                                        #   in Loop: Header=BB128_4 Depth=1
	addi.w	$a1, $a4, 0
	ld.d	$a5, $sp, 112                   # 8-byte Folded Reload
	bge	$a1, $a5, .LBB128_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB128_4 Depth=1
	move	$a4, $s0
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	ori	$a6, $zero, 8
	bltu	$a1, $a6, .LBB128_11
# %bb.8:                                # %vector.ph79
                                        #   in Loop: Header=BB128_4 Depth=1
	pcalau12i	$a1, %pc_hi20(.LCPI128_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI128_0)
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a1
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB128_9:                              # %vector.body82
                                        #   Parent Loop BB128_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB128_9
# %bb.10:                               # %middle.block89
                                        #   in Loop: Header=BB128_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	beq	$a1, $a3, .LBB128_14
.LBB128_11:                             # %.preheader.us.preheader94
                                        #   in Loop: Header=BB128_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $a5, $a0
	.p2align	4, , 16
.LBB128_12:                             # %.preheader.us
                                        #   Parent Loop BB128_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a3, 0
	mul.d	$a1, $a1, $s4
	add.d	$a1, $a2, $a1
	add.w	$a2, $a1, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB128_12
	b	.LBB128_14
	.p2align	4, , 16
.LBB128_13:                             #   in Loop: Header=BB128_4 Depth=1
	move	$a4, $s0
.LBB128_14:                             # %.loopexit.us
                                        #   in Loop: Header=BB128_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a1
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	add.w	$a0, $a0, $a1
	beq	$a2, $a0, .LBB128_3
# %bb.15:                               #   in Loop: Header=BB128_4 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB128_3
.LBB128_16:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$a5, .LBB128_28
# %bb.17:                               # %.preheader.us49.preheader
	bstrpick.d	$a0, $a5, 30, 3
	slli.d	$s3, $a0, 3
	addi.d	$s0, $s1, 16
	ori	$a6, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s6, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s6
	vreplgr2vr.w	$vr5, $s7
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB128_19
	.p2align	4, , 16
.LBB128_18:                             # %_Z9check_sumIiEvT_.exit.us48
                                        #   in Loop: Header=BB128_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB128_32
.LBB128_19:                             # %.preheader.us49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_22 Depth 2
                                        #     Child Loop BB128_25 Depth 2
	bgeu	$a5, $a6, .LBB128_21
# %bb.20:                               #   in Loop: Header=BB128_19 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB128_24
	.p2align	4, , 16
.LBB128_21:                             # %vector.body.preheader
                                        #   in Loop: Header=BB128_19 Depth=1
	move	$a0, $s0
	move	$a2, $s3
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB128_22:                             # %vector.body
                                        #   Parent Loop BB128_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB128_22
# %bb.23:                               # %middle.block
                                        #   in Loop: Header=BB128_19 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $a5, .LBB128_26
.LBB128_24:                             # %scalar.ph.preheader
                                        #   in Loop: Header=BB128_19 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $a5, $a3
	.p2align	4, , 16
.LBB128_25:                             # %scalar.ph
                                        #   Parent Loop BB128_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $s6
	add.d	$a0, $a0, $a1
	add.w	$a0, $a0, $s7
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB128_25
.LBB128_26:                             # %.loopexit.us50
                                        #   in Loop: Header=BB128_19 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s5
	add.w	$a1, $a1, $s4
	beq	$a0, $a1, .LBB128_18
# %bb.27:                               #   in Loop: Header=BB128_19 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ori	$a6, $zero, 8
	ld.d	$a5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB128_18
.LBB128_28:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB128_30
	.p2align	4, , 16
.LBB128_29:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB128_30 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a4, .LBB128_32
.LBB128_30:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB128_29
# %bb.31:                               #   in Loop: Header=BB128_30 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a4, $a0, %pc_lo12(iterations)
	b	.LBB128_29
.LBB128_32:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 104                   # 8-byte Folded Reload
	beqz	$a2, .LBB128_34
# %bb.33:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB128_36
.LBB128_34:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB128_37
# %bb.35:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB128_36:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI128_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI128_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB128_37:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end128:
	.size	_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc, .Lfunc_end128-_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc
.LCPI129_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI129_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 88                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 96                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB129_26
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 16
	blt	$s0, $a0, .LBB129_15
# %bb.2:                                # %.preheader37.us.preheader
	move	$s2, $zero
	addi.d	$a2, $s0, -15
	bstrpick.d	$s6, $a2, 31, 0
	addi.d	$a2, $s0, -16
	sltu	$a3, $a0, $s6
	masknez	$a0, $a0, $a3
	maskeqz	$a3, $s6, $a3
	or	$a0, $a3, $a0
	addi.d	$a0, $a0, -1
	addi.w	$a3, $zero, -16
	and	$a0, $a0, $a3
	sub.d	$a3, $a2, $a0
	andi	$a4, $s0, 7
	st.d	$a3, $sp, 56                    # 8-byte Folded Spill
	sub.d	$a3, $a3, $a4
	st.d	$a3, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a3, $s1, 80
	st.d	$a3, $sp, 80                    # 8-byte Folded Spill
	st.d	$a4, $sp, 48                    # 8-byte Folded Spill
	sub.d	$a2, $a2, $a4
	sub.d	$a0, $a2, $a0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -252279
	ori	$s8, $a0, 2944
	lu12i.w	$a0, -277912
	ori	$s7, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	b	.LBB129_4
	.p2align	4, , 16
.LBB129_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB129_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB129_26
.LBB129_4:                              # %.preheader37.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_5 Depth 2
                                        #     Child Loop BB129_9 Depth 2
                                        #     Child Loop BB129_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 16
	ld.d	$a6, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB129_5:                              #   Parent Loop BB129_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$s4, $a5, 48
	ld.w	$s3, $a5, 52
	ld.w	$s5, $a5, 56
	ld.w	$a5, $a5, 60
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $s4
	add.d	$a6, $a6, $s3
	add.d	$a6, $a6, $s5
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $fp
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s8
	addi.d	$a4, $a4, 16
	addi.d	$a5, $a0, 16
	addi.d	$a6, $a3, 64
	bltu	$a4, $s6, .LBB129_5
# %bb.6:                                # %.loopexit38.us
                                        #   in Loop: Header=BB129_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB129_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB129_4 Depth=1
	ld.d	$a4, $sp, 56                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB129_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB129_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI129_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI129_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB129_9:                              # %vector.body
                                        #   Parent Loop BB129_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s7
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB129_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB129_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	beqz	$a3, .LBB129_13
.LBB129_11:                             # %.preheader.us.preheader76
                                        #   in Loop: Header=BB129_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB129_12:                             # %.preheader.us
                                        #   Parent Loop BB129_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $fp
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s7
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB129_12
.LBB129_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB129_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a3, $sp, 72                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a3
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	add.w	$a0, $a0, $a3
	beq	$a2, $a0, .LBB129_3
# %bb.14:                               #   in Loop: Header=BB129_4 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB129_3
.LBB129_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB129_22
# %bb.16:                               # %.preheader.us48.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB129_18
	.p2align	4, , 16
.LBB129_17:                             # %_Z9check_sumIiEvT_.exit.us47
                                        #   in Loop: Header=BB129_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB129_26
.LBB129_18:                             # %.preheader.us48
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB129_19:                             #   Parent Loop BB129_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB129_19
# %bb.20:                               # %.loopexit.us49
                                        #   in Loop: Header=BB129_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB129_17
# %bb.21:                               #   in Loop: Header=BB129_18 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB129_17
.LBB129_22:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB129_24
	.p2align	4, , 16
.LBB129_23:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB129_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB129_26
.LBB129_24:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB129_23
# %bb.25:                               #   in Loop: Header=BB129_24 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB129_23
.LBB129_26:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	beqz	$a2, .LBB129_28
# %bb.27:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB129_30
.LBB129_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB129_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB129_30:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI129_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI129_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB129_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end129:
	.size	_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc, .Lfunc_end129-_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc
.LCPI130_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI130_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB130_26
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 15
	blt	$s0, $a0, .LBB130_15
# %bb.2:                                # %.preheader36.us.preheader
	addi.d	$a2, $s0, -14
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -489336
	ori	$a2, $a2, 2185
	lu32i.d	$a2, -489336
	lu52i.d	$a2, $a2, -1912
	mulh.du	$a0, $a0, $a2
	srli.d	$a0, $a0, 3
	slli.d	$a2, $a0, 4
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -15
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 76
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 25633
	ori	$s3, $a0, 456
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB130_4
	.p2align	4, , 16
.LBB130_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB130_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB130_26
.LBB130_4:                              # %.preheader36.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_5 Depth 2
                                        #     Child Loop BB130_9 Depth 2
                                        #     Child Loop BB130_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 15
	ld.d	$a6, $sp, 64                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB130_5:                              #   Parent Loop BB130_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$s6, $a5, 52
	ld.w	$a5, $a5, 56
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a6, $a6, $s6
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 15
	addi.d	$a5, $a0, 15
	addi.d	$a6, $a3, 60
	bltu	$a4, $s2, .LBB130_5
# %bb.6:                                # %.loopexit37.us
                                        #   in Loop: Header=BB130_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB130_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB130_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB130_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB130_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI130_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI130_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB130_9:                              # %vector.body
                                        #   Parent Loop BB130_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB130_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB130_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB130_13
.LBB130_11:                             # %.preheader.us.preheader75
                                        #   in Loop: Header=BB130_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB130_12:                             # %.preheader.us
                                        #   Parent Loop BB130_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB130_12
.LBB130_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB130_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	mul.d	$a0, $a0, $a3
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB130_3
# %bb.14:                               #   in Loop: Header=BB130_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB130_3
.LBB130_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB130_22
# %bb.16:                               # %.preheader.us47.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB130_18
	.p2align	4, , 16
.LBB130_17:                             # %_Z9check_sumIiEvT_.exit.us46
                                        #   in Loop: Header=BB130_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB130_26
.LBB130_18:                             # %.preheader.us47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB130_19:                             #   Parent Loop BB130_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB130_19
# %bb.20:                               # %.loopexit.us48
                                        #   in Loop: Header=BB130_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB130_17
# %bb.21:                               #   in Loop: Header=BB130_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB130_17
.LBB130_22:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB130_24
	.p2align	4, , 16
.LBB130_23:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB130_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB130_26
.LBB130_24:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB130_23
# %bb.25:                               #   in Loop: Header=BB130_24 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB130_23
.LBB130_26:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB130_28
# %bb.27:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB130_30
.LBB130_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB130_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB130_30:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI130_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI130_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB130_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end130:
	.size	_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc, .Lfunc_end130-_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc
.LCPI131_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI131_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB131_26
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 14
	blt	$s0, $a0, .LBB131_15
# %bb.2:                                # %.preheader35.us.preheader
	addi.d	$a2, $s0, -13
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	srli.d	$a3, $a2, 1
	lu12i.w	$a4, 149796
	ori	$a4, $a4, 2341
	lu32i.d	$a4, 299593
	lu52i.d	$a4, $a4, 1170
	mulh.du	$a3, $a3, $a4
	srli.d	$a3, $a3, 1
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -14
	move	$s7, $zero
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$a0, $s1, 72
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 303544
	ori	$s3, $a0, 2064
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB131_4
	.p2align	4, , 16
.LBB131_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB131_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB131_26
.LBB131_4:                              # %.preheader35.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_5 Depth 2
                                        #     Child Loop BB131_9 Depth 2
                                        #     Child Loop BB131_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 14
	ld.d	$a6, $sp, 48                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB131_5:                              #   Parent Loop BB131_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$fp, $a5, 48
	ld.w	$a5, $a5, 52
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a6, $a6, $fp
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 14
	addi.d	$a5, $a0, 14
	addi.d	$a6, $a3, 56
	bltu	$a4, $s2, .LBB131_5
# %bb.6:                                # %.loopexit36.us
                                        #   in Loop: Header=BB131_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB131_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB131_4 Depth=1
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB131_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB131_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI131_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI131_0)
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB131_9:                              # %vector.body
                                        #   Parent Loop BB131_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB131_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB131_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB131_13
.LBB131_11:                             # %.preheader.us.preheader74
                                        #   in Loop: Header=BB131_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB131_12:                             # %.preheader.us
                                        #   Parent Loop BB131_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB131_12
.LBB131_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB131_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB131_3
# %bb.14:                               #   in Loop: Header=BB131_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB131_3
.LBB131_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB131_22
# %bb.16:                               # %.preheader.us46.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB131_18
	.p2align	4, , 16
.LBB131_17:                             # %_Z9check_sumIiEvT_.exit.us45
                                        #   in Loop: Header=BB131_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB131_26
.LBB131_18:                             # %.preheader.us46
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB131_19:                             #   Parent Loop BB131_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB131_19
# %bb.20:                               # %.loopexit.us47
                                        #   in Loop: Header=BB131_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB131_17
# %bb.21:                               #   in Loop: Header=BB131_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB131_17
.LBB131_22:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB131_24
	.p2align	4, , 16
.LBB131_23:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB131_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB131_26
.LBB131_24:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB131_23
# %bb.25:                               #   in Loop: Header=BB131_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB131_23
.LBB131_26:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB131_28
# %bb.27:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB131_30
.LBB131_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB131_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB131_30:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI131_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI131_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB131_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end131:
	.size	_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc, .Lfunc_end131-_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc
.LCPI132_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI132_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 40                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 48                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB132_26
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 13
	blt	$s0, $a0, .LBB132_15
# %bb.2:                                # %.preheader34.us.preheader
	addi.d	$a2, $s0, -12
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -241980
	ori	$a3, $a3, 3781
	lu32i.d	$a3, 322638
	lu52i.d	$a3, $a3, 1260
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 2
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$s8, $a0, -13
	move	$s7, $zero
	st.d	$s8, $sp, 32                    # 8-byte Folded Spill
	bstrins.d	$s8, $zero, 2, 0
	addi.d	$fp, $s1, 68
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	b	.LBB132_4
	.p2align	4, , 16
.LBB132_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB132_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB132_26
.LBB132_4:                              # %.preheader34.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB132_5 Depth 2
                                        #     Child Loop BB132_9 Depth 2
                                        #     Child Loop BB132_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 13
	move	$a6, $fp
	.p2align	4, , 16
.LBB132_5:                              #   Parent Loop BB132_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$ra, $a5, 44
	ld.w	$a5, $a5, 48
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.w	$a6, $a6, $t8
	add.d	$a6, $a6, $ra
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	addu16i.d	$a2, $a2, -29195
	addi.w	$a2, $a2, -424
	addi.d	$a4, $a4, 13
	addi.d	$a5, $a0, 13
	addi.d	$a6, $a3, 52
	bltu	$a4, $s2, .LBB132_5
# %bb.6:                                # %.loopexit35.us
                                        #   in Loop: Header=BB132_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB132_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB132_4 Depth=1
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB132_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB132_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI132_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI132_0)
	add.d	$a0, $a0, $s8
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $s8
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB132_9:                              # %vector.body
                                        #   Parent Loop BB132_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s3
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB132_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB132_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	beq	$a3, $s8, .LBB132_13
.LBB132_11:                             # %.preheader.us.preheader73
                                        #   in Loop: Header=BB132_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB132_12:                             # %.preheader.us
                                        #   Parent Loop BB132_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s3
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB132_12
.LBB132_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB132_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s5
	add.w	$a0, $a0, $s6
	beq	$a2, $a0, .LBB132_3
# %bb.14:                               #   in Loop: Header=BB132_4 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB132_3
.LBB132_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB132_22
# %bb.16:                               # %.preheader.us45.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB132_18
	.p2align	4, , 16
.LBB132_17:                             # %_Z9check_sumIiEvT_.exit.us44
                                        #   in Loop: Header=BB132_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB132_26
.LBB132_18:                             # %.preheader.us45
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB132_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB132_19:                             #   Parent Loop BB132_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB132_19
# %bb.20:                               # %.loopexit.us46
                                        #   in Loop: Header=BB132_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB132_17
# %bb.21:                               #   in Loop: Header=BB132_18 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB132_17
.LBB132_22:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB132_24
	.p2align	4, , 16
.LBB132_23:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB132_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB132_26
.LBB132_24:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB132_23
# %bb.25:                               #   in Loop: Header=BB132_24 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB132_23
.LBB132_26:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	beqz	$a2, .LBB132_28
# %bb.27:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB132_30
.LBB132_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB132_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB132_30:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI132_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI132_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB132_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end132:
	.size	_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc, .Lfunc_end132-_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc
.LCPI133_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI133_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB133_26
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 12
	blt	$s0, $a0, .LBB133_15
# %bb.2:                                # %.preheader33.us.preheader
	addi.d	$a2, $s0, -11
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -349526
	ori	$a3, $a3, 2731
	lu32i.d	$a3, -349526
	lu52i.d	$a3, $a3, -1366
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 3
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -12
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 64
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -189209
	ori	$s3, $a0, 1184
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB133_4
	.p2align	4, , 16
.LBB133_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB133_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB133_26
.LBB133_4:                              # %.preheader33.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB133_5 Depth 2
                                        #     Child Loop BB133_9 Depth 2
                                        #     Child Loop BB133_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 12
	move	$a6, $fp
	.p2align	4, , 16
.LBB133_5:                              #   Parent Loop BB133_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$t8, $a5, 40
	ld.w	$a5, $a5, 44
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a6, $a6, $t8
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 12
	addi.d	$a5, $a0, 12
	addi.d	$a6, $a3, 48
	bltu	$a4, $s2, .LBB133_5
# %bb.6:                                # %.loopexit34.us
                                        #   in Loop: Header=BB133_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB133_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB133_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB133_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB133_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI133_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI133_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB133_9:                              # %vector.body
                                        #   Parent Loop BB133_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB133_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB133_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB133_13
.LBB133_11:                             # %.preheader.us.preheader72
                                        #   in Loop: Header=BB133_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB133_12:                             # %.preheader.us
                                        #   Parent Loop BB133_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB133_12
.LBB133_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB133_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB133_3
# %bb.14:                               #   in Loop: Header=BB133_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB133_3
.LBB133_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB133_22
# %bb.16:                               # %.preheader.us44.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB133_18
	.p2align	4, , 16
.LBB133_17:                             # %_Z9check_sumIiEvT_.exit.us43
                                        #   in Loop: Header=BB133_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB133_26
.LBB133_18:                             # %.preheader.us44
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB133_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB133_19:                             #   Parent Loop BB133_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB133_19
# %bb.20:                               # %.loopexit.us45
                                        #   in Loop: Header=BB133_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB133_17
# %bb.21:                               #   in Loop: Header=BB133_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB133_17
.LBB133_22:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB133_24
	.p2align	4, , 16
.LBB133_23:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB133_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB133_26
.LBB133_24:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB133_23
# %bb.25:                               #   in Loop: Header=BB133_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB133_23
.LBB133_26:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB133_28
# %bb.27:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB133_30
.LBB133_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB133_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB133_30:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI133_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI133_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB133_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end133:
	.size	_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc, .Lfunc_end133-_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN15goto_loop_testsILi10EiE7do_testEPKiPKc,"axG",@progbits,_ZN15goto_loop_testsILi10EiE7do_testEPKiPKc,comdat
	.weak	_ZN15goto_loop_testsILi10EiE7do_testEPKiPKc # -- Begin function _ZN15goto_loop_testsILi10EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN15goto_loop_testsILi10EiE7do_testEPKiPKc,@function
_ZN15goto_loop_testsILi10EiE7do_testEPKiPKc: # @_ZN15goto_loop_testsILi10EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s0, $a0, %pc_lo12(temp_string)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	move	$a0, $fp
	move	$a1, $s1
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 100
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 200
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 300
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 400
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 500
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 600
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 700
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 800
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 900
	move	$a0, $fp
	move	$a1, $s1
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end134:
	.size	_ZN15goto_loop_testsILi10EiE7do_testEPKiPKc, .Lfunc_end134-_ZN15goto_loop_testsILi10EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc
.LCPI135_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI135_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB135_26
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 11
	blt	$s0, $a0, .LBB135_15
# %bb.2:                                # %.preheader32.us.preheader
	addi.d	$a2, $s0, -10
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -285976
	ori	$a3, $a3, 2979
	lu32i.d	$a3, -285976
	lu52i.d	$a3, $a3, 744
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 1
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -11
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 60
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 88702
	ori	$s3, $a0, 2792
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB135_4
	.p2align	4, , 16
.LBB135_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB135_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB135_26
.LBB135_4:                              # %.preheader32.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_5 Depth 2
                                        #     Child Loop BB135_9 Depth 2
                                        #     Child Loop BB135_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 11
	move	$a6, $fp
	.p2align	4, , 16
.LBB135_5:                              #   Parent Loop BB135_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$t7, $a5, 36
	ld.w	$a5, $a5, 40
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a6, $a6, $t7
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 11
	addi.d	$a5, $a0, 11
	addi.d	$a6, $a3, 44
	bltu	$a4, $s2, .LBB135_5
# %bb.6:                                # %.loopexit33.us
                                        #   in Loop: Header=BB135_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB135_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB135_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB135_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB135_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI135_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI135_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB135_9:                              # %vector.body
                                        #   Parent Loop BB135_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB135_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB135_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB135_13
.LBB135_11:                             # %.preheader.us.preheader71
                                        #   in Loop: Header=BB135_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB135_12:                             # %.preheader.us
                                        #   Parent Loop BB135_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB135_12
.LBB135_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB135_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB135_3
# %bb.14:                               #   in Loop: Header=BB135_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB135_3
.LBB135_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB135_22
# %bb.16:                               # %.preheader.us43.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB135_18
	.p2align	4, , 16
.LBB135_17:                             # %_Z9check_sumIiEvT_.exit.us42
                                        #   in Loop: Header=BB135_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB135_26
.LBB135_18:                             # %.preheader.us43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB135_19:                             #   Parent Loop BB135_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB135_19
# %bb.20:                               # %.loopexit.us44
                                        #   in Loop: Header=BB135_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB135_17
# %bb.21:                               #   in Loop: Header=BB135_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB135_17
.LBB135_22:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB135_24
	.p2align	4, , 16
.LBB135_23:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB135_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB135_26
.LBB135_24:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB135_23
# %bb.25:                               #   in Loop: Header=BB135_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB135_23
.LBB135_26:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB135_28
# %bb.27:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB135_30
.LBB135_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB135_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB135_30:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI135_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI135_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB135_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end135:
	.size	_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc, .Lfunc_end135-_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc
.LCPI136_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI136_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB136_26
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 10
	blt	$s0, $a0, .LBB136_15
# %bb.2:                                # %.preheader31.us.preheader
	addi.d	$a2, $s0, -9
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -209716
	ori	$a3, $a3, 3277
	lu32i.d	$a3, -209716
	lu52i.d	$a3, $a3, -820
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 3
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -10
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 56
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 366614
	ori	$s3, $a0, 304
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB136_4
	.p2align	4, , 16
.LBB136_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB136_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB136_26
.LBB136_4:                              # %.preheader31.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_5 Depth 2
                                        #     Child Loop BB136_9 Depth 2
                                        #     Child Loop BB136_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 10
	move	$a6, $fp
	.p2align	4, , 16
.LBB136_5:                              #   Parent Loop BB136_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$t6, $a5, 32
	ld.w	$a5, $a5, 36
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a6, $a6, $t6
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 10
	addi.d	$a5, $a0, 10
	addi.d	$a6, $a3, 40
	bltu	$a4, $s2, .LBB136_5
# %bb.6:                                # %.loopexit32.us
                                        #   in Loop: Header=BB136_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB136_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB136_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB136_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB136_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI136_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI136_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB136_9:                              # %vector.body
                                        #   Parent Loop BB136_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB136_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB136_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB136_13
.LBB136_11:                             # %.preheader.us.preheader70
                                        #   in Loop: Header=BB136_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB136_12:                             # %.preheader.us
                                        #   Parent Loop BB136_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB136_12
.LBB136_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB136_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB136_3
# %bb.14:                               #   in Loop: Header=BB136_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB136_3
.LBB136_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB136_22
# %bb.16:                               # %.preheader.us42.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB136_18
	.p2align	4, , 16
.LBB136_17:                             # %_Z9check_sumIiEvT_.exit.us41
                                        #   in Loop: Header=BB136_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB136_26
.LBB136_18:                             # %.preheader.us42
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB136_19:                             #   Parent Loop BB136_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB136_19
# %bb.20:                               # %.loopexit.us43
                                        #   in Loop: Header=BB136_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB136_17
# %bb.21:                               #   in Loop: Header=BB136_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB136_17
.LBB136_22:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB136_24
	.p2align	4, , 16
.LBB136_23:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB136_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB136_26
.LBB136_24:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB136_23
# %bb.25:                               #   in Loop: Header=BB136_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB136_23
.LBB136_26:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB136_28
# %bb.27:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB136_30
.LBB136_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB136_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB136_30:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI136_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI136_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB136_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end136:
	.size	_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc, .Lfunc_end136-_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc
.LCPI137_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI137_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB137_26
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 9
	blt	$s0, $a0, .LBB137_15
# %bb.2:                                # %.preheader30.us.preheader
	move	$s2, $zero
	addi.d	$a2, $s0, -8
	bstrpick.d	$s6, $a2, 31, 0
	sltu	$a2, $a0, $s6
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s6, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -466034
	ori	$a2, $a2, 911
	lu32i.d	$a2, -116509
	lu52i.d	$a2, $a2, -456
	mulh.du	$a2, $a0, $a2
	addi.w	$a3, $zero, -8
	and	$a4, $a2, $a3
	srli.d	$a2, $a2, 3
	add.d	$a2, $a4, $a2
	sub.d	$a2, $a0, $a2
	sub.d	$a0, $a2, $a0
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -9
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	and	$a0, $a0, $a3
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 52
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -404051
	ori	$s3, $a0, 1912
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	b	.LBB137_4
	.p2align	4, , 16
.LBB137_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB137_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB137_26
.LBB137_4:                              # %.preheader30.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_5 Depth 2
                                        #     Child Loop BB137_9 Depth 2
                                        #     Child Loop BB137_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 9
	move	$a6, $fp
	.p2align	4, , 16
.LBB137_5:                              #   Parent Loop BB137_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$t5, $a5, 28
	ld.w	$a5, $a5, 32
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a6, $a6, $t5
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 9
	addi.d	$a5, $a0, 9
	addi.d	$a6, $a3, 36
	bltu	$a4, $s6, .LBB137_5
# %bb.6:                                # %.loopexit31.us
                                        #   in Loop: Header=BB137_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB137_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB137_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB137_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB137_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI137_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI137_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB137_9:                              # %vector.body
                                        #   Parent Loop BB137_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB137_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB137_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB137_13
.LBB137_11:                             # %.preheader.us.preheader69
                                        #   in Loop: Header=BB137_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB137_12:                             # %.preheader.us
                                        #   Parent Loop BB137_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB137_12
.LBB137_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB137_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s8
	add.w	$a0, $a0, $s7
	beq	$a2, $a0, .LBB137_3
# %bb.14:                               #   in Loop: Header=BB137_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB137_3
.LBB137_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB137_22
# %bb.16:                               # %.preheader.us41.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB137_18
	.p2align	4, , 16
.LBB137_17:                             # %_Z9check_sumIiEvT_.exit.us40
                                        #   in Loop: Header=BB137_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB137_26
.LBB137_18:                             # %.preheader.us41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB137_19:                             #   Parent Loop BB137_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB137_19
# %bb.20:                               # %.loopexit.us42
                                        #   in Loop: Header=BB137_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB137_17
# %bb.21:                               #   in Loop: Header=BB137_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB137_17
.LBB137_22:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB137_24
	.p2align	4, , 16
.LBB137_23:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB137_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB137_26
.LBB137_24:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB137_23
# %bb.25:                               #   in Loop: Header=BB137_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB137_23
.LBB137_26:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB137_28
# %bb.27:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB137_30
.LBB137_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB137_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB137_30:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI137_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI137_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB137_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end137:
	.size	_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc, .Lfunc_end137-_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc
.LCPI138_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI138_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB138_26
# %bb.1:                                # %.lr.ph
	ori	$t5, $zero, 8
	blt	$s0, $t5, .LBB138_15
# %bb.2:                                # %.preheader29.us.preheader
	move	$s6, $zero
	addi.d	$a0, $s0, -7
	bstrpick.d	$s7, $a0, 31, 0
	addi.d	$a0, $s0, -8
	sltu	$a2, $t5, $s7
	masknez	$a3, $t5, $a2
	maskeqz	$a2, $s7, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	addi.w	$a3, $zero, -8
	and	$a2, $a2, $a3
	sub.d	$a3, $a0, $a2
	andi	$a4, $s0, 7
	st.d	$a3, $sp, 64                    # 8-byte Folded Spill
	sub.d	$a3, $a3, $a4
	st.d	$a3, $sp, 48                    # 8-byte Folded Spill
	addi.d	$s2, $s1, 48
	st.d	$a4, $sp, 56                    # 8-byte Folded Spill
	sub.d	$a0, $a0, $a4
	sub.d	$a0, $a0, $a2
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -126140
	ori	$fp, $a0, 3520
	lu12i.w	$a0, -277912
	ori	$s8, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s5, $a0, 1536
	b	.LBB138_4
	.p2align	4, , 16
.LBB138_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB138_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB138_26
.LBB138_4:                              # %.preheader29.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_5 Depth 2
                                        #     Child Loop BB138_9 Depth 2
                                        #     Child Loop BB138_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 8
	move	$a6, $s2
	.p2align	4, , 16
.LBB138_5:                              #   Parent Loop BB138_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$t4, $a5, 24
	ld.w	$a5, $a5, 28
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a6, $a6, $t4
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $fp
	addi.d	$a4, $a4, 8
	addi.d	$a5, $a0, 8
	addi.d	$a6, $a3, 32
	bltu	$a4, $s7, .LBB138_5
# %bb.6:                                # %.loopexit30.us
                                        #   in Loop: Header=BB138_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB138_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB138_4 Depth=1
	ld.d	$a4, $sp, 64                    # 8-byte Folded Reload
	bltu	$a4, $t5, .LBB138_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB138_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI138_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI138_0)
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a2, $sp, 40                    # 8-byte Folded Reload
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB138_9:                              # %vector.body
                                        #   Parent Loop BB138_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s8
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB138_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB138_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	beqz	$a3, .LBB138_13
.LBB138_11:                             # %.preheader.us.preheader68
                                        #   in Loop: Header=BB138_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB138_12:                             # %.preheader.us
                                        #   Parent Loop BB138_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s8
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB138_12
.LBB138_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB138_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s3
	add.w	$a0, $a0, $s5
	beq	$a2, $a0, .LBB138_3
# %bb.14:                               #   in Loop: Header=BB138_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB138_3
.LBB138_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB138_22
# %bb.16:                               # %.preheader.us40.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB138_18
	.p2align	4, , 16
.LBB138_17:                             # %_Z9check_sumIiEvT_.exit.us39
                                        #   in Loop: Header=BB138_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB138_26
.LBB138_18:                             # %.preheader.us40
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB138_19:                             #   Parent Loop BB138_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB138_19
# %bb.20:                               # %.loopexit.us41
                                        #   in Loop: Header=BB138_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB138_17
# %bb.21:                               #   in Loop: Header=BB138_18 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB138_17
.LBB138_22:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB138_24
	.p2align	4, , 16
.LBB138_23:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB138_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB138_26
.LBB138_24:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB138_23
# %bb.25:                               #   in Loop: Header=BB138_24 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB138_23
.LBB138_26:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB138_28
# %bb.27:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB138_30
.LBB138_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB138_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB138_30:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI138_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI138_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB138_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end138:
	.size	_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc, .Lfunc_end138-_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc
.LCPI139_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI139_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB139_26
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 7
	blt	$s0, $a0, .LBB139_15
# %bb.2:                                # %.preheader28.us.preheader
	addi.d	$a2, $s0, -6
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -449390
	ori	$a2, $a2, 1171
	lu32i.d	$a2, 149796
	lu52i.d	$a2, $a2, 585
	mulh.du	$a2, $a0, $a2
	sub.d	$a0, $a0, $a2
	srli.d	$a0, $a0, 1
	add.d	$a0, $a0, $a2
	srli.d	$a0, $a0, 2
	slli.d	$a2, $a0, 3
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -7
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 44
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 151772
	ori	$s3, $a0, 1032
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB139_4
	.p2align	4, , 16
.LBB139_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB139_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB139_26
.LBB139_4:                              # %.preheader28.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_5 Depth 2
                                        #     Child Loop BB139_9 Depth 2
                                        #     Child Loop BB139_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 7
	move	$a6, $fp
	.p2align	4, , 16
.LBB139_5:                              #   Parent Loop BB139_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$t3, $a5, 20
	ld.w	$a5, $a5, 24
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a6, $a6, $t3
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 7
	addi.d	$a5, $a0, 7
	addi.d	$a6, $a3, 28
	bltu	$a4, $s2, .LBB139_5
# %bb.6:                                # %.loopexit29.us
                                        #   in Loop: Header=BB139_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB139_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB139_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB139_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB139_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI139_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI139_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB139_9:                              # %vector.body
                                        #   Parent Loop BB139_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB139_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB139_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB139_13
.LBB139_11:                             # %.preheader.us.preheader67
                                        #   in Loop: Header=BB139_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB139_12:                             # %.preheader.us
                                        #   Parent Loop BB139_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB139_12
.LBB139_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB139_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB139_3
# %bb.14:                               #   in Loop: Header=BB139_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB139_3
.LBB139_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB139_22
# %bb.16:                               # %.preheader.us39.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB139_18
	.p2align	4, , 16
.LBB139_17:                             # %_Z9check_sumIiEvT_.exit.us38
                                        #   in Loop: Header=BB139_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB139_26
.LBB139_18:                             # %.preheader.us39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB139_19:                             #   Parent Loop BB139_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB139_19
# %bb.20:                               # %.loopexit.us40
                                        #   in Loop: Header=BB139_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB139_17
# %bb.21:                               #   in Loop: Header=BB139_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB139_17
.LBB139_22:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB139_24
	.p2align	4, , 16
.LBB139_23:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB139_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB139_26
.LBB139_24:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB139_23
# %bb.25:                               #   in Loop: Header=BB139_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB139_23
.LBB139_26:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB139_28
# %bb.27:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB139_30
.LBB139_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB139_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB139_30:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI139_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI139_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB139_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end139:
	.size	_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc, .Lfunc_end139-_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc
.LCPI140_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI140_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB140_26
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 6
	blt	$s0, $a0, .LBB140_15
# %bb.2:                                # %.preheader27.us.preheader
	addi.d	$a2, $s0, -5
	bstrpick.d	$s2, $a2, 31, 0
	sltu	$a2, $a0, $s2
	masknez	$a3, $a0, $a2
	maskeqz	$a2, $s2, $a2
	or	$a2, $a2, $a3
	addi.d	$a2, $a2, -1
	lu12i.w	$a3, -349526
	ori	$a3, $a3, 2731
	lu32i.d	$a3, -349526
	lu52i.d	$a3, $a3, -1366
	mulh.du	$a3, $a2, $a3
	srli.d	$a3, $a3, 2
	mul.d	$a0, $a3, $a0
	sub.d	$a0, $a2, $a0
	sub.d	$a0, $a0, $a2
	add.d	$a0, $s0, $a0
	addi.d	$a0, $a0, -6
	move	$s7, $zero
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	bstrins.d	$a0, $zero, 2, 0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.d	$fp, $s1, 40
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, 429683
	ori	$s3, $a0, 2640
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB140_4
	.p2align	4, , 16
.LBB140_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB140_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB140_26
.LBB140_4:                              # %.preheader27.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB140_5 Depth 2
                                        #     Child Loop BB140_9 Depth 2
                                        #     Child Loop BB140_12 Depth 2
	move	$a4, $zero
	move	$a2, $zero
	ori	$a5, $zero, 6
	move	$a6, $fp
	.p2align	4, , 16
.LBB140_5:                              #   Parent Loop BB140_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $a5
	move	$a3, $a6
	alsl.d	$a5, $a4, $s1, 2
	slli.d	$a6, $a4, 2
	ldx.w	$a6, $s1, $a6
	ld.w	$a7, $a5, 4
	ld.w	$t0, $a5, 8
	ld.w	$t1, $a5, 12
	ld.w	$t2, $a5, 16
	ld.w	$a5, $a5, 20
	add.d	$a6, $a7, $a6
	add.d	$a6, $a6, $t0
	add.d	$a6, $a6, $t1
	add.d	$a6, $a6, $t2
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s4
	add.d	$a2, $a2, $a5
	add.w	$a2, $a2, $s3
	addi.d	$a4, $a4, 6
	addi.d	$a5, $a0, 6
	addi.d	$a6, $a3, 24
	bltu	$a4, $s2, .LBB140_5
# %bb.6:                                # %.loopexit28.us
                                        #   in Loop: Header=BB140_4 Depth=1
	addi.w	$a4, $a4, 0
	bge	$a4, $s0, .LBB140_13
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB140_4 Depth=1
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	ori	$a5, $zero, 8
	bltu	$a4, $a5, .LBB140_11
# %bb.8:                                # %vector.ph
                                        #   in Loop: Header=BB140_4 Depth=1
	pcalau12i	$a4, %pc_hi20(.LCPI140_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI140_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a4
	vinsgr2vr.w	$vr1, $a2, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	move	$a2, $a4
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB140_9:                              # %vector.body
                                        #   Parent Loop BB140_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	vreplgr2vr.w	$vr4, $s4
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a3, $a3, 32
	bnez	$a2, .LBB140_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB140_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a2, $vr0, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a3, $a4, .LBB140_13
.LBB140_11:                             # %.preheader.us.preheader66
                                        #   in Loop: Header=BB140_4 Depth=1
	alsl.d	$a3, $a0, $s1, 2
	sub.d	$a0, $s0, $a0
	.p2align	4, , 16
.LBB140_12:                             # %.preheader.us
                                        #   Parent Loop BB140_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s4
	add.d	$a2, $a2, $a4
	add.w	$a2, $a2, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB140_12
.LBB140_13:                             # %.loopexit.us
                                        #   in Loop: Header=BB140_4 Depth=1
	pcalau12i	$a0, %pc_hi20(init_value)
	fld.d	$fa0, $a0, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	mul.d	$a0, $a0, $s6
	add.w	$a0, $a0, $s8
	beq	$a2, $a0, .LBB140_3
# %bb.14:                               #   in Loop: Header=BB140_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB140_3
.LBB140_15:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB140_22
# %bb.16:                               # %.preheader.us38.preheader
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s4, $a0, 2488
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s6, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB140_18
	.p2align	4, , 16
.LBB140_17:                             # %_Z9check_sumIiEvT_.exit.us37
                                        #   in Loop: Header=BB140_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB140_26
.LBB140_18:                             # %.preheader.us38
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB140_19 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	move	$a3, $s1
	.p2align	4, , 16
.LBB140_19:                             #   Parent Loop BB140_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s4
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB140_19
# %bb.20:                               # %.loopexit.us39
                                        #   in Loop: Header=BB140_18 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s6
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB140_17
# %bb.21:                               #   in Loop: Header=BB140_18 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB140_17
.LBB140_22:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB140_24
	.p2align	4, , 16
.LBB140_23:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB140_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB140_26
.LBB140_24:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB140_23
# %bb.25:                               #   in Loop: Header=BB140_24 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB140_23
.LBB140_26:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB140_28
# %bb.27:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB140_30
.LBB140_28:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB140_31
# %bb.29:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB140_30:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI140_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI140_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB140_31:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end140:
	.size	_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc, .Lfunc_end140-_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc
.LCPI141_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI141_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 112                   # 8-byte Folded Spill
	blt	$a1, $a0, .LBB141_32
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 5
	blt	$s0, $a0, .LBB141_21
# %bb.2:                                # %.preheader26.us.preheader
	move	$s2, $zero
	addi.w	$s4, $s0, -4
	bstrpick.d	$s7, $s4, 31, 0
	sltu	$a2, $a0, $s7
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s7, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -209716
	ori	$a2, $a2, 3277
	lu32i.d	$a2, -209716
	lu52i.d	$a2, $a2, -820
	mulh.du	$a0, $a0, $a2
	srli.d	$a2, $a0, 2
	addi.w	$a3, $zero, -4
	and	$a0, $a0, $a3
	add.d	$a0, $a0, $a2
	sub.d	$a0, $s0, $a0
	addi.d	$a3, $a0, -5
	addi.d	$a0, $a2, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$fp, $a0, 3
	slli.d	$a2, $a0, 5
	alsl.d	$a0, $a0, $a2, 3
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 5
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	st.d	$a3, $sp, 88                    # 8-byte Folded Spill
	bstrins.d	$a3, $zero, 2, 0
	st.d	$a3, $sp, 32                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	addi.d	$a2, $a0, 80
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	ori	$t4, $zero, 36
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -340981
	ori	$s5, $a0, 152
	lu12i.w	$a0, -277912
	ori	$s1, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	b	.LBB141_4
	.p2align	4, , 16
.LBB141_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB141_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB141_32
.LBB141_4:                              # %.preheader26.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_7 Depth 2
                                        #     Child Loop BB141_10 Depth 2
                                        #     Child Loop BB141_15 Depth 2
                                        #     Child Loop BB141_18 Depth 2
	bgeu	$s4, $t4, .LBB141_6
# %bb.5:                                #   in Loop: Header=BB141_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	ori	$a4, $zero, 5
	b	.LBB141_9
	.p2align	4, , 16
.LBB141_6:                              # %vector.body70.preheader
                                        #   in Loop: Header=BB141_4 Depth=1
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	move	$a2, $fp
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB141_7:                              # %vector.body70
                                        #   Parent Loop BB141_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -80
	ld.w	$a4, $a0, -60
	ld.w	$a5, $a0, -40
	ld.w	$a6, $a0, -20
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 20
	ld.w	$a5, $a0, 40
	ld.w	$a6, $a0, 60
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -76
	ld.w	$a4, $a0, -56
	ld.w	$a5, $a0, -36
	ld.w	$a6, $a0, -16
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 24
	ld.w	$a5, $a0, 44
	ld.w	$a6, $a0, 64
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	ld.w	$a3, $a0, -72
	ld.w	$a4, $a0, -52
	ld.w	$a5, $a0, -32
	ld.w	$a6, $a0, -12
	vinsgr2vr.w	$vr6, $a3, 0
	vinsgr2vr.w	$vr6, $a4, 1
	vinsgr2vr.w	$vr6, $a5, 2
	vinsgr2vr.w	$vr6, $a6, 3
	ld.w	$a3, $a0, 8
	ld.w	$a4, $a0, 28
	ld.w	$a5, $a0, 48
	ld.w	$a6, $a0, 68
	vinsgr2vr.w	$vr7, $a3, 0
	vinsgr2vr.w	$vr7, $a4, 1
	vinsgr2vr.w	$vr7, $a5, 2
	vinsgr2vr.w	$vr7, $a6, 3
	ld.w	$a3, $a0, -68
	ld.w	$a4, $a0, -48
	ld.w	$a5, $a0, -28
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr8, $a3, 0
	vinsgr2vr.w	$vr8, $a4, 1
	vinsgr2vr.w	$vr8, $a5, 2
	vinsgr2vr.w	$vr8, $a6, 3
	ld.w	$a3, $a0, 12
	ld.w	$a4, $a0, 32
	ld.w	$a5, $a0, 52
	ld.w	$a6, $a0, 72
	vinsgr2vr.w	$vr9, $a3, 0
	vinsgr2vr.w	$vr9, $a4, 1
	vinsgr2vr.w	$vr9, $a5, 2
	vinsgr2vr.w	$vr9, $a6, 3
	ld.w	$a3, $a0, -64
	ld.w	$a4, $a0, -44
	ld.w	$a5, $a0, -24
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr10, $a3, 0
	vinsgr2vr.w	$vr10, $a4, 1
	vinsgr2vr.w	$vr10, $a5, 2
	vinsgr2vr.w	$vr10, $a6, 3
	ld.w	$a3, $a0, 16
	ld.w	$a4, $a0, 36
	ld.w	$a5, $a0, 56
	ld.w	$a6, $a0, 76
	vinsgr2vr.w	$vr11, $a3, 0
	vinsgr2vr.w	$vr11, $a4, 1
	vinsgr2vr.w	$vr11, $a5, 2
	vinsgr2vr.w	$vr11, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vadd.w	$vr2, $vr2, $vr6
	vadd.w	$vr3, $vr3, $vr7
	vadd.w	$vr2, $vr2, $vr8
	vadd.w	$vr3, $vr3, $vr9
	vadd.w	$vr2, $vr2, $vr10
	vadd.w	$vr3, $vr3, $vr11
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 160
	bnez	$a2, .LBB141_7
# %bb.8:                                # %middle.block76
                                        #   in Loop: Header=BB141_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	move	$a3, $a2
	ld.d	$a5, $sp, 56                    # 8-byte Folded Reload
	beq	$a5, $fp, .LBB141_11
.LBB141_9:                              # %scalar.ph65.preheader
                                        #   in Loop: Header=BB141_4 Depth=1
	addi.d	$a2, $a4, -5
	ld.d	$a4, $sp, 80                    # 8-byte Folded Reload
	alsl.d	$a4, $a3, $a4, 2
	.p2align	4, , 16
.LBB141_10:                             # %scalar.ph65
                                        #   Parent Loop BB141_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -8
	ld.w	$a6, $a4, -4
	ld.w	$a7, $a4, 0
	ld.w	$t0, $a4, 4
	ld.w	$t1, $a4, 8
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	mul.d	$a5, $a5, $s3
	add.d	$a0, $a0, $a5
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, 5
	addi.d	$a2, $a2, 5
	addi.d	$a4, $a4, 20
	bltu	$a3, $s7, .LBB141_10
.LBB141_11:                             # %.loopexit27.us
                                        #   in Loop: Header=BB141_4 Depth=1
	addi.w	$a3, $a3, 0
	bge	$a3, $s0, .LBB141_19
# %bb.12:                               # %.preheader.us.preheader
                                        #   in Loop: Header=BB141_4 Depth=1
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bgeu	$a3, $a4, .LBB141_14
# %bb.13:                               #   in Loop: Header=BB141_4 Depth=1
	move	$a3, $a2
	b	.LBB141_17
	.p2align	4, , 16
.LBB141_14:                             # %vector.ph
                                        #   in Loop: Header=BB141_4 Depth=1
	pcalau12i	$a3, %pc_hi20(.LCPI141_0)
	vld	$vr0, $a3, %pc_lo12(.LCPI141_0)
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	add.d	$a3, $a2, $a4
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a4
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB141_15:                             # %vector.body
                                        #   Parent Loop BB141_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB141_15
# %bb.16:                               # %middle.block
                                        #   in Loop: Header=BB141_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	beq	$a2, $a4, .LBB141_19
.LBB141_17:                             # %.preheader.us.preheader82
                                        #   in Loop: Header=BB141_4 Depth=1
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB141_18:                             # %.preheader.us
                                        #   Parent Loop BB141_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s1
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB141_18
.LBB141_19:                             # %.loopexit.us
                                        #   in Loop: Header=BB141_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB141_3
# %bb.20:                               #   in Loop: Header=BB141_4 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t4, $zero, 36
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB141_3
.LBB141_21:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB141_28
# %bb.22:                               # %.preheader.us37.preheader
	lu12i.w	$a0, 65881
	ori	$s1, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB141_24
	.p2align	4, , 16
.LBB141_23:                             # %_Z9check_sumIiEvT_.exit.us36
                                        #   in Loop: Header=BB141_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB141_32
.LBB141_24:                             # %.preheader.us37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_25 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	.p2align	4, , 16
.LBB141_25:                             #   Parent Loop BB141_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB141_25
# %bb.26:                               # %.loopexit.us38
                                        #   in Loop: Header=BB141_24 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB141_23
# %bb.27:                               #   in Loop: Header=BB141_24 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB141_23
.LBB141_28:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB141_30
	.p2align	4, , 16
.LBB141_29:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB141_30 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB141_32
.LBB141_30:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB141_29
# %bb.31:                               #   in Loop: Header=BB141_30 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB141_29
.LBB141_32:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB141_34
# %bb.33:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB141_36
.LBB141_34:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB141_37
# %bb.35:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB141_36:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI141_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI141_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB141_37:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end141:
	.size	_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc, .Lfunc_end141-_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc
.LCPI142_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI142_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 112                   # 8-byte Folded Spill
	blt	$a1, $a0, .LBB142_32
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 4
	blt	$s0, $a0, .LBB142_21
# %bb.2:                                # %.preheader25.us.preheader
	move	$s2, $zero
	addi.w	$s4, $s0, -3
	bstrpick.d	$s7, $s4, 31, 0
	sltu	$a2, $a0, $s7
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s7, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	srli.d	$a2, $a0, 2
	bstrins.d	$a0, $zero, 1, 0
	sub.d	$a0, $s0, $a0
	addi.d	$a3, $a0, -4
	addi.d	$a0, $a2, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$fp, $a0, 3
	slli.d	$a0, $a0, 5
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 4
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	st.d	$a3, $sp, 88                    # 8-byte Folded Spill
	bstrins.d	$a3, $zero, 2, 0
	st.d	$a3, $sp, 32                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	addi.d	$a2, $a0, 64
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	ori	$t3, $zero, 29
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -63070
	ori	$s5, $a0, 1760
	lu12i.w	$a0, -277912
	ori	$s1, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	b	.LBB142_4
	.p2align	4, , 16
.LBB142_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB142_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB142_32
.LBB142_4:                              # %.preheader25.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB142_7 Depth 2
                                        #     Child Loop BB142_10 Depth 2
                                        #     Child Loop BB142_15 Depth 2
                                        #     Child Loop BB142_18 Depth 2
	bgeu	$s4, $t3, .LBB142_6
# %bb.5:                                #   in Loop: Header=BB142_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	ori	$a4, $zero, 4
	b	.LBB142_9
	.p2align	4, , 16
.LBB142_6:                              # %vector.body69.preheader
                                        #   in Loop: Header=BB142_4 Depth=1
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	move	$a2, $fp
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB142_7:                              # %vector.body69
                                        #   Parent Loop BB142_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -64
	ld.w	$a4, $a0, -48
	ld.w	$a5, $a0, -32
	ld.w	$a6, $a0, -16
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 16
	ld.w	$a5, $a0, 32
	ld.w	$a6, $a0, 48
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -60
	ld.w	$a4, $a0, -44
	ld.w	$a5, $a0, -28
	ld.w	$a6, $a0, -12
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 20
	ld.w	$a5, $a0, 36
	ld.w	$a6, $a0, 52
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	ld.w	$a3, $a0, -56
	ld.w	$a4, $a0, -40
	ld.w	$a5, $a0, -24
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr6, $a3, 0
	vinsgr2vr.w	$vr6, $a4, 1
	vinsgr2vr.w	$vr6, $a5, 2
	vinsgr2vr.w	$vr6, $a6, 3
	ld.w	$a3, $a0, 8
	ld.w	$a4, $a0, 24
	ld.w	$a5, $a0, 40
	ld.w	$a6, $a0, 56
	vinsgr2vr.w	$vr7, $a3, 0
	vinsgr2vr.w	$vr7, $a4, 1
	vinsgr2vr.w	$vr7, $a5, 2
	vinsgr2vr.w	$vr7, $a6, 3
	ld.w	$a3, $a0, -52
	ld.w	$a4, $a0, -36
	ld.w	$a5, $a0, -20
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr8, $a3, 0
	vinsgr2vr.w	$vr8, $a4, 1
	vinsgr2vr.w	$vr8, $a5, 2
	vinsgr2vr.w	$vr8, $a6, 3
	ld.w	$a3, $a0, 12
	ld.w	$a4, $a0, 28
	ld.w	$a5, $a0, 44
	ld.w	$a6, $a0, 60
	vinsgr2vr.w	$vr9, $a3, 0
	vinsgr2vr.w	$vr9, $a4, 1
	vinsgr2vr.w	$vr9, $a5, 2
	vinsgr2vr.w	$vr9, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vadd.w	$vr2, $vr2, $vr6
	vadd.w	$vr3, $vr3, $vr7
	vadd.w	$vr2, $vr2, $vr8
	vadd.w	$vr3, $vr3, $vr9
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 128
	bnez	$a2, .LBB142_7
# %bb.8:                                # %middle.block75
                                        #   in Loop: Header=BB142_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	move	$a3, $a2
	ld.d	$a5, $sp, 56                    # 8-byte Folded Reload
	beq	$a5, $fp, .LBB142_11
.LBB142_9:                              # %scalar.ph64.preheader
                                        #   in Loop: Header=BB142_4 Depth=1
	addi.d	$a2, $a4, -4
	ld.d	$a4, $sp, 80                    # 8-byte Folded Reload
	alsl.d	$a4, $a3, $a4, 2
	.p2align	4, , 16
.LBB142_10:                             # %scalar.ph64
                                        #   Parent Loop BB142_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -8
	ld.w	$a6, $a4, -4
	ld.w	$a7, $a4, 0
	ld.w	$t0, $a4, 4
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	mul.d	$a5, $a5, $s3
	add.d	$a0, $a0, $a5
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, 4
	addi.d	$a2, $a2, 4
	addi.d	$a4, $a4, 16
	bltu	$a3, $s7, .LBB142_10
.LBB142_11:                             # %.loopexit26.us
                                        #   in Loop: Header=BB142_4 Depth=1
	addi.w	$a3, $a3, 0
	bge	$a3, $s0, .LBB142_19
# %bb.12:                               # %.preheader.us.preheader
                                        #   in Loop: Header=BB142_4 Depth=1
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bgeu	$a3, $a4, .LBB142_14
# %bb.13:                               #   in Loop: Header=BB142_4 Depth=1
	move	$a3, $a2
	b	.LBB142_17
	.p2align	4, , 16
.LBB142_14:                             # %vector.ph
                                        #   in Loop: Header=BB142_4 Depth=1
	pcalau12i	$a3, %pc_hi20(.LCPI142_0)
	vld	$vr0, $a3, %pc_lo12(.LCPI142_0)
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	add.d	$a3, $a2, $a4
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a4
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB142_15:                             # %vector.body
                                        #   Parent Loop BB142_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB142_15
# %bb.16:                               # %middle.block
                                        #   in Loop: Header=BB142_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	beq	$a2, $a4, .LBB142_19
.LBB142_17:                             # %.preheader.us.preheader81
                                        #   in Loop: Header=BB142_4 Depth=1
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB142_18:                             # %.preheader.us
                                        #   Parent Loop BB142_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s1
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB142_18
.LBB142_19:                             # %.loopexit.us
                                        #   in Loop: Header=BB142_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB142_3
# %bb.20:                               #   in Loop: Header=BB142_4 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t3, $zero, 29
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB142_3
.LBB142_21:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB142_28
# %bb.22:                               # %.preheader.us36.preheader
	lu12i.w	$a0, 65881
	ori	$s1, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB142_24
	.p2align	4, , 16
.LBB142_23:                             # %_Z9check_sumIiEvT_.exit.us35
                                        #   in Loop: Header=BB142_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB142_32
.LBB142_24:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB142_25 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	.p2align	4, , 16
.LBB142_25:                             #   Parent Loop BB142_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB142_25
# %bb.26:                               # %.loopexit.us37
                                        #   in Loop: Header=BB142_24 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB142_23
# %bb.27:                               #   in Loop: Header=BB142_24 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB142_23
.LBB142_28:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB142_30
	.p2align	4, , 16
.LBB142_29:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB142_30 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB142_32
.LBB142_30:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB142_29
# %bb.31:                               #   in Loop: Header=BB142_30 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB142_29
.LBB142_32:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB142_34
# %bb.33:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB142_36
.LBB142_34:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB142_37
# %bb.35:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB142_36:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI142_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI142_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB142_37:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end142:
	.size	_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc, .Lfunc_end142-_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc
.LCPI143_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI143_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 112                   # 8-byte Folded Spill
	blt	$a1, $a0, .LBB143_32
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 3
	blt	$s0, $a0, .LBB143_21
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s4, $s0, -2
	bstrpick.d	$s7, $s4, 31, 0
	sltu	$a2, $a0, $s7
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s7, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -349526
	ori	$a2, $a2, 2731
	lu32i.d	$a2, -349526
	lu52i.d	$a2, $a2, -1366
	mulh.du	$a0, $a0, $a2
	srli.d	$a2, $a0, 1
	addi.w	$a3, $zero, -2
	and	$a0, $a0, $a3
	add.d	$a0, $a0, $a2
	sub.d	$a0, $s0, $a0
	addi.d	$a3, $a0, -3
	addi.d	$a0, $a2, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$fp, $a0, 3
	slli.d	$a2, $a0, 4
	alsl.d	$a0, $a0, $a2, 3
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 3
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	st.d	$a3, $sp, 88                    # 8-byte Folded Spill
	bstrins.d	$a3, $zero, 2, 0
	st.d	$a3, $sp, 32                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	addi.d	$a2, $a0, 48
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	ori	$t2, $zero, 22
	lu12i.w	$a0, 65881
	ori	$s1, $a0, 1957
	lu12i.w	$a0, 214841
	ori	$s3, $a0, 3368
	lu12i.w	$a0, -277912
	ori	$s5, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	b	.LBB143_4
	.p2align	4, , 16
.LBB143_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB143_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB143_32
.LBB143_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB143_7 Depth 2
                                        #     Child Loop BB143_10 Depth 2
                                        #     Child Loop BB143_15 Depth 2
                                        #     Child Loop BB143_18 Depth 2
	bgeu	$s4, $t2, .LBB143_6
# %bb.5:                                #   in Loop: Header=BB143_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	ori	$a4, $zero, 3
	b	.LBB143_9
	.p2align	4, , 16
.LBB143_6:                              # %vector.body68.preheader
                                        #   in Loop: Header=BB143_4 Depth=1
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	move	$a2, $fp
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB143_7:                              # %vector.body68
                                        #   Parent Loop BB143_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -48
	ld.w	$a4, $a0, -36
	ld.w	$a5, $a0, -24
	ld.w	$a6, $a0, -12
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 12
	ld.w	$a5, $a0, 24
	ld.w	$a6, $a0, 36
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -44
	ld.w	$a4, $a0, -32
	ld.w	$a5, $a0, -20
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 16
	ld.w	$a5, $a0, 28
	ld.w	$a6, $a0, 40
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	ld.w	$a3, $a0, -40
	ld.w	$a4, $a0, -28
	ld.w	$a5, $a0, -16
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr6, $a3, 0
	vinsgr2vr.w	$vr6, $a4, 1
	vinsgr2vr.w	$vr6, $a5, 2
	vinsgr2vr.w	$vr6, $a6, 3
	ld.w	$a3, $a0, 8
	ld.w	$a4, $a0, 20
	ld.w	$a5, $a0, 32
	ld.w	$a6, $a0, 44
	vinsgr2vr.w	$vr7, $a3, 0
	vinsgr2vr.w	$vr7, $a4, 1
	vinsgr2vr.w	$vr7, $a5, 2
	vinsgr2vr.w	$vr7, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vadd.w	$vr2, $vr2, $vr6
	vadd.w	$vr3, $vr3, $vr7
	vreplgr2vr.w	$vr4, $s1
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s3
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 96
	bnez	$a2, .LBB143_7
# %bb.8:                                # %middle.block74
                                        #   in Loop: Header=BB143_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	move	$a3, $a2
	ld.d	$a5, $sp, 56                    # 8-byte Folded Reload
	beq	$a5, $fp, .LBB143_11
.LBB143_9:                              # %scalar.ph63.preheader
                                        #   in Loop: Header=BB143_4 Depth=1
	addi.d	$a2, $a4, -3
	ld.d	$a4, $sp, 80                    # 8-byte Folded Reload
	alsl.d	$a4, $a3, $a4, 2
	.p2align	4, , 16
.LBB143_10:                             # %scalar.ph63
                                        #   Parent Loop BB143_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -8
	ld.w	$a6, $a4, -4
	ld.w	$a7, $a4, 0
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	mul.d	$a5, $a5, $s1
	add.d	$a0, $a0, $a5
	add.w	$a0, $a0, $s3
	addi.d	$a3, $a3, 3
	addi.d	$a2, $a2, 3
	addi.d	$a4, $a4, 12
	bltu	$a3, $s7, .LBB143_10
.LBB143_11:                             # %.loopexit25.us
                                        #   in Loop: Header=BB143_4 Depth=1
	addi.w	$a3, $a3, 0
	bge	$a3, $s0, .LBB143_19
# %bb.12:                               # %.preheader.us.preheader
                                        #   in Loop: Header=BB143_4 Depth=1
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bgeu	$a3, $a4, .LBB143_14
# %bb.13:                               #   in Loop: Header=BB143_4 Depth=1
	move	$a3, $a2
	b	.LBB143_17
	.p2align	4, , 16
.LBB143_14:                             # %vector.ph
                                        #   in Loop: Header=BB143_4 Depth=1
	pcalau12i	$a3, %pc_hi20(.LCPI143_0)
	vld	$vr0, $a3, %pc_lo12(.LCPI143_0)
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	add.d	$a3, $a2, $a4
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a4
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB143_15:                             # %vector.body
                                        #   Parent Loop BB143_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s1
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s5
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB143_15
# %bb.16:                               # %middle.block
                                        #   in Loop: Header=BB143_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 32                    # 8-byte Folded Reload
	beq	$a2, $a4, .LBB143_19
.LBB143_17:                             # %.preheader.us.preheader80
                                        #   in Loop: Header=BB143_4 Depth=1
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB143_18:                             # %.preheader.us
                                        #   Parent Loop BB143_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB143_18
.LBB143_19:                             # %.loopexit.us
                                        #   in Loop: Header=BB143_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB143_3
# %bb.20:                               #   in Loop: Header=BB143_4 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 22
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB143_3
.LBB143_21:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB143_28
# %bb.22:                               # %.preheader.us35.preheader
	lu12i.w	$a0, 65881
	ori	$s1, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s5, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s6, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB143_24
	.p2align	4, , 16
.LBB143_23:                             # %_Z9check_sumIiEvT_.exit.us34
                                        #   in Loop: Header=BB143_24 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB143_32
.LBB143_24:                             # %.preheader.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB143_25 Depth 2
	move	$a0, $zero
	move	$a2, $s0
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	.p2align	4, , 16
.LBB143_25:                             #   Parent Loop BB143_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	bnez	$a2, .LBB143_25
# %bb.26:                               # %.loopexit.us36
                                        #   in Loop: Header=BB143_24 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s5
	add.w	$a2, $a2, $s6
	beq	$a0, $a2, .LBB143_23
# %bb.27:                               #   in Loop: Header=BB143_24 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB143_23
.LBB143_28:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB143_30
	.p2align	4, , 16
.LBB143_29:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB143_30 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB143_32
.LBB143_30:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB143_29
# %bb.31:                               #   in Loop: Header=BB143_30 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB143_29
.LBB143_32:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB143_34
# %bb.33:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB143_36
.LBB143_34:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB143_37
# %bb.35:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB143_36:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI143_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI143_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB143_37:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end143:
	.size	_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc, .Lfunc_end143-_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc
.LCPI144_0:
	.word	0                               # 0x0
	.word	4                               # 0x4
	.word	4                               # 0x4
	.word	4                               # 0x4
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI144_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s1, $a1
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 112                   # 8-byte Folded Spill
	blt	$a1, $a0, .LBB144_30
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 2
	blt	$s1, $a0, .LBB144_21
# %bb.2:                                # %.preheader23.us.preheader
	move	$s5, $zero
	addi.d	$a2, $s1, -1
	bstrpick.d	$s6, $a2, 31, 0
	sltu	$a2, $a0, $s6
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s6, $a2
	or	$a0, $a2, $a0
	addi.d	$a0, $a0, -1
	srli.d	$a2, $a0, 1
	bstrins.d	$a0, $zero, 0, 0
	sub.d	$a0, $s1, $a0
	addi.d	$a3, $a0, -2
	addi.d	$a0, $a2, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$fp, $a0, 3
	slli.d	$s3, $a0, 4
	addi.d	$a0, $s3, 2
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	st.d	$a3, $sp, 88                    # 8-byte Folded Spill
	bstrins.d	$a3, $zero, 2, 0
	st.d	$a3, $sp, 40                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 32
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 4
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	ori	$a7, $zero, 16
	lu12i.w	$a0, 65881
	ori	$s2, $a0, 1957
	lu12i.w	$a0, 492753
	ori	$s4, $a0, 880
	lu12i.w	$a0, -277912
	ori	$s0, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s7, $a0, 1536
	b	.LBB144_4
	.p2align	4, , 16
.LBB144_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB144_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB144_30
.LBB144_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB144_7 Depth 2
                                        #     Child Loop BB144_10 Depth 2
                                        #     Child Loop BB144_15 Depth 2
                                        #     Child Loop BB144_18 Depth 2
	bgeu	$s1, $a7, .LBB144_6
# %bb.5:                                #   in Loop: Header=BB144_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	ori	$a4, $zero, 2
	b	.LBB144_9
	.p2align	4, , 16
.LBB144_6:                              # %vector.body65.preheader
                                        #   in Loop: Header=BB144_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $fp
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB144_7:                              # %vector.body65
                                        #   Parent Loop BB144_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -32
	ld.w	$a4, $a0, -24
	ld.w	$a5, $a0, -16
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 8
	ld.w	$a5, $a0, 16
	ld.w	$a6, $a0, 24
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -28
	ld.w	$a4, $a0, -20
	ld.w	$a5, $a0, -12
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 12
	ld.w	$a5, $a0, 20
	ld.w	$a6, $a0, 28
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vreplgr2vr.w	$vr4, $s2
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 64
	bnez	$a2, .LBB144_7
# %bb.8:                                # %middle.block71
                                        #   in Loop: Header=BB144_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	move	$a3, $s3
	move	$a2, $s3
	ld.d	$a5, $sp, 56                    # 8-byte Folded Reload
	beq	$a5, $fp, .LBB144_11
.LBB144_9:                              # %scalar.ph60.preheader
                                        #   in Loop: Header=BB144_4 Depth=1
	addi.d	$a2, $a4, -2
	ld.d	$a4, $sp, 80                    # 8-byte Folded Reload
	alsl.d	$a4, $a3, $a4, 2
	.p2align	4, , 16
.LBB144_10:                             # %scalar.ph60
                                        #   Parent Loop BB144_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -4
	ld.w	$a6, $a4, 0
	add.d	$a5, $a6, $a5
	mul.d	$a5, $a5, $s2
	add.d	$a0, $a0, $a5
	add.w	$a0, $a0, $s4
	addi.d	$a3, $a3, 2
	addi.d	$a2, $a2, 2
	addi.d	$a4, $a4, 8
	bltu	$a3, $s6, .LBB144_10
.LBB144_11:                             # %.loopexit24.us
                                        #   in Loop: Header=BB144_4 Depth=1
	addi.w	$a3, $a3, 0
	bge	$a3, $s1, .LBB144_19
# %bb.12:                               # %.preheader.us.preheader
                                        #   in Loop: Header=BB144_4 Depth=1
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	ori	$a4, $zero, 8
	bgeu	$a3, $a4, .LBB144_14
# %bb.13:                               #   in Loop: Header=BB144_4 Depth=1
	move	$a3, $a2
	b	.LBB144_17
	.p2align	4, , 16
.LBB144_14:                             # %vector.ph
                                        #   in Loop: Header=BB144_4 Depth=1
	pcalau12i	$a3, %pc_hi20(.LCPI144_0)
	vld	$vr0, $a3, %pc_lo12(.LCPI144_0)
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	add.d	$a3, $a2, $a4
	vinsgr2vr.w	$vr1, $a0, 0
	vinsgr2vr.w	$vr2, $zero, 0
	vshuf.w	$vr0, $vr2, $vr1
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a4
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB144_15:                             # %vector.body
                                        #   Parent Loop BB144_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s2
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s0
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB144_15
# %bb.16:                               # %middle.block
                                        #   in Loop: Header=BB144_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	ld.d	$a2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	beq	$a2, $a4, .LBB144_19
.LBB144_17:                             # %.preheader.us.preheader77
                                        #   in Loop: Header=BB144_4 Depth=1
	ld.d	$a2, $sp, 96                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB144_18:                             # %.preheader.us
                                        #   Parent Loop BB144_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s2
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB144_18
.LBB144_19:                             # %.loopexit.us
                                        #   in Loop: Header=BB144_4 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB144_3
# %bb.20:                               #   in Loop: Header=BB144_4 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 16
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB144_3
.LBB144_21:                             # %.lr.ph.split
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ori	$a0, $zero, 1
	bne	$s1, $a0, .LBB144_26
# %bb.22:                               # %.preheader.us34.preheader
	move	$s0, $zero
	lu12i.w	$a0, 65881
	ori	$s2, $a0, 1957
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -32110
	ori	$s4, $a0, 3144
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB144_24
	.p2align	4, , 16
.LBB144_23:                             # %_Z9check_sumIiEvT_.exit.us33
                                        #   in Loop: Header=BB144_24 Depth=1
	addi.w	$s0, $s0, 1
	bge	$s0, $a1, .LBB144_30
.LBB144_24:                             # %.preheader.us34
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a0, $a0, 0
	mul.w	$a0, $a0, $s2
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a2, $fa1
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	beq	$a0, $a2, .LBB144_23
# %bb.25:                               #   in Loop: Header=BB144_24 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB144_23
.LBB144_26:                             # %.lr.ph.split.split.preheader
	move	$s1, $zero
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB144_28
	.p2align	4, , 16
.LBB144_27:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB144_28 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB144_30
.LBB144_28:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB144_27
# %bb.29:                               #   in Loop: Header=BB144_28 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB144_27
.LBB144_30:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB144_32
# %bb.31:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB144_34
.LBB144_32:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB144_35
# %bb.33:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB144_34:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI144_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI144_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB144_35:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end144:
	.size	_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc, .Lfunc_end144-_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc
.LCPI145_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB145_17
# %bb.1:                                # %.lr.ph
	blez	$s0, .LBB145_13
# %bb.2:                                # %.preheader23.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s4, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s3, $a0, 2488
	pcalau12i	$fp, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s8, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s5, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s4
	vreplgr2vr.w	$vr5, $s3
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB145_4
	.p2align	4, , 16
.LBB145_3:                              # %_Z9check_sumIiEvT_.exit.us
                                        #   in Loop: Header=BB145_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB145_17
.LBB145_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB145_7 Depth 2
                                        #     Child Loop BB145_10 Depth 2
	bgeu	$s0, $a5, .LBB145_6
# %bb.5:                                #   in Loop: Header=BB145_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB145_9
	.p2align	4, , 16
.LBB145_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB145_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB145_7:                              # %vector.body
                                        #   Parent Loop BB145_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB145_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB145_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB145_11
.LBB145_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB145_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB145_10:                             # %scalar.ph
                                        #   Parent Loop BB145_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a0, $a4
	add.w	$a0, $a0, $s3
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB145_10
.LBB145_11:                             # %.loopexit.us
                                        #   in Loop: Header=BB145_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.w	$a2, $a2, $s5
	beq	$a0, $a2, .LBB145_3
# %bb.12:                               #   in Loop: Header=BB145_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB145_3
.LBB145_13:                             # %.lr.ph.split.split.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, 310020
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB145_15
	.p2align	4, , 16
.LBB145_14:                             # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB145_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB145_17
.LBB145_15:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB145_14
# %bb.16:                               #   in Loop: Header=BB145_15 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB145_14
.LBB145_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB145_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB145_21
.LBB145_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB145_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB145_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 0                     # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI145_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI145_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB145_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end145:
	.size	_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc, .Lfunc_end145-_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc
.LCPI146_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI146_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI146_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI146_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI146_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI146_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB146_21
# %bb.1:                                # %.preheader19.lr.ph
	ori	$a0, $zero, 32
	blt	$s0, $a0, .LBB146_10
# %bb.2:                                # %.preheader19.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -31
	addi.d	$s7, $s1, 128
	addi.d	$s8, $s1, 256
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI146_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI146_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI146_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI146_1)
	pcalau12i	$a0, %pc_hi20(.LCPI146_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI146_2)
	pcalau12i	$a0, %pc_hi20(.LCPI146_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI146_4)
	pcalau12i	$a0, %pc_hi20(.LCPI146_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI146_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB146_4
	.p2align	4, , 16
.LBB146_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB146_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB146_21
.LBB146_4:                              # %.preheader19.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB146_5 Depth 2
                                        #     Child Loop BB146_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB146_5:                              #   Parent Loop BB146_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -128
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -120
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 120
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 32
	addi.w	$a1, $a1, 32
	addi.d	$a2, $a2, 256
	addi.d	$a3, $a3, 256
	bltu	$a0, $s6, .LBB146_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB146_4 Depth=1
	bge	$a1, $s0, .LBB146_8
	.p2align	4, , 16
.LBB146_7:                              # %.lr.ph25.us
                                        #   Parent Loop BB146_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB146_7
.LBB146_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB146_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB146_3
# %bb.9:                                #   in Loop: Header=BB146_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB146_3
.LBB146_10:                             # %.preheader19.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB146_17
# %bb.11:                               # %.preheader19.us29.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI146_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI146_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI146_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI146_1)
	pcalau12i	$a0, %pc_hi20(.LCPI146_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI146_2)
	pcalau12i	$a0, %pc_hi20(.LCPI146_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI146_4)
	pcalau12i	$a0, %pc_hi20(.LCPI146_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI146_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB146_13
	.p2align	4, , 16
.LBB146_12:                             # %_Z9check_sumIdEvT_.exit.us33
                                        #   in Loop: Header=BB146_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB146_21
.LBB146_13:                             # %.preheader19.us29
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB146_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB146_14:                             #   Parent Loop BB146_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB146_14
# %bb.15:                               # %._crit_edge.us37
                                        #   in Loop: Header=BB146_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB146_12
# %bb.16:                               #   in Loop: Header=BB146_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB146_12
.LBB146_17:                             # %.preheader19.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI146_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI146_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI146_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI146_1)
	pcalau12i	$a0, %pc_hi20(.LCPI146_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI146_2)
	pcalau12i	$a0, %pc_hi20(.LCPI146_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI146_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB146_19
	.p2align	4, , 16
.LBB146_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB146_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB146_21
.LBB146_19:                             # %.preheader19
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB146_18
# %bb.20:                               #   in Loop: Header=BB146_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB146_18
.LBB146_21:                             # %._crit_edge28
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB146_23
# %bb.22:                               # %._crit_edge28
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB146_25
.LBB146_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB146_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB146_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI146_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI146_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB146_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end146:
	.size	_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc, .Lfunc_end146-_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc
.LCPI147_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI147_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI147_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI147_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI147_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI147_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB147_21
# %bb.1:                                # %.preheader19.lr.ph
	ori	$a0, $zero, 31
	blt	$s0, $a0, .LBB147_10
# %bb.2:                                # %.preheader19.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -30
	addi.d	$s7, $s1, 120
	addi.d	$s8, $s1, 248
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI147_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI147_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI147_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI147_1)
	pcalau12i	$a0, %pc_hi20(.LCPI147_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI147_2)
	pcalau12i	$a0, %pc_hi20(.LCPI147_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI147_4)
	pcalau12i	$a0, %pc_hi20(.LCPI147_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI147_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB147_4
	.p2align	4, , 16
.LBB147_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB147_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB147_21
.LBB147_4:                              # %.preheader19.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB147_5 Depth 2
                                        #     Child Loop BB147_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB147_5:                              #   Parent Loop BB147_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -120
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 120
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 31
	addi.w	$a1, $a1, 31
	addi.d	$a2, $a2, 248
	addi.d	$a3, $a3, 248
	bltu	$a0, $s6, .LBB147_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB147_4 Depth=1
	bge	$a1, $s0, .LBB147_8
	.p2align	4, , 16
.LBB147_7:                              # %.lr.ph25.us
                                        #   Parent Loop BB147_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB147_7
.LBB147_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB147_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB147_3
# %bb.9:                                #   in Loop: Header=BB147_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB147_3
.LBB147_10:                             # %.preheader19.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB147_17
# %bb.11:                               # %.preheader19.us29.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI147_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI147_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI147_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI147_1)
	pcalau12i	$a0, %pc_hi20(.LCPI147_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI147_2)
	pcalau12i	$a0, %pc_hi20(.LCPI147_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI147_4)
	pcalau12i	$a0, %pc_hi20(.LCPI147_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI147_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB147_13
	.p2align	4, , 16
.LBB147_12:                             # %_Z9check_sumIdEvT_.exit.us33
                                        #   in Loop: Header=BB147_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB147_21
.LBB147_13:                             # %.preheader19.us29
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB147_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB147_14:                             #   Parent Loop BB147_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB147_14
# %bb.15:                               # %._crit_edge.us37
                                        #   in Loop: Header=BB147_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB147_12
# %bb.16:                               #   in Loop: Header=BB147_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB147_12
.LBB147_17:                             # %.preheader19.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI147_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI147_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI147_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI147_1)
	pcalau12i	$a0, %pc_hi20(.LCPI147_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI147_2)
	pcalau12i	$a0, %pc_hi20(.LCPI147_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI147_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB147_19
	.p2align	4, , 16
.LBB147_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB147_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB147_21
.LBB147_19:                             # %.preheader19
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB147_18
# %bb.20:                               #   in Loop: Header=BB147_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB147_18
.LBB147_21:                             # %._crit_edge28
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB147_23
# %bb.22:                               # %._crit_edge28
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB147_25
.LBB147_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB147_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB147_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI147_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI147_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB147_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end147:
	.size	_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc, .Lfunc_end147-_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc
.LCPI148_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI148_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI148_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI148_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI148_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI148_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB148_21
# %bb.1:                                # %.preheader19.lr.ph
	ori	$a0, $zero, 30
	blt	$s0, $a0, .LBB148_10
# %bb.2:                                # %.preheader19.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -29
	addi.d	$s7, $s1, 120
	addi.d	$s8, $s1, 240
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI148_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI148_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI148_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI148_1)
	pcalau12i	$a0, %pc_hi20(.LCPI148_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI148_2)
	pcalau12i	$a0, %pc_hi20(.LCPI148_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI148_4)
	pcalau12i	$a0, %pc_hi20(.LCPI148_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI148_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB148_4
	.p2align	4, , 16
.LBB148_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB148_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB148_21
.LBB148_4:                              # %.preheader19.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB148_5 Depth 2
                                        #     Child Loop BB148_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB148_5:                              #   Parent Loop BB148_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -120
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 30
	addi.w	$a1, $a1, 30
	addi.d	$a2, $a2, 240
	addi.d	$a3, $a3, 240
	bltu	$a0, $s6, .LBB148_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB148_4 Depth=1
	bge	$a1, $s0, .LBB148_8
	.p2align	4, , 16
.LBB148_7:                              # %.lr.ph25.us
                                        #   Parent Loop BB148_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB148_7
.LBB148_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB148_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB148_3
# %bb.9:                                #   in Loop: Header=BB148_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB148_3
.LBB148_10:                             # %.preheader19.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB148_17
# %bb.11:                               # %.preheader19.us29.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI148_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI148_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI148_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI148_1)
	pcalau12i	$a0, %pc_hi20(.LCPI148_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI148_2)
	pcalau12i	$a0, %pc_hi20(.LCPI148_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI148_4)
	pcalau12i	$a0, %pc_hi20(.LCPI148_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI148_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB148_13
	.p2align	4, , 16
.LBB148_12:                             # %_Z9check_sumIdEvT_.exit.us33
                                        #   in Loop: Header=BB148_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB148_21
.LBB148_13:                             # %.preheader19.us29
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB148_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB148_14:                             #   Parent Loop BB148_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB148_14
# %bb.15:                               # %._crit_edge.us37
                                        #   in Loop: Header=BB148_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB148_12
# %bb.16:                               #   in Loop: Header=BB148_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB148_12
.LBB148_17:                             # %.preheader19.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI148_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI148_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI148_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI148_1)
	pcalau12i	$a0, %pc_hi20(.LCPI148_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI148_2)
	pcalau12i	$a0, %pc_hi20(.LCPI148_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI148_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB148_19
	.p2align	4, , 16
.LBB148_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB148_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB148_21
.LBB148_19:                             # %.preheader19
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB148_18
# %bb.20:                               #   in Loop: Header=BB148_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB148_18
.LBB148_21:                             # %._crit_edge28
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB148_23
# %bb.22:                               # %._crit_edge28
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB148_25
.LBB148_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB148_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB148_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI148_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI148_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB148_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end148:
	.size	_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc, .Lfunc_end148-_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN14for_loop_testsILi28EdE7do_testEPKdPKc,"axG",@progbits,_ZN14for_loop_testsILi28EdE7do_testEPKdPKc,comdat
	.weak	_ZN14for_loop_testsILi28EdE7do_testEPKdPKc # -- Begin function _ZN14for_loop_testsILi28EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN14for_loop_testsILi28EdE7do_testEPKdPKc,@function
_ZN14for_loop_testsILi28EdE7do_testEPKdPKc: # @_ZN14for_loop_testsILi28EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN14for_loop_testsILi19EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1900
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 2000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s1, $s1, 2047
	addi.d	$a2, $s1, 53
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 153
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 253
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 353
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 453
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 553
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 653
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end149:
	.size	_ZN14for_loop_testsILi28EdE7do_testEPKdPKc, .Lfunc_end149-_ZN14for_loop_testsILi28EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc
.LCPI150_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI150_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI150_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI150_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI150_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI150_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB150_21
# %bb.1:                                # %.preheader19.lr.ph
	ori	$a0, $zero, 29
	blt	$s0, $a0, .LBB150_10
# %bb.2:                                # %.preheader19.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -28
	addi.d	$s7, $s1, 112
	addi.d	$s8, $s1, 232
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI150_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI150_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI150_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI150_1)
	pcalau12i	$a0, %pc_hi20(.LCPI150_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI150_2)
	pcalau12i	$a0, %pc_hi20(.LCPI150_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI150_4)
	pcalau12i	$a0, %pc_hi20(.LCPI150_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI150_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB150_4
	.p2align	4, , 16
.LBB150_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB150_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB150_21
.LBB150_4:                              # %.preheader19.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_5 Depth 2
                                        #     Child Loop BB150_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB150_5:                              #   Parent Loop BB150_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 29
	addi.w	$a1, $a1, 29
	addi.d	$a2, $a2, 232
	addi.d	$a3, $a3, 232
	bltu	$a0, $s6, .LBB150_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB150_4 Depth=1
	bge	$a1, $s0, .LBB150_8
	.p2align	4, , 16
.LBB150_7:                              # %.lr.ph25.us
                                        #   Parent Loop BB150_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB150_7
.LBB150_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB150_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB150_3
# %bb.9:                                #   in Loop: Header=BB150_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB150_3
.LBB150_10:                             # %.preheader19.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB150_17
# %bb.11:                               # %.preheader19.us29.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI150_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI150_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI150_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI150_1)
	pcalau12i	$a0, %pc_hi20(.LCPI150_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI150_2)
	pcalau12i	$a0, %pc_hi20(.LCPI150_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI150_4)
	pcalau12i	$a0, %pc_hi20(.LCPI150_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI150_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB150_13
	.p2align	4, , 16
.LBB150_12:                             # %_Z9check_sumIdEvT_.exit.us33
                                        #   in Loop: Header=BB150_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB150_21
.LBB150_13:                             # %.preheader19.us29
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB150_14:                             #   Parent Loop BB150_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB150_14
# %bb.15:                               # %._crit_edge.us37
                                        #   in Loop: Header=BB150_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB150_12
# %bb.16:                               #   in Loop: Header=BB150_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB150_12
.LBB150_17:                             # %.preheader19.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI150_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI150_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI150_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI150_1)
	pcalau12i	$a0, %pc_hi20(.LCPI150_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI150_2)
	pcalau12i	$a0, %pc_hi20(.LCPI150_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI150_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB150_19
	.p2align	4, , 16
.LBB150_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB150_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB150_21
.LBB150_19:                             # %.preheader19
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB150_18
# %bb.20:                               #   in Loop: Header=BB150_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB150_18
.LBB150_21:                             # %._crit_edge28
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB150_23
# %bb.22:                               # %._crit_edge28
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB150_25
.LBB150_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB150_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB150_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI150_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI150_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB150_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end150:
	.size	_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc, .Lfunc_end150-_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc
.LCPI151_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI151_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI151_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI151_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI151_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI151_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB151_21
# %bb.1:                                # %.preheader19.lr.ph
	ori	$a0, $zero, 28
	blt	$s0, $a0, .LBB151_10
# %bb.2:                                # %.preheader19.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -27
	addi.d	$s7, $s1, 112
	addi.d	$s8, $s1, 224
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI151_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI151_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI151_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI151_1)
	pcalau12i	$a0, %pc_hi20(.LCPI151_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI151_2)
	pcalau12i	$a0, %pc_hi20(.LCPI151_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI151_4)
	pcalau12i	$a0, %pc_hi20(.LCPI151_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI151_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB151_4
	.p2align	4, , 16
.LBB151_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB151_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB151_21
.LBB151_4:                              # %.preheader19.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB151_5 Depth 2
                                        #     Child Loop BB151_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB151_5:                              #   Parent Loop BB151_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 28
	addi.w	$a1, $a1, 28
	addi.d	$a2, $a2, 224
	addi.d	$a3, $a3, 224
	bltu	$a0, $s6, .LBB151_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB151_4 Depth=1
	bge	$a1, $s0, .LBB151_8
	.p2align	4, , 16
.LBB151_7:                              # %.lr.ph25.us
                                        #   Parent Loop BB151_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB151_7
.LBB151_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB151_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB151_3
# %bb.9:                                #   in Loop: Header=BB151_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB151_3
.LBB151_10:                             # %.preheader19.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB151_17
# %bb.11:                               # %.preheader19.us29.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI151_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI151_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI151_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI151_1)
	pcalau12i	$a0, %pc_hi20(.LCPI151_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI151_2)
	pcalau12i	$a0, %pc_hi20(.LCPI151_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI151_4)
	pcalau12i	$a0, %pc_hi20(.LCPI151_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI151_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB151_13
	.p2align	4, , 16
.LBB151_12:                             # %_Z9check_sumIdEvT_.exit.us33
                                        #   in Loop: Header=BB151_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB151_21
.LBB151_13:                             # %.preheader19.us29
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB151_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB151_14:                             #   Parent Loop BB151_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB151_14
# %bb.15:                               # %._crit_edge.us37
                                        #   in Loop: Header=BB151_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB151_12
# %bb.16:                               #   in Loop: Header=BB151_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB151_12
.LBB151_17:                             # %.preheader19.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI151_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI151_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI151_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI151_1)
	pcalau12i	$a0, %pc_hi20(.LCPI151_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI151_2)
	pcalau12i	$a0, %pc_hi20(.LCPI151_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI151_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB151_19
	.p2align	4, , 16
.LBB151_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB151_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB151_21
.LBB151_19:                             # %.preheader19
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB151_18
# %bb.20:                               #   in Loop: Header=BB151_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB151_18
.LBB151_21:                             # %._crit_edge28
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB151_23
# %bb.22:                               # %._crit_edge28
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB151_25
.LBB151_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB151_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB151_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI151_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI151_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB151_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end151:
	.size	_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc, .Lfunc_end151-_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc
.LCPI152_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI152_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI152_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI152_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI152_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI152_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB152_21
# %bb.1:                                # %.preheader19.lr.ph
	ori	$a0, $zero, 27
	blt	$s0, $a0, .LBB152_10
# %bb.2:                                # %.preheader19.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -26
	addi.d	$s7, $s1, 104
	addi.d	$s8, $s1, 216
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI152_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI152_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI152_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI152_1)
	pcalau12i	$a0, %pc_hi20(.LCPI152_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI152_2)
	pcalau12i	$a0, %pc_hi20(.LCPI152_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI152_4)
	pcalau12i	$a0, %pc_hi20(.LCPI152_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI152_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB152_4
	.p2align	4, , 16
.LBB152_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB152_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB152_21
.LBB152_4:                              # %.preheader19.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB152_5 Depth 2
                                        #     Child Loop BB152_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB152_5:                              #   Parent Loop BB152_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 27
	addi.w	$a1, $a1, 27
	addi.d	$a2, $a2, 216
	addi.d	$a3, $a3, 216
	bltu	$a0, $s6, .LBB152_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB152_4 Depth=1
	bge	$a1, $s0, .LBB152_8
	.p2align	4, , 16
.LBB152_7:                              # %.lr.ph25.us
                                        #   Parent Loop BB152_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB152_7
.LBB152_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB152_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB152_3
# %bb.9:                                #   in Loop: Header=BB152_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB152_3
.LBB152_10:                             # %.preheader19.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB152_17
# %bb.11:                               # %.preheader19.us29.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI152_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI152_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI152_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI152_1)
	pcalau12i	$a0, %pc_hi20(.LCPI152_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI152_2)
	pcalau12i	$a0, %pc_hi20(.LCPI152_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI152_4)
	pcalau12i	$a0, %pc_hi20(.LCPI152_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI152_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB152_13
	.p2align	4, , 16
.LBB152_12:                             # %_Z9check_sumIdEvT_.exit.us33
                                        #   in Loop: Header=BB152_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB152_21
.LBB152_13:                             # %.preheader19.us29
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB152_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB152_14:                             #   Parent Loop BB152_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB152_14
# %bb.15:                               # %._crit_edge.us37
                                        #   in Loop: Header=BB152_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB152_12
# %bb.16:                               #   in Loop: Header=BB152_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB152_12
.LBB152_17:                             # %.preheader19.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI152_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI152_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI152_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI152_1)
	pcalau12i	$a0, %pc_hi20(.LCPI152_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI152_2)
	pcalau12i	$a0, %pc_hi20(.LCPI152_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI152_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB152_19
	.p2align	4, , 16
.LBB152_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB152_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB152_21
.LBB152_19:                             # %.preheader19
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB152_18
# %bb.20:                               #   in Loop: Header=BB152_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB152_18
.LBB152_21:                             # %._crit_edge28
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB152_23
# %bb.22:                               # %._crit_edge28
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB152_25
.LBB152_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB152_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB152_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI152_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI152_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB152_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end152:
	.size	_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc, .Lfunc_end152-_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc
.LCPI153_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI153_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI153_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI153_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI153_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI153_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB153_21
# %bb.1:                                # %.preheader19.lr.ph
	ori	$a0, $zero, 26
	blt	$s0, $a0, .LBB153_10
# %bb.2:                                # %.preheader19.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -25
	addi.d	$s7, $s1, 104
	addi.d	$s8, $s1, 208
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI153_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI153_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI153_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI153_1)
	pcalau12i	$a0, %pc_hi20(.LCPI153_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI153_2)
	pcalau12i	$a0, %pc_hi20(.LCPI153_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI153_4)
	pcalau12i	$a0, %pc_hi20(.LCPI153_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI153_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB153_4
	.p2align	4, , 16
.LBB153_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB153_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB153_21
.LBB153_4:                              # %.preheader19.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB153_5 Depth 2
                                        #     Child Loop BB153_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB153_5:                              #   Parent Loop BB153_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 26
	addi.w	$a1, $a1, 26
	addi.d	$a2, $a2, 208
	addi.d	$a3, $a3, 208
	bltu	$a0, $s6, .LBB153_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB153_4 Depth=1
	bge	$a1, $s0, .LBB153_8
	.p2align	4, , 16
.LBB153_7:                              # %.lr.ph25.us
                                        #   Parent Loop BB153_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB153_7
.LBB153_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB153_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB153_3
# %bb.9:                                #   in Loop: Header=BB153_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB153_3
.LBB153_10:                             # %.preheader19.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB153_17
# %bb.11:                               # %.preheader19.us29.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI153_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI153_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI153_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI153_1)
	pcalau12i	$a0, %pc_hi20(.LCPI153_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI153_2)
	pcalau12i	$a0, %pc_hi20(.LCPI153_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI153_4)
	pcalau12i	$a0, %pc_hi20(.LCPI153_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI153_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB153_13
	.p2align	4, , 16
.LBB153_12:                             # %_Z9check_sumIdEvT_.exit.us33
                                        #   in Loop: Header=BB153_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB153_21
.LBB153_13:                             # %.preheader19.us29
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB153_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB153_14:                             #   Parent Loop BB153_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB153_14
# %bb.15:                               # %._crit_edge.us37
                                        #   in Loop: Header=BB153_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB153_12
# %bb.16:                               #   in Loop: Header=BB153_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB153_12
.LBB153_17:                             # %.preheader19.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI153_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI153_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI153_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI153_1)
	pcalau12i	$a0, %pc_hi20(.LCPI153_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI153_2)
	pcalau12i	$a0, %pc_hi20(.LCPI153_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI153_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB153_19
	.p2align	4, , 16
.LBB153_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB153_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB153_21
.LBB153_19:                             # %.preheader19
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB153_18
# %bb.20:                               #   in Loop: Header=BB153_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB153_18
.LBB153_21:                             # %._crit_edge28
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB153_23
# %bb.22:                               # %._crit_edge28
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB153_25
.LBB153_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB153_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB153_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI153_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI153_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB153_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end153:
	.size	_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc, .Lfunc_end153-_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc
.LCPI154_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI154_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI154_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI154_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI154_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI154_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB154_21
# %bb.1:                                # %.preheader19.lr.ph
	ori	$a0, $zero, 25
	blt	$s0, $a0, .LBB154_10
# %bb.2:                                # %.preheader19.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -24
	addi.d	$s7, $s1, 96
	addi.d	$s8, $s1, 200
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI154_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI154_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI154_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI154_1)
	pcalau12i	$a0, %pc_hi20(.LCPI154_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI154_2)
	pcalau12i	$a0, %pc_hi20(.LCPI154_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI154_4)
	pcalau12i	$a0, %pc_hi20(.LCPI154_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI154_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB154_4
	.p2align	4, , 16
.LBB154_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB154_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB154_21
.LBB154_4:                              # %.preheader19.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB154_5 Depth 2
                                        #     Child Loop BB154_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB154_5:                              #   Parent Loop BB154_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 25
	addi.w	$a1, $a1, 25
	addi.d	$a2, $a2, 200
	addi.d	$a3, $a3, 200
	bltu	$a0, $s6, .LBB154_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB154_4 Depth=1
	bge	$a1, $s0, .LBB154_8
	.p2align	4, , 16
.LBB154_7:                              # %.lr.ph25.us
                                        #   Parent Loop BB154_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB154_7
.LBB154_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB154_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB154_3
# %bb.9:                                #   in Loop: Header=BB154_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB154_3
.LBB154_10:                             # %.preheader19.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB154_17
# %bb.11:                               # %.preheader19.us29.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI154_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI154_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI154_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI154_1)
	pcalau12i	$a0, %pc_hi20(.LCPI154_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI154_2)
	pcalau12i	$a0, %pc_hi20(.LCPI154_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI154_4)
	pcalau12i	$a0, %pc_hi20(.LCPI154_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI154_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB154_13
	.p2align	4, , 16
.LBB154_12:                             # %_Z9check_sumIdEvT_.exit.us33
                                        #   in Loop: Header=BB154_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB154_21
.LBB154_13:                             # %.preheader19.us29
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB154_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB154_14:                             #   Parent Loop BB154_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB154_14
# %bb.15:                               # %._crit_edge.us37
                                        #   in Loop: Header=BB154_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB154_12
# %bb.16:                               #   in Loop: Header=BB154_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB154_12
.LBB154_17:                             # %.preheader19.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI154_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI154_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI154_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI154_1)
	pcalau12i	$a0, %pc_hi20(.LCPI154_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI154_2)
	pcalau12i	$a0, %pc_hi20(.LCPI154_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI154_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB154_19
	.p2align	4, , 16
.LBB154_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB154_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB154_21
.LBB154_19:                             # %.preheader19
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB154_18
# %bb.20:                               #   in Loop: Header=BB154_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB154_18
.LBB154_21:                             # %._crit_edge28
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB154_23
# %bb.22:                               # %._crit_edge28
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB154_25
.LBB154_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB154_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB154_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI154_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI154_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB154_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end154:
	.size	_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc, .Lfunc_end154-_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc
.LCPI155_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI155_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI155_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI155_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI155_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI155_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB155_21
# %bb.1:                                # %.preheader19.lr.ph
	ori	$a0, $zero, 24
	blt	$s0, $a0, .LBB155_10
# %bb.2:                                # %.preheader19.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -23
	addi.d	$s7, $s1, 96
	addi.d	$s8, $s1, 192
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI155_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI155_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI155_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI155_1)
	pcalau12i	$a0, %pc_hi20(.LCPI155_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI155_2)
	pcalau12i	$a0, %pc_hi20(.LCPI155_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI155_4)
	pcalau12i	$a0, %pc_hi20(.LCPI155_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI155_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB155_4
	.p2align	4, , 16
.LBB155_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB155_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB155_21
.LBB155_4:                              # %.preheader19.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB155_5 Depth 2
                                        #     Child Loop BB155_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB155_5:                              #   Parent Loop BB155_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 24
	addi.w	$a1, $a1, 24
	addi.d	$a2, $a2, 192
	addi.d	$a3, $a3, 192
	bltu	$a0, $s6, .LBB155_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB155_4 Depth=1
	bge	$a1, $s0, .LBB155_8
	.p2align	4, , 16
.LBB155_7:                              # %.lr.ph25.us
                                        #   Parent Loop BB155_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB155_7
.LBB155_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB155_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB155_3
# %bb.9:                                #   in Loop: Header=BB155_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB155_3
.LBB155_10:                             # %.preheader19.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB155_17
# %bb.11:                               # %.preheader19.us29.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI155_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI155_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI155_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI155_1)
	pcalau12i	$a0, %pc_hi20(.LCPI155_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI155_2)
	pcalau12i	$a0, %pc_hi20(.LCPI155_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI155_4)
	pcalau12i	$a0, %pc_hi20(.LCPI155_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI155_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB155_13
	.p2align	4, , 16
.LBB155_12:                             # %_Z9check_sumIdEvT_.exit.us33
                                        #   in Loop: Header=BB155_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB155_21
.LBB155_13:                             # %.preheader19.us29
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB155_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB155_14:                             #   Parent Loop BB155_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB155_14
# %bb.15:                               # %._crit_edge.us37
                                        #   in Loop: Header=BB155_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB155_12
# %bb.16:                               #   in Loop: Header=BB155_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB155_12
.LBB155_17:                             # %.preheader19.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI155_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI155_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI155_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI155_1)
	pcalau12i	$a0, %pc_hi20(.LCPI155_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI155_2)
	pcalau12i	$a0, %pc_hi20(.LCPI155_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI155_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB155_19
	.p2align	4, , 16
.LBB155_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB155_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB155_21
.LBB155_19:                             # %.preheader19
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB155_18
# %bb.20:                               #   in Loop: Header=BB155_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB155_18
.LBB155_21:                             # %._crit_edge28
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB155_23
# %bb.22:                               # %._crit_edge28
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB155_25
.LBB155_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB155_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB155_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI155_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI155_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB155_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end155:
	.size	_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc, .Lfunc_end155-_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc
.LCPI156_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI156_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI156_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI156_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI156_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI156_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB156_21
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 23
	blt	$s0, $a0, .LBB156_10
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -22
	addi.d	$s7, $s1, 88
	addi.d	$s8, $s1, 184
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI156_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI156_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI156_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI156_1)
	pcalau12i	$a0, %pc_hi20(.LCPI156_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI156_2)
	pcalau12i	$a0, %pc_hi20(.LCPI156_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI156_4)
	pcalau12i	$a0, %pc_hi20(.LCPI156_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI156_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB156_4
	.p2align	4, , 16
.LBB156_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB156_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB156_21
.LBB156_4:                              # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB156_5 Depth 2
                                        #     Child Loop BB156_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB156_5:                              #   Parent Loop BB156_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 23
	addi.w	$a1, $a1, 23
	addi.d	$a2, $a2, 184
	addi.d	$a3, $a3, 184
	bltu	$a0, $s6, .LBB156_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB156_4 Depth=1
	bge	$a1, $s0, .LBB156_8
	.p2align	4, , 16
.LBB156_7:                              # %.lr.ph24.us
                                        #   Parent Loop BB156_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB156_7
.LBB156_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB156_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB156_3
# %bb.9:                                #   in Loop: Header=BB156_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB156_3
.LBB156_10:                             # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB156_17
# %bb.11:                               # %.preheader18.us28.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI156_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI156_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI156_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI156_1)
	pcalau12i	$a0, %pc_hi20(.LCPI156_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI156_2)
	pcalau12i	$a0, %pc_hi20(.LCPI156_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI156_4)
	pcalau12i	$a0, %pc_hi20(.LCPI156_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI156_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB156_13
	.p2align	4, , 16
.LBB156_12:                             # %_Z9check_sumIdEvT_.exit.us32
                                        #   in Loop: Header=BB156_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB156_21
.LBB156_13:                             # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB156_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB156_14:                             #   Parent Loop BB156_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB156_14
# %bb.15:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB156_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB156_12
# %bb.16:                               #   in Loop: Header=BB156_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB156_12
.LBB156_17:                             # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI156_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI156_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI156_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI156_1)
	pcalau12i	$a0, %pc_hi20(.LCPI156_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI156_2)
	pcalau12i	$a0, %pc_hi20(.LCPI156_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI156_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB156_19
	.p2align	4, , 16
.LBB156_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB156_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB156_21
.LBB156_19:                             # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB156_18
# %bb.20:                               #   in Loop: Header=BB156_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB156_18
.LBB156_21:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB156_23
# %bb.22:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB156_25
.LBB156_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB156_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB156_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI156_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI156_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB156_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end156:
	.size	_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc, .Lfunc_end156-_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc
.LCPI157_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI157_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI157_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI157_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI157_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI157_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB157_21
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 22
	blt	$s0, $a0, .LBB157_10
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -21
	addi.d	$s7, $s1, 88
	addi.d	$s8, $s1, 176
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI157_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI157_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI157_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI157_1)
	pcalau12i	$a0, %pc_hi20(.LCPI157_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI157_2)
	pcalau12i	$a0, %pc_hi20(.LCPI157_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI157_4)
	pcalau12i	$a0, %pc_hi20(.LCPI157_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI157_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB157_4
	.p2align	4, , 16
.LBB157_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB157_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB157_21
.LBB157_4:                              # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB157_5 Depth 2
                                        #     Child Loop BB157_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB157_5:                              #   Parent Loop BB157_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 22
	addi.w	$a1, $a1, 22
	addi.d	$a2, $a2, 176
	addi.d	$a3, $a3, 176
	bltu	$a0, $s6, .LBB157_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB157_4 Depth=1
	bge	$a1, $s0, .LBB157_8
	.p2align	4, , 16
.LBB157_7:                              # %.lr.ph24.us
                                        #   Parent Loop BB157_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB157_7
.LBB157_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB157_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB157_3
# %bb.9:                                #   in Loop: Header=BB157_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB157_3
.LBB157_10:                             # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB157_17
# %bb.11:                               # %.preheader18.us28.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI157_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI157_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI157_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI157_1)
	pcalau12i	$a0, %pc_hi20(.LCPI157_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI157_2)
	pcalau12i	$a0, %pc_hi20(.LCPI157_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI157_4)
	pcalau12i	$a0, %pc_hi20(.LCPI157_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI157_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB157_13
	.p2align	4, , 16
.LBB157_12:                             # %_Z9check_sumIdEvT_.exit.us32
                                        #   in Loop: Header=BB157_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB157_21
.LBB157_13:                             # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB157_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB157_14:                             #   Parent Loop BB157_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB157_14
# %bb.15:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB157_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB157_12
# %bb.16:                               #   in Loop: Header=BB157_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB157_12
.LBB157_17:                             # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI157_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI157_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI157_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI157_1)
	pcalau12i	$a0, %pc_hi20(.LCPI157_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI157_2)
	pcalau12i	$a0, %pc_hi20(.LCPI157_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI157_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB157_19
	.p2align	4, , 16
.LBB157_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB157_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB157_21
.LBB157_19:                             # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB157_18
# %bb.20:                               #   in Loop: Header=BB157_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB157_18
.LBB157_21:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB157_23
# %bb.22:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB157_25
.LBB157_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB157_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB157_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI157_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI157_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB157_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end157:
	.size	_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc, .Lfunc_end157-_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc
.LCPI158_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI158_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI158_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI158_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI158_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI158_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB158_21
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 21
	blt	$s0, $a0, .LBB158_10
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -20
	addi.d	$s7, $s1, 80
	addi.d	$s8, $s1, 168
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI158_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI158_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI158_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI158_1)
	pcalau12i	$a0, %pc_hi20(.LCPI158_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI158_2)
	pcalau12i	$a0, %pc_hi20(.LCPI158_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI158_4)
	pcalau12i	$a0, %pc_hi20(.LCPI158_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI158_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB158_4
	.p2align	4, , 16
.LBB158_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB158_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB158_21
.LBB158_4:                              # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB158_5 Depth 2
                                        #     Child Loop BB158_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB158_5:                              #   Parent Loop BB158_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 21
	addi.w	$a1, $a1, 21
	addi.d	$a2, $a2, 168
	addi.d	$a3, $a3, 168
	bltu	$a0, $s6, .LBB158_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB158_4 Depth=1
	bge	$a1, $s0, .LBB158_8
	.p2align	4, , 16
.LBB158_7:                              # %.lr.ph24.us
                                        #   Parent Loop BB158_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB158_7
.LBB158_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB158_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB158_3
# %bb.9:                                #   in Loop: Header=BB158_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB158_3
.LBB158_10:                             # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB158_17
# %bb.11:                               # %.preheader18.us28.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI158_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI158_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI158_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI158_1)
	pcalau12i	$a0, %pc_hi20(.LCPI158_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI158_2)
	pcalau12i	$a0, %pc_hi20(.LCPI158_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI158_4)
	pcalau12i	$a0, %pc_hi20(.LCPI158_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI158_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB158_13
	.p2align	4, , 16
.LBB158_12:                             # %_Z9check_sumIdEvT_.exit.us32
                                        #   in Loop: Header=BB158_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB158_21
.LBB158_13:                             # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB158_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB158_14:                             #   Parent Loop BB158_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB158_14
# %bb.15:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB158_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB158_12
# %bb.16:                               #   in Loop: Header=BB158_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB158_12
.LBB158_17:                             # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI158_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI158_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI158_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI158_1)
	pcalau12i	$a0, %pc_hi20(.LCPI158_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI158_2)
	pcalau12i	$a0, %pc_hi20(.LCPI158_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI158_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB158_19
	.p2align	4, , 16
.LBB158_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB158_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB158_21
.LBB158_19:                             # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB158_18
# %bb.20:                               #   in Loop: Header=BB158_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB158_18
.LBB158_21:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB158_23
# %bb.22:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB158_25
.LBB158_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB158_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB158_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI158_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI158_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB158_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end158:
	.size	_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc, .Lfunc_end158-_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN14for_loop_testsILi19EdE7do_testEPKdPKc,"axG",@progbits,_ZN14for_loop_testsILi19EdE7do_testEPKdPKc,comdat
	.weak	_ZN14for_loop_testsILi19EdE7do_testEPKdPKc # -- Begin function _ZN14for_loop_testsILi19EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN14for_loop_testsILi19EdE7do_testEPKdPKc,@function
_ZN14for_loop_testsILi19EdE7do_testEPKdPKc: # @_ZN14for_loop_testsILi19EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN14for_loop_testsILi10EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1000
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1100
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1200
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1300
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1400
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1500
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1600
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1700
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1800
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end159:
	.size	_ZN14for_loop_testsILi19EdE7do_testEPKdPKc, .Lfunc_end159-_ZN14for_loop_testsILi19EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc
.LCPI160_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI160_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI160_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI160_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI160_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI160_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB160_21
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 20
	blt	$s0, $a0, .LBB160_10
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -19
	addi.d	$s7, $s1, 80
	addi.d	$s8, $s1, 160
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI160_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI160_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI160_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI160_1)
	pcalau12i	$a0, %pc_hi20(.LCPI160_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI160_2)
	pcalau12i	$a0, %pc_hi20(.LCPI160_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI160_4)
	pcalau12i	$a0, %pc_hi20(.LCPI160_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI160_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB160_4
	.p2align	4, , 16
.LBB160_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB160_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB160_21
.LBB160_4:                              # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB160_5 Depth 2
                                        #     Child Loop BB160_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB160_5:                              #   Parent Loop BB160_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 20
	addi.w	$a1, $a1, 20
	addi.d	$a2, $a2, 160
	addi.d	$a3, $a3, 160
	bltu	$a0, $s6, .LBB160_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB160_4 Depth=1
	bge	$a1, $s0, .LBB160_8
	.p2align	4, , 16
.LBB160_7:                              # %.lr.ph24.us
                                        #   Parent Loop BB160_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB160_7
.LBB160_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB160_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB160_3
# %bb.9:                                #   in Loop: Header=BB160_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB160_3
.LBB160_10:                             # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB160_17
# %bb.11:                               # %.preheader18.us28.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI160_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI160_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI160_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI160_1)
	pcalau12i	$a0, %pc_hi20(.LCPI160_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI160_2)
	pcalau12i	$a0, %pc_hi20(.LCPI160_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI160_4)
	pcalau12i	$a0, %pc_hi20(.LCPI160_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI160_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB160_13
	.p2align	4, , 16
.LBB160_12:                             # %_Z9check_sumIdEvT_.exit.us32
                                        #   in Loop: Header=BB160_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB160_21
.LBB160_13:                             # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB160_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB160_14:                             #   Parent Loop BB160_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB160_14
# %bb.15:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB160_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB160_12
# %bb.16:                               #   in Loop: Header=BB160_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB160_12
.LBB160_17:                             # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI160_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI160_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI160_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI160_1)
	pcalau12i	$a0, %pc_hi20(.LCPI160_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI160_2)
	pcalau12i	$a0, %pc_hi20(.LCPI160_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI160_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB160_19
	.p2align	4, , 16
.LBB160_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB160_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB160_21
.LBB160_19:                             # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB160_18
# %bb.20:                               #   in Loop: Header=BB160_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB160_18
.LBB160_21:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB160_23
# %bb.22:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB160_25
.LBB160_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB160_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB160_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI160_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI160_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB160_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end160:
	.size	_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc, .Lfunc_end160-_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc
.LCPI161_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI161_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI161_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI161_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI161_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI161_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB161_21
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 19
	blt	$s0, $a0, .LBB161_10
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -18
	addi.d	$s7, $s1, 72
	addi.d	$s8, $s1, 152
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI161_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI161_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI161_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI161_1)
	pcalau12i	$a0, %pc_hi20(.LCPI161_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI161_2)
	pcalau12i	$a0, %pc_hi20(.LCPI161_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI161_4)
	pcalau12i	$a0, %pc_hi20(.LCPI161_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI161_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB161_4
	.p2align	4, , 16
.LBB161_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB161_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB161_21
.LBB161_4:                              # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB161_5 Depth 2
                                        #     Child Loop BB161_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB161_5:                              #   Parent Loop BB161_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 19
	addi.w	$a1, $a1, 19
	addi.d	$a2, $a2, 152
	addi.d	$a3, $a3, 152
	bltu	$a0, $s6, .LBB161_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB161_4 Depth=1
	bge	$a1, $s0, .LBB161_8
	.p2align	4, , 16
.LBB161_7:                              # %.lr.ph24.us
                                        #   Parent Loop BB161_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB161_7
.LBB161_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB161_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB161_3
# %bb.9:                                #   in Loop: Header=BB161_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB161_3
.LBB161_10:                             # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB161_17
# %bb.11:                               # %.preheader18.us28.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI161_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI161_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI161_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI161_1)
	pcalau12i	$a0, %pc_hi20(.LCPI161_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI161_2)
	pcalau12i	$a0, %pc_hi20(.LCPI161_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI161_4)
	pcalau12i	$a0, %pc_hi20(.LCPI161_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI161_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB161_13
	.p2align	4, , 16
.LBB161_12:                             # %_Z9check_sumIdEvT_.exit.us32
                                        #   in Loop: Header=BB161_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB161_21
.LBB161_13:                             # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB161_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB161_14:                             #   Parent Loop BB161_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB161_14
# %bb.15:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB161_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB161_12
# %bb.16:                               #   in Loop: Header=BB161_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB161_12
.LBB161_17:                             # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI161_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI161_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI161_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI161_1)
	pcalau12i	$a0, %pc_hi20(.LCPI161_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI161_2)
	pcalau12i	$a0, %pc_hi20(.LCPI161_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI161_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB161_19
	.p2align	4, , 16
.LBB161_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB161_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB161_21
.LBB161_19:                             # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB161_18
# %bb.20:                               #   in Loop: Header=BB161_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB161_18
.LBB161_21:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB161_23
# %bb.22:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB161_25
.LBB161_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB161_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB161_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI161_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI161_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB161_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end161:
	.size	_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc, .Lfunc_end161-_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc
.LCPI162_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI162_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI162_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI162_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI162_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI162_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB162_21
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 18
	blt	$s0, $a0, .LBB162_10
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -17
	addi.d	$s7, $s1, 72
	addi.d	$s8, $s1, 144
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI162_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI162_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI162_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI162_1)
	pcalau12i	$a0, %pc_hi20(.LCPI162_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI162_2)
	pcalau12i	$a0, %pc_hi20(.LCPI162_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI162_4)
	pcalau12i	$a0, %pc_hi20(.LCPI162_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI162_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB162_4
	.p2align	4, , 16
.LBB162_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB162_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB162_21
.LBB162_4:                              # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB162_5 Depth 2
                                        #     Child Loop BB162_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB162_5:                              #   Parent Loop BB162_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 18
	addi.w	$a1, $a1, 18
	addi.d	$a2, $a2, 144
	addi.d	$a3, $a3, 144
	bltu	$a0, $s6, .LBB162_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB162_4 Depth=1
	bge	$a1, $s0, .LBB162_8
	.p2align	4, , 16
.LBB162_7:                              # %.lr.ph24.us
                                        #   Parent Loop BB162_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB162_7
.LBB162_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB162_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB162_3
# %bb.9:                                #   in Loop: Header=BB162_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB162_3
.LBB162_10:                             # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB162_17
# %bb.11:                               # %.preheader18.us28.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI162_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI162_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI162_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI162_1)
	pcalau12i	$a0, %pc_hi20(.LCPI162_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI162_2)
	pcalau12i	$a0, %pc_hi20(.LCPI162_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI162_4)
	pcalau12i	$a0, %pc_hi20(.LCPI162_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI162_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB162_13
	.p2align	4, , 16
.LBB162_12:                             # %_Z9check_sumIdEvT_.exit.us32
                                        #   in Loop: Header=BB162_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB162_21
.LBB162_13:                             # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB162_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB162_14:                             #   Parent Loop BB162_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB162_14
# %bb.15:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB162_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB162_12
# %bb.16:                               #   in Loop: Header=BB162_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB162_12
.LBB162_17:                             # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI162_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI162_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI162_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI162_1)
	pcalau12i	$a0, %pc_hi20(.LCPI162_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI162_2)
	pcalau12i	$a0, %pc_hi20(.LCPI162_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI162_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB162_19
	.p2align	4, , 16
.LBB162_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB162_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB162_21
.LBB162_19:                             # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB162_18
# %bb.20:                               #   in Loop: Header=BB162_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB162_18
.LBB162_21:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB162_23
# %bb.22:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB162_25
.LBB162_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB162_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB162_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI162_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI162_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB162_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end162:
	.size	_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc, .Lfunc_end162-_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc
.LCPI163_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI163_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI163_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI163_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI163_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI163_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB163_21
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 17
	blt	$s0, $a0, .LBB163_10
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -16
	addi.d	$s7, $s1, 64
	addi.d	$s8, $s1, 136
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI163_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI163_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI163_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI163_1)
	pcalau12i	$a0, %pc_hi20(.LCPI163_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI163_2)
	pcalau12i	$a0, %pc_hi20(.LCPI163_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI163_4)
	pcalau12i	$a0, %pc_hi20(.LCPI163_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI163_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB163_4
	.p2align	4, , 16
.LBB163_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB163_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB163_21
.LBB163_4:                              # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB163_5 Depth 2
                                        #     Child Loop BB163_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB163_5:                              #   Parent Loop BB163_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 17
	addi.w	$a1, $a1, 17
	addi.d	$a2, $a2, 136
	addi.d	$a3, $a3, 136
	bltu	$a0, $s6, .LBB163_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB163_4 Depth=1
	bge	$a1, $s0, .LBB163_8
	.p2align	4, , 16
.LBB163_7:                              # %.lr.ph24.us
                                        #   Parent Loop BB163_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB163_7
.LBB163_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB163_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB163_3
# %bb.9:                                #   in Loop: Header=BB163_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB163_3
.LBB163_10:                             # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB163_17
# %bb.11:                               # %.preheader18.us28.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI163_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI163_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI163_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI163_1)
	pcalau12i	$a0, %pc_hi20(.LCPI163_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI163_2)
	pcalau12i	$a0, %pc_hi20(.LCPI163_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI163_4)
	pcalau12i	$a0, %pc_hi20(.LCPI163_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI163_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB163_13
	.p2align	4, , 16
.LBB163_12:                             # %_Z9check_sumIdEvT_.exit.us32
                                        #   in Loop: Header=BB163_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB163_21
.LBB163_13:                             # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB163_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB163_14:                             #   Parent Loop BB163_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB163_14
# %bb.15:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB163_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB163_12
# %bb.16:                               #   in Loop: Header=BB163_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB163_12
.LBB163_17:                             # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI163_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI163_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI163_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI163_1)
	pcalau12i	$a0, %pc_hi20(.LCPI163_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI163_2)
	pcalau12i	$a0, %pc_hi20(.LCPI163_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI163_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB163_19
	.p2align	4, , 16
.LBB163_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB163_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB163_21
.LBB163_19:                             # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB163_18
# %bb.20:                               #   in Loop: Header=BB163_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB163_18
.LBB163_21:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB163_23
# %bb.22:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB163_25
.LBB163_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB163_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB163_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI163_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI163_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB163_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end163:
	.size	_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc, .Lfunc_end163-_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc
.LCPI164_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI164_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI164_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI164_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI164_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI164_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB164_21
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 16
	blt	$s0, $a0, .LBB164_10
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -15
	addi.d	$s7, $s1, 64
	addi.d	$s8, $s1, 128
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI164_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI164_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI164_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI164_1)
	pcalau12i	$a0, %pc_hi20(.LCPI164_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI164_2)
	pcalau12i	$a0, %pc_hi20(.LCPI164_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI164_4)
	pcalau12i	$a0, %pc_hi20(.LCPI164_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI164_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB164_4
	.p2align	4, , 16
.LBB164_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB164_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB164_21
.LBB164_4:                              # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB164_5 Depth 2
                                        #     Child Loop BB164_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB164_5:                              #   Parent Loop BB164_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 16
	addi.w	$a1, $a1, 16
	addi.d	$a2, $a2, 128
	addi.d	$a3, $a3, 128
	bltu	$a0, $s6, .LBB164_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB164_4 Depth=1
	bge	$a1, $s0, .LBB164_8
	.p2align	4, , 16
.LBB164_7:                              # %.lr.ph24.us
                                        #   Parent Loop BB164_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB164_7
.LBB164_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB164_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB164_3
# %bb.9:                                #   in Loop: Header=BB164_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB164_3
.LBB164_10:                             # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB164_17
# %bb.11:                               # %.preheader18.us28.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI164_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI164_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI164_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI164_1)
	pcalau12i	$a0, %pc_hi20(.LCPI164_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI164_2)
	pcalau12i	$a0, %pc_hi20(.LCPI164_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI164_4)
	pcalau12i	$a0, %pc_hi20(.LCPI164_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI164_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB164_13
	.p2align	4, , 16
.LBB164_12:                             # %_Z9check_sumIdEvT_.exit.us32
                                        #   in Loop: Header=BB164_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB164_21
.LBB164_13:                             # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB164_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB164_14:                             #   Parent Loop BB164_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB164_14
# %bb.15:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB164_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB164_12
# %bb.16:                               #   in Loop: Header=BB164_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB164_12
.LBB164_17:                             # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI164_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI164_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI164_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI164_1)
	pcalau12i	$a0, %pc_hi20(.LCPI164_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI164_2)
	pcalau12i	$a0, %pc_hi20(.LCPI164_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI164_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB164_19
	.p2align	4, , 16
.LBB164_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB164_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB164_21
.LBB164_19:                             # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB164_18
# %bb.20:                               #   in Loop: Header=BB164_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB164_18
.LBB164_21:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB164_23
# %bb.22:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB164_25
.LBB164_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB164_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB164_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI164_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI164_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB164_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end164:
	.size	_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc, .Lfunc_end164-_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc
.LCPI165_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI165_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI165_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI165_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI165_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI165_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB165_21
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 15
	blt	$s0, $a0, .LBB165_10
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -14
	addi.d	$s7, $s1, 56
	addi.d	$s8, $s1, 120
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI165_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI165_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI165_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI165_1)
	pcalau12i	$a0, %pc_hi20(.LCPI165_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI165_2)
	pcalau12i	$a0, %pc_hi20(.LCPI165_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI165_4)
	pcalau12i	$a0, %pc_hi20(.LCPI165_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI165_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB165_4
	.p2align	4, , 16
.LBB165_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB165_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB165_21
.LBB165_4:                              # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB165_5 Depth 2
                                        #     Child Loop BB165_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB165_5:                              #   Parent Loop BB165_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 15
	addi.w	$a1, $a1, 15
	addi.d	$a2, $a2, 120
	addi.d	$a3, $a3, 120
	bltu	$a0, $s6, .LBB165_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB165_4 Depth=1
	bge	$a1, $s0, .LBB165_8
	.p2align	4, , 16
.LBB165_7:                              # %.lr.ph24.us
                                        #   Parent Loop BB165_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB165_7
.LBB165_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB165_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB165_3
# %bb.9:                                #   in Loop: Header=BB165_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB165_3
.LBB165_10:                             # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB165_17
# %bb.11:                               # %.preheader18.us28.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI165_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI165_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI165_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI165_1)
	pcalau12i	$a0, %pc_hi20(.LCPI165_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI165_2)
	pcalau12i	$a0, %pc_hi20(.LCPI165_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI165_4)
	pcalau12i	$a0, %pc_hi20(.LCPI165_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI165_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB165_13
	.p2align	4, , 16
.LBB165_12:                             # %_Z9check_sumIdEvT_.exit.us32
                                        #   in Loop: Header=BB165_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB165_21
.LBB165_13:                             # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB165_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB165_14:                             #   Parent Loop BB165_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB165_14
# %bb.15:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB165_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB165_12
# %bb.16:                               #   in Loop: Header=BB165_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB165_12
.LBB165_17:                             # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI165_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI165_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI165_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI165_1)
	pcalau12i	$a0, %pc_hi20(.LCPI165_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI165_2)
	pcalau12i	$a0, %pc_hi20(.LCPI165_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI165_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB165_19
	.p2align	4, , 16
.LBB165_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB165_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB165_21
.LBB165_19:                             # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB165_18
# %bb.20:                               #   in Loop: Header=BB165_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB165_18
.LBB165_21:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB165_23
# %bb.22:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB165_25
.LBB165_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB165_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB165_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI165_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI165_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB165_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end165:
	.size	_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc, .Lfunc_end165-_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc
.LCPI166_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI166_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI166_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI166_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI166_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI166_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB166_21
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 14
	blt	$s0, $a0, .LBB166_10
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -13
	addi.d	$s7, $s1, 56
	addi.d	$s8, $s1, 112
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI166_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI166_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI166_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI166_1)
	pcalau12i	$a0, %pc_hi20(.LCPI166_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI166_2)
	pcalau12i	$a0, %pc_hi20(.LCPI166_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI166_4)
	pcalau12i	$a0, %pc_hi20(.LCPI166_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI166_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB166_4
	.p2align	4, , 16
.LBB166_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB166_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB166_21
.LBB166_4:                              # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB166_5 Depth 2
                                        #     Child Loop BB166_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB166_5:                              #   Parent Loop BB166_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 14
	addi.w	$a1, $a1, 14
	addi.d	$a2, $a2, 112
	addi.d	$a3, $a3, 112
	bltu	$a0, $s6, .LBB166_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB166_4 Depth=1
	bge	$a1, $s0, .LBB166_8
	.p2align	4, , 16
.LBB166_7:                              # %.lr.ph24.us
                                        #   Parent Loop BB166_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB166_7
.LBB166_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB166_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB166_3
# %bb.9:                                #   in Loop: Header=BB166_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB166_3
.LBB166_10:                             # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB166_17
# %bb.11:                               # %.preheader18.us28.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI166_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI166_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI166_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI166_1)
	pcalau12i	$a0, %pc_hi20(.LCPI166_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI166_2)
	pcalau12i	$a0, %pc_hi20(.LCPI166_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI166_4)
	pcalau12i	$a0, %pc_hi20(.LCPI166_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI166_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB166_13
	.p2align	4, , 16
.LBB166_12:                             # %_Z9check_sumIdEvT_.exit.us32
                                        #   in Loop: Header=BB166_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB166_21
.LBB166_13:                             # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB166_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB166_14:                             #   Parent Loop BB166_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB166_14
# %bb.15:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB166_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB166_12
# %bb.16:                               #   in Loop: Header=BB166_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB166_12
.LBB166_17:                             # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI166_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI166_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI166_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI166_1)
	pcalau12i	$a0, %pc_hi20(.LCPI166_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI166_2)
	pcalau12i	$a0, %pc_hi20(.LCPI166_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI166_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB166_19
	.p2align	4, , 16
.LBB166_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB166_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB166_21
.LBB166_19:                             # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB166_18
# %bb.20:                               #   in Loop: Header=BB166_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB166_18
.LBB166_21:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB166_23
# %bb.22:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB166_25
.LBB166_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB166_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB166_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI166_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI166_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB166_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end166:
	.size	_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc, .Lfunc_end166-_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc
.LCPI167_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI167_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI167_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI167_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI167_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI167_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB167_21
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 13
	blt	$s0, $a0, .LBB167_10
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -12
	addi.d	$s7, $s1, 48
	addi.d	$s8, $s1, 104
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI167_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI167_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI167_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI167_1)
	pcalau12i	$a0, %pc_hi20(.LCPI167_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI167_2)
	pcalau12i	$a0, %pc_hi20(.LCPI167_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI167_4)
	pcalau12i	$a0, %pc_hi20(.LCPI167_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI167_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB167_4
	.p2align	4, , 16
.LBB167_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB167_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB167_21
.LBB167_4:                              # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB167_5 Depth 2
                                        #     Child Loop BB167_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB167_5:                              #   Parent Loop BB167_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 13
	addi.w	$a1, $a1, 13
	addi.d	$a2, $a2, 104
	addi.d	$a3, $a3, 104
	bltu	$a0, $s6, .LBB167_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB167_4 Depth=1
	bge	$a1, $s0, .LBB167_8
	.p2align	4, , 16
.LBB167_7:                              # %.lr.ph24.us
                                        #   Parent Loop BB167_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB167_7
.LBB167_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB167_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB167_3
# %bb.9:                                #   in Loop: Header=BB167_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB167_3
.LBB167_10:                             # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB167_17
# %bb.11:                               # %.preheader18.us28.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI167_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI167_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI167_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI167_1)
	pcalau12i	$a0, %pc_hi20(.LCPI167_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI167_2)
	pcalau12i	$a0, %pc_hi20(.LCPI167_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI167_4)
	pcalau12i	$a0, %pc_hi20(.LCPI167_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI167_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB167_13
	.p2align	4, , 16
.LBB167_12:                             # %_Z9check_sumIdEvT_.exit.us32
                                        #   in Loop: Header=BB167_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB167_21
.LBB167_13:                             # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB167_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB167_14:                             #   Parent Loop BB167_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB167_14
# %bb.15:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB167_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB167_12
# %bb.16:                               #   in Loop: Header=BB167_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB167_12
.LBB167_17:                             # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI167_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI167_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI167_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI167_1)
	pcalau12i	$a0, %pc_hi20(.LCPI167_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI167_2)
	pcalau12i	$a0, %pc_hi20(.LCPI167_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI167_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB167_19
	.p2align	4, , 16
.LBB167_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB167_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB167_21
.LBB167_19:                             # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB167_18
# %bb.20:                               #   in Loop: Header=BB167_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB167_18
.LBB167_21:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB167_23
# %bb.22:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB167_25
.LBB167_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB167_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB167_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI167_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI167_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB167_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end167:
	.size	_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc, .Lfunc_end167-_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc
.LCPI168_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI168_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI168_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI168_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI168_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI168_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB168_21
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 12
	blt	$s0, $a0, .LBB168_10
# %bb.2:                                # %.preheader17.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -11
	addi.d	$s7, $s1, 48
	addi.d	$s8, $s1, 96
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI168_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI168_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI168_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI168_1)
	pcalau12i	$a0, %pc_hi20(.LCPI168_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI168_2)
	pcalau12i	$a0, %pc_hi20(.LCPI168_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI168_4)
	pcalau12i	$a0, %pc_hi20(.LCPI168_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI168_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB168_4
	.p2align	4, , 16
.LBB168_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB168_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB168_21
.LBB168_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB168_5 Depth 2
                                        #     Child Loop BB168_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB168_5:                              #   Parent Loop BB168_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 12
	addi.w	$a1, $a1, 12
	addi.d	$a2, $a2, 96
	addi.d	$a3, $a3, 96
	bltu	$a0, $s6, .LBB168_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB168_4 Depth=1
	bge	$a1, $s0, .LBB168_8
	.p2align	4, , 16
.LBB168_7:                              # %.lr.ph23.us
                                        #   Parent Loop BB168_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB168_7
.LBB168_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB168_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB168_3
# %bb.9:                                #   in Loop: Header=BB168_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB168_3
.LBB168_10:                             # %.preheader17.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB168_17
# %bb.11:                               # %.preheader17.us27.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI168_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI168_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI168_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI168_1)
	pcalau12i	$a0, %pc_hi20(.LCPI168_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI168_2)
	pcalau12i	$a0, %pc_hi20(.LCPI168_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI168_4)
	pcalau12i	$a0, %pc_hi20(.LCPI168_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI168_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB168_13
	.p2align	4, , 16
.LBB168_12:                             # %_Z9check_sumIdEvT_.exit.us31
                                        #   in Loop: Header=BB168_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB168_21
.LBB168_13:                             # %.preheader17.us27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB168_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB168_14:                             #   Parent Loop BB168_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB168_14
# %bb.15:                               # %._crit_edge.us35
                                        #   in Loop: Header=BB168_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB168_12
# %bb.16:                               #   in Loop: Header=BB168_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB168_12
.LBB168_17:                             # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI168_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI168_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI168_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI168_1)
	pcalau12i	$a0, %pc_hi20(.LCPI168_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI168_2)
	pcalau12i	$a0, %pc_hi20(.LCPI168_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI168_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB168_19
	.p2align	4, , 16
.LBB168_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB168_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB168_21
.LBB168_19:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB168_18
# %bb.20:                               #   in Loop: Header=BB168_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB168_18
.LBB168_21:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB168_23
# %bb.22:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB168_25
.LBB168_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB168_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB168_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI168_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI168_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB168_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end168:
	.size	_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc, .Lfunc_end168-_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN14for_loop_testsILi10EdE7do_testEPKdPKc,"axG",@progbits,_ZN14for_loop_testsILi10EdE7do_testEPKdPKc,comdat
	.weak	_ZN14for_loop_testsILi10EdE7do_testEPKdPKc # -- Begin function _ZN14for_loop_testsILi10EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN14for_loop_testsILi10EdE7do_testEPKdPKc,@function
_ZN14for_loop_testsILi10EdE7do_testEPKdPKc: # @_ZN14for_loop_testsILi10EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s0, $a0, %pc_lo12(temp_string)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	move	$a0, $fp
	move	$a1, $s1
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 100
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 200
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 300
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 400
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 500
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 600
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 700
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 800
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 900
	move	$a0, $fp
	move	$a1, $s1
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end169:
	.size	_ZN14for_loop_testsILi10EdE7do_testEPKdPKc, .Lfunc_end169-_ZN14for_loop_testsILi10EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc
.LCPI170_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI170_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI170_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI170_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI170_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI170_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB170_21
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 11
	blt	$s0, $a0, .LBB170_10
# %bb.2:                                # %.preheader17.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -10
	addi.d	$s7, $s1, 40
	addi.d	$s8, $s1, 88
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI170_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI170_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI170_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI170_1)
	pcalau12i	$a0, %pc_hi20(.LCPI170_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI170_2)
	pcalau12i	$a0, %pc_hi20(.LCPI170_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI170_4)
	pcalau12i	$a0, %pc_hi20(.LCPI170_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI170_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB170_4
	.p2align	4, , 16
.LBB170_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB170_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB170_21
.LBB170_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB170_5 Depth 2
                                        #     Child Loop BB170_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB170_5:                              #   Parent Loop BB170_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 11
	addi.w	$a1, $a1, 11
	addi.d	$a2, $a2, 88
	addi.d	$a3, $a3, 88
	bltu	$a0, $s6, .LBB170_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB170_4 Depth=1
	bge	$a1, $s0, .LBB170_8
	.p2align	4, , 16
.LBB170_7:                              # %.lr.ph23.us
                                        #   Parent Loop BB170_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB170_7
.LBB170_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB170_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB170_3
# %bb.9:                                #   in Loop: Header=BB170_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB170_3
.LBB170_10:                             # %.preheader17.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB170_17
# %bb.11:                               # %.preheader17.us27.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI170_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI170_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI170_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI170_1)
	pcalau12i	$a0, %pc_hi20(.LCPI170_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI170_2)
	pcalau12i	$a0, %pc_hi20(.LCPI170_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI170_4)
	pcalau12i	$a0, %pc_hi20(.LCPI170_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI170_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB170_13
	.p2align	4, , 16
.LBB170_12:                             # %_Z9check_sumIdEvT_.exit.us31
                                        #   in Loop: Header=BB170_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB170_21
.LBB170_13:                             # %.preheader17.us27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB170_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB170_14:                             #   Parent Loop BB170_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB170_14
# %bb.15:                               # %._crit_edge.us35
                                        #   in Loop: Header=BB170_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB170_12
# %bb.16:                               #   in Loop: Header=BB170_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB170_12
.LBB170_17:                             # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI170_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI170_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI170_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI170_1)
	pcalau12i	$a0, %pc_hi20(.LCPI170_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI170_2)
	pcalau12i	$a0, %pc_hi20(.LCPI170_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI170_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB170_19
	.p2align	4, , 16
.LBB170_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB170_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB170_21
.LBB170_19:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB170_18
# %bb.20:                               #   in Loop: Header=BB170_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB170_18
.LBB170_21:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB170_23
# %bb.22:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB170_25
.LBB170_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB170_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB170_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI170_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI170_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB170_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end170:
	.size	_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc, .Lfunc_end170-_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc
.LCPI171_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI171_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI171_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI171_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI171_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI171_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB171_21
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 10
	blt	$s0, $a0, .LBB171_10
# %bb.2:                                # %.preheader17.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -9
	addi.d	$s7, $s1, 40
	addi.d	$s8, $s1, 80
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI171_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI171_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI171_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI171_1)
	pcalau12i	$a0, %pc_hi20(.LCPI171_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI171_2)
	pcalau12i	$a0, %pc_hi20(.LCPI171_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI171_4)
	pcalau12i	$a0, %pc_hi20(.LCPI171_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI171_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB171_4
	.p2align	4, , 16
.LBB171_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB171_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB171_21
.LBB171_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB171_5 Depth 2
                                        #     Child Loop BB171_7 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	move	$a4, $s8
	move	$a3, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB171_5:                              #   Parent Loop BB171_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 10
	addi.w	$a2, $a2, 10
	addi.d	$a3, $a3, 80
	addi.d	$a4, $a4, 80
	bltu	$a0, $s6, .LBB171_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB171_4 Depth=1
	bge	$a2, $s0, .LBB171_8
	.p2align	4, , 16
.LBB171_7:                              # %.lr.ph23.us
                                        #   Parent Loop BB171_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a5, $a5, 8
	bltu	$a0, $s0, .LBB171_7
.LBB171_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB171_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB171_3
# %bb.9:                                #   in Loop: Header=BB171_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB171_3
.LBB171_10:                             # %.preheader17.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB171_17
# %bb.11:                               # %.preheader17.us27.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI171_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI171_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI171_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI171_1)
	pcalau12i	$a0, %pc_hi20(.LCPI171_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI171_2)
	pcalau12i	$a0, %pc_hi20(.LCPI171_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI171_4)
	pcalau12i	$a0, %pc_hi20(.LCPI171_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI171_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB171_13
	.p2align	4, , 16
.LBB171_12:                             # %_Z9check_sumIdEvT_.exit.us31
                                        #   in Loop: Header=BB171_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB171_21
.LBB171_13:                             # %.preheader17.us27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB171_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB171_14:                             #   Parent Loop BB171_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB171_14
# %bb.15:                               # %._crit_edge.us35
                                        #   in Loop: Header=BB171_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB171_12
# %bb.16:                               #   in Loop: Header=BB171_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB171_12
.LBB171_17:                             # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI171_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI171_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI171_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI171_1)
	pcalau12i	$a0, %pc_hi20(.LCPI171_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI171_2)
	pcalau12i	$a0, %pc_hi20(.LCPI171_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI171_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB171_19
	.p2align	4, , 16
.LBB171_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB171_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB171_21
.LBB171_19:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB171_18
# %bb.20:                               #   in Loop: Header=BB171_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB171_18
.LBB171_21:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB171_23
# %bb.22:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB171_25
.LBB171_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB171_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB171_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI171_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI171_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB171_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end171:
	.size	_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc, .Lfunc_end171-_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc
.LCPI172_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI172_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI172_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI172_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI172_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI172_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB172_21
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 9
	blt	$s0, $a0, .LBB172_10
# %bb.2:                                # %.preheader17.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -8
	addi.d	$s7, $s1, 32
	addi.d	$s8, $s1, 72
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI172_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI172_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI172_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI172_1)
	pcalau12i	$a0, %pc_hi20(.LCPI172_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI172_2)
	pcalau12i	$a0, %pc_hi20(.LCPI172_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI172_4)
	pcalau12i	$a0, %pc_hi20(.LCPI172_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI172_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB172_4
	.p2align	4, , 16
.LBB172_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB172_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB172_21
.LBB172_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB172_5 Depth 2
                                        #     Child Loop BB172_7 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	move	$a4, $s8
	move	$a3, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB172_5:                              #   Parent Loop BB172_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 9
	addi.w	$a2, $a2, 9
	addi.d	$a3, $a3, 72
	addi.d	$a4, $a4, 72
	bltu	$a0, $s6, .LBB172_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB172_4 Depth=1
	bge	$a2, $s0, .LBB172_8
	.p2align	4, , 16
.LBB172_7:                              # %.lr.ph23.us
                                        #   Parent Loop BB172_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a5, $a5, 8
	bltu	$a0, $s0, .LBB172_7
.LBB172_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB172_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB172_3
# %bb.9:                                #   in Loop: Header=BB172_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB172_3
.LBB172_10:                             # %.preheader17.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB172_17
# %bb.11:                               # %.preheader17.us27.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI172_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI172_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI172_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI172_1)
	pcalau12i	$a0, %pc_hi20(.LCPI172_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI172_2)
	pcalau12i	$a0, %pc_hi20(.LCPI172_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI172_4)
	pcalau12i	$a0, %pc_hi20(.LCPI172_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI172_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB172_13
	.p2align	4, , 16
.LBB172_12:                             # %_Z9check_sumIdEvT_.exit.us31
                                        #   in Loop: Header=BB172_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB172_21
.LBB172_13:                             # %.preheader17.us27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB172_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB172_14:                             #   Parent Loop BB172_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB172_14
# %bb.15:                               # %._crit_edge.us35
                                        #   in Loop: Header=BB172_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB172_12
# %bb.16:                               #   in Loop: Header=BB172_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB172_12
.LBB172_17:                             # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI172_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI172_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI172_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI172_1)
	pcalau12i	$a0, %pc_hi20(.LCPI172_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI172_2)
	pcalau12i	$a0, %pc_hi20(.LCPI172_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI172_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB172_19
	.p2align	4, , 16
.LBB172_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB172_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB172_21
.LBB172_19:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB172_18
# %bb.20:                               #   in Loop: Header=BB172_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB172_18
.LBB172_21:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB172_23
# %bb.22:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB172_25
.LBB172_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB172_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB172_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI172_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI172_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB172_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end172:
	.size	_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc, .Lfunc_end172-_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc
.LCPI173_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI173_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI173_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI173_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI173_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI173_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB173_21
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 8
	blt	$s0, $a0, .LBB173_10
# %bb.2:                                # %.preheader17.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -7
	addi.d	$s7, $s1, 32
	addi.d	$s8, $s1, 64
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI173_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI173_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI173_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI173_1)
	pcalau12i	$a0, %pc_hi20(.LCPI173_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI173_2)
	pcalau12i	$a0, %pc_hi20(.LCPI173_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI173_4)
	pcalau12i	$a0, %pc_hi20(.LCPI173_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI173_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB173_4
	.p2align	4, , 16
.LBB173_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB173_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB173_21
.LBB173_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB173_5 Depth 2
                                        #     Child Loop BB173_7 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	move	$a4, $s8
	move	$a3, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB173_5:                              #   Parent Loop BB173_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 8
	addi.w	$a2, $a2, 8
	addi.d	$a3, $a3, 64
	addi.d	$a4, $a4, 64
	bltu	$a0, $s6, .LBB173_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB173_4 Depth=1
	bge	$a2, $s0, .LBB173_8
	.p2align	4, , 16
.LBB173_7:                              # %.lr.ph23.us
                                        #   Parent Loop BB173_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a5, $a5, 8
	bltu	$a0, $s0, .LBB173_7
.LBB173_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB173_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB173_3
# %bb.9:                                #   in Loop: Header=BB173_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB173_3
.LBB173_10:                             # %.preheader17.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB173_17
# %bb.11:                               # %.preheader17.us27.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI173_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI173_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI173_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI173_1)
	pcalau12i	$a0, %pc_hi20(.LCPI173_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI173_2)
	pcalau12i	$a0, %pc_hi20(.LCPI173_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI173_4)
	pcalau12i	$a0, %pc_hi20(.LCPI173_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI173_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB173_13
	.p2align	4, , 16
.LBB173_12:                             # %_Z9check_sumIdEvT_.exit.us31
                                        #   in Loop: Header=BB173_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB173_21
.LBB173_13:                             # %.preheader17.us27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB173_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB173_14:                             #   Parent Loop BB173_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB173_14
# %bb.15:                               # %._crit_edge.us35
                                        #   in Loop: Header=BB173_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB173_12
# %bb.16:                               #   in Loop: Header=BB173_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB173_12
.LBB173_17:                             # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI173_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI173_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI173_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI173_1)
	pcalau12i	$a0, %pc_hi20(.LCPI173_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI173_2)
	pcalau12i	$a0, %pc_hi20(.LCPI173_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI173_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB173_19
	.p2align	4, , 16
.LBB173_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB173_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB173_21
.LBB173_19:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB173_18
# %bb.20:                               #   in Loop: Header=BB173_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB173_18
.LBB173_21:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB173_23
# %bb.22:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB173_25
.LBB173_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB173_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB173_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI173_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI173_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB173_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end173:
	.size	_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc, .Lfunc_end173-_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc
.LCPI174_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI174_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI174_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI174_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI174_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI174_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB174_21
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 7
	blt	$s0, $a0, .LBB174_10
# %bb.2:                                # %.preheader17.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -6
	addi.d	$s7, $s1, 24
	addi.d	$s8, $s1, 56
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI174_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI174_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI174_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI174_1)
	pcalau12i	$a0, %pc_hi20(.LCPI174_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI174_2)
	pcalau12i	$a0, %pc_hi20(.LCPI174_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI174_4)
	pcalau12i	$a0, %pc_hi20(.LCPI174_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI174_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB174_4
	.p2align	4, , 16
.LBB174_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB174_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB174_21
.LBB174_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_5 Depth 2
                                        #     Child Loop BB174_7 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	move	$a4, $s8
	move	$a3, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB174_5:                              #   Parent Loop BB174_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 7
	addi.w	$a2, $a2, 7
	addi.d	$a3, $a3, 56
	addi.d	$a4, $a4, 56
	bltu	$a0, $s6, .LBB174_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB174_4 Depth=1
	bge	$a2, $s0, .LBB174_8
	.p2align	4, , 16
.LBB174_7:                              # %.lr.ph23.us
                                        #   Parent Loop BB174_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a5, $a5, 8
	bltu	$a0, $s0, .LBB174_7
.LBB174_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB174_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB174_3
# %bb.9:                                #   in Loop: Header=BB174_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB174_3
.LBB174_10:                             # %.preheader17.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB174_17
# %bb.11:                               # %.preheader17.us27.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI174_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI174_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI174_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI174_1)
	pcalau12i	$a0, %pc_hi20(.LCPI174_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI174_2)
	pcalau12i	$a0, %pc_hi20(.LCPI174_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI174_4)
	pcalau12i	$a0, %pc_hi20(.LCPI174_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI174_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB174_13
	.p2align	4, , 16
.LBB174_12:                             # %_Z9check_sumIdEvT_.exit.us31
                                        #   in Loop: Header=BB174_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB174_21
.LBB174_13:                             # %.preheader17.us27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB174_14:                             #   Parent Loop BB174_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB174_14
# %bb.15:                               # %._crit_edge.us35
                                        #   in Loop: Header=BB174_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB174_12
# %bb.16:                               #   in Loop: Header=BB174_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB174_12
.LBB174_17:                             # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI174_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI174_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI174_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI174_1)
	pcalau12i	$a0, %pc_hi20(.LCPI174_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI174_2)
	pcalau12i	$a0, %pc_hi20(.LCPI174_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI174_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB174_19
	.p2align	4, , 16
.LBB174_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB174_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB174_21
.LBB174_19:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB174_18
# %bb.20:                               #   in Loop: Header=BB174_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB174_18
.LBB174_21:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB174_23
# %bb.22:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB174_25
.LBB174_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB174_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB174_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI174_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI174_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB174_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end174:
	.size	_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc, .Lfunc_end174-_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc
.LCPI175_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI175_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI175_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI175_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI175_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI175_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB175_21
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 6
	blt	$s0, $a0, .LBB175_10
# %bb.2:                                # %.preheader17.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -5
	addi.d	$s7, $s1, 24
	addi.d	$s8, $s1, 48
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI175_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI175_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI175_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI175_1)
	pcalau12i	$a0, %pc_hi20(.LCPI175_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI175_2)
	pcalau12i	$a0, %pc_hi20(.LCPI175_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI175_4)
	pcalau12i	$a0, %pc_hi20(.LCPI175_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI175_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB175_4
	.p2align	4, , 16
.LBB175_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB175_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB175_21
.LBB175_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB175_5 Depth 2
                                        #     Child Loop BB175_7 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	move	$a4, $s8
	move	$a3, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB175_5:                              #   Parent Loop BB175_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 6
	addi.d	$a3, $a3, 48
	addi.w	$a2, $a2, 6
	addi.d	$a4, $a4, 48
	bltu	$a0, $s6, .LBB175_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB175_4 Depth=1
	bge	$a2, $s0, .LBB175_8
	.p2align	4, , 16
.LBB175_7:                              # %.lr.ph23.us
                                        #   Parent Loop BB175_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a5, $a5, 8
	bltu	$a0, $s0, .LBB175_7
.LBB175_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB175_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB175_3
# %bb.9:                                #   in Loop: Header=BB175_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB175_3
.LBB175_10:                             # %.preheader17.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB175_17
# %bb.11:                               # %.preheader17.us27.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI175_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI175_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI175_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI175_1)
	pcalau12i	$a0, %pc_hi20(.LCPI175_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI175_2)
	pcalau12i	$a0, %pc_hi20(.LCPI175_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI175_4)
	pcalau12i	$a0, %pc_hi20(.LCPI175_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI175_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB175_13
	.p2align	4, , 16
.LBB175_12:                             # %_Z9check_sumIdEvT_.exit.us31
                                        #   in Loop: Header=BB175_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB175_21
.LBB175_13:                             # %.preheader17.us27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB175_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB175_14:                             #   Parent Loop BB175_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB175_14
# %bb.15:                               # %._crit_edge.us35
                                        #   in Loop: Header=BB175_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB175_12
# %bb.16:                               #   in Loop: Header=BB175_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB175_12
.LBB175_17:                             # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI175_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI175_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI175_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI175_1)
	pcalau12i	$a0, %pc_hi20(.LCPI175_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI175_2)
	pcalau12i	$a0, %pc_hi20(.LCPI175_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI175_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB175_19
	.p2align	4, , 16
.LBB175_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB175_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB175_21
.LBB175_19:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB175_18
# %bb.20:                               #   in Loop: Header=BB175_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB175_18
.LBB175_21:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB175_23
# %bb.22:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB175_25
.LBB175_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB175_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB175_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI175_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI175_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB175_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end175:
	.size	_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc, .Lfunc_end175-_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc
.LCPI176_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI176_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI176_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI176_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI176_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI176_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB176_21
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 5
	blt	$s0, $a0, .LBB176_10
# %bb.2:                                # %.preheader17.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -4
	addi.d	$s7, $s1, 16
	addi.d	$s8, $s1, 40
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI176_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI176_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI176_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI176_1)
	pcalau12i	$a0, %pc_hi20(.LCPI176_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI176_2)
	pcalau12i	$a0, %pc_hi20(.LCPI176_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI176_4)
	pcalau12i	$a0, %pc_hi20(.LCPI176_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI176_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB176_4
	.p2align	4, , 16
.LBB176_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB176_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB176_21
.LBB176_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_5 Depth 2
                                        #     Child Loop BB176_7 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	move	$a4, $s8
	move	$a3, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB176_5:                              #   Parent Loop BB176_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 5
	addi.d	$a3, $a3, 40
	addi.w	$a2, $a2, 5
	addi.d	$a4, $a4, 40
	bltu	$a0, $s6, .LBB176_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB176_4 Depth=1
	bge	$a2, $s0, .LBB176_8
	.p2align	4, , 16
.LBB176_7:                              # %.lr.ph23.us
                                        #   Parent Loop BB176_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a5, $a5, 8
	bltu	$a0, $s0, .LBB176_7
.LBB176_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB176_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB176_3
# %bb.9:                                #   in Loop: Header=BB176_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB176_3
.LBB176_10:                             # %.preheader17.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB176_17
# %bb.11:                               # %.preheader17.us27.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI176_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI176_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI176_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI176_1)
	pcalau12i	$a0, %pc_hi20(.LCPI176_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI176_2)
	pcalau12i	$a0, %pc_hi20(.LCPI176_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI176_4)
	pcalau12i	$a0, %pc_hi20(.LCPI176_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI176_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB176_13
	.p2align	4, , 16
.LBB176_12:                             # %_Z9check_sumIdEvT_.exit.us31
                                        #   in Loop: Header=BB176_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB176_21
.LBB176_13:                             # %.preheader17.us27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB176_14:                             #   Parent Loop BB176_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB176_14
# %bb.15:                               # %._crit_edge.us35
                                        #   in Loop: Header=BB176_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB176_12
# %bb.16:                               #   in Loop: Header=BB176_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB176_12
.LBB176_17:                             # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI176_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI176_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI176_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI176_1)
	pcalau12i	$a0, %pc_hi20(.LCPI176_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI176_2)
	pcalau12i	$a0, %pc_hi20(.LCPI176_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI176_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB176_19
	.p2align	4, , 16
.LBB176_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB176_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB176_21
.LBB176_19:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB176_18
# %bb.20:                               #   in Loop: Header=BB176_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB176_18
.LBB176_21:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB176_23
# %bb.22:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB176_25
.LBB176_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB176_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB176_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI176_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI176_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB176_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end176:
	.size	_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc, .Lfunc_end176-_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc
.LCPI177_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI177_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI177_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI177_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI177_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI177_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB177_21
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 4
	blt	$s0, $a0, .LBB177_10
# %bb.2:                                # %.preheader17.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -3
	addi.d	$s7, $s1, 16
	addi.d	$s8, $s1, 32
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI177_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI177_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI177_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI177_1)
	pcalau12i	$a0, %pc_hi20(.LCPI177_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI177_2)
	pcalau12i	$a0, %pc_hi20(.LCPI177_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI177_4)
	pcalau12i	$a0, %pc_hi20(.LCPI177_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI177_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB177_4
	.p2align	4, , 16
.LBB177_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB177_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB177_21
.LBB177_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_5 Depth 2
                                        #     Child Loop BB177_7 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	move	$a4, $s8
	move	$a3, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB177_5:                              #   Parent Loop BB177_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 4
	addi.d	$a3, $a3, 32
	addi.w	$a2, $a2, 4
	addi.d	$a4, $a4, 32
	bltu	$a0, $s6, .LBB177_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB177_4 Depth=1
	bge	$a2, $s0, .LBB177_8
	.p2align	4, , 16
.LBB177_7:                              # %.lr.ph23.us
                                        #   Parent Loop BB177_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a5, $a5, 8
	bltu	$a0, $s0, .LBB177_7
.LBB177_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB177_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB177_3
# %bb.9:                                #   in Loop: Header=BB177_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB177_3
.LBB177_10:                             # %.preheader17.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB177_17
# %bb.11:                               # %.preheader17.us27.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI177_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI177_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI177_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI177_1)
	pcalau12i	$a0, %pc_hi20(.LCPI177_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI177_2)
	pcalau12i	$a0, %pc_hi20(.LCPI177_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI177_4)
	pcalau12i	$a0, %pc_hi20(.LCPI177_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI177_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB177_13
	.p2align	4, , 16
.LBB177_12:                             # %_Z9check_sumIdEvT_.exit.us31
                                        #   in Loop: Header=BB177_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB177_21
.LBB177_13:                             # %.preheader17.us27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB177_14:                             #   Parent Loop BB177_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB177_14
# %bb.15:                               # %._crit_edge.us35
                                        #   in Loop: Header=BB177_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB177_12
# %bb.16:                               #   in Loop: Header=BB177_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB177_12
.LBB177_17:                             # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI177_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI177_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI177_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI177_1)
	pcalau12i	$a0, %pc_hi20(.LCPI177_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI177_2)
	pcalau12i	$a0, %pc_hi20(.LCPI177_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI177_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB177_19
	.p2align	4, , 16
.LBB177_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB177_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB177_21
.LBB177_19:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB177_18
# %bb.20:                               #   in Loop: Header=BB177_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB177_18
.LBB177_21:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB177_23
# %bb.22:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB177_25
.LBB177_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB177_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB177_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI177_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI177_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB177_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end177:
	.size	_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc, .Lfunc_end177-_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc
.LCPI178_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI178_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI178_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI178_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI178_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI178_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB178_21
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 3
	blt	$s0, $a0, .LBB178_10
# %bb.2:                                # %.preheader17.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -2
	addi.d	$s7, $s1, 16
	addi.d	$s8, $s1, 24
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI178_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI178_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI178_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI178_1)
	pcalau12i	$a0, %pc_hi20(.LCPI178_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI178_2)
	pcalau12i	$a0, %pc_hi20(.LCPI178_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI178_4)
	pcalau12i	$a0, %pc_hi20(.LCPI178_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI178_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB178_4
	.p2align	4, , 16
.LBB178_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB178_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB178_21
.LBB178_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB178_5 Depth 2
                                        #     Child Loop BB178_7 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	move	$a5, $s8
	move	$a3, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB178_5:                              #   Parent Loop BB178_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a5
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 3
	addi.d	$a3, $a3, 24
	addi.w	$a2, $a2, 3
	addi.d	$a5, $a5, 24
	bltu	$a0, $s6, .LBB178_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB178_4 Depth=1
	bge	$a2, $s0, .LBB178_8
	.p2align	4, , 16
.LBB178_7:                              # %.lr.ph23.us
                                        #   Parent Loop BB178_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB178_7
.LBB178_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB178_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB178_3
# %bb.9:                                #   in Loop: Header=BB178_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB178_3
.LBB178_10:                             # %.preheader17.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB178_17
# %bb.11:                               # %.preheader17.us27.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI178_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI178_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI178_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI178_1)
	pcalau12i	$a0, %pc_hi20(.LCPI178_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI178_2)
	pcalau12i	$a0, %pc_hi20(.LCPI178_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI178_4)
	pcalau12i	$a0, %pc_hi20(.LCPI178_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI178_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB178_13
	.p2align	4, , 16
.LBB178_12:                             # %_Z9check_sumIdEvT_.exit.us31
                                        #   in Loop: Header=BB178_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB178_21
.LBB178_13:                             # %.preheader17.us27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB178_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB178_14:                             #   Parent Loop BB178_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB178_14
# %bb.15:                               # %._crit_edge.us35
                                        #   in Loop: Header=BB178_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB178_12
# %bb.16:                               #   in Loop: Header=BB178_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB178_12
.LBB178_17:                             # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI178_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI178_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI178_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI178_1)
	pcalau12i	$a0, %pc_hi20(.LCPI178_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI178_2)
	pcalau12i	$a0, %pc_hi20(.LCPI178_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI178_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB178_19
	.p2align	4, , 16
.LBB178_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB178_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB178_21
.LBB178_19:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB178_18
# %bb.20:                               #   in Loop: Header=BB178_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB178_18
.LBB178_21:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB178_23
# %bb.22:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB178_25
.LBB178_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB178_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB178_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI178_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI178_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB178_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end178:
	.size	_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc, .Lfunc_end178-_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc
.LCPI179_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI179_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI179_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI179_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI179_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI179_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 112                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 104                  # 8-byte Folded Spill
	fst.d	$fs2, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 72                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB179_19
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 2
	blt	$s0, $a0, .LBB179_10
# %bb.2:                                # %.preheader17.us.preheader
	move	$s5, $zero
	addi.w	$s6, $s0, -1
	addi.d	$s7, $s1, 8
	addi.d	$s8, $s1, 16
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI179_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI179_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI179_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI179_1)
	pcalau12i	$a0, %pc_hi20(.LCPI179_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI179_2)
	pcalau12i	$a0, %pc_hi20(.LCPI179_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI179_4)
	pcalau12i	$a0, %pc_hi20(.LCPI179_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI179_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB179_4
	.p2align	4, , 16
.LBB179_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB179_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB179_19
.LBB179_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB179_5 Depth 2
                                        #     Child Loop BB179_7 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	move	$a5, $s8
	move	$a4, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB179_5:                              #   Parent Loop BB179_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a3, $a5
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 2
	addi.d	$a4, $a4, 16
	addi.w	$a2, $a2, 2
	addi.d	$a5, $a5, 16
	bltu	$a0, $s6, .LBB179_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB179_4 Depth=1
	bge	$a2, $s0, .LBB179_8
	.p2align	4, , 16
.LBB179_7:                              # %.lr.ph23.us
                                        #   Parent Loop BB179_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 8
	bltu	$a0, $s0, .LBB179_7
.LBB179_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB179_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB179_3
# %bb.9:                                #   in Loop: Header=BB179_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB179_3
.LBB179_10:                             # %.preheader17.lr.ph.split
	move	$fp, $zero
	ori	$a0, $zero, 1
	bne	$s0, $a0, .LBB179_15
# %bb.11:                               # %._crit_edge.us35.preheader
	pcalau12i	$s5, %pc_hi20(init_value)
	ori	$a0, $zero, 0
	lu32i.d	$a0, -516992
	lu52i.d	$a0, $a0, 1036
	vreplgr2vr.d	$vr3, $a0
	ori	$a0, $zero, 0
	lu32i.d	$a0, -393216
	lu52i.d	$a0, $a0, -1022
	vreplgr2vr.d	$vr4, $a0
	ori	$a0, $zero, 0
	lu32i.d	$a0, -268678
	lu52i.d	$a0, $a0, 1042
	vreplgr2vr.d	$vr5, $a0
	pcalau12i	$a0, %pc_hi20(.LCPI179_2)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI179_2)
	pcalau12i	$a0, %pc_hi20(.LCPI179_4)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI179_4)
	pcalau12i	$a0, %pc_hi20(.LCPI179_3)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI179_3)
	movgr2fr.d	$fs3, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	vst	$vr3, $sp, 48                   # 16-byte Folded Spill
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB179_13
	.p2align	4, , 16
.LBB179_12:                             # %_Z9check_sumIdEvT_.exit.us31
                                        #   in Loop: Header=BB179_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB179_19
.LBB179_13:                             # %._crit_edge.us35
                                        # =>This Inner Loop Header: Depth=1
	fld.d	$fa0, $s1, 0
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	movfr2gr.d	$a0, $fa0
	vinsgr2vr.d	$vr0, $a0, 0
	movfr2gr.d	$a0, $fa1
	vinsgr2vr.d	$vr0, $a0, 1
	vfadd.d	$vr0, $vr0, $vr3
	vfmadd.d	$vr0, $vr0, $vr5, $vr4
	vfadd.d	$vr0, $vr0, $vr3
	vfmadd.d	$vr0, $vr0, $vr5, $vr4
	vfadd.d	$vr0, $vr0, $vr3
	vfmadd.d	$vr0, $vr0, $vr5, $vr4
	vreplvei.d	$vr1, $vr0, 0
	fadd.d	$fa1, $fa1, $fs3
	vreplvei.d	$vr0, $vr0, 1
	fmul.d	$fa0, $fa0, $fs0
	fadd.d	$fa0, $fa1, $fa0
	fabs.d	$fa2, $fa1
	fdiv.d	$fa1, $fa0, $fa1
	fcmp.clt.d	$fcc0, $fs1, $fa2
	fsel	$fa0, $fa0, $fa1, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs2
	bcnez	$fcc0, .LBB179_12
# %bb.14:                               #   in Loop: Header=BB179_13 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	vld	$vr3, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB179_12
.LBB179_15:                             # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI179_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI179_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI179_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI179_1)
	pcalau12i	$a0, %pc_hi20(.LCPI179_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI179_2)
	pcalau12i	$a0, %pc_hi20(.LCPI179_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI179_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB179_17
	.p2align	4, , 16
.LBB179_16:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB179_17 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB179_19
.LBB179_17:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB179_16
# %bb.18:                               #   in Loop: Header=BB179_17 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB179_16
.LBB179_19:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s3, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(results)
	ld.d	$a2, $s3, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB179_21
# %bb.20:                               # %._crit_edge26
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB179_23
.LBB179_21:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s3, %pc_lo12(results)
	beqz	$a0, .LBB179_24
# %bb.22:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB179_23:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI179_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI179_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 96                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 104                  # 8-byte Folded Reload
	fld.d	$fs0, $sp, 112                  # 8-byte Folded Reload
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB179_24:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end179:
	.size	_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc, .Lfunc_end179-_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc
.LCPI180_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI180_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI180_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI180_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI180_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI180_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 8                    # 8-byte Folded Spill
	fst.d	$fs5, $sp, 0                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	.cfi_offset 61, -128
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB180_12
# %bb.1:                                # %.preheader17.lr.ph
	blez	$s0, .LBB180_8
# %bb.2:                                # %.preheader17.us.preheader
	move	$s6, $zero
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI180_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI180_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI180_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI180_1)
	pcalau12i	$a0, %pc_hi20(.LCPI180_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI180_2)
	pcalau12i	$a0, %pc_hi20(.LCPI180_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI180_4)
	pcalau12i	$a0, %pc_hi20(.LCPI180_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI180_3)
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB180_4
	.p2align	4, , 16
.LBB180_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB180_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB180_12
.LBB180_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB180_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB180_5:                              #   Parent Loop BB180_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB180_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB180_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB180_3
# %bb.7:                                #   in Loop: Header=BB180_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB180_3
.LBB180_8:                              # %.preheader17.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI180_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI180_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI180_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI180_1)
	pcalau12i	$a0, %pc_hi20(.LCPI180_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI180_2)
	pcalau12i	$a0, %pc_hi20(.LCPI180_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI180_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB180_10
	.p2align	4, , 16
.LBB180_9:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB180_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB180_12
.LBB180_10:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB180_9
# %bb.11:                               #   in Loop: Header=BB180_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB180_9
.LBB180_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB180_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB180_16
.LBB180_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB180_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB180_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI180_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI180_5)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 0                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB180_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end180:
	.size	_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc, .Lfunc_end180-_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc
.LCPI181_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI181_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI181_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI181_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI181_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI181_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB181_21
# %bb.1:                                # %.preheader19.lr.ph
	ori	$a0, $zero, 32
	blt	$s0, $a0, .LBB181_10
# %bb.2:                                # %.preheader19.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -31
	addi.d	$s7, $s1, 128
	addi.d	$s8, $s1, 256
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI181_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI181_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI181_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI181_1)
	pcalau12i	$a0, %pc_hi20(.LCPI181_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI181_2)
	pcalau12i	$a0, %pc_hi20(.LCPI181_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI181_4)
	pcalau12i	$a0, %pc_hi20(.LCPI181_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI181_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB181_4
	.p2align	4, , 16
.LBB181_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB181_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB181_21
.LBB181_4:                              # %.preheader19.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB181_5 Depth 2
                                        #     Child Loop BB181_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB181_5:                              #   Parent Loop BB181_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -128
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -120
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 120
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 32
	addi.w	$a1, $a1, 32
	addi.d	$a2, $a2, 256
	addi.d	$a3, $a3, 256
	bltu	$a0, $s6, .LBB181_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB181_4 Depth=1
	bge	$a1, $s0, .LBB181_8
	.p2align	4, , 16
.LBB181_7:                              # %.lr.ph25.us
                                        #   Parent Loop BB181_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB181_7
.LBB181_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB181_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB181_3
# %bb.9:                                #   in Loop: Header=BB181_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB181_3
.LBB181_10:                             # %.preheader19.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB181_17
# %bb.11:                               # %.preheader19.us29.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI181_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI181_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI181_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI181_1)
	pcalau12i	$a0, %pc_hi20(.LCPI181_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI181_2)
	pcalau12i	$a0, %pc_hi20(.LCPI181_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI181_4)
	pcalau12i	$a0, %pc_hi20(.LCPI181_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI181_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB181_13
	.p2align	4, , 16
.LBB181_12:                             # %_Z9check_sumIdEvT_.exit.us33
                                        #   in Loop: Header=BB181_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB181_21
.LBB181_13:                             # %.preheader19.us29
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB181_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB181_14:                             #   Parent Loop BB181_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB181_14
# %bb.15:                               # %._crit_edge.us37
                                        #   in Loop: Header=BB181_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB181_12
# %bb.16:                               #   in Loop: Header=BB181_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB181_12
.LBB181_17:                             # %.preheader19.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI181_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI181_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI181_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI181_1)
	pcalau12i	$a0, %pc_hi20(.LCPI181_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI181_2)
	pcalau12i	$a0, %pc_hi20(.LCPI181_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI181_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB181_19
	.p2align	4, , 16
.LBB181_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB181_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB181_21
.LBB181_19:                             # %.preheader19
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB181_18
# %bb.20:                               #   in Loop: Header=BB181_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB181_18
.LBB181_21:                             # %._crit_edge28
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB181_23
# %bb.22:                               # %._crit_edge28
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB181_25
.LBB181_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB181_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB181_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI181_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI181_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB181_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end181:
	.size	_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc, .Lfunc_end181-_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc
.LCPI182_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI182_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI182_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI182_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI182_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI182_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB182_21
# %bb.1:                                # %.preheader19.lr.ph
	ori	$a0, $zero, 31
	blt	$s0, $a0, .LBB182_10
# %bb.2:                                # %.preheader19.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -30
	addi.d	$s7, $s1, 120
	addi.d	$s8, $s1, 248
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI182_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI182_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI182_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI182_1)
	pcalau12i	$a0, %pc_hi20(.LCPI182_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI182_2)
	pcalau12i	$a0, %pc_hi20(.LCPI182_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI182_4)
	pcalau12i	$a0, %pc_hi20(.LCPI182_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI182_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB182_4
	.p2align	4, , 16
.LBB182_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB182_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB182_21
.LBB182_4:                              # %.preheader19.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB182_5 Depth 2
                                        #     Child Loop BB182_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB182_5:                              #   Parent Loop BB182_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -120
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 120
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 31
	addi.w	$a1, $a1, 31
	addi.d	$a2, $a2, 248
	addi.d	$a3, $a3, 248
	bltu	$a0, $s6, .LBB182_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB182_4 Depth=1
	bge	$a1, $s0, .LBB182_8
	.p2align	4, , 16
.LBB182_7:                              # %.lr.ph25.us
                                        #   Parent Loop BB182_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB182_7
.LBB182_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB182_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB182_3
# %bb.9:                                #   in Loop: Header=BB182_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB182_3
.LBB182_10:                             # %.preheader19.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB182_17
# %bb.11:                               # %.preheader19.us29.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI182_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI182_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI182_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI182_1)
	pcalau12i	$a0, %pc_hi20(.LCPI182_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI182_2)
	pcalau12i	$a0, %pc_hi20(.LCPI182_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI182_4)
	pcalau12i	$a0, %pc_hi20(.LCPI182_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI182_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB182_13
	.p2align	4, , 16
.LBB182_12:                             # %_Z9check_sumIdEvT_.exit.us33
                                        #   in Loop: Header=BB182_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB182_21
.LBB182_13:                             # %.preheader19.us29
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB182_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB182_14:                             #   Parent Loop BB182_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB182_14
# %bb.15:                               # %._crit_edge.us37
                                        #   in Loop: Header=BB182_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB182_12
# %bb.16:                               #   in Loop: Header=BB182_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB182_12
.LBB182_17:                             # %.preheader19.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI182_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI182_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI182_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI182_1)
	pcalau12i	$a0, %pc_hi20(.LCPI182_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI182_2)
	pcalau12i	$a0, %pc_hi20(.LCPI182_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI182_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB182_19
	.p2align	4, , 16
.LBB182_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB182_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB182_21
.LBB182_19:                             # %.preheader19
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB182_18
# %bb.20:                               #   in Loop: Header=BB182_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB182_18
.LBB182_21:                             # %._crit_edge28
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB182_23
# %bb.22:                               # %._crit_edge28
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB182_25
.LBB182_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB182_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB182_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI182_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI182_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB182_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end182:
	.size	_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc, .Lfunc_end182-_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc
.LCPI183_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI183_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI183_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI183_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI183_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI183_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB183_21
# %bb.1:                                # %.preheader19.lr.ph
	ori	$a0, $zero, 30
	blt	$s0, $a0, .LBB183_10
# %bb.2:                                # %.preheader19.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -29
	addi.d	$s7, $s1, 120
	addi.d	$s8, $s1, 240
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI183_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI183_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI183_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI183_1)
	pcalau12i	$a0, %pc_hi20(.LCPI183_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI183_2)
	pcalau12i	$a0, %pc_hi20(.LCPI183_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI183_4)
	pcalau12i	$a0, %pc_hi20(.LCPI183_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI183_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB183_4
	.p2align	4, , 16
.LBB183_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB183_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB183_21
.LBB183_4:                              # %.preheader19.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_5 Depth 2
                                        #     Child Loop BB183_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB183_5:                              #   Parent Loop BB183_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -120
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 30
	addi.w	$a1, $a1, 30
	addi.d	$a2, $a2, 240
	addi.d	$a3, $a3, 240
	bltu	$a0, $s6, .LBB183_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB183_4 Depth=1
	bge	$a1, $s0, .LBB183_8
	.p2align	4, , 16
.LBB183_7:                              # %.lr.ph25.us
                                        #   Parent Loop BB183_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB183_7
.LBB183_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB183_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB183_3
# %bb.9:                                #   in Loop: Header=BB183_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB183_3
.LBB183_10:                             # %.preheader19.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB183_17
# %bb.11:                               # %.preheader19.us29.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI183_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI183_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI183_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI183_1)
	pcalau12i	$a0, %pc_hi20(.LCPI183_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI183_2)
	pcalau12i	$a0, %pc_hi20(.LCPI183_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI183_4)
	pcalau12i	$a0, %pc_hi20(.LCPI183_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI183_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB183_13
	.p2align	4, , 16
.LBB183_12:                             # %_Z9check_sumIdEvT_.exit.us33
                                        #   in Loop: Header=BB183_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB183_21
.LBB183_13:                             # %.preheader19.us29
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB183_14:                             #   Parent Loop BB183_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB183_14
# %bb.15:                               # %._crit_edge.us37
                                        #   in Loop: Header=BB183_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB183_12
# %bb.16:                               #   in Loop: Header=BB183_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB183_12
.LBB183_17:                             # %.preheader19.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI183_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI183_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI183_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI183_1)
	pcalau12i	$a0, %pc_hi20(.LCPI183_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI183_2)
	pcalau12i	$a0, %pc_hi20(.LCPI183_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI183_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB183_19
	.p2align	4, , 16
.LBB183_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB183_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB183_21
.LBB183_19:                             # %.preheader19
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB183_18
# %bb.20:                               #   in Loop: Header=BB183_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB183_18
.LBB183_21:                             # %._crit_edge28
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB183_23
# %bb.22:                               # %._crit_edge28
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB183_25
.LBB183_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB183_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB183_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI183_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI183_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB183_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end183:
	.size	_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc, .Lfunc_end183-_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN16while_loop_testsILi28EdE7do_testEPKdPKc,"axG",@progbits,_ZN16while_loop_testsILi28EdE7do_testEPKdPKc,comdat
	.weak	_ZN16while_loop_testsILi28EdE7do_testEPKdPKc # -- Begin function _ZN16while_loop_testsILi28EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN16while_loop_testsILi28EdE7do_testEPKdPKc,@function
_ZN16while_loop_testsILi28EdE7do_testEPKdPKc: # @_ZN16while_loop_testsILi28EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN16while_loop_testsILi19EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1900
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 2000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s1, $s1, 2047
	addi.d	$a2, $s1, 53
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 153
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 253
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 353
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 453
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 553
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 653
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end184:
	.size	_ZN16while_loop_testsILi28EdE7do_testEPKdPKc, .Lfunc_end184-_ZN16while_loop_testsILi28EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc
.LCPI185_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI185_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI185_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI185_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI185_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI185_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB185_21
# %bb.1:                                # %.preheader19.lr.ph
	ori	$a0, $zero, 29
	blt	$s0, $a0, .LBB185_10
# %bb.2:                                # %.preheader19.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -28
	addi.d	$s7, $s1, 112
	addi.d	$s8, $s1, 232
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI185_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI185_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI185_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI185_1)
	pcalau12i	$a0, %pc_hi20(.LCPI185_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI185_2)
	pcalau12i	$a0, %pc_hi20(.LCPI185_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI185_4)
	pcalau12i	$a0, %pc_hi20(.LCPI185_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI185_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB185_4
	.p2align	4, , 16
.LBB185_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB185_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB185_21
.LBB185_4:                              # %.preheader19.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB185_5 Depth 2
                                        #     Child Loop BB185_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB185_5:                              #   Parent Loop BB185_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 29
	addi.w	$a1, $a1, 29
	addi.d	$a2, $a2, 232
	addi.d	$a3, $a3, 232
	bltu	$a0, $s6, .LBB185_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB185_4 Depth=1
	bge	$a1, $s0, .LBB185_8
	.p2align	4, , 16
.LBB185_7:                              # %.lr.ph25.us
                                        #   Parent Loop BB185_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB185_7
.LBB185_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB185_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB185_3
# %bb.9:                                #   in Loop: Header=BB185_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB185_3
.LBB185_10:                             # %.preheader19.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB185_17
# %bb.11:                               # %.preheader19.us29.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI185_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI185_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI185_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI185_1)
	pcalau12i	$a0, %pc_hi20(.LCPI185_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI185_2)
	pcalau12i	$a0, %pc_hi20(.LCPI185_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI185_4)
	pcalau12i	$a0, %pc_hi20(.LCPI185_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI185_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB185_13
	.p2align	4, , 16
.LBB185_12:                             # %_Z9check_sumIdEvT_.exit.us33
                                        #   in Loop: Header=BB185_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB185_21
.LBB185_13:                             # %.preheader19.us29
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB185_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB185_14:                             #   Parent Loop BB185_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB185_14
# %bb.15:                               # %._crit_edge.us37
                                        #   in Loop: Header=BB185_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB185_12
# %bb.16:                               #   in Loop: Header=BB185_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB185_12
.LBB185_17:                             # %.preheader19.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI185_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI185_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI185_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI185_1)
	pcalau12i	$a0, %pc_hi20(.LCPI185_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI185_2)
	pcalau12i	$a0, %pc_hi20(.LCPI185_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI185_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB185_19
	.p2align	4, , 16
.LBB185_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB185_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB185_21
.LBB185_19:                             # %.preheader19
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB185_18
# %bb.20:                               #   in Loop: Header=BB185_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB185_18
.LBB185_21:                             # %._crit_edge28
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB185_23
# %bb.22:                               # %._crit_edge28
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB185_25
.LBB185_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB185_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB185_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI185_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI185_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB185_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end185:
	.size	_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc, .Lfunc_end185-_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc
.LCPI186_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI186_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI186_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI186_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI186_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI186_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB186_21
# %bb.1:                                # %.preheader19.lr.ph
	ori	$a0, $zero, 28
	blt	$s0, $a0, .LBB186_10
# %bb.2:                                # %.preheader19.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -27
	addi.d	$s7, $s1, 112
	addi.d	$s8, $s1, 224
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI186_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI186_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI186_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI186_1)
	pcalau12i	$a0, %pc_hi20(.LCPI186_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI186_2)
	pcalau12i	$a0, %pc_hi20(.LCPI186_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI186_4)
	pcalau12i	$a0, %pc_hi20(.LCPI186_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI186_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB186_4
	.p2align	4, , 16
.LBB186_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB186_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB186_21
.LBB186_4:                              # %.preheader19.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB186_5 Depth 2
                                        #     Child Loop BB186_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB186_5:                              #   Parent Loop BB186_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 28
	addi.w	$a1, $a1, 28
	addi.d	$a2, $a2, 224
	addi.d	$a3, $a3, 224
	bltu	$a0, $s6, .LBB186_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB186_4 Depth=1
	bge	$a1, $s0, .LBB186_8
	.p2align	4, , 16
.LBB186_7:                              # %.lr.ph25.us
                                        #   Parent Loop BB186_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB186_7
.LBB186_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB186_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB186_3
# %bb.9:                                #   in Loop: Header=BB186_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB186_3
.LBB186_10:                             # %.preheader19.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB186_17
# %bb.11:                               # %.preheader19.us29.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI186_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI186_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI186_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI186_1)
	pcalau12i	$a0, %pc_hi20(.LCPI186_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI186_2)
	pcalau12i	$a0, %pc_hi20(.LCPI186_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI186_4)
	pcalau12i	$a0, %pc_hi20(.LCPI186_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI186_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB186_13
	.p2align	4, , 16
.LBB186_12:                             # %_Z9check_sumIdEvT_.exit.us33
                                        #   in Loop: Header=BB186_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB186_21
.LBB186_13:                             # %.preheader19.us29
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB186_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB186_14:                             #   Parent Loop BB186_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB186_14
# %bb.15:                               # %._crit_edge.us37
                                        #   in Loop: Header=BB186_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB186_12
# %bb.16:                               #   in Loop: Header=BB186_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB186_12
.LBB186_17:                             # %.preheader19.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI186_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI186_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI186_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI186_1)
	pcalau12i	$a0, %pc_hi20(.LCPI186_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI186_2)
	pcalau12i	$a0, %pc_hi20(.LCPI186_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI186_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB186_19
	.p2align	4, , 16
.LBB186_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB186_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB186_21
.LBB186_19:                             # %.preheader19
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB186_18
# %bb.20:                               #   in Loop: Header=BB186_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB186_18
.LBB186_21:                             # %._crit_edge28
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB186_23
# %bb.22:                               # %._crit_edge28
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB186_25
.LBB186_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB186_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB186_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI186_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI186_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB186_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end186:
	.size	_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc, .Lfunc_end186-_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc
.LCPI187_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI187_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI187_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI187_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI187_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI187_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB187_21
# %bb.1:                                # %.preheader19.lr.ph
	ori	$a0, $zero, 27
	blt	$s0, $a0, .LBB187_10
# %bb.2:                                # %.preheader19.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -26
	addi.d	$s7, $s1, 104
	addi.d	$s8, $s1, 216
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI187_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI187_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI187_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI187_1)
	pcalau12i	$a0, %pc_hi20(.LCPI187_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI187_2)
	pcalau12i	$a0, %pc_hi20(.LCPI187_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI187_4)
	pcalau12i	$a0, %pc_hi20(.LCPI187_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI187_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB187_4
	.p2align	4, , 16
.LBB187_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB187_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB187_21
.LBB187_4:                              # %.preheader19.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB187_5 Depth 2
                                        #     Child Loop BB187_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB187_5:                              #   Parent Loop BB187_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 27
	addi.w	$a1, $a1, 27
	addi.d	$a2, $a2, 216
	addi.d	$a3, $a3, 216
	bltu	$a0, $s6, .LBB187_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB187_4 Depth=1
	bge	$a1, $s0, .LBB187_8
	.p2align	4, , 16
.LBB187_7:                              # %.lr.ph25.us
                                        #   Parent Loop BB187_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB187_7
.LBB187_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB187_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB187_3
# %bb.9:                                #   in Loop: Header=BB187_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB187_3
.LBB187_10:                             # %.preheader19.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB187_17
# %bb.11:                               # %.preheader19.us29.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI187_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI187_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI187_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI187_1)
	pcalau12i	$a0, %pc_hi20(.LCPI187_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI187_2)
	pcalau12i	$a0, %pc_hi20(.LCPI187_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI187_4)
	pcalau12i	$a0, %pc_hi20(.LCPI187_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI187_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB187_13
	.p2align	4, , 16
.LBB187_12:                             # %_Z9check_sumIdEvT_.exit.us33
                                        #   in Loop: Header=BB187_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB187_21
.LBB187_13:                             # %.preheader19.us29
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB187_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB187_14:                             #   Parent Loop BB187_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB187_14
# %bb.15:                               # %._crit_edge.us37
                                        #   in Loop: Header=BB187_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB187_12
# %bb.16:                               #   in Loop: Header=BB187_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB187_12
.LBB187_17:                             # %.preheader19.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI187_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI187_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI187_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI187_1)
	pcalau12i	$a0, %pc_hi20(.LCPI187_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI187_2)
	pcalau12i	$a0, %pc_hi20(.LCPI187_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI187_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB187_19
	.p2align	4, , 16
.LBB187_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB187_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB187_21
.LBB187_19:                             # %.preheader19
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB187_18
# %bb.20:                               #   in Loop: Header=BB187_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB187_18
.LBB187_21:                             # %._crit_edge28
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB187_23
# %bb.22:                               # %._crit_edge28
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB187_25
.LBB187_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB187_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB187_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI187_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI187_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB187_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end187:
	.size	_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc, .Lfunc_end187-_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc
.LCPI188_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI188_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI188_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI188_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI188_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI188_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB188_21
# %bb.1:                                # %.preheader19.lr.ph
	ori	$a0, $zero, 26
	blt	$s0, $a0, .LBB188_10
# %bb.2:                                # %.preheader19.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -25
	addi.d	$s7, $s1, 104
	addi.d	$s8, $s1, 208
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI188_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI188_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI188_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI188_1)
	pcalau12i	$a0, %pc_hi20(.LCPI188_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI188_2)
	pcalau12i	$a0, %pc_hi20(.LCPI188_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI188_4)
	pcalau12i	$a0, %pc_hi20(.LCPI188_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI188_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB188_4
	.p2align	4, , 16
.LBB188_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB188_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB188_21
.LBB188_4:                              # %.preheader19.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB188_5 Depth 2
                                        #     Child Loop BB188_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB188_5:                              #   Parent Loop BB188_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 26
	addi.w	$a1, $a1, 26
	addi.d	$a2, $a2, 208
	addi.d	$a3, $a3, 208
	bltu	$a0, $s6, .LBB188_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB188_4 Depth=1
	bge	$a1, $s0, .LBB188_8
	.p2align	4, , 16
.LBB188_7:                              # %.lr.ph25.us
                                        #   Parent Loop BB188_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB188_7
.LBB188_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB188_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB188_3
# %bb.9:                                #   in Loop: Header=BB188_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB188_3
.LBB188_10:                             # %.preheader19.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB188_17
# %bb.11:                               # %.preheader19.us29.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI188_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI188_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI188_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI188_1)
	pcalau12i	$a0, %pc_hi20(.LCPI188_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI188_2)
	pcalau12i	$a0, %pc_hi20(.LCPI188_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI188_4)
	pcalau12i	$a0, %pc_hi20(.LCPI188_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI188_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB188_13
	.p2align	4, , 16
.LBB188_12:                             # %_Z9check_sumIdEvT_.exit.us33
                                        #   in Loop: Header=BB188_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB188_21
.LBB188_13:                             # %.preheader19.us29
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB188_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB188_14:                             #   Parent Loop BB188_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB188_14
# %bb.15:                               # %._crit_edge.us37
                                        #   in Loop: Header=BB188_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB188_12
# %bb.16:                               #   in Loop: Header=BB188_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB188_12
.LBB188_17:                             # %.preheader19.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI188_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI188_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI188_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI188_1)
	pcalau12i	$a0, %pc_hi20(.LCPI188_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI188_2)
	pcalau12i	$a0, %pc_hi20(.LCPI188_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI188_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB188_19
	.p2align	4, , 16
.LBB188_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB188_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB188_21
.LBB188_19:                             # %.preheader19
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB188_18
# %bb.20:                               #   in Loop: Header=BB188_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB188_18
.LBB188_21:                             # %._crit_edge28
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB188_23
# %bb.22:                               # %._crit_edge28
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB188_25
.LBB188_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB188_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB188_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI188_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI188_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB188_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end188:
	.size	_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc, .Lfunc_end188-_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc
.LCPI189_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI189_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI189_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI189_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI189_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI189_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB189_21
# %bb.1:                                # %.preheader19.lr.ph
	ori	$a0, $zero, 25
	blt	$s0, $a0, .LBB189_10
# %bb.2:                                # %.preheader19.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -24
	addi.d	$s7, $s1, 96
	addi.d	$s8, $s1, 200
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI189_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI189_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI189_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI189_1)
	pcalau12i	$a0, %pc_hi20(.LCPI189_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI189_2)
	pcalau12i	$a0, %pc_hi20(.LCPI189_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI189_4)
	pcalau12i	$a0, %pc_hi20(.LCPI189_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI189_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB189_4
	.p2align	4, , 16
.LBB189_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB189_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB189_21
.LBB189_4:                              # %.preheader19.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB189_5 Depth 2
                                        #     Child Loop BB189_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB189_5:                              #   Parent Loop BB189_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 25
	addi.w	$a1, $a1, 25
	addi.d	$a2, $a2, 200
	addi.d	$a3, $a3, 200
	bltu	$a0, $s6, .LBB189_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB189_4 Depth=1
	bge	$a1, $s0, .LBB189_8
	.p2align	4, , 16
.LBB189_7:                              # %.lr.ph25.us
                                        #   Parent Loop BB189_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB189_7
.LBB189_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB189_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB189_3
# %bb.9:                                #   in Loop: Header=BB189_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB189_3
.LBB189_10:                             # %.preheader19.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB189_17
# %bb.11:                               # %.preheader19.us29.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI189_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI189_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI189_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI189_1)
	pcalau12i	$a0, %pc_hi20(.LCPI189_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI189_2)
	pcalau12i	$a0, %pc_hi20(.LCPI189_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI189_4)
	pcalau12i	$a0, %pc_hi20(.LCPI189_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI189_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB189_13
	.p2align	4, , 16
.LBB189_12:                             # %_Z9check_sumIdEvT_.exit.us33
                                        #   in Loop: Header=BB189_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB189_21
.LBB189_13:                             # %.preheader19.us29
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB189_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB189_14:                             #   Parent Loop BB189_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB189_14
# %bb.15:                               # %._crit_edge.us37
                                        #   in Loop: Header=BB189_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB189_12
# %bb.16:                               #   in Loop: Header=BB189_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB189_12
.LBB189_17:                             # %.preheader19.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI189_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI189_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI189_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI189_1)
	pcalau12i	$a0, %pc_hi20(.LCPI189_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI189_2)
	pcalau12i	$a0, %pc_hi20(.LCPI189_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI189_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB189_19
	.p2align	4, , 16
.LBB189_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB189_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB189_21
.LBB189_19:                             # %.preheader19
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB189_18
# %bb.20:                               #   in Loop: Header=BB189_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB189_18
.LBB189_21:                             # %._crit_edge28
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB189_23
# %bb.22:                               # %._crit_edge28
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB189_25
.LBB189_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB189_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB189_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI189_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI189_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB189_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end189:
	.size	_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc, .Lfunc_end189-_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc
.LCPI190_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI190_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI190_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI190_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI190_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI190_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB190_21
# %bb.1:                                # %.preheader19.lr.ph
	ori	$a0, $zero, 24
	blt	$s0, $a0, .LBB190_10
# %bb.2:                                # %.preheader19.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -23
	addi.d	$s7, $s1, 96
	addi.d	$s8, $s1, 192
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI190_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI190_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI190_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI190_1)
	pcalau12i	$a0, %pc_hi20(.LCPI190_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI190_2)
	pcalau12i	$a0, %pc_hi20(.LCPI190_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI190_4)
	pcalau12i	$a0, %pc_hi20(.LCPI190_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI190_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB190_4
	.p2align	4, , 16
.LBB190_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB190_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB190_21
.LBB190_4:                              # %.preheader19.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB190_5 Depth 2
                                        #     Child Loop BB190_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB190_5:                              #   Parent Loop BB190_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 24
	addi.w	$a1, $a1, 24
	addi.d	$a2, $a2, 192
	addi.d	$a3, $a3, 192
	bltu	$a0, $s6, .LBB190_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB190_4 Depth=1
	bge	$a1, $s0, .LBB190_8
	.p2align	4, , 16
.LBB190_7:                              # %.lr.ph25.us
                                        #   Parent Loop BB190_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB190_7
.LBB190_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB190_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB190_3
# %bb.9:                                #   in Loop: Header=BB190_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB190_3
.LBB190_10:                             # %.preheader19.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB190_17
# %bb.11:                               # %.preheader19.us29.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI190_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI190_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI190_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI190_1)
	pcalau12i	$a0, %pc_hi20(.LCPI190_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI190_2)
	pcalau12i	$a0, %pc_hi20(.LCPI190_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI190_4)
	pcalau12i	$a0, %pc_hi20(.LCPI190_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI190_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB190_13
	.p2align	4, , 16
.LBB190_12:                             # %_Z9check_sumIdEvT_.exit.us33
                                        #   in Loop: Header=BB190_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB190_21
.LBB190_13:                             # %.preheader19.us29
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB190_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB190_14:                             #   Parent Loop BB190_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB190_14
# %bb.15:                               # %._crit_edge.us37
                                        #   in Loop: Header=BB190_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB190_12
# %bb.16:                               #   in Loop: Header=BB190_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB190_12
.LBB190_17:                             # %.preheader19.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI190_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI190_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI190_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI190_1)
	pcalau12i	$a0, %pc_hi20(.LCPI190_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI190_2)
	pcalau12i	$a0, %pc_hi20(.LCPI190_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI190_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB190_19
	.p2align	4, , 16
.LBB190_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB190_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB190_21
.LBB190_19:                             # %.preheader19
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB190_18
# %bb.20:                               #   in Loop: Header=BB190_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB190_18
.LBB190_21:                             # %._crit_edge28
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB190_23
# %bb.22:                               # %._crit_edge28
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB190_25
.LBB190_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB190_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB190_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI190_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI190_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB190_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end190:
	.size	_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc, .Lfunc_end190-_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc
.LCPI191_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI191_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI191_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI191_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI191_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI191_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB191_21
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 23
	blt	$s0, $a0, .LBB191_10
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -22
	addi.d	$s7, $s1, 88
	addi.d	$s8, $s1, 184
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI191_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI191_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI191_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI191_1)
	pcalau12i	$a0, %pc_hi20(.LCPI191_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI191_2)
	pcalau12i	$a0, %pc_hi20(.LCPI191_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI191_4)
	pcalau12i	$a0, %pc_hi20(.LCPI191_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI191_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB191_4
	.p2align	4, , 16
.LBB191_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB191_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB191_21
.LBB191_4:                              # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB191_5 Depth 2
                                        #     Child Loop BB191_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB191_5:                              #   Parent Loop BB191_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 23
	addi.w	$a1, $a1, 23
	addi.d	$a2, $a2, 184
	addi.d	$a3, $a3, 184
	bltu	$a0, $s6, .LBB191_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB191_4 Depth=1
	bge	$a1, $s0, .LBB191_8
	.p2align	4, , 16
.LBB191_7:                              # %.lr.ph24.us
                                        #   Parent Loop BB191_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB191_7
.LBB191_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB191_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB191_3
# %bb.9:                                #   in Loop: Header=BB191_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB191_3
.LBB191_10:                             # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB191_17
# %bb.11:                               # %.preheader18.us28.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI191_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI191_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI191_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI191_1)
	pcalau12i	$a0, %pc_hi20(.LCPI191_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI191_2)
	pcalau12i	$a0, %pc_hi20(.LCPI191_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI191_4)
	pcalau12i	$a0, %pc_hi20(.LCPI191_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI191_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB191_13
	.p2align	4, , 16
.LBB191_12:                             # %_Z9check_sumIdEvT_.exit.us32
                                        #   in Loop: Header=BB191_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB191_21
.LBB191_13:                             # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB191_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB191_14:                             #   Parent Loop BB191_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB191_14
# %bb.15:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB191_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB191_12
# %bb.16:                               #   in Loop: Header=BB191_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB191_12
.LBB191_17:                             # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI191_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI191_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI191_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI191_1)
	pcalau12i	$a0, %pc_hi20(.LCPI191_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI191_2)
	pcalau12i	$a0, %pc_hi20(.LCPI191_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI191_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB191_19
	.p2align	4, , 16
.LBB191_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB191_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB191_21
.LBB191_19:                             # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB191_18
# %bb.20:                               #   in Loop: Header=BB191_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB191_18
.LBB191_21:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB191_23
# %bb.22:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB191_25
.LBB191_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB191_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB191_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI191_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI191_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB191_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end191:
	.size	_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc, .Lfunc_end191-_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc
.LCPI192_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI192_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI192_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI192_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI192_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI192_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB192_21
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 22
	blt	$s0, $a0, .LBB192_10
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -21
	addi.d	$s7, $s1, 88
	addi.d	$s8, $s1, 176
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI192_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI192_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI192_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI192_1)
	pcalau12i	$a0, %pc_hi20(.LCPI192_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI192_2)
	pcalau12i	$a0, %pc_hi20(.LCPI192_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI192_4)
	pcalau12i	$a0, %pc_hi20(.LCPI192_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI192_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB192_4
	.p2align	4, , 16
.LBB192_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB192_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB192_21
.LBB192_4:                              # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB192_5 Depth 2
                                        #     Child Loop BB192_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB192_5:                              #   Parent Loop BB192_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 22
	addi.w	$a1, $a1, 22
	addi.d	$a2, $a2, 176
	addi.d	$a3, $a3, 176
	bltu	$a0, $s6, .LBB192_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB192_4 Depth=1
	bge	$a1, $s0, .LBB192_8
	.p2align	4, , 16
.LBB192_7:                              # %.lr.ph24.us
                                        #   Parent Loop BB192_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB192_7
.LBB192_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB192_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB192_3
# %bb.9:                                #   in Loop: Header=BB192_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB192_3
.LBB192_10:                             # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB192_17
# %bb.11:                               # %.preheader18.us28.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI192_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI192_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI192_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI192_1)
	pcalau12i	$a0, %pc_hi20(.LCPI192_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI192_2)
	pcalau12i	$a0, %pc_hi20(.LCPI192_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI192_4)
	pcalau12i	$a0, %pc_hi20(.LCPI192_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI192_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB192_13
	.p2align	4, , 16
.LBB192_12:                             # %_Z9check_sumIdEvT_.exit.us32
                                        #   in Loop: Header=BB192_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB192_21
.LBB192_13:                             # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB192_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB192_14:                             #   Parent Loop BB192_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB192_14
# %bb.15:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB192_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB192_12
# %bb.16:                               #   in Loop: Header=BB192_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB192_12
.LBB192_17:                             # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI192_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI192_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI192_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI192_1)
	pcalau12i	$a0, %pc_hi20(.LCPI192_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI192_2)
	pcalau12i	$a0, %pc_hi20(.LCPI192_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI192_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB192_19
	.p2align	4, , 16
.LBB192_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB192_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB192_21
.LBB192_19:                             # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB192_18
# %bb.20:                               #   in Loop: Header=BB192_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB192_18
.LBB192_21:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB192_23
# %bb.22:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB192_25
.LBB192_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB192_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB192_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI192_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI192_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB192_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end192:
	.size	_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc, .Lfunc_end192-_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc
.LCPI193_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI193_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI193_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI193_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI193_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI193_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB193_21
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 21
	blt	$s0, $a0, .LBB193_10
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -20
	addi.d	$s7, $s1, 80
	addi.d	$s8, $s1, 168
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI193_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI193_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI193_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI193_1)
	pcalau12i	$a0, %pc_hi20(.LCPI193_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI193_2)
	pcalau12i	$a0, %pc_hi20(.LCPI193_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI193_4)
	pcalau12i	$a0, %pc_hi20(.LCPI193_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI193_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB193_4
	.p2align	4, , 16
.LBB193_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB193_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB193_21
.LBB193_4:                              # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB193_5 Depth 2
                                        #     Child Loop BB193_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB193_5:                              #   Parent Loop BB193_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 21
	addi.w	$a1, $a1, 21
	addi.d	$a2, $a2, 168
	addi.d	$a3, $a3, 168
	bltu	$a0, $s6, .LBB193_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB193_4 Depth=1
	bge	$a1, $s0, .LBB193_8
	.p2align	4, , 16
.LBB193_7:                              # %.lr.ph24.us
                                        #   Parent Loop BB193_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB193_7
.LBB193_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB193_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB193_3
# %bb.9:                                #   in Loop: Header=BB193_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB193_3
.LBB193_10:                             # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB193_17
# %bb.11:                               # %.preheader18.us28.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI193_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI193_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI193_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI193_1)
	pcalau12i	$a0, %pc_hi20(.LCPI193_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI193_2)
	pcalau12i	$a0, %pc_hi20(.LCPI193_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI193_4)
	pcalau12i	$a0, %pc_hi20(.LCPI193_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI193_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB193_13
	.p2align	4, , 16
.LBB193_12:                             # %_Z9check_sumIdEvT_.exit.us32
                                        #   in Loop: Header=BB193_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB193_21
.LBB193_13:                             # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB193_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB193_14:                             #   Parent Loop BB193_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB193_14
# %bb.15:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB193_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB193_12
# %bb.16:                               #   in Loop: Header=BB193_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB193_12
.LBB193_17:                             # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI193_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI193_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI193_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI193_1)
	pcalau12i	$a0, %pc_hi20(.LCPI193_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI193_2)
	pcalau12i	$a0, %pc_hi20(.LCPI193_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI193_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB193_19
	.p2align	4, , 16
.LBB193_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB193_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB193_21
.LBB193_19:                             # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB193_18
# %bb.20:                               #   in Loop: Header=BB193_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB193_18
.LBB193_21:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB193_23
# %bb.22:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB193_25
.LBB193_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB193_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB193_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI193_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI193_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB193_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end193:
	.size	_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc, .Lfunc_end193-_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN16while_loop_testsILi19EdE7do_testEPKdPKc,"axG",@progbits,_ZN16while_loop_testsILi19EdE7do_testEPKdPKc,comdat
	.weak	_ZN16while_loop_testsILi19EdE7do_testEPKdPKc # -- Begin function _ZN16while_loop_testsILi19EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN16while_loop_testsILi19EdE7do_testEPKdPKc,@function
_ZN16while_loop_testsILi19EdE7do_testEPKdPKc: # @_ZN16while_loop_testsILi19EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN16while_loop_testsILi10EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1000
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1100
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1200
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1300
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1400
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1500
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1600
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1700
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1800
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end194:
	.size	_ZN16while_loop_testsILi19EdE7do_testEPKdPKc, .Lfunc_end194-_ZN16while_loop_testsILi19EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc
.LCPI195_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI195_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI195_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI195_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI195_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI195_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB195_21
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 20
	blt	$s0, $a0, .LBB195_10
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -19
	addi.d	$s7, $s1, 80
	addi.d	$s8, $s1, 160
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI195_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI195_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI195_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI195_1)
	pcalau12i	$a0, %pc_hi20(.LCPI195_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI195_2)
	pcalau12i	$a0, %pc_hi20(.LCPI195_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI195_4)
	pcalau12i	$a0, %pc_hi20(.LCPI195_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI195_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB195_4
	.p2align	4, , 16
.LBB195_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB195_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB195_21
.LBB195_4:                              # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB195_5 Depth 2
                                        #     Child Loop BB195_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB195_5:                              #   Parent Loop BB195_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 20
	addi.w	$a1, $a1, 20
	addi.d	$a2, $a2, 160
	addi.d	$a3, $a3, 160
	bltu	$a0, $s6, .LBB195_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB195_4 Depth=1
	bge	$a1, $s0, .LBB195_8
	.p2align	4, , 16
.LBB195_7:                              # %.lr.ph24.us
                                        #   Parent Loop BB195_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB195_7
.LBB195_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB195_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB195_3
# %bb.9:                                #   in Loop: Header=BB195_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB195_3
.LBB195_10:                             # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB195_17
# %bb.11:                               # %.preheader18.us28.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI195_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI195_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI195_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI195_1)
	pcalau12i	$a0, %pc_hi20(.LCPI195_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI195_2)
	pcalau12i	$a0, %pc_hi20(.LCPI195_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI195_4)
	pcalau12i	$a0, %pc_hi20(.LCPI195_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI195_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB195_13
	.p2align	4, , 16
.LBB195_12:                             # %_Z9check_sumIdEvT_.exit.us32
                                        #   in Loop: Header=BB195_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB195_21
.LBB195_13:                             # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB195_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB195_14:                             #   Parent Loop BB195_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB195_14
# %bb.15:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB195_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB195_12
# %bb.16:                               #   in Loop: Header=BB195_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB195_12
.LBB195_17:                             # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI195_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI195_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI195_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI195_1)
	pcalau12i	$a0, %pc_hi20(.LCPI195_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI195_2)
	pcalau12i	$a0, %pc_hi20(.LCPI195_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI195_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB195_19
	.p2align	4, , 16
.LBB195_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB195_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB195_21
.LBB195_19:                             # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB195_18
# %bb.20:                               #   in Loop: Header=BB195_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB195_18
.LBB195_21:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB195_23
# %bb.22:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB195_25
.LBB195_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB195_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB195_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI195_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI195_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB195_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end195:
	.size	_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc, .Lfunc_end195-_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc
.LCPI196_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI196_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI196_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI196_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI196_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI196_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB196_21
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 19
	blt	$s0, $a0, .LBB196_10
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -18
	addi.d	$s7, $s1, 72
	addi.d	$s8, $s1, 152
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI196_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI196_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI196_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI196_1)
	pcalau12i	$a0, %pc_hi20(.LCPI196_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI196_2)
	pcalau12i	$a0, %pc_hi20(.LCPI196_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI196_4)
	pcalau12i	$a0, %pc_hi20(.LCPI196_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI196_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB196_4
	.p2align	4, , 16
.LBB196_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB196_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB196_21
.LBB196_4:                              # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB196_5 Depth 2
                                        #     Child Loop BB196_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB196_5:                              #   Parent Loop BB196_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 19
	addi.w	$a1, $a1, 19
	addi.d	$a2, $a2, 152
	addi.d	$a3, $a3, 152
	bltu	$a0, $s6, .LBB196_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB196_4 Depth=1
	bge	$a1, $s0, .LBB196_8
	.p2align	4, , 16
.LBB196_7:                              # %.lr.ph24.us
                                        #   Parent Loop BB196_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB196_7
.LBB196_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB196_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB196_3
# %bb.9:                                #   in Loop: Header=BB196_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB196_3
.LBB196_10:                             # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB196_17
# %bb.11:                               # %.preheader18.us28.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI196_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI196_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI196_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI196_1)
	pcalau12i	$a0, %pc_hi20(.LCPI196_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI196_2)
	pcalau12i	$a0, %pc_hi20(.LCPI196_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI196_4)
	pcalau12i	$a0, %pc_hi20(.LCPI196_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI196_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB196_13
	.p2align	4, , 16
.LBB196_12:                             # %_Z9check_sumIdEvT_.exit.us32
                                        #   in Loop: Header=BB196_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB196_21
.LBB196_13:                             # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB196_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB196_14:                             #   Parent Loop BB196_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB196_14
# %bb.15:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB196_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB196_12
# %bb.16:                               #   in Loop: Header=BB196_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB196_12
.LBB196_17:                             # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI196_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI196_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI196_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI196_1)
	pcalau12i	$a0, %pc_hi20(.LCPI196_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI196_2)
	pcalau12i	$a0, %pc_hi20(.LCPI196_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI196_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB196_19
	.p2align	4, , 16
.LBB196_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB196_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB196_21
.LBB196_19:                             # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB196_18
# %bb.20:                               #   in Loop: Header=BB196_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB196_18
.LBB196_21:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB196_23
# %bb.22:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB196_25
.LBB196_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB196_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB196_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI196_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI196_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB196_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end196:
	.size	_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc, .Lfunc_end196-_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc
.LCPI197_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI197_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI197_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI197_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI197_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI197_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB197_21
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 18
	blt	$s0, $a0, .LBB197_10
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -17
	addi.d	$s7, $s1, 72
	addi.d	$s8, $s1, 144
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI197_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI197_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI197_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI197_1)
	pcalau12i	$a0, %pc_hi20(.LCPI197_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI197_2)
	pcalau12i	$a0, %pc_hi20(.LCPI197_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI197_4)
	pcalau12i	$a0, %pc_hi20(.LCPI197_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI197_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB197_4
	.p2align	4, , 16
.LBB197_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB197_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB197_21
.LBB197_4:                              # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB197_5 Depth 2
                                        #     Child Loop BB197_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB197_5:                              #   Parent Loop BB197_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 18
	addi.w	$a1, $a1, 18
	addi.d	$a2, $a2, 144
	addi.d	$a3, $a3, 144
	bltu	$a0, $s6, .LBB197_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB197_4 Depth=1
	bge	$a1, $s0, .LBB197_8
	.p2align	4, , 16
.LBB197_7:                              # %.lr.ph24.us
                                        #   Parent Loop BB197_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB197_7
.LBB197_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB197_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB197_3
# %bb.9:                                #   in Loop: Header=BB197_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB197_3
.LBB197_10:                             # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB197_17
# %bb.11:                               # %.preheader18.us28.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI197_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI197_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI197_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI197_1)
	pcalau12i	$a0, %pc_hi20(.LCPI197_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI197_2)
	pcalau12i	$a0, %pc_hi20(.LCPI197_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI197_4)
	pcalau12i	$a0, %pc_hi20(.LCPI197_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI197_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB197_13
	.p2align	4, , 16
.LBB197_12:                             # %_Z9check_sumIdEvT_.exit.us32
                                        #   in Loop: Header=BB197_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB197_21
.LBB197_13:                             # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB197_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB197_14:                             #   Parent Loop BB197_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB197_14
# %bb.15:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB197_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB197_12
# %bb.16:                               #   in Loop: Header=BB197_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB197_12
.LBB197_17:                             # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI197_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI197_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI197_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI197_1)
	pcalau12i	$a0, %pc_hi20(.LCPI197_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI197_2)
	pcalau12i	$a0, %pc_hi20(.LCPI197_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI197_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB197_19
	.p2align	4, , 16
.LBB197_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB197_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB197_21
.LBB197_19:                             # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB197_18
# %bb.20:                               #   in Loop: Header=BB197_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB197_18
.LBB197_21:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB197_23
# %bb.22:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB197_25
.LBB197_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB197_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB197_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI197_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI197_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB197_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end197:
	.size	_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc, .Lfunc_end197-_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc
.LCPI198_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI198_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI198_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI198_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI198_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI198_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB198_21
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 17
	blt	$s0, $a0, .LBB198_10
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -16
	addi.d	$s7, $s1, 64
	addi.d	$s8, $s1, 136
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI198_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI198_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI198_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI198_1)
	pcalau12i	$a0, %pc_hi20(.LCPI198_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI198_2)
	pcalau12i	$a0, %pc_hi20(.LCPI198_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI198_4)
	pcalau12i	$a0, %pc_hi20(.LCPI198_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI198_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB198_4
	.p2align	4, , 16
.LBB198_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB198_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB198_21
.LBB198_4:                              # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB198_5 Depth 2
                                        #     Child Loop BB198_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB198_5:                              #   Parent Loop BB198_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 17
	addi.w	$a1, $a1, 17
	addi.d	$a2, $a2, 136
	addi.d	$a3, $a3, 136
	bltu	$a0, $s6, .LBB198_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB198_4 Depth=1
	bge	$a1, $s0, .LBB198_8
	.p2align	4, , 16
.LBB198_7:                              # %.lr.ph24.us
                                        #   Parent Loop BB198_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB198_7
.LBB198_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB198_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB198_3
# %bb.9:                                #   in Loop: Header=BB198_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB198_3
.LBB198_10:                             # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB198_17
# %bb.11:                               # %.preheader18.us28.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI198_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI198_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI198_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI198_1)
	pcalau12i	$a0, %pc_hi20(.LCPI198_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI198_2)
	pcalau12i	$a0, %pc_hi20(.LCPI198_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI198_4)
	pcalau12i	$a0, %pc_hi20(.LCPI198_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI198_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB198_13
	.p2align	4, , 16
.LBB198_12:                             # %_Z9check_sumIdEvT_.exit.us32
                                        #   in Loop: Header=BB198_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB198_21
.LBB198_13:                             # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB198_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB198_14:                             #   Parent Loop BB198_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB198_14
# %bb.15:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB198_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB198_12
# %bb.16:                               #   in Loop: Header=BB198_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB198_12
.LBB198_17:                             # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI198_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI198_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI198_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI198_1)
	pcalau12i	$a0, %pc_hi20(.LCPI198_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI198_2)
	pcalau12i	$a0, %pc_hi20(.LCPI198_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI198_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB198_19
	.p2align	4, , 16
.LBB198_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB198_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB198_21
.LBB198_19:                             # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB198_18
# %bb.20:                               #   in Loop: Header=BB198_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB198_18
.LBB198_21:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB198_23
# %bb.22:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB198_25
.LBB198_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB198_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB198_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI198_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI198_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB198_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end198:
	.size	_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc, .Lfunc_end198-_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc
.LCPI199_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI199_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI199_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI199_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI199_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI199_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB199_21
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 16
	blt	$s0, $a0, .LBB199_10
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -15
	addi.d	$s7, $s1, 64
	addi.d	$s8, $s1, 128
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI199_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI199_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI199_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI199_1)
	pcalau12i	$a0, %pc_hi20(.LCPI199_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI199_2)
	pcalau12i	$a0, %pc_hi20(.LCPI199_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI199_4)
	pcalau12i	$a0, %pc_hi20(.LCPI199_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI199_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB199_4
	.p2align	4, , 16
.LBB199_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB199_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB199_21
.LBB199_4:                              # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB199_5 Depth 2
                                        #     Child Loop BB199_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB199_5:                              #   Parent Loop BB199_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 16
	addi.w	$a1, $a1, 16
	addi.d	$a2, $a2, 128
	addi.d	$a3, $a3, 128
	bltu	$a0, $s6, .LBB199_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB199_4 Depth=1
	bge	$a1, $s0, .LBB199_8
	.p2align	4, , 16
.LBB199_7:                              # %.lr.ph24.us
                                        #   Parent Loop BB199_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB199_7
.LBB199_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB199_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB199_3
# %bb.9:                                #   in Loop: Header=BB199_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB199_3
.LBB199_10:                             # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB199_17
# %bb.11:                               # %.preheader18.us28.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI199_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI199_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI199_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI199_1)
	pcalau12i	$a0, %pc_hi20(.LCPI199_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI199_2)
	pcalau12i	$a0, %pc_hi20(.LCPI199_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI199_4)
	pcalau12i	$a0, %pc_hi20(.LCPI199_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI199_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB199_13
	.p2align	4, , 16
.LBB199_12:                             # %_Z9check_sumIdEvT_.exit.us32
                                        #   in Loop: Header=BB199_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB199_21
.LBB199_13:                             # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB199_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB199_14:                             #   Parent Loop BB199_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB199_14
# %bb.15:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB199_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB199_12
# %bb.16:                               #   in Loop: Header=BB199_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB199_12
.LBB199_17:                             # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI199_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI199_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI199_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI199_1)
	pcalau12i	$a0, %pc_hi20(.LCPI199_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI199_2)
	pcalau12i	$a0, %pc_hi20(.LCPI199_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI199_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB199_19
	.p2align	4, , 16
.LBB199_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB199_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB199_21
.LBB199_19:                             # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB199_18
# %bb.20:                               #   in Loop: Header=BB199_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB199_18
.LBB199_21:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB199_23
# %bb.22:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB199_25
.LBB199_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB199_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB199_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI199_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI199_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB199_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end199:
	.size	_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc, .Lfunc_end199-_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc
.LCPI200_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI200_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI200_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI200_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI200_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI200_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB200_21
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 15
	blt	$s0, $a0, .LBB200_10
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -14
	addi.d	$s7, $s1, 56
	addi.d	$s8, $s1, 120
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI200_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI200_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI200_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI200_1)
	pcalau12i	$a0, %pc_hi20(.LCPI200_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI200_2)
	pcalau12i	$a0, %pc_hi20(.LCPI200_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI200_4)
	pcalau12i	$a0, %pc_hi20(.LCPI200_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI200_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB200_4
	.p2align	4, , 16
.LBB200_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB200_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB200_21
.LBB200_4:                              # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB200_5 Depth 2
                                        #     Child Loop BB200_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB200_5:                              #   Parent Loop BB200_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 15
	addi.w	$a1, $a1, 15
	addi.d	$a2, $a2, 120
	addi.d	$a3, $a3, 120
	bltu	$a0, $s6, .LBB200_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB200_4 Depth=1
	bge	$a1, $s0, .LBB200_8
	.p2align	4, , 16
.LBB200_7:                              # %.lr.ph24.us
                                        #   Parent Loop BB200_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB200_7
.LBB200_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB200_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB200_3
# %bb.9:                                #   in Loop: Header=BB200_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB200_3
.LBB200_10:                             # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB200_17
# %bb.11:                               # %.preheader18.us28.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI200_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI200_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI200_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI200_1)
	pcalau12i	$a0, %pc_hi20(.LCPI200_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI200_2)
	pcalau12i	$a0, %pc_hi20(.LCPI200_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI200_4)
	pcalau12i	$a0, %pc_hi20(.LCPI200_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI200_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB200_13
	.p2align	4, , 16
.LBB200_12:                             # %_Z9check_sumIdEvT_.exit.us32
                                        #   in Loop: Header=BB200_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB200_21
.LBB200_13:                             # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB200_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB200_14:                             #   Parent Loop BB200_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB200_14
# %bb.15:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB200_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB200_12
# %bb.16:                               #   in Loop: Header=BB200_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB200_12
.LBB200_17:                             # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI200_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI200_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI200_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI200_1)
	pcalau12i	$a0, %pc_hi20(.LCPI200_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI200_2)
	pcalau12i	$a0, %pc_hi20(.LCPI200_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI200_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB200_19
	.p2align	4, , 16
.LBB200_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB200_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB200_21
.LBB200_19:                             # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB200_18
# %bb.20:                               #   in Loop: Header=BB200_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB200_18
.LBB200_21:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB200_23
# %bb.22:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB200_25
.LBB200_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB200_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB200_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI200_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI200_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB200_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end200:
	.size	_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc, .Lfunc_end200-_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc
.LCPI201_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI201_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI201_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI201_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI201_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI201_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB201_21
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 14
	blt	$s0, $a0, .LBB201_10
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -13
	addi.d	$s7, $s1, 56
	addi.d	$s8, $s1, 112
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI201_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI201_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI201_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI201_1)
	pcalau12i	$a0, %pc_hi20(.LCPI201_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI201_2)
	pcalau12i	$a0, %pc_hi20(.LCPI201_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI201_4)
	pcalau12i	$a0, %pc_hi20(.LCPI201_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI201_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB201_4
	.p2align	4, , 16
.LBB201_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB201_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB201_21
.LBB201_4:                              # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB201_5 Depth 2
                                        #     Child Loop BB201_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB201_5:                              #   Parent Loop BB201_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 14
	addi.w	$a1, $a1, 14
	addi.d	$a2, $a2, 112
	addi.d	$a3, $a3, 112
	bltu	$a0, $s6, .LBB201_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB201_4 Depth=1
	bge	$a1, $s0, .LBB201_8
	.p2align	4, , 16
.LBB201_7:                              # %.lr.ph24.us
                                        #   Parent Loop BB201_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB201_7
.LBB201_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB201_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB201_3
# %bb.9:                                #   in Loop: Header=BB201_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB201_3
.LBB201_10:                             # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB201_17
# %bb.11:                               # %.preheader18.us28.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI201_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI201_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI201_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI201_1)
	pcalau12i	$a0, %pc_hi20(.LCPI201_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI201_2)
	pcalau12i	$a0, %pc_hi20(.LCPI201_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI201_4)
	pcalau12i	$a0, %pc_hi20(.LCPI201_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI201_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB201_13
	.p2align	4, , 16
.LBB201_12:                             # %_Z9check_sumIdEvT_.exit.us32
                                        #   in Loop: Header=BB201_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB201_21
.LBB201_13:                             # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB201_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB201_14:                             #   Parent Loop BB201_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB201_14
# %bb.15:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB201_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB201_12
# %bb.16:                               #   in Loop: Header=BB201_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB201_12
.LBB201_17:                             # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI201_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI201_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI201_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI201_1)
	pcalau12i	$a0, %pc_hi20(.LCPI201_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI201_2)
	pcalau12i	$a0, %pc_hi20(.LCPI201_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI201_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB201_19
	.p2align	4, , 16
.LBB201_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB201_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB201_21
.LBB201_19:                             # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB201_18
# %bb.20:                               #   in Loop: Header=BB201_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB201_18
.LBB201_21:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB201_23
# %bb.22:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB201_25
.LBB201_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB201_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB201_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI201_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI201_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB201_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end201:
	.size	_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc, .Lfunc_end201-_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc
.LCPI202_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI202_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI202_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI202_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI202_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI202_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB202_21
# %bb.1:                                # %.preheader18.lr.ph
	ori	$a0, $zero, 13
	blt	$s0, $a0, .LBB202_10
# %bb.2:                                # %.preheader18.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -12
	addi.d	$s7, $s1, 48
	addi.d	$s8, $s1, 104
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI202_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI202_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI202_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI202_1)
	pcalau12i	$a0, %pc_hi20(.LCPI202_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI202_2)
	pcalau12i	$a0, %pc_hi20(.LCPI202_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI202_4)
	pcalau12i	$a0, %pc_hi20(.LCPI202_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI202_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB202_4
	.p2align	4, , 16
.LBB202_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB202_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB202_21
.LBB202_4:                              # %.preheader18.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB202_5 Depth 2
                                        #     Child Loop BB202_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB202_5:                              #   Parent Loop BB202_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 13
	addi.w	$a1, $a1, 13
	addi.d	$a2, $a2, 104
	addi.d	$a3, $a3, 104
	bltu	$a0, $s6, .LBB202_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB202_4 Depth=1
	bge	$a1, $s0, .LBB202_8
	.p2align	4, , 16
.LBB202_7:                              # %.lr.ph24.us
                                        #   Parent Loop BB202_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB202_7
.LBB202_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB202_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB202_3
# %bb.9:                                #   in Loop: Header=BB202_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB202_3
.LBB202_10:                             # %.preheader18.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB202_17
# %bb.11:                               # %.preheader18.us28.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI202_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI202_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI202_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI202_1)
	pcalau12i	$a0, %pc_hi20(.LCPI202_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI202_2)
	pcalau12i	$a0, %pc_hi20(.LCPI202_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI202_4)
	pcalau12i	$a0, %pc_hi20(.LCPI202_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI202_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB202_13
	.p2align	4, , 16
.LBB202_12:                             # %_Z9check_sumIdEvT_.exit.us32
                                        #   in Loop: Header=BB202_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB202_21
.LBB202_13:                             # %.preheader18.us28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB202_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB202_14:                             #   Parent Loop BB202_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB202_14
# %bb.15:                               # %._crit_edge.us36
                                        #   in Loop: Header=BB202_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB202_12
# %bb.16:                               #   in Loop: Header=BB202_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB202_12
.LBB202_17:                             # %.preheader18.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI202_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI202_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI202_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI202_1)
	pcalau12i	$a0, %pc_hi20(.LCPI202_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI202_2)
	pcalau12i	$a0, %pc_hi20(.LCPI202_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI202_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB202_19
	.p2align	4, , 16
.LBB202_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB202_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB202_21
.LBB202_19:                             # %.preheader18
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB202_18
# %bb.20:                               #   in Loop: Header=BB202_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB202_18
.LBB202_21:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB202_23
# %bb.22:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB202_25
.LBB202_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB202_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB202_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI202_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI202_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB202_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end202:
	.size	_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc, .Lfunc_end202-_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc
.LCPI203_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI203_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI203_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI203_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI203_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI203_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB203_21
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 12
	blt	$s0, $a0, .LBB203_10
# %bb.2:                                # %.preheader17.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -11
	addi.d	$s7, $s1, 48
	addi.d	$s8, $s1, 96
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI203_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI203_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI203_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI203_1)
	pcalau12i	$a0, %pc_hi20(.LCPI203_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI203_2)
	pcalau12i	$a0, %pc_hi20(.LCPI203_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI203_4)
	pcalau12i	$a0, %pc_hi20(.LCPI203_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI203_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB203_4
	.p2align	4, , 16
.LBB203_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB203_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB203_21
.LBB203_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB203_5 Depth 2
                                        #     Child Loop BB203_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB203_5:                              #   Parent Loop BB203_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 12
	addi.w	$a1, $a1, 12
	addi.d	$a2, $a2, 96
	addi.d	$a3, $a3, 96
	bltu	$a0, $s6, .LBB203_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB203_4 Depth=1
	bge	$a1, $s0, .LBB203_8
	.p2align	4, , 16
.LBB203_7:                              # %.lr.ph23.us
                                        #   Parent Loop BB203_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB203_7
.LBB203_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB203_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB203_3
# %bb.9:                                #   in Loop: Header=BB203_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB203_3
.LBB203_10:                             # %.preheader17.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB203_17
# %bb.11:                               # %.preheader17.us27.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI203_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI203_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI203_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI203_1)
	pcalau12i	$a0, %pc_hi20(.LCPI203_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI203_2)
	pcalau12i	$a0, %pc_hi20(.LCPI203_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI203_4)
	pcalau12i	$a0, %pc_hi20(.LCPI203_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI203_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB203_13
	.p2align	4, , 16
.LBB203_12:                             # %_Z9check_sumIdEvT_.exit.us31
                                        #   in Loop: Header=BB203_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB203_21
.LBB203_13:                             # %.preheader17.us27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB203_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB203_14:                             #   Parent Loop BB203_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB203_14
# %bb.15:                               # %._crit_edge.us35
                                        #   in Loop: Header=BB203_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB203_12
# %bb.16:                               #   in Loop: Header=BB203_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB203_12
.LBB203_17:                             # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI203_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI203_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI203_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI203_1)
	pcalau12i	$a0, %pc_hi20(.LCPI203_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI203_2)
	pcalau12i	$a0, %pc_hi20(.LCPI203_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI203_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB203_19
	.p2align	4, , 16
.LBB203_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB203_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB203_21
.LBB203_19:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB203_18
# %bb.20:                               #   in Loop: Header=BB203_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB203_18
.LBB203_21:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB203_23
# %bb.22:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB203_25
.LBB203_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB203_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB203_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI203_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI203_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB203_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end203:
	.size	_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc, .Lfunc_end203-_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN16while_loop_testsILi10EdE7do_testEPKdPKc,"axG",@progbits,_ZN16while_loop_testsILi10EdE7do_testEPKdPKc,comdat
	.weak	_ZN16while_loop_testsILi10EdE7do_testEPKdPKc # -- Begin function _ZN16while_loop_testsILi10EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN16while_loop_testsILi10EdE7do_testEPKdPKc,@function
_ZN16while_loop_testsILi10EdE7do_testEPKdPKc: # @_ZN16while_loop_testsILi10EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s0, $a0, %pc_lo12(temp_string)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	move	$a0, $fp
	move	$a1, $s1
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 100
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 200
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 300
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 400
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 500
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 600
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 700
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 800
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 900
	move	$a0, $fp
	move	$a1, $s1
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end204:
	.size	_ZN16while_loop_testsILi10EdE7do_testEPKdPKc, .Lfunc_end204-_ZN16while_loop_testsILi10EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc
.LCPI205_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI205_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI205_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI205_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI205_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI205_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB205_21
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 11
	blt	$s0, $a0, .LBB205_10
# %bb.2:                                # %.preheader17.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -10
	addi.d	$s7, $s1, 40
	addi.d	$s8, $s1, 88
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI205_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI205_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI205_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI205_1)
	pcalau12i	$a0, %pc_hi20(.LCPI205_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI205_2)
	pcalau12i	$a0, %pc_hi20(.LCPI205_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI205_4)
	pcalau12i	$a0, %pc_hi20(.LCPI205_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI205_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB205_4
	.p2align	4, , 16
.LBB205_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB205_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB205_21
.LBB205_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB205_5 Depth 2
                                        #     Child Loop BB205_7 Depth 2
	move	$a1, $zero
	move	$a0, $zero
	move	$a3, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB205_5:                              #   Parent Loop BB205_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 11
	addi.w	$a1, $a1, 11
	addi.d	$a2, $a2, 88
	addi.d	$a3, $a3, 88
	bltu	$a0, $s6, .LBB205_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB205_4 Depth=1
	bge	$a1, $s0, .LBB205_8
	.p2align	4, , 16
.LBB205_7:                              # %.lr.ph23.us
                                        #   Parent Loop BB205_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB205_7
.LBB205_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB205_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB205_3
# %bb.9:                                #   in Loop: Header=BB205_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB205_3
.LBB205_10:                             # %.preheader17.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB205_17
# %bb.11:                               # %.preheader17.us27.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI205_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI205_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI205_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI205_1)
	pcalau12i	$a0, %pc_hi20(.LCPI205_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI205_2)
	pcalau12i	$a0, %pc_hi20(.LCPI205_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI205_4)
	pcalau12i	$a0, %pc_hi20(.LCPI205_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI205_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB205_13
	.p2align	4, , 16
.LBB205_12:                             # %_Z9check_sumIdEvT_.exit.us31
                                        #   in Loop: Header=BB205_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB205_21
.LBB205_13:                             # %.preheader17.us27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB205_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB205_14:                             #   Parent Loop BB205_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB205_14
# %bb.15:                               # %._crit_edge.us35
                                        #   in Loop: Header=BB205_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB205_12
# %bb.16:                               #   in Loop: Header=BB205_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB205_12
.LBB205_17:                             # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI205_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI205_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI205_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI205_1)
	pcalau12i	$a0, %pc_hi20(.LCPI205_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI205_2)
	pcalau12i	$a0, %pc_hi20(.LCPI205_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI205_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB205_19
	.p2align	4, , 16
.LBB205_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB205_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB205_21
.LBB205_19:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB205_18
# %bb.20:                               #   in Loop: Header=BB205_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB205_18
.LBB205_21:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB205_23
# %bb.22:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB205_25
.LBB205_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB205_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB205_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI205_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI205_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB205_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end205:
	.size	_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc, .Lfunc_end205-_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc
.LCPI206_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI206_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI206_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI206_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI206_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI206_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB206_21
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 10
	blt	$s0, $a0, .LBB206_10
# %bb.2:                                # %.preheader17.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -9
	addi.d	$s7, $s1, 40
	addi.d	$s8, $s1, 80
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI206_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI206_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI206_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI206_1)
	pcalau12i	$a0, %pc_hi20(.LCPI206_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI206_2)
	pcalau12i	$a0, %pc_hi20(.LCPI206_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI206_4)
	pcalau12i	$a0, %pc_hi20(.LCPI206_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI206_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB206_4
	.p2align	4, , 16
.LBB206_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB206_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB206_21
.LBB206_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB206_5 Depth 2
                                        #     Child Loop BB206_7 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	move	$a4, $s8
	move	$a3, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB206_5:                              #   Parent Loop BB206_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 10
	addi.w	$a2, $a2, 10
	addi.d	$a3, $a3, 80
	addi.d	$a4, $a4, 80
	bltu	$a0, $s6, .LBB206_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB206_4 Depth=1
	bge	$a2, $s0, .LBB206_8
	.p2align	4, , 16
.LBB206_7:                              # %.lr.ph23.us
                                        #   Parent Loop BB206_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a5, $a5, 8
	bltu	$a0, $s0, .LBB206_7
.LBB206_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB206_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB206_3
# %bb.9:                                #   in Loop: Header=BB206_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB206_3
.LBB206_10:                             # %.preheader17.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB206_17
# %bb.11:                               # %.preheader17.us27.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI206_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI206_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI206_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI206_1)
	pcalau12i	$a0, %pc_hi20(.LCPI206_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI206_2)
	pcalau12i	$a0, %pc_hi20(.LCPI206_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI206_4)
	pcalau12i	$a0, %pc_hi20(.LCPI206_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI206_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB206_13
	.p2align	4, , 16
.LBB206_12:                             # %_Z9check_sumIdEvT_.exit.us31
                                        #   in Loop: Header=BB206_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB206_21
.LBB206_13:                             # %.preheader17.us27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB206_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB206_14:                             #   Parent Loop BB206_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB206_14
# %bb.15:                               # %._crit_edge.us35
                                        #   in Loop: Header=BB206_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB206_12
# %bb.16:                               #   in Loop: Header=BB206_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB206_12
.LBB206_17:                             # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI206_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI206_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI206_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI206_1)
	pcalau12i	$a0, %pc_hi20(.LCPI206_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI206_2)
	pcalau12i	$a0, %pc_hi20(.LCPI206_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI206_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB206_19
	.p2align	4, , 16
.LBB206_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB206_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB206_21
.LBB206_19:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB206_18
# %bb.20:                               #   in Loop: Header=BB206_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB206_18
.LBB206_21:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB206_23
# %bb.22:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB206_25
.LBB206_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB206_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB206_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI206_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI206_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB206_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end206:
	.size	_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc, .Lfunc_end206-_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc
.LCPI207_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI207_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI207_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI207_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI207_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI207_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB207_21
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 9
	blt	$s0, $a0, .LBB207_10
# %bb.2:                                # %.preheader17.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -8
	addi.d	$s7, $s1, 32
	addi.d	$s8, $s1, 72
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI207_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI207_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI207_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI207_1)
	pcalau12i	$a0, %pc_hi20(.LCPI207_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI207_2)
	pcalau12i	$a0, %pc_hi20(.LCPI207_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI207_4)
	pcalau12i	$a0, %pc_hi20(.LCPI207_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI207_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB207_4
	.p2align	4, , 16
.LBB207_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB207_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB207_21
.LBB207_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB207_5 Depth 2
                                        #     Child Loop BB207_7 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	move	$a4, $s8
	move	$a3, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB207_5:                              #   Parent Loop BB207_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 9
	addi.w	$a2, $a2, 9
	addi.d	$a3, $a3, 72
	addi.d	$a4, $a4, 72
	bltu	$a0, $s6, .LBB207_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB207_4 Depth=1
	bge	$a2, $s0, .LBB207_8
	.p2align	4, , 16
.LBB207_7:                              # %.lr.ph23.us
                                        #   Parent Loop BB207_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a5, $a5, 8
	bltu	$a0, $s0, .LBB207_7
.LBB207_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB207_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB207_3
# %bb.9:                                #   in Loop: Header=BB207_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB207_3
.LBB207_10:                             # %.preheader17.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB207_17
# %bb.11:                               # %.preheader17.us27.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI207_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI207_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI207_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI207_1)
	pcalau12i	$a0, %pc_hi20(.LCPI207_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI207_2)
	pcalau12i	$a0, %pc_hi20(.LCPI207_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI207_4)
	pcalau12i	$a0, %pc_hi20(.LCPI207_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI207_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB207_13
	.p2align	4, , 16
.LBB207_12:                             # %_Z9check_sumIdEvT_.exit.us31
                                        #   in Loop: Header=BB207_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB207_21
.LBB207_13:                             # %.preheader17.us27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB207_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB207_14:                             #   Parent Loop BB207_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB207_14
# %bb.15:                               # %._crit_edge.us35
                                        #   in Loop: Header=BB207_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB207_12
# %bb.16:                               #   in Loop: Header=BB207_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB207_12
.LBB207_17:                             # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI207_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI207_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI207_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI207_1)
	pcalau12i	$a0, %pc_hi20(.LCPI207_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI207_2)
	pcalau12i	$a0, %pc_hi20(.LCPI207_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI207_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB207_19
	.p2align	4, , 16
.LBB207_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB207_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB207_21
.LBB207_19:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB207_18
# %bb.20:                               #   in Loop: Header=BB207_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB207_18
.LBB207_21:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB207_23
# %bb.22:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB207_25
.LBB207_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB207_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB207_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI207_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI207_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB207_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end207:
	.size	_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc, .Lfunc_end207-_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc
.LCPI208_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI208_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI208_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI208_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI208_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI208_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB208_21
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 8
	blt	$s0, $a0, .LBB208_10
# %bb.2:                                # %.preheader17.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -7
	addi.d	$s7, $s1, 32
	addi.d	$s8, $s1, 64
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI208_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI208_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI208_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI208_1)
	pcalau12i	$a0, %pc_hi20(.LCPI208_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI208_2)
	pcalau12i	$a0, %pc_hi20(.LCPI208_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI208_4)
	pcalau12i	$a0, %pc_hi20(.LCPI208_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI208_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB208_4
	.p2align	4, , 16
.LBB208_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB208_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB208_21
.LBB208_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB208_5 Depth 2
                                        #     Child Loop BB208_7 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	move	$a4, $s8
	move	$a3, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB208_5:                              #   Parent Loop BB208_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 8
	addi.w	$a2, $a2, 8
	addi.d	$a3, $a3, 64
	addi.d	$a4, $a4, 64
	bltu	$a0, $s6, .LBB208_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB208_4 Depth=1
	bge	$a2, $s0, .LBB208_8
	.p2align	4, , 16
.LBB208_7:                              # %.lr.ph23.us
                                        #   Parent Loop BB208_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a5, $a5, 8
	bltu	$a0, $s0, .LBB208_7
.LBB208_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB208_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB208_3
# %bb.9:                                #   in Loop: Header=BB208_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB208_3
.LBB208_10:                             # %.preheader17.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB208_17
# %bb.11:                               # %.preheader17.us27.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI208_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI208_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI208_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI208_1)
	pcalau12i	$a0, %pc_hi20(.LCPI208_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI208_2)
	pcalau12i	$a0, %pc_hi20(.LCPI208_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI208_4)
	pcalau12i	$a0, %pc_hi20(.LCPI208_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI208_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB208_13
	.p2align	4, , 16
.LBB208_12:                             # %_Z9check_sumIdEvT_.exit.us31
                                        #   in Loop: Header=BB208_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB208_21
.LBB208_13:                             # %.preheader17.us27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB208_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB208_14:                             #   Parent Loop BB208_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB208_14
# %bb.15:                               # %._crit_edge.us35
                                        #   in Loop: Header=BB208_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB208_12
# %bb.16:                               #   in Loop: Header=BB208_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB208_12
.LBB208_17:                             # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI208_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI208_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI208_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI208_1)
	pcalau12i	$a0, %pc_hi20(.LCPI208_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI208_2)
	pcalau12i	$a0, %pc_hi20(.LCPI208_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI208_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB208_19
	.p2align	4, , 16
.LBB208_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB208_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB208_21
.LBB208_19:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB208_18
# %bb.20:                               #   in Loop: Header=BB208_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB208_18
.LBB208_21:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB208_23
# %bb.22:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB208_25
.LBB208_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB208_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB208_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI208_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI208_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB208_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end208:
	.size	_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc, .Lfunc_end208-_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc
.LCPI209_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI209_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI209_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI209_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI209_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI209_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB209_21
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 7
	blt	$s0, $a0, .LBB209_10
# %bb.2:                                # %.preheader17.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -6
	addi.d	$s7, $s1, 24
	addi.d	$s8, $s1, 56
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI209_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI209_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI209_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI209_1)
	pcalau12i	$a0, %pc_hi20(.LCPI209_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI209_2)
	pcalau12i	$a0, %pc_hi20(.LCPI209_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI209_4)
	pcalau12i	$a0, %pc_hi20(.LCPI209_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI209_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB209_4
	.p2align	4, , 16
.LBB209_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB209_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB209_21
.LBB209_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB209_5 Depth 2
                                        #     Child Loop BB209_7 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	move	$a4, $s8
	move	$a3, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB209_5:                              #   Parent Loop BB209_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 7
	addi.w	$a2, $a2, 7
	addi.d	$a3, $a3, 56
	addi.d	$a4, $a4, 56
	bltu	$a0, $s6, .LBB209_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB209_4 Depth=1
	bge	$a2, $s0, .LBB209_8
	.p2align	4, , 16
.LBB209_7:                              # %.lr.ph23.us
                                        #   Parent Loop BB209_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a5, $a5, 8
	bltu	$a0, $s0, .LBB209_7
.LBB209_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB209_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB209_3
# %bb.9:                                #   in Loop: Header=BB209_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB209_3
.LBB209_10:                             # %.preheader17.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB209_17
# %bb.11:                               # %.preheader17.us27.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI209_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI209_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI209_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI209_1)
	pcalau12i	$a0, %pc_hi20(.LCPI209_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI209_2)
	pcalau12i	$a0, %pc_hi20(.LCPI209_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI209_4)
	pcalau12i	$a0, %pc_hi20(.LCPI209_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI209_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB209_13
	.p2align	4, , 16
.LBB209_12:                             # %_Z9check_sumIdEvT_.exit.us31
                                        #   in Loop: Header=BB209_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB209_21
.LBB209_13:                             # %.preheader17.us27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB209_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB209_14:                             #   Parent Loop BB209_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB209_14
# %bb.15:                               # %._crit_edge.us35
                                        #   in Loop: Header=BB209_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB209_12
# %bb.16:                               #   in Loop: Header=BB209_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB209_12
.LBB209_17:                             # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI209_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI209_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI209_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI209_1)
	pcalau12i	$a0, %pc_hi20(.LCPI209_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI209_2)
	pcalau12i	$a0, %pc_hi20(.LCPI209_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI209_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB209_19
	.p2align	4, , 16
.LBB209_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB209_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB209_21
.LBB209_19:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB209_18
# %bb.20:                               #   in Loop: Header=BB209_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB209_18
.LBB209_21:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB209_23
# %bb.22:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB209_25
.LBB209_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB209_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB209_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI209_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI209_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB209_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end209:
	.size	_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc, .Lfunc_end209-_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc
.LCPI210_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI210_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI210_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI210_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI210_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI210_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB210_21
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 6
	blt	$s0, $a0, .LBB210_10
# %bb.2:                                # %.preheader17.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -5
	addi.d	$s7, $s1, 24
	addi.d	$s8, $s1, 48
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI210_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI210_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI210_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI210_1)
	pcalau12i	$a0, %pc_hi20(.LCPI210_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI210_2)
	pcalau12i	$a0, %pc_hi20(.LCPI210_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI210_4)
	pcalau12i	$a0, %pc_hi20(.LCPI210_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI210_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB210_4
	.p2align	4, , 16
.LBB210_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB210_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB210_21
.LBB210_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB210_5 Depth 2
                                        #     Child Loop BB210_7 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	move	$a4, $s8
	move	$a3, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB210_5:                              #   Parent Loop BB210_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 6
	addi.d	$a3, $a3, 48
	addi.w	$a2, $a2, 6
	addi.d	$a4, $a4, 48
	bltu	$a0, $s6, .LBB210_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB210_4 Depth=1
	bge	$a2, $s0, .LBB210_8
	.p2align	4, , 16
.LBB210_7:                              # %.lr.ph23.us
                                        #   Parent Loop BB210_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a5, $a5, 8
	bltu	$a0, $s0, .LBB210_7
.LBB210_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB210_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB210_3
# %bb.9:                                #   in Loop: Header=BB210_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB210_3
.LBB210_10:                             # %.preheader17.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB210_17
# %bb.11:                               # %.preheader17.us27.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI210_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI210_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI210_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI210_1)
	pcalau12i	$a0, %pc_hi20(.LCPI210_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI210_2)
	pcalau12i	$a0, %pc_hi20(.LCPI210_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI210_4)
	pcalau12i	$a0, %pc_hi20(.LCPI210_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI210_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB210_13
	.p2align	4, , 16
.LBB210_12:                             # %_Z9check_sumIdEvT_.exit.us31
                                        #   in Loop: Header=BB210_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB210_21
.LBB210_13:                             # %.preheader17.us27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB210_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB210_14:                             #   Parent Loop BB210_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB210_14
# %bb.15:                               # %._crit_edge.us35
                                        #   in Loop: Header=BB210_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB210_12
# %bb.16:                               #   in Loop: Header=BB210_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB210_12
.LBB210_17:                             # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI210_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI210_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI210_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI210_1)
	pcalau12i	$a0, %pc_hi20(.LCPI210_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI210_2)
	pcalau12i	$a0, %pc_hi20(.LCPI210_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI210_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB210_19
	.p2align	4, , 16
.LBB210_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB210_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB210_21
.LBB210_19:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB210_18
# %bb.20:                               #   in Loop: Header=BB210_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB210_18
.LBB210_21:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB210_23
# %bb.22:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB210_25
.LBB210_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB210_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB210_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI210_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI210_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB210_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end210:
	.size	_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc, .Lfunc_end210-_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc
.LCPI211_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI211_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI211_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI211_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI211_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI211_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB211_21
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 5
	blt	$s0, $a0, .LBB211_10
# %bb.2:                                # %.preheader17.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -4
	addi.d	$s7, $s1, 16
	addi.d	$s8, $s1, 40
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI211_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI211_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI211_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI211_1)
	pcalau12i	$a0, %pc_hi20(.LCPI211_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI211_2)
	pcalau12i	$a0, %pc_hi20(.LCPI211_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI211_4)
	pcalau12i	$a0, %pc_hi20(.LCPI211_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI211_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB211_4
	.p2align	4, , 16
.LBB211_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB211_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB211_21
.LBB211_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB211_5 Depth 2
                                        #     Child Loop BB211_7 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	move	$a4, $s8
	move	$a3, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB211_5:                              #   Parent Loop BB211_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 5
	addi.d	$a3, $a3, 40
	addi.w	$a2, $a2, 5
	addi.d	$a4, $a4, 40
	bltu	$a0, $s6, .LBB211_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB211_4 Depth=1
	bge	$a2, $s0, .LBB211_8
	.p2align	4, , 16
.LBB211_7:                              # %.lr.ph23.us
                                        #   Parent Loop BB211_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a5, $a5, 8
	bltu	$a0, $s0, .LBB211_7
.LBB211_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB211_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB211_3
# %bb.9:                                #   in Loop: Header=BB211_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB211_3
.LBB211_10:                             # %.preheader17.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB211_17
# %bb.11:                               # %.preheader17.us27.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI211_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI211_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI211_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI211_1)
	pcalau12i	$a0, %pc_hi20(.LCPI211_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI211_2)
	pcalau12i	$a0, %pc_hi20(.LCPI211_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI211_4)
	pcalau12i	$a0, %pc_hi20(.LCPI211_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI211_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB211_13
	.p2align	4, , 16
.LBB211_12:                             # %_Z9check_sumIdEvT_.exit.us31
                                        #   in Loop: Header=BB211_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB211_21
.LBB211_13:                             # %.preheader17.us27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB211_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB211_14:                             #   Parent Loop BB211_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB211_14
# %bb.15:                               # %._crit_edge.us35
                                        #   in Loop: Header=BB211_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB211_12
# %bb.16:                               #   in Loop: Header=BB211_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB211_12
.LBB211_17:                             # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI211_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI211_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI211_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI211_1)
	pcalau12i	$a0, %pc_hi20(.LCPI211_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI211_2)
	pcalau12i	$a0, %pc_hi20(.LCPI211_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI211_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB211_19
	.p2align	4, , 16
.LBB211_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB211_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB211_21
.LBB211_19:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB211_18
# %bb.20:                               #   in Loop: Header=BB211_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB211_18
.LBB211_21:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB211_23
# %bb.22:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB211_25
.LBB211_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB211_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB211_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI211_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI211_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB211_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end211:
	.size	_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc, .Lfunc_end211-_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc
.LCPI212_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI212_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI212_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI212_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI212_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI212_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB212_21
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 4
	blt	$s0, $a0, .LBB212_10
# %bb.2:                                # %.preheader17.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -3
	addi.d	$s7, $s1, 16
	addi.d	$s8, $s1, 32
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI212_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI212_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI212_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI212_1)
	pcalau12i	$a0, %pc_hi20(.LCPI212_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI212_2)
	pcalau12i	$a0, %pc_hi20(.LCPI212_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI212_4)
	pcalau12i	$a0, %pc_hi20(.LCPI212_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI212_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB212_4
	.p2align	4, , 16
.LBB212_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB212_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB212_21
.LBB212_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB212_5 Depth 2
                                        #     Child Loop BB212_7 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	move	$a4, $s8
	move	$a3, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB212_5:                              #   Parent Loop BB212_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 4
	addi.d	$a3, $a3, 32
	addi.w	$a2, $a2, 4
	addi.d	$a4, $a4, 32
	bltu	$a0, $s6, .LBB212_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB212_4 Depth=1
	bge	$a2, $s0, .LBB212_8
	.p2align	4, , 16
.LBB212_7:                              # %.lr.ph23.us
                                        #   Parent Loop BB212_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a5, $a5, 8
	bltu	$a0, $s0, .LBB212_7
.LBB212_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB212_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB212_3
# %bb.9:                                #   in Loop: Header=BB212_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB212_3
.LBB212_10:                             # %.preheader17.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB212_17
# %bb.11:                               # %.preheader17.us27.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI212_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI212_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI212_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI212_1)
	pcalau12i	$a0, %pc_hi20(.LCPI212_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI212_2)
	pcalau12i	$a0, %pc_hi20(.LCPI212_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI212_4)
	pcalau12i	$a0, %pc_hi20(.LCPI212_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI212_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB212_13
	.p2align	4, , 16
.LBB212_12:                             # %_Z9check_sumIdEvT_.exit.us31
                                        #   in Loop: Header=BB212_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB212_21
.LBB212_13:                             # %.preheader17.us27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB212_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB212_14:                             #   Parent Loop BB212_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB212_14
# %bb.15:                               # %._crit_edge.us35
                                        #   in Loop: Header=BB212_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB212_12
# %bb.16:                               #   in Loop: Header=BB212_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB212_12
.LBB212_17:                             # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI212_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI212_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI212_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI212_1)
	pcalau12i	$a0, %pc_hi20(.LCPI212_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI212_2)
	pcalau12i	$a0, %pc_hi20(.LCPI212_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI212_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB212_19
	.p2align	4, , 16
.LBB212_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB212_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB212_21
.LBB212_19:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB212_18
# %bb.20:                               #   in Loop: Header=BB212_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB212_18
.LBB212_21:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB212_23
# %bb.22:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB212_25
.LBB212_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB212_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB212_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI212_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI212_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB212_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end212:
	.size	_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc, .Lfunc_end212-_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc
.LCPI213_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI213_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI213_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI213_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI213_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI213_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB213_21
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 3
	blt	$s0, $a0, .LBB213_10
# %bb.2:                                # %.preheader17.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -2
	addi.d	$s7, $s1, 16
	addi.d	$s8, $s1, 24
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI213_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI213_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI213_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI213_1)
	pcalau12i	$a0, %pc_hi20(.LCPI213_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI213_2)
	pcalau12i	$a0, %pc_hi20(.LCPI213_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI213_4)
	pcalau12i	$a0, %pc_hi20(.LCPI213_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI213_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB213_4
	.p2align	4, , 16
.LBB213_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB213_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB213_21
.LBB213_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB213_5 Depth 2
                                        #     Child Loop BB213_7 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	move	$a5, $s8
	move	$a3, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB213_5:                              #   Parent Loop BB213_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a4, $a5
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 3
	addi.d	$a3, $a3, 24
	addi.w	$a2, $a2, 3
	addi.d	$a5, $a5, 24
	bltu	$a0, $s6, .LBB213_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB213_4 Depth=1
	bge	$a2, $s0, .LBB213_8
	.p2align	4, , 16
.LBB213_7:                              # %.lr.ph23.us
                                        #   Parent Loop BB213_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a4, $a4, 8
	bltu	$a0, $s0, .LBB213_7
.LBB213_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB213_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB213_3
# %bb.9:                                #   in Loop: Header=BB213_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB213_3
.LBB213_10:                             # %.preheader17.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB213_17
# %bb.11:                               # %.preheader17.us27.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI213_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI213_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI213_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI213_1)
	pcalau12i	$a0, %pc_hi20(.LCPI213_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI213_2)
	pcalau12i	$a0, %pc_hi20(.LCPI213_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI213_4)
	pcalau12i	$a0, %pc_hi20(.LCPI213_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI213_3)
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB213_13
	.p2align	4, , 16
.LBB213_12:                             # %_Z9check_sumIdEvT_.exit.us31
                                        #   in Loop: Header=BB213_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB213_21
.LBB213_13:                             # %.preheader17.us27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB213_14 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB213_14:                             #   Parent Loop BB213_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB213_14
# %bb.15:                               # %._crit_edge.us35
                                        #   in Loop: Header=BB213_13 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB213_12
# %bb.16:                               #   in Loop: Header=BB213_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB213_12
.LBB213_17:                             # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI213_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI213_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI213_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI213_1)
	pcalau12i	$a0, %pc_hi20(.LCPI213_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI213_2)
	pcalau12i	$a0, %pc_hi20(.LCPI213_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI213_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB213_19
	.p2align	4, , 16
.LBB213_18:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB213_19 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB213_21
.LBB213_19:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB213_18
# %bb.20:                               #   in Loop: Header=BB213_19 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB213_18
.LBB213_21:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s4, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB213_23
# %bb.22:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB213_25
.LBB213_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB213_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB213_25:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI213_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI213_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB213_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end213:
	.size	_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc, .Lfunc_end213-_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc
.LCPI214_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI214_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI214_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI214_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI214_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI214_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 112                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 104                  # 8-byte Folded Spill
	fst.d	$fs2, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 72                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB214_19
# %bb.1:                                # %.preheader17.lr.ph
	ori	$a0, $zero, 2
	blt	$s0, $a0, .LBB214_10
# %bb.2:                                # %.preheader17.us.preheader
	move	$s5, $zero
	addi.w	$s6, $s0, -1
	addi.d	$s7, $s1, 8
	addi.d	$s8, $s1, 16
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI214_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI214_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI214_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI214_1)
	pcalau12i	$a0, %pc_hi20(.LCPI214_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI214_2)
	pcalau12i	$a0, %pc_hi20(.LCPI214_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI214_4)
	pcalau12i	$a0, %pc_hi20(.LCPI214_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI214_3)
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB214_4
	.p2align	4, , 16
.LBB214_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB214_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB214_19
.LBB214_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB214_5 Depth 2
                                        #     Child Loop BB214_7 Depth 2
	move	$a2, $zero
	move	$a0, $zero
	move	$a5, $s8
	move	$a4, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB214_5:                              #   Parent Loop BB214_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a3, $a5
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 2
	addi.d	$a4, $a4, 16
	addi.w	$a2, $a2, 2
	addi.d	$a5, $a5, 16
	bltu	$a0, $s6, .LBB214_5
# %bb.6:                                # %..preheader_crit_edge.us
                                        #   in Loop: Header=BB214_4 Depth=1
	bge	$a2, $s0, .LBB214_8
	.p2align	4, , 16
.LBB214_7:                              # %.lr.ph23.us
                                        #   Parent Loop BB214_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 8
	bltu	$a0, $s0, .LBB214_7
.LBB214_8:                              # %._crit_edge.us
                                        #   in Loop: Header=BB214_4 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB214_3
# %bb.9:                                #   in Loop: Header=BB214_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB214_3
.LBB214_10:                             # %.preheader17.lr.ph.split
	move	$fp, $zero
	ori	$a0, $zero, 1
	bne	$s0, $a0, .LBB214_15
# %bb.11:                               # %._crit_edge.us35.preheader
	pcalau12i	$s5, %pc_hi20(init_value)
	ori	$a0, $zero, 0
	lu32i.d	$a0, -516992
	lu52i.d	$a0, $a0, 1036
	vreplgr2vr.d	$vr3, $a0
	ori	$a0, $zero, 0
	lu32i.d	$a0, -393216
	lu52i.d	$a0, $a0, -1022
	vreplgr2vr.d	$vr4, $a0
	ori	$a0, $zero, 0
	lu32i.d	$a0, -268678
	lu52i.d	$a0, $a0, 1042
	vreplgr2vr.d	$vr5, $a0
	pcalau12i	$a0, %pc_hi20(.LCPI214_2)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI214_2)
	pcalau12i	$a0, %pc_hi20(.LCPI214_4)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI214_4)
	pcalau12i	$a0, %pc_hi20(.LCPI214_3)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI214_3)
	movgr2fr.d	$fs3, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	vst	$vr3, $sp, 48                   # 16-byte Folded Spill
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB214_13
	.p2align	4, , 16
.LBB214_12:                             # %_Z9check_sumIdEvT_.exit.us31
                                        #   in Loop: Header=BB214_13 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB214_19
.LBB214_13:                             # %._crit_edge.us35
                                        # =>This Inner Loop Header: Depth=1
	fld.d	$fa0, $s1, 0
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	movfr2gr.d	$a0, $fa0
	vinsgr2vr.d	$vr0, $a0, 0
	movfr2gr.d	$a0, $fa1
	vinsgr2vr.d	$vr0, $a0, 1
	vfadd.d	$vr0, $vr0, $vr3
	vfmadd.d	$vr0, $vr0, $vr5, $vr4
	vfadd.d	$vr0, $vr0, $vr3
	vfmadd.d	$vr0, $vr0, $vr5, $vr4
	vfadd.d	$vr0, $vr0, $vr3
	vfmadd.d	$vr0, $vr0, $vr5, $vr4
	vreplvei.d	$vr1, $vr0, 0
	fadd.d	$fa1, $fa1, $fs3
	vreplvei.d	$vr0, $vr0, 1
	fmul.d	$fa0, $fa0, $fs0
	fadd.d	$fa0, $fa1, $fa0
	fabs.d	$fa2, $fa1
	fdiv.d	$fa1, $fa0, $fa1
	fcmp.clt.d	$fcc0, $fs1, $fa2
	fsel	$fa0, $fa0, $fa1, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs2
	bcnez	$fcc0, .LBB214_12
# %bb.14:                               #   in Loop: Header=BB214_13 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	vld	$vr3, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB214_12
.LBB214_15:                             # %.preheader17.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI214_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI214_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI214_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI214_1)
	pcalau12i	$a0, %pc_hi20(.LCPI214_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI214_2)
	pcalau12i	$a0, %pc_hi20(.LCPI214_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI214_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB214_17
	.p2align	4, , 16
.LBB214_16:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB214_17 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB214_19
.LBB214_17:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB214_16
# %bb.18:                               #   in Loop: Header=BB214_17 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB214_16
.LBB214_19:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$fp, $s3, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(results)
	ld.d	$a2, $s3, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB214_21
# %bb.20:                               # %._crit_edge26
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB214_23
.LBB214_21:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s3, %pc_lo12(results)
	beqz	$a0, .LBB214_24
# %bb.22:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB214_23:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI214_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI214_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 96                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 104                  # 8-byte Folded Reload
	fld.d	$fs0, $sp, 112                  # 8-byte Folded Reload
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB214_24:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end214:
	.size	_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc, .Lfunc_end214-_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc
.LCPI215_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI215_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI215_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI215_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI215_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI215_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 8                    # 8-byte Folded Spill
	fst.d	$fs5, $sp, 0                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	.cfi_offset 61, -128
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB215_12
# %bb.1:                                # %.preheader17.lr.ph
	blez	$s0, .LBB215_8
# %bb.2:                                # %.preheader17.us.preheader
	move	$s6, $zero
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI215_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI215_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI215_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI215_1)
	pcalau12i	$a0, %pc_hi20(.LCPI215_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI215_2)
	pcalau12i	$a0, %pc_hi20(.LCPI215_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI215_4)
	pcalau12i	$a0, %pc_hi20(.LCPI215_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI215_3)
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB215_4
	.p2align	4, , 16
.LBB215_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB215_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB215_12
.LBB215_4:                              # %.preheader17.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB215_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB215_5:                              #   Parent Loop BB215_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB215_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB215_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB215_3
# %bb.7:                                #   in Loop: Header=BB215_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB215_3
.LBB215_8:                              # %.preheader17.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI215_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI215_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI215_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI215_1)
	pcalau12i	$a0, %pc_hi20(.LCPI215_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI215_2)
	pcalau12i	$a0, %pc_hi20(.LCPI215_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI215_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB215_10
	.p2align	4, , 16
.LBB215_9:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB215_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB215_12
.LBB215_10:                             # %.preheader17
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB215_9
# %bb.11:                               #   in Loop: Header=BB215_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB215_9
.LBB215_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB215_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB215_16
.LBB215_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB215_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB215_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI215_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI215_5)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 0                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB215_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end215:
	.size	_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc, .Lfunc_end215-_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc
.LCPI216_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI216_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI216_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI216_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI216_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI216_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB216_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 32
	blt	$s0, $a0, .LBB216_11
# %bb.2:                                # %.preheader25.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -31
	addi.d	$s7, $s1, 128
	addi.d	$s8, $s1, 256
	addi.d	$fp, $s0, -32
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI216_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI216_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI216_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI216_1)
	pcalau12i	$a0, %pc_hi20(.LCPI216_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI216_2)
	pcalau12i	$a0, %pc_hi20(.LCPI216_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI216_4)
	pcalau12i	$a0, %pc_hi20(.LCPI216_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI216_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB216_4
	.p2align	4, , 16
.LBB216_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB216_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB216_22
.LBB216_4:                              # %.preheader25.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB216_5 Depth 2
                                        #     Child Loop BB216_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB216_5:                              #   Parent Loop BB216_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -128
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -120
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 120
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 32
	addi.w	$a0, $a0, 32
	addi.d	$a1, $a1, 256
	addi.d	$a3, $a3, 256
	bltu	$a2, $s6, .LBB216_5
# %bb.6:                                # %.loopexit26.us
                                        #   in Loop: Header=BB216_4 Depth=1
	bge	$a0, $s0, .LBB216_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB216_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB216_8:                              # %.preheader.us
                                        #   Parent Loop BB216_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB216_8
.LBB216_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB216_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB216_3
# %bb.10:                               #   in Loop: Header=BB216_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB216_3
.LBB216_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB216_18
# %bb.12:                               # %.preheader.us37.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI216_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI216_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI216_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI216_1)
	pcalau12i	$a0, %pc_hi20(.LCPI216_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI216_2)
	pcalau12i	$a0, %pc_hi20(.LCPI216_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI216_4)
	pcalau12i	$a0, %pc_hi20(.LCPI216_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI216_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB216_14
	.p2align	4, , 16
.LBB216_13:                             # %_Z9check_sumIdEvT_.exit.us36
                                        #   in Loop: Header=BB216_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB216_22
.LBB216_14:                             # %.preheader.us37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB216_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB216_15:                             #   Parent Loop BB216_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB216_15
# %bb.16:                               # %.loopexit.us38
                                        #   in Loop: Header=BB216_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB216_13
# %bb.17:                               #   in Loop: Header=BB216_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB216_13
.LBB216_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI216_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI216_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI216_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI216_1)
	pcalau12i	$a0, %pc_hi20(.LCPI216_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI216_2)
	pcalau12i	$a0, %pc_hi20(.LCPI216_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI216_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB216_20
	.p2align	4, , 16
.LBB216_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB216_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB216_22
.LBB216_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB216_19
# %bb.21:                               #   in Loop: Header=BB216_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB216_19
.LBB216_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB216_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB216_26
.LBB216_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB216_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB216_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI216_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI216_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB216_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end216:
	.size	_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc, .Lfunc_end216-_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc
.LCPI217_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI217_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI217_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI217_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI217_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI217_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB217_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 31
	blt	$s0, $a0, .LBB217_11
# %bb.2:                                # %.preheader25.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -30
	addi.d	$s7, $s1, 120
	addi.d	$s8, $s1, 248
	addi.d	$fp, $s0, -31
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI217_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI217_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI217_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI217_1)
	pcalau12i	$a0, %pc_hi20(.LCPI217_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI217_2)
	pcalau12i	$a0, %pc_hi20(.LCPI217_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI217_4)
	pcalau12i	$a0, %pc_hi20(.LCPI217_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI217_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB217_4
	.p2align	4, , 16
.LBB217_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB217_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB217_22
.LBB217_4:                              # %.preheader25.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB217_5 Depth 2
                                        #     Child Loop BB217_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB217_5:                              #   Parent Loop BB217_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -120
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 120
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 31
	addi.w	$a0, $a0, 31
	addi.d	$a1, $a1, 248
	addi.d	$a3, $a3, 248
	bltu	$a2, $s6, .LBB217_5
# %bb.6:                                # %.loopexit26.us
                                        #   in Loop: Header=BB217_4 Depth=1
	bge	$a0, $s0, .LBB217_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB217_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB217_8:                              # %.preheader.us
                                        #   Parent Loop BB217_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB217_8
.LBB217_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB217_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB217_3
# %bb.10:                               #   in Loop: Header=BB217_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB217_3
.LBB217_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB217_18
# %bb.12:                               # %.preheader.us37.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI217_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI217_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI217_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI217_1)
	pcalau12i	$a0, %pc_hi20(.LCPI217_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI217_2)
	pcalau12i	$a0, %pc_hi20(.LCPI217_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI217_4)
	pcalau12i	$a0, %pc_hi20(.LCPI217_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI217_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB217_14
	.p2align	4, , 16
.LBB217_13:                             # %_Z9check_sumIdEvT_.exit.us36
                                        #   in Loop: Header=BB217_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB217_22
.LBB217_14:                             # %.preheader.us37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB217_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB217_15:                             #   Parent Loop BB217_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB217_15
# %bb.16:                               # %.loopexit.us38
                                        #   in Loop: Header=BB217_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB217_13
# %bb.17:                               #   in Loop: Header=BB217_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB217_13
.LBB217_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI217_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI217_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI217_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI217_1)
	pcalau12i	$a0, %pc_hi20(.LCPI217_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI217_2)
	pcalau12i	$a0, %pc_hi20(.LCPI217_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI217_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB217_20
	.p2align	4, , 16
.LBB217_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB217_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB217_22
.LBB217_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB217_19
# %bb.21:                               #   in Loop: Header=BB217_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB217_19
.LBB217_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB217_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB217_26
.LBB217_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB217_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB217_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI217_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI217_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB217_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end217:
	.size	_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc, .Lfunc_end217-_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc
.LCPI218_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI218_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI218_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI218_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI218_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI218_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB218_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 30
	blt	$s0, $a0, .LBB218_11
# %bb.2:                                # %.preheader25.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -29
	addi.d	$s7, $s1, 120
	addi.d	$s8, $s1, 240
	addi.d	$fp, $s0, -30
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI218_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI218_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI218_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI218_1)
	pcalau12i	$a0, %pc_hi20(.LCPI218_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI218_2)
	pcalau12i	$a0, %pc_hi20(.LCPI218_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI218_4)
	pcalau12i	$a0, %pc_hi20(.LCPI218_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI218_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB218_4
	.p2align	4, , 16
.LBB218_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB218_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB218_22
.LBB218_4:                              # %.preheader25.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB218_5 Depth 2
                                        #     Child Loop BB218_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB218_5:                              #   Parent Loop BB218_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -120
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 30
	addi.w	$a0, $a0, 30
	addi.d	$a1, $a1, 240
	addi.d	$a3, $a3, 240
	bltu	$a2, $s6, .LBB218_5
# %bb.6:                                # %.loopexit26.us
                                        #   in Loop: Header=BB218_4 Depth=1
	bge	$a0, $s0, .LBB218_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB218_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB218_8:                              # %.preheader.us
                                        #   Parent Loop BB218_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB218_8
.LBB218_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB218_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB218_3
# %bb.10:                               #   in Loop: Header=BB218_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB218_3
.LBB218_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB218_18
# %bb.12:                               # %.preheader.us37.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI218_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI218_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI218_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI218_1)
	pcalau12i	$a0, %pc_hi20(.LCPI218_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI218_2)
	pcalau12i	$a0, %pc_hi20(.LCPI218_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI218_4)
	pcalau12i	$a0, %pc_hi20(.LCPI218_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI218_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB218_14
	.p2align	4, , 16
.LBB218_13:                             # %_Z9check_sumIdEvT_.exit.us36
                                        #   in Loop: Header=BB218_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB218_22
.LBB218_14:                             # %.preheader.us37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB218_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB218_15:                             #   Parent Loop BB218_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB218_15
# %bb.16:                               # %.loopexit.us38
                                        #   in Loop: Header=BB218_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB218_13
# %bb.17:                               #   in Loop: Header=BB218_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB218_13
.LBB218_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI218_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI218_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI218_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI218_1)
	pcalau12i	$a0, %pc_hi20(.LCPI218_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI218_2)
	pcalau12i	$a0, %pc_hi20(.LCPI218_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI218_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB218_20
	.p2align	4, , 16
.LBB218_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB218_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB218_22
.LBB218_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB218_19
# %bb.21:                               #   in Loop: Header=BB218_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB218_19
.LBB218_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB218_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB218_26
.LBB218_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB218_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB218_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI218_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI218_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB218_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end218:
	.size	_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc, .Lfunc_end218-_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN13do_loop_testsILi28EdE7do_testEPKdPKc,"axG",@progbits,_ZN13do_loop_testsILi28EdE7do_testEPKdPKc,comdat
	.weak	_ZN13do_loop_testsILi28EdE7do_testEPKdPKc # -- Begin function _ZN13do_loop_testsILi28EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN13do_loop_testsILi28EdE7do_testEPKdPKc,@function
_ZN13do_loop_testsILi28EdE7do_testEPKdPKc: # @_ZN13do_loop_testsILi28EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN13do_loop_testsILi19EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1900
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 2000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s1, $s1, 2047
	addi.d	$a2, $s1, 53
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 153
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 253
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 353
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 453
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 553
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 653
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end219:
	.size	_ZN13do_loop_testsILi28EdE7do_testEPKdPKc, .Lfunc_end219-_ZN13do_loop_testsILi28EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc
.LCPI220_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI220_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI220_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI220_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI220_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI220_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB220_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 29
	blt	$s0, $a0, .LBB220_11
# %bb.2:                                # %.preheader25.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -28
	addi.d	$s7, $s1, 112
	addi.d	$s8, $s1, 232
	addi.d	$fp, $s0, -29
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI220_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI220_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI220_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI220_1)
	pcalau12i	$a0, %pc_hi20(.LCPI220_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI220_2)
	pcalau12i	$a0, %pc_hi20(.LCPI220_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI220_4)
	pcalau12i	$a0, %pc_hi20(.LCPI220_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI220_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB220_4
	.p2align	4, , 16
.LBB220_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB220_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB220_22
.LBB220_4:                              # %.preheader25.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB220_5 Depth 2
                                        #     Child Loop BB220_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB220_5:                              #   Parent Loop BB220_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 29
	addi.w	$a0, $a0, 29
	addi.d	$a1, $a1, 232
	addi.d	$a3, $a3, 232
	bltu	$a2, $s6, .LBB220_5
# %bb.6:                                # %.loopexit26.us
                                        #   in Loop: Header=BB220_4 Depth=1
	bge	$a0, $s0, .LBB220_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB220_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB220_8:                              # %.preheader.us
                                        #   Parent Loop BB220_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB220_8
.LBB220_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB220_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB220_3
# %bb.10:                               #   in Loop: Header=BB220_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB220_3
.LBB220_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB220_18
# %bb.12:                               # %.preheader.us37.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI220_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI220_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI220_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI220_1)
	pcalau12i	$a0, %pc_hi20(.LCPI220_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI220_2)
	pcalau12i	$a0, %pc_hi20(.LCPI220_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI220_4)
	pcalau12i	$a0, %pc_hi20(.LCPI220_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI220_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB220_14
	.p2align	4, , 16
.LBB220_13:                             # %_Z9check_sumIdEvT_.exit.us36
                                        #   in Loop: Header=BB220_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB220_22
.LBB220_14:                             # %.preheader.us37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB220_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB220_15:                             #   Parent Loop BB220_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB220_15
# %bb.16:                               # %.loopexit.us38
                                        #   in Loop: Header=BB220_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB220_13
# %bb.17:                               #   in Loop: Header=BB220_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB220_13
.LBB220_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI220_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI220_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI220_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI220_1)
	pcalau12i	$a0, %pc_hi20(.LCPI220_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI220_2)
	pcalau12i	$a0, %pc_hi20(.LCPI220_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI220_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB220_20
	.p2align	4, , 16
.LBB220_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB220_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB220_22
.LBB220_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB220_19
# %bb.21:                               #   in Loop: Header=BB220_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB220_19
.LBB220_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB220_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB220_26
.LBB220_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB220_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB220_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI220_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI220_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB220_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end220:
	.size	_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc, .Lfunc_end220-_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc
.LCPI221_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI221_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI221_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI221_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI221_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI221_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB221_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 28
	blt	$s0, $a0, .LBB221_11
# %bb.2:                                # %.preheader25.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -27
	addi.d	$s7, $s1, 112
	addi.d	$s8, $s1, 224
	addi.d	$fp, $s0, -28
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI221_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI221_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI221_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI221_1)
	pcalau12i	$a0, %pc_hi20(.LCPI221_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI221_2)
	pcalau12i	$a0, %pc_hi20(.LCPI221_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI221_4)
	pcalau12i	$a0, %pc_hi20(.LCPI221_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI221_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB221_4
	.p2align	4, , 16
.LBB221_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB221_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB221_22
.LBB221_4:                              # %.preheader25.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_5 Depth 2
                                        #     Child Loop BB221_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB221_5:                              #   Parent Loop BB221_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 28
	addi.w	$a0, $a0, 28
	addi.d	$a1, $a1, 224
	addi.d	$a3, $a3, 224
	bltu	$a2, $s6, .LBB221_5
# %bb.6:                                # %.loopexit26.us
                                        #   in Loop: Header=BB221_4 Depth=1
	bge	$a0, $s0, .LBB221_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB221_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB221_8:                              # %.preheader.us
                                        #   Parent Loop BB221_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB221_8
.LBB221_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB221_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB221_3
# %bb.10:                               #   in Loop: Header=BB221_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB221_3
.LBB221_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB221_18
# %bb.12:                               # %.preheader.us37.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI221_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI221_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI221_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI221_1)
	pcalau12i	$a0, %pc_hi20(.LCPI221_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI221_2)
	pcalau12i	$a0, %pc_hi20(.LCPI221_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI221_4)
	pcalau12i	$a0, %pc_hi20(.LCPI221_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI221_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB221_14
	.p2align	4, , 16
.LBB221_13:                             # %_Z9check_sumIdEvT_.exit.us36
                                        #   in Loop: Header=BB221_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB221_22
.LBB221_14:                             # %.preheader.us37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB221_15:                             #   Parent Loop BB221_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB221_15
# %bb.16:                               # %.loopexit.us38
                                        #   in Loop: Header=BB221_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB221_13
# %bb.17:                               #   in Loop: Header=BB221_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB221_13
.LBB221_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI221_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI221_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI221_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI221_1)
	pcalau12i	$a0, %pc_hi20(.LCPI221_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI221_2)
	pcalau12i	$a0, %pc_hi20(.LCPI221_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI221_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB221_20
	.p2align	4, , 16
.LBB221_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB221_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB221_22
.LBB221_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB221_19
# %bb.21:                               #   in Loop: Header=BB221_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB221_19
.LBB221_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB221_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB221_26
.LBB221_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB221_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB221_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI221_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI221_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB221_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end221:
	.size	_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc, .Lfunc_end221-_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc
.LCPI222_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI222_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI222_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI222_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI222_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI222_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB222_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 27
	blt	$s0, $a0, .LBB222_11
# %bb.2:                                # %.preheader25.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -26
	addi.d	$s7, $s1, 104
	addi.d	$s8, $s1, 216
	addi.d	$fp, $s0, -27
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI222_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI222_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI222_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI222_1)
	pcalau12i	$a0, %pc_hi20(.LCPI222_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI222_2)
	pcalau12i	$a0, %pc_hi20(.LCPI222_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI222_4)
	pcalau12i	$a0, %pc_hi20(.LCPI222_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI222_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB222_4
	.p2align	4, , 16
.LBB222_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB222_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB222_22
.LBB222_4:                              # %.preheader25.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB222_5 Depth 2
                                        #     Child Loop BB222_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB222_5:                              #   Parent Loop BB222_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 27
	addi.w	$a0, $a0, 27
	addi.d	$a1, $a1, 216
	addi.d	$a3, $a3, 216
	bltu	$a2, $s6, .LBB222_5
# %bb.6:                                # %.loopexit26.us
                                        #   in Loop: Header=BB222_4 Depth=1
	bge	$a0, $s0, .LBB222_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB222_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB222_8:                              # %.preheader.us
                                        #   Parent Loop BB222_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB222_8
.LBB222_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB222_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB222_3
# %bb.10:                               #   in Loop: Header=BB222_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB222_3
.LBB222_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB222_18
# %bb.12:                               # %.preheader.us37.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI222_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI222_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI222_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI222_1)
	pcalau12i	$a0, %pc_hi20(.LCPI222_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI222_2)
	pcalau12i	$a0, %pc_hi20(.LCPI222_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI222_4)
	pcalau12i	$a0, %pc_hi20(.LCPI222_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI222_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB222_14
	.p2align	4, , 16
.LBB222_13:                             # %_Z9check_sumIdEvT_.exit.us36
                                        #   in Loop: Header=BB222_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB222_22
.LBB222_14:                             # %.preheader.us37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB222_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB222_15:                             #   Parent Loop BB222_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB222_15
# %bb.16:                               # %.loopexit.us38
                                        #   in Loop: Header=BB222_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB222_13
# %bb.17:                               #   in Loop: Header=BB222_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB222_13
.LBB222_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI222_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI222_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI222_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI222_1)
	pcalau12i	$a0, %pc_hi20(.LCPI222_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI222_2)
	pcalau12i	$a0, %pc_hi20(.LCPI222_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI222_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB222_20
	.p2align	4, , 16
.LBB222_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB222_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB222_22
.LBB222_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB222_19
# %bb.21:                               #   in Loop: Header=BB222_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB222_19
.LBB222_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB222_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB222_26
.LBB222_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB222_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB222_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI222_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI222_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB222_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end222:
	.size	_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc, .Lfunc_end222-_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc
.LCPI223_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI223_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI223_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI223_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI223_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI223_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB223_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 26
	blt	$s0, $a0, .LBB223_11
# %bb.2:                                # %.preheader25.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -25
	addi.d	$s7, $s1, 104
	addi.d	$s8, $s1, 208
	addi.d	$fp, $s0, -26
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI223_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI223_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI223_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI223_1)
	pcalau12i	$a0, %pc_hi20(.LCPI223_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI223_2)
	pcalau12i	$a0, %pc_hi20(.LCPI223_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI223_4)
	pcalau12i	$a0, %pc_hi20(.LCPI223_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI223_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB223_4
	.p2align	4, , 16
.LBB223_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB223_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB223_22
.LBB223_4:                              # %.preheader25.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB223_5 Depth 2
                                        #     Child Loop BB223_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB223_5:                              #   Parent Loop BB223_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 26
	addi.w	$a0, $a0, 26
	addi.d	$a1, $a1, 208
	addi.d	$a3, $a3, 208
	bltu	$a2, $s6, .LBB223_5
# %bb.6:                                # %.loopexit26.us
                                        #   in Loop: Header=BB223_4 Depth=1
	bge	$a0, $s0, .LBB223_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB223_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB223_8:                              # %.preheader.us
                                        #   Parent Loop BB223_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB223_8
.LBB223_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB223_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB223_3
# %bb.10:                               #   in Loop: Header=BB223_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB223_3
.LBB223_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB223_18
# %bb.12:                               # %.preheader.us37.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI223_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI223_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI223_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI223_1)
	pcalau12i	$a0, %pc_hi20(.LCPI223_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI223_2)
	pcalau12i	$a0, %pc_hi20(.LCPI223_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI223_4)
	pcalau12i	$a0, %pc_hi20(.LCPI223_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI223_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB223_14
	.p2align	4, , 16
.LBB223_13:                             # %_Z9check_sumIdEvT_.exit.us36
                                        #   in Loop: Header=BB223_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB223_22
.LBB223_14:                             # %.preheader.us37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB223_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB223_15:                             #   Parent Loop BB223_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB223_15
# %bb.16:                               # %.loopexit.us38
                                        #   in Loop: Header=BB223_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB223_13
# %bb.17:                               #   in Loop: Header=BB223_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB223_13
.LBB223_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI223_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI223_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI223_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI223_1)
	pcalau12i	$a0, %pc_hi20(.LCPI223_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI223_2)
	pcalau12i	$a0, %pc_hi20(.LCPI223_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI223_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB223_20
	.p2align	4, , 16
.LBB223_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB223_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB223_22
.LBB223_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB223_19
# %bb.21:                               #   in Loop: Header=BB223_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB223_19
.LBB223_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB223_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB223_26
.LBB223_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB223_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB223_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI223_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI223_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB223_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end223:
	.size	_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc, .Lfunc_end223-_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc
.LCPI224_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI224_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI224_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI224_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI224_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI224_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB224_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 25
	blt	$s0, $a0, .LBB224_11
# %bb.2:                                # %.preheader25.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -24
	addi.d	$s7, $s1, 96
	addi.d	$s8, $s1, 200
	addi.d	$fp, $s0, -25
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI224_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI224_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI224_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI224_1)
	pcalau12i	$a0, %pc_hi20(.LCPI224_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI224_2)
	pcalau12i	$a0, %pc_hi20(.LCPI224_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI224_4)
	pcalau12i	$a0, %pc_hi20(.LCPI224_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI224_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB224_4
	.p2align	4, , 16
.LBB224_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB224_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB224_22
.LBB224_4:                              # %.preheader25.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB224_5 Depth 2
                                        #     Child Loop BB224_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB224_5:                              #   Parent Loop BB224_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 25
	addi.w	$a0, $a0, 25
	addi.d	$a1, $a1, 200
	addi.d	$a3, $a3, 200
	bltu	$a2, $s6, .LBB224_5
# %bb.6:                                # %.loopexit26.us
                                        #   in Loop: Header=BB224_4 Depth=1
	bge	$a0, $s0, .LBB224_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB224_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB224_8:                              # %.preheader.us
                                        #   Parent Loop BB224_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB224_8
.LBB224_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB224_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB224_3
# %bb.10:                               #   in Loop: Header=BB224_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB224_3
.LBB224_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB224_18
# %bb.12:                               # %.preheader.us37.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI224_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI224_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI224_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI224_1)
	pcalau12i	$a0, %pc_hi20(.LCPI224_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI224_2)
	pcalau12i	$a0, %pc_hi20(.LCPI224_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI224_4)
	pcalau12i	$a0, %pc_hi20(.LCPI224_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI224_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB224_14
	.p2align	4, , 16
.LBB224_13:                             # %_Z9check_sumIdEvT_.exit.us36
                                        #   in Loop: Header=BB224_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB224_22
.LBB224_14:                             # %.preheader.us37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB224_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB224_15:                             #   Parent Loop BB224_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB224_15
# %bb.16:                               # %.loopexit.us38
                                        #   in Loop: Header=BB224_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB224_13
# %bb.17:                               #   in Loop: Header=BB224_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB224_13
.LBB224_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI224_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI224_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI224_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI224_1)
	pcalau12i	$a0, %pc_hi20(.LCPI224_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI224_2)
	pcalau12i	$a0, %pc_hi20(.LCPI224_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI224_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB224_20
	.p2align	4, , 16
.LBB224_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB224_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB224_22
.LBB224_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB224_19
# %bb.21:                               #   in Loop: Header=BB224_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB224_19
.LBB224_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB224_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB224_26
.LBB224_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB224_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB224_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI224_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI224_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB224_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end224:
	.size	_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc, .Lfunc_end224-_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc
.LCPI225_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI225_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI225_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI225_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI225_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI225_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB225_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 24
	blt	$s0, $a0, .LBB225_11
# %bb.2:                                # %.preheader25.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -23
	addi.d	$s7, $s1, 96
	addi.d	$s8, $s1, 192
	addi.d	$fp, $s0, -24
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI225_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI225_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI225_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI225_1)
	pcalau12i	$a0, %pc_hi20(.LCPI225_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI225_2)
	pcalau12i	$a0, %pc_hi20(.LCPI225_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI225_4)
	pcalau12i	$a0, %pc_hi20(.LCPI225_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI225_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB225_4
	.p2align	4, , 16
.LBB225_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB225_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB225_22
.LBB225_4:                              # %.preheader25.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB225_5 Depth 2
                                        #     Child Loop BB225_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB225_5:                              #   Parent Loop BB225_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 24
	addi.w	$a0, $a0, 24
	addi.d	$a1, $a1, 192
	addi.d	$a3, $a3, 192
	bltu	$a2, $s6, .LBB225_5
# %bb.6:                                # %.loopexit26.us
                                        #   in Loop: Header=BB225_4 Depth=1
	bge	$a0, $s0, .LBB225_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB225_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB225_8:                              # %.preheader.us
                                        #   Parent Loop BB225_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB225_8
.LBB225_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB225_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB225_3
# %bb.10:                               #   in Loop: Header=BB225_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB225_3
.LBB225_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB225_18
# %bb.12:                               # %.preheader.us37.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI225_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI225_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI225_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI225_1)
	pcalau12i	$a0, %pc_hi20(.LCPI225_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI225_2)
	pcalau12i	$a0, %pc_hi20(.LCPI225_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI225_4)
	pcalau12i	$a0, %pc_hi20(.LCPI225_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI225_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB225_14
	.p2align	4, , 16
.LBB225_13:                             # %_Z9check_sumIdEvT_.exit.us36
                                        #   in Loop: Header=BB225_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB225_22
.LBB225_14:                             # %.preheader.us37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB225_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB225_15:                             #   Parent Loop BB225_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB225_15
# %bb.16:                               # %.loopexit.us38
                                        #   in Loop: Header=BB225_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB225_13
# %bb.17:                               #   in Loop: Header=BB225_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB225_13
.LBB225_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI225_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI225_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI225_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI225_1)
	pcalau12i	$a0, %pc_hi20(.LCPI225_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI225_2)
	pcalau12i	$a0, %pc_hi20(.LCPI225_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI225_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB225_20
	.p2align	4, , 16
.LBB225_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB225_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB225_22
.LBB225_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB225_19
# %bb.21:                               #   in Loop: Header=BB225_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB225_19
.LBB225_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB225_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB225_26
.LBB225_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB225_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB225_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI225_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI225_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB225_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end225:
	.size	_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc, .Lfunc_end225-_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc
.LCPI226_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI226_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI226_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI226_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI226_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI226_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB226_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 23
	blt	$s0, $a0, .LBB226_11
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -22
	addi.d	$s7, $s1, 88
	addi.d	$s8, $s1, 184
	addi.d	$fp, $s0, -23
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI226_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI226_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI226_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI226_1)
	pcalau12i	$a0, %pc_hi20(.LCPI226_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI226_2)
	pcalau12i	$a0, %pc_hi20(.LCPI226_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI226_4)
	pcalau12i	$a0, %pc_hi20(.LCPI226_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI226_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB226_4
	.p2align	4, , 16
.LBB226_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB226_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB226_22
.LBB226_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB226_5 Depth 2
                                        #     Child Loop BB226_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB226_5:                              #   Parent Loop BB226_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 23
	addi.w	$a0, $a0, 23
	addi.d	$a1, $a1, 184
	addi.d	$a3, $a3, 184
	bltu	$a2, $s6, .LBB226_5
# %bb.6:                                # %.loopexit25.us
                                        #   in Loop: Header=BB226_4 Depth=1
	bge	$a0, $s0, .LBB226_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB226_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB226_8:                              # %.preheader.us
                                        #   Parent Loop BB226_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB226_8
.LBB226_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB226_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB226_3
# %bb.10:                               #   in Loop: Header=BB226_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB226_3
.LBB226_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB226_18
# %bb.12:                               # %.preheader.us36.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI226_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI226_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI226_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI226_1)
	pcalau12i	$a0, %pc_hi20(.LCPI226_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI226_2)
	pcalau12i	$a0, %pc_hi20(.LCPI226_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI226_4)
	pcalau12i	$a0, %pc_hi20(.LCPI226_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI226_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB226_14
	.p2align	4, , 16
.LBB226_13:                             # %_Z9check_sumIdEvT_.exit.us35
                                        #   in Loop: Header=BB226_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB226_22
.LBB226_14:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB226_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB226_15:                             #   Parent Loop BB226_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB226_15
# %bb.16:                               # %.loopexit.us37
                                        #   in Loop: Header=BB226_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB226_13
# %bb.17:                               #   in Loop: Header=BB226_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB226_13
.LBB226_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI226_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI226_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI226_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI226_1)
	pcalau12i	$a0, %pc_hi20(.LCPI226_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI226_2)
	pcalau12i	$a0, %pc_hi20(.LCPI226_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI226_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB226_20
	.p2align	4, , 16
.LBB226_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB226_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB226_22
.LBB226_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB226_19
# %bb.21:                               #   in Loop: Header=BB226_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB226_19
.LBB226_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB226_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB226_26
.LBB226_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB226_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB226_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI226_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI226_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB226_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end226:
	.size	_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc, .Lfunc_end226-_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc
.LCPI227_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI227_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI227_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI227_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI227_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI227_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB227_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 22
	blt	$s0, $a0, .LBB227_11
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -21
	addi.d	$s7, $s1, 88
	addi.d	$s8, $s1, 176
	addi.d	$fp, $s0, -22
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI227_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI227_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI227_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI227_1)
	pcalau12i	$a0, %pc_hi20(.LCPI227_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI227_2)
	pcalau12i	$a0, %pc_hi20(.LCPI227_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI227_4)
	pcalau12i	$a0, %pc_hi20(.LCPI227_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI227_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB227_4
	.p2align	4, , 16
.LBB227_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB227_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB227_22
.LBB227_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB227_5 Depth 2
                                        #     Child Loop BB227_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB227_5:                              #   Parent Loop BB227_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 22
	addi.w	$a0, $a0, 22
	addi.d	$a1, $a1, 176
	addi.d	$a3, $a3, 176
	bltu	$a2, $s6, .LBB227_5
# %bb.6:                                # %.loopexit25.us
                                        #   in Loop: Header=BB227_4 Depth=1
	bge	$a0, $s0, .LBB227_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB227_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB227_8:                              # %.preheader.us
                                        #   Parent Loop BB227_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB227_8
.LBB227_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB227_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB227_3
# %bb.10:                               #   in Loop: Header=BB227_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB227_3
.LBB227_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB227_18
# %bb.12:                               # %.preheader.us36.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI227_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI227_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI227_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI227_1)
	pcalau12i	$a0, %pc_hi20(.LCPI227_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI227_2)
	pcalau12i	$a0, %pc_hi20(.LCPI227_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI227_4)
	pcalau12i	$a0, %pc_hi20(.LCPI227_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI227_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB227_14
	.p2align	4, , 16
.LBB227_13:                             # %_Z9check_sumIdEvT_.exit.us35
                                        #   in Loop: Header=BB227_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB227_22
.LBB227_14:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB227_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB227_15:                             #   Parent Loop BB227_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB227_15
# %bb.16:                               # %.loopexit.us37
                                        #   in Loop: Header=BB227_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB227_13
# %bb.17:                               #   in Loop: Header=BB227_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB227_13
.LBB227_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI227_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI227_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI227_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI227_1)
	pcalau12i	$a0, %pc_hi20(.LCPI227_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI227_2)
	pcalau12i	$a0, %pc_hi20(.LCPI227_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI227_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB227_20
	.p2align	4, , 16
.LBB227_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB227_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB227_22
.LBB227_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB227_19
# %bb.21:                               #   in Loop: Header=BB227_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB227_19
.LBB227_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB227_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB227_26
.LBB227_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB227_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB227_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI227_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI227_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB227_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end227:
	.size	_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc, .Lfunc_end227-_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc
.LCPI228_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI228_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI228_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI228_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI228_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI228_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB228_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 21
	blt	$s0, $a0, .LBB228_11
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -20
	addi.d	$s7, $s1, 80
	addi.d	$s8, $s1, 168
	addi.d	$fp, $s0, -21
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI228_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI228_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI228_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI228_1)
	pcalau12i	$a0, %pc_hi20(.LCPI228_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI228_2)
	pcalau12i	$a0, %pc_hi20(.LCPI228_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI228_4)
	pcalau12i	$a0, %pc_hi20(.LCPI228_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI228_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB228_4
	.p2align	4, , 16
.LBB228_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB228_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB228_22
.LBB228_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB228_5 Depth 2
                                        #     Child Loop BB228_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB228_5:                              #   Parent Loop BB228_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 21
	addi.w	$a0, $a0, 21
	addi.d	$a1, $a1, 168
	addi.d	$a3, $a3, 168
	bltu	$a2, $s6, .LBB228_5
# %bb.6:                                # %.loopexit25.us
                                        #   in Loop: Header=BB228_4 Depth=1
	bge	$a0, $s0, .LBB228_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB228_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB228_8:                              # %.preheader.us
                                        #   Parent Loop BB228_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB228_8
.LBB228_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB228_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB228_3
# %bb.10:                               #   in Loop: Header=BB228_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB228_3
.LBB228_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB228_18
# %bb.12:                               # %.preheader.us36.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI228_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI228_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI228_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI228_1)
	pcalau12i	$a0, %pc_hi20(.LCPI228_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI228_2)
	pcalau12i	$a0, %pc_hi20(.LCPI228_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI228_4)
	pcalau12i	$a0, %pc_hi20(.LCPI228_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI228_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB228_14
	.p2align	4, , 16
.LBB228_13:                             # %_Z9check_sumIdEvT_.exit.us35
                                        #   in Loop: Header=BB228_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB228_22
.LBB228_14:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB228_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB228_15:                             #   Parent Loop BB228_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB228_15
# %bb.16:                               # %.loopexit.us37
                                        #   in Loop: Header=BB228_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB228_13
# %bb.17:                               #   in Loop: Header=BB228_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB228_13
.LBB228_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI228_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI228_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI228_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI228_1)
	pcalau12i	$a0, %pc_hi20(.LCPI228_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI228_2)
	pcalau12i	$a0, %pc_hi20(.LCPI228_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI228_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB228_20
	.p2align	4, , 16
.LBB228_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB228_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB228_22
.LBB228_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB228_19
# %bb.21:                               #   in Loop: Header=BB228_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB228_19
.LBB228_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB228_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB228_26
.LBB228_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB228_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB228_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI228_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI228_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB228_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end228:
	.size	_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc, .Lfunc_end228-_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN13do_loop_testsILi19EdE7do_testEPKdPKc,"axG",@progbits,_ZN13do_loop_testsILi19EdE7do_testEPKdPKc,comdat
	.weak	_ZN13do_loop_testsILi19EdE7do_testEPKdPKc # -- Begin function _ZN13do_loop_testsILi19EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN13do_loop_testsILi19EdE7do_testEPKdPKc,@function
_ZN13do_loop_testsILi19EdE7do_testEPKdPKc: # @_ZN13do_loop_testsILi19EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN13do_loop_testsILi10EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1000
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1100
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1200
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1300
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1400
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1500
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1600
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1700
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1800
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end229:
	.size	_ZN13do_loop_testsILi19EdE7do_testEPKdPKc, .Lfunc_end229-_ZN13do_loop_testsILi19EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc
.LCPI230_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI230_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI230_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI230_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI230_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI230_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB230_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 20
	blt	$s0, $a0, .LBB230_11
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -19
	addi.d	$s7, $s1, 80
	addi.d	$s8, $s1, 160
	addi.d	$fp, $s0, -20
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI230_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI230_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI230_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI230_1)
	pcalau12i	$a0, %pc_hi20(.LCPI230_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI230_2)
	pcalau12i	$a0, %pc_hi20(.LCPI230_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI230_4)
	pcalau12i	$a0, %pc_hi20(.LCPI230_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI230_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB230_4
	.p2align	4, , 16
.LBB230_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB230_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB230_22
.LBB230_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB230_5 Depth 2
                                        #     Child Loop BB230_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB230_5:                              #   Parent Loop BB230_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 20
	addi.w	$a0, $a0, 20
	addi.d	$a1, $a1, 160
	addi.d	$a3, $a3, 160
	bltu	$a2, $s6, .LBB230_5
# %bb.6:                                # %.loopexit25.us
                                        #   in Loop: Header=BB230_4 Depth=1
	bge	$a0, $s0, .LBB230_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB230_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB230_8:                              # %.preheader.us
                                        #   Parent Loop BB230_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB230_8
.LBB230_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB230_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB230_3
# %bb.10:                               #   in Loop: Header=BB230_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB230_3
.LBB230_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB230_18
# %bb.12:                               # %.preheader.us36.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI230_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI230_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI230_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI230_1)
	pcalau12i	$a0, %pc_hi20(.LCPI230_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI230_2)
	pcalau12i	$a0, %pc_hi20(.LCPI230_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI230_4)
	pcalau12i	$a0, %pc_hi20(.LCPI230_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI230_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB230_14
	.p2align	4, , 16
.LBB230_13:                             # %_Z9check_sumIdEvT_.exit.us35
                                        #   in Loop: Header=BB230_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB230_22
.LBB230_14:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB230_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB230_15:                             #   Parent Loop BB230_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB230_15
# %bb.16:                               # %.loopexit.us37
                                        #   in Loop: Header=BB230_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB230_13
# %bb.17:                               #   in Loop: Header=BB230_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB230_13
.LBB230_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI230_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI230_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI230_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI230_1)
	pcalau12i	$a0, %pc_hi20(.LCPI230_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI230_2)
	pcalau12i	$a0, %pc_hi20(.LCPI230_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI230_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB230_20
	.p2align	4, , 16
.LBB230_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB230_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB230_22
.LBB230_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB230_19
# %bb.21:                               #   in Loop: Header=BB230_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB230_19
.LBB230_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB230_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB230_26
.LBB230_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB230_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB230_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI230_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI230_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB230_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end230:
	.size	_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc, .Lfunc_end230-_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc
.LCPI231_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI231_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI231_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI231_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI231_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI231_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB231_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 19
	blt	$s0, $a0, .LBB231_11
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -18
	addi.d	$s7, $s1, 72
	addi.d	$s8, $s1, 152
	addi.d	$fp, $s0, -19
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI231_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI231_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI231_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI231_1)
	pcalau12i	$a0, %pc_hi20(.LCPI231_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI231_2)
	pcalau12i	$a0, %pc_hi20(.LCPI231_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI231_4)
	pcalau12i	$a0, %pc_hi20(.LCPI231_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI231_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB231_4
	.p2align	4, , 16
.LBB231_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB231_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB231_22
.LBB231_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB231_5 Depth 2
                                        #     Child Loop BB231_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB231_5:                              #   Parent Loop BB231_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 19
	addi.w	$a0, $a0, 19
	addi.d	$a1, $a1, 152
	addi.d	$a3, $a3, 152
	bltu	$a2, $s6, .LBB231_5
# %bb.6:                                # %.loopexit25.us
                                        #   in Loop: Header=BB231_4 Depth=1
	bge	$a0, $s0, .LBB231_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB231_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB231_8:                              # %.preheader.us
                                        #   Parent Loop BB231_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB231_8
.LBB231_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB231_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB231_3
# %bb.10:                               #   in Loop: Header=BB231_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB231_3
.LBB231_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB231_18
# %bb.12:                               # %.preheader.us36.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI231_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI231_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI231_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI231_1)
	pcalau12i	$a0, %pc_hi20(.LCPI231_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI231_2)
	pcalau12i	$a0, %pc_hi20(.LCPI231_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI231_4)
	pcalau12i	$a0, %pc_hi20(.LCPI231_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI231_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB231_14
	.p2align	4, , 16
.LBB231_13:                             # %_Z9check_sumIdEvT_.exit.us35
                                        #   in Loop: Header=BB231_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB231_22
.LBB231_14:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB231_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB231_15:                             #   Parent Loop BB231_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB231_15
# %bb.16:                               # %.loopexit.us37
                                        #   in Loop: Header=BB231_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB231_13
# %bb.17:                               #   in Loop: Header=BB231_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB231_13
.LBB231_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI231_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI231_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI231_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI231_1)
	pcalau12i	$a0, %pc_hi20(.LCPI231_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI231_2)
	pcalau12i	$a0, %pc_hi20(.LCPI231_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI231_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB231_20
	.p2align	4, , 16
.LBB231_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB231_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB231_22
.LBB231_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB231_19
# %bb.21:                               #   in Loop: Header=BB231_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB231_19
.LBB231_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB231_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB231_26
.LBB231_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB231_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB231_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI231_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI231_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB231_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end231:
	.size	_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc, .Lfunc_end231-_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc
.LCPI232_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI232_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI232_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI232_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI232_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI232_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB232_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 18
	blt	$s0, $a0, .LBB232_11
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -17
	addi.d	$s7, $s1, 72
	addi.d	$s8, $s1, 144
	addi.d	$fp, $s0, -18
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI232_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI232_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI232_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI232_1)
	pcalau12i	$a0, %pc_hi20(.LCPI232_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI232_2)
	pcalau12i	$a0, %pc_hi20(.LCPI232_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI232_4)
	pcalau12i	$a0, %pc_hi20(.LCPI232_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI232_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB232_4
	.p2align	4, , 16
.LBB232_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB232_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB232_22
.LBB232_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB232_5 Depth 2
                                        #     Child Loop BB232_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB232_5:                              #   Parent Loop BB232_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 18
	addi.w	$a0, $a0, 18
	addi.d	$a1, $a1, 144
	addi.d	$a3, $a3, 144
	bltu	$a2, $s6, .LBB232_5
# %bb.6:                                # %.loopexit25.us
                                        #   in Loop: Header=BB232_4 Depth=1
	bge	$a0, $s0, .LBB232_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB232_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB232_8:                              # %.preheader.us
                                        #   Parent Loop BB232_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB232_8
.LBB232_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB232_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB232_3
# %bb.10:                               #   in Loop: Header=BB232_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB232_3
.LBB232_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB232_18
# %bb.12:                               # %.preheader.us36.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI232_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI232_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI232_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI232_1)
	pcalau12i	$a0, %pc_hi20(.LCPI232_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI232_2)
	pcalau12i	$a0, %pc_hi20(.LCPI232_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI232_4)
	pcalau12i	$a0, %pc_hi20(.LCPI232_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI232_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB232_14
	.p2align	4, , 16
.LBB232_13:                             # %_Z9check_sumIdEvT_.exit.us35
                                        #   in Loop: Header=BB232_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB232_22
.LBB232_14:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB232_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB232_15:                             #   Parent Loop BB232_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB232_15
# %bb.16:                               # %.loopexit.us37
                                        #   in Loop: Header=BB232_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB232_13
# %bb.17:                               #   in Loop: Header=BB232_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB232_13
.LBB232_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI232_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI232_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI232_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI232_1)
	pcalau12i	$a0, %pc_hi20(.LCPI232_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI232_2)
	pcalau12i	$a0, %pc_hi20(.LCPI232_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI232_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB232_20
	.p2align	4, , 16
.LBB232_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB232_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB232_22
.LBB232_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB232_19
# %bb.21:                               #   in Loop: Header=BB232_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB232_19
.LBB232_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB232_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB232_26
.LBB232_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB232_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB232_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI232_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI232_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB232_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end232:
	.size	_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc, .Lfunc_end232-_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc
.LCPI233_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI233_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI233_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI233_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI233_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI233_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB233_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 17
	blt	$s0, $a0, .LBB233_11
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -16
	addi.d	$s7, $s1, 64
	addi.d	$s8, $s1, 136
	addi.d	$fp, $s0, -17
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI233_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI233_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI233_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI233_1)
	pcalau12i	$a0, %pc_hi20(.LCPI233_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI233_2)
	pcalau12i	$a0, %pc_hi20(.LCPI233_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI233_4)
	pcalau12i	$a0, %pc_hi20(.LCPI233_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI233_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB233_4
	.p2align	4, , 16
.LBB233_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB233_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB233_22
.LBB233_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_5 Depth 2
                                        #     Child Loop BB233_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB233_5:                              #   Parent Loop BB233_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 17
	addi.w	$a0, $a0, 17
	addi.d	$a1, $a1, 136
	addi.d	$a3, $a3, 136
	bltu	$a2, $s6, .LBB233_5
# %bb.6:                                # %.loopexit25.us
                                        #   in Loop: Header=BB233_4 Depth=1
	bge	$a0, $s0, .LBB233_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB233_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB233_8:                              # %.preheader.us
                                        #   Parent Loop BB233_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB233_8
.LBB233_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB233_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB233_3
# %bb.10:                               #   in Loop: Header=BB233_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB233_3
.LBB233_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB233_18
# %bb.12:                               # %.preheader.us36.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI233_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI233_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI233_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI233_1)
	pcalau12i	$a0, %pc_hi20(.LCPI233_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI233_2)
	pcalau12i	$a0, %pc_hi20(.LCPI233_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI233_4)
	pcalau12i	$a0, %pc_hi20(.LCPI233_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI233_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB233_14
	.p2align	4, , 16
.LBB233_13:                             # %_Z9check_sumIdEvT_.exit.us35
                                        #   in Loop: Header=BB233_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB233_22
.LBB233_14:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB233_15:                             #   Parent Loop BB233_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB233_15
# %bb.16:                               # %.loopexit.us37
                                        #   in Loop: Header=BB233_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB233_13
# %bb.17:                               #   in Loop: Header=BB233_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB233_13
.LBB233_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI233_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI233_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI233_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI233_1)
	pcalau12i	$a0, %pc_hi20(.LCPI233_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI233_2)
	pcalau12i	$a0, %pc_hi20(.LCPI233_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI233_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB233_20
	.p2align	4, , 16
.LBB233_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB233_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB233_22
.LBB233_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB233_19
# %bb.21:                               #   in Loop: Header=BB233_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB233_19
.LBB233_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB233_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB233_26
.LBB233_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB233_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB233_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI233_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI233_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB233_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end233:
	.size	_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc, .Lfunc_end233-_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc
.LCPI234_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI234_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI234_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI234_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI234_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI234_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB234_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 16
	blt	$s0, $a0, .LBB234_11
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -15
	addi.d	$s7, $s1, 64
	addi.d	$s8, $s1, 128
	addi.d	$fp, $s0, -16
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI234_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI234_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI234_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI234_1)
	pcalau12i	$a0, %pc_hi20(.LCPI234_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI234_2)
	pcalau12i	$a0, %pc_hi20(.LCPI234_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI234_4)
	pcalau12i	$a0, %pc_hi20(.LCPI234_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI234_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB234_4
	.p2align	4, , 16
.LBB234_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB234_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB234_22
.LBB234_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB234_5 Depth 2
                                        #     Child Loop BB234_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB234_5:                              #   Parent Loop BB234_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 16
	addi.w	$a0, $a0, 16
	addi.d	$a1, $a1, 128
	addi.d	$a3, $a3, 128
	bltu	$a2, $s6, .LBB234_5
# %bb.6:                                # %.loopexit25.us
                                        #   in Loop: Header=BB234_4 Depth=1
	bge	$a0, $s0, .LBB234_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB234_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB234_8:                              # %.preheader.us
                                        #   Parent Loop BB234_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB234_8
.LBB234_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB234_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB234_3
# %bb.10:                               #   in Loop: Header=BB234_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB234_3
.LBB234_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB234_18
# %bb.12:                               # %.preheader.us36.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI234_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI234_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI234_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI234_1)
	pcalau12i	$a0, %pc_hi20(.LCPI234_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI234_2)
	pcalau12i	$a0, %pc_hi20(.LCPI234_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI234_4)
	pcalau12i	$a0, %pc_hi20(.LCPI234_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI234_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB234_14
	.p2align	4, , 16
.LBB234_13:                             # %_Z9check_sumIdEvT_.exit.us35
                                        #   in Loop: Header=BB234_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB234_22
.LBB234_14:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB234_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB234_15:                             #   Parent Loop BB234_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB234_15
# %bb.16:                               # %.loopexit.us37
                                        #   in Loop: Header=BB234_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB234_13
# %bb.17:                               #   in Loop: Header=BB234_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB234_13
.LBB234_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI234_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI234_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI234_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI234_1)
	pcalau12i	$a0, %pc_hi20(.LCPI234_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI234_2)
	pcalau12i	$a0, %pc_hi20(.LCPI234_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI234_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB234_20
	.p2align	4, , 16
.LBB234_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB234_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB234_22
.LBB234_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB234_19
# %bb.21:                               #   in Loop: Header=BB234_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB234_19
.LBB234_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB234_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB234_26
.LBB234_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB234_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB234_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI234_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI234_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB234_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end234:
	.size	_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc, .Lfunc_end234-_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc
.LCPI235_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI235_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI235_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI235_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI235_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI235_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB235_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 15
	blt	$s0, $a0, .LBB235_11
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -14
	addi.d	$s7, $s1, 56
	addi.d	$s8, $s1, 120
	addi.d	$fp, $s0, -15
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI235_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI235_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI235_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI235_1)
	pcalau12i	$a0, %pc_hi20(.LCPI235_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI235_2)
	pcalau12i	$a0, %pc_hi20(.LCPI235_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI235_4)
	pcalau12i	$a0, %pc_hi20(.LCPI235_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI235_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB235_4
	.p2align	4, , 16
.LBB235_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB235_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB235_22
.LBB235_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB235_5 Depth 2
                                        #     Child Loop BB235_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB235_5:                              #   Parent Loop BB235_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 15
	addi.w	$a0, $a0, 15
	addi.d	$a1, $a1, 120
	addi.d	$a3, $a3, 120
	bltu	$a2, $s6, .LBB235_5
# %bb.6:                                # %.loopexit25.us
                                        #   in Loop: Header=BB235_4 Depth=1
	bge	$a0, $s0, .LBB235_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB235_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB235_8:                              # %.preheader.us
                                        #   Parent Loop BB235_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB235_8
.LBB235_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB235_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB235_3
# %bb.10:                               #   in Loop: Header=BB235_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB235_3
.LBB235_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB235_18
# %bb.12:                               # %.preheader.us36.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI235_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI235_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI235_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI235_1)
	pcalau12i	$a0, %pc_hi20(.LCPI235_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI235_2)
	pcalau12i	$a0, %pc_hi20(.LCPI235_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI235_4)
	pcalau12i	$a0, %pc_hi20(.LCPI235_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI235_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB235_14
	.p2align	4, , 16
.LBB235_13:                             # %_Z9check_sumIdEvT_.exit.us35
                                        #   in Loop: Header=BB235_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB235_22
.LBB235_14:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB235_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB235_15:                             #   Parent Loop BB235_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB235_15
# %bb.16:                               # %.loopexit.us37
                                        #   in Loop: Header=BB235_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB235_13
# %bb.17:                               #   in Loop: Header=BB235_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB235_13
.LBB235_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI235_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI235_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI235_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI235_1)
	pcalau12i	$a0, %pc_hi20(.LCPI235_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI235_2)
	pcalau12i	$a0, %pc_hi20(.LCPI235_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI235_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB235_20
	.p2align	4, , 16
.LBB235_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB235_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB235_22
.LBB235_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB235_19
# %bb.21:                               #   in Loop: Header=BB235_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB235_19
.LBB235_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB235_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB235_26
.LBB235_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB235_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB235_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI235_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI235_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB235_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end235:
	.size	_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc, .Lfunc_end235-_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc
.LCPI236_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI236_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI236_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI236_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI236_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI236_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB236_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 14
	blt	$s0, $a0, .LBB236_11
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -13
	addi.d	$s7, $s1, 56
	addi.d	$s8, $s1, 112
	addi.d	$fp, $s0, -14
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI236_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI236_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI236_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI236_1)
	pcalau12i	$a0, %pc_hi20(.LCPI236_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI236_2)
	pcalau12i	$a0, %pc_hi20(.LCPI236_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI236_4)
	pcalau12i	$a0, %pc_hi20(.LCPI236_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI236_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB236_4
	.p2align	4, , 16
.LBB236_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB236_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB236_22
.LBB236_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB236_5 Depth 2
                                        #     Child Loop BB236_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB236_5:                              #   Parent Loop BB236_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 14
	addi.w	$a0, $a0, 14
	addi.d	$a1, $a1, 112
	addi.d	$a3, $a3, 112
	bltu	$a2, $s6, .LBB236_5
# %bb.6:                                # %.loopexit25.us
                                        #   in Loop: Header=BB236_4 Depth=1
	bge	$a0, $s0, .LBB236_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB236_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB236_8:                              # %.preheader.us
                                        #   Parent Loop BB236_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB236_8
.LBB236_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB236_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB236_3
# %bb.10:                               #   in Loop: Header=BB236_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB236_3
.LBB236_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB236_18
# %bb.12:                               # %.preheader.us36.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI236_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI236_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI236_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI236_1)
	pcalau12i	$a0, %pc_hi20(.LCPI236_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI236_2)
	pcalau12i	$a0, %pc_hi20(.LCPI236_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI236_4)
	pcalau12i	$a0, %pc_hi20(.LCPI236_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI236_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB236_14
	.p2align	4, , 16
.LBB236_13:                             # %_Z9check_sumIdEvT_.exit.us35
                                        #   in Loop: Header=BB236_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB236_22
.LBB236_14:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB236_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB236_15:                             #   Parent Loop BB236_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB236_15
# %bb.16:                               # %.loopexit.us37
                                        #   in Loop: Header=BB236_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB236_13
# %bb.17:                               #   in Loop: Header=BB236_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB236_13
.LBB236_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI236_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI236_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI236_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI236_1)
	pcalau12i	$a0, %pc_hi20(.LCPI236_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI236_2)
	pcalau12i	$a0, %pc_hi20(.LCPI236_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI236_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB236_20
	.p2align	4, , 16
.LBB236_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB236_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB236_22
.LBB236_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB236_19
# %bb.21:                               #   in Loop: Header=BB236_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB236_19
.LBB236_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB236_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB236_26
.LBB236_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB236_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB236_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI236_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI236_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB236_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end236:
	.size	_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc, .Lfunc_end236-_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc
.LCPI237_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI237_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI237_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI237_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI237_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI237_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB237_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 13
	blt	$s0, $a0, .LBB237_11
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -12
	addi.d	$s7, $s1, 48
	addi.d	$s8, $s1, 104
	addi.d	$fp, $s0, -13
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI237_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI237_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI237_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI237_1)
	pcalau12i	$a0, %pc_hi20(.LCPI237_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI237_2)
	pcalau12i	$a0, %pc_hi20(.LCPI237_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI237_4)
	pcalau12i	$a0, %pc_hi20(.LCPI237_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI237_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB237_4
	.p2align	4, , 16
.LBB237_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB237_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB237_22
.LBB237_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB237_5 Depth 2
                                        #     Child Loop BB237_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB237_5:                              #   Parent Loop BB237_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 13
	addi.w	$a0, $a0, 13
	addi.d	$a1, $a1, 104
	addi.d	$a3, $a3, 104
	bltu	$a2, $s6, .LBB237_5
# %bb.6:                                # %.loopexit25.us
                                        #   in Loop: Header=BB237_4 Depth=1
	bge	$a0, $s0, .LBB237_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB237_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB237_8:                              # %.preheader.us
                                        #   Parent Loop BB237_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB237_8
.LBB237_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB237_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB237_3
# %bb.10:                               #   in Loop: Header=BB237_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB237_3
.LBB237_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB237_18
# %bb.12:                               # %.preheader.us36.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI237_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI237_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI237_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI237_1)
	pcalau12i	$a0, %pc_hi20(.LCPI237_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI237_2)
	pcalau12i	$a0, %pc_hi20(.LCPI237_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI237_4)
	pcalau12i	$a0, %pc_hi20(.LCPI237_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI237_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB237_14
	.p2align	4, , 16
.LBB237_13:                             # %_Z9check_sumIdEvT_.exit.us35
                                        #   in Loop: Header=BB237_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB237_22
.LBB237_14:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB237_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB237_15:                             #   Parent Loop BB237_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB237_15
# %bb.16:                               # %.loopexit.us37
                                        #   in Loop: Header=BB237_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB237_13
# %bb.17:                               #   in Loop: Header=BB237_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB237_13
.LBB237_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI237_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI237_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI237_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI237_1)
	pcalau12i	$a0, %pc_hi20(.LCPI237_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI237_2)
	pcalau12i	$a0, %pc_hi20(.LCPI237_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI237_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB237_20
	.p2align	4, , 16
.LBB237_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB237_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB237_22
.LBB237_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB237_19
# %bb.21:                               #   in Loop: Header=BB237_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB237_19
.LBB237_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB237_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB237_26
.LBB237_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB237_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB237_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI237_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI237_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB237_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end237:
	.size	_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc, .Lfunc_end237-_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc
.LCPI238_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI238_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI238_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI238_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI238_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI238_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB238_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 12
	blt	$s0, $a0, .LBB238_11
# %bb.2:                                # %.preheader23.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -11
	addi.d	$s7, $s1, 48
	addi.d	$s8, $s1, 96
	addi.d	$fp, $s0, -12
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI238_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI238_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI238_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI238_1)
	pcalau12i	$a0, %pc_hi20(.LCPI238_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI238_2)
	pcalau12i	$a0, %pc_hi20(.LCPI238_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI238_4)
	pcalau12i	$a0, %pc_hi20(.LCPI238_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI238_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB238_4
	.p2align	4, , 16
.LBB238_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB238_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB238_22
.LBB238_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB238_5 Depth 2
                                        #     Child Loop BB238_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB238_5:                              #   Parent Loop BB238_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 12
	addi.w	$a0, $a0, 12
	addi.d	$a1, $a1, 96
	addi.d	$a3, $a3, 96
	bltu	$a2, $s6, .LBB238_5
# %bb.6:                                # %.loopexit24.us
                                        #   in Loop: Header=BB238_4 Depth=1
	bge	$a0, $s0, .LBB238_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB238_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB238_8:                              # %.preheader.us
                                        #   Parent Loop BB238_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB238_8
.LBB238_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB238_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB238_3
# %bb.10:                               #   in Loop: Header=BB238_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB238_3
.LBB238_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB238_18
# %bb.12:                               # %.preheader.us35.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI238_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI238_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI238_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI238_1)
	pcalau12i	$a0, %pc_hi20(.LCPI238_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI238_2)
	pcalau12i	$a0, %pc_hi20(.LCPI238_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI238_4)
	pcalau12i	$a0, %pc_hi20(.LCPI238_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI238_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB238_14
	.p2align	4, , 16
.LBB238_13:                             # %_Z9check_sumIdEvT_.exit.us34
                                        #   in Loop: Header=BB238_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB238_22
.LBB238_14:                             # %.preheader.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB238_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB238_15:                             #   Parent Loop BB238_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB238_15
# %bb.16:                               # %.loopexit.us36
                                        #   in Loop: Header=BB238_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB238_13
# %bb.17:                               #   in Loop: Header=BB238_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB238_13
.LBB238_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI238_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI238_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI238_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI238_1)
	pcalau12i	$a0, %pc_hi20(.LCPI238_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI238_2)
	pcalau12i	$a0, %pc_hi20(.LCPI238_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI238_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB238_20
	.p2align	4, , 16
.LBB238_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB238_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB238_22
.LBB238_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB238_19
# %bb.21:                               #   in Loop: Header=BB238_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB238_19
.LBB238_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB238_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB238_26
.LBB238_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB238_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB238_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI238_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI238_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB238_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end238:
	.size	_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc, .Lfunc_end238-_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN13do_loop_testsILi10EdE7do_testEPKdPKc,"axG",@progbits,_ZN13do_loop_testsILi10EdE7do_testEPKdPKc,comdat
	.weak	_ZN13do_loop_testsILi10EdE7do_testEPKdPKc # -- Begin function _ZN13do_loop_testsILi10EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN13do_loop_testsILi10EdE7do_testEPKdPKc,@function
_ZN13do_loop_testsILi10EdE7do_testEPKdPKc: # @_ZN13do_loop_testsILi10EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s0, $a0, %pc_lo12(temp_string)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	move	$a0, $fp
	move	$a1, $s1
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 100
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 200
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 300
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 400
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 500
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 600
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 700
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 800
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 900
	move	$a0, $fp
	move	$a1, $s1
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end239:
	.size	_ZN13do_loop_testsILi10EdE7do_testEPKdPKc, .Lfunc_end239-_ZN13do_loop_testsILi10EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc
.LCPI240_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI240_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI240_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI240_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI240_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI240_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB240_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 11
	blt	$s0, $a0, .LBB240_11
# %bb.2:                                # %.preheader23.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -10
	addi.d	$s7, $s1, 40
	addi.d	$s8, $s1, 88
	addi.d	$fp, $s0, -11
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI240_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI240_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI240_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI240_1)
	pcalau12i	$a0, %pc_hi20(.LCPI240_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI240_2)
	pcalau12i	$a0, %pc_hi20(.LCPI240_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI240_4)
	pcalau12i	$a0, %pc_hi20(.LCPI240_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI240_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB240_4
	.p2align	4, , 16
.LBB240_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB240_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB240_22
.LBB240_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB240_5 Depth 2
                                        #     Child Loop BB240_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB240_5:                              #   Parent Loop BB240_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 11
	addi.w	$a0, $a0, 11
	addi.d	$a1, $a1, 88
	addi.d	$a3, $a3, 88
	bltu	$a2, $s6, .LBB240_5
# %bb.6:                                # %.loopexit24.us
                                        #   in Loop: Header=BB240_4 Depth=1
	bge	$a0, $s0, .LBB240_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB240_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB240_8:                              # %.preheader.us
                                        #   Parent Loop BB240_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB240_8
.LBB240_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB240_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB240_3
# %bb.10:                               #   in Loop: Header=BB240_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB240_3
.LBB240_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB240_18
# %bb.12:                               # %.preheader.us35.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI240_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI240_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI240_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI240_1)
	pcalau12i	$a0, %pc_hi20(.LCPI240_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI240_2)
	pcalau12i	$a0, %pc_hi20(.LCPI240_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI240_4)
	pcalau12i	$a0, %pc_hi20(.LCPI240_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI240_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB240_14
	.p2align	4, , 16
.LBB240_13:                             # %_Z9check_sumIdEvT_.exit.us34
                                        #   in Loop: Header=BB240_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB240_22
.LBB240_14:                             # %.preheader.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB240_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB240_15:                             #   Parent Loop BB240_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB240_15
# %bb.16:                               # %.loopexit.us36
                                        #   in Loop: Header=BB240_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB240_13
# %bb.17:                               #   in Loop: Header=BB240_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB240_13
.LBB240_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI240_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI240_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI240_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI240_1)
	pcalau12i	$a0, %pc_hi20(.LCPI240_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI240_2)
	pcalau12i	$a0, %pc_hi20(.LCPI240_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI240_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB240_20
	.p2align	4, , 16
.LBB240_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB240_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB240_22
.LBB240_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB240_19
# %bb.21:                               #   in Loop: Header=BB240_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB240_19
.LBB240_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB240_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB240_26
.LBB240_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB240_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB240_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI240_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI240_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB240_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end240:
	.size	_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc, .Lfunc_end240-_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc
.LCPI241_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI241_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI241_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI241_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI241_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI241_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB241_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 10
	blt	$s0, $a0, .LBB241_11
# %bb.2:                                # %.preheader23.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -9
	addi.d	$s7, $s1, 40
	addi.d	$s8, $s1, 80
	addi.d	$fp, $s0, -10
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI241_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI241_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI241_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI241_1)
	pcalau12i	$a0, %pc_hi20(.LCPI241_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI241_2)
	pcalau12i	$a0, %pc_hi20(.LCPI241_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI241_4)
	pcalau12i	$a0, %pc_hi20(.LCPI241_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI241_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB241_4
	.p2align	4, , 16
.LBB241_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB241_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB241_22
.LBB241_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB241_5 Depth 2
                                        #     Child Loop BB241_8 Depth 2
	move	$a0, $zero
	move	$a3, $zero
	move	$a4, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB241_5:                              #   Parent Loop BB241_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a6, $a3
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a3, $a3, 10
	addi.w	$a0, $a0, 10
	addi.d	$a2, $a2, 80
	addi.d	$a4, $a4, 80
	bltu	$a3, $s6, .LBB241_5
# %bb.6:                                # %.loopexit24.us
                                        #   in Loop: Header=BB241_4 Depth=1
	bge	$a0, $s0, .LBB241_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB241_4 Depth=1
	sub.d	$a0, $fp, $a6
	.p2align	4, , 16
.LBB241_8:                              # %.preheader.us
                                        #   Parent Loop BB241_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a5, $a5, 8
	bnez	$a0, .LBB241_8
.LBB241_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB241_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB241_3
# %bb.10:                               #   in Loop: Header=BB241_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB241_3
.LBB241_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB241_18
# %bb.12:                               # %.preheader.us35.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI241_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI241_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI241_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI241_1)
	pcalau12i	$a0, %pc_hi20(.LCPI241_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI241_2)
	pcalau12i	$a0, %pc_hi20(.LCPI241_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI241_4)
	pcalau12i	$a0, %pc_hi20(.LCPI241_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI241_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB241_14
	.p2align	4, , 16
.LBB241_13:                             # %_Z9check_sumIdEvT_.exit.us34
                                        #   in Loop: Header=BB241_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB241_22
.LBB241_14:                             # %.preheader.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB241_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB241_15:                             #   Parent Loop BB241_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB241_15
# %bb.16:                               # %.loopexit.us36
                                        #   in Loop: Header=BB241_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB241_13
# %bb.17:                               #   in Loop: Header=BB241_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB241_13
.LBB241_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI241_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI241_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI241_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI241_1)
	pcalau12i	$a0, %pc_hi20(.LCPI241_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI241_2)
	pcalau12i	$a0, %pc_hi20(.LCPI241_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI241_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB241_20
	.p2align	4, , 16
.LBB241_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB241_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB241_22
.LBB241_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB241_19
# %bb.21:                               #   in Loop: Header=BB241_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB241_19
.LBB241_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB241_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB241_26
.LBB241_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB241_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB241_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI241_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI241_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB241_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end241:
	.size	_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc, .Lfunc_end241-_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc
.LCPI242_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI242_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI242_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI242_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI242_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI242_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB242_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 9
	blt	$s0, $a0, .LBB242_11
# %bb.2:                                # %.preheader23.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -8
	addi.d	$s7, $s1, 32
	addi.d	$s8, $s1, 72
	addi.d	$fp, $s0, -9
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI242_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI242_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI242_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI242_1)
	pcalau12i	$a0, %pc_hi20(.LCPI242_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI242_2)
	pcalau12i	$a0, %pc_hi20(.LCPI242_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI242_4)
	pcalau12i	$a0, %pc_hi20(.LCPI242_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI242_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB242_4
	.p2align	4, , 16
.LBB242_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB242_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB242_22
.LBB242_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB242_5 Depth 2
                                        #     Child Loop BB242_8 Depth 2
	move	$a0, $zero
	move	$a3, $zero
	move	$a4, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB242_5:                              #   Parent Loop BB242_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a6, $a3
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a3, $a3, 9
	addi.w	$a0, $a0, 9
	addi.d	$a2, $a2, 72
	addi.d	$a4, $a4, 72
	bltu	$a3, $s6, .LBB242_5
# %bb.6:                                # %.loopexit24.us
                                        #   in Loop: Header=BB242_4 Depth=1
	bge	$a0, $s0, .LBB242_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB242_4 Depth=1
	sub.d	$a0, $fp, $a6
	.p2align	4, , 16
.LBB242_8:                              # %.preheader.us
                                        #   Parent Loop BB242_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a5, $a5, 8
	bnez	$a0, .LBB242_8
.LBB242_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB242_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB242_3
# %bb.10:                               #   in Loop: Header=BB242_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB242_3
.LBB242_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB242_18
# %bb.12:                               # %.preheader.us35.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI242_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI242_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI242_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI242_1)
	pcalau12i	$a0, %pc_hi20(.LCPI242_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI242_2)
	pcalau12i	$a0, %pc_hi20(.LCPI242_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI242_4)
	pcalau12i	$a0, %pc_hi20(.LCPI242_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI242_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB242_14
	.p2align	4, , 16
.LBB242_13:                             # %_Z9check_sumIdEvT_.exit.us34
                                        #   in Loop: Header=BB242_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB242_22
.LBB242_14:                             # %.preheader.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB242_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB242_15:                             #   Parent Loop BB242_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB242_15
# %bb.16:                               # %.loopexit.us36
                                        #   in Loop: Header=BB242_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB242_13
# %bb.17:                               #   in Loop: Header=BB242_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB242_13
.LBB242_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI242_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI242_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI242_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI242_1)
	pcalau12i	$a0, %pc_hi20(.LCPI242_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI242_2)
	pcalau12i	$a0, %pc_hi20(.LCPI242_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI242_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB242_20
	.p2align	4, , 16
.LBB242_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB242_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB242_22
.LBB242_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB242_19
# %bb.21:                               #   in Loop: Header=BB242_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB242_19
.LBB242_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB242_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB242_26
.LBB242_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB242_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB242_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI242_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI242_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB242_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end242:
	.size	_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc, .Lfunc_end242-_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc
.LCPI243_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI243_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI243_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI243_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI243_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI243_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB243_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 8
	blt	$s0, $a0, .LBB243_11
# %bb.2:                                # %.preheader23.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -7
	addi.d	$s7, $s1, 32
	addi.d	$s8, $s1, 64
	addi.d	$fp, $s0, -8
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI243_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI243_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI243_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI243_1)
	pcalau12i	$a0, %pc_hi20(.LCPI243_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI243_2)
	pcalau12i	$a0, %pc_hi20(.LCPI243_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI243_4)
	pcalau12i	$a0, %pc_hi20(.LCPI243_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI243_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB243_4
	.p2align	4, , 16
.LBB243_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB243_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB243_22
.LBB243_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB243_5 Depth 2
                                        #     Child Loop BB243_8 Depth 2
	move	$a0, $zero
	move	$a3, $zero
	move	$a4, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB243_5:                              #   Parent Loop BB243_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a6, $a3
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a3, $a3, 8
	addi.w	$a0, $a0, 8
	addi.d	$a2, $a2, 64
	addi.d	$a4, $a4, 64
	bltu	$a3, $s6, .LBB243_5
# %bb.6:                                # %.loopexit24.us
                                        #   in Loop: Header=BB243_4 Depth=1
	bge	$a0, $s0, .LBB243_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB243_4 Depth=1
	sub.d	$a0, $fp, $a6
	.p2align	4, , 16
.LBB243_8:                              # %.preheader.us
                                        #   Parent Loop BB243_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a5, $a5, 8
	bnez	$a0, .LBB243_8
.LBB243_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB243_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB243_3
# %bb.10:                               #   in Loop: Header=BB243_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB243_3
.LBB243_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB243_18
# %bb.12:                               # %.preheader.us35.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI243_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI243_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI243_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI243_1)
	pcalau12i	$a0, %pc_hi20(.LCPI243_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI243_2)
	pcalau12i	$a0, %pc_hi20(.LCPI243_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI243_4)
	pcalau12i	$a0, %pc_hi20(.LCPI243_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI243_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB243_14
	.p2align	4, , 16
.LBB243_13:                             # %_Z9check_sumIdEvT_.exit.us34
                                        #   in Loop: Header=BB243_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB243_22
.LBB243_14:                             # %.preheader.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB243_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB243_15:                             #   Parent Loop BB243_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB243_15
# %bb.16:                               # %.loopexit.us36
                                        #   in Loop: Header=BB243_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB243_13
# %bb.17:                               #   in Loop: Header=BB243_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB243_13
.LBB243_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI243_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI243_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI243_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI243_1)
	pcalau12i	$a0, %pc_hi20(.LCPI243_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI243_2)
	pcalau12i	$a0, %pc_hi20(.LCPI243_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI243_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB243_20
	.p2align	4, , 16
.LBB243_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB243_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB243_22
.LBB243_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB243_19
# %bb.21:                               #   in Loop: Header=BB243_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB243_19
.LBB243_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB243_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB243_26
.LBB243_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB243_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB243_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI243_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI243_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB243_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end243:
	.size	_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc, .Lfunc_end243-_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc
.LCPI244_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI244_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI244_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI244_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI244_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI244_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB244_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 7
	blt	$s0, $a0, .LBB244_11
# %bb.2:                                # %.preheader23.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -6
	addi.d	$s7, $s1, 24
	addi.d	$s8, $s1, 56
	addi.d	$fp, $s0, -7
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI244_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI244_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI244_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI244_1)
	pcalau12i	$a0, %pc_hi20(.LCPI244_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI244_2)
	pcalau12i	$a0, %pc_hi20(.LCPI244_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI244_4)
	pcalau12i	$a0, %pc_hi20(.LCPI244_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI244_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB244_4
	.p2align	4, , 16
.LBB244_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB244_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB244_22
.LBB244_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB244_5 Depth 2
                                        #     Child Loop BB244_8 Depth 2
	move	$a0, $zero
	move	$a3, $zero
	move	$a4, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB244_5:                              #   Parent Loop BB244_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a6, $a3
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a3, $a3, 7
	addi.w	$a0, $a0, 7
	addi.d	$a2, $a2, 56
	addi.d	$a4, $a4, 56
	bltu	$a3, $s6, .LBB244_5
# %bb.6:                                # %.loopexit24.us
                                        #   in Loop: Header=BB244_4 Depth=1
	bge	$a0, $s0, .LBB244_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB244_4 Depth=1
	sub.d	$a0, $fp, $a6
	.p2align	4, , 16
.LBB244_8:                              # %.preheader.us
                                        #   Parent Loop BB244_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a5, $a5, 8
	bnez	$a0, .LBB244_8
.LBB244_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB244_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB244_3
# %bb.10:                               #   in Loop: Header=BB244_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB244_3
.LBB244_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB244_18
# %bb.12:                               # %.preheader.us35.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI244_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI244_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI244_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI244_1)
	pcalau12i	$a0, %pc_hi20(.LCPI244_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI244_2)
	pcalau12i	$a0, %pc_hi20(.LCPI244_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI244_4)
	pcalau12i	$a0, %pc_hi20(.LCPI244_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI244_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB244_14
	.p2align	4, , 16
.LBB244_13:                             # %_Z9check_sumIdEvT_.exit.us34
                                        #   in Loop: Header=BB244_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB244_22
.LBB244_14:                             # %.preheader.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB244_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB244_15:                             #   Parent Loop BB244_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB244_15
# %bb.16:                               # %.loopexit.us36
                                        #   in Loop: Header=BB244_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB244_13
# %bb.17:                               #   in Loop: Header=BB244_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB244_13
.LBB244_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI244_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI244_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI244_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI244_1)
	pcalau12i	$a0, %pc_hi20(.LCPI244_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI244_2)
	pcalau12i	$a0, %pc_hi20(.LCPI244_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI244_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB244_20
	.p2align	4, , 16
.LBB244_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB244_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB244_22
.LBB244_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB244_19
# %bb.21:                               #   in Loop: Header=BB244_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB244_19
.LBB244_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB244_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB244_26
.LBB244_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB244_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB244_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI244_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI244_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB244_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end244:
	.size	_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc, .Lfunc_end244-_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc
.LCPI245_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI245_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI245_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI245_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI245_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI245_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB245_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 6
	blt	$s0, $a0, .LBB245_11
# %bb.2:                                # %.preheader23.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -5
	addi.d	$s7, $s1, 24
	addi.d	$s8, $s1, 48
	addi.d	$fp, $s0, -6
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI245_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI245_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI245_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI245_1)
	pcalau12i	$a0, %pc_hi20(.LCPI245_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI245_2)
	pcalau12i	$a0, %pc_hi20(.LCPI245_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI245_4)
	pcalau12i	$a0, %pc_hi20(.LCPI245_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI245_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB245_4
	.p2align	4, , 16
.LBB245_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB245_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB245_22
.LBB245_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB245_5 Depth 2
                                        #     Child Loop BB245_8 Depth 2
	move	$a0, $zero
	move	$a3, $zero
	move	$a4, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB245_5:                              #   Parent Loop BB245_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a6, $a3
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a3, $a3, 6
	addi.d	$a2, $a2, 48
	addi.w	$a0, $a0, 6
	addi.d	$a4, $a4, 48
	bltu	$a3, $s6, .LBB245_5
# %bb.6:                                # %.loopexit24.us
                                        #   in Loop: Header=BB245_4 Depth=1
	bge	$a0, $s0, .LBB245_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB245_4 Depth=1
	sub.d	$a0, $fp, $a6
	.p2align	4, , 16
.LBB245_8:                              # %.preheader.us
                                        #   Parent Loop BB245_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a5, $a5, 8
	bnez	$a0, .LBB245_8
.LBB245_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB245_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB245_3
# %bb.10:                               #   in Loop: Header=BB245_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB245_3
.LBB245_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB245_18
# %bb.12:                               # %.preheader.us35.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI245_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI245_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI245_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI245_1)
	pcalau12i	$a0, %pc_hi20(.LCPI245_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI245_2)
	pcalau12i	$a0, %pc_hi20(.LCPI245_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI245_4)
	pcalau12i	$a0, %pc_hi20(.LCPI245_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI245_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB245_14
	.p2align	4, , 16
.LBB245_13:                             # %_Z9check_sumIdEvT_.exit.us34
                                        #   in Loop: Header=BB245_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB245_22
.LBB245_14:                             # %.preheader.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB245_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB245_15:                             #   Parent Loop BB245_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB245_15
# %bb.16:                               # %.loopexit.us36
                                        #   in Loop: Header=BB245_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB245_13
# %bb.17:                               #   in Loop: Header=BB245_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB245_13
.LBB245_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI245_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI245_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI245_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI245_1)
	pcalau12i	$a0, %pc_hi20(.LCPI245_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI245_2)
	pcalau12i	$a0, %pc_hi20(.LCPI245_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI245_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB245_20
	.p2align	4, , 16
.LBB245_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB245_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB245_22
.LBB245_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB245_19
# %bb.21:                               #   in Loop: Header=BB245_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB245_19
.LBB245_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB245_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB245_26
.LBB245_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB245_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB245_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI245_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI245_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB245_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end245:
	.size	_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc, .Lfunc_end245-_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc
.LCPI246_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI246_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI246_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI246_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI246_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI246_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB246_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 5
	blt	$s0, $a0, .LBB246_11
# %bb.2:                                # %.preheader23.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -4
	addi.d	$s7, $s1, 16
	addi.d	$s8, $s1, 40
	addi.d	$fp, $s0, -5
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI246_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI246_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI246_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI246_1)
	pcalau12i	$a0, %pc_hi20(.LCPI246_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI246_2)
	pcalau12i	$a0, %pc_hi20(.LCPI246_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI246_4)
	pcalau12i	$a0, %pc_hi20(.LCPI246_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI246_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB246_4
	.p2align	4, , 16
.LBB246_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB246_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB246_22
.LBB246_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB246_5 Depth 2
                                        #     Child Loop BB246_8 Depth 2
	move	$a0, $zero
	move	$a3, $zero
	move	$a4, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB246_5:                              #   Parent Loop BB246_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a6, $a3
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a3, $a3, 5
	addi.d	$a2, $a2, 40
	addi.w	$a0, $a0, 5
	addi.d	$a4, $a4, 40
	bltu	$a3, $s6, .LBB246_5
# %bb.6:                                # %.loopexit24.us
                                        #   in Loop: Header=BB246_4 Depth=1
	bge	$a0, $s0, .LBB246_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB246_4 Depth=1
	sub.d	$a0, $fp, $a6
	.p2align	4, , 16
.LBB246_8:                              # %.preheader.us
                                        #   Parent Loop BB246_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a5, $a5, 8
	bnez	$a0, .LBB246_8
.LBB246_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB246_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB246_3
# %bb.10:                               #   in Loop: Header=BB246_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB246_3
.LBB246_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB246_18
# %bb.12:                               # %.preheader.us35.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI246_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI246_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI246_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI246_1)
	pcalau12i	$a0, %pc_hi20(.LCPI246_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI246_2)
	pcalau12i	$a0, %pc_hi20(.LCPI246_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI246_4)
	pcalau12i	$a0, %pc_hi20(.LCPI246_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI246_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB246_14
	.p2align	4, , 16
.LBB246_13:                             # %_Z9check_sumIdEvT_.exit.us34
                                        #   in Loop: Header=BB246_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB246_22
.LBB246_14:                             # %.preheader.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB246_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB246_15:                             #   Parent Loop BB246_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB246_15
# %bb.16:                               # %.loopexit.us36
                                        #   in Loop: Header=BB246_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB246_13
# %bb.17:                               #   in Loop: Header=BB246_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB246_13
.LBB246_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI246_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI246_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI246_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI246_1)
	pcalau12i	$a0, %pc_hi20(.LCPI246_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI246_2)
	pcalau12i	$a0, %pc_hi20(.LCPI246_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI246_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB246_20
	.p2align	4, , 16
.LBB246_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB246_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB246_22
.LBB246_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB246_19
# %bb.21:                               #   in Loop: Header=BB246_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB246_19
.LBB246_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB246_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB246_26
.LBB246_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB246_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB246_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI246_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI246_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB246_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end246:
	.size	_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc, .Lfunc_end246-_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc
.LCPI247_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI247_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI247_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI247_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI247_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI247_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB247_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 4
	blt	$s0, $a0, .LBB247_11
# %bb.2:                                # %.preheader23.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -3
	addi.d	$s7, $s1, 16
	addi.d	$s8, $s1, 32
	addi.d	$fp, $s0, -4
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI247_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI247_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI247_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI247_1)
	pcalau12i	$a0, %pc_hi20(.LCPI247_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI247_2)
	pcalau12i	$a0, %pc_hi20(.LCPI247_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI247_4)
	pcalau12i	$a0, %pc_hi20(.LCPI247_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI247_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB247_4
	.p2align	4, , 16
.LBB247_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB247_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB247_22
.LBB247_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB247_5 Depth 2
                                        #     Child Loop BB247_8 Depth 2
	move	$a0, $zero
	move	$a3, $zero
	move	$a4, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB247_5:                              #   Parent Loop BB247_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a6, $a3
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a3, $a3, 4
	addi.d	$a2, $a2, 32
	addi.w	$a0, $a0, 4
	addi.d	$a4, $a4, 32
	bltu	$a3, $s6, .LBB247_5
# %bb.6:                                # %.loopexit24.us
                                        #   in Loop: Header=BB247_4 Depth=1
	bge	$a0, $s0, .LBB247_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB247_4 Depth=1
	sub.d	$a0, $fp, $a6
	.p2align	4, , 16
.LBB247_8:                              # %.preheader.us
                                        #   Parent Loop BB247_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a5, $a5, 8
	bnez	$a0, .LBB247_8
.LBB247_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB247_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB247_3
# %bb.10:                               #   in Loop: Header=BB247_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB247_3
.LBB247_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB247_18
# %bb.12:                               # %.preheader.us35.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI247_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI247_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI247_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI247_1)
	pcalau12i	$a0, %pc_hi20(.LCPI247_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI247_2)
	pcalau12i	$a0, %pc_hi20(.LCPI247_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI247_4)
	pcalau12i	$a0, %pc_hi20(.LCPI247_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI247_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB247_14
	.p2align	4, , 16
.LBB247_13:                             # %_Z9check_sumIdEvT_.exit.us34
                                        #   in Loop: Header=BB247_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB247_22
.LBB247_14:                             # %.preheader.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB247_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB247_15:                             #   Parent Loop BB247_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB247_15
# %bb.16:                               # %.loopexit.us36
                                        #   in Loop: Header=BB247_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB247_13
# %bb.17:                               #   in Loop: Header=BB247_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB247_13
.LBB247_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI247_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI247_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI247_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI247_1)
	pcalau12i	$a0, %pc_hi20(.LCPI247_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI247_2)
	pcalau12i	$a0, %pc_hi20(.LCPI247_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI247_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB247_20
	.p2align	4, , 16
.LBB247_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB247_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB247_22
.LBB247_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB247_19
# %bb.21:                               #   in Loop: Header=BB247_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB247_19
.LBB247_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB247_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB247_26
.LBB247_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB247_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB247_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI247_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI247_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB247_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end247:
	.size	_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc, .Lfunc_end247-_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc
.LCPI248_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI248_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI248_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI248_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI248_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI248_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB248_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 3
	blt	$s0, $a0, .LBB248_11
# %bb.2:                                # %.preheader23.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -2
	addi.d	$s7, $s1, 16
	addi.d	$s8, $s1, 24
	addi.d	$fp, $s0, -3
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI248_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI248_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI248_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI248_1)
	pcalau12i	$a0, %pc_hi20(.LCPI248_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI248_2)
	pcalau12i	$a0, %pc_hi20(.LCPI248_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI248_4)
	pcalau12i	$a0, %pc_hi20(.LCPI248_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI248_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB248_4
	.p2align	4, , 16
.LBB248_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB248_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB248_22
.LBB248_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB248_5 Depth 2
                                        #     Child Loop BB248_8 Depth 2
	move	$a0, $zero
	move	$a4, $zero
	move	$a5, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB248_5:                              #   Parent Loop BB248_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a6, $a4
	move	$a3, $a5
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a4, $a4, 3
	addi.d	$a2, $a2, 24
	addi.w	$a0, $a0, 3
	addi.d	$a5, $a5, 24
	bltu	$a4, $s6, .LBB248_5
# %bb.6:                                # %.loopexit24.us
                                        #   in Loop: Header=BB248_4 Depth=1
	bge	$a0, $s0, .LBB248_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB248_4 Depth=1
	sub.d	$a0, $fp, $a6
	.p2align	4, , 16
.LBB248_8:                              # %.preheader.us
                                        #   Parent Loop BB248_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 8
	bnez	$a0, .LBB248_8
.LBB248_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB248_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB248_3
# %bb.10:                               #   in Loop: Header=BB248_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB248_3
.LBB248_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB248_18
# %bb.12:                               # %.preheader.us35.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI248_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI248_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI248_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI248_1)
	pcalau12i	$a0, %pc_hi20(.LCPI248_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI248_2)
	pcalau12i	$a0, %pc_hi20(.LCPI248_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI248_4)
	pcalau12i	$a0, %pc_hi20(.LCPI248_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI248_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB248_14
	.p2align	4, , 16
.LBB248_13:                             # %_Z9check_sumIdEvT_.exit.us34
                                        #   in Loop: Header=BB248_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB248_22
.LBB248_14:                             # %.preheader.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB248_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB248_15:                             #   Parent Loop BB248_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB248_15
# %bb.16:                               # %.loopexit.us36
                                        #   in Loop: Header=BB248_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB248_13
# %bb.17:                               #   in Loop: Header=BB248_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB248_13
.LBB248_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI248_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI248_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI248_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI248_1)
	pcalau12i	$a0, %pc_hi20(.LCPI248_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI248_2)
	pcalau12i	$a0, %pc_hi20(.LCPI248_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI248_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB248_20
	.p2align	4, , 16
.LBB248_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB248_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB248_22
.LBB248_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB248_19
# %bb.21:                               #   in Loop: Header=BB248_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB248_19
.LBB248_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB248_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB248_26
.LBB248_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB248_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB248_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI248_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI248_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB248_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end248:
	.size	_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc, .Lfunc_end248-_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc
.LCPI249_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI249_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI249_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI249_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI249_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI249_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 112                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 104                  # 8-byte Folded Spill
	fst.d	$fs2, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 72                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB249_20
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 2
	blt	$s0, $a0, .LBB249_11
# %bb.2:                                # %.preheader23.us.preheader
	move	$s5, $zero
	addi.w	$s6, $s0, -1
	addi.d	$s7, $s1, 8
	addi.d	$s8, $s1, 16
	addi.d	$fp, $s0, -2
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI249_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI249_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI249_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI249_1)
	pcalau12i	$a0, %pc_hi20(.LCPI249_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI249_2)
	pcalau12i	$a0, %pc_hi20(.LCPI249_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI249_4)
	pcalau12i	$a0, %pc_hi20(.LCPI249_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI249_3)
	pcalau12i	$s3, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB249_4
	.p2align	4, , 16
.LBB249_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB249_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB249_20
.LBB249_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB249_5 Depth 2
                                        #     Child Loop BB249_8 Depth 2
	move	$a2, $zero
	move	$a4, $zero
	move	$a5, $s8
	move	$a3, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB249_5:                              #   Parent Loop BB249_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a6, $a4
	move	$a0, $a5
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a4, $a4, 2
	addi.d	$a3, $a3, 16
	addi.w	$a2, $a2, 2
	addi.d	$a5, $a5, 16
	bltu	$a4, $s6, .LBB249_5
# %bb.6:                                # %.loopexit24.us
                                        #   in Loop: Header=BB249_4 Depth=1
	bge	$a2, $s0, .LBB249_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB249_4 Depth=1
	sub.d	$a2, $fp, $a6
	.p2align	4, , 16
.LBB249_8:                              # %.preheader.us
                                        #   Parent Loop BB249_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, -1
	addi.d	$a0, $a0, 8
	bnez	$a2, .LBB249_8
.LBB249_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB249_4 Depth=1
	fld.d	$fa1, $s3, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB249_3
# %bb.10:                               #   in Loop: Header=BB249_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB249_3
.LBB249_11:                             # %.lr.ph.split
	pcalau12i	$s5, %pc_hi20(init_value)
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	move	$fp, $zero
	ori	$a0, $zero, 1
	bne	$s0, $a0, .LBB249_16
# %bb.12:                               # %.preheader.us35.preheader
	ori	$a0, $zero, 0
	lu32i.d	$a0, -516992
	lu52i.d	$a0, $a0, 1036
	vreplgr2vr.d	$vr4, $a0
	ori	$a0, $zero, 0
	lu32i.d	$a0, -393216
	lu52i.d	$a0, $a0, -1022
	vreplgr2vr.d	$vr5, $a0
	ori	$a0, $zero, 0
	lu32i.d	$a0, -268678
	lu52i.d	$a0, $a0, 1042
	vreplgr2vr.d	$vr6, $a0
	pcalau12i	$a0, %pc_hi20(.LCPI249_2)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI249_2)
	pcalau12i	$a0, %pc_hi20(.LCPI249_4)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI249_4)
	pcalau12i	$a0, %pc_hi20(.LCPI249_3)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI249_3)
	movgr2fr.d	$fs3, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	vst	$vr5, $sp, 32                   # 16-byte Folded Spill
	vst	$vr6, $sp, 16                   # 16-byte Folded Spill
	b	.LBB249_14
	.p2align	4, , 16
.LBB249_13:                             # %_Z9check_sumIdEvT_.exit.us34
                                        #   in Loop: Header=BB249_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB249_20
.LBB249_14:                             # %.preheader.us35
                                        # =>This Inner Loop Header: Depth=1
	fld.d	$fa1, $s1, 0
	movfr2gr.d	$a0, $fa1
	vinsgr2vr.d	$vr1, $a0, 0
	movfr2gr.d	$a0, $fa0
	vinsgr2vr.d	$vr1, $a0, 1
	vfadd.d	$vr1, $vr1, $vr4
	vfmadd.d	$vr1, $vr1, $vr6, $vr5
	vfadd.d	$vr1, $vr1, $vr4
	vfmadd.d	$vr1, $vr1, $vr6, $vr5
	vfadd.d	$vr1, $vr1, $vr4
	vfmadd.d	$vr1, $vr1, $vr6, $vr5
	vreplvei.d	$vr2, $vr1, 0
	fadd.d	$fa2, $fa2, $fs3
	vreplvei.d	$vr1, $vr1, 1
	fmul.d	$fa1, $fa1, $fs0
	fadd.d	$fa1, $fa2, $fa1
	fabs.d	$fa3, $fa2
	fdiv.d	$fa2, $fa1, $fa2
	fcmp.clt.d	$fcc0, $fs1, $fa3
	fsel	$fa1, $fa1, $fa2, $fcc0
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs2
	bcnez	$fcc0, .LBB249_13
# %bb.15:                               #   in Loop: Header=BB249_14 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr6, $sp, 16                   # 16-byte Folded Reload
	vld	$vr5, $sp, 32                   # 16-byte Folded Reload
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB249_13
.LBB249_16:                             # %.lr.ph.split.split.preheader
	pcalau12i	$a0, %pc_hi20(.LCPI249_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI249_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI249_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI249_1)
	pcalau12i	$a0, %pc_hi20(.LCPI249_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI249_2)
	pcalau12i	$a0, %pc_hi20(.LCPI249_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI249_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB249_18
	.p2align	4, , 16
.LBB249_17:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB249_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB249_20
.LBB249_18:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB249_17
# %bb.19:                               #   in Loop: Header=BB249_18 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB249_17
.LBB249_20:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(results)
	ld.d	$a2, $s3, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB249_22
# %bb.21:                               # %._crit_edge
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB249_24
.LBB249_22:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s3, %pc_lo12(results)
	beqz	$a0, .LBB249_25
# %bb.23:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB249_24:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI249_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI249_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 96                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 104                  # 8-byte Folded Reload
	fld.d	$fs0, $sp, 112                  # 8-byte Folded Reload
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB249_25:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end249:
	.size	_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc, .Lfunc_end249-_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc
.LCPI250_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI250_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI250_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI250_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI250_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI250_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 8                    # 8-byte Folded Spill
	fst.d	$fs5, $sp, 0                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	.cfi_offset 61, -128
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB250_12
# %bb.1:                                # %.lr.ph
	blez	$s0, .LBB250_8
# %bb.2:                                # %.preheader23.us.preheader
	move	$s6, $zero
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI250_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI250_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI250_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI250_1)
	pcalau12i	$a0, %pc_hi20(.LCPI250_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI250_2)
	pcalau12i	$a0, %pc_hi20(.LCPI250_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI250_4)
	pcalau12i	$a0, %pc_hi20(.LCPI250_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI250_3)
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB250_4
	.p2align	4, , 16
.LBB250_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB250_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB250_12
.LBB250_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB250_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB250_5:                              #   Parent Loop BB250_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB250_5
# %bb.6:                                # %.loopexit.us
                                        #   in Loop: Header=BB250_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB250_3
# %bb.7:                                #   in Loop: Header=BB250_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB250_3
.LBB250_8:                              # %.lr.ph.split.split.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI250_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI250_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI250_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI250_1)
	pcalau12i	$a0, %pc_hi20(.LCPI250_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI250_2)
	pcalau12i	$a0, %pc_hi20(.LCPI250_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI250_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB250_10
	.p2align	4, , 16
.LBB250_9:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB250_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB250_12
.LBB250_10:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB250_9
# %bb.11:                               #   in Loop: Header=BB250_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB250_9
.LBB250_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB250_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB250_16
.LBB250_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB250_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB250_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI250_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI250_5)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 0                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB250_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end250:
	.size	_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc, .Lfunc_end250-_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc
.LCPI251_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI251_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI251_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI251_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI251_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI251_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB251_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 32
	blt	$s0, $a0, .LBB251_11
# %bb.2:                                # %.preheader25.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -31
	addi.d	$s7, $s1, 128
	addi.d	$s8, $s1, 256
	addi.d	$fp, $s0, -32
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI251_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI251_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI251_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI251_1)
	pcalau12i	$a0, %pc_hi20(.LCPI251_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI251_2)
	pcalau12i	$a0, %pc_hi20(.LCPI251_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI251_4)
	pcalau12i	$a0, %pc_hi20(.LCPI251_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI251_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB251_4
	.p2align	4, , 16
.LBB251_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB251_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB251_22
.LBB251_4:                              # %.preheader25.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB251_5 Depth 2
                                        #     Child Loop BB251_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB251_5:                              #   Parent Loop BB251_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -128
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -120
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 120
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 32
	addi.w	$a0, $a0, 32
	addi.d	$a1, $a1, 256
	addi.d	$a3, $a3, 256
	bltu	$a2, $s6, .LBB251_5
# %bb.6:                                # %.loopexit26.us
                                        #   in Loop: Header=BB251_4 Depth=1
	bge	$a0, $s0, .LBB251_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB251_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB251_8:                              # %.preheader.us
                                        #   Parent Loop BB251_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB251_8
.LBB251_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB251_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB251_3
# %bb.10:                               #   in Loop: Header=BB251_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB251_3
.LBB251_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB251_18
# %bb.12:                               # %.preheader.us37.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI251_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI251_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI251_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI251_1)
	pcalau12i	$a0, %pc_hi20(.LCPI251_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI251_2)
	pcalau12i	$a0, %pc_hi20(.LCPI251_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI251_4)
	pcalau12i	$a0, %pc_hi20(.LCPI251_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI251_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB251_14
	.p2align	4, , 16
.LBB251_13:                             # %_Z9check_sumIdEvT_.exit.us36
                                        #   in Loop: Header=BB251_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB251_22
.LBB251_14:                             # %.preheader.us37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB251_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB251_15:                             #   Parent Loop BB251_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB251_15
# %bb.16:                               # %.loopexit.us38
                                        #   in Loop: Header=BB251_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB251_13
# %bb.17:                               #   in Loop: Header=BB251_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB251_13
.LBB251_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI251_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI251_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI251_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI251_1)
	pcalau12i	$a0, %pc_hi20(.LCPI251_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI251_2)
	pcalau12i	$a0, %pc_hi20(.LCPI251_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI251_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB251_20
	.p2align	4, , 16
.LBB251_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB251_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB251_22
.LBB251_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB251_19
# %bb.21:                               #   in Loop: Header=BB251_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB251_19
.LBB251_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB251_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB251_26
.LBB251_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB251_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB251_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI251_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI251_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB251_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end251:
	.size	_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc, .Lfunc_end251-_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc
.LCPI252_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI252_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI252_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI252_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI252_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI252_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB252_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 31
	blt	$s0, $a0, .LBB252_11
# %bb.2:                                # %.preheader25.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -30
	addi.d	$s7, $s1, 120
	addi.d	$s8, $s1, 248
	addi.d	$fp, $s0, -31
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI252_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI252_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI252_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI252_1)
	pcalau12i	$a0, %pc_hi20(.LCPI252_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI252_2)
	pcalau12i	$a0, %pc_hi20(.LCPI252_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI252_4)
	pcalau12i	$a0, %pc_hi20(.LCPI252_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI252_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB252_4
	.p2align	4, , 16
.LBB252_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB252_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB252_22
.LBB252_4:                              # %.preheader25.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB252_5 Depth 2
                                        #     Child Loop BB252_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB252_5:                              #   Parent Loop BB252_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -120
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 120
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 31
	addi.w	$a0, $a0, 31
	addi.d	$a1, $a1, 248
	addi.d	$a3, $a3, 248
	bltu	$a2, $s6, .LBB252_5
# %bb.6:                                # %.loopexit26.us
                                        #   in Loop: Header=BB252_4 Depth=1
	bge	$a0, $s0, .LBB252_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB252_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB252_8:                              # %.preheader.us
                                        #   Parent Loop BB252_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB252_8
.LBB252_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB252_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB252_3
# %bb.10:                               #   in Loop: Header=BB252_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB252_3
.LBB252_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB252_18
# %bb.12:                               # %.preheader.us37.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI252_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI252_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI252_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI252_1)
	pcalau12i	$a0, %pc_hi20(.LCPI252_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI252_2)
	pcalau12i	$a0, %pc_hi20(.LCPI252_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI252_4)
	pcalau12i	$a0, %pc_hi20(.LCPI252_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI252_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB252_14
	.p2align	4, , 16
.LBB252_13:                             # %_Z9check_sumIdEvT_.exit.us36
                                        #   in Loop: Header=BB252_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB252_22
.LBB252_14:                             # %.preheader.us37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB252_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB252_15:                             #   Parent Loop BB252_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB252_15
# %bb.16:                               # %.loopexit.us38
                                        #   in Loop: Header=BB252_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB252_13
# %bb.17:                               #   in Loop: Header=BB252_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB252_13
.LBB252_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI252_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI252_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI252_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI252_1)
	pcalau12i	$a0, %pc_hi20(.LCPI252_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI252_2)
	pcalau12i	$a0, %pc_hi20(.LCPI252_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI252_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB252_20
	.p2align	4, , 16
.LBB252_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB252_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB252_22
.LBB252_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB252_19
# %bb.21:                               #   in Loop: Header=BB252_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB252_19
.LBB252_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB252_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB252_26
.LBB252_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB252_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB252_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI252_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI252_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB252_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end252:
	.size	_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc, .Lfunc_end252-_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc
.LCPI253_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI253_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI253_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI253_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI253_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI253_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB253_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 30
	blt	$s0, $a0, .LBB253_11
# %bb.2:                                # %.preheader25.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -29
	addi.d	$s7, $s1, 120
	addi.d	$s8, $s1, 240
	addi.d	$fp, $s0, -30
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI253_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI253_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI253_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI253_1)
	pcalau12i	$a0, %pc_hi20(.LCPI253_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI253_2)
	pcalau12i	$a0, %pc_hi20(.LCPI253_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI253_4)
	pcalau12i	$a0, %pc_hi20(.LCPI253_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI253_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB253_4
	.p2align	4, , 16
.LBB253_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB253_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB253_22
.LBB253_4:                              # %.preheader25.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB253_5 Depth 2
                                        #     Child Loop BB253_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB253_5:                              #   Parent Loop BB253_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -120
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 30
	addi.w	$a0, $a0, 30
	addi.d	$a1, $a1, 240
	addi.d	$a3, $a3, 240
	bltu	$a2, $s6, .LBB253_5
# %bb.6:                                # %.loopexit26.us
                                        #   in Loop: Header=BB253_4 Depth=1
	bge	$a0, $s0, .LBB253_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB253_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB253_8:                              # %.preheader.us
                                        #   Parent Loop BB253_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB253_8
.LBB253_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB253_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB253_3
# %bb.10:                               #   in Loop: Header=BB253_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB253_3
.LBB253_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB253_18
# %bb.12:                               # %.preheader.us37.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI253_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI253_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI253_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI253_1)
	pcalau12i	$a0, %pc_hi20(.LCPI253_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI253_2)
	pcalau12i	$a0, %pc_hi20(.LCPI253_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI253_4)
	pcalau12i	$a0, %pc_hi20(.LCPI253_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI253_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB253_14
	.p2align	4, , 16
.LBB253_13:                             # %_Z9check_sumIdEvT_.exit.us36
                                        #   in Loop: Header=BB253_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB253_22
.LBB253_14:                             # %.preheader.us37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB253_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB253_15:                             #   Parent Loop BB253_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB253_15
# %bb.16:                               # %.loopexit.us38
                                        #   in Loop: Header=BB253_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB253_13
# %bb.17:                               #   in Loop: Header=BB253_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB253_13
.LBB253_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI253_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI253_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI253_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI253_1)
	pcalau12i	$a0, %pc_hi20(.LCPI253_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI253_2)
	pcalau12i	$a0, %pc_hi20(.LCPI253_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI253_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB253_20
	.p2align	4, , 16
.LBB253_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB253_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB253_22
.LBB253_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB253_19
# %bb.21:                               #   in Loop: Header=BB253_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB253_19
.LBB253_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB253_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB253_26
.LBB253_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB253_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB253_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI253_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI253_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB253_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end253:
	.size	_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc, .Lfunc_end253-_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN15goto_loop_testsILi28EdE7do_testEPKdPKc,"axG",@progbits,_ZN15goto_loop_testsILi28EdE7do_testEPKdPKc,comdat
	.weak	_ZN15goto_loop_testsILi28EdE7do_testEPKdPKc # -- Begin function _ZN15goto_loop_testsILi28EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN15goto_loop_testsILi28EdE7do_testEPKdPKc,@function
_ZN15goto_loop_testsILi28EdE7do_testEPKdPKc: # @_ZN15goto_loop_testsILi28EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN15goto_loop_testsILi19EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1900
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 2000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s1, $s1, 2047
	addi.d	$a2, $s1, 53
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 153
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 253
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 353
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 453
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 553
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 653
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end254:
	.size	_ZN15goto_loop_testsILi28EdE7do_testEPKdPKc, .Lfunc_end254-_ZN15goto_loop_testsILi28EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc
.LCPI255_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI255_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI255_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI255_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI255_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI255_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB255_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 29
	blt	$s0, $a0, .LBB255_11
# %bb.2:                                # %.preheader25.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -28
	addi.d	$s7, $s1, 112
	addi.d	$s8, $s1, 232
	addi.d	$fp, $s0, -29
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI255_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI255_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI255_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI255_1)
	pcalau12i	$a0, %pc_hi20(.LCPI255_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI255_2)
	pcalau12i	$a0, %pc_hi20(.LCPI255_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI255_4)
	pcalau12i	$a0, %pc_hi20(.LCPI255_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI255_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB255_4
	.p2align	4, , 16
.LBB255_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB255_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB255_22
.LBB255_4:                              # %.preheader25.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB255_5 Depth 2
                                        #     Child Loop BB255_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB255_5:                              #   Parent Loop BB255_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 29
	addi.w	$a0, $a0, 29
	addi.d	$a1, $a1, 232
	addi.d	$a3, $a3, 232
	bltu	$a2, $s6, .LBB255_5
# %bb.6:                                # %.loopexit26.us
                                        #   in Loop: Header=BB255_4 Depth=1
	bge	$a0, $s0, .LBB255_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB255_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB255_8:                              # %.preheader.us
                                        #   Parent Loop BB255_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB255_8
.LBB255_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB255_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB255_3
# %bb.10:                               #   in Loop: Header=BB255_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB255_3
.LBB255_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB255_18
# %bb.12:                               # %.preheader.us37.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI255_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI255_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI255_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI255_1)
	pcalau12i	$a0, %pc_hi20(.LCPI255_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI255_2)
	pcalau12i	$a0, %pc_hi20(.LCPI255_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI255_4)
	pcalau12i	$a0, %pc_hi20(.LCPI255_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI255_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB255_14
	.p2align	4, , 16
.LBB255_13:                             # %_Z9check_sumIdEvT_.exit.us36
                                        #   in Loop: Header=BB255_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB255_22
.LBB255_14:                             # %.preheader.us37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB255_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB255_15:                             #   Parent Loop BB255_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB255_15
# %bb.16:                               # %.loopexit.us38
                                        #   in Loop: Header=BB255_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB255_13
# %bb.17:                               #   in Loop: Header=BB255_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB255_13
.LBB255_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI255_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI255_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI255_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI255_1)
	pcalau12i	$a0, %pc_hi20(.LCPI255_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI255_2)
	pcalau12i	$a0, %pc_hi20(.LCPI255_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI255_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB255_20
	.p2align	4, , 16
.LBB255_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB255_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB255_22
.LBB255_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB255_19
# %bb.21:                               #   in Loop: Header=BB255_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB255_19
.LBB255_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB255_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB255_26
.LBB255_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB255_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB255_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI255_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI255_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB255_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end255:
	.size	_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc, .Lfunc_end255-_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc
.LCPI256_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI256_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI256_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI256_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI256_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI256_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB256_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 28
	blt	$s0, $a0, .LBB256_11
# %bb.2:                                # %.preheader25.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -27
	addi.d	$s7, $s1, 112
	addi.d	$s8, $s1, 224
	addi.d	$fp, $s0, -28
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI256_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI256_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI256_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI256_1)
	pcalau12i	$a0, %pc_hi20(.LCPI256_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI256_2)
	pcalau12i	$a0, %pc_hi20(.LCPI256_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI256_4)
	pcalau12i	$a0, %pc_hi20(.LCPI256_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI256_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB256_4
	.p2align	4, , 16
.LBB256_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB256_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB256_22
.LBB256_4:                              # %.preheader25.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_5 Depth 2
                                        #     Child Loop BB256_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB256_5:                              #   Parent Loop BB256_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -112
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 28
	addi.w	$a0, $a0, 28
	addi.d	$a1, $a1, 224
	addi.d	$a3, $a3, 224
	bltu	$a2, $s6, .LBB256_5
# %bb.6:                                # %.loopexit26.us
                                        #   in Loop: Header=BB256_4 Depth=1
	bge	$a0, $s0, .LBB256_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB256_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB256_8:                              # %.preheader.us
                                        #   Parent Loop BB256_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB256_8
.LBB256_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB256_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB256_3
# %bb.10:                               #   in Loop: Header=BB256_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB256_3
.LBB256_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB256_18
# %bb.12:                               # %.preheader.us37.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI256_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI256_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI256_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI256_1)
	pcalau12i	$a0, %pc_hi20(.LCPI256_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI256_2)
	pcalau12i	$a0, %pc_hi20(.LCPI256_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI256_4)
	pcalau12i	$a0, %pc_hi20(.LCPI256_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI256_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB256_14
	.p2align	4, , 16
.LBB256_13:                             # %_Z9check_sumIdEvT_.exit.us36
                                        #   in Loop: Header=BB256_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB256_22
.LBB256_14:                             # %.preheader.us37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB256_15:                             #   Parent Loop BB256_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB256_15
# %bb.16:                               # %.loopexit.us38
                                        #   in Loop: Header=BB256_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB256_13
# %bb.17:                               #   in Loop: Header=BB256_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB256_13
.LBB256_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI256_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI256_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI256_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI256_1)
	pcalau12i	$a0, %pc_hi20(.LCPI256_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI256_2)
	pcalau12i	$a0, %pc_hi20(.LCPI256_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI256_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB256_20
	.p2align	4, , 16
.LBB256_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB256_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB256_22
.LBB256_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB256_19
# %bb.21:                               #   in Loop: Header=BB256_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB256_19
.LBB256_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB256_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB256_26
.LBB256_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB256_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB256_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI256_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI256_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB256_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end256:
	.size	_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc, .Lfunc_end256-_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc
.LCPI257_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI257_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI257_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI257_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI257_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI257_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB257_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 27
	blt	$s0, $a0, .LBB257_11
# %bb.2:                                # %.preheader25.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -26
	addi.d	$s7, $s1, 104
	addi.d	$s8, $s1, 216
	addi.d	$fp, $s0, -27
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI257_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI257_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI257_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI257_1)
	pcalau12i	$a0, %pc_hi20(.LCPI257_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI257_2)
	pcalau12i	$a0, %pc_hi20(.LCPI257_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI257_4)
	pcalau12i	$a0, %pc_hi20(.LCPI257_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI257_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB257_4
	.p2align	4, , 16
.LBB257_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB257_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB257_22
.LBB257_4:                              # %.preheader25.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB257_5 Depth 2
                                        #     Child Loop BB257_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB257_5:                              #   Parent Loop BB257_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 27
	addi.w	$a0, $a0, 27
	addi.d	$a1, $a1, 216
	addi.d	$a3, $a3, 216
	bltu	$a2, $s6, .LBB257_5
# %bb.6:                                # %.loopexit26.us
                                        #   in Loop: Header=BB257_4 Depth=1
	bge	$a0, $s0, .LBB257_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB257_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB257_8:                              # %.preheader.us
                                        #   Parent Loop BB257_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB257_8
.LBB257_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB257_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB257_3
# %bb.10:                               #   in Loop: Header=BB257_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB257_3
.LBB257_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB257_18
# %bb.12:                               # %.preheader.us37.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI257_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI257_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI257_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI257_1)
	pcalau12i	$a0, %pc_hi20(.LCPI257_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI257_2)
	pcalau12i	$a0, %pc_hi20(.LCPI257_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI257_4)
	pcalau12i	$a0, %pc_hi20(.LCPI257_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI257_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB257_14
	.p2align	4, , 16
.LBB257_13:                             # %_Z9check_sumIdEvT_.exit.us36
                                        #   in Loop: Header=BB257_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB257_22
.LBB257_14:                             # %.preheader.us37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB257_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB257_15:                             #   Parent Loop BB257_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB257_15
# %bb.16:                               # %.loopexit.us38
                                        #   in Loop: Header=BB257_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB257_13
# %bb.17:                               #   in Loop: Header=BB257_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB257_13
.LBB257_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI257_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI257_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI257_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI257_1)
	pcalau12i	$a0, %pc_hi20(.LCPI257_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI257_2)
	pcalau12i	$a0, %pc_hi20(.LCPI257_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI257_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB257_20
	.p2align	4, , 16
.LBB257_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB257_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB257_22
.LBB257_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB257_19
# %bb.21:                               #   in Loop: Header=BB257_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB257_19
.LBB257_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB257_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB257_26
.LBB257_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB257_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB257_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI257_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI257_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB257_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end257:
	.size	_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc, .Lfunc_end257-_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc
.LCPI258_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI258_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI258_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI258_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI258_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI258_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB258_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 26
	blt	$s0, $a0, .LBB258_11
# %bb.2:                                # %.preheader25.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -25
	addi.d	$s7, $s1, 104
	addi.d	$s8, $s1, 208
	addi.d	$fp, $s0, -26
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI258_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI258_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI258_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI258_1)
	pcalau12i	$a0, %pc_hi20(.LCPI258_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI258_2)
	pcalau12i	$a0, %pc_hi20(.LCPI258_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI258_4)
	pcalau12i	$a0, %pc_hi20(.LCPI258_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI258_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB258_4
	.p2align	4, , 16
.LBB258_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB258_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB258_22
.LBB258_4:                              # %.preheader25.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB258_5 Depth 2
                                        #     Child Loop BB258_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB258_5:                              #   Parent Loop BB258_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -104
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 26
	addi.w	$a0, $a0, 26
	addi.d	$a1, $a1, 208
	addi.d	$a3, $a3, 208
	bltu	$a2, $s6, .LBB258_5
# %bb.6:                                # %.loopexit26.us
                                        #   in Loop: Header=BB258_4 Depth=1
	bge	$a0, $s0, .LBB258_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB258_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB258_8:                              # %.preheader.us
                                        #   Parent Loop BB258_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB258_8
.LBB258_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB258_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB258_3
# %bb.10:                               #   in Loop: Header=BB258_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB258_3
.LBB258_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB258_18
# %bb.12:                               # %.preheader.us37.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI258_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI258_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI258_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI258_1)
	pcalau12i	$a0, %pc_hi20(.LCPI258_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI258_2)
	pcalau12i	$a0, %pc_hi20(.LCPI258_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI258_4)
	pcalau12i	$a0, %pc_hi20(.LCPI258_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI258_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB258_14
	.p2align	4, , 16
.LBB258_13:                             # %_Z9check_sumIdEvT_.exit.us36
                                        #   in Loop: Header=BB258_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB258_22
.LBB258_14:                             # %.preheader.us37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB258_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB258_15:                             #   Parent Loop BB258_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB258_15
# %bb.16:                               # %.loopexit.us38
                                        #   in Loop: Header=BB258_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB258_13
# %bb.17:                               #   in Loop: Header=BB258_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB258_13
.LBB258_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI258_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI258_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI258_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI258_1)
	pcalau12i	$a0, %pc_hi20(.LCPI258_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI258_2)
	pcalau12i	$a0, %pc_hi20(.LCPI258_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI258_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB258_20
	.p2align	4, , 16
.LBB258_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB258_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB258_22
.LBB258_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB258_19
# %bb.21:                               #   in Loop: Header=BB258_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB258_19
.LBB258_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB258_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB258_26
.LBB258_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB258_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB258_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI258_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI258_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB258_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end258:
	.size	_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc, .Lfunc_end258-_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc
.LCPI259_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI259_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI259_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI259_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI259_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI259_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB259_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 25
	blt	$s0, $a0, .LBB259_11
# %bb.2:                                # %.preheader25.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -24
	addi.d	$s7, $s1, 96
	addi.d	$s8, $s1, 200
	addi.d	$fp, $s0, -25
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI259_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI259_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI259_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI259_1)
	pcalau12i	$a0, %pc_hi20(.LCPI259_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI259_2)
	pcalau12i	$a0, %pc_hi20(.LCPI259_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI259_4)
	pcalau12i	$a0, %pc_hi20(.LCPI259_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI259_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB259_4
	.p2align	4, , 16
.LBB259_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB259_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB259_22
.LBB259_4:                              # %.preheader25.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB259_5 Depth 2
                                        #     Child Loop BB259_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB259_5:                              #   Parent Loop BB259_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 25
	addi.w	$a0, $a0, 25
	addi.d	$a1, $a1, 200
	addi.d	$a3, $a3, 200
	bltu	$a2, $s6, .LBB259_5
# %bb.6:                                # %.loopexit26.us
                                        #   in Loop: Header=BB259_4 Depth=1
	bge	$a0, $s0, .LBB259_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB259_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB259_8:                              # %.preheader.us
                                        #   Parent Loop BB259_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB259_8
.LBB259_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB259_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB259_3
# %bb.10:                               #   in Loop: Header=BB259_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB259_3
.LBB259_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB259_18
# %bb.12:                               # %.preheader.us37.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI259_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI259_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI259_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI259_1)
	pcalau12i	$a0, %pc_hi20(.LCPI259_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI259_2)
	pcalau12i	$a0, %pc_hi20(.LCPI259_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI259_4)
	pcalau12i	$a0, %pc_hi20(.LCPI259_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI259_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB259_14
	.p2align	4, , 16
.LBB259_13:                             # %_Z9check_sumIdEvT_.exit.us36
                                        #   in Loop: Header=BB259_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB259_22
.LBB259_14:                             # %.preheader.us37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB259_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB259_15:                             #   Parent Loop BB259_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB259_15
# %bb.16:                               # %.loopexit.us38
                                        #   in Loop: Header=BB259_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB259_13
# %bb.17:                               #   in Loop: Header=BB259_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB259_13
.LBB259_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI259_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI259_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI259_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI259_1)
	pcalau12i	$a0, %pc_hi20(.LCPI259_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI259_2)
	pcalau12i	$a0, %pc_hi20(.LCPI259_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI259_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB259_20
	.p2align	4, , 16
.LBB259_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB259_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB259_22
.LBB259_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB259_19
# %bb.21:                               #   in Loop: Header=BB259_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB259_19
.LBB259_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB259_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB259_26
.LBB259_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB259_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB259_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI259_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI259_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB259_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end259:
	.size	_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc, .Lfunc_end259-_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc
.LCPI260_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI260_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI260_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI260_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI260_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI260_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB260_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 24
	blt	$s0, $a0, .LBB260_11
# %bb.2:                                # %.preheader25.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -23
	addi.d	$s7, $s1, 96
	addi.d	$s8, $s1, 192
	addi.d	$fp, $s0, -24
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI260_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI260_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI260_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI260_1)
	pcalau12i	$a0, %pc_hi20(.LCPI260_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI260_2)
	pcalau12i	$a0, %pc_hi20(.LCPI260_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI260_4)
	pcalau12i	$a0, %pc_hi20(.LCPI260_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI260_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB260_4
	.p2align	4, , 16
.LBB260_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB260_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB260_22
.LBB260_4:                              # %.preheader25.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB260_5 Depth 2
                                        #     Child Loop BB260_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB260_5:                              #   Parent Loop BB260_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -96
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 24
	addi.w	$a0, $a0, 24
	addi.d	$a1, $a1, 192
	addi.d	$a3, $a3, 192
	bltu	$a2, $s6, .LBB260_5
# %bb.6:                                # %.loopexit26.us
                                        #   in Loop: Header=BB260_4 Depth=1
	bge	$a0, $s0, .LBB260_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB260_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB260_8:                              # %.preheader.us
                                        #   Parent Loop BB260_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB260_8
.LBB260_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB260_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB260_3
# %bb.10:                               #   in Loop: Header=BB260_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB260_3
.LBB260_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB260_18
# %bb.12:                               # %.preheader.us37.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI260_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI260_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI260_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI260_1)
	pcalau12i	$a0, %pc_hi20(.LCPI260_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI260_2)
	pcalau12i	$a0, %pc_hi20(.LCPI260_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI260_4)
	pcalau12i	$a0, %pc_hi20(.LCPI260_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI260_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB260_14
	.p2align	4, , 16
.LBB260_13:                             # %_Z9check_sumIdEvT_.exit.us36
                                        #   in Loop: Header=BB260_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB260_22
.LBB260_14:                             # %.preheader.us37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB260_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB260_15:                             #   Parent Loop BB260_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB260_15
# %bb.16:                               # %.loopexit.us38
                                        #   in Loop: Header=BB260_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB260_13
# %bb.17:                               #   in Loop: Header=BB260_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB260_13
.LBB260_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI260_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI260_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI260_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI260_1)
	pcalau12i	$a0, %pc_hi20(.LCPI260_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI260_2)
	pcalau12i	$a0, %pc_hi20(.LCPI260_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI260_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB260_20
	.p2align	4, , 16
.LBB260_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB260_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB260_22
.LBB260_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB260_19
# %bb.21:                               #   in Loop: Header=BB260_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB260_19
.LBB260_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB260_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB260_26
.LBB260_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB260_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB260_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI260_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI260_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB260_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end260:
	.size	_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc, .Lfunc_end260-_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc
.LCPI261_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI261_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI261_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI261_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI261_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI261_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB261_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 23
	blt	$s0, $a0, .LBB261_11
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -22
	addi.d	$s7, $s1, 88
	addi.d	$s8, $s1, 184
	addi.d	$fp, $s0, -23
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI261_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI261_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI261_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI261_1)
	pcalau12i	$a0, %pc_hi20(.LCPI261_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI261_2)
	pcalau12i	$a0, %pc_hi20(.LCPI261_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI261_4)
	pcalau12i	$a0, %pc_hi20(.LCPI261_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI261_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB261_4
	.p2align	4, , 16
.LBB261_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB261_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB261_22
.LBB261_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB261_5 Depth 2
                                        #     Child Loop BB261_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB261_5:                              #   Parent Loop BB261_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 23
	addi.w	$a0, $a0, 23
	addi.d	$a1, $a1, 184
	addi.d	$a3, $a3, 184
	bltu	$a2, $s6, .LBB261_5
# %bb.6:                                # %.loopexit25.us
                                        #   in Loop: Header=BB261_4 Depth=1
	bge	$a0, $s0, .LBB261_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB261_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB261_8:                              # %.preheader.us
                                        #   Parent Loop BB261_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB261_8
.LBB261_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB261_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB261_3
# %bb.10:                               #   in Loop: Header=BB261_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB261_3
.LBB261_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB261_18
# %bb.12:                               # %.preheader.us36.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI261_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI261_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI261_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI261_1)
	pcalau12i	$a0, %pc_hi20(.LCPI261_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI261_2)
	pcalau12i	$a0, %pc_hi20(.LCPI261_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI261_4)
	pcalau12i	$a0, %pc_hi20(.LCPI261_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI261_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB261_14
	.p2align	4, , 16
.LBB261_13:                             # %_Z9check_sumIdEvT_.exit.us35
                                        #   in Loop: Header=BB261_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB261_22
.LBB261_14:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB261_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB261_15:                             #   Parent Loop BB261_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB261_15
# %bb.16:                               # %.loopexit.us37
                                        #   in Loop: Header=BB261_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB261_13
# %bb.17:                               #   in Loop: Header=BB261_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB261_13
.LBB261_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI261_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI261_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI261_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI261_1)
	pcalau12i	$a0, %pc_hi20(.LCPI261_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI261_2)
	pcalau12i	$a0, %pc_hi20(.LCPI261_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI261_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB261_20
	.p2align	4, , 16
.LBB261_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB261_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB261_22
.LBB261_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB261_19
# %bb.21:                               #   in Loop: Header=BB261_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB261_19
.LBB261_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB261_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB261_26
.LBB261_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB261_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB261_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI261_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI261_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB261_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end261:
	.size	_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc, .Lfunc_end261-_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc
.LCPI262_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI262_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI262_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI262_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI262_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI262_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB262_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 22
	blt	$s0, $a0, .LBB262_11
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -21
	addi.d	$s7, $s1, 88
	addi.d	$s8, $s1, 176
	addi.d	$fp, $s0, -22
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI262_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI262_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI262_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI262_1)
	pcalau12i	$a0, %pc_hi20(.LCPI262_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI262_2)
	pcalau12i	$a0, %pc_hi20(.LCPI262_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI262_4)
	pcalau12i	$a0, %pc_hi20(.LCPI262_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI262_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB262_4
	.p2align	4, , 16
.LBB262_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB262_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB262_22
.LBB262_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB262_5 Depth 2
                                        #     Child Loop BB262_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB262_5:                              #   Parent Loop BB262_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 22
	addi.w	$a0, $a0, 22
	addi.d	$a1, $a1, 176
	addi.d	$a3, $a3, 176
	bltu	$a2, $s6, .LBB262_5
# %bb.6:                                # %.loopexit25.us
                                        #   in Loop: Header=BB262_4 Depth=1
	bge	$a0, $s0, .LBB262_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB262_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB262_8:                              # %.preheader.us
                                        #   Parent Loop BB262_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB262_8
.LBB262_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB262_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB262_3
# %bb.10:                               #   in Loop: Header=BB262_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB262_3
.LBB262_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB262_18
# %bb.12:                               # %.preheader.us36.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI262_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI262_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI262_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI262_1)
	pcalau12i	$a0, %pc_hi20(.LCPI262_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI262_2)
	pcalau12i	$a0, %pc_hi20(.LCPI262_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI262_4)
	pcalau12i	$a0, %pc_hi20(.LCPI262_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI262_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB262_14
	.p2align	4, , 16
.LBB262_13:                             # %_Z9check_sumIdEvT_.exit.us35
                                        #   in Loop: Header=BB262_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB262_22
.LBB262_14:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB262_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB262_15:                             #   Parent Loop BB262_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB262_15
# %bb.16:                               # %.loopexit.us37
                                        #   in Loop: Header=BB262_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB262_13
# %bb.17:                               #   in Loop: Header=BB262_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB262_13
.LBB262_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI262_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI262_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI262_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI262_1)
	pcalau12i	$a0, %pc_hi20(.LCPI262_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI262_2)
	pcalau12i	$a0, %pc_hi20(.LCPI262_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI262_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB262_20
	.p2align	4, , 16
.LBB262_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB262_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB262_22
.LBB262_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB262_19
# %bb.21:                               #   in Loop: Header=BB262_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB262_19
.LBB262_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB262_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB262_26
.LBB262_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB262_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB262_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI262_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI262_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB262_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end262:
	.size	_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc, .Lfunc_end262-_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc
.LCPI263_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI263_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI263_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI263_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI263_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI263_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB263_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 21
	blt	$s0, $a0, .LBB263_11
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -20
	addi.d	$s7, $s1, 80
	addi.d	$s8, $s1, 168
	addi.d	$fp, $s0, -21
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI263_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI263_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI263_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI263_1)
	pcalau12i	$a0, %pc_hi20(.LCPI263_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI263_2)
	pcalau12i	$a0, %pc_hi20(.LCPI263_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI263_4)
	pcalau12i	$a0, %pc_hi20(.LCPI263_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI263_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB263_4
	.p2align	4, , 16
.LBB263_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB263_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB263_22
.LBB263_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB263_5 Depth 2
                                        #     Child Loop BB263_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB263_5:                              #   Parent Loop BB263_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 21
	addi.w	$a0, $a0, 21
	addi.d	$a1, $a1, 168
	addi.d	$a3, $a3, 168
	bltu	$a2, $s6, .LBB263_5
# %bb.6:                                # %.loopexit25.us
                                        #   in Loop: Header=BB263_4 Depth=1
	bge	$a0, $s0, .LBB263_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB263_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB263_8:                              # %.preheader.us
                                        #   Parent Loop BB263_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB263_8
.LBB263_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB263_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB263_3
# %bb.10:                               #   in Loop: Header=BB263_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB263_3
.LBB263_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB263_18
# %bb.12:                               # %.preheader.us36.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI263_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI263_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI263_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI263_1)
	pcalau12i	$a0, %pc_hi20(.LCPI263_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI263_2)
	pcalau12i	$a0, %pc_hi20(.LCPI263_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI263_4)
	pcalau12i	$a0, %pc_hi20(.LCPI263_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI263_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB263_14
	.p2align	4, , 16
.LBB263_13:                             # %_Z9check_sumIdEvT_.exit.us35
                                        #   in Loop: Header=BB263_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB263_22
.LBB263_14:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB263_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB263_15:                             #   Parent Loop BB263_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB263_15
# %bb.16:                               # %.loopexit.us37
                                        #   in Loop: Header=BB263_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB263_13
# %bb.17:                               #   in Loop: Header=BB263_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB263_13
.LBB263_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI263_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI263_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI263_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI263_1)
	pcalau12i	$a0, %pc_hi20(.LCPI263_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI263_2)
	pcalau12i	$a0, %pc_hi20(.LCPI263_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI263_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB263_20
	.p2align	4, , 16
.LBB263_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB263_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB263_22
.LBB263_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB263_19
# %bb.21:                               #   in Loop: Header=BB263_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB263_19
.LBB263_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB263_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB263_26
.LBB263_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB263_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB263_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI263_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI263_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB263_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end263:
	.size	_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc, .Lfunc_end263-_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN15goto_loop_testsILi19EdE7do_testEPKdPKc,"axG",@progbits,_ZN15goto_loop_testsILi19EdE7do_testEPKdPKc,comdat
	.weak	_ZN15goto_loop_testsILi19EdE7do_testEPKdPKc # -- Begin function _ZN15goto_loop_testsILi19EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN15goto_loop_testsILi19EdE7do_testEPKdPKc,@function
_ZN15goto_loop_testsILi19EdE7do_testEPKdPKc: # @_ZN15goto_loop_testsILi19EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN15goto_loop_testsILi10EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1000
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1100
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1200
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1300
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1400
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1500
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1600
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1700
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1800
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end264:
	.size	_ZN15goto_loop_testsILi19EdE7do_testEPKdPKc, .Lfunc_end264-_ZN15goto_loop_testsILi19EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc
.LCPI265_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI265_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI265_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI265_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI265_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI265_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB265_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 20
	blt	$s0, $a0, .LBB265_11
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -19
	addi.d	$s7, $s1, 80
	addi.d	$s8, $s1, 160
	addi.d	$fp, $s0, -20
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI265_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI265_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI265_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI265_1)
	pcalau12i	$a0, %pc_hi20(.LCPI265_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI265_2)
	pcalau12i	$a0, %pc_hi20(.LCPI265_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI265_4)
	pcalau12i	$a0, %pc_hi20(.LCPI265_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI265_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB265_4
	.p2align	4, , 16
.LBB265_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB265_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB265_22
.LBB265_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB265_5 Depth 2
                                        #     Child Loop BB265_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB265_5:                              #   Parent Loop BB265_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 20
	addi.w	$a0, $a0, 20
	addi.d	$a1, $a1, 160
	addi.d	$a3, $a3, 160
	bltu	$a2, $s6, .LBB265_5
# %bb.6:                                # %.loopexit25.us
                                        #   in Loop: Header=BB265_4 Depth=1
	bge	$a0, $s0, .LBB265_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB265_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB265_8:                              # %.preheader.us
                                        #   Parent Loop BB265_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB265_8
.LBB265_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB265_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB265_3
# %bb.10:                               #   in Loop: Header=BB265_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB265_3
.LBB265_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB265_18
# %bb.12:                               # %.preheader.us36.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI265_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI265_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI265_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI265_1)
	pcalau12i	$a0, %pc_hi20(.LCPI265_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI265_2)
	pcalau12i	$a0, %pc_hi20(.LCPI265_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI265_4)
	pcalau12i	$a0, %pc_hi20(.LCPI265_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI265_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB265_14
	.p2align	4, , 16
.LBB265_13:                             # %_Z9check_sumIdEvT_.exit.us35
                                        #   in Loop: Header=BB265_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB265_22
.LBB265_14:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB265_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB265_15:                             #   Parent Loop BB265_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB265_15
# %bb.16:                               # %.loopexit.us37
                                        #   in Loop: Header=BB265_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB265_13
# %bb.17:                               #   in Loop: Header=BB265_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB265_13
.LBB265_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI265_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI265_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI265_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI265_1)
	pcalau12i	$a0, %pc_hi20(.LCPI265_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI265_2)
	pcalau12i	$a0, %pc_hi20(.LCPI265_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI265_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB265_20
	.p2align	4, , 16
.LBB265_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB265_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB265_22
.LBB265_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB265_19
# %bb.21:                               #   in Loop: Header=BB265_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB265_19
.LBB265_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB265_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB265_26
.LBB265_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB265_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB265_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI265_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI265_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB265_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end265:
	.size	_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc, .Lfunc_end265-_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc
.LCPI266_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI266_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI266_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI266_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI266_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI266_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB266_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 19
	blt	$s0, $a0, .LBB266_11
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -18
	addi.d	$s7, $s1, 72
	addi.d	$s8, $s1, 152
	addi.d	$fp, $s0, -19
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI266_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI266_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI266_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI266_1)
	pcalau12i	$a0, %pc_hi20(.LCPI266_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI266_2)
	pcalau12i	$a0, %pc_hi20(.LCPI266_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI266_4)
	pcalau12i	$a0, %pc_hi20(.LCPI266_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI266_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB266_4
	.p2align	4, , 16
.LBB266_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB266_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB266_22
.LBB266_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB266_5 Depth 2
                                        #     Child Loop BB266_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB266_5:                              #   Parent Loop BB266_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 19
	addi.w	$a0, $a0, 19
	addi.d	$a1, $a1, 152
	addi.d	$a3, $a3, 152
	bltu	$a2, $s6, .LBB266_5
# %bb.6:                                # %.loopexit25.us
                                        #   in Loop: Header=BB266_4 Depth=1
	bge	$a0, $s0, .LBB266_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB266_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB266_8:                              # %.preheader.us
                                        #   Parent Loop BB266_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB266_8
.LBB266_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB266_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB266_3
# %bb.10:                               #   in Loop: Header=BB266_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB266_3
.LBB266_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB266_18
# %bb.12:                               # %.preheader.us36.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI266_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI266_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI266_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI266_1)
	pcalau12i	$a0, %pc_hi20(.LCPI266_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI266_2)
	pcalau12i	$a0, %pc_hi20(.LCPI266_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI266_4)
	pcalau12i	$a0, %pc_hi20(.LCPI266_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI266_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB266_14
	.p2align	4, , 16
.LBB266_13:                             # %_Z9check_sumIdEvT_.exit.us35
                                        #   in Loop: Header=BB266_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB266_22
.LBB266_14:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB266_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB266_15:                             #   Parent Loop BB266_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB266_15
# %bb.16:                               # %.loopexit.us37
                                        #   in Loop: Header=BB266_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB266_13
# %bb.17:                               #   in Loop: Header=BB266_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB266_13
.LBB266_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI266_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI266_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI266_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI266_1)
	pcalau12i	$a0, %pc_hi20(.LCPI266_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI266_2)
	pcalau12i	$a0, %pc_hi20(.LCPI266_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI266_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB266_20
	.p2align	4, , 16
.LBB266_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB266_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB266_22
.LBB266_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB266_19
# %bb.21:                               #   in Loop: Header=BB266_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB266_19
.LBB266_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB266_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB266_26
.LBB266_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB266_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB266_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI266_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI266_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB266_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end266:
	.size	_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc, .Lfunc_end266-_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc
.LCPI267_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI267_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI267_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI267_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI267_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI267_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB267_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 18
	blt	$s0, $a0, .LBB267_11
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -17
	addi.d	$s7, $s1, 72
	addi.d	$s8, $s1, 144
	addi.d	$fp, $s0, -18
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI267_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI267_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI267_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI267_1)
	pcalau12i	$a0, %pc_hi20(.LCPI267_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI267_2)
	pcalau12i	$a0, %pc_hi20(.LCPI267_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI267_4)
	pcalau12i	$a0, %pc_hi20(.LCPI267_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI267_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB267_4
	.p2align	4, , 16
.LBB267_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB267_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB267_22
.LBB267_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB267_5 Depth 2
                                        #     Child Loop BB267_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB267_5:                              #   Parent Loop BB267_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 18
	addi.w	$a0, $a0, 18
	addi.d	$a1, $a1, 144
	addi.d	$a3, $a3, 144
	bltu	$a2, $s6, .LBB267_5
# %bb.6:                                # %.loopexit25.us
                                        #   in Loop: Header=BB267_4 Depth=1
	bge	$a0, $s0, .LBB267_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB267_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB267_8:                              # %.preheader.us
                                        #   Parent Loop BB267_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB267_8
.LBB267_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB267_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB267_3
# %bb.10:                               #   in Loop: Header=BB267_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB267_3
.LBB267_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB267_18
# %bb.12:                               # %.preheader.us36.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI267_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI267_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI267_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI267_1)
	pcalau12i	$a0, %pc_hi20(.LCPI267_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI267_2)
	pcalau12i	$a0, %pc_hi20(.LCPI267_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI267_4)
	pcalau12i	$a0, %pc_hi20(.LCPI267_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI267_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB267_14
	.p2align	4, , 16
.LBB267_13:                             # %_Z9check_sumIdEvT_.exit.us35
                                        #   in Loop: Header=BB267_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB267_22
.LBB267_14:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB267_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB267_15:                             #   Parent Loop BB267_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB267_15
# %bb.16:                               # %.loopexit.us37
                                        #   in Loop: Header=BB267_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB267_13
# %bb.17:                               #   in Loop: Header=BB267_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB267_13
.LBB267_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI267_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI267_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI267_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI267_1)
	pcalau12i	$a0, %pc_hi20(.LCPI267_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI267_2)
	pcalau12i	$a0, %pc_hi20(.LCPI267_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI267_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB267_20
	.p2align	4, , 16
.LBB267_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB267_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB267_22
.LBB267_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB267_19
# %bb.21:                               #   in Loop: Header=BB267_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB267_19
.LBB267_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB267_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB267_26
.LBB267_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB267_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB267_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI267_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI267_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB267_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end267:
	.size	_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc, .Lfunc_end267-_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc
.LCPI268_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI268_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI268_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI268_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI268_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI268_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB268_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 17
	blt	$s0, $a0, .LBB268_11
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -16
	addi.d	$s7, $s1, 64
	addi.d	$s8, $s1, 136
	addi.d	$fp, $s0, -17
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI268_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI268_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI268_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI268_1)
	pcalau12i	$a0, %pc_hi20(.LCPI268_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI268_2)
	pcalau12i	$a0, %pc_hi20(.LCPI268_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI268_4)
	pcalau12i	$a0, %pc_hi20(.LCPI268_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI268_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB268_4
	.p2align	4, , 16
.LBB268_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB268_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB268_22
.LBB268_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB268_5 Depth 2
                                        #     Child Loop BB268_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB268_5:                              #   Parent Loop BB268_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 17
	addi.w	$a0, $a0, 17
	addi.d	$a1, $a1, 136
	addi.d	$a3, $a3, 136
	bltu	$a2, $s6, .LBB268_5
# %bb.6:                                # %.loopexit25.us
                                        #   in Loop: Header=BB268_4 Depth=1
	bge	$a0, $s0, .LBB268_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB268_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB268_8:                              # %.preheader.us
                                        #   Parent Loop BB268_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB268_8
.LBB268_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB268_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB268_3
# %bb.10:                               #   in Loop: Header=BB268_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB268_3
.LBB268_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB268_18
# %bb.12:                               # %.preheader.us36.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI268_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI268_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI268_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI268_1)
	pcalau12i	$a0, %pc_hi20(.LCPI268_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI268_2)
	pcalau12i	$a0, %pc_hi20(.LCPI268_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI268_4)
	pcalau12i	$a0, %pc_hi20(.LCPI268_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI268_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB268_14
	.p2align	4, , 16
.LBB268_13:                             # %_Z9check_sumIdEvT_.exit.us35
                                        #   in Loop: Header=BB268_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB268_22
.LBB268_14:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB268_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB268_15:                             #   Parent Loop BB268_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB268_15
# %bb.16:                               # %.loopexit.us37
                                        #   in Loop: Header=BB268_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB268_13
# %bb.17:                               #   in Loop: Header=BB268_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB268_13
.LBB268_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI268_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI268_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI268_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI268_1)
	pcalau12i	$a0, %pc_hi20(.LCPI268_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI268_2)
	pcalau12i	$a0, %pc_hi20(.LCPI268_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI268_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB268_20
	.p2align	4, , 16
.LBB268_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB268_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB268_22
.LBB268_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB268_19
# %bb.21:                               #   in Loop: Header=BB268_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB268_19
.LBB268_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB268_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB268_26
.LBB268_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB268_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB268_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI268_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI268_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB268_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end268:
	.size	_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc, .Lfunc_end268-_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc
.LCPI269_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI269_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI269_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI269_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI269_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI269_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB269_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 16
	blt	$s0, $a0, .LBB269_11
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -15
	addi.d	$s7, $s1, 64
	addi.d	$s8, $s1, 128
	addi.d	$fp, $s0, -16
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI269_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI269_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI269_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI269_1)
	pcalau12i	$a0, %pc_hi20(.LCPI269_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI269_2)
	pcalau12i	$a0, %pc_hi20(.LCPI269_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI269_4)
	pcalau12i	$a0, %pc_hi20(.LCPI269_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI269_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB269_4
	.p2align	4, , 16
.LBB269_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB269_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB269_22
.LBB269_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB269_5 Depth 2
                                        #     Child Loop BB269_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB269_5:                              #   Parent Loop BB269_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 16
	addi.w	$a0, $a0, 16
	addi.d	$a1, $a1, 128
	addi.d	$a3, $a3, 128
	bltu	$a2, $s6, .LBB269_5
# %bb.6:                                # %.loopexit25.us
                                        #   in Loop: Header=BB269_4 Depth=1
	bge	$a0, $s0, .LBB269_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB269_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB269_8:                              # %.preheader.us
                                        #   Parent Loop BB269_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB269_8
.LBB269_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB269_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB269_3
# %bb.10:                               #   in Loop: Header=BB269_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB269_3
.LBB269_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB269_18
# %bb.12:                               # %.preheader.us36.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI269_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI269_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI269_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI269_1)
	pcalau12i	$a0, %pc_hi20(.LCPI269_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI269_2)
	pcalau12i	$a0, %pc_hi20(.LCPI269_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI269_4)
	pcalau12i	$a0, %pc_hi20(.LCPI269_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI269_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB269_14
	.p2align	4, , 16
.LBB269_13:                             # %_Z9check_sumIdEvT_.exit.us35
                                        #   in Loop: Header=BB269_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB269_22
.LBB269_14:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB269_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB269_15:                             #   Parent Loop BB269_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB269_15
# %bb.16:                               # %.loopexit.us37
                                        #   in Loop: Header=BB269_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB269_13
# %bb.17:                               #   in Loop: Header=BB269_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB269_13
.LBB269_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI269_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI269_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI269_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI269_1)
	pcalau12i	$a0, %pc_hi20(.LCPI269_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI269_2)
	pcalau12i	$a0, %pc_hi20(.LCPI269_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI269_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB269_20
	.p2align	4, , 16
.LBB269_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB269_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB269_22
.LBB269_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB269_19
# %bb.21:                               #   in Loop: Header=BB269_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB269_19
.LBB269_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB269_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB269_26
.LBB269_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB269_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB269_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI269_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI269_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB269_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end269:
	.size	_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc, .Lfunc_end269-_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc
.LCPI270_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI270_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI270_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI270_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI270_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI270_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB270_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 15
	blt	$s0, $a0, .LBB270_11
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -14
	addi.d	$s7, $s1, 56
	addi.d	$s8, $s1, 120
	addi.d	$fp, $s0, -15
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI270_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI270_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI270_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI270_1)
	pcalau12i	$a0, %pc_hi20(.LCPI270_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI270_2)
	pcalau12i	$a0, %pc_hi20(.LCPI270_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI270_4)
	pcalau12i	$a0, %pc_hi20(.LCPI270_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI270_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB270_4
	.p2align	4, , 16
.LBB270_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB270_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB270_22
.LBB270_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB270_5 Depth 2
                                        #     Child Loop BB270_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB270_5:                              #   Parent Loop BB270_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 15
	addi.w	$a0, $a0, 15
	addi.d	$a1, $a1, 120
	addi.d	$a3, $a3, 120
	bltu	$a2, $s6, .LBB270_5
# %bb.6:                                # %.loopexit25.us
                                        #   in Loop: Header=BB270_4 Depth=1
	bge	$a0, $s0, .LBB270_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB270_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB270_8:                              # %.preheader.us
                                        #   Parent Loop BB270_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB270_8
.LBB270_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB270_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB270_3
# %bb.10:                               #   in Loop: Header=BB270_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB270_3
.LBB270_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB270_18
# %bb.12:                               # %.preheader.us36.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI270_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI270_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI270_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI270_1)
	pcalau12i	$a0, %pc_hi20(.LCPI270_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI270_2)
	pcalau12i	$a0, %pc_hi20(.LCPI270_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI270_4)
	pcalau12i	$a0, %pc_hi20(.LCPI270_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI270_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB270_14
	.p2align	4, , 16
.LBB270_13:                             # %_Z9check_sumIdEvT_.exit.us35
                                        #   in Loop: Header=BB270_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB270_22
.LBB270_14:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB270_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB270_15:                             #   Parent Loop BB270_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB270_15
# %bb.16:                               # %.loopexit.us37
                                        #   in Loop: Header=BB270_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB270_13
# %bb.17:                               #   in Loop: Header=BB270_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB270_13
.LBB270_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI270_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI270_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI270_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI270_1)
	pcalau12i	$a0, %pc_hi20(.LCPI270_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI270_2)
	pcalau12i	$a0, %pc_hi20(.LCPI270_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI270_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB270_20
	.p2align	4, , 16
.LBB270_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB270_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB270_22
.LBB270_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB270_19
# %bb.21:                               #   in Loop: Header=BB270_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB270_19
.LBB270_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB270_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB270_26
.LBB270_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB270_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB270_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI270_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI270_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB270_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end270:
	.size	_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc, .Lfunc_end270-_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc
.LCPI271_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI271_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI271_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI271_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI271_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI271_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB271_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 14
	blt	$s0, $a0, .LBB271_11
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -13
	addi.d	$s7, $s1, 56
	addi.d	$s8, $s1, 112
	addi.d	$fp, $s0, -14
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI271_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI271_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI271_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI271_1)
	pcalau12i	$a0, %pc_hi20(.LCPI271_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI271_2)
	pcalau12i	$a0, %pc_hi20(.LCPI271_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI271_4)
	pcalau12i	$a0, %pc_hi20(.LCPI271_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI271_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB271_4
	.p2align	4, , 16
.LBB271_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB271_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB271_22
.LBB271_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB271_5 Depth 2
                                        #     Child Loop BB271_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB271_5:                              #   Parent Loop BB271_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 14
	addi.w	$a0, $a0, 14
	addi.d	$a1, $a1, 112
	addi.d	$a3, $a3, 112
	bltu	$a2, $s6, .LBB271_5
# %bb.6:                                # %.loopexit25.us
                                        #   in Loop: Header=BB271_4 Depth=1
	bge	$a0, $s0, .LBB271_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB271_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB271_8:                              # %.preheader.us
                                        #   Parent Loop BB271_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB271_8
.LBB271_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB271_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB271_3
# %bb.10:                               #   in Loop: Header=BB271_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB271_3
.LBB271_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB271_18
# %bb.12:                               # %.preheader.us36.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI271_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI271_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI271_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI271_1)
	pcalau12i	$a0, %pc_hi20(.LCPI271_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI271_2)
	pcalau12i	$a0, %pc_hi20(.LCPI271_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI271_4)
	pcalau12i	$a0, %pc_hi20(.LCPI271_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI271_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB271_14
	.p2align	4, , 16
.LBB271_13:                             # %_Z9check_sumIdEvT_.exit.us35
                                        #   in Loop: Header=BB271_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB271_22
.LBB271_14:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB271_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB271_15:                             #   Parent Loop BB271_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB271_15
# %bb.16:                               # %.loopexit.us37
                                        #   in Loop: Header=BB271_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB271_13
# %bb.17:                               #   in Loop: Header=BB271_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB271_13
.LBB271_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI271_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI271_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI271_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI271_1)
	pcalau12i	$a0, %pc_hi20(.LCPI271_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI271_2)
	pcalau12i	$a0, %pc_hi20(.LCPI271_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI271_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB271_20
	.p2align	4, , 16
.LBB271_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB271_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB271_22
.LBB271_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB271_19
# %bb.21:                               #   in Loop: Header=BB271_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB271_19
.LBB271_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB271_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB271_26
.LBB271_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB271_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB271_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI271_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI271_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB271_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end271:
	.size	_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc, .Lfunc_end271-_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc
.LCPI272_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI272_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI272_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI272_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI272_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI272_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB272_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 13
	blt	$s0, $a0, .LBB272_11
# %bb.2:                                # %.preheader24.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -12
	addi.d	$s7, $s1, 48
	addi.d	$s8, $s1, 104
	addi.d	$fp, $s0, -13
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI272_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI272_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI272_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI272_1)
	pcalau12i	$a0, %pc_hi20(.LCPI272_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI272_2)
	pcalau12i	$a0, %pc_hi20(.LCPI272_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI272_4)
	pcalau12i	$a0, %pc_hi20(.LCPI272_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI272_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB272_4
	.p2align	4, , 16
.LBB272_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB272_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB272_22
.LBB272_4:                              # %.preheader24.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB272_5 Depth 2
                                        #     Child Loop BB272_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB272_5:                              #   Parent Loop BB272_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 13
	addi.w	$a0, $a0, 13
	addi.d	$a1, $a1, 104
	addi.d	$a3, $a3, 104
	bltu	$a2, $s6, .LBB272_5
# %bb.6:                                # %.loopexit25.us
                                        #   in Loop: Header=BB272_4 Depth=1
	bge	$a0, $s0, .LBB272_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB272_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB272_8:                              # %.preheader.us
                                        #   Parent Loop BB272_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB272_8
.LBB272_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB272_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB272_3
# %bb.10:                               #   in Loop: Header=BB272_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB272_3
.LBB272_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB272_18
# %bb.12:                               # %.preheader.us36.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI272_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI272_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI272_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI272_1)
	pcalau12i	$a0, %pc_hi20(.LCPI272_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI272_2)
	pcalau12i	$a0, %pc_hi20(.LCPI272_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI272_4)
	pcalau12i	$a0, %pc_hi20(.LCPI272_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI272_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB272_14
	.p2align	4, , 16
.LBB272_13:                             # %_Z9check_sumIdEvT_.exit.us35
                                        #   in Loop: Header=BB272_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB272_22
.LBB272_14:                             # %.preheader.us36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB272_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB272_15:                             #   Parent Loop BB272_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB272_15
# %bb.16:                               # %.loopexit.us37
                                        #   in Loop: Header=BB272_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB272_13
# %bb.17:                               #   in Loop: Header=BB272_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB272_13
.LBB272_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI272_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI272_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI272_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI272_1)
	pcalau12i	$a0, %pc_hi20(.LCPI272_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI272_2)
	pcalau12i	$a0, %pc_hi20(.LCPI272_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI272_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB272_20
	.p2align	4, , 16
.LBB272_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB272_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB272_22
.LBB272_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB272_19
# %bb.21:                               #   in Loop: Header=BB272_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB272_19
.LBB272_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB272_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB272_26
.LBB272_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB272_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB272_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI272_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI272_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB272_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end272:
	.size	_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc, .Lfunc_end272-_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc
.LCPI273_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI273_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI273_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI273_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI273_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI273_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB273_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 12
	blt	$s0, $a0, .LBB273_11
# %bb.2:                                # %.preheader23.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -11
	addi.d	$s7, $s1, 48
	addi.d	$s8, $s1, 96
	addi.d	$fp, $s0, -12
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI273_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI273_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI273_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI273_1)
	pcalau12i	$a0, %pc_hi20(.LCPI273_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI273_2)
	pcalau12i	$a0, %pc_hi20(.LCPI273_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI273_4)
	pcalau12i	$a0, %pc_hi20(.LCPI273_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI273_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB273_4
	.p2align	4, , 16
.LBB273_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB273_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB273_22
.LBB273_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB273_5 Depth 2
                                        #     Child Loop BB273_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB273_5:                              #   Parent Loop BB273_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 12
	addi.w	$a0, $a0, 12
	addi.d	$a1, $a1, 96
	addi.d	$a3, $a3, 96
	bltu	$a2, $s6, .LBB273_5
# %bb.6:                                # %.loopexit24.us
                                        #   in Loop: Header=BB273_4 Depth=1
	bge	$a0, $s0, .LBB273_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB273_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB273_8:                              # %.preheader.us
                                        #   Parent Loop BB273_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB273_8
.LBB273_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB273_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB273_3
# %bb.10:                               #   in Loop: Header=BB273_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB273_3
.LBB273_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB273_18
# %bb.12:                               # %.preheader.us35.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI273_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI273_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI273_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI273_1)
	pcalau12i	$a0, %pc_hi20(.LCPI273_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI273_2)
	pcalau12i	$a0, %pc_hi20(.LCPI273_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI273_4)
	pcalau12i	$a0, %pc_hi20(.LCPI273_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI273_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB273_14
	.p2align	4, , 16
.LBB273_13:                             # %_Z9check_sumIdEvT_.exit.us34
                                        #   in Loop: Header=BB273_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB273_22
.LBB273_14:                             # %.preheader.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB273_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB273_15:                             #   Parent Loop BB273_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB273_15
# %bb.16:                               # %.loopexit.us36
                                        #   in Loop: Header=BB273_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB273_13
# %bb.17:                               #   in Loop: Header=BB273_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB273_13
.LBB273_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI273_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI273_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI273_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI273_1)
	pcalau12i	$a0, %pc_hi20(.LCPI273_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI273_2)
	pcalau12i	$a0, %pc_hi20(.LCPI273_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI273_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB273_20
	.p2align	4, , 16
.LBB273_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB273_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB273_22
.LBB273_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB273_19
# %bb.21:                               #   in Loop: Header=BB273_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB273_19
.LBB273_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB273_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB273_26
.LBB273_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB273_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB273_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI273_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI273_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB273_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end273:
	.size	_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc, .Lfunc_end273-_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN15goto_loop_testsILi10EdE7do_testEPKdPKc,"axG",@progbits,_ZN15goto_loop_testsILi10EdE7do_testEPKdPKc,comdat
	.weak	_ZN15goto_loop_testsILi10EdE7do_testEPKdPKc # -- Begin function _ZN15goto_loop_testsILi10EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN15goto_loop_testsILi10EdE7do_testEPKdPKc,@function
_ZN15goto_loop_testsILi10EdE7do_testEPKdPKc: # @_ZN15goto_loop_testsILi10EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s0, $a0, %pc_lo12(temp_string)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	move	$a0, $fp
	move	$a1, $s1
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 100
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 200
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 300
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 400
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 500
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 600
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 700
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 800
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 900
	move	$a0, $fp
	move	$a1, $s1
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end274:
	.size	_ZN15goto_loop_testsILi10EdE7do_testEPKdPKc, .Lfunc_end274-_ZN15goto_loop_testsILi10EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc
.LCPI275_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI275_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI275_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI275_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI275_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI275_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB275_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 11
	blt	$s0, $a0, .LBB275_11
# %bb.2:                                # %.preheader23.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -10
	addi.d	$s7, $s1, 40
	addi.d	$s8, $s1, 88
	addi.d	$fp, $s0, -11
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI275_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI275_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI275_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI275_1)
	pcalau12i	$a0, %pc_hi20(.LCPI275_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI275_2)
	pcalau12i	$a0, %pc_hi20(.LCPI275_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI275_4)
	pcalau12i	$a0, %pc_hi20(.LCPI275_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI275_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB275_4
	.p2align	4, , 16
.LBB275_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB275_4 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s2, $s2, 1
	bge	$s2, $a0, .LBB275_22
.LBB275_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB275_5 Depth 2
                                        #     Child Loop BB275_8 Depth 2
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	move	$a1, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB275_5:                              #   Parent Loop BB275_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a1, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a5, $a2
	move	$a4, $a3
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 11
	addi.w	$a0, $a0, 11
	addi.d	$a1, $a1, 88
	addi.d	$a3, $a3, 88
	bltu	$a2, $s6, .LBB275_5
# %bb.6:                                # %.loopexit24.us
                                        #   in Loop: Header=BB275_4 Depth=1
	bge	$a0, $s0, .LBB275_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB275_4 Depth=1
	sub.d	$a0, $fp, $a5
	.p2align	4, , 16
.LBB275_8:                              # %.preheader.us
                                        #   Parent Loop BB275_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a4, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 8
	bnez	$a0, .LBB275_8
.LBB275_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB275_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB275_3
# %bb.10:                               #   in Loop: Header=BB275_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB275_3
.LBB275_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB275_18
# %bb.12:                               # %.preheader.us35.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI275_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI275_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI275_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI275_1)
	pcalau12i	$a0, %pc_hi20(.LCPI275_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI275_2)
	pcalau12i	$a0, %pc_hi20(.LCPI275_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI275_4)
	pcalau12i	$a0, %pc_hi20(.LCPI275_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI275_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB275_14
	.p2align	4, , 16
.LBB275_13:                             # %_Z9check_sumIdEvT_.exit.us34
                                        #   in Loop: Header=BB275_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB275_22
.LBB275_14:                             # %.preheader.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB275_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB275_15:                             #   Parent Loop BB275_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB275_15
# %bb.16:                               # %.loopexit.us36
                                        #   in Loop: Header=BB275_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB275_13
# %bb.17:                               #   in Loop: Header=BB275_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB275_13
.LBB275_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI275_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI275_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI275_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI275_1)
	pcalau12i	$a0, %pc_hi20(.LCPI275_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI275_2)
	pcalau12i	$a0, %pc_hi20(.LCPI275_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI275_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB275_20
	.p2align	4, , 16
.LBB275_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB275_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB275_22
.LBB275_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB275_19
# %bb.21:                               #   in Loop: Header=BB275_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB275_19
.LBB275_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB275_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB275_26
.LBB275_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB275_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB275_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI275_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI275_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB275_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end275:
	.size	_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc, .Lfunc_end275-_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc
.LCPI276_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI276_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI276_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI276_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI276_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI276_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB276_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 10
	blt	$s0, $a0, .LBB276_11
# %bb.2:                                # %.preheader23.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -9
	addi.d	$s7, $s1, 40
	addi.d	$s8, $s1, 80
	addi.d	$fp, $s0, -10
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI276_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI276_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI276_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI276_1)
	pcalau12i	$a0, %pc_hi20(.LCPI276_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI276_2)
	pcalau12i	$a0, %pc_hi20(.LCPI276_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI276_4)
	pcalau12i	$a0, %pc_hi20(.LCPI276_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI276_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB276_4
	.p2align	4, , 16
.LBB276_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB276_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB276_22
.LBB276_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB276_5 Depth 2
                                        #     Child Loop BB276_8 Depth 2
	move	$a0, $zero
	move	$a3, $zero
	move	$a4, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB276_5:                              #   Parent Loop BB276_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a6, $a3
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a3, $a3, 10
	addi.w	$a0, $a0, 10
	addi.d	$a2, $a2, 80
	addi.d	$a4, $a4, 80
	bltu	$a3, $s6, .LBB276_5
# %bb.6:                                # %.loopexit24.us
                                        #   in Loop: Header=BB276_4 Depth=1
	bge	$a0, $s0, .LBB276_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB276_4 Depth=1
	sub.d	$a0, $fp, $a6
	.p2align	4, , 16
.LBB276_8:                              # %.preheader.us
                                        #   Parent Loop BB276_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a5, $a5, 8
	bnez	$a0, .LBB276_8
.LBB276_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB276_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB276_3
# %bb.10:                               #   in Loop: Header=BB276_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB276_3
.LBB276_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB276_18
# %bb.12:                               # %.preheader.us35.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI276_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI276_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI276_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI276_1)
	pcalau12i	$a0, %pc_hi20(.LCPI276_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI276_2)
	pcalau12i	$a0, %pc_hi20(.LCPI276_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI276_4)
	pcalau12i	$a0, %pc_hi20(.LCPI276_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI276_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB276_14
	.p2align	4, , 16
.LBB276_13:                             # %_Z9check_sumIdEvT_.exit.us34
                                        #   in Loop: Header=BB276_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB276_22
.LBB276_14:                             # %.preheader.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB276_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB276_15:                             #   Parent Loop BB276_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB276_15
# %bb.16:                               # %.loopexit.us36
                                        #   in Loop: Header=BB276_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB276_13
# %bb.17:                               #   in Loop: Header=BB276_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB276_13
.LBB276_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI276_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI276_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI276_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI276_1)
	pcalau12i	$a0, %pc_hi20(.LCPI276_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI276_2)
	pcalau12i	$a0, %pc_hi20(.LCPI276_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI276_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB276_20
	.p2align	4, , 16
.LBB276_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB276_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB276_22
.LBB276_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB276_19
# %bb.21:                               #   in Loop: Header=BB276_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB276_19
.LBB276_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB276_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB276_26
.LBB276_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB276_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB276_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI276_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI276_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB276_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end276:
	.size	_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc, .Lfunc_end276-_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc
.LCPI277_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI277_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI277_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI277_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI277_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI277_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB277_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 9
	blt	$s0, $a0, .LBB277_11
# %bb.2:                                # %.preheader23.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -8
	addi.d	$s7, $s1, 32
	addi.d	$s8, $s1, 72
	addi.d	$fp, $s0, -9
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI277_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI277_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI277_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI277_1)
	pcalau12i	$a0, %pc_hi20(.LCPI277_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI277_2)
	pcalau12i	$a0, %pc_hi20(.LCPI277_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI277_4)
	pcalau12i	$a0, %pc_hi20(.LCPI277_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI277_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB277_4
	.p2align	4, , 16
.LBB277_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB277_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB277_22
.LBB277_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB277_5 Depth 2
                                        #     Child Loop BB277_8 Depth 2
	move	$a0, $zero
	move	$a3, $zero
	move	$a4, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB277_5:                              #   Parent Loop BB277_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a6, $a3
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a3, $a3, 9
	addi.w	$a0, $a0, 9
	addi.d	$a2, $a2, 72
	addi.d	$a4, $a4, 72
	bltu	$a3, $s6, .LBB277_5
# %bb.6:                                # %.loopexit24.us
                                        #   in Loop: Header=BB277_4 Depth=1
	bge	$a0, $s0, .LBB277_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB277_4 Depth=1
	sub.d	$a0, $fp, $a6
	.p2align	4, , 16
.LBB277_8:                              # %.preheader.us
                                        #   Parent Loop BB277_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a5, $a5, 8
	bnez	$a0, .LBB277_8
.LBB277_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB277_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB277_3
# %bb.10:                               #   in Loop: Header=BB277_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB277_3
.LBB277_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB277_18
# %bb.12:                               # %.preheader.us35.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI277_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI277_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI277_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI277_1)
	pcalau12i	$a0, %pc_hi20(.LCPI277_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI277_2)
	pcalau12i	$a0, %pc_hi20(.LCPI277_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI277_4)
	pcalau12i	$a0, %pc_hi20(.LCPI277_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI277_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB277_14
	.p2align	4, , 16
.LBB277_13:                             # %_Z9check_sumIdEvT_.exit.us34
                                        #   in Loop: Header=BB277_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB277_22
.LBB277_14:                             # %.preheader.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB277_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB277_15:                             #   Parent Loop BB277_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB277_15
# %bb.16:                               # %.loopexit.us36
                                        #   in Loop: Header=BB277_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB277_13
# %bb.17:                               #   in Loop: Header=BB277_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB277_13
.LBB277_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI277_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI277_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI277_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI277_1)
	pcalau12i	$a0, %pc_hi20(.LCPI277_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI277_2)
	pcalau12i	$a0, %pc_hi20(.LCPI277_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI277_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB277_20
	.p2align	4, , 16
.LBB277_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB277_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB277_22
.LBB277_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB277_19
# %bb.21:                               #   in Loop: Header=BB277_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB277_19
.LBB277_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB277_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB277_26
.LBB277_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB277_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB277_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI277_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI277_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB277_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end277:
	.size	_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc, .Lfunc_end277-_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc
.LCPI278_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI278_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI278_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI278_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI278_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI278_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB278_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 8
	blt	$s0, $a0, .LBB278_11
# %bb.2:                                # %.preheader23.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -7
	addi.d	$s7, $s1, 32
	addi.d	$s8, $s1, 64
	addi.d	$fp, $s0, -8
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI278_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI278_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI278_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI278_1)
	pcalau12i	$a0, %pc_hi20(.LCPI278_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI278_2)
	pcalau12i	$a0, %pc_hi20(.LCPI278_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI278_4)
	pcalau12i	$a0, %pc_hi20(.LCPI278_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI278_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB278_4
	.p2align	4, , 16
.LBB278_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB278_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB278_22
.LBB278_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB278_5 Depth 2
                                        #     Child Loop BB278_8 Depth 2
	move	$a0, $zero
	move	$a3, $zero
	move	$a4, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB278_5:                              #   Parent Loop BB278_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a6, $a3
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a3, $a3, 8
	addi.w	$a0, $a0, 8
	addi.d	$a2, $a2, 64
	addi.d	$a4, $a4, 64
	bltu	$a3, $s6, .LBB278_5
# %bb.6:                                # %.loopexit24.us
                                        #   in Loop: Header=BB278_4 Depth=1
	bge	$a0, $s0, .LBB278_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB278_4 Depth=1
	sub.d	$a0, $fp, $a6
	.p2align	4, , 16
.LBB278_8:                              # %.preheader.us
                                        #   Parent Loop BB278_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a5, $a5, 8
	bnez	$a0, .LBB278_8
.LBB278_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB278_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB278_3
# %bb.10:                               #   in Loop: Header=BB278_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB278_3
.LBB278_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB278_18
# %bb.12:                               # %.preheader.us35.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI278_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI278_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI278_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI278_1)
	pcalau12i	$a0, %pc_hi20(.LCPI278_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI278_2)
	pcalau12i	$a0, %pc_hi20(.LCPI278_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI278_4)
	pcalau12i	$a0, %pc_hi20(.LCPI278_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI278_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB278_14
	.p2align	4, , 16
.LBB278_13:                             # %_Z9check_sumIdEvT_.exit.us34
                                        #   in Loop: Header=BB278_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB278_22
.LBB278_14:                             # %.preheader.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB278_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB278_15:                             #   Parent Loop BB278_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB278_15
# %bb.16:                               # %.loopexit.us36
                                        #   in Loop: Header=BB278_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB278_13
# %bb.17:                               #   in Loop: Header=BB278_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB278_13
.LBB278_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI278_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI278_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI278_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI278_1)
	pcalau12i	$a0, %pc_hi20(.LCPI278_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI278_2)
	pcalau12i	$a0, %pc_hi20(.LCPI278_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI278_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB278_20
	.p2align	4, , 16
.LBB278_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB278_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB278_22
.LBB278_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB278_19
# %bb.21:                               #   in Loop: Header=BB278_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB278_19
.LBB278_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB278_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB278_26
.LBB278_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB278_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB278_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI278_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI278_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB278_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end278:
	.size	_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc, .Lfunc_end278-_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc
.LCPI279_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI279_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI279_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI279_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI279_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI279_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB279_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 7
	blt	$s0, $a0, .LBB279_11
# %bb.2:                                # %.preheader23.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -6
	addi.d	$s7, $s1, 24
	addi.d	$s8, $s1, 56
	addi.d	$fp, $s0, -7
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI279_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI279_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI279_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI279_1)
	pcalau12i	$a0, %pc_hi20(.LCPI279_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI279_2)
	pcalau12i	$a0, %pc_hi20(.LCPI279_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI279_4)
	pcalau12i	$a0, %pc_hi20(.LCPI279_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI279_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB279_4
	.p2align	4, , 16
.LBB279_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB279_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB279_22
.LBB279_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB279_5 Depth 2
                                        #     Child Loop BB279_8 Depth 2
	move	$a0, $zero
	move	$a3, $zero
	move	$a4, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB279_5:                              #   Parent Loop BB279_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a6, $a3
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a3, $a3, 7
	addi.w	$a0, $a0, 7
	addi.d	$a2, $a2, 56
	addi.d	$a4, $a4, 56
	bltu	$a3, $s6, .LBB279_5
# %bb.6:                                # %.loopexit24.us
                                        #   in Loop: Header=BB279_4 Depth=1
	bge	$a0, $s0, .LBB279_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB279_4 Depth=1
	sub.d	$a0, $fp, $a6
	.p2align	4, , 16
.LBB279_8:                              # %.preheader.us
                                        #   Parent Loop BB279_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a5, $a5, 8
	bnez	$a0, .LBB279_8
.LBB279_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB279_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB279_3
# %bb.10:                               #   in Loop: Header=BB279_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB279_3
.LBB279_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB279_18
# %bb.12:                               # %.preheader.us35.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI279_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI279_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI279_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI279_1)
	pcalau12i	$a0, %pc_hi20(.LCPI279_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI279_2)
	pcalau12i	$a0, %pc_hi20(.LCPI279_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI279_4)
	pcalau12i	$a0, %pc_hi20(.LCPI279_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI279_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB279_14
	.p2align	4, , 16
.LBB279_13:                             # %_Z9check_sumIdEvT_.exit.us34
                                        #   in Loop: Header=BB279_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB279_22
.LBB279_14:                             # %.preheader.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB279_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB279_15:                             #   Parent Loop BB279_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB279_15
# %bb.16:                               # %.loopexit.us36
                                        #   in Loop: Header=BB279_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB279_13
# %bb.17:                               #   in Loop: Header=BB279_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB279_13
.LBB279_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI279_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI279_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI279_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI279_1)
	pcalau12i	$a0, %pc_hi20(.LCPI279_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI279_2)
	pcalau12i	$a0, %pc_hi20(.LCPI279_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI279_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB279_20
	.p2align	4, , 16
.LBB279_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB279_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB279_22
.LBB279_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB279_19
# %bb.21:                               #   in Loop: Header=BB279_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB279_19
.LBB279_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB279_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB279_26
.LBB279_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB279_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB279_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI279_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI279_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB279_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end279:
	.size	_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc, .Lfunc_end279-_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc
.LCPI280_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI280_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI280_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI280_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI280_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI280_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB280_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 6
	blt	$s0, $a0, .LBB280_11
# %bb.2:                                # %.preheader23.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -5
	addi.d	$s7, $s1, 24
	addi.d	$s8, $s1, 48
	addi.d	$fp, $s0, -6
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI280_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI280_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI280_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI280_1)
	pcalau12i	$a0, %pc_hi20(.LCPI280_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI280_2)
	pcalau12i	$a0, %pc_hi20(.LCPI280_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI280_4)
	pcalau12i	$a0, %pc_hi20(.LCPI280_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI280_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB280_4
	.p2align	4, , 16
.LBB280_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB280_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB280_22
.LBB280_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB280_5 Depth 2
                                        #     Child Loop BB280_8 Depth 2
	move	$a0, $zero
	move	$a3, $zero
	move	$a4, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB280_5:                              #   Parent Loop BB280_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a6, $a3
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a3, $a3, 6
	addi.d	$a2, $a2, 48
	addi.w	$a0, $a0, 6
	addi.d	$a4, $a4, 48
	bltu	$a3, $s6, .LBB280_5
# %bb.6:                                # %.loopexit24.us
                                        #   in Loop: Header=BB280_4 Depth=1
	bge	$a0, $s0, .LBB280_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB280_4 Depth=1
	sub.d	$a0, $fp, $a6
	.p2align	4, , 16
.LBB280_8:                              # %.preheader.us
                                        #   Parent Loop BB280_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a5, $a5, 8
	bnez	$a0, .LBB280_8
.LBB280_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB280_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB280_3
# %bb.10:                               #   in Loop: Header=BB280_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB280_3
.LBB280_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB280_18
# %bb.12:                               # %.preheader.us35.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI280_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI280_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI280_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI280_1)
	pcalau12i	$a0, %pc_hi20(.LCPI280_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI280_2)
	pcalau12i	$a0, %pc_hi20(.LCPI280_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI280_4)
	pcalau12i	$a0, %pc_hi20(.LCPI280_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI280_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB280_14
	.p2align	4, , 16
.LBB280_13:                             # %_Z9check_sumIdEvT_.exit.us34
                                        #   in Loop: Header=BB280_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB280_22
.LBB280_14:                             # %.preheader.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB280_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB280_15:                             #   Parent Loop BB280_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB280_15
# %bb.16:                               # %.loopexit.us36
                                        #   in Loop: Header=BB280_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB280_13
# %bb.17:                               #   in Loop: Header=BB280_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB280_13
.LBB280_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI280_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI280_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI280_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI280_1)
	pcalau12i	$a0, %pc_hi20(.LCPI280_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI280_2)
	pcalau12i	$a0, %pc_hi20(.LCPI280_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI280_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB280_20
	.p2align	4, , 16
.LBB280_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB280_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB280_22
.LBB280_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB280_19
# %bb.21:                               #   in Loop: Header=BB280_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB280_19
.LBB280_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB280_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB280_26
.LBB280_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB280_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB280_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI280_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI280_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB280_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end280:
	.size	_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc, .Lfunc_end280-_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc
.LCPI281_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI281_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI281_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI281_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI281_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI281_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB281_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 5
	blt	$s0, $a0, .LBB281_11
# %bb.2:                                # %.preheader23.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -4
	addi.d	$s7, $s1, 16
	addi.d	$s8, $s1, 40
	addi.d	$fp, $s0, -5
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI281_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI281_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI281_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI281_1)
	pcalau12i	$a0, %pc_hi20(.LCPI281_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI281_2)
	pcalau12i	$a0, %pc_hi20(.LCPI281_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI281_4)
	pcalau12i	$a0, %pc_hi20(.LCPI281_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI281_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB281_4
	.p2align	4, , 16
.LBB281_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB281_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB281_22
.LBB281_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB281_5 Depth 2
                                        #     Child Loop BB281_8 Depth 2
	move	$a0, $zero
	move	$a3, $zero
	move	$a4, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB281_5:                              #   Parent Loop BB281_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a6, $a3
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a3, $a3, 5
	addi.d	$a2, $a2, 40
	addi.w	$a0, $a0, 5
	addi.d	$a4, $a4, 40
	bltu	$a3, $s6, .LBB281_5
# %bb.6:                                # %.loopexit24.us
                                        #   in Loop: Header=BB281_4 Depth=1
	bge	$a0, $s0, .LBB281_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB281_4 Depth=1
	sub.d	$a0, $fp, $a6
	.p2align	4, , 16
.LBB281_8:                              # %.preheader.us
                                        #   Parent Loop BB281_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a5, $a5, 8
	bnez	$a0, .LBB281_8
.LBB281_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB281_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB281_3
# %bb.10:                               #   in Loop: Header=BB281_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB281_3
.LBB281_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB281_18
# %bb.12:                               # %.preheader.us35.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI281_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI281_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI281_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI281_1)
	pcalau12i	$a0, %pc_hi20(.LCPI281_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI281_2)
	pcalau12i	$a0, %pc_hi20(.LCPI281_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI281_4)
	pcalau12i	$a0, %pc_hi20(.LCPI281_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI281_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB281_14
	.p2align	4, , 16
.LBB281_13:                             # %_Z9check_sumIdEvT_.exit.us34
                                        #   in Loop: Header=BB281_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB281_22
.LBB281_14:                             # %.preheader.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB281_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB281_15:                             #   Parent Loop BB281_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB281_15
# %bb.16:                               # %.loopexit.us36
                                        #   in Loop: Header=BB281_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB281_13
# %bb.17:                               #   in Loop: Header=BB281_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB281_13
.LBB281_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI281_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI281_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI281_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI281_1)
	pcalau12i	$a0, %pc_hi20(.LCPI281_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI281_2)
	pcalau12i	$a0, %pc_hi20(.LCPI281_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI281_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB281_20
	.p2align	4, , 16
.LBB281_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB281_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB281_22
.LBB281_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB281_19
# %bb.21:                               #   in Loop: Header=BB281_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB281_19
.LBB281_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB281_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB281_26
.LBB281_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB281_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB281_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI281_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI281_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB281_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end281:
	.size	_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc, .Lfunc_end281-_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc
.LCPI282_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI282_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI282_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI282_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI282_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI282_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB282_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 4
	blt	$s0, $a0, .LBB282_11
# %bb.2:                                # %.preheader23.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -3
	addi.d	$s7, $s1, 16
	addi.d	$s8, $s1, 32
	addi.d	$fp, $s0, -4
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI282_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI282_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI282_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI282_1)
	pcalau12i	$a0, %pc_hi20(.LCPI282_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI282_2)
	pcalau12i	$a0, %pc_hi20(.LCPI282_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI282_4)
	pcalau12i	$a0, %pc_hi20(.LCPI282_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI282_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB282_4
	.p2align	4, , 16
.LBB282_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB282_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB282_22
.LBB282_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB282_5 Depth 2
                                        #     Child Loop BB282_8 Depth 2
	move	$a0, $zero
	move	$a3, $zero
	move	$a4, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB282_5:                              #   Parent Loop BB282_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a6, $a3
	move	$a5, $a4
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a3, $a3, 4
	addi.d	$a2, $a2, 32
	addi.w	$a0, $a0, 4
	addi.d	$a4, $a4, 32
	bltu	$a3, $s6, .LBB282_5
# %bb.6:                                # %.loopexit24.us
                                        #   in Loop: Header=BB282_4 Depth=1
	bge	$a0, $s0, .LBB282_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB282_4 Depth=1
	sub.d	$a0, $fp, $a6
	.p2align	4, , 16
.LBB282_8:                              # %.preheader.us
                                        #   Parent Loop BB282_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a5, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a5, $a5, 8
	bnez	$a0, .LBB282_8
.LBB282_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB282_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB282_3
# %bb.10:                               #   in Loop: Header=BB282_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB282_3
.LBB282_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB282_18
# %bb.12:                               # %.preheader.us35.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI282_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI282_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI282_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI282_1)
	pcalau12i	$a0, %pc_hi20(.LCPI282_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI282_2)
	pcalau12i	$a0, %pc_hi20(.LCPI282_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI282_4)
	pcalau12i	$a0, %pc_hi20(.LCPI282_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI282_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB282_14
	.p2align	4, , 16
.LBB282_13:                             # %_Z9check_sumIdEvT_.exit.us34
                                        #   in Loop: Header=BB282_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB282_22
.LBB282_14:                             # %.preheader.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB282_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB282_15:                             #   Parent Loop BB282_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB282_15
# %bb.16:                               # %.loopexit.us36
                                        #   in Loop: Header=BB282_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB282_13
# %bb.17:                               #   in Loop: Header=BB282_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB282_13
.LBB282_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI282_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI282_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI282_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI282_1)
	pcalau12i	$a0, %pc_hi20(.LCPI282_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI282_2)
	pcalau12i	$a0, %pc_hi20(.LCPI282_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI282_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB282_20
	.p2align	4, , 16
.LBB282_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB282_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB282_22
.LBB282_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB282_19
# %bb.21:                               #   in Loop: Header=BB282_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB282_19
.LBB282_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB282_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB282_26
.LBB282_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB282_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB282_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI282_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI282_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB282_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end282:
	.size	_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc, .Lfunc_end282-_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc
.LCPI283_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI283_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI283_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI283_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI283_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI283_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB283_22
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 3
	blt	$s0, $a0, .LBB283_11
# %bb.2:                                # %.preheader23.us.preheader
	move	$s2, $zero
	addi.w	$s6, $s0, -2
	addi.d	$s7, $s1, 16
	addi.d	$s8, $s1, 24
	addi.d	$fp, $s0, -3
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI283_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI283_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI283_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI283_1)
	pcalau12i	$a0, %pc_hi20(.LCPI283_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI283_2)
	pcalau12i	$a0, %pc_hi20(.LCPI283_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI283_4)
	pcalau12i	$a0, %pc_hi20(.LCPI283_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI283_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB283_4
	.p2align	4, , 16
.LBB283_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB283_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB283_22
.LBB283_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB283_5 Depth 2
                                        #     Child Loop BB283_8 Depth 2
	move	$a0, $zero
	move	$a4, $zero
	move	$a5, $s8
	move	$a2, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB283_5:                              #   Parent Loop BB283_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a6, $a4
	move	$a3, $a5
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a4, $a4, 3
	addi.d	$a2, $a2, 24
	addi.w	$a0, $a0, 3
	addi.d	$a5, $a5, 24
	bltu	$a4, $s6, .LBB283_5
# %bb.6:                                # %.loopexit24.us
                                        #   in Loop: Header=BB283_4 Depth=1
	bge	$a0, $s0, .LBB283_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB283_4 Depth=1
	sub.d	$a0, $fp, $a6
	.p2align	4, , 16
.LBB283_8:                              # %.preheader.us
                                        #   Parent Loop BB283_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 8
	bnez	$a0, .LBB283_8
.LBB283_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB283_4 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB283_3
# %bb.10:                               #   in Loop: Header=BB283_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB283_3
.LBB283_11:                             # %.lr.ph.split
	move	$fp, $zero
	blez	$s0, .LBB283_18
# %bb.12:                               # %.preheader.us35.preheader
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI283_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI283_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI283_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI283_1)
	pcalau12i	$a0, %pc_hi20(.LCPI283_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI283_2)
	pcalau12i	$a0, %pc_hi20(.LCPI283_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI283_4)
	pcalau12i	$a0, %pc_hi20(.LCPI283_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI283_3)
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB283_14
	.p2align	4, , 16
.LBB283_13:                             # %_Z9check_sumIdEvT_.exit.us34
                                        #   in Loop: Header=BB283_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB283_22
.LBB283_14:                             # %.preheader.us35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB283_15 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB283_15:                             #   Parent Loop BB283_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB283_15
# %bb.16:                               # %.loopexit.us36
                                        #   in Loop: Header=BB283_14 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB283_13
# %bb.17:                               #   in Loop: Header=BB283_14 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB283_13
.LBB283_18:                             # %.lr.ph.split.split.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI283_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI283_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI283_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI283_1)
	pcalau12i	$a0, %pc_hi20(.LCPI283_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI283_2)
	pcalau12i	$a0, %pc_hi20(.LCPI283_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI283_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB283_20
	.p2align	4, , 16
.LBB283_19:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB283_20 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB283_22
.LBB283_20:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB283_19
# %bb.21:                               #   in Loop: Header=BB283_20 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB283_19
.LBB283_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB283_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB283_26
.LBB283_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB283_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB283_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI283_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI283_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB283_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end283:
	.size	_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc, .Lfunc_end283-_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc
.LCPI284_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI284_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI284_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI284_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI284_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI284_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 112                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 104                  # 8-byte Folded Spill
	fst.d	$fs2, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 72                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 0                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB284_20
# %bb.1:                                # %.lr.ph
	ori	$a0, $zero, 2
	blt	$s0, $a0, .LBB284_11
# %bb.2:                                # %.preheader23.us.preheader
	move	$s5, $zero
	addi.w	$s6, $s0, -1
	addi.d	$s7, $s1, 8
	addi.d	$s8, $s1, 16
	addi.d	$fp, $s0, -2
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI284_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI284_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI284_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI284_1)
	pcalau12i	$a0, %pc_hi20(.LCPI284_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI284_2)
	pcalau12i	$a0, %pc_hi20(.LCPI284_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI284_4)
	pcalau12i	$a0, %pc_hi20(.LCPI284_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI284_3)
	pcalau12i	$s3, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s1, $a0, %pc_lo12(.L.str.19)
	b	.LBB284_4
	.p2align	4, , 16
.LBB284_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB284_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB284_20
.LBB284_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB284_5 Depth 2
                                        #     Child Loop BB284_8 Depth 2
	move	$a2, $zero
	move	$a4, $zero
	move	$a5, $s8
	move	$a3, $s7
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB284_5:                              #   Parent Loop BB284_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	move	$a6, $a4
	move	$a0, $a5
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a4, $a4, 2
	addi.d	$a3, $a3, 16
	addi.w	$a2, $a2, 2
	addi.d	$a5, $a5, 16
	bltu	$a4, $s6, .LBB284_5
# %bb.6:                                # %.loopexit24.us
                                        #   in Loop: Header=BB284_4 Depth=1
	bge	$a2, $s0, .LBB284_9
# %bb.7:                                # %.preheader.us.preheader
                                        #   in Loop: Header=BB284_4 Depth=1
	sub.d	$a2, $fp, $a6
	.p2align	4, , 16
.LBB284_8:                              # %.preheader.us
                                        #   Parent Loop BB284_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, -1
	addi.d	$a0, $a0, 8
	bnez	$a2, .LBB284_8
.LBB284_9:                              # %.loopexit.us
                                        #   in Loop: Header=BB284_4 Depth=1
	fld.d	$fa1, $s3, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB284_3
# %bb.10:                               #   in Loop: Header=BB284_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB284_3
.LBB284_11:                             # %.lr.ph.split
	pcalau12i	$s5, %pc_hi20(init_value)
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	move	$fp, $zero
	ori	$a0, $zero, 1
	bne	$s0, $a0, .LBB284_16
# %bb.12:                               # %.preheader.us35.preheader
	ori	$a0, $zero, 0
	lu32i.d	$a0, -516992
	lu52i.d	$a0, $a0, 1036
	vreplgr2vr.d	$vr4, $a0
	ori	$a0, $zero, 0
	lu32i.d	$a0, -393216
	lu52i.d	$a0, $a0, -1022
	vreplgr2vr.d	$vr5, $a0
	ori	$a0, $zero, 0
	lu32i.d	$a0, -268678
	lu52i.d	$a0, $a0, 1042
	vreplgr2vr.d	$vr6, $a0
	pcalau12i	$a0, %pc_hi20(.LCPI284_2)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI284_2)
	pcalau12i	$a0, %pc_hi20(.LCPI284_4)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI284_4)
	pcalau12i	$a0, %pc_hi20(.LCPI284_3)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI284_3)
	movgr2fr.d	$fs3, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	vst	$vr5, $sp, 32                   # 16-byte Folded Spill
	vst	$vr6, $sp, 16                   # 16-byte Folded Spill
	b	.LBB284_14
	.p2align	4, , 16
.LBB284_13:                             # %_Z9check_sumIdEvT_.exit.us34
                                        #   in Loop: Header=BB284_14 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB284_20
.LBB284_14:                             # %.preheader.us35
                                        # =>This Inner Loop Header: Depth=1
	fld.d	$fa1, $s1, 0
	movfr2gr.d	$a0, $fa1
	vinsgr2vr.d	$vr1, $a0, 0
	movfr2gr.d	$a0, $fa0
	vinsgr2vr.d	$vr1, $a0, 1
	vfadd.d	$vr1, $vr1, $vr4
	vfmadd.d	$vr1, $vr1, $vr6, $vr5
	vfadd.d	$vr1, $vr1, $vr4
	vfmadd.d	$vr1, $vr1, $vr6, $vr5
	vfadd.d	$vr1, $vr1, $vr4
	vfmadd.d	$vr1, $vr1, $vr6, $vr5
	vreplvei.d	$vr2, $vr1, 0
	fadd.d	$fa2, $fa2, $fs3
	vreplvei.d	$vr1, $vr1, 1
	fmul.d	$fa1, $fa1, $fs0
	fadd.d	$fa1, $fa2, $fa1
	fabs.d	$fa3, $fa2
	fdiv.d	$fa2, $fa1, $fa2
	fcmp.clt.d	$fcc0, $fs1, $fa3
	fsel	$fa1, $fa1, $fa2, $fcc0
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs2
	bcnez	$fcc0, .LBB284_13
# %bb.15:                               #   in Loop: Header=BB284_14 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr6, $sp, 16                   # 16-byte Folded Reload
	vld	$vr5, $sp, 32                   # 16-byte Folded Reload
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB284_13
.LBB284_16:                             # %.lr.ph.split.split.preheader
	pcalau12i	$a0, %pc_hi20(.LCPI284_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI284_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI284_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI284_1)
	pcalau12i	$a0, %pc_hi20(.LCPI284_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI284_2)
	pcalau12i	$a0, %pc_hi20(.LCPI284_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI284_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB284_18
	.p2align	4, , 16
.LBB284_17:                             # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB284_18 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB284_20
.LBB284_18:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB284_17
# %bb.19:                               #   in Loop: Header=BB284_18 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB284_17
.LBB284_20:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(results)
	ld.d	$a2, $s3, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB284_22
# %bb.21:                               # %._crit_edge
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB284_24
.LBB284_22:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s3, %pc_lo12(results)
	beqz	$a0, .LBB284_25
# %bb.23:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB284_24:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI284_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI284_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 0                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 96                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 104                  # 8-byte Folded Reload
	fld.d	$fs0, $sp, 112                  # 8-byte Folded Reload
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB284_25:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end284:
	.size	_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc, .Lfunc_end284-_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc
.LCPI285_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI285_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI285_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI285_3:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI285_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI285_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 8                    # 8-byte Folded Spill
	fst.d	$fs5, $sp, 0                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	.cfi_offset 61, -128
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB285_12
# %bb.1:                                # %.lr.ph
	blez	$s0, .LBB285_8
# %bb.2:                                # %.preheader23.us.preheader
	move	$s6, $zero
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI285_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI285_0)
	vldi	$vr3, -854
	pcalau12i	$a0, %pc_hi20(.LCPI285_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI285_1)
	pcalau12i	$a0, %pc_hi20(.LCPI285_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI285_2)
	pcalau12i	$a0, %pc_hi20(.LCPI285_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI285_4)
	pcalau12i	$a0, %pc_hi20(.LCPI285_3)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI285_3)
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	b	.LBB285_4
	.p2align	4, , 16
.LBB285_3:                              # %_Z9check_sumIdEvT_.exit.us
                                        #   in Loop: Header=BB285_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB285_12
.LBB285_4:                              # %.preheader23.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB285_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB285_5:                              #   Parent Loop BB285_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB285_5
# %bb.6:                                # %.loopexit.us
                                        #   in Loop: Header=BB285_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB285_3
# %bb.7:                                #   in Loop: Header=BB285_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB285_3
.LBB285_8:                              # %.lr.ph.split.split.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI285_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI285_0)
	vldi	$vr2, -854
	pcalau12i	$a0, %pc_hi20(.LCPI285_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI285_1)
	pcalau12i	$a0, %pc_hi20(.LCPI285_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI285_2)
	pcalau12i	$a0, %pc_hi20(.LCPI285_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI285_3)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s0, $a0, %pc_lo12(.L.str.19)
	b	.LBB285_10
	.p2align	4, , 16
.LBB285_9:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB285_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB285_12
.LBB285_10:                             # %.lr.ph.split.split
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa2
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB285_9
# %bb.11:                               #   in Loop: Header=BB285_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -854
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB285_9
.LBB285_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB285_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB285_16
.LBB285_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB285_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB285_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI285_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI285_5)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 0                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB285_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end285:
	.size	_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc, .Lfunc_end285-_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.type	results,@object                 # @results
	.bss
	.globl	results
	.p2align	3, 0x0
results:
	.dword	0
	.size	results, 8

	.type	current_test,@object            # @current_test
	.globl	current_test
	.p2align	2, 0x0
current_test:
	.word	0                               # 0x0
	.size	current_test, 4

	.type	allocated_results,@object       # @allocated_results
	.globl	allocated_results
	.p2align	2, 0x0
allocated_results:
	.word	0                               # 0x0
	.size	allocated_results, 4

	.type	.L.str,@object                  # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Could not allocate %d results\n"
	.size	.L.str, 31

	.type	.L.str.1,@object                # @.str.1
.L.str.1:
	.asciz	"\ntest %*s description   absolute   operations   ratio with\n"
	.size	.L.str.1, 60

	.type	.L.str.2,@object                # @.str.2
.L.str.2:
	.asciz	" "
	.size	.L.str.2, 2

	.type	.L.str.3,@object                # @.str.3
.L.str.3:
	.asciz	"number %*s time       per second   test0\n\n"
	.size	.L.str.3, 43

	.type	.L.str.4,@object                # @.str.4
.L.str.4:
	.asciz	"%2i %*s\"%s\"  %5.2f sec   %5.2f M     %.2f\n"
	.size	.L.str.4, 43

	.type	.L.str.5,@object                # @.str.5
.L.str.5:
	.space	1
	.size	.L.str.5, 1

	.type	.L.str.6,@object                # @.str.6
.L.str.6:
	.asciz	"\nTotal absolute time for %s: %.2f sec\n"
	.size	.L.str.6, 39

	.type	.L.str.7,@object                # @.str.7
.L.str.7:
	.asciz	"\n%s Penalty: %.2f\n\n"
	.size	.L.str.7, 20

	.type	.L.str.8,@object                # @.str.8
.L.str.8:
	.asciz	"\ntest %*s description   absolute\n"
	.size	.L.str.8, 34

	.type	.L.str.9,@object                # @.str.9
.L.str.9:
	.asciz	"number %*s time\n\n"
	.size	.L.str.9, 18

	.type	.L.str.10,@object               # @.str.10
.L.str.10:
	.asciz	"%2i %*s\"%s\"  %5.2f sec\n"
	.size	.L.str.10, 24

	.type	start_time,@object              # @start_time
	.bss
	.globl	start_time
	.p2align	3, 0x0
start_time:
	.dword	0                               # 0x0
	.size	start_time, 8

	.type	end_time,@object                # @end_time
	.globl	end_time
	.p2align	3, 0x0
end_time:
	.dword	0                               # 0x0
	.size	end_time, 8

	.type	iterations,@object              # @iterations
	.data
	.globl	iterations
	.p2align	2, 0x0
iterations:
	.word	1000                            # 0x3e8
	.size	iterations, 4

	.type	init_value,@object              # @init_value
	.globl	init_value
	.p2align	3, 0x0
init_value:
	.dword	0x3ff0000000000000              # double 1
	.size	init_value, 8

	.type	dataDouble,@object              # @dataDouble
	.bss
	.globl	dataDouble
	.p2align	3, 0x0
dataDouble:
	.space	64000
	.size	dataDouble, 64000

	.type	data32,@object                  # @data32
	.globl	data32
	.p2align	2, 0x0
data32:
	.space	32000
	.size	data32, 32000

	.type	temp_string,@object             # @temp_string
	.globl	temp_string
temp_string:
	.space	3200
	.size	temp_string, 3200

	.type	.L.str.11,@object               # @.str.11
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.11:
	.asciz	"int32_t for loop unroll"
	.size	.L.str.11, 24

	.type	.L.str.12,@object               # @.str.12
.L.str.12:
	.asciz	"int32_t while loop unroll"
	.size	.L.str.12, 26

	.type	.L.str.13,@object               # @.str.13
.L.str.13:
	.asciz	"int32_t do loop unroll"
	.size	.L.str.13, 23

	.type	.L.str.14,@object               # @.str.14
.L.str.14:
	.asciz	"int32_t goto loop unroll"
	.size	.L.str.14, 25

	.type	.L.str.15,@object               # @.str.15
.L.str.15:
	.asciz	"double for loop unroll"
	.size	.L.str.15, 23

	.type	.L.str.16,@object               # @.str.16
.L.str.16:
	.asciz	"double while loop unroll"
	.size	.L.str.16, 25

	.type	.L.str.17,@object               # @.str.17
.L.str.17:
	.asciz	"double do loop unroll"
	.size	.L.str.17, 22

	.type	.L.str.18,@object               # @.str.18
.L.str.18:
	.asciz	"double goto loop unroll"
	.size	.L.str.18, 24

	.type	.L.str.19,@object               # @.str.19
.L.str.19:
	.asciz	"test %i failed\n"
	.size	.L.str.19, 16

	.section	".note.GNU-stack","",@progbits
	.addrsig
	.addrsig_sym dataDouble
	.addrsig_sym data32
	.addrsig_sym temp_string
