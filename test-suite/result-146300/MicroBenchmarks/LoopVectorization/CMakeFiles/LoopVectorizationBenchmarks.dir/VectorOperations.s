	.file	"VectorOperations.cpp"
                                        # Start of file scope inline assembly
	.globl	_ZSt21ios_base_library_initv

                                        # End of file scope inline assembly
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5, 0x0                          # -- Begin function _Z60benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint8_t_RN9benchmark5StateE
.LCPI0_0:
	.byte	32                              # 0x20
	.byte	31                              # 0x1f
	.byte	30                              # 0x1e
	.byte	29                              # 0x1d
	.byte	28                              # 0x1c
	.byte	27                              # 0x1b
	.byte	26                              # 0x1a
	.byte	25                              # 0x19
	.byte	24                              # 0x18
	.byte	23                              # 0x17
	.byte	22                              # 0x16
	.byte	21                              # 0x15
	.byte	20                              # 0x14
	.byte	19                              # 0x13
	.byte	18                              # 0x12
	.byte	17                              # 0x11
	.byte	16                              # 0x10
	.byte	15                              # 0xf
	.byte	14                              # 0xe
	.byte	13                              # 0xd
	.byte	12                              # 0xc
	.byte	11                              # 0xb
	.byte	10                              # 0xa
	.byte	9                               # 0x9
	.byte	8                               # 0x8
	.byte	7                               # 0x7
	.byte	6                               # 0x6
	.byte	5                               # 0x5
	.byte	4                               # 0x4
	.byte	3                               # 0x3
	.byte	2                               # 0x2
	.byte	1                               # 0x1
	.text
	.globl	_Z60benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint8_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z60benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint8_t_RN9benchmark5StateE,@function
_Z60benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint8_t_RN9benchmark5StateE: # @_Z60benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint8_t_RN9benchmark5StateE
.Lfunc_begin0:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception0
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s0, $a0
	lu12i.w	$s5, 4
	ori	$s4, $s5, 3616
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp0:
	lu12i.w	$s2, 2
	ori	$s3, $s2, 1808
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1:
# %bb.1:                                # %.split
	move	$s1, $a0
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $sp, 24
.Ltmp3:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp4:
# %bb.2:                                # %.split163
	move	$s0, $a0
	ori	$a0, $s5, 3586
	add.d	$s6, $fp, $a0
	ori	$a0, $s2, 1793
	add.d	$s7, $s1, $a0
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	add.d	$s8, $s0, $a0
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 36
	lu12i.w	$a0, -5
	ori	$s2, $a0, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB0_3:                                # =>This Inner Loop Header: Depth=1
.Ltmp6:
	addi.d	$a0, $sp, 36
	addi.d	$a2, $sp, 36
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp7:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB0_3 Depth=1
	add.d	$a1, $fp, $s2
	addi.d	$s2, $s2, 2
	stx.h	$a0, $a1, $s4
	bnez	$s2, .LBB0_3
# %bb.5:                                # %vector.ph
	addi.d	$a0, $fp, 2
	lu12i.w	$s5, -3
	ori	$a1, $s5, 2288
	lu12i.w	$a6, 2
	ori	$a2, $a6, 1809
	.p2align	4, , 16
.LBB0_6:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ld.b	$a3, $a0, -2
	ld.b	$a4, $a0, 0
	add.d	$a5, $s0, $a1
	stx.b	$a3, $a5, $s3
	stx.b	$a4, $a5, $a2
	addi.d	$a1, $a1, 2
	addi.d	$a0, $a0, 4
	bnez	$a1, .LBB0_6
# %bb.7:                                # %vector.body78.preheader
	addi.d	$a0, $s1, 16
	lu12i.w	$a1, -5
	ori	$a3, $a1, 512
	lu12i.w	$a4, 4
	ori	$a2, $a4, 3584
	ori	$a1, $a4, 3600
	ori	$a4, $a4, 3632
	.p2align	4, , 16
.LBB0_8:                                # %vector.body78
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a5, $fp, $a3
	vldx	$vr0, $a5, $a2
	vldx	$vr1, $a5, $a1
	vldx	$vr2, $a5, $s4
	vldx	$vr3, $a5, $a4
	vpickev.b	$vr0, $vr0, $vr0
	vpickev.b	$vr1, $vr1, $vr1
	vpickev.b	$vr2, $vr2, $vr2
	vpickev.b	$vr3, $vr3, $vr3
	vpickve2gr.d	$a5, $vr0, 0
	xvinsgr2vr.d	$xr0, $a5, 0
	vpickve2gr.d	$a5, $vr1, 0
	xvinsgr2vr.d	$xr0, $a5, 1
	vpickve2gr.d	$a5, $vr2, 0
	xvinsgr2vr.d	$xr0, $a5, 2
	vpickve2gr.d	$a5, $vr3, 0
	xvinsgr2vr.d	$xr0, $a5, 3
	xvst	$xr0, $a0, -16
	addi.d	$a3, $a3, 64
	addi.d	$a0, $a0, 32
	bnez	$a3, .LBB0_8
# %bb.9:                                # %.lr.ph.i
	move	$a0, $zero
	ldx.b	$a2, $fp, $a2
	move	$t0, $a6
	ori	$s2, $a6, 1792
	ld.b	$a3, $s6, 0
	lu12i.w	$a7, 4
	ori	$a4, $a7, 3588
	ldx.b	$a4, $fp, $a4
	ld.b	$a5, $s6, 4
	stx.b	$a2, $s1, $s2
	st.b	$a3, $s7, 0
	st.b	$a4, $s7, 1
	st.b	$a5, $s7, 2
	ori	$a2, $a7, 3592
	ldx.b	$a2, $fp, $a2
	ori	$a3, $a6, 1796
	ld.b	$a4, $s6, 8
	ori	$a5, $a7, 3596
	ldx.b	$a5, $fp, $a5
	ld.b	$a6, $s6, 12
	stx.b	$a2, $s1, $a3
	st.b	$a4, $s7, 4
	st.b	$a5, $s7, 5
	st.b	$a6, $s7, 6
	ldx.b	$a1, $fp, $a1
	ori	$a2, $t0, 1800
	ld.b	$a4, $s6, 16
	ori	$a5, $a7, 3604
	ldx.b	$a5, $fp, $a5
	ld.b	$a6, $s6, 20
	stx.b	$a1, $s1, $a2
	st.b	$a4, $s7, 8
	st.b	$a5, $s7, 9
	st.b	$a6, $s7, 10
	ori	$a1, $a7, 3608
	ldx.b	$a4, $fp, $a1
	ori	$a1, $t0, 1804
	ld.b	$a5, $s6, 24
	ori	$a6, $a7, 3612
	ldx.b	$a6, $fp, $a6
	ld.b	$a7, $s6, 28
	stx.b	$a4, $s1, $a1
	st.b	$a5, $s7, 12
	st.b	$a6, $s7, 13
	st.b	$a7, $s7, 14
	ori	$a4, $t0, 1760
	.p2align	4, , 16
.LBB0_10:                               # %vector.body88
                                        # =>This Inner Loop Header: Depth=1
	move	$a5, $a0
	xvldx	$xr0, $s1, $a0
	xvldx	$xr1, $s0, $a0
	xvseq.b	$xr0, $xr0, $xr1
	xvxori.b	$xr0, $xr0, 255
	xvmskltz.b	$xr1, $xr0
	xvpickve2gr.wu	$a0, $xr1, 0
	xvpickve2gr.wu	$a6, $xr1, 4
	bstrins.d	$a0, $a6, 31, 16
	addi.w	$a6, $a0, 0
	addi.d	$a0, $a5, 32
	bnez	$a6, .LBB0_12
# %bb.11:                               # %vector.body88
                                        #   in Loop: Header=BB0_10 Depth=1
	bne	$a5, $a4, .LBB0_10
.LBB0_12:                               # %middle.split
	bnez	$a6, .LBB0_46
# %bb.13:                               # %_ZL27truncOrZextVecInLoopWithVW8IthEvPKT_PT0_i.exit.preheader
	ldx.bu	$a0, $s1, $s2
	ldx.bu	$a4, $s0, $s2
	bne	$a0, $a4, .LBB0_58
# %bb.14:                               # %_ZL27truncOrZextVecInLoopWithVW8IthEvPKT_PT0_i.exit
	ld.bu	$a0, $s7, 0
	ld.bu	$a4, $s8, 0
	ld.d	$s2, $sp, 16                    # 8-byte Folded Reload
	bne	$a0, $a4, .LBB0_58
# %bb.15:                               # %_ZL27truncOrZextVecInLoopWithVW8IthEvPKT_PT0_i.exit.1
	ld.bu	$a0, $s7, 1
	ld.bu	$a4, $s8, 1
	bne	$a0, $a4, .LBB0_47
# %bb.16:                               # %_ZL27truncOrZextVecInLoopWithVW8IthEvPKT_PT0_i.exit.2
	ld.bu	$a0, $s7, 2
	ld.bu	$a4, $s8, 2
	bne	$a0, $a4, .LBB0_48
# %bb.17:                               # %_ZL27truncOrZextVecInLoopWithVW8IthEvPKT_PT0_i.exit.3
	ldx.bu	$a0, $s1, $a3
	ldx.bu	$a4, $s0, $a3
	move	$s2, $a3
	bne	$a0, $a4, .LBB0_58
# %bb.18:                               # %_ZL27truncOrZextVecInLoopWithVW8IthEvPKT_PT0_i.exit.4
	ld.bu	$a0, $s7, 4
	ld.bu	$a3, $s8, 4
	bne	$a0, $a3, .LBB0_49
# %bb.19:                               # %_ZL27truncOrZextVecInLoopWithVW8IthEvPKT_PT0_i.exit.5
	ld.bu	$a0, $s7, 5
	ld.bu	$a3, $s8, 5
	bne	$a0, $a3, .LBB0_50
# %bb.20:                               # %_ZL27truncOrZextVecInLoopWithVW8IthEvPKT_PT0_i.exit.6
	ld.bu	$a0, $s7, 6
	ld.bu	$a3, $s8, 6
	bne	$a0, $a3, .LBB0_51
# %bb.21:                               # %_ZL27truncOrZextVecInLoopWithVW8IthEvPKT_PT0_i.exit.7
	ldx.bu	$a0, $s1, $a2
	ldx.bu	$a3, $s0, $a2
	move	$s2, $a2
	bne	$a0, $a3, .LBB0_58
# %bb.22:                               # %_ZL27truncOrZextVecInLoopWithVW8IthEvPKT_PT0_i.exit.8
	ld.bu	$a0, $s7, 8
	ld.bu	$a2, $s8, 8
	bne	$a0, $a2, .LBB0_52
# %bb.23:                               # %_ZL27truncOrZextVecInLoopWithVW8IthEvPKT_PT0_i.exit.9
	ld.bu	$a0, $s7, 9
	ld.bu	$a2, $s8, 9
	bne	$a0, $a2, .LBB0_53
# %bb.24:                               # %_ZL27truncOrZextVecInLoopWithVW8IthEvPKT_PT0_i.exit.10
	ld.bu	$a0, $s7, 10
	ld.bu	$a2, $s8, 10
	bne	$a0, $a2, .LBB0_54
# %bb.25:                               # %_ZL27truncOrZextVecInLoopWithVW8IthEvPKT_PT0_i.exit.11
	ldx.bu	$a0, $s1, $a1
	ldx.bu	$a2, $s0, $a1
	move	$s2, $a1
	bne	$a0, $a2, .LBB0_58
# %bb.26:                               # %_ZL27truncOrZextVecInLoopWithVW8IthEvPKT_PT0_i.exit.12
	ld.bu	$a0, $s7, 12
	ld.bu	$a1, $s8, 12
	bne	$a0, $a1, .LBB0_55
# %bb.27:                               # %_ZL27truncOrZextVecInLoopWithVW8IthEvPKT_PT0_i.exit.13
	ld.bu	$a0, $s7, 13
	ld.bu	$a1, $s8, 13
	bne	$a0, $a1, .LBB0_56
# %bb.28:                               # %_ZL27truncOrZextVecInLoopWithVW8IthEvPKT_PT0_i.exit.14
	ld.bu	$a0, $s7, 14
	ld.bu	$a1, $s8, 14
	bne	$a0, $a1, .LBB0_57
# %bb.29:                               # %_ZL27truncOrZextVecInLoopWithVW8IthEvPKT_PT0_i.exit.15
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.w	$s2, $s6, 28
	ld.d	$s1, $s6, 16
.Ltmp9:
	move	$a0, $s6
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp10:
# %bb.30:                               # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s2, .LBB0_42
# %bb.31:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s1, .LBB0_42
# %bb.32:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s4
	addi.d	$a1, $fp, 32
	addi.d	$a2, $sp, 24
	ori	$a3, $s5, 2288
	ori	$a4, $s5, 2304
	lu12i.w	$a6, 2
	ori	$a5, $a6, 1776
	ori	$a6, $a6, 1792
	.p2align	4, , 16
.LBB0_33:                               # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB0_37 Depth 2
                                        #     Child Loop BB0_40 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a7, $sp, 24
	bgeu	$a7, $a0, .LBB0_36
# %bb.34:                               # %.lr.ph
                                        #   in Loop: Header=BB0_33 Depth=1
	add.d	$t0, $a7, $s3
	bgeu	$fp, $t0, .LBB0_36
# %bb.35:                               #   in Loop: Header=BB0_33 Depth=1
	move	$t1, $zero
	b	.LBB0_39
	.p2align	4, , 16
.LBB0_36:                               # %vector.body98.preheader
                                        #   in Loop: Header=BB0_33 Depth=1
	addi.d	$t0, $a7, 16
	move	$t1, $a1
	move	$t2, $a4
	.p2align	4, , 16
.LBB0_37:                               # %vector.body98
                                        #   Parent Loop BB0_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr0, $t1, -32
	vld	$vr1, $t1, -16
	vld	$vr2, $t1, 0
	vld	$vr3, $t1, 16
	vpickev.b	$vr0, $vr0, $vr0
	vpickev.b	$vr1, $vr1, $vr1
	vpickev.b	$vr2, $vr2, $vr2
	vpickev.b	$vr3, $vr3, $vr3
	add.d	$t3, $t0, $t2
	vpickve2gr.d	$t4, $vr0, 0
	xvinsgr2vr.d	$xr0, $t4, 0
	vpickve2gr.d	$t4, $vr1, 0
	xvinsgr2vr.d	$xr0, $t4, 1
	vpickve2gr.d	$t4, $vr2, 0
	xvinsgr2vr.d	$xr0, $t4, 2
	vpickve2gr.d	$t4, $vr3, 0
	xvinsgr2vr.d	$xr0, $t4, 3
	xvstx	$xr0, $t3, $a5
	addi.d	$t2, $t2, 32
	addi.d	$t1, $t1, 64
	bnez	$t2, .LBB0_37
# %bb.38:                               #   in Loop: Header=BB0_33 Depth=1
	move	$t1, $a6
.LBB0_39:                               # %.lr.ph.i21.preheader
                                        #   in Loop: Header=BB0_33 Depth=1
	add.d	$t0, $t1, $a3
	add.d	$a7, $a7, $t1
	alsl.d	$t1, $t1, $fp, 1
	.p2align	4, , 16
.LBB0_40:                               # %.lr.ph.i21
                                        #   Parent Loop BB0_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$t2, $t1, 0
	st.b	$t2, $a7, 0
	addi.d	$t0, $t0, 1
	addi.d	$a7, $a7, 1
	addi.d	$t1, $t1, 2
	bnez	$t0, .LBB0_40
# %bb.41:                               # %_ZL27truncOrZextVecInLoopWithVW8IthEvPKT_PT0_i.exit25
                                        #   in Loop: Header=BB0_33 Depth=1
	addi.d	$s1, $s1, -1
	bnez	$s1, .LBB0_33
.LBB0_42:                               # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp11:
	move	$a0, $s6
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp12:
# %bb.43:                               # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit33
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 24
	beqz	$a0, .LBB0_45
# %bb.44:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i35
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB0_45:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit39
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB0_46:                               # %vector.early.exit
	pcalau12i	$a1, %pc_hi20(.LCPI0_0)
	xvld	$xr1, $a1, %pc_lo12(.LCPI0_0)
	xvand.v	$xr0, $xr0, $xr1
	xvpermi.q	$xr1, $xr0, 1
	vmax.bu	$vr0, $vr0, $vr1
	vpickve2gr.b	$a1, $vr0, 0
	andi	$a1, $a1, 48
	vpickve2gr.b	$a2, $vr0, 1
	andi	$a2, $a2, 31
	sltu	$a3, $a2, $a1
	masknez	$a2, $a2, $a3
	maskeqz	$a1, $a1, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 2
	andi	$a2, $a2, 30
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 3
	andi	$a2, $a2, 29
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 4
	andi	$a2, $a2, 28
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 5
	andi	$a2, $a2, 27
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 6
	andi	$a2, $a2, 26
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 7
	andi	$a2, $a2, 25
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 8
	andi	$a2, $a2, 24
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 9
	andi	$a2, $a2, 23
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 10
	andi	$a2, $a2, 22
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 11
	andi	$a2, $a2, 21
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 12
	andi	$a2, $a2, 20
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 13
	andi	$a2, $a2, 19
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 14
	andi	$a2, $a2, 18
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 15
	andi	$a2, $a2, 17
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	ori	$a2, $zero, 32
	sub.d	$a1, $a2, $a1
	andi	$a1, $a1, 255
	add.d	$a0, $a1, $a0
	addi.d	$s2, $a0, -32
	b	.LBB0_58
.LBB0_47:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1794
	b	.LBB0_58
.LBB0_48:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1795
	b	.LBB0_58
.LBB0_49:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1797
	b	.LBB0_58
.LBB0_50:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1798
	b	.LBB0_58
.LBB0_51:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1799
	b	.LBB0_58
.LBB0_52:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1801
	b	.LBB0_58
.LBB0_53:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1802
	b	.LBB0_58
.LBB0_54:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1803
	b	.LBB0_58
.LBB0_55:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1805
	b	.LBB0_58
.LBB0_56:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1806
	b	.LBB0_58
.LBB0_57:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1807
.LBB0_58:                               # %.loopexit
.Ltmp14:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp15:
# %bb.59:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	slli.d	$a0, $s2, 1
	ldx.hu	$a1, $fp, $a0
.Ltmp16:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp17:
# %bb.60:                               # %_ZNSolsEt.exit
.Ltmp18:
	move	$s3, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp19:
# %bb.61:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.bu	$a1, $s1, $s2
.Ltmp20:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp21:
# %bb.62:
.Ltmp22:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp23:
# %bb.63:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit20
	ldx.bu	$a1, $s0, $s2
.Ltmp24:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp25:
# %bb.64:
.Ltmp26:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp27:
# %bb.65:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB0_66:                               # %.thread
.Ltmp5:
	move	$s2, $a0
	b	.LBB0_72
.LBB0_67:
.Ltmp2:
	move	$s2, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB0_68:
.Ltmp13:
	b	.LBB0_71
.LBB0_69:
.Ltmp28:
	b	.LBB0_71
.LBB0_70:
.Ltmp8:
.LBB0_71:
	move	$s2, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s1, $sp, 24
	beqz	$s1, .LBB0_73
.LBB0_72:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i28
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB0_73:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end0:
	.size	_Z60benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint8_t_RN9benchmark5StateE, .Lfunc_end0-_Z60benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint8_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table0:
.Lexception0:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end0-.Lcst_begin0
.Lcst_begin0:
	.uleb128 .Lfunc_begin0-.Lfunc_begin0    # >> Call Site 1 <<
	.uleb128 .Ltmp0-.Lfunc_begin0           #   Call between .Lfunc_begin0 and .Ltmp0
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp0-.Lfunc_begin0           # >> Call Site 2 <<
	.uleb128 .Ltmp1-.Ltmp0                  #   Call between .Ltmp0 and .Ltmp1
	.uleb128 .Ltmp2-.Lfunc_begin0           #     jumps to .Ltmp2
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp3-.Lfunc_begin0           # >> Call Site 3 <<
	.uleb128 .Ltmp4-.Ltmp3                  #   Call between .Ltmp3 and .Ltmp4
	.uleb128 .Ltmp5-.Lfunc_begin0           #     jumps to .Ltmp5
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp6-.Lfunc_begin0           # >> Call Site 4 <<
	.uleb128 .Ltmp7-.Ltmp6                  #   Call between .Ltmp6 and .Ltmp7
	.uleb128 .Ltmp8-.Lfunc_begin0           #     jumps to .Ltmp8
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp9-.Lfunc_begin0           # >> Call Site 5 <<
	.uleb128 .Ltmp12-.Ltmp9                 #   Call between .Ltmp9 and .Ltmp12
	.uleb128 .Ltmp13-.Lfunc_begin0          #     jumps to .Ltmp13
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp12-.Lfunc_begin0          # >> Call Site 6 <<
	.uleb128 .Ltmp14-.Ltmp12                #   Call between .Ltmp12 and .Ltmp14
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp14-.Lfunc_begin0          # >> Call Site 7 <<
	.uleb128 .Ltmp27-.Ltmp14                #   Call between .Ltmp14 and .Ltmp27
	.uleb128 .Ltmp28-.Lfunc_begin0          #     jumps to .Ltmp28
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp27-.Lfunc_begin0          # >> Call Site 8 <<
	.uleb128 .Lfunc_end0-.Ltmp27            #   Call between .Ltmp27 and .Lfunc_end0
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end0:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5, 0x0                          # -- Begin function _Z61benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint8_t_RN9benchmark5StateE
.LCPI1_0:
	.byte	32                              # 0x20
	.byte	31                              # 0x1f
	.byte	30                              # 0x1e
	.byte	29                              # 0x1d
	.byte	28                              # 0x1c
	.byte	27                              # 0x1b
	.byte	26                              # 0x1a
	.byte	25                              # 0x19
	.byte	24                              # 0x18
	.byte	23                              # 0x17
	.byte	22                              # 0x16
	.byte	21                              # 0x15
	.byte	20                              # 0x14
	.byte	19                              # 0x13
	.byte	18                              # 0x12
	.byte	17                              # 0x11
	.byte	16                              # 0x10
	.byte	15                              # 0xf
	.byte	14                              # 0xe
	.byte	13                              # 0xd
	.byte	12                              # 0xc
	.byte	11                              # 0xb
	.byte	10                              # 0xa
	.byte	9                               # 0x9
	.byte	8                               # 0x8
	.byte	7                               # 0x7
	.byte	6                               # 0x6
	.byte	5                               # 0x5
	.byte	4                               # 0x4
	.byte	3                               # 0x3
	.byte	2                               # 0x2
	.byte	1                               # 0x1
	.text
	.globl	_Z61benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint8_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z61benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint8_t_RN9benchmark5StateE,@function
_Z61benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint8_t_RN9benchmark5StateE: # @_Z61benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint8_t_RN9benchmark5StateE
.Lfunc_begin1:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception1
# %bb.0:
	addi.d	$sp, $sp, -416
	.cfi_def_cfa_offset 416
	st.d	$ra, $sp, 408                   # 8-byte Folded Spill
	st.d	$fp, $sp, 400                   # 8-byte Folded Spill
	st.d	$s0, $sp, 392                   # 8-byte Folded Spill
	st.d	$s1, $sp, 384                   # 8-byte Folded Spill
	st.d	$s2, $sp, 376                   # 8-byte Folded Spill
	st.d	$s3, $sp, 368                   # 8-byte Folded Spill
	st.d	$s4, $sp, 360                   # 8-byte Folded Spill
	st.d	$s5, $sp, 352                   # 8-byte Folded Spill
	st.d	$s6, $sp, 344                   # 8-byte Folded Spill
	st.d	$s7, $sp, 336                   # 8-byte Folded Spill
	st.d	$s8, $sp, 328                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	addi.d	$fp, $sp, 416
	.cfi_def_cfa 22, 0
	bstrins.d	$sp, $zero, 4, 0
	move	$s1, $a0
	lu12i.w	$s6, 4
	ori	$s5, $s6, 3616
	move	$a0, $s5
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$s0, $a0
.Ltmp29:
	lu12i.w	$s2, 2
	ori	$s3, $s2, 1808
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp30:
# %bb.1:                                # %.split
	move	$s4, $a0
	st.d	$s1, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $sp, 312
.Ltmp32:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp33:
# %bb.2:                                # %.split163
	move	$s1, $a0
	ori	$a0, $s6, 3586
	add.d	$a0, $s0, $a0
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	ori	$a0, $s2, 1793
	add.d	$s8, $s4, $a0
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	add.d	$s2, $s1, $a0
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 324
	lu12i.w	$a0, -5
	ori	$s7, $a0, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s6, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB1_3:                                # =>This Inner Loop Header: Depth=1
.Ltmp35:
	addi.d	$a0, $sp, 324
	addi.d	$a2, $sp, 324
	move	$a1, $s6
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp36:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB1_3 Depth=1
	add.d	$a1, $s0, $s7
	addi.d	$s7, $s7, 2
	stx.h	$a0, $a1, $s5
	bnez	$s7, .LBB1_3
# %bb.5:                                # %vector.ph
	addi.d	$a0, $s0, 2
	lu12i.w	$a1, -3
	ori	$a1, $a1, 2288
	lu12i.w	$t1, 2
	ori	$a2, $t1, 1809
	.p2align	4, , 16
.LBB1_6:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ld.b	$a3, $a0, -2
	ld.b	$a4, $a0, 0
	add.d	$a5, $s1, $a1
	stx.b	$a3, $a5, $s3
	stx.b	$a4, $a5, $a2
	addi.d	$a1, $a1, 2
	addi.d	$a0, $a0, 4
	bnez	$a1, .LBB1_6
# %bb.7:                                # %vector.body78.preheader
	addi.d	$a1, $s4, 32
	lu12i.w	$a0, -5
	ori	$a2, $a0, 512
	lu12i.w	$t2, 4
	ori	$a0, $t2, 3584
	ori	$a3, $t2, 3648
	ori	$a4, $t2, 3680
	.p2align	4, , 16
.LBB1_8:                                # %vector.body78
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a5, $s0, $a2
	xvldx	$xr2, $a5, $a0
	xvldx	$xr4, $a5, $s5
	xvldx	$xr3, $a5, $a3
	xvldx	$xr1, $a5, $a4
	xvst	$xr2, $sp, 256
	vpickve2gr.h	$a5, $vr2, 0
	vinsgr2vr.b	$vr0, $a5, 0
	vpickve2gr.h	$a5, $vr2, 1
	vinsgr2vr.b	$vr0, $a5, 1
	vpickve2gr.h	$a5, $vr2, 2
	vinsgr2vr.b	$vr0, $a5, 2
	vpickve2gr.h	$a5, $vr2, 3
	vinsgr2vr.b	$vr0, $a5, 3
	vpickve2gr.h	$a5, $vr2, 4
	vinsgr2vr.b	$vr0, $a5, 4
	vpickve2gr.h	$a5, $vr2, 5
	vinsgr2vr.b	$vr0, $a5, 5
	vpickve2gr.h	$a5, $vr2, 6
	vinsgr2vr.b	$vr0, $a5, 6
	vpickve2gr.h	$a5, $vr2, 7
	vinsgr2vr.b	$vr0, $a5, 7
	ld.h	$a5, $sp, 272
	ld.h	$a6, $sp, 274
	ld.h	$a7, $sp, 276
	ld.h	$t0, $sp, 278
	vinsgr2vr.b	$vr0, $a5, 8
	vinsgr2vr.b	$vr0, $a6, 9
	vinsgr2vr.b	$vr0, $a7, 10
	vinsgr2vr.b	$vr0, $t0, 11
	ld.h	$a5, $sp, 280
	ld.h	$a6, $sp, 282
	ld.h	$a7, $sp, 284
	ld.h	$t0, $sp, 286
	vinsgr2vr.b	$vr0, $a5, 12
	vinsgr2vr.b	$vr0, $a6, 13
	vinsgr2vr.b	$vr0, $a7, 14
	vinsgr2vr.b	$vr0, $t0, 15
	xvst	$xr4, $sp, 224
	vpickve2gr.h	$a5, $vr4, 0
	vinsgr2vr.b	$vr2, $a5, 0
	vpickve2gr.h	$a5, $vr4, 1
	vinsgr2vr.b	$vr2, $a5, 1
	vpickve2gr.h	$a5, $vr4, 2
	vinsgr2vr.b	$vr2, $a5, 2
	vpickve2gr.h	$a5, $vr4, 3
	vinsgr2vr.b	$vr2, $a5, 3
	vpickve2gr.h	$a5, $vr4, 4
	vinsgr2vr.b	$vr2, $a5, 4
	vpickve2gr.h	$a5, $vr4, 5
	vinsgr2vr.b	$vr2, $a5, 5
	vpickve2gr.h	$a5, $vr4, 6
	vinsgr2vr.b	$vr2, $a5, 6
	vpickve2gr.h	$a5, $vr4, 7
	vinsgr2vr.b	$vr2, $a5, 7
	ld.h	$a5, $sp, 240
	ld.h	$a6, $sp, 242
	ld.h	$a7, $sp, 244
	ld.h	$t0, $sp, 246
	vinsgr2vr.b	$vr2, $a5, 8
	vinsgr2vr.b	$vr2, $a6, 9
	vinsgr2vr.b	$vr2, $a7, 10
	vinsgr2vr.b	$vr2, $t0, 11
	ld.h	$a5, $sp, 248
	ld.h	$a6, $sp, 250
	ld.h	$a7, $sp, 252
	ld.h	$t0, $sp, 254
	vinsgr2vr.b	$vr2, $a5, 12
	vinsgr2vr.b	$vr2, $a6, 13
	vinsgr2vr.b	$vr2, $a7, 14
	vinsgr2vr.b	$vr2, $t0, 15
	xvst	$xr3, $sp, 192
	vpickve2gr.h	$a5, $vr3, 0
	vinsgr2vr.b	$vr4, $a5, 0
	vpickve2gr.h	$a5, $vr3, 1
	vinsgr2vr.b	$vr4, $a5, 1
	vpickve2gr.h	$a5, $vr3, 2
	vinsgr2vr.b	$vr4, $a5, 2
	vpickve2gr.h	$a5, $vr3, 3
	vinsgr2vr.b	$vr4, $a5, 3
	vpickve2gr.h	$a5, $vr3, 4
	vinsgr2vr.b	$vr4, $a5, 4
	vpickve2gr.h	$a5, $vr3, 5
	vinsgr2vr.b	$vr4, $a5, 5
	vpickve2gr.h	$a5, $vr3, 6
	vinsgr2vr.b	$vr4, $a5, 6
	vpickve2gr.h	$a5, $vr3, 7
	vinsgr2vr.b	$vr4, $a5, 7
	ld.h	$a5, $sp, 208
	ld.h	$a6, $sp, 210
	ld.h	$a7, $sp, 212
	ld.h	$t0, $sp, 214
	vinsgr2vr.b	$vr4, $a5, 8
	vinsgr2vr.b	$vr4, $a6, 9
	vinsgr2vr.b	$vr4, $a7, 10
	vinsgr2vr.b	$vr4, $t0, 11
	ld.h	$a5, $sp, 216
	ld.h	$a6, $sp, 218
	ld.h	$a7, $sp, 220
	ld.h	$t0, $sp, 222
	vinsgr2vr.b	$vr4, $a5, 12
	vinsgr2vr.b	$vr4, $a6, 13
	vinsgr2vr.b	$vr4, $a7, 14
	vinsgr2vr.b	$vr4, $t0, 15
	xvst	$xr1, $sp, 160
	vpickve2gr.h	$a5, $vr1, 0
	vinsgr2vr.b	$vr3, $a5, 0
	vpickve2gr.h	$a5, $vr1, 1
	vinsgr2vr.b	$vr3, $a5, 1
	vpickve2gr.h	$a5, $vr1, 2
	vinsgr2vr.b	$vr3, $a5, 2
	vpickve2gr.h	$a5, $vr1, 3
	vinsgr2vr.b	$vr3, $a5, 3
	vpickve2gr.h	$a5, $vr1, 4
	vinsgr2vr.b	$vr3, $a5, 4
	vpickve2gr.h	$a5, $vr1, 5
	vinsgr2vr.b	$vr3, $a5, 5
	vpickve2gr.h	$a5, $vr1, 6
	vinsgr2vr.b	$vr3, $a5, 6
	vpickve2gr.h	$a5, $vr1, 7
	vinsgr2vr.b	$vr3, $a5, 7
	ld.h	$a5, $sp, 176
	ld.h	$a6, $sp, 178
	ld.h	$a7, $sp, 180
	ld.h	$t0, $sp, 182
	vinsgr2vr.b	$vr3, $a5, 8
	vinsgr2vr.b	$vr3, $a6, 9
	vinsgr2vr.b	$vr3, $a7, 10
	vinsgr2vr.b	$vr3, $t0, 11
	ld.h	$a5, $sp, 184
	ld.h	$a6, $sp, 186
	ld.h	$a7, $sp, 188
	ld.h	$t0, $sp, 190
	vinsgr2vr.b	$vr3, $a5, 12
	vinsgr2vr.b	$vr3, $a6, 13
	vinsgr2vr.b	$vr3, $a7, 14
	vinsgr2vr.b	$vr3, $t0, 15
	vst	$vr0, $a1, -32
	vst	$vr2, $a1, -16
	vst	$vr4, $a1, 0
	vst	$vr3, $a1, 16
	addi.d	$a2, $a2, 128
	addi.d	$a1, $a1, 64
	bnez	$a2, .LBB1_8
# %bb.9:                                # %.lr.ph.i
	move	$a1, $zero
	ldx.b	$a0, $s0, $a0
	ori	$s6, $t1, 1792
	ld.d	$a7, $sp, 24                    # 8-byte Folded Reload
	ld.b	$a2, $a7, 0
	ori	$a3, $t2, 3588
	ldx.b	$a3, $s0, $a3
	ld.b	$a4, $a7, 4
	stx.b	$a0, $s4, $s6
	st.b	$a2, $s8, 0
	st.b	$a3, $s8, 1
	st.b	$a4, $s8, 2
	ori	$a0, $t2, 3592
	ldx.b	$a0, $s0, $a0
	ori	$a3, $t1, 1796
	ld.b	$a2, $a7, 8
	ori	$a4, $t2, 3596
	ldx.b	$a4, $s0, $a4
	ld.b	$a5, $a7, 12
	stx.b	$a0, $s4, $a3
	st.b	$a2, $s8, 4
	st.b	$a4, $s8, 5
	st.b	$a5, $s8, 6
	ori	$a0, $t2, 3600
	ldx.b	$a0, $s0, $a0
	ori	$a2, $t1, 1800
	ld.b	$a4, $a7, 16
	ori	$a5, $t2, 3604
	ldx.b	$a5, $s0, $a5
	ld.b	$a6, $a7, 20
	stx.b	$a0, $s4, $a2
	st.b	$a4, $s8, 8
	st.b	$a5, $s8, 9
	st.b	$a6, $s8, 10
	ori	$a0, $t2, 3608
	ldx.b	$a4, $s0, $a0
	ori	$a0, $t1, 1804
	ld.b	$a5, $a7, 24
	ori	$a6, $t2, 3612
	ldx.b	$a6, $s0, $a6
	ld.b	$a7, $a7, 28
	stx.b	$a4, $s4, $a0
	st.b	$a5, $s8, 12
	st.b	$a6, $s8, 13
	st.b	$a7, $s8, 14
	ori	$s7, $t1, 1760
	.p2align	4, , 16
.LBB1_10:                               # %vector.body88
                                        # =>This Inner Loop Header: Depth=1
	move	$a4, $a1
	xvldx	$xr0, $s4, $a1
	xvldx	$xr1, $s1, $a1
	xvseq.b	$xr0, $xr0, $xr1
	xvxori.b	$xr0, $xr0, 255
	xvmskltz.b	$xr1, $xr0
	xvpickve2gr.wu	$a1, $xr1, 0
	xvpickve2gr.wu	$a5, $xr1, 4
	bstrins.d	$a1, $a5, 31, 16
	addi.w	$a5, $a1, 0
	addi.d	$a1, $a4, 32
	bnez	$a5, .LBB1_12
# %bb.11:                               # %vector.body88
                                        #   in Loop: Header=BB1_10 Depth=1
	bne	$a4, $s7, .LBB1_10
.LBB1_12:                               # %middle.split
	bnez	$a5, .LBB1_46
# %bb.13:                               # %_ZL28truncOrZextVecInLoopWithVW16IthEvPKT_PT0_i.exit.preheader
	ldx.bu	$a1, $s4, $s6
	ldx.bu	$a4, $s1, $s6
	bne	$a1, $a4, .LBB1_58
# %bb.14:                               # %_ZL28truncOrZextVecInLoopWithVW16IthEvPKT_PT0_i.exit
	ld.bu	$a1, $s8, 0
	ld.bu	$a4, $s2, 0
	ld.d	$s6, $sp, 16                    # 8-byte Folded Reload
	bne	$a1, $a4, .LBB1_58
# %bb.15:                               # %_ZL28truncOrZextVecInLoopWithVW16IthEvPKT_PT0_i.exit.1
	ld.bu	$a1, $s8, 1
	ld.bu	$a4, $s2, 1
	bne	$a1, $a4, .LBB1_47
# %bb.16:                               # %_ZL28truncOrZextVecInLoopWithVW16IthEvPKT_PT0_i.exit.2
	ld.bu	$a1, $s8, 2
	ld.bu	$a4, $s2, 2
	bne	$a1, $a4, .LBB1_48
# %bb.17:                               # %_ZL28truncOrZextVecInLoopWithVW16IthEvPKT_PT0_i.exit.3
	ldx.bu	$a1, $s4, $a3
	ldx.bu	$a4, $s1, $a3
	move	$s6, $a3
	bne	$a1, $a4, .LBB1_58
# %bb.18:                               # %_ZL28truncOrZextVecInLoopWithVW16IthEvPKT_PT0_i.exit.4
	ld.bu	$a1, $s8, 4
	ld.bu	$a3, $s2, 4
	bne	$a1, $a3, .LBB1_49
# %bb.19:                               # %_ZL28truncOrZextVecInLoopWithVW16IthEvPKT_PT0_i.exit.5
	ld.bu	$a1, $s8, 5
	ld.bu	$a3, $s2, 5
	bne	$a1, $a3, .LBB1_50
# %bb.20:                               # %_ZL28truncOrZextVecInLoopWithVW16IthEvPKT_PT0_i.exit.6
	ld.bu	$a1, $s8, 6
	ld.bu	$a3, $s2, 6
	bne	$a1, $a3, .LBB1_51
# %bb.21:                               # %_ZL28truncOrZextVecInLoopWithVW16IthEvPKT_PT0_i.exit.7
	ldx.bu	$a1, $s4, $a2
	ldx.bu	$a3, $s1, $a2
	move	$s6, $a2
	bne	$a1, $a3, .LBB1_58
# %bb.22:                               # %_ZL28truncOrZextVecInLoopWithVW16IthEvPKT_PT0_i.exit.8
	ld.bu	$a1, $s8, 8
	ld.bu	$a2, $s2, 8
	bne	$a1, $a2, .LBB1_52
# %bb.23:                               # %_ZL28truncOrZextVecInLoopWithVW16IthEvPKT_PT0_i.exit.9
	ld.bu	$a1, $s8, 9
	ld.bu	$a2, $s2, 9
	bne	$a1, $a2, .LBB1_53
# %bb.24:                               # %_ZL28truncOrZextVecInLoopWithVW16IthEvPKT_PT0_i.exit.10
	ld.bu	$a1, $s8, 10
	ld.bu	$a2, $s2, 10
	bne	$a1, $a2, .LBB1_54
# %bb.25:                               # %_ZL28truncOrZextVecInLoopWithVW16IthEvPKT_PT0_i.exit.11
	ldx.bu	$a1, $s4, $a0
	ldx.bu	$a2, $s1, $a0
	move	$s6, $a0
	bne	$a1, $a2, .LBB1_58
# %bb.26:                               # %_ZL28truncOrZextVecInLoopWithVW16IthEvPKT_PT0_i.exit.12
	ld.bu	$a0, $s8, 12
	ld.bu	$a1, $s2, 12
	bne	$a0, $a1, .LBB1_55
# %bb.27:                               # %_ZL28truncOrZextVecInLoopWithVW16IthEvPKT_PT0_i.exit.13
	ld.bu	$a0, $s8, 13
	ld.bu	$a1, $s2, 13
	bne	$a0, $a1, .LBB1_56
# %bb.28:                               # %_ZL28truncOrZextVecInLoopWithVW16IthEvPKT_PT0_i.exit.14
	ld.bu	$a0, $s8, 14
	ld.bu	$a1, $s2, 14
	bne	$a0, $a1, .LBB1_57
# %bb.29:                               # %_ZL28truncOrZextVecInLoopWithVW16IthEvPKT_PT0_i.exit.15
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.w	$s4, $s6, 28
	ld.d	$s2, $s6, 16
.Ltmp38:
	move	$a0, $s6
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp39:
# %bb.30:                               # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s4, .LBB1_42
# %bb.31:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s2, .LBB1_42
# %bb.32:                               # %.lr.ph.preheader
	add.d	$a0, $s0, $s5
	addi.d	$a1, $s0, 64
	addi.d	$a2, $sp, 312
	lu12i.w	$a4, -3
	ori	$a3, $a4, 2288
	ori	$a4, $a4, 2304
	lu12i.w	$a6, 2
	ori	$a5, $a6, 1776
	ori	$a6, $a6, 1792
	.p2align	4, , 16
.LBB1_33:                               # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_37 Depth 2
                                        #     Child Loop BB1_40 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a7, $sp, 312
	bgeu	$a7, $a0, .LBB1_36
# %bb.34:                               # %.lr.ph
                                        #   in Loop: Header=BB1_33 Depth=1
	add.d	$t0, $a7, $s3
	bgeu	$s0, $t0, .LBB1_36
# %bb.35:                               #   in Loop: Header=BB1_33 Depth=1
	move	$t1, $zero
	b	.LBB1_39
	.p2align	4, , 16
.LBB1_36:                               # %vector.body98.preheader
                                        #   in Loop: Header=BB1_33 Depth=1
	addi.d	$t0, $a7, 32
	move	$t1, $a1
	move	$t2, $a4
	.p2align	4, , 16
.LBB1_37:                               # %vector.body98
                                        #   Parent Loop BB1_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr2, $t1, -64
	xvld	$xr4, $t1, -32
	xvld	$xr3, $t1, 0
	xvld	$xr1, $t1, 32
	xvst	$xr2, $sp, 128
	vpickve2gr.h	$t3, $vr2, 0
	vinsgr2vr.b	$vr0, $t3, 0
	vpickve2gr.h	$t3, $vr2, 1
	vinsgr2vr.b	$vr0, $t3, 1
	vpickve2gr.h	$t3, $vr2, 2
	vinsgr2vr.b	$vr0, $t3, 2
	vpickve2gr.h	$t3, $vr2, 3
	vinsgr2vr.b	$vr0, $t3, 3
	vpickve2gr.h	$t3, $vr2, 4
	vinsgr2vr.b	$vr0, $t3, 4
	vpickve2gr.h	$t3, $vr2, 5
	vinsgr2vr.b	$vr0, $t3, 5
	vpickve2gr.h	$t3, $vr2, 6
	vinsgr2vr.b	$vr0, $t3, 6
	vpickve2gr.h	$t3, $vr2, 7
	vinsgr2vr.b	$vr0, $t3, 7
	ld.h	$t3, $sp, 144
	ld.h	$t4, $sp, 146
	ld.h	$t5, $sp, 148
	ld.h	$t6, $sp, 150
	vinsgr2vr.b	$vr0, $t3, 8
	vinsgr2vr.b	$vr0, $t4, 9
	vinsgr2vr.b	$vr0, $t5, 10
	vinsgr2vr.b	$vr0, $t6, 11
	ld.h	$t3, $sp, 152
	ld.h	$t4, $sp, 154
	ld.h	$t5, $sp, 156
	ld.h	$t6, $sp, 158
	vinsgr2vr.b	$vr0, $t3, 12
	vinsgr2vr.b	$vr0, $t4, 13
	vinsgr2vr.b	$vr0, $t5, 14
	vinsgr2vr.b	$vr0, $t6, 15
	xvst	$xr4, $sp, 96
	vpickve2gr.h	$t3, $vr4, 0
	vinsgr2vr.b	$vr2, $t3, 0
	vpickve2gr.h	$t3, $vr4, 1
	vinsgr2vr.b	$vr2, $t3, 1
	vpickve2gr.h	$t3, $vr4, 2
	vinsgr2vr.b	$vr2, $t3, 2
	vpickve2gr.h	$t3, $vr4, 3
	vinsgr2vr.b	$vr2, $t3, 3
	vpickve2gr.h	$t3, $vr4, 4
	vinsgr2vr.b	$vr2, $t3, 4
	vpickve2gr.h	$t3, $vr4, 5
	vinsgr2vr.b	$vr2, $t3, 5
	vpickve2gr.h	$t3, $vr4, 6
	vinsgr2vr.b	$vr2, $t3, 6
	vpickve2gr.h	$t3, $vr4, 7
	vinsgr2vr.b	$vr2, $t3, 7
	ld.h	$t3, $sp, 112
	ld.h	$t4, $sp, 114
	ld.h	$t5, $sp, 116
	ld.h	$t6, $sp, 118
	vinsgr2vr.b	$vr2, $t3, 8
	vinsgr2vr.b	$vr2, $t4, 9
	vinsgr2vr.b	$vr2, $t5, 10
	vinsgr2vr.b	$vr2, $t6, 11
	ld.h	$t3, $sp, 120
	ld.h	$t4, $sp, 122
	ld.h	$t5, $sp, 124
	ld.h	$t6, $sp, 126
	vinsgr2vr.b	$vr2, $t3, 12
	vinsgr2vr.b	$vr2, $t4, 13
	vinsgr2vr.b	$vr2, $t5, 14
	vinsgr2vr.b	$vr2, $t6, 15
	xvst	$xr3, $sp, 32
	vpickve2gr.h	$t3, $vr3, 0
	vinsgr2vr.b	$vr4, $t3, 0
	vpickve2gr.h	$t3, $vr3, 1
	vinsgr2vr.b	$vr4, $t3, 1
	vpickve2gr.h	$t3, $vr3, 2
	vinsgr2vr.b	$vr4, $t3, 2
	vpickve2gr.h	$t3, $vr3, 3
	vinsgr2vr.b	$vr4, $t3, 3
	vpickve2gr.h	$t3, $vr3, 4
	vinsgr2vr.b	$vr4, $t3, 4
	vpickve2gr.h	$t3, $vr3, 5
	vinsgr2vr.b	$vr4, $t3, 5
	vpickve2gr.h	$t3, $vr3, 6
	vinsgr2vr.b	$vr4, $t3, 6
	vpickve2gr.h	$t3, $vr3, 7
	vinsgr2vr.b	$vr4, $t3, 7
	ld.h	$t3, $sp, 48
	ld.h	$t4, $sp, 50
	ld.h	$t5, $sp, 52
	ld.h	$t6, $sp, 54
	vinsgr2vr.b	$vr4, $t3, 8
	vinsgr2vr.b	$vr4, $t4, 9
	vinsgr2vr.b	$vr4, $t5, 10
	vinsgr2vr.b	$vr4, $t6, 11
	ld.h	$t3, $sp, 56
	ld.h	$t4, $sp, 58
	ld.h	$t5, $sp, 60
	ld.h	$t6, $sp, 62
	vinsgr2vr.b	$vr4, $t3, 12
	vinsgr2vr.b	$vr4, $t4, 13
	vinsgr2vr.b	$vr4, $t5, 14
	vinsgr2vr.b	$vr4, $t6, 15
	xvst	$xr1, $sp, 64
	vpickve2gr.h	$t3, $vr1, 0
	vinsgr2vr.b	$vr3, $t3, 0
	vpickve2gr.h	$t3, $vr1, 1
	vinsgr2vr.b	$vr3, $t3, 1
	vpickve2gr.h	$t3, $vr1, 2
	vinsgr2vr.b	$vr3, $t3, 2
	vpickve2gr.h	$t3, $vr1, 3
	vinsgr2vr.b	$vr3, $t3, 3
	vpickve2gr.h	$t3, $vr1, 4
	vinsgr2vr.b	$vr3, $t3, 4
	vpickve2gr.h	$t3, $vr1, 5
	vinsgr2vr.b	$vr3, $t3, 5
	vpickve2gr.h	$t3, $vr1, 6
	vinsgr2vr.b	$vr3, $t3, 6
	vpickve2gr.h	$t3, $vr1, 7
	vinsgr2vr.b	$vr3, $t3, 7
	ld.h	$t3, $sp, 80
	ld.h	$t4, $sp, 82
	ld.h	$t5, $sp, 84
	ld.h	$t6, $sp, 86
	vinsgr2vr.b	$vr3, $t3, 8
	vinsgr2vr.b	$vr3, $t4, 9
	vinsgr2vr.b	$vr3, $t5, 10
	vinsgr2vr.b	$vr3, $t6, 11
	ld.h	$t3, $sp, 88
	ld.h	$t4, $sp, 90
	ld.h	$t5, $sp, 92
	ld.h	$t6, $sp, 94
	vinsgr2vr.b	$vr3, $t3, 12
	vinsgr2vr.b	$vr3, $t4, 13
	vinsgr2vr.b	$vr3, $t5, 14
	vinsgr2vr.b	$vr3, $t6, 15
	add.d	$t3, $t0, $t2
	vstx	$vr0, $t3, $s7
	vstx	$vr2, $t3, $a5
	vstx	$vr4, $t3, $a6
	vstx	$vr3, $t3, $s3
	addi.d	$t2, $t2, 64
	addi.d	$t1, $t1, 128
	bnez	$t2, .LBB1_37
# %bb.38:                               #   in Loop: Header=BB1_33 Depth=1
	move	$t1, $a6
.LBB1_39:                               # %.lr.ph.i21.preheader
                                        #   in Loop: Header=BB1_33 Depth=1
	add.d	$t0, $t1, $a3
	add.d	$a7, $a7, $t1
	alsl.d	$t1, $t1, $s0, 1
	.p2align	4, , 16
.LBB1_40:                               # %.lr.ph.i21
                                        #   Parent Loop BB1_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$t2, $t1, 0
	st.b	$t2, $a7, 0
	addi.d	$t0, $t0, 1
	addi.d	$a7, $a7, 1
	addi.d	$t1, $t1, 2
	bnez	$t0, .LBB1_40
# %bb.41:                               # %_ZL28truncOrZextVecInLoopWithVW16IthEvPKT_PT0_i.exit25
                                        #   in Loop: Header=BB1_33 Depth=1
	addi.d	$s2, $s2, -1
	bnez	$s2, .LBB1_33
.LBB1_42:                               # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp40:
	move	$a0, $s6
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp41:
# %bb.43:                               # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit33
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 312
	beqz	$a0, .LBB1_45
# %bb.44:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i35
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB1_45:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit39
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	addi.d	$sp, $fp, -416
	ld.d	$s8, $sp, 328                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 336                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 344                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 352                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 360                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 368                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 376                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 384                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 392                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 400                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 408                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 416
	ret
.LBB1_46:                               # %vector.early.exit
	pcalau12i	$a0, %pc_hi20(.LCPI1_0)
	xvld	$xr1, $a0, %pc_lo12(.LCPI1_0)
	xvand.v	$xr0, $xr0, $xr1
	xvpermi.q	$xr1, $xr0, 1
	vmax.bu	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	andi	$a0, $a0, 48
	vpickve2gr.b	$a2, $vr0, 1
	andi	$a2, $a2, 31
	sltu	$a3, $a2, $a0
	masknez	$a2, $a2, $a3
	maskeqz	$a0, $a0, $a3
	or	$a0, $a0, $a2
	vpickve2gr.b	$a2, $vr0, 2
	andi	$a2, $a2, 30
	sltu	$a3, $a2, $a0
	maskeqz	$a0, $a0, $a3
	masknez	$a2, $a2, $a3
	or	$a0, $a0, $a2
	vpickve2gr.b	$a2, $vr0, 3
	andi	$a2, $a2, 29
	sltu	$a3, $a2, $a0
	maskeqz	$a0, $a0, $a3
	masknez	$a2, $a2, $a3
	or	$a0, $a0, $a2
	vpickve2gr.b	$a2, $vr0, 4
	andi	$a2, $a2, 28
	sltu	$a3, $a2, $a0
	maskeqz	$a0, $a0, $a3
	masknez	$a2, $a2, $a3
	or	$a0, $a0, $a2
	vpickve2gr.b	$a2, $vr0, 5
	andi	$a2, $a2, 27
	sltu	$a3, $a2, $a0
	maskeqz	$a0, $a0, $a3
	masknez	$a2, $a2, $a3
	or	$a0, $a0, $a2
	vpickve2gr.b	$a2, $vr0, 6
	andi	$a2, $a2, 26
	sltu	$a3, $a2, $a0
	maskeqz	$a0, $a0, $a3
	masknez	$a2, $a2, $a3
	or	$a0, $a0, $a2
	vpickve2gr.b	$a2, $vr0, 7
	andi	$a2, $a2, 25
	sltu	$a3, $a2, $a0
	maskeqz	$a0, $a0, $a3
	masknez	$a2, $a2, $a3
	or	$a0, $a0, $a2
	vpickve2gr.b	$a2, $vr0, 8
	andi	$a2, $a2, 24
	sltu	$a3, $a2, $a0
	maskeqz	$a0, $a0, $a3
	masknez	$a2, $a2, $a3
	or	$a0, $a0, $a2
	vpickve2gr.b	$a2, $vr0, 9
	andi	$a2, $a2, 23
	sltu	$a3, $a2, $a0
	maskeqz	$a0, $a0, $a3
	masknez	$a2, $a2, $a3
	or	$a0, $a0, $a2
	vpickve2gr.b	$a2, $vr0, 10
	andi	$a2, $a2, 22
	sltu	$a3, $a2, $a0
	maskeqz	$a0, $a0, $a3
	masknez	$a2, $a2, $a3
	or	$a0, $a0, $a2
	vpickve2gr.b	$a2, $vr0, 11
	andi	$a2, $a2, 21
	sltu	$a3, $a2, $a0
	maskeqz	$a0, $a0, $a3
	masknez	$a2, $a2, $a3
	or	$a0, $a0, $a2
	vpickve2gr.b	$a2, $vr0, 12
	andi	$a2, $a2, 20
	sltu	$a3, $a2, $a0
	maskeqz	$a0, $a0, $a3
	masknez	$a2, $a2, $a3
	or	$a0, $a0, $a2
	vpickve2gr.b	$a2, $vr0, 13
	andi	$a2, $a2, 19
	sltu	$a3, $a2, $a0
	maskeqz	$a0, $a0, $a3
	masknez	$a2, $a2, $a3
	or	$a0, $a0, $a2
	vpickve2gr.b	$a2, $vr0, 14
	andi	$a2, $a2, 18
	sltu	$a3, $a2, $a0
	maskeqz	$a0, $a0, $a3
	masknez	$a2, $a2, $a3
	or	$a0, $a0, $a2
	vpickve2gr.b	$a2, $vr0, 15
	andi	$a2, $a2, 17
	sltu	$a3, $a2, $a0
	maskeqz	$a0, $a0, $a3
	masknez	$a2, $a2, $a3
	or	$a0, $a0, $a2
	ori	$a2, $zero, 32
	sub.d	$a0, $a2, $a0
	andi	$a0, $a0, 255
	add.d	$a0, $a0, $a1
	addi.d	$s6, $a0, -32
	b	.LBB1_58
.LBB1_47:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1794
	b	.LBB1_58
.LBB1_48:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1795
	b	.LBB1_58
.LBB1_49:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1797
	b	.LBB1_58
.LBB1_50:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1798
	b	.LBB1_58
.LBB1_51:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1799
	b	.LBB1_58
.LBB1_52:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1801
	b	.LBB1_58
.LBB1_53:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1802
	b	.LBB1_58
.LBB1_54:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1803
	b	.LBB1_58
.LBB1_55:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1805
	b	.LBB1_58
.LBB1_56:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1806
	b	.LBB1_58
.LBB1_57:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1807
.LBB1_58:                               # %.loopexit
.Ltmp43:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp44:
# %bb.59:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	slli.d	$a0, $s6, 1
	ldx.hu	$a1, $s0, $a0
.Ltmp45:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp46:
# %bb.60:                               # %_ZNSolsEt.exit
.Ltmp47:
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp48:
# %bb.61:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.bu	$a1, $s4, $s6
.Ltmp49:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp50:
# %bb.62:
.Ltmp51:
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp52:
# %bb.63:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit20
	ldx.bu	$a1, $s1, $s6
.Ltmp53:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp54:
# %bb.64:
.Ltmp55:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp56:
# %bb.65:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB1_66:                               # %.thread
.Ltmp34:
	move	$s2, $a0
	b	.LBB1_72
.LBB1_67:
.Ltmp31:
	move	$s2, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB1_68:
.Ltmp42:
	b	.LBB1_71
.LBB1_69:
.Ltmp57:
	b	.LBB1_71
.LBB1_70:
.Ltmp37:
.LBB1_71:
	move	$s2, $a0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s4, $sp, 312
	beqz	$s4, .LBB1_73
.LBB1_72:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i28
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB1_73:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end1:
	.size	_Z61benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint8_t_RN9benchmark5StateE, .Lfunc_end1-_Z61benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint8_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table1:
.Lexception1:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end1-.Lcst_begin1
.Lcst_begin1:
	.uleb128 .Lfunc_begin1-.Lfunc_begin1    # >> Call Site 1 <<
	.uleb128 .Ltmp29-.Lfunc_begin1          #   Call between .Lfunc_begin1 and .Ltmp29
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp29-.Lfunc_begin1          # >> Call Site 2 <<
	.uleb128 .Ltmp30-.Ltmp29                #   Call between .Ltmp29 and .Ltmp30
	.uleb128 .Ltmp31-.Lfunc_begin1          #     jumps to .Ltmp31
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp32-.Lfunc_begin1          # >> Call Site 3 <<
	.uleb128 .Ltmp33-.Ltmp32                #   Call between .Ltmp32 and .Ltmp33
	.uleb128 .Ltmp34-.Lfunc_begin1          #     jumps to .Ltmp34
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp35-.Lfunc_begin1          # >> Call Site 4 <<
	.uleb128 .Ltmp36-.Ltmp35                #   Call between .Ltmp35 and .Ltmp36
	.uleb128 .Ltmp37-.Lfunc_begin1          #     jumps to .Ltmp37
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp38-.Lfunc_begin1          # >> Call Site 5 <<
	.uleb128 .Ltmp41-.Ltmp38                #   Call between .Ltmp38 and .Ltmp41
	.uleb128 .Ltmp42-.Lfunc_begin1          #     jumps to .Ltmp42
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp41-.Lfunc_begin1          # >> Call Site 6 <<
	.uleb128 .Ltmp43-.Ltmp41                #   Call between .Ltmp41 and .Ltmp43
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp43-.Lfunc_begin1          # >> Call Site 7 <<
	.uleb128 .Ltmp56-.Ltmp43                #   Call between .Ltmp43 and .Ltmp56
	.uleb128 .Ltmp57-.Lfunc_begin1          #     jumps to .Ltmp57
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp56-.Lfunc_begin1          # >> Call Site 8 <<
	.uleb128 .Lfunc_end1-.Ltmp56            #   Call between .Ltmp56 and .Lfunc_end1
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end1:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5, 0x0                          # -- Begin function _Z53benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint8_t_RN9benchmark5StateE
.LCPI2_0:
	.byte	32                              # 0x20
	.byte	31                              # 0x1f
	.byte	30                              # 0x1e
	.byte	29                              # 0x1d
	.byte	28                              # 0x1c
	.byte	27                              # 0x1b
	.byte	26                              # 0x1a
	.byte	25                              # 0x19
	.byte	24                              # 0x18
	.byte	23                              # 0x17
	.byte	22                              # 0x16
	.byte	21                              # 0x15
	.byte	20                              # 0x14
	.byte	19                              # 0x13
	.byte	18                              # 0x12
	.byte	17                              # 0x11
	.byte	16                              # 0x10
	.byte	15                              # 0xf
	.byte	14                              # 0xe
	.byte	13                              # 0xd
	.byte	12                              # 0xc
	.byte	11                              # 0xb
	.byte	10                              # 0xa
	.byte	9                               # 0x9
	.byte	8                               # 0x8
	.byte	7                               # 0x7
	.byte	6                               # 0x6
	.byte	5                               # 0x5
	.byte	4                               # 0x4
	.byte	3                               # 0x3
	.byte	2                               # 0x2
	.byte	1                               # 0x1
	.text
	.globl	_Z53benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint8_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z53benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint8_t_RN9benchmark5StateE,@function
_Z53benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint8_t_RN9benchmark5StateE: # @_Z53benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint8_t_RN9benchmark5StateE
.Lfunc_begin2:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception2
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	st.d	$s8, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s0, $a0
	lu12i.w	$a0, 4
	ori	$s4, $a0, 3616
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp58:
	lu12i.w	$s2, 2
	ori	$s3, $s2, 1808
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp59:
# %bb.1:                                # %.split
	move	$s1, $a0
	st.d	$s0, $sp, 0                     # 8-byte Folded Spill
	st.d	$a0, $sp, 8
.Ltmp61:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp62:
# %bb.2:                                # %.split148
	move	$s0, $a0
	ori	$s2, $s2, 1793
	add.d	$s7, $s1, $s2
	add.d	$s8, $a0, $s2
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 20
	lu12i.w	$a0, -5
	ori	$s6, $a0, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB2_3:                                # =>This Inner Loop Header: Depth=1
.Ltmp64:
	addi.d	$a0, $sp, 20
	addi.d	$a2, $sp, 20
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp65:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB2_3 Depth=1
	add.d	$a1, $fp, $s6
	addi.d	$s6, $s6, 2
	stx.h	$a0, $a1, $s4
	bnez	$s6, .LBB2_3
# %bb.5:                                # %vector.ph
	addi.d	$a0, $fp, 2
	lu12i.w	$s6, -3
	ori	$a1, $s6, 2288
	lu12i.w	$a6, 2
	ori	$a2, $a6, 1809
	.p2align	4, , 16
.LBB2_6:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ld.b	$a3, $a0, -2
	ld.b	$a4, $a0, 0
	add.d	$a5, $s0, $a1
	stx.b	$a3, $a5, $s3
	stx.b	$a4, $a5, $a2
	addi.d	$a1, $a1, 2
	addi.d	$a0, $a0, 4
	bnez	$a1, .LBB2_6
# %bb.7:                                # %vector.body78.preheader
	addi.d	$a0, $s1, 8
	lu12i.w	$a1, -5
	ori	$a1, $a1, 480
	lu12i.w	$a2, 4
	ori	$a2, $a2, 3632
	.p2align	4, , 16
.LBB2_8:                                # %vector.body78
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a3, $fp, $a1
	vldx	$vr0, $a3, $s4
	vldx	$vr1, $a3, $a2
	vpickev.b	$vr0, $vr0, $vr0
	vpickev.b	$vr1, $vr1, $vr1
	vpackev.d	$vr0, $vr1, $vr0
	vst	$vr0, $a0, -8
	addi.d	$a1, $a1, 32
	addi.d	$a0, $a0, 16
	bnez	$a1, .LBB2_8
# %bb.9:                                # %vector.body86.preheader
	move	$a0, $zero
	ori	$a1, $a6, 1760
	.p2align	4, , 16
.LBB2_10:                               # %vector.body86
                                        # =>This Inner Loop Header: Depth=1
	move	$a2, $a0
	xvldx	$xr0, $s1, $a0
	xvldx	$xr1, $s0, $a0
	xvseq.b	$xr0, $xr0, $xr1
	xvxori.b	$xr0, $xr0, 255
	xvmskltz.b	$xr1, $xr0
	xvpickve2gr.wu	$a0, $xr1, 0
	xvpickve2gr.wu	$a3, $xr1, 4
	bstrins.d	$a0, $a3, 31, 16
	addi.w	$a3, $a0, 0
	addi.d	$a0, $a2, 32
	bnez	$a3, .LBB2_12
# %bb.11:                               # %vector.body86
                                        #   in Loop: Header=BB2_10 Depth=1
	bne	$a2, $a1, .LBB2_10
.LBB2_12:                               # %middle.split
	bnez	$a3, .LBB2_44
# %bb.13:                               # %_ZL20truncOrZextVecInLoopIthEvPKT_PT0_i.exit.preheader
	ori	$s5, $a6, 1792
	ldx.bu	$a0, $s1, $s5
	ldx.bu	$a1, $s0, $s5
	bne	$a0, $a1, .LBB2_56
# %bb.14:                               # %_ZL20truncOrZextVecInLoopIthEvPKT_PT0_i.exit
	ld.bu	$a0, $s7, 0
	ld.bu	$a1, $s8, 0
	move	$s5, $s2
	bne	$a0, $a1, .LBB2_56
# %bb.15:                               # %_ZL20truncOrZextVecInLoopIthEvPKT_PT0_i.exit.1
	ld.bu	$a0, $s7, 1
	ld.bu	$a1, $s8, 1
	bne	$a0, $a1, .LBB2_45
# %bb.16:                               # %_ZL20truncOrZextVecInLoopIthEvPKT_PT0_i.exit.2
	ld.bu	$a0, $s7, 2
	ld.bu	$a1, $s8, 2
	bne	$a0, $a1, .LBB2_46
# %bb.17:                               # %_ZL20truncOrZextVecInLoopIthEvPKT_PT0_i.exit.3
	ori	$s5, $a6, 1796
	ldx.bu	$a0, $s1, $s5
	ldx.bu	$a1, $s0, $s5
	bne	$a0, $a1, .LBB2_56
# %bb.18:                               # %_ZL20truncOrZextVecInLoopIthEvPKT_PT0_i.exit.4
	ld.bu	$a0, $s7, 4
	ld.bu	$a1, $s8, 4
	bne	$a0, $a1, .LBB2_47
# %bb.19:                               # %_ZL20truncOrZextVecInLoopIthEvPKT_PT0_i.exit.5
	ld.bu	$a0, $s7, 5
	ld.bu	$a1, $s8, 5
	bne	$a0, $a1, .LBB2_48
# %bb.20:                               # %_ZL20truncOrZextVecInLoopIthEvPKT_PT0_i.exit.6
	ld.bu	$a0, $s7, 6
	ld.bu	$a1, $s8, 6
	bne	$a0, $a1, .LBB2_49
# %bb.21:                               # %_ZL20truncOrZextVecInLoopIthEvPKT_PT0_i.exit.7
	ori	$s5, $a6, 1800
	ldx.bu	$a0, $s1, $s5
	ldx.bu	$a1, $s0, $s5
	bne	$a0, $a1, .LBB2_56
# %bb.22:                               # %_ZL20truncOrZextVecInLoopIthEvPKT_PT0_i.exit.8
	ld.bu	$a0, $s7, 8
	ld.bu	$a1, $s8, 8
	bne	$a0, $a1, .LBB2_50
# %bb.23:                               # %_ZL20truncOrZextVecInLoopIthEvPKT_PT0_i.exit.9
	ld.bu	$a0, $s7, 9
	ld.bu	$a1, $s8, 9
	bne	$a0, $a1, .LBB2_51
# %bb.24:                               # %_ZL20truncOrZextVecInLoopIthEvPKT_PT0_i.exit.10
	ld.bu	$a0, $s7, 10
	ld.bu	$a1, $s8, 10
	bne	$a0, $a1, .LBB2_52
# %bb.25:                               # %_ZL20truncOrZextVecInLoopIthEvPKT_PT0_i.exit.11
	ori	$s5, $a6, 1804
	ldx.bu	$a0, $s1, $s5
	ldx.bu	$a1, $s0, $s5
	bne	$a0, $a1, .LBB2_56
# %bb.26:                               # %_ZL20truncOrZextVecInLoopIthEvPKT_PT0_i.exit.12
	ld.bu	$a0, $s7, 12
	ld.bu	$a1, $s8, 12
	bne	$a0, $a1, .LBB2_53
# %bb.27:                               # %_ZL20truncOrZextVecInLoopIthEvPKT_PT0_i.exit.13
	ld.bu	$a0, $s7, 13
	ld.bu	$a1, $s8, 13
	bne	$a0, $a1, .LBB2_54
# %bb.28:                               # %_ZL20truncOrZextVecInLoopIthEvPKT_PT0_i.exit.14
	ld.bu	$a0, $s7, 14
	ld.bu	$a1, $s8, 14
	bne	$a0, $a1, .LBB2_55
# %bb.29:                               # %_ZL20truncOrZextVecInLoopIthEvPKT_PT0_i.exit.15
	ld.d	$s5, $sp, 0                     # 8-byte Folded Reload
	ld.w	$s2, $s5, 28
	ld.d	$s1, $s5, 16
.Ltmp67:
	move	$a0, $s5
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp68:
# %bb.30:                               # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s2, .LBB2_40
# %bb.31:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s1, .LBB2_40
# %bb.32:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s4
	addi.d	$a1, $fp, 16
	addi.d	$a2, $sp, 8
	ori	$a3, $s6, 2288
	b	.LBB2_34
	.p2align	4, , 16
.LBB2_33:                               # %_ZL20truncOrZextVecInLoopIthEvPKT_PT0_i.exit25
                                        #   in Loop: Header=BB2_34 Depth=1
	addi.d	$s1, $s1, -1
	beqz	$s1, .LBB2_40
.LBB2_34:                               # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB2_39 Depth 2
                                        #     Child Loop BB2_37 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a4, $sp, 8
	bgeu	$a4, $a0, .LBB2_38
# %bb.35:                               # %.lr.ph
                                        #   in Loop: Header=BB2_34 Depth=1
	add.d	$a5, $a4, $s3
	bgeu	$fp, $a5, .LBB2_38
# %bb.36:                               # %.lr.ph.i21.preheader
                                        #   in Loop: Header=BB2_34 Depth=1
	move	$a5, $fp
	move	$a6, $a3
	.p2align	4, , 16
.LBB2_37:                               # %.lr.ph.i21
                                        #   Parent Loop BB2_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a7, $a5, 0
	add.d	$t0, $a4, $a6
	stx.b	$a7, $t0, $s3
	addi.d	$a6, $a6, 1
	addi.d	$a5, $a5, 2
	bnez	$a6, .LBB2_37
	b	.LBB2_33
	.p2align	4, , 16
.LBB2_38:                               # %vector.body96.preheader
                                        #   in Loop: Header=BB2_34 Depth=1
	move	$a5, $a1
	move	$a6, $a3
	.p2align	4, , 16
.LBB2_39:                               # %vector.body96
                                        #   Parent Loop BB2_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr0, $a5, -16
	vld	$vr1, $a5, 0
	vpickev.b	$vr0, $vr0, $vr0
	vpickev.b	$vr1, $vr1, $vr1
	add.d	$a7, $a4, $a6
	vpackev.d	$vr0, $vr1, $vr0
	vstx	$vr0, $a7, $s3
	addi.d	$a6, $a6, 16
	addi.d	$a5, $a5, 32
	bnez	$a6, .LBB2_39
	b	.LBB2_33
.LBB2_40:                               # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp69:
	move	$a0, $s5
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp70:
# %bb.41:                               # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit33
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 8
	beqz	$a0, .LBB2_43
# %bb.42:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i35
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB2_43:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit39
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB2_44:                               # %vector.early.exit
	pcalau12i	$a1, %pc_hi20(.LCPI2_0)
	xvld	$xr1, $a1, %pc_lo12(.LCPI2_0)
	xvand.v	$xr0, $xr0, $xr1
	xvpermi.q	$xr1, $xr0, 1
	vmax.bu	$vr0, $vr0, $vr1
	vpickve2gr.b	$a1, $vr0, 0
	andi	$a1, $a1, 48
	vpickve2gr.b	$a2, $vr0, 1
	andi	$a2, $a2, 31
	sltu	$a3, $a2, $a1
	masknez	$a2, $a2, $a3
	maskeqz	$a1, $a1, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 2
	andi	$a2, $a2, 30
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 3
	andi	$a2, $a2, 29
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 4
	andi	$a2, $a2, 28
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 5
	andi	$a2, $a2, 27
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 6
	andi	$a2, $a2, 26
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 7
	andi	$a2, $a2, 25
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 8
	andi	$a2, $a2, 24
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 9
	andi	$a2, $a2, 23
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 10
	andi	$a2, $a2, 22
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 11
	andi	$a2, $a2, 21
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 12
	andi	$a2, $a2, 20
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 13
	andi	$a2, $a2, 19
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 14
	andi	$a2, $a2, 18
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 15
	andi	$a2, $a2, 17
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	ori	$a2, $zero, 32
	sub.d	$a1, $a2, $a1
	andi	$a1, $a1, 255
	add.d	$a0, $a1, $a0
	addi.d	$s5, $a0, -32
	b	.LBB2_56
.LBB2_45:
	ori	$s5, $a6, 1794
	b	.LBB2_56
.LBB2_46:
	ori	$s5, $a6, 1795
	b	.LBB2_56
.LBB2_47:
	ori	$s5, $a6, 1797
	b	.LBB2_56
.LBB2_48:
	ori	$s5, $a6, 1798
	b	.LBB2_56
.LBB2_49:
	ori	$s5, $a6, 1799
	b	.LBB2_56
.LBB2_50:
	ori	$s5, $a6, 1801
	b	.LBB2_56
.LBB2_51:
	ori	$s5, $a6, 1802
	b	.LBB2_56
.LBB2_52:
	ori	$s5, $a6, 1803
	b	.LBB2_56
.LBB2_53:
	ori	$s5, $a6, 1805
	b	.LBB2_56
.LBB2_54:
	ori	$s5, $a6, 1806
	b	.LBB2_56
.LBB2_55:
	ori	$s5, $a6, 1807
.LBB2_56:                               # %.loopexit
.Ltmp72:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp73:
# %bb.57:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	slli.d	$a0, $s5, 1
	ldx.hu	$a1, $fp, $a0
.Ltmp74:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp75:
# %bb.58:                               # %_ZNSolsEt.exit
.Ltmp76:
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp77:
# %bb.59:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.bu	$a1, $s1, $s5
.Ltmp78:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp79:
# %bb.60:
.Ltmp80:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp81:
# %bb.61:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit20
	ldx.bu	$a1, $s0, $s5
.Ltmp82:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp83:
# %bb.62:
.Ltmp84:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp85:
# %bb.63:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB2_64:                               # %.thread
.Ltmp63:
	move	$s2, $a0
	b	.LBB2_70
.LBB2_65:
.Ltmp60:
	move	$s2, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB2_66:
.Ltmp71:
	b	.LBB2_69
.LBB2_67:
.Ltmp86:
	b	.LBB2_69
.LBB2_68:
.Ltmp66:
.LBB2_69:
	move	$s2, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s1, $sp, 8
	beqz	$s1, .LBB2_71
.LBB2_70:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i28
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB2_71:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end2:
	.size	_Z53benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint8_t_RN9benchmark5StateE, .Lfunc_end2-_Z53benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint8_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table2:
.Lexception2:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end2-.Lcst_begin2
.Lcst_begin2:
	.uleb128 .Lfunc_begin2-.Lfunc_begin2    # >> Call Site 1 <<
	.uleb128 .Ltmp58-.Lfunc_begin2          #   Call between .Lfunc_begin2 and .Ltmp58
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp58-.Lfunc_begin2          # >> Call Site 2 <<
	.uleb128 .Ltmp59-.Ltmp58                #   Call between .Ltmp58 and .Ltmp59
	.uleb128 .Ltmp60-.Lfunc_begin2          #     jumps to .Ltmp60
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp61-.Lfunc_begin2          # >> Call Site 3 <<
	.uleb128 .Ltmp62-.Ltmp61                #   Call between .Ltmp61 and .Ltmp62
	.uleb128 .Ltmp63-.Lfunc_begin2          #     jumps to .Ltmp63
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp64-.Lfunc_begin2          # >> Call Site 4 <<
	.uleb128 .Ltmp65-.Ltmp64                #   Call between .Ltmp64 and .Ltmp65
	.uleb128 .Ltmp66-.Lfunc_begin2          #     jumps to .Ltmp66
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp67-.Lfunc_begin2          # >> Call Site 5 <<
	.uleb128 .Ltmp70-.Ltmp67                #   Call between .Ltmp67 and .Ltmp70
	.uleb128 .Ltmp71-.Lfunc_begin2          #     jumps to .Ltmp71
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp70-.Lfunc_begin2          # >> Call Site 6 <<
	.uleb128 .Ltmp72-.Ltmp70                #   Call between .Ltmp70 and .Ltmp72
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp72-.Lfunc_begin2          # >> Call Site 7 <<
	.uleb128 .Ltmp85-.Ltmp72                #   Call between .Ltmp72 and .Ltmp85
	.uleb128 .Ltmp86-.Lfunc_begin2          #     jumps to .Ltmp86
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp85-.Lfunc_begin2          # >> Call Site 8 <<
	.uleb128 .Lfunc_end2-.Ltmp85            #   Call between .Ltmp85 and .Lfunc_end2
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end2:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint8_t_RN9benchmark5StateE # -- Begin function _Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint8_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint8_t_RN9benchmark5StateE,@function
_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint8_t_RN9benchmark5StateE: # @_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint8_t_RN9benchmark5StateE
.Lfunc_begin3:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception3
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	st.d	$s8, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s0, $a0
	lu12i.w	$s5, 4
	ori	$s2, $s5, 3616
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp87:
	lu12i.w	$a0, 2
	ori	$s1, $a0, 1808
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp88:
# %bb.1:
	move	$s3, $a0
	st.d	$a0, $sp, 8
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 18
	lu12i.w	$s7, -5
	ori	$s8, $s7, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB3_2:                                # =>This Inner Loop Header: Depth=1
.Ltmp90:
	addi.d	$a0, $sp, 18
	addi.d	$a2, $sp, 18
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp91:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB3_2 Depth=1
	add.d	$a1, $fp, $s8
	addi.d	$s8, $s8, 2
	stx.h	$a0, $a1, $s2
	bnez	$s8, .LBB3_2
# %bb.4:
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 22
	lu12i.w	$s8, -3
	ori	$s6, $s8, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB3_5:                                # =>This Inner Loop Header: Depth=1
.Ltmp93:
	addi.d	$a0, $sp, 22
	addi.d	$a2, $sp, 22
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp94:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB3_5 Depth=1
	add.d	$a1, $s3, $s6
	addi.d	$s6, $s6, 1
	stx.b	$a0, $a1, $s1
	bnez	$s6, .LBB3_5
# %bb.7:
	ld.w	$s4, $s0, 28
	ld.d	$s3, $s0, 16
.Ltmp96:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp97:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s4, .LBB3_20
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s3, .LBB3_20
# %bb.10:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s2
	addi.d	$a1, $fp, 48
	addi.d	$a2, $sp, 8
	ori	$a3, $s8, 2288
	ori	$a4, $s7, 512
	ori	$a5, $s5, 3536
	ori	$a6, $s5, 3552
	ori	$a7, $s5, 3568
	ori	$t0, $s5, 3584
	lu12i.w	$t1, 2
	ori	$t1, $t1, 1792
	.p2align	4, , 16
.LBB3_11:                               # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB3_15 Depth 2
                                        #     Child Loop BB3_18 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$t2, $sp, 8
	bgeu	$t2, $a0, .LBB3_14
# %bb.12:                               # %.lr.ph
                                        #   in Loop: Header=BB3_11 Depth=1
	add.d	$t3, $t2, $s1
	bgeu	$fp, $t3, .LBB3_14
# %bb.13:                               #   in Loop: Header=BB3_11 Depth=1
	move	$t4, $zero
	b	.LBB3_17
	.p2align	4, , 16
.LBB3_14:                               # %vector.body.preheader
                                        #   in Loop: Header=BB3_11 Depth=1
	addi.d	$t3, $t2, 16
	move	$t4, $a4
	.p2align	4, , 16
.LBB3_15:                               # %vector.body
                                        #   Parent Loop BB3_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$t5, $a1, $t4
	vldx	$vr0, $t5, $a5
	vldx	$vr1, $t5, $a6
	vldx	$vr2, $t5, $a7
	ld.d	$t6, $t3, -16
	ld.d	$t7, $t3, -8
	vldx	$vr3, $t5, $t0
	ld.d	$t5, $t3, 0
	vinsgr2vr.d	$vr4, $t6, 0
	vinsgr2vr.d	$vr5, $t7, 0
	vpickev.b	$vr0, $vr0, $vr0
	vinsgr2vr.d	$vr6, $t5, 0
	ld.d	$t5, $t3, 8
	vpickev.b	$vr1, $vr1, $vr1
	vpickev.b	$vr2, $vr2, $vr2
	vpickev.b	$vr3, $vr3, $vr3
	vinsgr2vr.d	$vr7, $t5, 0
	vadd.b	$vr0, $vr4, $vr0
	vadd.b	$vr1, $vr5, $vr1
	vadd.b	$vr2, $vr6, $vr2
	vadd.b	$vr3, $vr7, $vr3
	vpickve2gr.d	$t5, $vr0, 0
	xvinsgr2vr.d	$xr0, $t5, 0
	vpickve2gr.d	$t5, $vr1, 0
	xvinsgr2vr.d	$xr0, $t5, 1
	vpickve2gr.d	$t5, $vr2, 0
	xvinsgr2vr.d	$xr0, $t5, 2
	vpickve2gr.d	$t5, $vr3, 0
	xvinsgr2vr.d	$xr0, $t5, 3
	xvst	$xr0, $t3, -16
	addi.d	$t4, $t4, 64
	addi.d	$t3, $t3, 32
	bnez	$t4, .LBB3_15
# %bb.16:                               #   in Loop: Header=BB3_11 Depth=1
	move	$t4, $t1
.LBB3_17:                               # %.lr.ph.i.preheader
                                        #   in Loop: Header=BB3_11 Depth=1
	add.d	$t3, $t4, $a3
	add.d	$t2, $t2, $t4
	alsl.d	$t4, $t4, $fp, 1
	.p2align	4, , 16
.LBB3_18:                               # %.lr.ph.i
                                        #   Parent Loop BB3_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$t5, $t4, 0
	ld.b	$t6, $t2, 0
	add.d	$t5, $t6, $t5
	st.b	$t5, $t2, 0
	addi.d	$t3, $t3, 1
	addi.d	$t2, $t2, 1
	addi.d	$t4, $t4, 2
	bnez	$t3, .LBB3_18
# %bb.19:                               # %_ZL34truncOrZextVecWithAddInLoopWithVW8IthEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB3_11 Depth=1
	addi.d	$s3, $s3, -1
	bnez	$s3, .LBB3_11
.LBB3_20:                               # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp98:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp99:
# %bb.21:                               # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 8
	beqz	$a0, .LBB3_23
# %bb.22:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB3_23:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB3_24:
.Ltmp89:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB3_25:
.Ltmp100:
	ld.d	$s3, $sp, 8
	move	$s0, $a0
	bnez	$s3, .LBB3_29
	b	.LBB3_30
.LBB3_26:                               # %.loopexit
.Ltmp95:
	b	.LBB3_28
.LBB3_27:                               # %.loopexit.split-lp
.Ltmp92:
.LBB3_28:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB3_29:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB3_30:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end3:
	.size	_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint8_t_RN9benchmark5StateE, .Lfunc_end3-_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint8_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table3:
.Lexception3:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end3-.Lcst_begin3
.Lcst_begin3:
	.uleb128 .Lfunc_begin3-.Lfunc_begin3    # >> Call Site 1 <<
	.uleb128 .Ltmp87-.Lfunc_begin3          #   Call between .Lfunc_begin3 and .Ltmp87
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp87-.Lfunc_begin3          # >> Call Site 2 <<
	.uleb128 .Ltmp88-.Ltmp87                #   Call between .Ltmp87 and .Ltmp88
	.uleb128 .Ltmp89-.Lfunc_begin3          #     jumps to .Ltmp89
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp90-.Lfunc_begin3          # >> Call Site 3 <<
	.uleb128 .Ltmp91-.Ltmp90                #   Call between .Ltmp90 and .Ltmp91
	.uleb128 .Ltmp92-.Lfunc_begin3          #     jumps to .Ltmp92
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp93-.Lfunc_begin3          # >> Call Site 4 <<
	.uleb128 .Ltmp94-.Ltmp93                #   Call between .Ltmp93 and .Ltmp94
	.uleb128 .Ltmp95-.Lfunc_begin3          #     jumps to .Ltmp95
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp96-.Lfunc_begin3          # >> Call Site 5 <<
	.uleb128 .Ltmp99-.Ltmp96                #   Call between .Ltmp96 and .Ltmp99
	.uleb128 .Ltmp100-.Lfunc_begin3         #     jumps to .Ltmp100
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp99-.Lfunc_begin3          # >> Call Site 6 <<
	.uleb128 .Lfunc_end3-.Ltmp99            #   Call between .Ltmp99 and .Lfunc_end3
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end3:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint8_t_RN9benchmark5StateE # -- Begin function _Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint8_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint8_t_RN9benchmark5StateE,@function
_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint8_t_RN9benchmark5StateE: # @_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint8_t_RN9benchmark5StateE
.Lfunc_begin4:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception4
# %bb.0:
	addi.d	$sp, $sp, -288
	.cfi_def_cfa_offset 288
	st.d	$ra, $sp, 280                   # 8-byte Folded Spill
	st.d	$fp, $sp, 272                   # 8-byte Folded Spill
	st.d	$s0, $sp, 264                   # 8-byte Folded Spill
	st.d	$s1, $sp, 256                   # 8-byte Folded Spill
	st.d	$s2, $sp, 248                   # 8-byte Folded Spill
	st.d	$s3, $sp, 240                   # 8-byte Folded Spill
	st.d	$s4, $sp, 232                   # 8-byte Folded Spill
	st.d	$s5, $sp, 224                   # 8-byte Folded Spill
	st.d	$s6, $sp, 216                   # 8-byte Folded Spill
	st.d	$s7, $sp, 208                   # 8-byte Folded Spill
	st.d	$s8, $sp, 200                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	addi.d	$fp, $sp, 288
	.cfi_def_cfa 22, 0
	bstrins.d	$sp, $zero, 4, 0
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	lu12i.w	$s6, 4
	ori	$s3, $s6, 3616
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$s0, $a0
.Ltmp101:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1808
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp102:
# %bb.1:
	move	$s4, $a0
	st.d	$a0, $sp, 184
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 196
	lu12i.w	$s8, -5
	ori	$s1, $s8, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB4_2:                                # =>This Inner Loop Header: Depth=1
.Ltmp104:
	addi.d	$a0, $sp, 196
	addi.d	$a2, $sp, 196
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp105:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB4_2 Depth=1
	add.d	$a1, $s0, $s1
	addi.d	$s1, $s1, 2
	stx.h	$a0, $a1, $s3
	bnez	$s1, .LBB4_2
# %bb.4:
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 196
	lu12i.w	$s1, -3
	ori	$s7, $s1, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB4_5:                                # =>This Inner Loop Header: Depth=1
.Ltmp107:
	addi.d	$a0, $sp, 196
	addi.d	$a2, $sp, 196
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp108:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB4_5 Depth=1
	add.d	$a1, $s4, $s7
	addi.d	$s7, $s7, 1
	stx.b	$a0, $a1, $s2
	bnez	$s7, .LBB4_5
# %bb.7:
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	ld.w	$s5, $a0, 28
	ld.d	$s4, $a0, 16
.Ltmp110:
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp111:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s5, .LBB4_20
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s4, .LBB4_20
# %bb.10:                               # %.lr.ph.preheader
	add.d	$a0, $s0, $s3
	addi.d	$a1, $s0, 96
	addi.d	$a2, $sp, 184
	ori	$a3, $s1, 2288
	ori	$a4, $s8, 512
	ori	$a5, $s6, 3488
	ori	$a6, $s6, 3520
	ori	$a7, $s6, 3552
	ori	$t0, $s6, 3584
	lu12i.w	$t1, 2
	ori	$t1, $t1, 1792
	.p2align	4, , 16
.LBB4_11:                               # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_15 Depth 2
                                        #     Child Loop BB4_18 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$t2, $sp, 184
	bgeu	$t2, $a0, .LBB4_14
# %bb.12:                               # %.lr.ph
                                        #   in Loop: Header=BB4_11 Depth=1
	add.d	$t3, $t2, $s2
	bgeu	$s0, $t3, .LBB4_14
# %bb.13:                               #   in Loop: Header=BB4_11 Depth=1
	move	$t4, $zero
	b	.LBB4_17
	.p2align	4, , 16
.LBB4_14:                               # %vector.body.preheader
                                        #   in Loop: Header=BB4_11 Depth=1
	addi.d	$t3, $t2, 32
	move	$t4, $a4
	.p2align	4, , 16
.LBB4_15:                               # %vector.body
                                        #   Parent Loop BB4_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$t5, $a1, $t4
	xvldx	$xr2, $t5, $a5
	xvldx	$xr4, $t5, $a6
	xvldx	$xr3, $t5, $a7
	xvldx	$xr1, $t5, $t0
	xvst	$xr2, $sp, 128
	vpickve2gr.h	$t5, $vr2, 0
	vinsgr2vr.b	$vr0, $t5, 0
	vpickve2gr.h	$t5, $vr2, 1
	vinsgr2vr.b	$vr0, $t5, 1
	vpickve2gr.h	$t5, $vr2, 2
	vinsgr2vr.b	$vr0, $t5, 2
	vpickve2gr.h	$t5, $vr2, 3
	vinsgr2vr.b	$vr0, $t5, 3
	vpickve2gr.h	$t5, $vr2, 4
	vinsgr2vr.b	$vr0, $t5, 4
	vpickve2gr.h	$t5, $vr2, 5
	vinsgr2vr.b	$vr0, $t5, 5
	vpickve2gr.h	$t5, $vr2, 6
	vinsgr2vr.b	$vr0, $t5, 6
	vpickve2gr.h	$t5, $vr2, 7
	vinsgr2vr.b	$vr0, $t5, 7
	ld.h	$t5, $sp, 144
	ld.h	$t6, $sp, 146
	ld.h	$t7, $sp, 148
	ld.h	$t8, $sp, 150
	vinsgr2vr.b	$vr0, $t5, 8
	vinsgr2vr.b	$vr0, $t6, 9
	vinsgr2vr.b	$vr0, $t7, 10
	vinsgr2vr.b	$vr0, $t8, 11
	ld.h	$t5, $sp, 152
	ld.h	$t6, $sp, 154
	ld.h	$t7, $sp, 156
	ld.h	$t8, $sp, 158
	vinsgr2vr.b	$vr0, $t5, 12
	vinsgr2vr.b	$vr0, $t6, 13
	vinsgr2vr.b	$vr0, $t7, 14
	vinsgr2vr.b	$vr0, $t8, 15
	xvst	$xr4, $sp, 96
	vpickve2gr.h	$t5, $vr4, 0
	vinsgr2vr.b	$vr2, $t5, 0
	vpickve2gr.h	$t5, $vr4, 1
	vinsgr2vr.b	$vr2, $t5, 1
	vpickve2gr.h	$t5, $vr4, 2
	vinsgr2vr.b	$vr2, $t5, 2
	vpickve2gr.h	$t5, $vr4, 3
	vinsgr2vr.b	$vr2, $t5, 3
	vpickve2gr.h	$t5, $vr4, 4
	vinsgr2vr.b	$vr2, $t5, 4
	vpickve2gr.h	$t5, $vr4, 5
	vinsgr2vr.b	$vr2, $t5, 5
	vpickve2gr.h	$t5, $vr4, 6
	vinsgr2vr.b	$vr2, $t5, 6
	vpickve2gr.h	$t5, $vr4, 7
	vinsgr2vr.b	$vr2, $t5, 7
	ld.h	$t5, $sp, 112
	ld.h	$t6, $sp, 114
	ld.h	$t7, $sp, 116
	ld.h	$t8, $sp, 118
	vinsgr2vr.b	$vr2, $t5, 8
	vinsgr2vr.b	$vr2, $t6, 9
	vinsgr2vr.b	$vr2, $t7, 10
	vinsgr2vr.b	$vr2, $t8, 11
	ld.h	$t5, $sp, 120
	ld.h	$t6, $sp, 122
	ld.h	$t7, $sp, 124
	ld.h	$t8, $sp, 126
	vinsgr2vr.b	$vr2, $t5, 12
	vinsgr2vr.b	$vr2, $t6, 13
	vinsgr2vr.b	$vr2, $t7, 14
	vinsgr2vr.b	$vr2, $t8, 15
	xvst	$xr3, $sp, 64
	vpickve2gr.h	$t5, $vr3, 0
	vinsgr2vr.b	$vr4, $t5, 0
	vpickve2gr.h	$t5, $vr3, 1
	vinsgr2vr.b	$vr4, $t5, 1
	vpickve2gr.h	$t5, $vr3, 2
	vinsgr2vr.b	$vr4, $t5, 2
	vpickve2gr.h	$t5, $vr3, 3
	vinsgr2vr.b	$vr4, $t5, 3
	vpickve2gr.h	$t5, $vr3, 4
	vinsgr2vr.b	$vr4, $t5, 4
	vpickve2gr.h	$t5, $vr3, 5
	vinsgr2vr.b	$vr4, $t5, 5
	vpickve2gr.h	$t5, $vr3, 6
	vinsgr2vr.b	$vr4, $t5, 6
	vpickve2gr.h	$t5, $vr3, 7
	vinsgr2vr.b	$vr4, $t5, 7
	ld.h	$t5, $sp, 80
	ld.h	$t6, $sp, 82
	ld.h	$t7, $sp, 84
	ld.h	$t8, $sp, 86
	vinsgr2vr.b	$vr4, $t5, 8
	vinsgr2vr.b	$vr4, $t6, 9
	vinsgr2vr.b	$vr4, $t7, 10
	vinsgr2vr.b	$vr4, $t8, 11
	ld.h	$t5, $sp, 88
	ld.h	$t6, $sp, 90
	ld.h	$t7, $sp, 92
	ld.h	$t8, $sp, 94
	vinsgr2vr.b	$vr4, $t5, 12
	vinsgr2vr.b	$vr4, $t6, 13
	vinsgr2vr.b	$vr4, $t7, 14
	vinsgr2vr.b	$vr4, $t8, 15
	xvst	$xr1, $sp, 32
	vpickve2gr.h	$t5, $vr1, 0
	vinsgr2vr.b	$vr3, $t5, 0
	vpickve2gr.h	$t5, $vr1, 1
	vinsgr2vr.b	$vr3, $t5, 1
	vpickve2gr.h	$t5, $vr1, 2
	vinsgr2vr.b	$vr3, $t5, 2
	vpickve2gr.h	$t5, $vr1, 3
	vinsgr2vr.b	$vr3, $t5, 3
	vpickve2gr.h	$t5, $vr1, 4
	vinsgr2vr.b	$vr3, $t5, 4
	vpickve2gr.h	$t5, $vr1, 5
	vinsgr2vr.b	$vr3, $t5, 5
	vpickve2gr.h	$t5, $vr1, 6
	vinsgr2vr.b	$vr3, $t5, 6
	vpickve2gr.h	$t5, $vr1, 7
	vinsgr2vr.b	$vr3, $t5, 7
	ld.h	$t5, $sp, 48
	ld.h	$t6, $sp, 50
	ld.h	$t7, $sp, 52
	ld.h	$t8, $sp, 54
	vinsgr2vr.b	$vr3, $t5, 8
	vinsgr2vr.b	$vr3, $t6, 9
	vinsgr2vr.b	$vr3, $t7, 10
	vinsgr2vr.b	$vr3, $t8, 11
	ld.h	$t5, $sp, 56
	ld.h	$t6, $sp, 58
	ld.h	$t7, $sp, 60
	ld.h	$t8, $sp, 62
	vinsgr2vr.b	$vr3, $t5, 12
	vinsgr2vr.b	$vr3, $t6, 13
	vinsgr2vr.b	$vr3, $t7, 14
	vinsgr2vr.b	$vr3, $t8, 15
	vld	$vr1, $t3, -32
	vld	$vr5, $t3, -16
	vld	$vr6, $t3, 0
	vld	$vr7, $t3, 16
	vadd.b	$vr0, $vr1, $vr0
	vadd.b	$vr1, $vr5, $vr2
	vadd.b	$vr2, $vr6, $vr4
	vadd.b	$vr3, $vr7, $vr3
	vst	$vr0, $t3, -32
	vst	$vr1, $t3, -16
	vst	$vr2, $t3, 0
	vst	$vr3, $t3, 16
	addi.d	$t4, $t4, 128
	addi.d	$t3, $t3, 64
	bnez	$t4, .LBB4_15
# %bb.16:                               #   in Loop: Header=BB4_11 Depth=1
	move	$t4, $t1
.LBB4_17:                               # %.lr.ph.i.preheader
                                        #   in Loop: Header=BB4_11 Depth=1
	add.d	$t3, $t4, $a3
	add.d	$t2, $t2, $t4
	alsl.d	$t4, $t4, $s0, 1
	.p2align	4, , 16
.LBB4_18:                               # %.lr.ph.i
                                        #   Parent Loop BB4_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$t5, $t4, 0
	ld.b	$t6, $t2, 0
	add.d	$t5, $t6, $t5
	st.b	$t5, $t2, 0
	addi.d	$t3, $t3, 1
	addi.d	$t2, $t2, 1
	addi.d	$t4, $t4, 2
	bnez	$t3, .LBB4_18
# %bb.19:                               # %_ZL35truncOrZextVecWithAddInLoopWithVW16IthEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB4_11 Depth=1
	addi.d	$s4, $s4, -1
	bnez	$s4, .LBB4_11
.LBB4_20:                               # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp112:
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp113:
# %bb.21:                               # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 184
	beqz	$a0, .LBB4_23
# %bb.22:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB4_23:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	addi.d	$sp, $fp, -288
	ld.d	$s8, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 216                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 224                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 232                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 240                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 248                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 256                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 264                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 272                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 280                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 288
	ret
.LBB4_24:
.Ltmp103:
	move	$s1, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB4_25:
.Ltmp114:
	ld.d	$s4, $sp, 184
	move	$s1, $a0
	bnez	$s4, .LBB4_29
	b	.LBB4_30
.LBB4_26:                               # %.loopexit
.Ltmp109:
	b	.LBB4_28
.LBB4_27:                               # %.loopexit.split-lp
.Ltmp106:
.LBB4_28:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s1, $a0
.LBB4_29:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB4_30:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end4:
	.size	_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint8_t_RN9benchmark5StateE, .Lfunc_end4-_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint8_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table4:
.Lexception4:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end4-.Lcst_begin4
.Lcst_begin4:
	.uleb128 .Lfunc_begin4-.Lfunc_begin4    # >> Call Site 1 <<
	.uleb128 .Ltmp101-.Lfunc_begin4         #   Call between .Lfunc_begin4 and .Ltmp101
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp101-.Lfunc_begin4         # >> Call Site 2 <<
	.uleb128 .Ltmp102-.Ltmp101              #   Call between .Ltmp101 and .Ltmp102
	.uleb128 .Ltmp103-.Lfunc_begin4         #     jumps to .Ltmp103
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp104-.Lfunc_begin4         # >> Call Site 3 <<
	.uleb128 .Ltmp105-.Ltmp104              #   Call between .Ltmp104 and .Ltmp105
	.uleb128 .Ltmp106-.Lfunc_begin4         #     jumps to .Ltmp106
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp107-.Lfunc_begin4         # >> Call Site 4 <<
	.uleb128 .Ltmp108-.Ltmp107              #   Call between .Ltmp107 and .Ltmp108
	.uleb128 .Ltmp109-.Lfunc_begin4         #     jumps to .Ltmp109
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp110-.Lfunc_begin4         # >> Call Site 5 <<
	.uleb128 .Ltmp113-.Ltmp110              #   Call between .Ltmp110 and .Ltmp113
	.uleb128 .Ltmp114-.Lfunc_begin4         #     jumps to .Ltmp114
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp113-.Lfunc_begin4         # >> Call Site 6 <<
	.uleb128 .Lfunc_end4-.Ltmp113           #   Call between .Ltmp113 and .Lfunc_end4
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end4:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint8_t_RN9benchmark5StateE # -- Begin function _Z60benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint8_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint8_t_RN9benchmark5StateE,@function
_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint8_t_RN9benchmark5StateE: # @_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint8_t_RN9benchmark5StateE
.Lfunc_begin5:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception5
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	addi.d	$fp, $sp, 128
	.cfi_def_cfa 22, 0
	bstrins.d	$sp, $zero, 4, 0
	move	$s1, $a0
	lu12i.w	$a0, 4
	ori	$s2, $a0, 3616
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$s0, $a0
.Ltmp115:
	lu12i.w	$a0, 2
	ori	$s3, $a0, 1808
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp116:
# %bb.1:
	move	$s4, $a0
	st.d	$a0, $sp, 32
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 44
	lu12i.w	$s6, -5
	ori	$s7, $s6, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB5_2:                                # =>This Inner Loop Header: Depth=1
.Ltmp118:
	addi.d	$a0, $sp, 44
	addi.d	$a2, $sp, 44
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp119:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB5_2 Depth=1
	add.d	$a1, $s0, $s7
	addi.d	$s7, $s7, 2
	stx.h	$a0, $a1, $s2
	bnez	$s7, .LBB5_2
# %bb.4:
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 44
	lu12i.w	$a0, -3
	ori	$s7, $a0, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB5_5:                                # =>This Inner Loop Header: Depth=1
.Ltmp121:
	addi.d	$a0, $sp, 44
	addi.d	$a2, $sp, 44
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp122:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB5_5 Depth=1
	add.d	$a1, $s4, $s7
	addi.d	$s7, $s7, 1
	stx.b	$a0, $a1, $s3
	bnez	$s7, .LBB5_5
# %bb.7:
	ld.w	$s5, $s1, 28
	ld.d	$s4, $s1, 16
.Ltmp124:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp125:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s5, .LBB5_18
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s4, .LBB5_18
# %bb.10:                               # %.lr.ph.preheader
	add.d	$a0, $s0, $s2
	addi.d	$a1, $sp, 32
	ori	$a2, $s6, 480
	b	.LBB5_12
	.p2align	4, , 16
.LBB5_11:                               # %_ZL27truncOrZextVecWithAddInLoopIthEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB5_12 Depth=1
	addi.d	$s4, $s4, -1
	beqz	$s4, .LBB5_18
.LBB5_12:                               # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_17 Depth 2
                                        #     Child Loop BB5_15 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a3, $sp, 32
	bgeu	$a3, $a0, .LBB5_16
# %bb.13:                               # %.lr.ph
                                        #   in Loop: Header=BB5_12 Depth=1
	add.d	$a4, $a3, $s3
	bgeu	$s0, $a4, .LBB5_16
# %bb.14:                               # %.lr.ph.i.preheader
                                        #   in Loop: Header=BB5_12 Depth=1
	move	$a4, $a2
	.p2align	4, , 16
.LBB5_15:                               # %.lr.ph.i
                                        #   Parent Loop BB5_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a5, $s0, $a4
	ldx.b	$a5, $a5, $s2
	ld.b	$a6, $a3, 0
	add.d	$a5, $a6, $a5
	st.b	$a5, $a3, 0
	addi.d	$a4, $a4, 2
	addi.d	$a3, $a3, 1
	bnez	$a4, .LBB5_15
	b	.LBB5_11
	.p2align	4, , 16
.LBB5_16:                               # %vector.body.preheader
                                        #   in Loop: Header=BB5_12 Depth=1
	move	$a4, $a2
	.p2align	4, , 16
.LBB5_17:                               # %vector.body
                                        #   Parent Loop BB5_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a5, $s0, $a4
	xvldx	$xr0, $a5, $s2
	xvst	$xr0, $sp, 0
	vpickve2gr.h	$a5, $vr0, 0
	vinsgr2vr.b	$vr1, $a5, 0
	vpickve2gr.h	$a5, $vr0, 1
	vinsgr2vr.b	$vr1, $a5, 1
	vpickve2gr.h	$a5, $vr0, 2
	vinsgr2vr.b	$vr1, $a5, 2
	vpickve2gr.h	$a5, $vr0, 3
	vinsgr2vr.b	$vr1, $a5, 3
	vpickve2gr.h	$a5, $vr0, 4
	vinsgr2vr.b	$vr1, $a5, 4
	vpickve2gr.h	$a5, $vr0, 5
	vinsgr2vr.b	$vr1, $a5, 5
	vpickve2gr.h	$a5, $vr0, 6
	ld.h	$a6, $sp, 16
	vinsgr2vr.b	$vr1, $a5, 6
	vpickve2gr.h	$a5, $vr0, 7
	vinsgr2vr.b	$vr1, $a5, 7
	vinsgr2vr.b	$vr1, $a6, 8
	ld.h	$a5, $sp, 18
	ld.h	$a6, $sp, 20
	ld.h	$a7, $sp, 22
	ld.h	$t0, $sp, 24
	vinsgr2vr.b	$vr1, $a5, 9
	vinsgr2vr.b	$vr1, $a6, 10
	vinsgr2vr.b	$vr1, $a7, 11
	vinsgr2vr.b	$vr1, $t0, 12
	ld.h	$a5, $sp, 26
	ld.h	$a6, $sp, 28
	ld.h	$a7, $sp, 30
	vld	$vr0, $a3, 0
	vinsgr2vr.b	$vr1, $a5, 13
	vinsgr2vr.b	$vr1, $a6, 14
	vinsgr2vr.b	$vr1, $a7, 15
	vadd.b	$vr0, $vr0, $vr1
	vst	$vr0, $a3, 0
	addi.d	$a4, $a4, 32
	addi.d	$a3, $a3, 16
	bnez	$a4, .LBB5_17
	b	.LBB5_11
.LBB5_18:                               # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp126:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp127:
# %bb.19:                               # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 32
	beqz	$a0, .LBB5_21
# %bb.20:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB5_21:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	addi.d	$sp, $fp, -128
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB5_22:
.Ltmp117:
	move	$s1, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB5_23:
.Ltmp128:
	ld.d	$s4, $sp, 32
	move	$s1, $a0
	bnez	$s4, .LBB5_27
	b	.LBB5_28
.LBB5_24:                               # %.loopexit
.Ltmp123:
	b	.LBB5_26
.LBB5_25:                               # %.loopexit.split-lp
.Ltmp120:
.LBB5_26:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s1, $a0
.LBB5_27:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB5_28:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end5:
	.size	_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint8_t_RN9benchmark5StateE, .Lfunc_end5-_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint8_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table5:
.Lexception5:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end5-.Lcst_begin5
.Lcst_begin5:
	.uleb128 .Lfunc_begin5-.Lfunc_begin5    # >> Call Site 1 <<
	.uleb128 .Ltmp115-.Lfunc_begin5         #   Call between .Lfunc_begin5 and .Ltmp115
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp115-.Lfunc_begin5         # >> Call Site 2 <<
	.uleb128 .Ltmp116-.Ltmp115              #   Call between .Ltmp115 and .Ltmp116
	.uleb128 .Ltmp117-.Lfunc_begin5         #     jumps to .Ltmp117
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp118-.Lfunc_begin5         # >> Call Site 3 <<
	.uleb128 .Ltmp119-.Ltmp118              #   Call between .Ltmp118 and .Ltmp119
	.uleb128 .Ltmp120-.Lfunc_begin5         #     jumps to .Ltmp120
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp121-.Lfunc_begin5         # >> Call Site 4 <<
	.uleb128 .Ltmp122-.Ltmp121              #   Call between .Ltmp121 and .Ltmp122
	.uleb128 .Ltmp123-.Lfunc_begin5         #     jumps to .Ltmp123
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp124-.Lfunc_begin5         # >> Call Site 5 <<
	.uleb128 .Ltmp127-.Ltmp124              #   Call between .Ltmp124 and .Ltmp127
	.uleb128 .Ltmp128-.Lfunc_begin5         #     jumps to .Ltmp128
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp127-.Lfunc_begin5         # >> Call Site 6 <<
	.uleb128 .Lfunc_end5-.Ltmp127           #   Call between .Ltmp127 and .Lfunc_end5
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end5:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5, 0x0                          # -- Begin function _Z60benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint8_t_RN9benchmark5StateE
.LCPI6_0:
	.byte	32                              # 0x20
	.byte	31                              # 0x1f
	.byte	30                              # 0x1e
	.byte	29                              # 0x1d
	.byte	28                              # 0x1c
	.byte	27                              # 0x1b
	.byte	26                              # 0x1a
	.byte	25                              # 0x19
	.byte	24                              # 0x18
	.byte	23                              # 0x17
	.byte	22                              # 0x16
	.byte	21                              # 0x15
	.byte	20                              # 0x14
	.byte	19                              # 0x13
	.byte	18                              # 0x12
	.byte	17                              # 0x11
	.byte	16                              # 0x10
	.byte	15                              # 0xf
	.byte	14                              # 0xe
	.byte	13                              # 0xd
	.byte	12                              # 0xc
	.byte	11                              # 0xb
	.byte	10                              # 0xa
	.byte	9                               # 0x9
	.byte	8                               # 0x8
	.byte	7                               # 0x7
	.byte	6                               # 0x6
	.byte	5                               # 0x5
	.byte	4                               # 0x4
	.byte	3                               # 0x3
	.byte	2                               # 0x2
	.byte	1                               # 0x1
	.text
	.globl	_Z60benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint8_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z60benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint8_t_RN9benchmark5StateE,@function
_Z60benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint8_t_RN9benchmark5StateE: # @_Z60benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint8_t_RN9benchmark5StateE
.Lfunc_begin6:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception6
# %bb.0:
	addi.d	$sp, $sp, -272
	.cfi_def_cfa_offset 272
	st.d	$ra, $sp, 264                   # 8-byte Folded Spill
	st.d	$fp, $sp, 256                   # 8-byte Folded Spill
	st.d	$s0, $sp, 248                   # 8-byte Folded Spill
	st.d	$s1, $sp, 240                   # 8-byte Folded Spill
	st.d	$s2, $sp, 232                   # 8-byte Folded Spill
	st.d	$s3, $sp, 224                   # 8-byte Folded Spill
	st.d	$s4, $sp, 216                   # 8-byte Folded Spill
	st.d	$s5, $sp, 208                   # 8-byte Folded Spill
	st.d	$s6, $sp, 200                   # 8-byte Folded Spill
	st.d	$s7, $sp, 192                   # 8-byte Folded Spill
	st.d	$s8, $sp, 184                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s0, $a0
	lu12i.w	$s2, 9
	ori	$s4, $s2, 3136
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp129:
	lu12i.w	$a0, 2
	ori	$s3, $a0, 1808
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp130:
# %bb.1:                                # %.split
	move	$s1, $a0
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $sp, 168
.Ltmp132:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp133:
# %bb.2:                                # %.split161
	move	$s0, $a0
	move	$s8, $zero
	ori	$s2, $s2, 3072
	add.d	$s6, $fp, $s2
	lu12i.w	$a0, 2
	ori	$a0, $a0, 1793
	add.d	$s7, $s1, $a0
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	add.d	$a0, $s0, $a0
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 176
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB6_3:                                # =>This Inner Loop Header: Depth=1
.Ltmp135:
	addi.d	$a0, $sp, 176
	addi.d	$a2, $sp, 176
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp136:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB6_3 Depth=1
	stx.w	$a0, $fp, $s8
	addi.d	$s8, $s8, 4
	bne	$s8, $s4, .LBB6_3
# %bb.5:                                # %vector.ph
	addi.d	$a0, $fp, 4
	lu12i.w	$s5, -3
	ori	$a1, $s5, 2288
	lu12i.w	$s8, 2
	ori	$a2, $s8, 1809
	.p2align	4, , 16
.LBB6_6:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ld.b	$a3, $a0, -4
	ld.b	$a4, $a0, 0
	add.d	$a5, $s0, $a1
	stx.b	$a3, $a5, $s3
	stx.b	$a4, $a5, $a2
	addi.d	$a1, $a1, 2
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB6_6
# %bb.7:                                # %vector.body78.preheader
	move	$a0, $zero
	addi.d	$a1, $s1, 16
	.p2align	4, , 16
.LBB6_8:                                # %vector.body78
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a0
	xvldx	$xr0, $fp, $a0
	xvld	$xr1, $a2, 32
	xvld	$xr2, $a2, 64
	xvld	$xr3, $a2, 96
	xvpickve2gr.w	$a2, $xr0, 7
	st.b	$a2, $sp, 103
	xvpickve2gr.w	$a2, $xr0, 6
	st.b	$a2, $sp, 102
	xvpickve2gr.w	$a2, $xr0, 5
	st.b	$a2, $sp, 101
	xvpickve2gr.w	$a2, $xr0, 4
	st.b	$a2, $sp, 100
	xvpickve2gr.w	$a2, $xr0, 3
	st.b	$a2, $sp, 99
	xvpickve2gr.w	$a2, $xr0, 2
	st.b	$a2, $sp, 98
	xvpickve2gr.w	$a2, $xr0, 1
	st.b	$a2, $sp, 97
	xvpickve2gr.w	$a2, $xr0, 0
	st.b	$a2, $sp, 96
	xvpickve2gr.w	$a2, $xr1, 7
	st.b	$a2, $sp, 151
	xvpickve2gr.w	$a2, $xr1, 6
	st.b	$a2, $sp, 150
	xvpickve2gr.w	$a2, $xr1, 5
	st.b	$a2, $sp, 149
	xvpickve2gr.w	$a2, $xr1, 4
	st.b	$a2, $sp, 148
	xvpickve2gr.w	$a2, $xr1, 3
	st.b	$a2, $sp, 147
	xvpickve2gr.w	$a2, $xr1, 2
	st.b	$a2, $sp, 146
	xvpickve2gr.w	$a2, $xr1, 1
	st.b	$a2, $sp, 145
	xvpickve2gr.w	$a2, $xr1, 0
	st.b	$a2, $sp, 144
	xvpickve2gr.w	$a2, $xr2, 7
	st.b	$a2, $sp, 135
	xvpickve2gr.w	$a2, $xr2, 6
	st.b	$a2, $sp, 134
	xvpickve2gr.w	$a2, $xr2, 5
	st.b	$a2, $sp, 133
	xvpickve2gr.w	$a2, $xr2, 4
	st.b	$a2, $sp, 132
	xvpickve2gr.w	$a2, $xr2, 3
	st.b	$a2, $sp, 131
	xvpickve2gr.w	$a2, $xr2, 2
	st.b	$a2, $sp, 130
	xvpickve2gr.w	$a2, $xr2, 1
	st.b	$a2, $sp, 129
	xvpickve2gr.w	$a2, $xr2, 0
	st.b	$a2, $sp, 128
	xvpickve2gr.w	$a2, $xr3, 7
	st.b	$a2, $sp, 119
	xvpickve2gr.w	$a2, $xr3, 6
	st.b	$a2, $sp, 118
	xvpickve2gr.w	$a2, $xr3, 5
	st.b	$a2, $sp, 117
	xvpickve2gr.w	$a2, $xr3, 4
	st.b	$a2, $sp, 116
	xvpickve2gr.w	$a2, $xr3, 3
	st.b	$a2, $sp, 115
	xvpickve2gr.w	$a2, $xr3, 2
	st.b	$a2, $sp, 114
	xvpickve2gr.w	$a2, $xr3, 1
	st.b	$a2, $sp, 113
	xvpickve2gr.w	$a2, $xr3, 0
	st.b	$a2, $sp, 112
	ld.d	$a2, $sp, 96
	ld.d	$a3, $sp, 144
	ld.d	$a4, $sp, 128
	ld.d	$a5, $sp, 112
	xvinsgr2vr.d	$xr0, $a2, 0
	xvinsgr2vr.d	$xr0, $a3, 1
	xvinsgr2vr.d	$xr0, $a4, 2
	xvinsgr2vr.d	$xr0, $a5, 3
	xvst	$xr0, $a1, -16
	addi.d	$a0, $a0, 128
	addi.d	$a1, $a1, 32
	bne	$a0, $s2, .LBB6_8
# %bb.9:                                # %.lr.ph.i
	move	$a0, $zero
	ld.b	$a1, $s6, 0
	ori	$s2, $s8, 1792
	ld.b	$a2, $s6, 4
	ld.b	$a3, $s6, 8
	ld.b	$a4, $s6, 12
	stx.b	$a1, $s1, $s2
	st.b	$a2, $s7, 0
	st.b	$a3, $s7, 1
	st.b	$a4, $s7, 2
	ld.b	$a1, $s6, 16
	ori	$a3, $s8, 1796
	ld.b	$a2, $s6, 20
	ld.b	$a4, $s6, 24
	ld.b	$a5, $s6, 28
	stx.b	$a1, $s1, $a3
	st.b	$a2, $s7, 4
	st.b	$a4, $s7, 5
	st.b	$a5, $s7, 6
	ld.b	$a1, $s6, 32
	ori	$a2, $s8, 1800
	ld.b	$a4, $s6, 36
	ld.b	$a5, $s6, 40
	ld.b	$a6, $s6, 44
	stx.b	$a1, $s1, $a2
	st.b	$a4, $s7, 8
	st.b	$a5, $s7, 9
	st.b	$a6, $s7, 10
	ld.b	$a4, $s6, 48
	ori	$a1, $s8, 1804
	ld.b	$a5, $s6, 52
	ld.b	$a6, $s6, 56
	ld.b	$a7, $s6, 60
	stx.b	$a4, $s1, $a1
	st.b	$a5, $s7, 12
	st.b	$a6, $s7, 13
	st.b	$a7, $s7, 14
	ori	$a4, $s8, 1760
	.p2align	4, , 16
.LBB6_10:                               # %vector.body88
                                        # =>This Inner Loop Header: Depth=1
	move	$a5, $a0
	xvldx	$xr0, $s1, $a0
	xvldx	$xr1, $s0, $a0
	xvseq.b	$xr0, $xr0, $xr1
	xvxori.b	$xr0, $xr0, 255
	xvmskltz.b	$xr1, $xr0
	xvpickve2gr.wu	$a0, $xr1, 0
	xvpickve2gr.wu	$a6, $xr1, 4
	bstrins.d	$a0, $a6, 31, 16
	addi.w	$a6, $a0, 0
	addi.d	$a0, $a5, 32
	bnez	$a6, .LBB6_12
# %bb.11:                               # %vector.body88
                                        #   in Loop: Header=BB6_10 Depth=1
	bne	$a5, $a4, .LBB6_10
.LBB6_12:                               # %middle.split
	ld.d	$a5, $sp, 24                    # 8-byte Folded Reload
	bnez	$a6, .LBB6_46
# %bb.13:                               # %_ZL27truncOrZextVecInLoopWithVW8IjhEvPKT_PT0_i.exit.preheader
	ldx.bu	$a0, $s1, $s2
	ldx.bu	$a4, $s0, $s2
	bne	$a0, $a4, .LBB6_58
# %bb.14:                               # %_ZL27truncOrZextVecInLoopWithVW8IjhEvPKT_PT0_i.exit
	ld.bu	$a0, $s7, 0
	ld.bu	$a4, $a5, 0
	ld.d	$s2, $sp, 16                    # 8-byte Folded Reload
	bne	$a0, $a4, .LBB6_58
# %bb.15:                               # %_ZL27truncOrZextVecInLoopWithVW8IjhEvPKT_PT0_i.exit.1
	ld.bu	$a0, $s7, 1
	ld.bu	$a4, $a5, 1
	bne	$a0, $a4, .LBB6_47
# %bb.16:                               # %_ZL27truncOrZextVecInLoopWithVW8IjhEvPKT_PT0_i.exit.2
	ld.bu	$a0, $s7, 2
	ld.bu	$a4, $a5, 2
	bne	$a0, $a4, .LBB6_48
# %bb.17:                               # %_ZL27truncOrZextVecInLoopWithVW8IjhEvPKT_PT0_i.exit.3
	ldx.bu	$a0, $s1, $a3
	ldx.bu	$a4, $s0, $a3
	move	$s2, $a3
	bne	$a0, $a4, .LBB6_58
# %bb.18:                               # %_ZL27truncOrZextVecInLoopWithVW8IjhEvPKT_PT0_i.exit.4
	ld.bu	$a0, $s7, 4
	ld.bu	$a3, $a5, 4
	bne	$a0, $a3, .LBB6_49
# %bb.19:                               # %_ZL27truncOrZextVecInLoopWithVW8IjhEvPKT_PT0_i.exit.5
	ld.bu	$a0, $s7, 5
	ld.bu	$a3, $a5, 5
	bne	$a0, $a3, .LBB6_50
# %bb.20:                               # %_ZL27truncOrZextVecInLoopWithVW8IjhEvPKT_PT0_i.exit.6
	ld.bu	$a0, $s7, 6
	ld.bu	$a3, $a5, 6
	bne	$a0, $a3, .LBB6_51
# %bb.21:                               # %_ZL27truncOrZextVecInLoopWithVW8IjhEvPKT_PT0_i.exit.7
	ldx.bu	$a0, $s1, $a2
	ldx.bu	$a3, $s0, $a2
	move	$s2, $a2
	bne	$a0, $a3, .LBB6_58
# %bb.22:                               # %_ZL27truncOrZextVecInLoopWithVW8IjhEvPKT_PT0_i.exit.8
	ld.bu	$a0, $s7, 8
	ld.bu	$a2, $a5, 8
	bne	$a0, $a2, .LBB6_52
# %bb.23:                               # %_ZL27truncOrZextVecInLoopWithVW8IjhEvPKT_PT0_i.exit.9
	ld.bu	$a0, $s7, 9
	ld.bu	$a2, $a5, 9
	bne	$a0, $a2, .LBB6_53
# %bb.24:                               # %_ZL27truncOrZextVecInLoopWithVW8IjhEvPKT_PT0_i.exit.10
	ld.bu	$a0, $s7, 10
	ld.bu	$a2, $a5, 10
	bne	$a0, $a2, .LBB6_54
# %bb.25:                               # %_ZL27truncOrZextVecInLoopWithVW8IjhEvPKT_PT0_i.exit.11
	ldx.bu	$a0, $s1, $a1
	ldx.bu	$a2, $s0, $a1
	move	$s2, $a1
	bne	$a0, $a2, .LBB6_58
# %bb.26:                               # %_ZL27truncOrZextVecInLoopWithVW8IjhEvPKT_PT0_i.exit.12
	ld.bu	$a0, $s7, 12
	ld.bu	$a1, $a5, 12
	bne	$a0, $a1, .LBB6_55
# %bb.27:                               # %_ZL27truncOrZextVecInLoopWithVW8IjhEvPKT_PT0_i.exit.13
	ld.bu	$a0, $s7, 13
	ld.bu	$a1, $a5, 13
	bne	$a0, $a1, .LBB6_56
# %bb.28:                               # %_ZL27truncOrZextVecInLoopWithVW8IjhEvPKT_PT0_i.exit.14
	ld.bu	$a0, $s7, 14
	ld.bu	$a1, $a5, 14
	bne	$a0, $a1, .LBB6_57
# %bb.29:                               # %_ZL27truncOrZextVecInLoopWithVW8IjhEvPKT_PT0_i.exit.15
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.w	$s2, $s6, 28
	ld.d	$s1, $s6, 16
.Ltmp138:
	move	$a0, $s6
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp139:
# %bb.30:                               # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s2, .LBB6_42
# %bb.31:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s1, .LBB6_42
# %bb.32:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s4
	addi.d	$a1, $fp, 64
	addi.d	$a2, $sp, 168
	ori	$a3, $s5, 2288
	ori	$a4, $s5, 2304
	ori	$a5, $s8, 1776
	ori	$a6, $s8, 1792
	.p2align	4, , 16
.LBB6_33:                               # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_37 Depth 2
                                        #     Child Loop BB6_40 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a7, $sp, 168
	bgeu	$a7, $a0, .LBB6_36
# %bb.34:                               # %.lr.ph
                                        #   in Loop: Header=BB6_33 Depth=1
	add.d	$t0, $a7, $s3
	bgeu	$fp, $t0, .LBB6_36
# %bb.35:                               #   in Loop: Header=BB6_33 Depth=1
	move	$t1, $zero
	b	.LBB6_39
	.p2align	4, , 16
.LBB6_36:                               # %vector.body98.preheader
                                        #   in Loop: Header=BB6_33 Depth=1
	addi.d	$t0, $a7, 16
	move	$t1, $a1
	move	$t2, $a4
	.p2align	4, , 16
.LBB6_37:                               # %vector.body98
                                        #   Parent Loop BB6_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr0, $t1, -64
	xvld	$xr1, $t1, -32
	xvld	$xr2, $t1, 0
	xvld	$xr3, $t1, 32
	xvpickve2gr.w	$t3, $xr0, 7
	st.b	$t3, $sp, 87
	xvpickve2gr.w	$t3, $xr0, 6
	st.b	$t3, $sp, 86
	xvpickve2gr.w	$t3, $xr0, 5
	st.b	$t3, $sp, 85
	xvpickve2gr.w	$t3, $xr0, 4
	st.b	$t3, $sp, 84
	xvpickve2gr.w	$t3, $xr0, 3
	st.b	$t3, $sp, 83
	xvpickve2gr.w	$t3, $xr0, 2
	st.b	$t3, $sp, 82
	xvpickve2gr.w	$t3, $xr0, 1
	st.b	$t3, $sp, 81
	xvpickve2gr.w	$t3, $xr0, 0
	st.b	$t3, $sp, 80
	xvpickve2gr.w	$t3, $xr1, 7
	st.b	$t3, $sp, 71
	xvpickve2gr.w	$t3, $xr1, 6
	st.b	$t3, $sp, 70
	xvpickve2gr.w	$t3, $xr1, 5
	st.b	$t3, $sp, 69
	xvpickve2gr.w	$t3, $xr1, 4
	st.b	$t3, $sp, 68
	xvpickve2gr.w	$t3, $xr1, 3
	st.b	$t3, $sp, 67
	xvpickve2gr.w	$t3, $xr1, 2
	st.b	$t3, $sp, 66
	xvpickve2gr.w	$t3, $xr1, 1
	st.b	$t3, $sp, 65
	xvpickve2gr.w	$t3, $xr1, 0
	st.b	$t3, $sp, 64
	xvpickve2gr.w	$t3, $xr2, 7
	st.b	$t3, $sp, 39
	xvpickve2gr.w	$t3, $xr2, 6
	st.b	$t3, $sp, 38
	xvpickve2gr.w	$t3, $xr2, 5
	st.b	$t3, $sp, 37
	xvpickve2gr.w	$t3, $xr2, 4
	st.b	$t3, $sp, 36
	xvpickve2gr.w	$t3, $xr2, 3
	st.b	$t3, $sp, 35
	xvpickve2gr.w	$t3, $xr2, 2
	st.b	$t3, $sp, 34
	xvpickve2gr.w	$t3, $xr2, 1
	st.b	$t3, $sp, 33
	xvpickve2gr.w	$t3, $xr2, 0
	st.b	$t3, $sp, 32
	xvpickve2gr.w	$t3, $xr3, 7
	st.b	$t3, $sp, 55
	xvpickve2gr.w	$t3, $xr3, 6
	st.b	$t3, $sp, 54
	xvpickve2gr.w	$t3, $xr3, 5
	st.b	$t3, $sp, 53
	xvpickve2gr.w	$t3, $xr3, 4
	st.b	$t3, $sp, 52
	xvpickve2gr.w	$t3, $xr3, 3
	st.b	$t3, $sp, 51
	xvpickve2gr.w	$t3, $xr3, 2
	st.b	$t3, $sp, 50
	xvpickve2gr.w	$t3, $xr3, 1
	st.b	$t3, $sp, 49
	xvpickve2gr.w	$t3, $xr3, 0
	st.b	$t3, $sp, 48
	ld.d	$t3, $sp, 80
	ld.d	$t4, $sp, 64
	ld.d	$t5, $sp, 32
	xvinsgr2vr.d	$xr0, $t3, 0
	ld.d	$t3, $sp, 48
	xvinsgr2vr.d	$xr0, $t4, 1
	xvinsgr2vr.d	$xr0, $t5, 2
	add.d	$t4, $t0, $t2
	xvinsgr2vr.d	$xr0, $t3, 3
	xvstx	$xr0, $t4, $a5
	addi.d	$t2, $t2, 32
	addi.d	$t1, $t1, 128
	bnez	$t2, .LBB6_37
# %bb.38:                               #   in Loop: Header=BB6_33 Depth=1
	move	$t1, $a6
.LBB6_39:                               # %.lr.ph.i21.preheader
                                        #   in Loop: Header=BB6_33 Depth=1
	add.d	$t0, $t1, $a3
	add.d	$a7, $a7, $t1
	alsl.d	$t1, $t1, $fp, 2
	.p2align	4, , 16
.LBB6_40:                               # %.lr.ph.i21
                                        #   Parent Loop BB6_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$t2, $t1, 0
	st.b	$t2, $a7, 0
	addi.d	$t0, $t0, 1
	addi.d	$a7, $a7, 1
	addi.d	$t1, $t1, 4
	bnez	$t0, .LBB6_40
# %bb.41:                               # %_ZL27truncOrZextVecInLoopWithVW8IjhEvPKT_PT0_i.exit25
                                        #   in Loop: Header=BB6_33 Depth=1
	addi.d	$s1, $s1, -1
	bnez	$s1, .LBB6_33
.LBB6_42:                               # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp140:
	move	$a0, $s6
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp141:
# %bb.43:                               # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit33
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 168
	beqz	$a0, .LBB6_45
# %bb.44:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i35
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB6_45:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit39
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 216                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 224                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 232                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 240                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 248                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 256                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 264                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 272
	ret
.LBB6_46:                               # %vector.early.exit
	pcalau12i	$a1, %pc_hi20(.LCPI6_0)
	xvld	$xr1, $a1, %pc_lo12(.LCPI6_0)
	xvand.v	$xr0, $xr0, $xr1
	xvpermi.q	$xr1, $xr0, 1
	vmax.bu	$vr0, $vr0, $vr1
	vpickve2gr.b	$a1, $vr0, 0
	andi	$a1, $a1, 48
	vpickve2gr.b	$a2, $vr0, 1
	andi	$a2, $a2, 31
	sltu	$a3, $a2, $a1
	masknez	$a2, $a2, $a3
	maskeqz	$a1, $a1, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 2
	andi	$a2, $a2, 30
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 3
	andi	$a2, $a2, 29
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 4
	andi	$a2, $a2, 28
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 5
	andi	$a2, $a2, 27
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 6
	andi	$a2, $a2, 26
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 7
	andi	$a2, $a2, 25
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 8
	andi	$a2, $a2, 24
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 9
	andi	$a2, $a2, 23
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 10
	andi	$a2, $a2, 22
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 11
	andi	$a2, $a2, 21
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 12
	andi	$a2, $a2, 20
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 13
	andi	$a2, $a2, 19
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 14
	andi	$a2, $a2, 18
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 15
	andi	$a2, $a2, 17
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	ori	$a2, $zero, 32
	sub.d	$a1, $a2, $a1
	andi	$a1, $a1, 255
	add.d	$a0, $a1, $a0
	addi.d	$s2, $a0, -32
	b	.LBB6_58
.LBB6_47:
	ori	$s2, $s8, 1794
	b	.LBB6_58
.LBB6_48:
	ori	$s2, $s8, 1795
	b	.LBB6_58
.LBB6_49:
	ori	$s2, $s8, 1797
	b	.LBB6_58
.LBB6_50:
	ori	$s2, $s8, 1798
	b	.LBB6_58
.LBB6_51:
	ori	$s2, $s8, 1799
	b	.LBB6_58
.LBB6_52:
	ori	$s2, $s8, 1801
	b	.LBB6_58
.LBB6_53:
	ori	$s2, $s8, 1802
	b	.LBB6_58
.LBB6_54:
	ori	$s2, $s8, 1803
	b	.LBB6_58
.LBB6_55:
	ori	$s2, $s8, 1805
	b	.LBB6_58
.LBB6_56:
	ori	$s2, $s8, 1806
	b	.LBB6_58
.LBB6_57:
	ori	$s2, $s8, 1807
.LBB6_58:                               # %.loopexit
.Ltmp143:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp144:
# %bb.59:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	slli.d	$a0, $s2, 2
	ldx.wu	$a1, $fp, $a0
.Ltmp145:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp146:
# %bb.60:                               # %_ZNSolsEj.exit
.Ltmp147:
	move	$s3, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp148:
# %bb.61:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.bu	$a1, $s1, $s2
.Ltmp149:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp150:
# %bb.62:
.Ltmp151:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp152:
# %bb.63:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit20
	ldx.bu	$a1, $s0, $s2
.Ltmp153:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp154:
# %bb.64:
.Ltmp155:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp156:
# %bb.65:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB6_66:                               # %.thread
.Ltmp134:
	move	$s2, $a0
	b	.LBB6_72
.LBB6_67:
.Ltmp131:
	move	$s2, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB6_68:
.Ltmp142:
	b	.LBB6_71
.LBB6_69:
.Ltmp157:
	b	.LBB6_71
.LBB6_70:
.Ltmp137:
.LBB6_71:
	move	$s2, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s1, $sp, 168
	beqz	$s1, .LBB6_73
.LBB6_72:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i28
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB6_73:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end6:
	.size	_Z60benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint8_t_RN9benchmark5StateE, .Lfunc_end6-_Z60benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint8_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table6:
.Lexception6:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end6-.Lcst_begin6
.Lcst_begin6:
	.uleb128 .Lfunc_begin6-.Lfunc_begin6    # >> Call Site 1 <<
	.uleb128 .Ltmp129-.Lfunc_begin6         #   Call between .Lfunc_begin6 and .Ltmp129
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp129-.Lfunc_begin6         # >> Call Site 2 <<
	.uleb128 .Ltmp130-.Ltmp129              #   Call between .Ltmp129 and .Ltmp130
	.uleb128 .Ltmp131-.Lfunc_begin6         #     jumps to .Ltmp131
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp132-.Lfunc_begin6         # >> Call Site 3 <<
	.uleb128 .Ltmp133-.Ltmp132              #   Call between .Ltmp132 and .Ltmp133
	.uleb128 .Ltmp134-.Lfunc_begin6         #     jumps to .Ltmp134
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp135-.Lfunc_begin6         # >> Call Site 4 <<
	.uleb128 .Ltmp136-.Ltmp135              #   Call between .Ltmp135 and .Ltmp136
	.uleb128 .Ltmp137-.Lfunc_begin6         #     jumps to .Ltmp137
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp138-.Lfunc_begin6         # >> Call Site 5 <<
	.uleb128 .Ltmp141-.Ltmp138              #   Call between .Ltmp138 and .Ltmp141
	.uleb128 .Ltmp142-.Lfunc_begin6         #     jumps to .Ltmp142
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp141-.Lfunc_begin6         # >> Call Site 6 <<
	.uleb128 .Ltmp143-.Ltmp141              #   Call between .Ltmp141 and .Ltmp143
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp143-.Lfunc_begin6         # >> Call Site 7 <<
	.uleb128 .Ltmp156-.Ltmp143              #   Call between .Ltmp143 and .Ltmp156
	.uleb128 .Ltmp157-.Lfunc_begin6         #     jumps to .Ltmp157
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp156-.Lfunc_begin6         # >> Call Site 8 <<
	.uleb128 .Lfunc_end6-.Ltmp156           #   Call between .Ltmp156 and .Lfunc_end6
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end6:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5, 0x0                          # -- Begin function _Z61benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint8_t_RN9benchmark5StateE
.LCPI7_0:
	.byte	32                              # 0x20
	.byte	31                              # 0x1f
	.byte	30                              # 0x1e
	.byte	29                              # 0x1d
	.byte	28                              # 0x1c
	.byte	27                              # 0x1b
	.byte	26                              # 0x1a
	.byte	25                              # 0x19
	.byte	24                              # 0x18
	.byte	23                              # 0x17
	.byte	22                              # 0x16
	.byte	21                              # 0x15
	.byte	20                              # 0x14
	.byte	19                              # 0x13
	.byte	18                              # 0x12
	.byte	17                              # 0x11
	.byte	16                              # 0x10
	.byte	15                              # 0xf
	.byte	14                              # 0xe
	.byte	13                              # 0xd
	.byte	12                              # 0xc
	.byte	11                              # 0xb
	.byte	10                              # 0xa
	.byte	9                               # 0x9
	.byte	8                               # 0x8
	.byte	7                               # 0x7
	.byte	6                               # 0x6
	.byte	5                               # 0x5
	.byte	4                               # 0x4
	.byte	3                               # 0x3
	.byte	2                               # 0x2
	.byte	1                               # 0x1
	.text
	.globl	_Z61benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint8_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z61benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint8_t_RN9benchmark5StateE,@function
_Z61benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint8_t_RN9benchmark5StateE: # @_Z61benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint8_t_RN9benchmark5StateE
.Lfunc_begin7:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception7
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s0, $a0
	lu12i.w	$s1, 9
	ori	$s4, $s1, 3136
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp158:
	lu12i.w	$s5, 2
	ori	$s2, $s5, 1808
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp159:
# %bb.1:                                # %.split
	move	$s3, $a0
	st.d	$s0, $sp, 0                     # 8-byte Folded Spill
	st.d	$a0, $sp, 24
.Ltmp161:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp162:
# %bb.2:                                # %.split161
	move	$s0, $a0
	move	$s8, $zero
	ori	$s6, $s1, 3072
	add.d	$s1, $fp, $s6
	ori	$a0, $s5, 1793
	add.d	$s7, $s3, $a0
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	add.d	$a0, $s0, $a0
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 32
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB7_3:                                # =>This Inner Loop Header: Depth=1
.Ltmp164:
	addi.d	$a0, $sp, 32
	addi.d	$a2, $sp, 32
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp165:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB7_3 Depth=1
	stx.w	$a0, $fp, $s8
	addi.d	$s8, $s8, 4
	bne	$s8, $s4, .LBB7_3
# %bb.5:                                # %vector.ph
	addi.d	$a0, $fp, 4
	lu12i.w	$s8, -3
	ori	$a1, $s8, 2288
	lu12i.w	$t0, 2
	ori	$a2, $t0, 1809
	.p2align	4, , 16
.LBB7_6:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ld.b	$a3, $a0, -4
	ld.b	$a4, $a0, 0
	add.d	$a5, $s0, $a1
	stx.b	$a3, $a5, $s2
	stx.b	$a4, $a5, $a2
	addi.d	$a1, $a1, 2
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB7_6
# %bb.7:                                # %vector.body78.preheader
	move	$a0, $zero
	addi.d	$a1, $s3, 32
	.p2align	4, , 16
.LBB7_8:                                # %vector.body78
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a0
	xvld	$xr4, $a2, 32
	xvldx	$xr8, $fp, $a0
	xvld	$xr6, $a2, 96
	xvld	$xr7, $a2, 64
	xvld	$xr3, $a2, 160
	xvld	$xr5, $a2, 128
	xvld	$xr0, $a2, 224
	xvld	$xr2, $a2, 192
	xvpickve2gr.w	$a2, $xr8, 0
	vinsgr2vr.b	$vr1, $a2, 0
	xvpickve2gr.w	$a2, $xr8, 1
	vinsgr2vr.b	$vr1, $a2, 1
	xvpickve2gr.w	$a2, $xr8, 2
	vinsgr2vr.b	$vr1, $a2, 2
	xvpickve2gr.w	$a2, $xr8, 3
	vinsgr2vr.b	$vr1, $a2, 3
	xvpickve2gr.w	$a2, $xr8, 4
	vinsgr2vr.b	$vr1, $a2, 4
	xvpickve2gr.w	$a2, $xr8, 5
	vinsgr2vr.b	$vr1, $a2, 5
	xvpickve2gr.w	$a2, $xr8, 6
	vinsgr2vr.b	$vr1, $a2, 6
	xvpickve2gr.w	$a2, $xr8, 7
	vinsgr2vr.b	$vr1, $a2, 7
	xvpickve2gr.w	$a2, $xr4, 0
	vinsgr2vr.b	$vr1, $a2, 8
	xvpickve2gr.w	$a2, $xr4, 1
	vinsgr2vr.b	$vr1, $a2, 9
	xvpickve2gr.w	$a2, $xr4, 2
	vinsgr2vr.b	$vr1, $a2, 10
	xvpickve2gr.w	$a2, $xr4, 3
	vinsgr2vr.b	$vr1, $a2, 11
	xvpickve2gr.w	$a2, $xr4, 4
	vinsgr2vr.b	$vr1, $a2, 12
	xvpickve2gr.w	$a2, $xr4, 5
	vinsgr2vr.b	$vr1, $a2, 13
	xvpickve2gr.w	$a2, $xr4, 6
	vinsgr2vr.b	$vr1, $a2, 14
	xvpickve2gr.w	$a2, $xr4, 7
	vinsgr2vr.b	$vr1, $a2, 15
	xvpickve2gr.w	$a2, $xr7, 0
	vinsgr2vr.b	$vr4, $a2, 0
	xvpickve2gr.w	$a2, $xr7, 1
	vinsgr2vr.b	$vr4, $a2, 1
	xvpickve2gr.w	$a2, $xr7, 2
	vinsgr2vr.b	$vr4, $a2, 2
	xvpickve2gr.w	$a2, $xr7, 3
	vinsgr2vr.b	$vr4, $a2, 3
	xvpickve2gr.w	$a2, $xr7, 4
	vinsgr2vr.b	$vr4, $a2, 4
	xvpickve2gr.w	$a2, $xr7, 5
	vinsgr2vr.b	$vr4, $a2, 5
	xvpickve2gr.w	$a2, $xr7, 6
	vinsgr2vr.b	$vr4, $a2, 6
	xvpickve2gr.w	$a2, $xr7, 7
	vinsgr2vr.b	$vr4, $a2, 7
	xvpickve2gr.w	$a2, $xr6, 0
	vinsgr2vr.b	$vr4, $a2, 8
	xvpickve2gr.w	$a2, $xr6, 1
	vinsgr2vr.b	$vr4, $a2, 9
	xvpickve2gr.w	$a2, $xr6, 2
	vinsgr2vr.b	$vr4, $a2, 10
	xvpickve2gr.w	$a2, $xr6, 3
	vinsgr2vr.b	$vr4, $a2, 11
	xvpickve2gr.w	$a2, $xr6, 4
	vinsgr2vr.b	$vr4, $a2, 12
	xvpickve2gr.w	$a2, $xr6, 5
	vinsgr2vr.b	$vr4, $a2, 13
	xvpickve2gr.w	$a2, $xr6, 6
	vinsgr2vr.b	$vr4, $a2, 14
	xvpickve2gr.w	$a2, $xr6, 7
	vinsgr2vr.b	$vr4, $a2, 15
	xvpickve2gr.w	$a2, $xr5, 0
	vinsgr2vr.b	$vr6, $a2, 0
	xvpickve2gr.w	$a2, $xr5, 1
	vinsgr2vr.b	$vr6, $a2, 1
	xvpickve2gr.w	$a2, $xr5, 2
	vinsgr2vr.b	$vr6, $a2, 2
	xvpickve2gr.w	$a2, $xr5, 3
	vinsgr2vr.b	$vr6, $a2, 3
	xvpickve2gr.w	$a2, $xr5, 4
	vinsgr2vr.b	$vr6, $a2, 4
	xvpickve2gr.w	$a2, $xr5, 5
	vinsgr2vr.b	$vr6, $a2, 5
	xvpickve2gr.w	$a2, $xr5, 6
	vinsgr2vr.b	$vr6, $a2, 6
	xvpickve2gr.w	$a2, $xr5, 7
	vinsgr2vr.b	$vr6, $a2, 7
	xvpickve2gr.w	$a2, $xr3, 0
	vinsgr2vr.b	$vr6, $a2, 8
	xvpickve2gr.w	$a2, $xr3, 1
	vinsgr2vr.b	$vr6, $a2, 9
	xvpickve2gr.w	$a2, $xr3, 2
	vinsgr2vr.b	$vr6, $a2, 10
	xvpickve2gr.w	$a2, $xr3, 3
	vinsgr2vr.b	$vr6, $a2, 11
	xvpickve2gr.w	$a2, $xr3, 4
	vinsgr2vr.b	$vr6, $a2, 12
	xvpickve2gr.w	$a2, $xr3, 5
	vinsgr2vr.b	$vr6, $a2, 13
	xvpickve2gr.w	$a2, $xr3, 6
	vinsgr2vr.b	$vr6, $a2, 14
	xvpickve2gr.w	$a2, $xr3, 7
	vinsgr2vr.b	$vr6, $a2, 15
	xvpickve2gr.w	$a2, $xr2, 0
	vinsgr2vr.b	$vr3, $a2, 0
	xvpickve2gr.w	$a2, $xr2, 1
	vinsgr2vr.b	$vr3, $a2, 1
	xvpickve2gr.w	$a2, $xr2, 2
	vinsgr2vr.b	$vr3, $a2, 2
	xvpickve2gr.w	$a2, $xr2, 3
	vinsgr2vr.b	$vr3, $a2, 3
	xvpickve2gr.w	$a2, $xr2, 4
	vinsgr2vr.b	$vr3, $a2, 4
	xvpickve2gr.w	$a2, $xr2, 5
	vinsgr2vr.b	$vr3, $a2, 5
	xvpickve2gr.w	$a2, $xr2, 6
	vinsgr2vr.b	$vr3, $a2, 6
	xvpickve2gr.w	$a2, $xr2, 7
	vinsgr2vr.b	$vr3, $a2, 7
	xvpickve2gr.w	$a2, $xr0, 0
	vinsgr2vr.b	$vr3, $a2, 8
	xvpickve2gr.w	$a2, $xr0, 1
	vinsgr2vr.b	$vr3, $a2, 9
	xvpickve2gr.w	$a2, $xr0, 2
	vinsgr2vr.b	$vr3, $a2, 10
	xvpickve2gr.w	$a2, $xr0, 3
	vinsgr2vr.b	$vr3, $a2, 11
	xvpickve2gr.w	$a2, $xr0, 4
	vinsgr2vr.b	$vr3, $a2, 12
	xvpickve2gr.w	$a2, $xr0, 5
	vinsgr2vr.b	$vr3, $a2, 13
	xvpickve2gr.w	$a2, $xr0, 6
	vinsgr2vr.b	$vr3, $a2, 14
	xvpickve2gr.w	$a2, $xr0, 7
	vinsgr2vr.b	$vr3, $a2, 15
	vst	$vr1, $a1, -32
	vst	$vr4, $a1, -16
	vst	$vr6, $a1, 0
	vst	$vr3, $a1, 16
	addi.d	$a0, $a0, 256
	addi.d	$a1, $a1, 64
	bne	$a0, $s6, .LBB7_8
# %bb.9:                                # %.lr.ph.i
	move	$a0, $zero
	ld.b	$a1, $s1, 0
	ori	$s6, $t0, 1792
	ld.b	$a2, $s1, 4
	ld.b	$a3, $s1, 8
	ld.b	$a4, $s1, 12
	stx.b	$a1, $s3, $s6
	st.b	$a2, $s7, 0
	st.b	$a3, $s7, 1
	st.b	$a4, $s7, 2
	ld.b	$a1, $s1, 16
	ori	$a3, $t0, 1796
	ld.b	$a2, $s1, 20
	ld.b	$a4, $s1, 24
	ld.b	$a5, $s1, 28
	stx.b	$a1, $s3, $a3
	st.b	$a2, $s7, 4
	st.b	$a4, $s7, 5
	st.b	$a5, $s7, 6
	ld.b	$a1, $s1, 32
	ori	$a2, $t0, 1800
	ld.b	$a4, $s1, 36
	ld.b	$a5, $s1, 40
	ld.b	$a6, $s1, 44
	stx.b	$a1, $s3, $a2
	st.b	$a4, $s7, 8
	st.b	$a5, $s7, 9
	st.b	$a6, $s7, 10
	ld.b	$a4, $s1, 48
	ori	$a1, $t0, 1804
	ld.b	$a5, $s1, 52
	ld.b	$a6, $s1, 56
	ld.b	$a7, $s1, 60
	stx.b	$a4, $s3, $a1
	st.b	$a5, $s7, 12
	st.b	$a6, $s7, 13
	st.b	$a7, $s7, 14
	ori	$s5, $t0, 1760
	.p2align	4, , 16
.LBB7_10:                               # %vector.body88
                                        # =>This Inner Loop Header: Depth=1
	move	$a4, $a0
	xvldx	$xr0, $s3, $a0
	xvldx	$xr1, $s0, $a0
	xvseq.b	$xr0, $xr0, $xr1
	xvxori.b	$xr0, $xr0, 255
	xvmskltz.b	$xr1, $xr0
	xvpickve2gr.wu	$a0, $xr1, 0
	xvpickve2gr.wu	$a5, $xr1, 4
	bstrins.d	$a0, $a5, 31, 16
	addi.w	$a5, $a0, 0
	addi.d	$a0, $a4, 32
	bnez	$a5, .LBB7_12
# %bb.11:                               # %vector.body88
                                        #   in Loop: Header=BB7_10 Depth=1
	bne	$a4, $s5, .LBB7_10
.LBB7_12:                               # %middle.split
	ld.d	$a6, $sp, 16                    # 8-byte Folded Reload
	bnez	$a5, .LBB7_46
# %bb.13:                               # %_ZL28truncOrZextVecInLoopWithVW16IjhEvPKT_PT0_i.exit.preheader
	ldx.bu	$a0, $s3, $s6
	ldx.bu	$a4, $s0, $s6
	bne	$a0, $a4, .LBB7_58
# %bb.14:                               # %_ZL28truncOrZextVecInLoopWithVW16IjhEvPKT_PT0_i.exit
	ld.bu	$a0, $s7, 0
	ld.bu	$a4, $a6, 0
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	bne	$a0, $a4, .LBB7_58
# %bb.15:                               # %_ZL28truncOrZextVecInLoopWithVW16IjhEvPKT_PT0_i.exit.1
	ld.bu	$a0, $s7, 1
	ld.bu	$a4, $a6, 1
	bne	$a0, $a4, .LBB7_47
# %bb.16:                               # %_ZL28truncOrZextVecInLoopWithVW16IjhEvPKT_PT0_i.exit.2
	ld.bu	$a0, $s7, 2
	ld.bu	$a4, $a6, 2
	bne	$a0, $a4, .LBB7_48
# %bb.17:                               # %_ZL28truncOrZextVecInLoopWithVW16IjhEvPKT_PT0_i.exit.3
	ldx.bu	$a0, $s3, $a3
	ldx.bu	$a4, $s0, $a3
	move	$s6, $a3
	bne	$a0, $a4, .LBB7_58
# %bb.18:                               # %_ZL28truncOrZextVecInLoopWithVW16IjhEvPKT_PT0_i.exit.4
	ld.bu	$a0, $s7, 4
	ld.bu	$a3, $a6, 4
	bne	$a0, $a3, .LBB7_49
# %bb.19:                               # %_ZL28truncOrZextVecInLoopWithVW16IjhEvPKT_PT0_i.exit.5
	ld.bu	$a0, $s7, 5
	ld.bu	$a3, $a6, 5
	bne	$a0, $a3, .LBB7_50
# %bb.20:                               # %_ZL28truncOrZextVecInLoopWithVW16IjhEvPKT_PT0_i.exit.6
	ld.bu	$a0, $s7, 6
	ld.bu	$a3, $a6, 6
	bne	$a0, $a3, .LBB7_51
# %bb.21:                               # %_ZL28truncOrZextVecInLoopWithVW16IjhEvPKT_PT0_i.exit.7
	ldx.bu	$a0, $s3, $a2
	ldx.bu	$a3, $s0, $a2
	move	$s6, $a2
	bne	$a0, $a3, .LBB7_58
# %bb.22:                               # %_ZL28truncOrZextVecInLoopWithVW16IjhEvPKT_PT0_i.exit.8
	ld.bu	$a0, $s7, 8
	ld.bu	$a2, $a6, 8
	bne	$a0, $a2, .LBB7_52
# %bb.23:                               # %_ZL28truncOrZextVecInLoopWithVW16IjhEvPKT_PT0_i.exit.9
	ld.bu	$a0, $s7, 9
	ld.bu	$a2, $a6, 9
	bne	$a0, $a2, .LBB7_53
# %bb.24:                               # %_ZL28truncOrZextVecInLoopWithVW16IjhEvPKT_PT0_i.exit.10
	ld.bu	$a0, $s7, 10
	ld.bu	$a2, $a6, 10
	bne	$a0, $a2, .LBB7_54
# %bb.25:                               # %_ZL28truncOrZextVecInLoopWithVW16IjhEvPKT_PT0_i.exit.11
	ldx.bu	$a0, $s3, $a1
	ldx.bu	$a2, $s0, $a1
	move	$s6, $a1
	bne	$a0, $a2, .LBB7_58
# %bb.26:                               # %_ZL28truncOrZextVecInLoopWithVW16IjhEvPKT_PT0_i.exit.12
	ld.bu	$a0, $s7, 12
	ld.bu	$a1, $a6, 12
	bne	$a0, $a1, .LBB7_55
# %bb.27:                               # %_ZL28truncOrZextVecInLoopWithVW16IjhEvPKT_PT0_i.exit.13
	ld.bu	$a0, $s7, 13
	ld.bu	$a1, $a6, 13
	bne	$a0, $a1, .LBB7_56
# %bb.28:                               # %_ZL28truncOrZextVecInLoopWithVW16IjhEvPKT_PT0_i.exit.14
	ld.bu	$a0, $s7, 14
	ld.bu	$a1, $a6, 14
	bne	$a0, $a1, .LBB7_57
# %bb.29:                               # %_ZL28truncOrZextVecInLoopWithVW16IjhEvPKT_PT0_i.exit.15
	ld.d	$s6, $sp, 0                     # 8-byte Folded Reload
	ld.w	$s3, $s6, 28
	ld.d	$s1, $s6, 16
.Ltmp167:
	move	$a0, $s6
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp168:
# %bb.30:                               # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s3, .LBB7_42
# %bb.31:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s1, .LBB7_42
# %bb.32:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s4
	addi.d	$a1, $fp, 128
	addi.d	$a2, $sp, 24
	ori	$a3, $s8, 2288
	ori	$a4, $s8, 2304
	lu12i.w	$a6, 2
	ori	$a5, $a6, 1776
	ori	$a6, $a6, 1792
	.p2align	4, , 16
.LBB7_33:                               # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_37 Depth 2
                                        #     Child Loop BB7_40 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a7, $sp, 24
	bgeu	$a7, $a0, .LBB7_36
# %bb.34:                               # %.lr.ph
                                        #   in Loop: Header=BB7_33 Depth=1
	add.d	$t0, $a7, $s2
	bgeu	$fp, $t0, .LBB7_36
# %bb.35:                               #   in Loop: Header=BB7_33 Depth=1
	move	$t1, $zero
	b	.LBB7_39
	.p2align	4, , 16
.LBB7_36:                               # %vector.body98.preheader
                                        #   in Loop: Header=BB7_33 Depth=1
	addi.d	$t0, $a7, 32
	move	$t1, $a1
	move	$t2, $a4
	.p2align	4, , 16
.LBB7_37:                               # %vector.body98
                                        #   Parent Loop BB7_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr4, $t1, -96
	xvld	$xr8, $t1, -128
	xvld	$xr6, $t1, -32
	xvld	$xr7, $t1, -64
	xvld	$xr3, $t1, 32
	xvld	$xr5, $t1, 0
	xvld	$xr1, $t1, 96
	xvld	$xr2, $t1, 64
	xvpickve2gr.w	$t3, $xr8, 0
	vinsgr2vr.b	$vr0, $t3, 0
	xvpickve2gr.w	$t3, $xr8, 1
	vinsgr2vr.b	$vr0, $t3, 1
	xvpickve2gr.w	$t3, $xr8, 2
	vinsgr2vr.b	$vr0, $t3, 2
	xvpickve2gr.w	$t3, $xr8, 3
	vinsgr2vr.b	$vr0, $t3, 3
	xvpickve2gr.w	$t3, $xr8, 4
	vinsgr2vr.b	$vr0, $t3, 4
	xvpickve2gr.w	$t3, $xr8, 5
	vinsgr2vr.b	$vr0, $t3, 5
	xvpickve2gr.w	$t3, $xr8, 6
	vinsgr2vr.b	$vr0, $t3, 6
	xvpickve2gr.w	$t3, $xr8, 7
	vinsgr2vr.b	$vr0, $t3, 7
	xvpickve2gr.w	$t3, $xr4, 0
	vinsgr2vr.b	$vr0, $t3, 8
	xvpickve2gr.w	$t3, $xr4, 1
	vinsgr2vr.b	$vr0, $t3, 9
	xvpickve2gr.w	$t3, $xr4, 2
	vinsgr2vr.b	$vr0, $t3, 10
	xvpickve2gr.w	$t3, $xr4, 3
	vinsgr2vr.b	$vr0, $t3, 11
	xvpickve2gr.w	$t3, $xr4, 4
	vinsgr2vr.b	$vr0, $t3, 12
	xvpickve2gr.w	$t3, $xr4, 5
	vinsgr2vr.b	$vr0, $t3, 13
	xvpickve2gr.w	$t3, $xr4, 6
	vinsgr2vr.b	$vr0, $t3, 14
	xvpickve2gr.w	$t3, $xr4, 7
	vinsgr2vr.b	$vr0, $t3, 15
	xvpickve2gr.w	$t3, $xr7, 0
	vinsgr2vr.b	$vr4, $t3, 0
	xvpickve2gr.w	$t3, $xr7, 1
	vinsgr2vr.b	$vr4, $t3, 1
	xvpickve2gr.w	$t3, $xr7, 2
	vinsgr2vr.b	$vr4, $t3, 2
	xvpickve2gr.w	$t3, $xr7, 3
	vinsgr2vr.b	$vr4, $t3, 3
	xvpickve2gr.w	$t3, $xr7, 4
	vinsgr2vr.b	$vr4, $t3, 4
	xvpickve2gr.w	$t3, $xr7, 5
	vinsgr2vr.b	$vr4, $t3, 5
	xvpickve2gr.w	$t3, $xr7, 6
	vinsgr2vr.b	$vr4, $t3, 6
	xvpickve2gr.w	$t3, $xr7, 7
	vinsgr2vr.b	$vr4, $t3, 7
	xvpickve2gr.w	$t3, $xr6, 0
	vinsgr2vr.b	$vr4, $t3, 8
	xvpickve2gr.w	$t3, $xr6, 1
	vinsgr2vr.b	$vr4, $t3, 9
	xvpickve2gr.w	$t3, $xr6, 2
	vinsgr2vr.b	$vr4, $t3, 10
	xvpickve2gr.w	$t3, $xr6, 3
	vinsgr2vr.b	$vr4, $t3, 11
	xvpickve2gr.w	$t3, $xr6, 4
	vinsgr2vr.b	$vr4, $t3, 12
	xvpickve2gr.w	$t3, $xr6, 5
	vinsgr2vr.b	$vr4, $t3, 13
	xvpickve2gr.w	$t3, $xr6, 6
	vinsgr2vr.b	$vr4, $t3, 14
	xvpickve2gr.w	$t3, $xr6, 7
	vinsgr2vr.b	$vr4, $t3, 15
	xvpickve2gr.w	$t3, $xr5, 0
	vinsgr2vr.b	$vr6, $t3, 0
	xvpickve2gr.w	$t3, $xr5, 1
	vinsgr2vr.b	$vr6, $t3, 1
	xvpickve2gr.w	$t3, $xr5, 2
	vinsgr2vr.b	$vr6, $t3, 2
	xvpickve2gr.w	$t3, $xr5, 3
	vinsgr2vr.b	$vr6, $t3, 3
	xvpickve2gr.w	$t3, $xr5, 4
	vinsgr2vr.b	$vr6, $t3, 4
	xvpickve2gr.w	$t3, $xr5, 5
	vinsgr2vr.b	$vr6, $t3, 5
	xvpickve2gr.w	$t3, $xr5, 6
	vinsgr2vr.b	$vr6, $t3, 6
	xvpickve2gr.w	$t3, $xr5, 7
	vinsgr2vr.b	$vr6, $t3, 7
	xvpickve2gr.w	$t3, $xr3, 0
	vinsgr2vr.b	$vr6, $t3, 8
	xvpickve2gr.w	$t3, $xr3, 1
	vinsgr2vr.b	$vr6, $t3, 9
	xvpickve2gr.w	$t3, $xr3, 2
	vinsgr2vr.b	$vr6, $t3, 10
	xvpickve2gr.w	$t3, $xr3, 3
	vinsgr2vr.b	$vr6, $t3, 11
	xvpickve2gr.w	$t3, $xr3, 4
	vinsgr2vr.b	$vr6, $t3, 12
	xvpickve2gr.w	$t3, $xr3, 5
	vinsgr2vr.b	$vr6, $t3, 13
	xvpickve2gr.w	$t3, $xr3, 6
	vinsgr2vr.b	$vr6, $t3, 14
	xvpickve2gr.w	$t3, $xr3, 7
	vinsgr2vr.b	$vr6, $t3, 15
	xvpickve2gr.w	$t3, $xr2, 0
	vinsgr2vr.b	$vr3, $t3, 0
	xvpickve2gr.w	$t3, $xr2, 1
	vinsgr2vr.b	$vr3, $t3, 1
	xvpickve2gr.w	$t3, $xr2, 2
	vinsgr2vr.b	$vr3, $t3, 2
	xvpickve2gr.w	$t3, $xr2, 3
	vinsgr2vr.b	$vr3, $t3, 3
	xvpickve2gr.w	$t3, $xr2, 4
	vinsgr2vr.b	$vr3, $t3, 4
	xvpickve2gr.w	$t3, $xr2, 5
	vinsgr2vr.b	$vr3, $t3, 5
	xvpickve2gr.w	$t3, $xr2, 6
	vinsgr2vr.b	$vr3, $t3, 6
	xvpickve2gr.w	$t3, $xr2, 7
	vinsgr2vr.b	$vr3, $t3, 7
	xvpickve2gr.w	$t3, $xr1, 0
	vinsgr2vr.b	$vr3, $t3, 8
	xvpickve2gr.w	$t3, $xr1, 1
	vinsgr2vr.b	$vr3, $t3, 9
	xvpickve2gr.w	$t3, $xr1, 2
	vinsgr2vr.b	$vr3, $t3, 10
	xvpickve2gr.w	$t3, $xr1, 3
	vinsgr2vr.b	$vr3, $t3, 11
	xvpickve2gr.w	$t3, $xr1, 4
	vinsgr2vr.b	$vr3, $t3, 12
	xvpickve2gr.w	$t3, $xr1, 5
	vinsgr2vr.b	$vr3, $t3, 13
	xvpickve2gr.w	$t3, $xr1, 6
	vinsgr2vr.b	$vr3, $t3, 14
	xvpickve2gr.w	$t3, $xr1, 7
	vinsgr2vr.b	$vr3, $t3, 15
	add.d	$t3, $t0, $t2
	vstx	$vr0, $t3, $s5
	vstx	$vr4, $t3, $a5
	vstx	$vr6, $t3, $a6
	vstx	$vr3, $t3, $s2
	addi.d	$t2, $t2, 64
	addi.d	$t1, $t1, 256
	bnez	$t2, .LBB7_37
# %bb.38:                               #   in Loop: Header=BB7_33 Depth=1
	move	$t1, $a6
.LBB7_39:                               # %.lr.ph.i21.preheader
                                        #   in Loop: Header=BB7_33 Depth=1
	add.d	$t0, $t1, $a3
	add.d	$a7, $a7, $t1
	alsl.d	$t1, $t1, $fp, 2
	.p2align	4, , 16
.LBB7_40:                               # %.lr.ph.i21
                                        #   Parent Loop BB7_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$t2, $t1, 0
	st.b	$t2, $a7, 0
	addi.d	$t0, $t0, 1
	addi.d	$a7, $a7, 1
	addi.d	$t1, $t1, 4
	bnez	$t0, .LBB7_40
# %bb.41:                               # %_ZL28truncOrZextVecInLoopWithVW16IjhEvPKT_PT0_i.exit25
                                        #   in Loop: Header=BB7_33 Depth=1
	addi.d	$s1, $s1, -1
	bnez	$s1, .LBB7_33
.LBB7_42:                               # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp169:
	move	$a0, $s6
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp170:
# %bb.43:                               # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit33
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 24
	beqz	$a0, .LBB7_45
# %bb.44:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i35
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB7_45:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit39
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB7_46:                               # %vector.early.exit
	pcalau12i	$a1, %pc_hi20(.LCPI7_0)
	xvld	$xr1, $a1, %pc_lo12(.LCPI7_0)
	xvand.v	$xr0, $xr0, $xr1
	xvpermi.q	$xr1, $xr0, 1
	vmax.bu	$vr0, $vr0, $vr1
	vpickve2gr.b	$a1, $vr0, 0
	andi	$a1, $a1, 48
	vpickve2gr.b	$a2, $vr0, 1
	andi	$a2, $a2, 31
	sltu	$a3, $a2, $a1
	masknez	$a2, $a2, $a3
	maskeqz	$a1, $a1, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 2
	andi	$a2, $a2, 30
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 3
	andi	$a2, $a2, 29
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 4
	andi	$a2, $a2, 28
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 5
	andi	$a2, $a2, 27
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 6
	andi	$a2, $a2, 26
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 7
	andi	$a2, $a2, 25
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 8
	andi	$a2, $a2, 24
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 9
	andi	$a2, $a2, 23
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 10
	andi	$a2, $a2, 22
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 11
	andi	$a2, $a2, 21
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 12
	andi	$a2, $a2, 20
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 13
	andi	$a2, $a2, 19
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 14
	andi	$a2, $a2, 18
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 15
	andi	$a2, $a2, 17
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	ori	$a2, $zero, 32
	sub.d	$a1, $a2, $a1
	andi	$a1, $a1, 255
	add.d	$a0, $a1, $a0
	addi.d	$s6, $a0, -32
	b	.LBB7_58
.LBB7_47:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1794
	b	.LBB7_58
.LBB7_48:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1795
	b	.LBB7_58
.LBB7_49:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1797
	b	.LBB7_58
.LBB7_50:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1798
	b	.LBB7_58
.LBB7_51:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1799
	b	.LBB7_58
.LBB7_52:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1801
	b	.LBB7_58
.LBB7_53:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1802
	b	.LBB7_58
.LBB7_54:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1803
	b	.LBB7_58
.LBB7_55:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1805
	b	.LBB7_58
.LBB7_56:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1806
	b	.LBB7_58
.LBB7_57:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1807
.LBB7_58:                               # %.loopexit
.Ltmp172:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp173:
# %bb.59:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	slli.d	$a0, $s6, 2
	ldx.wu	$a1, $fp, $a0
.Ltmp174:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp175:
# %bb.60:                               # %_ZNSolsEj.exit
.Ltmp176:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp177:
# %bb.61:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.bu	$a1, $s3, $s6
.Ltmp178:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp179:
# %bb.62:
.Ltmp180:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp181:
# %bb.63:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit20
	ldx.bu	$a1, $s0, $s6
.Ltmp182:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp183:
# %bb.64:
.Ltmp184:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp185:
# %bb.65:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB7_66:                               # %.thread
.Ltmp163:
	move	$s1, $a0
	b	.LBB7_72
.LBB7_67:
.Ltmp160:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB7_68:
.Ltmp171:
	b	.LBB7_71
.LBB7_69:
.Ltmp186:
	b	.LBB7_71
.LBB7_70:
.Ltmp166:
.LBB7_71:
	move	$s1, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s3, $sp, 24
	beqz	$s3, .LBB7_73
.LBB7_72:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i28
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB7_73:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end7:
	.size	_Z61benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint8_t_RN9benchmark5StateE, .Lfunc_end7-_Z61benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint8_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table7:
.Lexception7:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end7-.Lcst_begin7
.Lcst_begin7:
	.uleb128 .Lfunc_begin7-.Lfunc_begin7    # >> Call Site 1 <<
	.uleb128 .Ltmp158-.Lfunc_begin7         #   Call between .Lfunc_begin7 and .Ltmp158
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp158-.Lfunc_begin7         # >> Call Site 2 <<
	.uleb128 .Ltmp159-.Ltmp158              #   Call between .Ltmp158 and .Ltmp159
	.uleb128 .Ltmp160-.Lfunc_begin7         #     jumps to .Ltmp160
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp161-.Lfunc_begin7         # >> Call Site 3 <<
	.uleb128 .Ltmp162-.Ltmp161              #   Call between .Ltmp161 and .Ltmp162
	.uleb128 .Ltmp163-.Lfunc_begin7         #     jumps to .Ltmp163
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp164-.Lfunc_begin7         # >> Call Site 4 <<
	.uleb128 .Ltmp165-.Ltmp164              #   Call between .Ltmp164 and .Ltmp165
	.uleb128 .Ltmp166-.Lfunc_begin7         #     jumps to .Ltmp166
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp167-.Lfunc_begin7         # >> Call Site 5 <<
	.uleb128 .Ltmp170-.Ltmp167              #   Call between .Ltmp167 and .Ltmp170
	.uleb128 .Ltmp171-.Lfunc_begin7         #     jumps to .Ltmp171
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp170-.Lfunc_begin7         # >> Call Site 6 <<
	.uleb128 .Ltmp172-.Ltmp170              #   Call between .Ltmp170 and .Ltmp172
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp172-.Lfunc_begin7         # >> Call Site 7 <<
	.uleb128 .Ltmp185-.Ltmp172              #   Call between .Ltmp172 and .Ltmp185
	.uleb128 .Ltmp186-.Lfunc_begin7         #     jumps to .Ltmp186
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp185-.Lfunc_begin7         # >> Call Site 8 <<
	.uleb128 .Lfunc_end7-.Ltmp185           #   Call between .Ltmp185 and .Lfunc_end7
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end7:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5, 0x0                          # -- Begin function _Z53benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint8_t_RN9benchmark5StateE
.LCPI8_0:
	.byte	32                              # 0x20
	.byte	31                              # 0x1f
	.byte	30                              # 0x1e
	.byte	29                              # 0x1d
	.byte	28                              # 0x1c
	.byte	27                              # 0x1b
	.byte	26                              # 0x1a
	.byte	25                              # 0x19
	.byte	24                              # 0x18
	.byte	23                              # 0x17
	.byte	22                              # 0x16
	.byte	21                              # 0x15
	.byte	20                              # 0x14
	.byte	19                              # 0x13
	.byte	18                              # 0x12
	.byte	17                              # 0x11
	.byte	16                              # 0x10
	.byte	15                              # 0xf
	.byte	14                              # 0xe
	.byte	13                              # 0xd
	.byte	12                              # 0xc
	.byte	11                              # 0xb
	.byte	10                              # 0xa
	.byte	9                               # 0x9
	.byte	8                               # 0x8
	.byte	7                               # 0x7
	.byte	6                               # 0x6
	.byte	5                               # 0x5
	.byte	4                               # 0x4
	.byte	3                               # 0x3
	.byte	2                               # 0x2
	.byte	1                               # 0x1
	.text
	.globl	_Z53benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint8_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z53benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint8_t_RN9benchmark5StateE,@function
_Z53benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint8_t_RN9benchmark5StateE: # @_Z53benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint8_t_RN9benchmark5StateE
.Lfunc_begin8:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception8
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s0, $a0
	lu12i.w	$a0, 9
	ori	$s4, $a0, 3136
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp187:
	lu12i.w	$a0, 2
	ori	$s3, $a0, 1808
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp188:
# %bb.1:                                # %.split
	move	$s1, $a0
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $sp, 88
.Ltmp190:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp191:
# %bb.2:                                # %.split146
	move	$s0, $a0
	move	$s2, $zero
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1793
	add.d	$s7, $s1, $s6
	add.d	$s8, $s0, $s6
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 96
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB8_3:                                # =>This Inner Loop Header: Depth=1
.Ltmp193:
	addi.d	$a0, $sp, 96
	addi.d	$a2, $sp, 96
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp194:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB8_3 Depth=1
	stx.w	$a0, $fp, $s2
	addi.d	$s2, $s2, 4
	bne	$s2, $s4, .LBB8_3
# %bb.5:                                # %vector.ph
	addi.d	$a0, $fp, 4
	lu12i.w	$s5, -3
	ori	$a1, $s5, 2288
	lu12i.w	$a2, 2
	ori	$a2, $a2, 1809
	.p2align	4, , 16
.LBB8_6:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ld.b	$a3, $a0, -4
	ld.b	$a4, $a0, 0
	add.d	$a5, $s0, $a1
	stx.b	$a3, $a5, $s3
	stx.b	$a4, $a5, $a2
	addi.d	$a1, $a1, 2
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB8_6
# %bb.7:                                # %vector.body78.preheader
	move	$a0, $zero
	addi.d	$a1, $s1, 8
	.p2align	4, , 16
.LBB8_8:                                # %vector.body78
                                        # =>This Inner Loop Header: Depth=1
	xvldx	$xr0, $fp, $a0
	add.d	$a2, $fp, $a0
	xvld	$xr1, $a2, 32
	xvpickve2gr.w	$a2, $xr0, 7
	st.b	$a2, $sp, 55
	xvpickve2gr.w	$a2, $xr0, 6
	st.b	$a2, $sp, 54
	xvpickve2gr.w	$a2, $xr0, 5
	st.b	$a2, $sp, 53
	xvpickve2gr.w	$a2, $xr0, 4
	st.b	$a2, $sp, 52
	xvpickve2gr.w	$a2, $xr0, 3
	st.b	$a2, $sp, 51
	xvpickve2gr.w	$a2, $xr0, 2
	st.b	$a2, $sp, 50
	xvpickve2gr.w	$a2, $xr0, 1
	st.b	$a2, $sp, 49
	xvpickve2gr.w	$a2, $xr0, 0
	st.b	$a2, $sp, 48
	xvpickve2gr.w	$a2, $xr1, 7
	st.b	$a2, $sp, 71
	xvpickve2gr.w	$a2, $xr1, 6
	st.b	$a2, $sp, 70
	xvpickve2gr.w	$a2, $xr1, 5
	st.b	$a2, $sp, 69
	xvpickve2gr.w	$a2, $xr1, 4
	st.b	$a2, $sp, 68
	xvpickve2gr.w	$a2, $xr1, 3
	st.b	$a2, $sp, 67
	xvpickve2gr.w	$a2, $xr1, 2
	st.b	$a2, $sp, 66
	xvpickve2gr.w	$a2, $xr1, 1
	st.b	$a2, $sp, 65
	xvpickve2gr.w	$a2, $xr1, 0
	st.b	$a2, $sp, 64
	vld	$vr0, $sp, 48
	vld	$vr1, $sp, 64
	vpackev.d	$vr0, $vr1, $vr0
	vst	$vr0, $a1, -8
	addi.d	$a0, $a0, 64
	addi.d	$a1, $a1, 16
	bne	$a0, $s4, .LBB8_8
# %bb.9:                                # %vector.body86.preheader
	move	$a0, $zero
	lu12i.w	$a1, 2
	ori	$a1, $a1, 1760
	.p2align	4, , 16
.LBB8_10:                               # %vector.body86
                                        # =>This Inner Loop Header: Depth=1
	move	$a2, $a0
	xvldx	$xr0, $s1, $a0
	xvldx	$xr1, $s0, $a0
	xvseq.b	$xr0, $xr0, $xr1
	xvxori.b	$xr0, $xr0, 255
	xvmskltz.b	$xr1, $xr0
	xvpickve2gr.wu	$a0, $xr1, 0
	xvpickve2gr.wu	$a3, $xr1, 4
	bstrins.d	$a0, $a3, 31, 16
	addi.w	$a3, $a0, 0
	addi.d	$a0, $a2, 32
	bnez	$a3, .LBB8_12
# %bb.11:                               # %vector.body86
                                        #   in Loop: Header=BB8_10 Depth=1
	bne	$a2, $a1, .LBB8_10
.LBB8_12:                               # %middle.split
	bnez	$a3, .LBB8_44
# %bb.13:                               # %_ZL20truncOrZextVecInLoopIjhEvPKT_PT0_i.exit.preheader
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1792
	ldx.bu	$a0, $s1, $s2
	ldx.bu	$a1, $s0, $s2
	bne	$a0, $a1, .LBB8_56
# %bb.14:                               # %_ZL20truncOrZextVecInLoopIjhEvPKT_PT0_i.exit
	ld.bu	$a0, $s7, 0
	ld.bu	$a1, $s8, 0
	move	$s2, $s6
	bne	$a0, $a1, .LBB8_56
# %bb.15:                               # %_ZL20truncOrZextVecInLoopIjhEvPKT_PT0_i.exit.1
	ld.bu	$a0, $s7, 1
	ld.bu	$a1, $s8, 1
	bne	$a0, $a1, .LBB8_45
# %bb.16:                               # %_ZL20truncOrZextVecInLoopIjhEvPKT_PT0_i.exit.2
	ld.bu	$a0, $s7, 2
	ld.bu	$a1, $s8, 2
	bne	$a0, $a1, .LBB8_46
# %bb.17:                               # %_ZL20truncOrZextVecInLoopIjhEvPKT_PT0_i.exit.3
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1796
	ldx.bu	$a0, $s1, $s2
	ldx.bu	$a1, $s0, $s2
	bne	$a0, $a1, .LBB8_56
# %bb.18:                               # %_ZL20truncOrZextVecInLoopIjhEvPKT_PT0_i.exit.4
	ld.bu	$a0, $s7, 4
	ld.bu	$a1, $s8, 4
	bne	$a0, $a1, .LBB8_47
# %bb.19:                               # %_ZL20truncOrZextVecInLoopIjhEvPKT_PT0_i.exit.5
	ld.bu	$a0, $s7, 5
	ld.bu	$a1, $s8, 5
	bne	$a0, $a1, .LBB8_48
# %bb.20:                               # %_ZL20truncOrZextVecInLoopIjhEvPKT_PT0_i.exit.6
	ld.bu	$a0, $s7, 6
	ld.bu	$a1, $s8, 6
	bne	$a0, $a1, .LBB8_49
# %bb.21:                               # %_ZL20truncOrZextVecInLoopIjhEvPKT_PT0_i.exit.7
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1800
	ldx.bu	$a0, $s1, $s2
	ldx.bu	$a1, $s0, $s2
	bne	$a0, $a1, .LBB8_56
# %bb.22:                               # %_ZL20truncOrZextVecInLoopIjhEvPKT_PT0_i.exit.8
	ld.bu	$a0, $s7, 8
	ld.bu	$a1, $s8, 8
	bne	$a0, $a1, .LBB8_50
# %bb.23:                               # %_ZL20truncOrZextVecInLoopIjhEvPKT_PT0_i.exit.9
	ld.bu	$a0, $s7, 9
	ld.bu	$a1, $s8, 9
	bne	$a0, $a1, .LBB8_51
# %bb.24:                               # %_ZL20truncOrZextVecInLoopIjhEvPKT_PT0_i.exit.10
	ld.bu	$a0, $s7, 10
	ld.bu	$a1, $s8, 10
	bne	$a0, $a1, .LBB8_52
# %bb.25:                               # %_ZL20truncOrZextVecInLoopIjhEvPKT_PT0_i.exit.11
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1804
	ldx.bu	$a0, $s1, $s2
	ldx.bu	$a1, $s0, $s2
	bne	$a0, $a1, .LBB8_56
# %bb.26:                               # %_ZL20truncOrZextVecInLoopIjhEvPKT_PT0_i.exit.12
	ld.bu	$a0, $s7, 12
	ld.bu	$a1, $s8, 12
	bne	$a0, $a1, .LBB8_53
# %bb.27:                               # %_ZL20truncOrZextVecInLoopIjhEvPKT_PT0_i.exit.13
	ld.bu	$a0, $s7, 13
	ld.bu	$a1, $s8, 13
	bne	$a0, $a1, .LBB8_54
# %bb.28:                               # %_ZL20truncOrZextVecInLoopIjhEvPKT_PT0_i.exit.14
	ld.bu	$a0, $s7, 14
	ld.bu	$a1, $s8, 14
	bne	$a0, $a1, .LBB8_55
# %bb.29:                               # %_ZL20truncOrZextVecInLoopIjhEvPKT_PT0_i.exit.15
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.w	$s2, $s6, 28
	ld.d	$s1, $s6, 16
.Ltmp196:
	move	$a0, $s6
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp197:
# %bb.30:                               # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s2, .LBB8_40
# %bb.31:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s1, .LBB8_40
# %bb.32:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s4
	addi.d	$a1, $fp, 32
	addi.d	$a2, $sp, 88
	ori	$a3, $s5, 2288
	b	.LBB8_34
	.p2align	4, , 16
.LBB8_33:                               # %_ZL20truncOrZextVecInLoopIjhEvPKT_PT0_i.exit25
                                        #   in Loop: Header=BB8_34 Depth=1
	addi.d	$s1, $s1, -1
	beqz	$s1, .LBB8_40
.LBB8_34:                               # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_39 Depth 2
                                        #     Child Loop BB8_37 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a4, $sp, 88
	bgeu	$a4, $a0, .LBB8_38
# %bb.35:                               # %.lr.ph
                                        #   in Loop: Header=BB8_34 Depth=1
	add.d	$a5, $a4, $s3
	bgeu	$fp, $a5, .LBB8_38
# %bb.36:                               # %.lr.ph.i21.preheader
                                        #   in Loop: Header=BB8_34 Depth=1
	move	$a5, $fp
	move	$a6, $a3
	.p2align	4, , 16
.LBB8_37:                               # %.lr.ph.i21
                                        #   Parent Loop BB8_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a7, $a5, 0
	add.d	$t0, $a4, $a6
	stx.b	$a7, $t0, $s3
	addi.d	$a6, $a6, 1
	addi.d	$a5, $a5, 4
	bnez	$a6, .LBB8_37
	b	.LBB8_33
	.p2align	4, , 16
.LBB8_38:                               # %vector.body96.preheader
                                        #   in Loop: Header=BB8_34 Depth=1
	move	$a5, $a1
	move	$a6, $a3
	.p2align	4, , 16
.LBB8_39:                               # %vector.body96
                                        #   Parent Loop BB8_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr0, $a5, -32
	xvld	$xr1, $a5, 0
	xvpickve2gr.w	$a7, $xr0, 7
	st.b	$a7, $sp, 39
	xvpickve2gr.w	$a7, $xr0, 6
	st.b	$a7, $sp, 38
	xvpickve2gr.w	$a7, $xr0, 5
	st.b	$a7, $sp, 37
	xvpickve2gr.w	$a7, $xr0, 4
	st.b	$a7, $sp, 36
	xvpickve2gr.w	$a7, $xr0, 3
	st.b	$a7, $sp, 35
	xvpickve2gr.w	$a7, $xr0, 2
	st.b	$a7, $sp, 34
	xvpickve2gr.w	$a7, $xr0, 1
	st.b	$a7, $sp, 33
	xvpickve2gr.w	$a7, $xr0, 0
	st.b	$a7, $sp, 32
	xvpickve2gr.w	$a7, $xr1, 7
	st.b	$a7, $sp, 23
	xvpickve2gr.w	$a7, $xr1, 6
	st.b	$a7, $sp, 22
	xvpickve2gr.w	$a7, $xr1, 5
	st.b	$a7, $sp, 21
	xvpickve2gr.w	$a7, $xr1, 4
	st.b	$a7, $sp, 20
	xvpickve2gr.w	$a7, $xr1, 3
	st.b	$a7, $sp, 19
	xvpickve2gr.w	$a7, $xr1, 2
	st.b	$a7, $sp, 18
	xvpickve2gr.w	$a7, $xr1, 1
	st.b	$a7, $sp, 17
	xvpickve2gr.w	$a7, $xr1, 0
	st.b	$a7, $sp, 16
	vld	$vr0, $sp, 32
	vld	$vr1, $sp, 16
	add.d	$a7, $a4, $a6
	vpackev.d	$vr0, $vr1, $vr0
	vstx	$vr0, $a7, $s3
	addi.d	$a6, $a6, 16
	addi.d	$a5, $a5, 64
	bnez	$a6, .LBB8_39
	b	.LBB8_33
.LBB8_40:                               # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp198:
	move	$a0, $s6
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp199:
# %bb.41:                               # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit33
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 88
	beqz	$a0, .LBB8_43
# %bb.42:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i35
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB8_43:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit39
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB8_44:                               # %vector.early.exit
	pcalau12i	$a1, %pc_hi20(.LCPI8_0)
	xvld	$xr1, $a1, %pc_lo12(.LCPI8_0)
	xvand.v	$xr0, $xr0, $xr1
	xvpermi.q	$xr1, $xr0, 1
	vmax.bu	$vr0, $vr0, $vr1
	vpickve2gr.b	$a1, $vr0, 0
	andi	$a1, $a1, 48
	vpickve2gr.b	$a2, $vr0, 1
	andi	$a2, $a2, 31
	sltu	$a3, $a2, $a1
	masknez	$a2, $a2, $a3
	maskeqz	$a1, $a1, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 2
	andi	$a2, $a2, 30
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 3
	andi	$a2, $a2, 29
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 4
	andi	$a2, $a2, 28
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 5
	andi	$a2, $a2, 27
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 6
	andi	$a2, $a2, 26
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 7
	andi	$a2, $a2, 25
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 8
	andi	$a2, $a2, 24
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 9
	andi	$a2, $a2, 23
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 10
	andi	$a2, $a2, 22
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 11
	andi	$a2, $a2, 21
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 12
	andi	$a2, $a2, 20
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 13
	andi	$a2, $a2, 19
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 14
	andi	$a2, $a2, 18
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 15
	andi	$a2, $a2, 17
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	ori	$a2, $zero, 32
	sub.d	$a1, $a2, $a1
	andi	$a1, $a1, 255
	add.d	$a0, $a1, $a0
	addi.d	$s2, $a0, -32
	b	.LBB8_56
.LBB8_45:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1794
	b	.LBB8_56
.LBB8_46:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1795
	b	.LBB8_56
.LBB8_47:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1797
	b	.LBB8_56
.LBB8_48:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1798
	b	.LBB8_56
.LBB8_49:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1799
	b	.LBB8_56
.LBB8_50:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1801
	b	.LBB8_56
.LBB8_51:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1802
	b	.LBB8_56
.LBB8_52:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1803
	b	.LBB8_56
.LBB8_53:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1805
	b	.LBB8_56
.LBB8_54:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1806
	b	.LBB8_56
.LBB8_55:
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1807
.LBB8_56:                               # %.loopexit
.Ltmp201:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp202:
# %bb.57:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	slli.d	$a0, $s2, 2
	ldx.wu	$a1, $fp, $a0
.Ltmp203:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp204:
# %bb.58:                               # %_ZNSolsEj.exit
.Ltmp205:
	move	$s3, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp206:
# %bb.59:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.bu	$a1, $s1, $s2
.Ltmp207:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp208:
# %bb.60:
.Ltmp209:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp210:
# %bb.61:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit20
	ldx.bu	$a1, $s0, $s2
.Ltmp211:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp212:
# %bb.62:
.Ltmp213:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp214:
# %bb.63:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB8_64:                               # %.thread
.Ltmp192:
	move	$s2, $a0
	b	.LBB8_70
.LBB8_65:
.Ltmp189:
	move	$s2, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB8_66:
.Ltmp200:
	b	.LBB8_69
.LBB8_67:
.Ltmp215:
	b	.LBB8_69
.LBB8_68:
.Ltmp195:
.LBB8_69:
	move	$s2, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s1, $sp, 88
	beqz	$s1, .LBB8_71
.LBB8_70:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i28
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB8_71:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end8:
	.size	_Z53benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint8_t_RN9benchmark5StateE, .Lfunc_end8-_Z53benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint8_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table8:
.Lexception8:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end8-.Lcst_begin8
.Lcst_begin8:
	.uleb128 .Lfunc_begin8-.Lfunc_begin8    # >> Call Site 1 <<
	.uleb128 .Ltmp187-.Lfunc_begin8         #   Call between .Lfunc_begin8 and .Ltmp187
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp187-.Lfunc_begin8         # >> Call Site 2 <<
	.uleb128 .Ltmp188-.Ltmp187              #   Call between .Ltmp187 and .Ltmp188
	.uleb128 .Ltmp189-.Lfunc_begin8         #     jumps to .Ltmp189
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp190-.Lfunc_begin8         # >> Call Site 3 <<
	.uleb128 .Ltmp191-.Ltmp190              #   Call between .Ltmp190 and .Ltmp191
	.uleb128 .Ltmp192-.Lfunc_begin8         #     jumps to .Ltmp192
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp193-.Lfunc_begin8         # >> Call Site 4 <<
	.uleb128 .Ltmp194-.Ltmp193              #   Call between .Ltmp193 and .Ltmp194
	.uleb128 .Ltmp195-.Lfunc_begin8         #     jumps to .Ltmp195
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp196-.Lfunc_begin8         # >> Call Site 5 <<
	.uleb128 .Ltmp199-.Ltmp196              #   Call between .Ltmp196 and .Ltmp199
	.uleb128 .Ltmp200-.Lfunc_begin8         #     jumps to .Ltmp200
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp199-.Lfunc_begin8         # >> Call Site 6 <<
	.uleb128 .Ltmp201-.Ltmp199              #   Call between .Ltmp199 and .Ltmp201
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp201-.Lfunc_begin8         # >> Call Site 7 <<
	.uleb128 .Ltmp214-.Ltmp201              #   Call between .Ltmp201 and .Ltmp214
	.uleb128 .Ltmp215-.Lfunc_begin8         #     jumps to .Ltmp215
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp214-.Lfunc_begin8         # >> Call Site 8 <<
	.uleb128 .Lfunc_end8-.Ltmp214           #   Call between .Ltmp214 and .Lfunc_end8
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end8:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint8_t_RN9benchmark5StateE # -- Begin function _Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint8_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint8_t_RN9benchmark5StateE,@function
_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint8_t_RN9benchmark5StateE: # @_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint8_t_RN9benchmark5StateE
.Lfunc_begin9:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception9
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$s0, $a0
	lu12i.w	$a0, 9
	ori	$s2, $a0, 3136
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp216:
	lu12i.w	$s5, 2
	ori	$s1, $s5, 1808
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp217:
# %bb.1:
	move	$s3, $a0
	move	$s6, $zero
	st.d	$a0, $sp, 64
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 72
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB9_2:                                # =>This Inner Loop Header: Depth=1
.Ltmp219:
	addi.d	$a0, $sp, 72
	addi.d	$a2, $sp, 72
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp220:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB9_2 Depth=1
	stx.w	$a0, $fp, $s6
	addi.d	$s6, $s6, 4
	bne	$s6, $s2, .LBB9_2
# %bb.4:
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 72
	lu12i.w	$s6, -3
	ori	$s7, $s6, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB9_5:                                # =>This Inner Loop Header: Depth=1
.Ltmp222:
	addi.d	$a0, $sp, 72
	addi.d	$a2, $sp, 72
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp223:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB9_5 Depth=1
	add.d	$a1, $s3, $s7
	addi.d	$s7, $s7, 1
	stx.b	$a0, $a1, $s1
	bnez	$s7, .LBB9_5
# %bb.7:
	ld.w	$s4, $s0, 28
	ld.d	$s3, $s0, 16
.Ltmp225:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp226:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s4, .LBB9_20
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s3, .LBB9_20
# %bb.10:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s2
	addi.d	$a1, $fp, 64
	addi.d	$a2, $sp, 64
	ori	$a3, $s6, 2288
	ori	$a4, $s6, 2304
	ori	$a5, $s5, 1776
	ori	$a6, $s5, 1792
	.p2align	4, , 16
.LBB9_11:                               # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_15 Depth 2
                                        #     Child Loop BB9_18 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a7, $sp, 64
	bgeu	$a7, $a0, .LBB9_14
# %bb.12:                               # %.lr.ph
                                        #   in Loop: Header=BB9_11 Depth=1
	add.d	$t0, $a7, $s1
	bgeu	$fp, $t0, .LBB9_14
# %bb.13:                               #   in Loop: Header=BB9_11 Depth=1
	move	$t1, $zero
	b	.LBB9_17
	.p2align	4, , 16
.LBB9_14:                               # %vector.body.preheader
                                        #   in Loop: Header=BB9_11 Depth=1
	addi.d	$t0, $a7, 16
	move	$t1, $a1
	move	$t2, $a4
	.p2align	4, , 16
.LBB9_15:                               # %vector.body
                                        #   Parent Loop BB9_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$t3, $t0, $t2
	ldptr.d	$t4, $t3, 9968
	ldptr.d	$t5, $t3, 9976
	ldptr.d	$t6, $t3, 9984
	vinsgr2vr.d	$vr0, $t4, 0
	vinsgr2vr.d	$vr1, $t5, 0
	xvld	$xr5, $t1, -64
	vinsgr2vr.d	$vr2, $t6, 0
	ldptr.d	$t4, $t3, 9992
	xvld	$xr6, $t1, -32
	xvld	$xr7, $t1, 0
	xvld	$xr4, $t1, 32
	vinsgr2vr.d	$vr3, $t4, 0
	xvpickve2gr.w	$t4, $xr5, 7
	st.b	$t4, $sp, 55
	xvpickve2gr.w	$t4, $xr5, 6
	st.b	$t4, $sp, 54
	xvpickve2gr.w	$t4, $xr5, 5
	st.b	$t4, $sp, 53
	xvpickve2gr.w	$t4, $xr5, 4
	st.b	$t4, $sp, 52
	xvpickve2gr.w	$t4, $xr5, 3
	st.b	$t4, $sp, 51
	xvpickve2gr.w	$t4, $xr5, 2
	st.b	$t4, $sp, 50
	xvpickve2gr.w	$t4, $xr5, 1
	st.b	$t4, $sp, 49
	xvpickve2gr.w	$t4, $xr5, 0
	st.b	$t4, $sp, 48
	vld	$vr5, $sp, 48
	xvpickve2gr.w	$t4, $xr6, 7
	st.b	$t4, $sp, 39
	xvpickve2gr.w	$t4, $xr6, 6
	st.b	$t4, $sp, 38
	xvpickve2gr.w	$t4, $xr6, 5
	st.b	$t4, $sp, 37
	xvpickve2gr.w	$t4, $xr6, 4
	st.b	$t4, $sp, 36
	xvpickve2gr.w	$t4, $xr6, 3
	st.b	$t4, $sp, 35
	xvpickve2gr.w	$t4, $xr6, 2
	st.b	$t4, $sp, 34
	xvpickve2gr.w	$t4, $xr6, 1
	st.b	$t4, $sp, 33
	xvpickve2gr.w	$t4, $xr6, 0
	st.b	$t4, $sp, 32
	vld	$vr6, $sp, 32
	xvpickve2gr.w	$t4, $xr7, 7
	st.b	$t4, $sp, 7
	xvpickve2gr.w	$t4, $xr7, 6
	st.b	$t4, $sp, 6
	xvpickve2gr.w	$t4, $xr7, 5
	st.b	$t4, $sp, 5
	xvpickve2gr.w	$t4, $xr7, 4
	st.b	$t4, $sp, 4
	xvpickve2gr.w	$t4, $xr7, 3
	st.b	$t4, $sp, 3
	xvpickve2gr.w	$t4, $xr7, 2
	st.b	$t4, $sp, 2
	xvpickve2gr.w	$t4, $xr7, 1
	st.b	$t4, $sp, 1
	xvpickve2gr.w	$t4, $xr7, 0
	st.b	$t4, $sp, 0
	vld	$vr7, $sp, 0
	xvpickve2gr.w	$t4, $xr4, 7
	st.b	$t4, $sp, 23
	xvpickve2gr.w	$t4, $xr4, 6
	st.b	$t4, $sp, 22
	xvpickve2gr.w	$t4, $xr4, 5
	st.b	$t4, $sp, 21
	xvpickve2gr.w	$t4, $xr4, 4
	st.b	$t4, $sp, 20
	xvpickve2gr.w	$t4, $xr4, 3
	st.b	$t4, $sp, 19
	xvpickve2gr.w	$t4, $xr4, 2
	st.b	$t4, $sp, 18
	xvpickve2gr.w	$t4, $xr4, 1
	st.b	$t4, $sp, 17
	xvpickve2gr.w	$t4, $xr4, 0
	st.b	$t4, $sp, 16
	vld	$vr4, $sp, 16
	vadd.b	$vr0, $vr0, $vr5
	vadd.b	$vr1, $vr1, $vr6
	vadd.b	$vr2, $vr2, $vr7
	vadd.b	$vr3, $vr3, $vr4
	vpickve2gr.d	$t4, $vr0, 0
	xvinsgr2vr.d	$xr0, $t4, 0
	vpickve2gr.d	$t4, $vr1, 0
	xvinsgr2vr.d	$xr0, $t4, 1
	vpickve2gr.d	$t4, $vr2, 0
	xvinsgr2vr.d	$xr0, $t4, 2
	vpickve2gr.d	$t4, $vr3, 0
	xvinsgr2vr.d	$xr0, $t4, 3
	xvstx	$xr0, $t3, $a5
	addi.d	$t2, $t2, 32
	addi.d	$t1, $t1, 128
	bnez	$t2, .LBB9_15
# %bb.16:                               #   in Loop: Header=BB9_11 Depth=1
	move	$t1, $a6
.LBB9_17:                               # %.lr.ph.i.preheader
                                        #   in Loop: Header=BB9_11 Depth=1
	add.d	$t0, $t1, $a3
	add.d	$a7, $a7, $t1
	alsl.d	$t1, $t1, $fp, 2
	.p2align	4, , 16
.LBB9_18:                               # %.lr.ph.i
                                        #   Parent Loop BB9_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$t2, $t1, 0
	ld.b	$t3, $a7, 0
	add.d	$t2, $t3, $t2
	st.b	$t2, $a7, 0
	addi.d	$t0, $t0, 1
	addi.d	$a7, $a7, 1
	addi.d	$t1, $t1, 4
	bnez	$t0, .LBB9_18
# %bb.19:                               # %_ZL34truncOrZextVecWithAddInLoopWithVW8IjhEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB9_11 Depth=1
	addi.d	$s3, $s3, -1
	bnez	$s3, .LBB9_11
.LBB9_20:                               # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp227:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp228:
# %bb.21:                               # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 64
	beqz	$a0, .LBB9_23
# %bb.22:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB9_23:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB9_24:
.Ltmp218:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB9_25:
.Ltmp229:
	ld.d	$s3, $sp, 64
	move	$s0, $a0
	bnez	$s3, .LBB9_29
	b	.LBB9_30
.LBB9_26:                               # %.loopexit
.Ltmp224:
	b	.LBB9_28
.LBB9_27:                               # %.loopexit.split-lp
.Ltmp221:
.LBB9_28:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB9_29:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB9_30:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end9:
	.size	_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint8_t_RN9benchmark5StateE, .Lfunc_end9-_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint8_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table9:
.Lexception9:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end9-.Lcst_begin9
.Lcst_begin9:
	.uleb128 .Lfunc_begin9-.Lfunc_begin9    # >> Call Site 1 <<
	.uleb128 .Ltmp216-.Lfunc_begin9         #   Call between .Lfunc_begin9 and .Ltmp216
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp216-.Lfunc_begin9         # >> Call Site 2 <<
	.uleb128 .Ltmp217-.Ltmp216              #   Call between .Ltmp216 and .Ltmp217
	.uleb128 .Ltmp218-.Lfunc_begin9         #     jumps to .Ltmp218
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp219-.Lfunc_begin9         # >> Call Site 3 <<
	.uleb128 .Ltmp220-.Ltmp219              #   Call between .Ltmp219 and .Ltmp220
	.uleb128 .Ltmp221-.Lfunc_begin9         #     jumps to .Ltmp221
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp222-.Lfunc_begin9         # >> Call Site 4 <<
	.uleb128 .Ltmp223-.Ltmp222              #   Call between .Ltmp222 and .Ltmp223
	.uleb128 .Ltmp224-.Lfunc_begin9         #     jumps to .Ltmp224
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp225-.Lfunc_begin9         # >> Call Site 5 <<
	.uleb128 .Ltmp228-.Ltmp225              #   Call between .Ltmp225 and .Ltmp228
	.uleb128 .Ltmp229-.Lfunc_begin9         #     jumps to .Ltmp229
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp228-.Lfunc_begin9         # >> Call Site 6 <<
	.uleb128 .Lfunc_end9-.Ltmp228           #   Call between .Ltmp228 and .Lfunc_end9
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end9:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint8_t_RN9benchmark5StateE # -- Begin function _Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint8_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint8_t_RN9benchmark5StateE,@function
_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint8_t_RN9benchmark5StateE: # @_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint8_t_RN9benchmark5StateE
.Lfunc_begin10:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception10
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$s0, $a0
	lu12i.w	$a0, 9
	ori	$s2, $a0, 3136
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp230:
	lu12i.w	$s5, 2
	ori	$s1, $s5, 1808
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp231:
# %bb.1:
	move	$s3, $a0
	move	$s6, $zero
	st.d	$a0, $sp, 0
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 8
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB10_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp233:
	addi.d	$a0, $sp, 8
	addi.d	$a2, $sp, 8
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp234:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB10_2 Depth=1
	stx.w	$a0, $fp, $s6
	addi.d	$s6, $s6, 4
	bne	$s6, $s2, .LBB10_2
# %bb.4:
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 8
	lu12i.w	$s6, -3
	ori	$s7, $s6, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB10_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp236:
	addi.d	$a0, $sp, 8
	addi.d	$a2, $sp, 8
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp237:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB10_5 Depth=1
	add.d	$a1, $s3, $s7
	addi.d	$s7, $s7, 1
	stx.b	$a0, $a1, $s1
	bnez	$s7, .LBB10_5
# %bb.7:
	ld.w	$s4, $s0, 28
	ld.d	$s3, $s0, 16
.Ltmp239:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp240:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s4, .LBB10_20
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s3, .LBB10_20
# %bb.10:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s2
	addi.d	$a1, $fp, 128
	addi.d	$a2, $sp, 0
	ori	$a3, $s6, 2288
	ori	$a4, $s6, 2304
	ori	$a5, $s5, 1760
	ori	$a6, $s5, 1776
	ori	$a7, $s5, 1792
	.p2align	4, , 16
.LBB10_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_15 Depth 2
                                        #     Child Loop BB10_18 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$t0, $sp, 0
	bgeu	$t0, $a0, .LBB10_14
# %bb.12:                               # %.lr.ph
                                        #   in Loop: Header=BB10_11 Depth=1
	add.d	$t1, $t0, $s1
	bgeu	$fp, $t1, .LBB10_14
# %bb.13:                               #   in Loop: Header=BB10_11 Depth=1
	move	$t2, $zero
	b	.LBB10_17
	.p2align	4, , 16
.LBB10_14:                              # %vector.body.preheader
                                        #   in Loop: Header=BB10_11 Depth=1
	addi.d	$t1, $t0, 32
	move	$t2, $a1
	move	$t3, $a4
	.p2align	4, , 16
.LBB10_15:                              # %vector.body
                                        #   Parent Loop BB10_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr8, $t2, -96
	xvld	$xr12, $t2, -128
	xvld	$xr10, $t2, -32
	xvld	$xr11, $t2, -64
	xvld	$xr7, $t2, 32
	xvld	$xr9, $t2, 0
	xvld	$xr0, $t2, 96
	xvld	$xr6, $t2, 64
	add.d	$t4, $t1, $t3
	vldx	$vr1, $t4, $a5
	vldx	$vr2, $t4, $a6
	vldx	$vr3, $t4, $a7
	vldx	$vr4, $t4, $s1
	xvpickve2gr.w	$t5, $xr12, 0
	vinsgr2vr.b	$vr5, $t5, 0
	xvpickve2gr.w	$t5, $xr12, 1
	vinsgr2vr.b	$vr5, $t5, 1
	xvpickve2gr.w	$t5, $xr12, 2
	vinsgr2vr.b	$vr5, $t5, 2
	xvpickve2gr.w	$t5, $xr12, 3
	vinsgr2vr.b	$vr5, $t5, 3
	xvpickve2gr.w	$t5, $xr12, 4
	vinsgr2vr.b	$vr5, $t5, 4
	xvpickve2gr.w	$t5, $xr12, 5
	vinsgr2vr.b	$vr5, $t5, 5
	xvpickve2gr.w	$t5, $xr12, 6
	vinsgr2vr.b	$vr5, $t5, 6
	xvpickve2gr.w	$t5, $xr12, 7
	vinsgr2vr.b	$vr5, $t5, 7
	xvpickve2gr.w	$t5, $xr8, 0
	vinsgr2vr.b	$vr5, $t5, 8
	xvpickve2gr.w	$t5, $xr8, 1
	vinsgr2vr.b	$vr5, $t5, 9
	xvpickve2gr.w	$t5, $xr8, 2
	vinsgr2vr.b	$vr5, $t5, 10
	xvpickve2gr.w	$t5, $xr8, 3
	vinsgr2vr.b	$vr5, $t5, 11
	xvpickve2gr.w	$t5, $xr8, 4
	vinsgr2vr.b	$vr5, $t5, 12
	xvpickve2gr.w	$t5, $xr8, 5
	vinsgr2vr.b	$vr5, $t5, 13
	xvpickve2gr.w	$t5, $xr8, 6
	vinsgr2vr.b	$vr5, $t5, 14
	xvpickve2gr.w	$t5, $xr8, 7
	vinsgr2vr.b	$vr5, $t5, 15
	xvpickve2gr.w	$t5, $xr11, 0
	vinsgr2vr.b	$vr8, $t5, 0
	xvpickve2gr.w	$t5, $xr11, 1
	vinsgr2vr.b	$vr8, $t5, 1
	xvpickve2gr.w	$t5, $xr11, 2
	vinsgr2vr.b	$vr8, $t5, 2
	xvpickve2gr.w	$t5, $xr11, 3
	vinsgr2vr.b	$vr8, $t5, 3
	xvpickve2gr.w	$t5, $xr11, 4
	vinsgr2vr.b	$vr8, $t5, 4
	xvpickve2gr.w	$t5, $xr11, 5
	vinsgr2vr.b	$vr8, $t5, 5
	xvpickve2gr.w	$t5, $xr11, 6
	vinsgr2vr.b	$vr8, $t5, 6
	xvpickve2gr.w	$t5, $xr11, 7
	vinsgr2vr.b	$vr8, $t5, 7
	xvpickve2gr.w	$t5, $xr10, 0
	vinsgr2vr.b	$vr8, $t5, 8
	xvpickve2gr.w	$t5, $xr10, 1
	vinsgr2vr.b	$vr8, $t5, 9
	xvpickve2gr.w	$t5, $xr10, 2
	vinsgr2vr.b	$vr8, $t5, 10
	xvpickve2gr.w	$t5, $xr10, 3
	vinsgr2vr.b	$vr8, $t5, 11
	xvpickve2gr.w	$t5, $xr10, 4
	vinsgr2vr.b	$vr8, $t5, 12
	xvpickve2gr.w	$t5, $xr10, 5
	vinsgr2vr.b	$vr8, $t5, 13
	xvpickve2gr.w	$t5, $xr10, 6
	vinsgr2vr.b	$vr8, $t5, 14
	xvpickve2gr.w	$t5, $xr10, 7
	vinsgr2vr.b	$vr8, $t5, 15
	xvpickve2gr.w	$t5, $xr9, 0
	vinsgr2vr.b	$vr10, $t5, 0
	xvpickve2gr.w	$t5, $xr9, 1
	vinsgr2vr.b	$vr10, $t5, 1
	xvpickve2gr.w	$t5, $xr9, 2
	vinsgr2vr.b	$vr10, $t5, 2
	xvpickve2gr.w	$t5, $xr9, 3
	vinsgr2vr.b	$vr10, $t5, 3
	xvpickve2gr.w	$t5, $xr9, 4
	vinsgr2vr.b	$vr10, $t5, 4
	xvpickve2gr.w	$t5, $xr9, 5
	vinsgr2vr.b	$vr10, $t5, 5
	xvpickve2gr.w	$t5, $xr9, 6
	vinsgr2vr.b	$vr10, $t5, 6
	xvpickve2gr.w	$t5, $xr9, 7
	vinsgr2vr.b	$vr10, $t5, 7
	xvpickve2gr.w	$t5, $xr7, 0
	vinsgr2vr.b	$vr10, $t5, 8
	xvpickve2gr.w	$t5, $xr7, 1
	vinsgr2vr.b	$vr10, $t5, 9
	xvpickve2gr.w	$t5, $xr7, 2
	vinsgr2vr.b	$vr10, $t5, 10
	xvpickve2gr.w	$t5, $xr7, 3
	vinsgr2vr.b	$vr10, $t5, 11
	xvpickve2gr.w	$t5, $xr7, 4
	vinsgr2vr.b	$vr10, $t5, 12
	xvpickve2gr.w	$t5, $xr7, 5
	vinsgr2vr.b	$vr10, $t5, 13
	xvpickve2gr.w	$t5, $xr7, 6
	vinsgr2vr.b	$vr10, $t5, 14
	xvpickve2gr.w	$t5, $xr7, 7
	vinsgr2vr.b	$vr10, $t5, 15
	xvpickve2gr.w	$t5, $xr6, 0
	vinsgr2vr.b	$vr7, $t5, 0
	xvpickve2gr.w	$t5, $xr6, 1
	vinsgr2vr.b	$vr7, $t5, 1
	xvpickve2gr.w	$t5, $xr6, 2
	vinsgr2vr.b	$vr7, $t5, 2
	xvpickve2gr.w	$t5, $xr6, 3
	vinsgr2vr.b	$vr7, $t5, 3
	xvpickve2gr.w	$t5, $xr6, 4
	vinsgr2vr.b	$vr7, $t5, 4
	xvpickve2gr.w	$t5, $xr6, 5
	vinsgr2vr.b	$vr7, $t5, 5
	xvpickve2gr.w	$t5, $xr6, 6
	vinsgr2vr.b	$vr7, $t5, 6
	xvpickve2gr.w	$t5, $xr6, 7
	vinsgr2vr.b	$vr7, $t5, 7
	xvpickve2gr.w	$t5, $xr0, 0
	vinsgr2vr.b	$vr7, $t5, 8
	xvpickve2gr.w	$t5, $xr0, 1
	vinsgr2vr.b	$vr7, $t5, 9
	xvpickve2gr.w	$t5, $xr0, 2
	vinsgr2vr.b	$vr7, $t5, 10
	xvpickve2gr.w	$t5, $xr0, 3
	vinsgr2vr.b	$vr7, $t5, 11
	xvpickve2gr.w	$t5, $xr0, 4
	vinsgr2vr.b	$vr7, $t5, 12
	xvpickve2gr.w	$t5, $xr0, 5
	vinsgr2vr.b	$vr7, $t5, 13
	xvpickve2gr.w	$t5, $xr0, 6
	vinsgr2vr.b	$vr7, $t5, 14
	xvpickve2gr.w	$t5, $xr0, 7
	vinsgr2vr.b	$vr7, $t5, 15
	vadd.b	$vr0, $vr1, $vr5
	vadd.b	$vr1, $vr2, $vr8
	vadd.b	$vr2, $vr3, $vr10
	vadd.b	$vr3, $vr4, $vr7
	vstx	$vr0, $t4, $a5
	vstx	$vr1, $t4, $a6
	vstx	$vr2, $t4, $a7
	vstx	$vr3, $t4, $s1
	addi.d	$t3, $t3, 64
	addi.d	$t2, $t2, 256
	bnez	$t3, .LBB10_15
# %bb.16:                               #   in Loop: Header=BB10_11 Depth=1
	move	$t2, $a7
.LBB10_17:                              # %.lr.ph.i.preheader
                                        #   in Loop: Header=BB10_11 Depth=1
	add.d	$t1, $t2, $a3
	add.d	$t0, $t0, $t2
	alsl.d	$t2, $t2, $fp, 2
	.p2align	4, , 16
.LBB10_18:                              # %.lr.ph.i
                                        #   Parent Loop BB10_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$t3, $t2, 0
	ld.b	$t4, $t0, 0
	add.d	$t3, $t4, $t3
	st.b	$t3, $t0, 0
	addi.d	$t1, $t1, 1
	addi.d	$t0, $t0, 1
	addi.d	$t2, $t2, 4
	bnez	$t1, .LBB10_18
# %bb.19:                               # %_ZL35truncOrZextVecWithAddInLoopWithVW16IjhEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB10_11 Depth=1
	addi.d	$s3, $s3, -1
	bnez	$s3, .LBB10_11
.LBB10_20:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp241:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp242:
# %bb.21:                               # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 0
	beqz	$a0, .LBB10_23
# %bb.22:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB10_23:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.LBB10_24:
.Ltmp232:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB10_25:
.Ltmp243:
	ld.d	$s3, $sp, 0
	move	$s0, $a0
	bnez	$s3, .LBB10_29
	b	.LBB10_30
.LBB10_26:                              # %.loopexit
.Ltmp238:
	b	.LBB10_28
.LBB10_27:                              # %.loopexit.split-lp
.Ltmp235:
.LBB10_28:                              # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB10_29:                              # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB10_30:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end10:
	.size	_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint8_t_RN9benchmark5StateE, .Lfunc_end10-_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint8_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table10:
.Lexception10:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end10-.Lcst_begin10
.Lcst_begin10:
	.uleb128 .Lfunc_begin10-.Lfunc_begin10  # >> Call Site 1 <<
	.uleb128 .Ltmp230-.Lfunc_begin10        #   Call between .Lfunc_begin10 and .Ltmp230
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp230-.Lfunc_begin10        # >> Call Site 2 <<
	.uleb128 .Ltmp231-.Ltmp230              #   Call between .Ltmp230 and .Ltmp231
	.uleb128 .Ltmp232-.Lfunc_begin10        #     jumps to .Ltmp232
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp233-.Lfunc_begin10        # >> Call Site 3 <<
	.uleb128 .Ltmp234-.Ltmp233              #   Call between .Ltmp233 and .Ltmp234
	.uleb128 .Ltmp235-.Lfunc_begin10        #     jumps to .Ltmp235
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp236-.Lfunc_begin10        # >> Call Site 4 <<
	.uleb128 .Ltmp237-.Ltmp236              #   Call between .Ltmp236 and .Ltmp237
	.uleb128 .Ltmp238-.Lfunc_begin10        #     jumps to .Ltmp238
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp239-.Lfunc_begin10        # >> Call Site 5 <<
	.uleb128 .Ltmp242-.Ltmp239              #   Call between .Ltmp239 and .Ltmp242
	.uleb128 .Ltmp243-.Lfunc_begin10        #     jumps to .Ltmp243
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp242-.Lfunc_begin10        # >> Call Site 6 <<
	.uleb128 .Lfunc_end10-.Ltmp242          #   Call between .Ltmp242 and .Lfunc_end10
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end10:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint8_t_RN9benchmark5StateE # -- Begin function _Z60benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint8_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint8_t_RN9benchmark5StateE,@function
_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint8_t_RN9benchmark5StateE: # @_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint8_t_RN9benchmark5StateE
.Lfunc_begin11:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception11
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$s0, $a0
	lu12i.w	$a0, 9
	ori	$s2, $a0, 3136
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp244:
	lu12i.w	$a0, 2
	ori	$s1, $a0, 1808
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp245:
# %bb.1:
	move	$s3, $a0
	move	$s5, $zero
	st.d	$a0, $sp, 24
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 32
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB11_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp247:
	addi.d	$a0, $sp, 32
	addi.d	$a2, $sp, 32
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp248:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB11_2 Depth=1
	stx.w	$a0, $fp, $s5
	addi.d	$s5, $s5, 4
	bne	$s5, $s2, .LBB11_2
# %bb.4:
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 32
	lu12i.w	$s5, -3
	ori	$s6, $s5, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB11_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp250:
	addi.d	$a0, $sp, 32
	addi.d	$a2, $sp, 32
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp251:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB11_5 Depth=1
	add.d	$a1, $s3, $s6
	addi.d	$s6, $s6, 1
	stx.b	$a0, $a1, $s1
	bnez	$s6, .LBB11_5
# %bb.7:
	ld.w	$s4, $s0, 28
	ld.d	$s3, $s0, 16
.Ltmp253:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp254:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s4, .LBB11_18
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s3, .LBB11_18
# %bb.10:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s2
	addi.d	$a1, $sp, 24
	ori	$a2, $s5, 2288
	b	.LBB11_12
	.p2align	4, , 16
.LBB11_11:                              # %_ZL27truncOrZextVecWithAddInLoopIjhEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB11_12 Depth=1
	addi.d	$s3, $s3, -1
	beqz	$s3, .LBB11_18
.LBB11_12:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_17 Depth 2
                                        #     Child Loop BB11_15 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a3, $sp, 24
	bgeu	$a3, $a0, .LBB11_16
# %bb.13:                               # %.lr.ph
                                        #   in Loop: Header=BB11_12 Depth=1
	add.d	$a4, $a3, $s1
	bgeu	$fp, $a4, .LBB11_16
# %bb.14:                               # %.lr.ph.i.preheader
                                        #   in Loop: Header=BB11_12 Depth=1
	move	$a4, $fp
	move	$a5, $a2
	.p2align	4, , 16
.LBB11_15:                              # %.lr.ph.i
                                        #   Parent Loop BB11_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a6, $a4, 0
	add.d	$a7, $a3, $a5
	ldx.b	$t0, $a7, $s1
	add.d	$a6, $t0, $a6
	stx.b	$a6, $a7, $s1
	addi.d	$a5, $a5, 1
	addi.d	$a4, $a4, 4
	bnez	$a5, .LBB11_15
	b	.LBB11_11
	.p2align	4, , 16
.LBB11_16:                              # %vector.body.preheader
                                        #   in Loop: Header=BB11_12 Depth=1
	move	$a4, $fp
	move	$a5, $a2
	.p2align	4, , 16
.LBB11_17:                              # %vector.body
                                        #   Parent Loop BB11_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr0, $a4, 0
	add.d	$a6, $a3, $a5
	ldptr.d	$a7, $a6, 10000
	xvpickve2gr.w	$t0, $xr0, 7
	st.b	$t0, $sp, 7
	xvpickve2gr.w	$t0, $xr0, 6
	st.b	$t0, $sp, 6
	xvpickve2gr.w	$t0, $xr0, 5
	st.b	$t0, $sp, 5
	xvpickve2gr.w	$t0, $xr0, 4
	st.b	$t0, $sp, 4
	xvpickve2gr.w	$t0, $xr0, 3
	st.b	$t0, $sp, 3
	xvpickve2gr.w	$t0, $xr0, 2
	st.b	$t0, $sp, 2
	xvpickve2gr.w	$t0, $xr0, 1
	st.b	$t0, $sp, 1
	xvpickve2gr.w	$t0, $xr0, 0
	st.b	$t0, $sp, 0
	vld	$vr0, $sp, 0
	vinsgr2vr.d	$vr1, $a7, 0
	vadd.b	$vr0, $vr1, $vr0
	vpickve2gr.d	$a7, $vr0, 0
	stptr.d	$a7, $a6, 10000
	addi.d	$a5, $a5, 8
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB11_17
	b	.LBB11_11
.LBB11_18:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp255:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp256:
# %bb.19:                               # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 24
	beqz	$a0, .LBB11_21
# %bb.20:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB11_21:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB11_22:
.Ltmp246:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB11_23:
.Ltmp257:
	ld.d	$s3, $sp, 24
	move	$s0, $a0
	bnez	$s3, .LBB11_27
	b	.LBB11_28
.LBB11_24:                              # %.loopexit
.Ltmp252:
	b	.LBB11_26
.LBB11_25:                              # %.loopexit.split-lp
.Ltmp249:
.LBB11_26:                              # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB11_27:                              # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB11_28:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end11:
	.size	_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint8_t_RN9benchmark5StateE, .Lfunc_end11-_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint8_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table11:
.Lexception11:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end11-.Lcst_begin11
.Lcst_begin11:
	.uleb128 .Lfunc_begin11-.Lfunc_begin11  # >> Call Site 1 <<
	.uleb128 .Ltmp244-.Lfunc_begin11        #   Call between .Lfunc_begin11 and .Ltmp244
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp244-.Lfunc_begin11        # >> Call Site 2 <<
	.uleb128 .Ltmp245-.Ltmp244              #   Call between .Ltmp244 and .Ltmp245
	.uleb128 .Ltmp246-.Lfunc_begin11        #     jumps to .Ltmp246
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp247-.Lfunc_begin11        # >> Call Site 3 <<
	.uleb128 .Ltmp248-.Ltmp247              #   Call between .Ltmp247 and .Ltmp248
	.uleb128 .Ltmp249-.Lfunc_begin11        #     jumps to .Ltmp249
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp250-.Lfunc_begin11        # >> Call Site 4 <<
	.uleb128 .Ltmp251-.Ltmp250              #   Call between .Ltmp250 and .Ltmp251
	.uleb128 .Ltmp252-.Lfunc_begin11        #     jumps to .Ltmp252
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp253-.Lfunc_begin11        # >> Call Site 5 <<
	.uleb128 .Ltmp256-.Ltmp253              #   Call between .Ltmp253 and .Ltmp256
	.uleb128 .Ltmp257-.Lfunc_begin11        #     jumps to .Ltmp257
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp256-.Lfunc_begin11        # >> Call Site 6 <<
	.uleb128 .Lfunc_end11-.Ltmp256          #   Call between .Ltmp256 and .Lfunc_end11
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end11:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z60benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint8_t_RN9benchmark5StateE
.LCPI12_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5, 0x0
.LCPI12_1:
	.byte	32                              # 0x20
	.byte	31                              # 0x1f
	.byte	30                              # 0x1e
	.byte	29                              # 0x1d
	.byte	28                              # 0x1c
	.byte	27                              # 0x1b
	.byte	26                              # 0x1a
	.byte	25                              # 0x19
	.byte	24                              # 0x18
	.byte	23                              # 0x17
	.byte	22                              # 0x16
	.byte	21                              # 0x15
	.byte	20                              # 0x14
	.byte	19                              # 0x13
	.byte	18                              # 0x12
	.byte	17                              # 0x11
	.byte	16                              # 0x10
	.byte	15                              # 0xf
	.byte	14                              # 0xe
	.byte	13                              # 0xd
	.byte	12                              # 0xc
	.byte	11                              # 0xb
	.byte	10                              # 0xa
	.byte	9                               # 0x9
	.byte	8                               # 0x8
	.byte	7                               # 0x7
	.byte	6                               # 0x6
	.byte	5                               # 0x5
	.byte	4                               # 0x4
	.byte	3                               # 0x3
	.byte	2                               # 0x2
	.byte	1                               # 0x1
	.text
	.globl	_Z60benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint8_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z60benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint8_t_RN9benchmark5StateE,@function
_Z60benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint8_t_RN9benchmark5StateE: # @_Z60benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint8_t_RN9benchmark5StateE
.Lfunc_begin12:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception12
# %bb.0:
	addi.d	$sp, $sp, -288
	.cfi_def_cfa_offset 288
	st.d	$ra, $sp, 280                   # 8-byte Folded Spill
	st.d	$fp, $sp, 272                   # 8-byte Folded Spill
	st.d	$s0, $sp, 264                   # 8-byte Folded Spill
	st.d	$s1, $sp, 256                   # 8-byte Folded Spill
	st.d	$s2, $sp, 248                   # 8-byte Folded Spill
	st.d	$s3, $sp, 240                   # 8-byte Folded Spill
	st.d	$s4, $sp, 232                   # 8-byte Folded Spill
	st.d	$s5, $sp, 224                   # 8-byte Folded Spill
	st.d	$s6, $sp, 216                   # 8-byte Folded Spill
	st.d	$s7, $sp, 208                   # 8-byte Folded Spill
	st.d	$s8, $sp, 200                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s0, $a0
	lu12i.w	$s2, 19
	ori	$s4, $s2, 2176
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp258:
	lu12i.w	$a0, 2
	ori	$s3, $a0, 1808
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp259:
# %bb.1:                                # %.split
	move	$s1, $a0
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $sp, 168
.Ltmp261:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp262:
# %bb.2:                                # %.split161
	move	$s0, $a0
	move	$s8, $zero
	ori	$s2, $s2, 2048
	add.d	$s6, $fp, $s2
	pcalau12i	$a0, %pc_hi20(.LCPI12_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI12_0)
	lu12i.w	$a0, 2
	ori	$a0, $a0, 1793
	add.d	$s7, $s1, $a0
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	add.d	$a0, $s0, $a0
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	vst	$vr0, $sp, 176
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB12_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp264:
	addi.d	$a0, $sp, 176
	addi.d	$a2, $sp, 176
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp265:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB12_3 Depth=1
	stx.d	$a0, $fp, $s8
	addi.d	$s8, $s8, 8
	bne	$s8, $s4, .LBB12_3
# %bb.5:                                # %vector.ph
	addi.d	$a0, $fp, 8
	lu12i.w	$s5, -3
	ori	$a1, $s5, 2288
	lu12i.w	$s8, 2
	ori	$a2, $s8, 1809
	.p2align	4, , 16
.LBB12_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a3, $a0, -8
	ld.d	$a4, $a0, 0
	add.d	$a5, $s0, $a1
	stx.b	$a3, $a5, $s3
	stx.b	$a4, $a5, $a2
	addi.d	$a1, $a1, 2
	addi.d	$a0, $a0, 16
	bnez	$a1, .LBB12_6
# %bb.7:                                # %vector.body78.preheader
	move	$a0, $zero
	addi.d	$a1, $s1, 16
	.p2align	4, , 16
.LBB12_8:                               # %vector.body78
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a0
	xvld	$xr0, $a2, 32
	xvldx	$xr1, $fp, $a0
	xvld	$xr2, $a2, 64
	xvld	$xr3, $a2, 96
	xvld	$xr4, $a2, 128
	xvld	$xr5, $a2, 160
	xvld	$xr6, $a2, 192
	xvld	$xr7, $a2, 224
	xvpickve2gr.d	$a2, $xr1, 3
	st.b	$a2, $sp, 99
	xvpickve2gr.d	$a2, $xr1, 2
	st.b	$a2, $sp, 98
	xvpickve2gr.d	$a2, $xr1, 1
	st.b	$a2, $sp, 97
	xvpickve2gr.d	$a2, $xr1, 0
	st.b	$a2, $sp, 96
	xvpickve2gr.d	$a2, $xr0, 3
	st.b	$a2, $sp, 103
	xvpickve2gr.d	$a2, $xr0, 2
	st.b	$a2, $sp, 102
	xvpickve2gr.d	$a2, $xr0, 1
	st.b	$a2, $sp, 101
	xvpickve2gr.d	$a2, $xr0, 0
	st.b	$a2, $sp, 100
	xvpickve2gr.d	$a2, $xr3, 3
	st.b	$a2, $sp, 151
	xvpickve2gr.d	$a2, $xr3, 2
	st.b	$a2, $sp, 150
	xvpickve2gr.d	$a2, $xr3, 1
	st.b	$a2, $sp, 149
	xvpickve2gr.d	$a2, $xr3, 0
	st.b	$a2, $sp, 148
	xvpickve2gr.d	$a2, $xr2, 3
	st.b	$a2, $sp, 147
	xvpickve2gr.d	$a2, $xr2, 2
	st.b	$a2, $sp, 146
	xvpickve2gr.d	$a2, $xr2, 1
	st.b	$a2, $sp, 145
	xvpickve2gr.d	$a2, $xr2, 0
	st.b	$a2, $sp, 144
	xvpickve2gr.d	$a2, $xr5, 3
	st.b	$a2, $sp, 135
	xvpickve2gr.d	$a2, $xr5, 2
	st.b	$a2, $sp, 134
	xvpickve2gr.d	$a2, $xr5, 1
	st.b	$a2, $sp, 133
	xvpickve2gr.d	$a2, $xr5, 0
	st.b	$a2, $sp, 132
	xvpickve2gr.d	$a2, $xr4, 3
	st.b	$a2, $sp, 131
	xvpickve2gr.d	$a2, $xr4, 2
	st.b	$a2, $sp, 130
	xvpickve2gr.d	$a2, $xr4, 1
	st.b	$a2, $sp, 129
	xvpickve2gr.d	$a2, $xr4, 0
	st.b	$a2, $sp, 128
	xvpickve2gr.d	$a2, $xr7, 3
	st.b	$a2, $sp, 119
	xvpickve2gr.d	$a2, $xr7, 2
	st.b	$a2, $sp, 118
	xvpickve2gr.d	$a2, $xr7, 1
	st.b	$a2, $sp, 117
	xvpickve2gr.d	$a2, $xr7, 0
	st.b	$a2, $sp, 116
	xvpickve2gr.d	$a2, $xr6, 3
	st.b	$a2, $sp, 115
	xvpickve2gr.d	$a2, $xr6, 2
	st.b	$a2, $sp, 114
	xvpickve2gr.d	$a2, $xr6, 1
	st.b	$a2, $sp, 113
	xvpickve2gr.d	$a2, $xr6, 0
	st.b	$a2, $sp, 112
	ld.d	$a2, $sp, 96
	ld.d	$a3, $sp, 144
	ld.d	$a4, $sp, 128
	ld.d	$a5, $sp, 112
	xvinsgr2vr.d	$xr0, $a2, 0
	xvinsgr2vr.d	$xr0, $a3, 1
	xvinsgr2vr.d	$xr0, $a4, 2
	xvinsgr2vr.d	$xr0, $a5, 3
	xvst	$xr0, $a1, -16
	addi.d	$a0, $a0, 256
	addi.d	$a1, $a1, 32
	bne	$a0, $s2, .LBB12_8
# %bb.9:                                # %.lr.ph.i
	move	$a0, $zero
	ld.d	$a1, $s6, 0
	ori	$s2, $s8, 1792
	ld.d	$a2, $s6, 8
	ld.d	$a3, $s6, 16
	ld.d	$a4, $s6, 24
	stx.b	$a1, $s1, $s2
	st.b	$a2, $s7, 0
	st.b	$a3, $s7, 1
	st.b	$a4, $s7, 2
	ld.d	$a1, $s6, 32
	ori	$a3, $s8, 1796
	ld.d	$a2, $s6, 40
	ld.d	$a4, $s6, 48
	ld.d	$a5, $s6, 56
	stx.b	$a1, $s1, $a3
	st.b	$a2, $s7, 4
	st.b	$a4, $s7, 5
	st.b	$a5, $s7, 6
	ld.d	$a1, $s6, 64
	ori	$a2, $s8, 1800
	ld.d	$a4, $s6, 72
	ld.d	$a5, $s6, 80
	ld.d	$a6, $s6, 88
	stx.b	$a1, $s1, $a2
	st.b	$a4, $s7, 8
	st.b	$a5, $s7, 9
	st.b	$a6, $s7, 10
	ld.d	$a4, $s6, 96
	ori	$a1, $s8, 1804
	ld.d	$a5, $s6, 104
	ld.d	$a6, $s6, 112
	ld.d	$a7, $s6, 120
	stx.b	$a4, $s1, $a1
	st.b	$a5, $s7, 12
	st.b	$a6, $s7, 13
	st.b	$a7, $s7, 14
	ori	$a4, $s8, 1760
	.p2align	4, , 16
.LBB12_10:                              # %vector.body88
                                        # =>This Inner Loop Header: Depth=1
	move	$a5, $a0
	xvldx	$xr0, $s1, $a0
	xvldx	$xr1, $s0, $a0
	xvseq.b	$xr0, $xr0, $xr1
	xvxori.b	$xr0, $xr0, 255
	xvmskltz.b	$xr1, $xr0
	xvpickve2gr.wu	$a0, $xr1, 0
	xvpickve2gr.wu	$a6, $xr1, 4
	bstrins.d	$a0, $a6, 31, 16
	addi.w	$a6, $a0, 0
	addi.d	$a0, $a5, 32
	bnez	$a6, .LBB12_12
# %bb.11:                               # %vector.body88
                                        #   in Loop: Header=BB12_10 Depth=1
	bne	$a5, $a4, .LBB12_10
.LBB12_12:                              # %middle.split
	ld.d	$a5, $sp, 24                    # 8-byte Folded Reload
	bnez	$a6, .LBB12_46
# %bb.13:                               # %_ZL27truncOrZextVecInLoopWithVW8ImhEvPKT_PT0_i.exit.preheader
	ldx.bu	$a0, $s1, $s2
	ldx.bu	$a4, $s0, $s2
	bne	$a0, $a4, .LBB12_58
# %bb.14:                               # %_ZL27truncOrZextVecInLoopWithVW8ImhEvPKT_PT0_i.exit
	ld.bu	$a0, $s7, 0
	ld.bu	$a4, $a5, 0
	ld.d	$s2, $sp, 16                    # 8-byte Folded Reload
	bne	$a0, $a4, .LBB12_58
# %bb.15:                               # %_ZL27truncOrZextVecInLoopWithVW8ImhEvPKT_PT0_i.exit.1
	ld.bu	$a0, $s7, 1
	ld.bu	$a4, $a5, 1
	bne	$a0, $a4, .LBB12_47
# %bb.16:                               # %_ZL27truncOrZextVecInLoopWithVW8ImhEvPKT_PT0_i.exit.2
	ld.bu	$a0, $s7, 2
	ld.bu	$a4, $a5, 2
	bne	$a0, $a4, .LBB12_48
# %bb.17:                               # %_ZL27truncOrZextVecInLoopWithVW8ImhEvPKT_PT0_i.exit.3
	ldx.bu	$a0, $s1, $a3
	ldx.bu	$a4, $s0, $a3
	move	$s2, $a3
	bne	$a0, $a4, .LBB12_58
# %bb.18:                               # %_ZL27truncOrZextVecInLoopWithVW8ImhEvPKT_PT0_i.exit.4
	ld.bu	$a0, $s7, 4
	ld.bu	$a3, $a5, 4
	bne	$a0, $a3, .LBB12_49
# %bb.19:                               # %_ZL27truncOrZextVecInLoopWithVW8ImhEvPKT_PT0_i.exit.5
	ld.bu	$a0, $s7, 5
	ld.bu	$a3, $a5, 5
	bne	$a0, $a3, .LBB12_50
# %bb.20:                               # %_ZL27truncOrZextVecInLoopWithVW8ImhEvPKT_PT0_i.exit.6
	ld.bu	$a0, $s7, 6
	ld.bu	$a3, $a5, 6
	bne	$a0, $a3, .LBB12_51
# %bb.21:                               # %_ZL27truncOrZextVecInLoopWithVW8ImhEvPKT_PT0_i.exit.7
	ldx.bu	$a0, $s1, $a2
	ldx.bu	$a3, $s0, $a2
	move	$s2, $a2
	bne	$a0, $a3, .LBB12_58
# %bb.22:                               # %_ZL27truncOrZextVecInLoopWithVW8ImhEvPKT_PT0_i.exit.8
	ld.bu	$a0, $s7, 8
	ld.bu	$a2, $a5, 8
	bne	$a0, $a2, .LBB12_52
# %bb.23:                               # %_ZL27truncOrZextVecInLoopWithVW8ImhEvPKT_PT0_i.exit.9
	ld.bu	$a0, $s7, 9
	ld.bu	$a2, $a5, 9
	bne	$a0, $a2, .LBB12_53
# %bb.24:                               # %_ZL27truncOrZextVecInLoopWithVW8ImhEvPKT_PT0_i.exit.10
	ld.bu	$a0, $s7, 10
	ld.bu	$a2, $a5, 10
	bne	$a0, $a2, .LBB12_54
# %bb.25:                               # %_ZL27truncOrZextVecInLoopWithVW8ImhEvPKT_PT0_i.exit.11
	ldx.bu	$a0, $s1, $a1
	ldx.bu	$a2, $s0, $a1
	move	$s2, $a1
	bne	$a0, $a2, .LBB12_58
# %bb.26:                               # %_ZL27truncOrZextVecInLoopWithVW8ImhEvPKT_PT0_i.exit.12
	ld.bu	$a0, $s7, 12
	ld.bu	$a1, $a5, 12
	bne	$a0, $a1, .LBB12_55
# %bb.27:                               # %_ZL27truncOrZextVecInLoopWithVW8ImhEvPKT_PT0_i.exit.13
	ld.bu	$a0, $s7, 13
	ld.bu	$a1, $a5, 13
	bne	$a0, $a1, .LBB12_56
# %bb.28:                               # %_ZL27truncOrZextVecInLoopWithVW8ImhEvPKT_PT0_i.exit.14
	ld.bu	$a0, $s7, 14
	ld.bu	$a1, $a5, 14
	bne	$a0, $a1, .LBB12_57
# %bb.29:                               # %_ZL27truncOrZextVecInLoopWithVW8ImhEvPKT_PT0_i.exit.15
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.w	$s2, $s6, 28
	ld.d	$s1, $s6, 16
.Ltmp267:
	move	$a0, $s6
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp268:
# %bb.30:                               # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s2, .LBB12_42
# %bb.31:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s1, .LBB12_42
# %bb.32:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s4
	addi.d	$a1, $fp, 128
	addi.d	$a2, $sp, 168
	ori	$a3, $s5, 2288
	ori	$a4, $s5, 2304
	ori	$a5, $s8, 1776
	ori	$a6, $s8, 1792
	.p2align	4, , 16
.LBB12_33:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_37 Depth 2
                                        #     Child Loop BB12_40 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a7, $sp, 168
	bgeu	$a7, $a0, .LBB12_36
# %bb.34:                               # %.lr.ph
                                        #   in Loop: Header=BB12_33 Depth=1
	add.d	$t0, $a7, $s3
	bgeu	$fp, $t0, .LBB12_36
# %bb.35:                               #   in Loop: Header=BB12_33 Depth=1
	move	$t1, $zero
	b	.LBB12_39
	.p2align	4, , 16
.LBB12_36:                              # %vector.body98.preheader
                                        #   in Loop: Header=BB12_33 Depth=1
	addi.d	$t0, $a7, 16
	move	$t1, $a1
	move	$t2, $a4
	.p2align	4, , 16
.LBB12_37:                              # %vector.body98
                                        #   Parent Loop BB12_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr0, $t1, -128
	xvld	$xr1, $t1, -96
	xvld	$xr2, $t1, -64
	xvld	$xr3, $t1, -32
	xvld	$xr4, $t1, 0
	xvld	$xr5, $t1, 32
	xvld	$xr6, $t1, 64
	xvld	$xr7, $t1, 96
	xvpickve2gr.d	$t3, $xr1, 3
	st.b	$t3, $sp, 87
	xvpickve2gr.d	$t3, $xr1, 2
	st.b	$t3, $sp, 86
	xvpickve2gr.d	$t3, $xr1, 1
	st.b	$t3, $sp, 85
	xvpickve2gr.d	$t3, $xr1, 0
	st.b	$t3, $sp, 84
	xvpickve2gr.d	$t3, $xr0, 3
	st.b	$t3, $sp, 83
	xvpickve2gr.d	$t3, $xr0, 2
	st.b	$t3, $sp, 82
	xvpickve2gr.d	$t3, $xr0, 1
	st.b	$t3, $sp, 81
	xvpickve2gr.d	$t3, $xr0, 0
	st.b	$t3, $sp, 80
	xvpickve2gr.d	$t3, $xr3, 3
	st.b	$t3, $sp, 71
	xvpickve2gr.d	$t3, $xr3, 2
	st.b	$t3, $sp, 70
	xvpickve2gr.d	$t3, $xr3, 1
	st.b	$t3, $sp, 69
	xvpickve2gr.d	$t3, $xr3, 0
	st.b	$t3, $sp, 68
	xvpickve2gr.d	$t3, $xr2, 3
	st.b	$t3, $sp, 67
	xvpickve2gr.d	$t3, $xr2, 2
	st.b	$t3, $sp, 66
	xvpickve2gr.d	$t3, $xr2, 1
	st.b	$t3, $sp, 65
	xvpickve2gr.d	$t3, $xr2, 0
	st.b	$t3, $sp, 64
	xvpickve2gr.d	$t3, $xr5, 3
	st.b	$t3, $sp, 39
	xvpickve2gr.d	$t3, $xr5, 2
	st.b	$t3, $sp, 38
	xvpickve2gr.d	$t3, $xr5, 1
	st.b	$t3, $sp, 37
	xvpickve2gr.d	$t3, $xr5, 0
	st.b	$t3, $sp, 36
	xvpickve2gr.d	$t3, $xr4, 3
	st.b	$t3, $sp, 35
	xvpickve2gr.d	$t3, $xr4, 2
	st.b	$t3, $sp, 34
	xvpickve2gr.d	$t3, $xr4, 1
	st.b	$t3, $sp, 33
	xvpickve2gr.d	$t3, $xr4, 0
	st.b	$t3, $sp, 32
	xvpickve2gr.d	$t3, $xr7, 3
	st.b	$t3, $sp, 55
	xvpickve2gr.d	$t3, $xr7, 2
	st.b	$t3, $sp, 54
	xvpickve2gr.d	$t3, $xr7, 1
	st.b	$t3, $sp, 53
	xvpickve2gr.d	$t3, $xr7, 0
	st.b	$t3, $sp, 52
	xvpickve2gr.d	$t3, $xr6, 3
	st.b	$t3, $sp, 51
	xvpickve2gr.d	$t3, $xr6, 2
	st.b	$t3, $sp, 50
	xvpickve2gr.d	$t3, $xr6, 1
	st.b	$t3, $sp, 49
	xvpickve2gr.d	$t3, $xr6, 0
	st.b	$t3, $sp, 48
	ld.d	$t3, $sp, 80
	ld.d	$t4, $sp, 64
	ld.d	$t5, $sp, 32
	xvinsgr2vr.d	$xr0, $t3, 0
	ld.d	$t3, $sp, 48
	xvinsgr2vr.d	$xr0, $t4, 1
	xvinsgr2vr.d	$xr0, $t5, 2
	add.d	$t4, $t0, $t2
	xvinsgr2vr.d	$xr0, $t3, 3
	xvstx	$xr0, $t4, $a5
	addi.d	$t2, $t2, 32
	addi.d	$t1, $t1, 256
	bnez	$t2, .LBB12_37
# %bb.38:                               #   in Loop: Header=BB12_33 Depth=1
	move	$t1, $a6
.LBB12_39:                              # %.lr.ph.i21.preheader
                                        #   in Loop: Header=BB12_33 Depth=1
	add.d	$t0, $t1, $a3
	add.d	$a7, $a7, $t1
	alsl.d	$t1, $t1, $fp, 3
	.p2align	4, , 16
.LBB12_40:                              # %.lr.ph.i21
                                        #   Parent Loop BB12_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$t2, $t1, 0
	st.b	$t2, $a7, 0
	addi.d	$t0, $t0, 1
	addi.d	$a7, $a7, 1
	addi.d	$t1, $t1, 8
	bnez	$t0, .LBB12_40
# %bb.41:                               # %_ZL27truncOrZextVecInLoopWithVW8ImhEvPKT_PT0_i.exit25
                                        #   in Loop: Header=BB12_33 Depth=1
	addi.d	$s1, $s1, -1
	bnez	$s1, .LBB12_33
.LBB12_42:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp269:
	move	$a0, $s6
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp270:
# %bb.43:                               # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit33
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 168
	beqz	$a0, .LBB12_45
# %bb.44:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i35
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB12_45:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit39
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 216                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 224                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 232                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 240                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 248                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 256                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 264                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 272                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 280                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 288
	ret
.LBB12_46:                              # %vector.early.exit
	pcalau12i	$a1, %pc_hi20(.LCPI12_1)
	xvld	$xr1, $a1, %pc_lo12(.LCPI12_1)
	xvand.v	$xr0, $xr0, $xr1
	xvpermi.q	$xr1, $xr0, 1
	vmax.bu	$vr0, $vr0, $vr1
	vpickve2gr.b	$a1, $vr0, 0
	andi	$a1, $a1, 48
	vpickve2gr.b	$a2, $vr0, 1
	andi	$a2, $a2, 31
	sltu	$a3, $a2, $a1
	masknez	$a2, $a2, $a3
	maskeqz	$a1, $a1, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 2
	andi	$a2, $a2, 30
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 3
	andi	$a2, $a2, 29
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 4
	andi	$a2, $a2, 28
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 5
	andi	$a2, $a2, 27
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 6
	andi	$a2, $a2, 26
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 7
	andi	$a2, $a2, 25
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 8
	andi	$a2, $a2, 24
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 9
	andi	$a2, $a2, 23
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 10
	andi	$a2, $a2, 22
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 11
	andi	$a2, $a2, 21
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 12
	andi	$a2, $a2, 20
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 13
	andi	$a2, $a2, 19
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 14
	andi	$a2, $a2, 18
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 15
	andi	$a2, $a2, 17
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	ori	$a2, $zero, 32
	sub.d	$a1, $a2, $a1
	andi	$a1, $a1, 255
	add.d	$a0, $a1, $a0
	addi.d	$s2, $a0, -32
	b	.LBB12_58
.LBB12_47:
	ori	$s2, $s8, 1794
	b	.LBB12_58
.LBB12_48:
	ori	$s2, $s8, 1795
	b	.LBB12_58
.LBB12_49:
	ori	$s2, $s8, 1797
	b	.LBB12_58
.LBB12_50:
	ori	$s2, $s8, 1798
	b	.LBB12_58
.LBB12_51:
	ori	$s2, $s8, 1799
	b	.LBB12_58
.LBB12_52:
	ori	$s2, $s8, 1801
	b	.LBB12_58
.LBB12_53:
	ori	$s2, $s8, 1802
	b	.LBB12_58
.LBB12_54:
	ori	$s2, $s8, 1803
	b	.LBB12_58
.LBB12_55:
	ori	$s2, $s8, 1805
	b	.LBB12_58
.LBB12_56:
	ori	$s2, $s8, 1806
	b	.LBB12_58
.LBB12_57:
	ori	$s2, $s8, 1807
.LBB12_58:                              # %.loopexit
.Ltmp272:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp273:
# %bb.59:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	slli.d	$a0, $s2, 3
	ldx.d	$a1, $fp, $a0
.Ltmp274:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp275:
# %bb.60:                               # %_ZNSolsEm.exit
.Ltmp276:
	move	$s3, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp277:
# %bb.61:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.bu	$a1, $s1, $s2
.Ltmp278:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp279:
# %bb.62:
.Ltmp280:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp281:
# %bb.63:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit20
	ldx.bu	$a1, $s0, $s2
.Ltmp282:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp283:
# %bb.64:
.Ltmp284:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp285:
# %bb.65:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB12_66:                              # %.thread
.Ltmp263:
	move	$s2, $a0
	b	.LBB12_72
.LBB12_67:
.Ltmp260:
	move	$s2, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB12_68:
.Ltmp271:
	b	.LBB12_71
.LBB12_69:
.Ltmp286:
	b	.LBB12_71
.LBB12_70:
.Ltmp266:
.LBB12_71:
	move	$s2, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s1, $sp, 168
	beqz	$s1, .LBB12_73
.LBB12_72:                              # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i28
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB12_73:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end12:
	.size	_Z60benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint8_t_RN9benchmark5StateE, .Lfunc_end12-_Z60benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint8_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table12:
.Lexception12:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end12-.Lcst_begin12
.Lcst_begin12:
	.uleb128 .Lfunc_begin12-.Lfunc_begin12  # >> Call Site 1 <<
	.uleb128 .Ltmp258-.Lfunc_begin12        #   Call between .Lfunc_begin12 and .Ltmp258
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp258-.Lfunc_begin12        # >> Call Site 2 <<
	.uleb128 .Ltmp259-.Ltmp258              #   Call between .Ltmp258 and .Ltmp259
	.uleb128 .Ltmp260-.Lfunc_begin12        #     jumps to .Ltmp260
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp261-.Lfunc_begin12        # >> Call Site 3 <<
	.uleb128 .Ltmp262-.Ltmp261              #   Call between .Ltmp261 and .Ltmp262
	.uleb128 .Ltmp263-.Lfunc_begin12        #     jumps to .Ltmp263
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp264-.Lfunc_begin12        # >> Call Site 4 <<
	.uleb128 .Ltmp265-.Ltmp264              #   Call between .Ltmp264 and .Ltmp265
	.uleb128 .Ltmp266-.Lfunc_begin12        #     jumps to .Ltmp266
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp267-.Lfunc_begin12        # >> Call Site 5 <<
	.uleb128 .Ltmp270-.Ltmp267              #   Call between .Ltmp267 and .Ltmp270
	.uleb128 .Ltmp271-.Lfunc_begin12        #     jumps to .Ltmp271
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp270-.Lfunc_begin12        # >> Call Site 6 <<
	.uleb128 .Ltmp272-.Ltmp270              #   Call between .Ltmp270 and .Ltmp272
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp272-.Lfunc_begin12        # >> Call Site 7 <<
	.uleb128 .Ltmp285-.Ltmp272              #   Call between .Ltmp272 and .Ltmp285
	.uleb128 .Ltmp286-.Lfunc_begin12        #     jumps to .Ltmp286
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp285-.Lfunc_begin12        # >> Call Site 8 <<
	.uleb128 .Lfunc_end12-.Ltmp285          #   Call between .Ltmp285 and .Lfunc_end12
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end12:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z61benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint8_t_RN9benchmark5StateE
.LCPI13_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5, 0x0
.LCPI13_1:
	.byte	32                              # 0x20
	.byte	31                              # 0x1f
	.byte	30                              # 0x1e
	.byte	29                              # 0x1d
	.byte	28                              # 0x1c
	.byte	27                              # 0x1b
	.byte	26                              # 0x1a
	.byte	25                              # 0x19
	.byte	24                              # 0x18
	.byte	23                              # 0x17
	.byte	22                              # 0x16
	.byte	21                              # 0x15
	.byte	20                              # 0x14
	.byte	19                              # 0x13
	.byte	18                              # 0x12
	.byte	17                              # 0x11
	.byte	16                              # 0x10
	.byte	15                              # 0xf
	.byte	14                              # 0xe
	.byte	13                              # 0xd
	.byte	12                              # 0xc
	.byte	11                              # 0xb
	.byte	10                              # 0xa
	.byte	9                               # 0x9
	.byte	8                               # 0x8
	.byte	7                               # 0x7
	.byte	6                               # 0x6
	.byte	5                               # 0x5
	.byte	4                               # 0x4
	.byte	3                               # 0x3
	.byte	2                               # 0x2
	.byte	1                               # 0x1
	.text
	.globl	_Z61benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint8_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z61benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint8_t_RN9benchmark5StateE,@function
_Z61benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint8_t_RN9benchmark5StateE: # @_Z61benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint8_t_RN9benchmark5StateE
.Lfunc_begin13:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception13
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s0, $a0
	lu12i.w	$s1, 19
	ori	$s4, $s1, 2176
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp287:
	lu12i.w	$s5, 2
	ori	$s2, $s5, 1808
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp288:
# %bb.1:                                # %.split
	move	$s3, $a0
	st.d	$s0, $sp, 0                     # 8-byte Folded Spill
	st.d	$a0, $sp, 24
.Ltmp290:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp291:
# %bb.2:                                # %.split161
	move	$s0, $a0
	move	$s8, $zero
	ori	$s6, $s1, 2048
	add.d	$s1, $fp, $s6
	pcalau12i	$a0, %pc_hi20(.LCPI13_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI13_0)
	ori	$a0, $s5, 1793
	add.d	$s7, $s3, $a0
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	add.d	$a0, $s0, $a0
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	vst	$vr0, $sp, 32
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB13_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp293:
	addi.d	$a0, $sp, 32
	addi.d	$a2, $sp, 32
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp294:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB13_3 Depth=1
	stx.d	$a0, $fp, $s8
	addi.d	$s8, $s8, 8
	bne	$s8, $s4, .LBB13_3
# %bb.5:                                # %vector.ph
	addi.d	$a0, $fp, 8
	lu12i.w	$s8, -3
	ori	$a1, $s8, 2288
	lu12i.w	$t0, 2
	ori	$a2, $t0, 1809
	.p2align	4, , 16
.LBB13_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a3, $a0, -8
	ld.d	$a4, $a0, 0
	add.d	$a5, $s0, $a1
	stx.b	$a3, $a5, $s2
	stx.b	$a4, $a5, $a2
	addi.d	$a1, $a1, 2
	addi.d	$a0, $a0, 16
	bnez	$a1, .LBB13_6
# %bb.7:                                # %vector.body78.preheader
	move	$a0, $zero
	addi.d	$a1, $s3, 32
	.p2align	4, , 16
.LBB13_8:                               # %vector.body78
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a0
	xvld	$xr6, $a2, 96
	xvld	$xr13, $a2, 64
	xvld	$xr14, $a2, 32
	xvldx	$xr15, $fp, $a0
	xvld	$xr10, $a2, 224
	xvld	$xr11, $a2, 192
	xvld	$xr12, $a2, 160
	xvld	$xr16, $a2, 128
	xvld	$xr5, $a2, 352
	xvld	$xr7, $a2, 320
	xvld	$xr8, $a2, 288
	xvld	$xr9, $a2, 256
	xvld	$xr0, $a2, 480
	xvld	$xr2, $a2, 448
	xvld	$xr3, $a2, 416
	xvld	$xr4, $a2, 384
	xvpickve2gr.d	$a2, $xr15, 0
	vinsgr2vr.b	$vr1, $a2, 0
	xvpickve2gr.d	$a2, $xr15, 1
	vinsgr2vr.b	$vr1, $a2, 1
	xvpickve2gr.d	$a2, $xr15, 2
	vinsgr2vr.b	$vr1, $a2, 2
	xvpickve2gr.d	$a2, $xr15, 3
	vinsgr2vr.b	$vr1, $a2, 3
	xvpickve2gr.d	$a2, $xr14, 0
	vinsgr2vr.b	$vr1, $a2, 4
	xvpickve2gr.d	$a2, $xr14, 1
	vinsgr2vr.b	$vr1, $a2, 5
	xvpickve2gr.d	$a2, $xr14, 2
	vinsgr2vr.b	$vr1, $a2, 6
	xvpickve2gr.d	$a2, $xr14, 3
	vinsgr2vr.b	$vr1, $a2, 7
	xvpickve2gr.d	$a2, $xr13, 0
	vinsgr2vr.b	$vr1, $a2, 8
	xvpickve2gr.d	$a2, $xr13, 1
	vinsgr2vr.b	$vr1, $a2, 9
	xvpickve2gr.d	$a2, $xr13, 2
	vinsgr2vr.b	$vr1, $a2, 10
	xvpickve2gr.d	$a2, $xr13, 3
	vinsgr2vr.b	$vr1, $a2, 11
	xvpickve2gr.d	$a2, $xr6, 0
	vinsgr2vr.b	$vr1, $a2, 12
	xvpickve2gr.d	$a2, $xr6, 1
	vinsgr2vr.b	$vr1, $a2, 13
	xvpickve2gr.d	$a2, $xr6, 2
	vinsgr2vr.b	$vr1, $a2, 14
	xvpickve2gr.d	$a2, $xr6, 3
	vinsgr2vr.b	$vr1, $a2, 15
	xvpickve2gr.d	$a2, $xr16, 0
	vinsgr2vr.b	$vr6, $a2, 0
	xvpickve2gr.d	$a2, $xr16, 1
	vinsgr2vr.b	$vr6, $a2, 1
	xvpickve2gr.d	$a2, $xr16, 2
	vinsgr2vr.b	$vr6, $a2, 2
	xvpickve2gr.d	$a2, $xr16, 3
	vinsgr2vr.b	$vr6, $a2, 3
	xvpickve2gr.d	$a2, $xr12, 0
	vinsgr2vr.b	$vr6, $a2, 4
	xvpickve2gr.d	$a2, $xr12, 1
	vinsgr2vr.b	$vr6, $a2, 5
	xvpickve2gr.d	$a2, $xr12, 2
	vinsgr2vr.b	$vr6, $a2, 6
	xvpickve2gr.d	$a2, $xr12, 3
	vinsgr2vr.b	$vr6, $a2, 7
	xvpickve2gr.d	$a2, $xr11, 0
	vinsgr2vr.b	$vr6, $a2, 8
	xvpickve2gr.d	$a2, $xr11, 1
	vinsgr2vr.b	$vr6, $a2, 9
	xvpickve2gr.d	$a2, $xr11, 2
	vinsgr2vr.b	$vr6, $a2, 10
	xvpickve2gr.d	$a2, $xr11, 3
	vinsgr2vr.b	$vr6, $a2, 11
	xvpickve2gr.d	$a2, $xr10, 0
	vinsgr2vr.b	$vr6, $a2, 12
	xvpickve2gr.d	$a2, $xr10, 1
	vinsgr2vr.b	$vr6, $a2, 13
	xvpickve2gr.d	$a2, $xr10, 2
	vinsgr2vr.b	$vr6, $a2, 14
	xvpickve2gr.d	$a2, $xr10, 3
	vinsgr2vr.b	$vr6, $a2, 15
	xvpickve2gr.d	$a2, $xr9, 0
	vinsgr2vr.b	$vr10, $a2, 0
	xvpickve2gr.d	$a2, $xr9, 1
	vinsgr2vr.b	$vr10, $a2, 1
	xvpickve2gr.d	$a2, $xr9, 2
	vinsgr2vr.b	$vr10, $a2, 2
	xvpickve2gr.d	$a2, $xr9, 3
	vinsgr2vr.b	$vr10, $a2, 3
	xvpickve2gr.d	$a2, $xr8, 0
	vinsgr2vr.b	$vr10, $a2, 4
	xvpickve2gr.d	$a2, $xr8, 1
	vinsgr2vr.b	$vr10, $a2, 5
	xvpickve2gr.d	$a2, $xr8, 2
	vinsgr2vr.b	$vr10, $a2, 6
	xvpickve2gr.d	$a2, $xr8, 3
	vinsgr2vr.b	$vr10, $a2, 7
	xvpickve2gr.d	$a2, $xr7, 0
	vinsgr2vr.b	$vr10, $a2, 8
	xvpickve2gr.d	$a2, $xr7, 1
	vinsgr2vr.b	$vr10, $a2, 9
	xvpickve2gr.d	$a2, $xr7, 2
	vinsgr2vr.b	$vr10, $a2, 10
	xvpickve2gr.d	$a2, $xr7, 3
	vinsgr2vr.b	$vr10, $a2, 11
	xvpickve2gr.d	$a2, $xr5, 0
	vinsgr2vr.b	$vr10, $a2, 12
	xvpickve2gr.d	$a2, $xr5, 1
	vinsgr2vr.b	$vr10, $a2, 13
	xvpickve2gr.d	$a2, $xr5, 2
	vinsgr2vr.b	$vr10, $a2, 14
	xvpickve2gr.d	$a2, $xr5, 3
	vinsgr2vr.b	$vr10, $a2, 15
	xvpickve2gr.d	$a2, $xr4, 0
	vinsgr2vr.b	$vr5, $a2, 0
	xvpickve2gr.d	$a2, $xr4, 1
	vinsgr2vr.b	$vr5, $a2, 1
	xvpickve2gr.d	$a2, $xr4, 2
	vinsgr2vr.b	$vr5, $a2, 2
	xvpickve2gr.d	$a2, $xr4, 3
	vinsgr2vr.b	$vr5, $a2, 3
	xvpickve2gr.d	$a2, $xr3, 0
	vinsgr2vr.b	$vr5, $a2, 4
	xvpickve2gr.d	$a2, $xr3, 1
	vinsgr2vr.b	$vr5, $a2, 5
	xvpickve2gr.d	$a2, $xr3, 2
	vinsgr2vr.b	$vr5, $a2, 6
	xvpickve2gr.d	$a2, $xr3, 3
	vinsgr2vr.b	$vr5, $a2, 7
	xvpickve2gr.d	$a2, $xr2, 0
	vinsgr2vr.b	$vr5, $a2, 8
	xvpickve2gr.d	$a2, $xr2, 1
	vinsgr2vr.b	$vr5, $a2, 9
	xvpickve2gr.d	$a2, $xr2, 2
	vinsgr2vr.b	$vr5, $a2, 10
	xvpickve2gr.d	$a2, $xr2, 3
	vinsgr2vr.b	$vr5, $a2, 11
	xvpickve2gr.d	$a2, $xr0, 0
	vinsgr2vr.b	$vr5, $a2, 12
	xvpickve2gr.d	$a2, $xr0, 1
	vinsgr2vr.b	$vr5, $a2, 13
	xvpickve2gr.d	$a2, $xr0, 2
	vinsgr2vr.b	$vr5, $a2, 14
	xvpickve2gr.d	$a2, $xr0, 3
	vinsgr2vr.b	$vr5, $a2, 15
	vst	$vr1, $a1, -32
	vst	$vr6, $a1, -16
	vst	$vr10, $a1, 0
	vst	$vr5, $a1, 16
	addi.d	$a0, $a0, 512
	addi.d	$a1, $a1, 64
	bne	$a0, $s6, .LBB13_8
# %bb.9:                                # %.lr.ph.i
	move	$a0, $zero
	ld.d	$a1, $s1, 0
	ori	$s6, $t0, 1792
	ld.d	$a2, $s1, 8
	ld.d	$a3, $s1, 16
	ld.d	$a4, $s1, 24
	stx.b	$a1, $s3, $s6
	st.b	$a2, $s7, 0
	st.b	$a3, $s7, 1
	st.b	$a4, $s7, 2
	ld.d	$a1, $s1, 32
	ori	$a3, $t0, 1796
	ld.d	$a2, $s1, 40
	ld.d	$a4, $s1, 48
	ld.d	$a5, $s1, 56
	stx.b	$a1, $s3, $a3
	st.b	$a2, $s7, 4
	st.b	$a4, $s7, 5
	st.b	$a5, $s7, 6
	ld.d	$a1, $s1, 64
	ori	$a2, $t0, 1800
	ld.d	$a4, $s1, 72
	ld.d	$a5, $s1, 80
	ld.d	$a6, $s1, 88
	stx.b	$a1, $s3, $a2
	st.b	$a4, $s7, 8
	st.b	$a5, $s7, 9
	st.b	$a6, $s7, 10
	ld.d	$a4, $s1, 96
	ori	$a1, $t0, 1804
	ld.d	$a5, $s1, 104
	ld.d	$a6, $s1, 112
	ld.d	$a7, $s1, 120
	stx.b	$a4, $s3, $a1
	st.b	$a5, $s7, 12
	st.b	$a6, $s7, 13
	st.b	$a7, $s7, 14
	ori	$s5, $t0, 1760
	.p2align	4, , 16
.LBB13_10:                              # %vector.body88
                                        # =>This Inner Loop Header: Depth=1
	move	$a4, $a0
	xvldx	$xr0, $s3, $a0
	xvldx	$xr1, $s0, $a0
	xvseq.b	$xr0, $xr0, $xr1
	xvxori.b	$xr0, $xr0, 255
	xvmskltz.b	$xr1, $xr0
	xvpickve2gr.wu	$a0, $xr1, 0
	xvpickve2gr.wu	$a5, $xr1, 4
	bstrins.d	$a0, $a5, 31, 16
	addi.w	$a5, $a0, 0
	addi.d	$a0, $a4, 32
	bnez	$a5, .LBB13_12
# %bb.11:                               # %vector.body88
                                        #   in Loop: Header=BB13_10 Depth=1
	bne	$a4, $s5, .LBB13_10
.LBB13_12:                              # %middle.split
	ld.d	$a6, $sp, 16                    # 8-byte Folded Reload
	bnez	$a5, .LBB13_46
# %bb.13:                               # %_ZL28truncOrZextVecInLoopWithVW16ImhEvPKT_PT0_i.exit.preheader
	ldx.bu	$a0, $s3, $s6
	ldx.bu	$a4, $s0, $s6
	bne	$a0, $a4, .LBB13_58
# %bb.14:                               # %_ZL28truncOrZextVecInLoopWithVW16ImhEvPKT_PT0_i.exit
	ld.bu	$a0, $s7, 0
	ld.bu	$a4, $a6, 0
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	bne	$a0, $a4, .LBB13_58
# %bb.15:                               # %_ZL28truncOrZextVecInLoopWithVW16ImhEvPKT_PT0_i.exit.1
	ld.bu	$a0, $s7, 1
	ld.bu	$a4, $a6, 1
	bne	$a0, $a4, .LBB13_47
# %bb.16:                               # %_ZL28truncOrZextVecInLoopWithVW16ImhEvPKT_PT0_i.exit.2
	ld.bu	$a0, $s7, 2
	ld.bu	$a4, $a6, 2
	bne	$a0, $a4, .LBB13_48
# %bb.17:                               # %_ZL28truncOrZextVecInLoopWithVW16ImhEvPKT_PT0_i.exit.3
	ldx.bu	$a0, $s3, $a3
	ldx.bu	$a4, $s0, $a3
	move	$s6, $a3
	bne	$a0, $a4, .LBB13_58
# %bb.18:                               # %_ZL28truncOrZextVecInLoopWithVW16ImhEvPKT_PT0_i.exit.4
	ld.bu	$a0, $s7, 4
	ld.bu	$a3, $a6, 4
	bne	$a0, $a3, .LBB13_49
# %bb.19:                               # %_ZL28truncOrZextVecInLoopWithVW16ImhEvPKT_PT0_i.exit.5
	ld.bu	$a0, $s7, 5
	ld.bu	$a3, $a6, 5
	bne	$a0, $a3, .LBB13_50
# %bb.20:                               # %_ZL28truncOrZextVecInLoopWithVW16ImhEvPKT_PT0_i.exit.6
	ld.bu	$a0, $s7, 6
	ld.bu	$a3, $a6, 6
	bne	$a0, $a3, .LBB13_51
# %bb.21:                               # %_ZL28truncOrZextVecInLoopWithVW16ImhEvPKT_PT0_i.exit.7
	ldx.bu	$a0, $s3, $a2
	ldx.bu	$a3, $s0, $a2
	move	$s6, $a2
	bne	$a0, $a3, .LBB13_58
# %bb.22:                               # %_ZL28truncOrZextVecInLoopWithVW16ImhEvPKT_PT0_i.exit.8
	ld.bu	$a0, $s7, 8
	ld.bu	$a2, $a6, 8
	bne	$a0, $a2, .LBB13_52
# %bb.23:                               # %_ZL28truncOrZextVecInLoopWithVW16ImhEvPKT_PT0_i.exit.9
	ld.bu	$a0, $s7, 9
	ld.bu	$a2, $a6, 9
	bne	$a0, $a2, .LBB13_53
# %bb.24:                               # %_ZL28truncOrZextVecInLoopWithVW16ImhEvPKT_PT0_i.exit.10
	ld.bu	$a0, $s7, 10
	ld.bu	$a2, $a6, 10
	bne	$a0, $a2, .LBB13_54
# %bb.25:                               # %_ZL28truncOrZextVecInLoopWithVW16ImhEvPKT_PT0_i.exit.11
	ldx.bu	$a0, $s3, $a1
	ldx.bu	$a2, $s0, $a1
	move	$s6, $a1
	bne	$a0, $a2, .LBB13_58
# %bb.26:                               # %_ZL28truncOrZextVecInLoopWithVW16ImhEvPKT_PT0_i.exit.12
	ld.bu	$a0, $s7, 12
	ld.bu	$a1, $a6, 12
	bne	$a0, $a1, .LBB13_55
# %bb.27:                               # %_ZL28truncOrZextVecInLoopWithVW16ImhEvPKT_PT0_i.exit.13
	ld.bu	$a0, $s7, 13
	ld.bu	$a1, $a6, 13
	bne	$a0, $a1, .LBB13_56
# %bb.28:                               # %_ZL28truncOrZextVecInLoopWithVW16ImhEvPKT_PT0_i.exit.14
	ld.bu	$a0, $s7, 14
	ld.bu	$a1, $a6, 14
	bne	$a0, $a1, .LBB13_57
# %bb.29:                               # %_ZL28truncOrZextVecInLoopWithVW16ImhEvPKT_PT0_i.exit.15
	ld.d	$s6, $sp, 0                     # 8-byte Folded Reload
	ld.w	$s3, $s6, 28
	ld.d	$s1, $s6, 16
.Ltmp296:
	move	$a0, $s6
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp297:
# %bb.30:                               # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s3, .LBB13_42
# %bb.31:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s1, .LBB13_42
# %bb.32:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s4
	addi.d	$a1, $fp, 256
	addi.d	$a2, $sp, 24
	ori	$a3, $s8, 2288
	ori	$a4, $s8, 2304
	lu12i.w	$a6, 2
	ori	$a5, $a6, 1776
	ori	$a6, $a6, 1792
	.p2align	4, , 16
.LBB13_33:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_37 Depth 2
                                        #     Child Loop BB13_40 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a7, $sp, 24
	bgeu	$a7, $a0, .LBB13_36
# %bb.34:                               # %.lr.ph
                                        #   in Loop: Header=BB13_33 Depth=1
	add.d	$t0, $a7, $s2
	bgeu	$fp, $t0, .LBB13_36
# %bb.35:                               #   in Loop: Header=BB13_33 Depth=1
	move	$t1, $zero
	b	.LBB13_39
	.p2align	4, , 16
.LBB13_36:                              # %vector.body98.preheader
                                        #   in Loop: Header=BB13_33 Depth=1
	addi.d	$t0, $a7, 32
	move	$t1, $a1
	move	$t2, $a4
	.p2align	4, , 16
.LBB13_37:                              # %vector.body98
                                        #   Parent Loop BB13_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr6, $t1, -160
	xvld	$xr13, $t1, -192
	xvld	$xr14, $t1, -224
	xvld	$xr15, $t1, -256
	xvld	$xr10, $t1, -32
	xvld	$xr11, $t1, -64
	xvld	$xr12, $t1, -96
	xvld	$xr16, $t1, -128
	xvld	$xr5, $t1, 96
	xvld	$xr7, $t1, 64
	xvld	$xr8, $t1, 32
	xvld	$xr9, $t1, 0
	xvld	$xr0, $t1, 224
	xvld	$xr2, $t1, 192
	xvld	$xr3, $t1, 160
	xvld	$xr4, $t1, 128
	xvpickve2gr.d	$t3, $xr15, 0
	vinsgr2vr.b	$vr1, $t3, 0
	xvpickve2gr.d	$t3, $xr15, 1
	vinsgr2vr.b	$vr1, $t3, 1
	xvpickve2gr.d	$t3, $xr15, 2
	vinsgr2vr.b	$vr1, $t3, 2
	xvpickve2gr.d	$t3, $xr15, 3
	vinsgr2vr.b	$vr1, $t3, 3
	xvpickve2gr.d	$t3, $xr14, 0
	vinsgr2vr.b	$vr1, $t3, 4
	xvpickve2gr.d	$t3, $xr14, 1
	vinsgr2vr.b	$vr1, $t3, 5
	xvpickve2gr.d	$t3, $xr14, 2
	vinsgr2vr.b	$vr1, $t3, 6
	xvpickve2gr.d	$t3, $xr14, 3
	vinsgr2vr.b	$vr1, $t3, 7
	xvpickve2gr.d	$t3, $xr13, 0
	vinsgr2vr.b	$vr1, $t3, 8
	xvpickve2gr.d	$t3, $xr13, 1
	vinsgr2vr.b	$vr1, $t3, 9
	xvpickve2gr.d	$t3, $xr13, 2
	vinsgr2vr.b	$vr1, $t3, 10
	xvpickve2gr.d	$t3, $xr13, 3
	vinsgr2vr.b	$vr1, $t3, 11
	xvpickve2gr.d	$t3, $xr6, 0
	vinsgr2vr.b	$vr1, $t3, 12
	xvpickve2gr.d	$t3, $xr6, 1
	vinsgr2vr.b	$vr1, $t3, 13
	xvpickve2gr.d	$t3, $xr6, 2
	vinsgr2vr.b	$vr1, $t3, 14
	xvpickve2gr.d	$t3, $xr6, 3
	vinsgr2vr.b	$vr1, $t3, 15
	xvpickve2gr.d	$t3, $xr16, 0
	vinsgr2vr.b	$vr6, $t3, 0
	xvpickve2gr.d	$t3, $xr16, 1
	vinsgr2vr.b	$vr6, $t3, 1
	xvpickve2gr.d	$t3, $xr16, 2
	vinsgr2vr.b	$vr6, $t3, 2
	xvpickve2gr.d	$t3, $xr16, 3
	vinsgr2vr.b	$vr6, $t3, 3
	xvpickve2gr.d	$t3, $xr12, 0
	vinsgr2vr.b	$vr6, $t3, 4
	xvpickve2gr.d	$t3, $xr12, 1
	vinsgr2vr.b	$vr6, $t3, 5
	xvpickve2gr.d	$t3, $xr12, 2
	vinsgr2vr.b	$vr6, $t3, 6
	xvpickve2gr.d	$t3, $xr12, 3
	vinsgr2vr.b	$vr6, $t3, 7
	xvpickve2gr.d	$t3, $xr11, 0
	vinsgr2vr.b	$vr6, $t3, 8
	xvpickve2gr.d	$t3, $xr11, 1
	vinsgr2vr.b	$vr6, $t3, 9
	xvpickve2gr.d	$t3, $xr11, 2
	vinsgr2vr.b	$vr6, $t3, 10
	xvpickve2gr.d	$t3, $xr11, 3
	vinsgr2vr.b	$vr6, $t3, 11
	xvpickve2gr.d	$t3, $xr10, 0
	vinsgr2vr.b	$vr6, $t3, 12
	xvpickve2gr.d	$t3, $xr10, 1
	vinsgr2vr.b	$vr6, $t3, 13
	xvpickve2gr.d	$t3, $xr10, 2
	vinsgr2vr.b	$vr6, $t3, 14
	xvpickve2gr.d	$t3, $xr10, 3
	vinsgr2vr.b	$vr6, $t3, 15
	xvpickve2gr.d	$t3, $xr9, 0
	vinsgr2vr.b	$vr10, $t3, 0
	xvpickve2gr.d	$t3, $xr9, 1
	vinsgr2vr.b	$vr10, $t3, 1
	xvpickve2gr.d	$t3, $xr9, 2
	vinsgr2vr.b	$vr10, $t3, 2
	xvpickve2gr.d	$t3, $xr9, 3
	vinsgr2vr.b	$vr10, $t3, 3
	xvpickve2gr.d	$t3, $xr8, 0
	vinsgr2vr.b	$vr10, $t3, 4
	xvpickve2gr.d	$t3, $xr8, 1
	vinsgr2vr.b	$vr10, $t3, 5
	xvpickve2gr.d	$t3, $xr8, 2
	vinsgr2vr.b	$vr10, $t3, 6
	xvpickve2gr.d	$t3, $xr8, 3
	vinsgr2vr.b	$vr10, $t3, 7
	xvpickve2gr.d	$t3, $xr7, 0
	vinsgr2vr.b	$vr10, $t3, 8
	xvpickve2gr.d	$t3, $xr7, 1
	vinsgr2vr.b	$vr10, $t3, 9
	xvpickve2gr.d	$t3, $xr7, 2
	vinsgr2vr.b	$vr10, $t3, 10
	xvpickve2gr.d	$t3, $xr7, 3
	vinsgr2vr.b	$vr10, $t3, 11
	xvpickve2gr.d	$t3, $xr5, 0
	vinsgr2vr.b	$vr10, $t3, 12
	xvpickve2gr.d	$t3, $xr5, 1
	vinsgr2vr.b	$vr10, $t3, 13
	xvpickve2gr.d	$t3, $xr5, 2
	vinsgr2vr.b	$vr10, $t3, 14
	xvpickve2gr.d	$t3, $xr5, 3
	vinsgr2vr.b	$vr10, $t3, 15
	xvpickve2gr.d	$t3, $xr4, 0
	vinsgr2vr.b	$vr5, $t3, 0
	xvpickve2gr.d	$t3, $xr4, 1
	vinsgr2vr.b	$vr5, $t3, 1
	xvpickve2gr.d	$t3, $xr4, 2
	vinsgr2vr.b	$vr5, $t3, 2
	xvpickve2gr.d	$t3, $xr4, 3
	vinsgr2vr.b	$vr5, $t3, 3
	xvpickve2gr.d	$t3, $xr3, 0
	vinsgr2vr.b	$vr5, $t3, 4
	xvpickve2gr.d	$t3, $xr3, 1
	vinsgr2vr.b	$vr5, $t3, 5
	xvpickve2gr.d	$t3, $xr3, 2
	vinsgr2vr.b	$vr5, $t3, 6
	xvpickve2gr.d	$t3, $xr3, 3
	vinsgr2vr.b	$vr5, $t3, 7
	xvpickve2gr.d	$t3, $xr2, 0
	vinsgr2vr.b	$vr5, $t3, 8
	xvpickve2gr.d	$t3, $xr2, 1
	vinsgr2vr.b	$vr5, $t3, 9
	xvpickve2gr.d	$t3, $xr2, 2
	vinsgr2vr.b	$vr5, $t3, 10
	xvpickve2gr.d	$t3, $xr2, 3
	vinsgr2vr.b	$vr5, $t3, 11
	xvpickve2gr.d	$t3, $xr0, 0
	vinsgr2vr.b	$vr5, $t3, 12
	xvpickve2gr.d	$t3, $xr0, 1
	vinsgr2vr.b	$vr5, $t3, 13
	xvpickve2gr.d	$t3, $xr0, 2
	vinsgr2vr.b	$vr5, $t3, 14
	xvpickve2gr.d	$t3, $xr0, 3
	vinsgr2vr.b	$vr5, $t3, 15
	add.d	$t3, $t0, $t2
	vstx	$vr1, $t3, $s5
	vstx	$vr6, $t3, $a5
	vstx	$vr10, $t3, $a6
	vstx	$vr5, $t3, $s2
	addi.d	$t2, $t2, 64
	addi.d	$t1, $t1, 512
	bnez	$t2, .LBB13_37
# %bb.38:                               #   in Loop: Header=BB13_33 Depth=1
	move	$t1, $a6
.LBB13_39:                              # %.lr.ph.i21.preheader
                                        #   in Loop: Header=BB13_33 Depth=1
	add.d	$t0, $t1, $a3
	add.d	$a7, $a7, $t1
	alsl.d	$t1, $t1, $fp, 3
	.p2align	4, , 16
.LBB13_40:                              # %.lr.ph.i21
                                        #   Parent Loop BB13_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$t2, $t1, 0
	st.b	$t2, $a7, 0
	addi.d	$t0, $t0, 1
	addi.d	$a7, $a7, 1
	addi.d	$t1, $t1, 8
	bnez	$t0, .LBB13_40
# %bb.41:                               # %_ZL28truncOrZextVecInLoopWithVW16ImhEvPKT_PT0_i.exit25
                                        #   in Loop: Header=BB13_33 Depth=1
	addi.d	$s1, $s1, -1
	bnez	$s1, .LBB13_33
.LBB13_42:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp298:
	move	$a0, $s6
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp299:
# %bb.43:                               # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit33
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 24
	beqz	$a0, .LBB13_45
# %bb.44:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i35
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB13_45:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit39
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB13_46:                              # %vector.early.exit
	pcalau12i	$a1, %pc_hi20(.LCPI13_1)
	xvld	$xr1, $a1, %pc_lo12(.LCPI13_1)
	xvand.v	$xr0, $xr0, $xr1
	xvpermi.q	$xr1, $xr0, 1
	vmax.bu	$vr0, $vr0, $vr1
	vpickve2gr.b	$a1, $vr0, 0
	andi	$a1, $a1, 48
	vpickve2gr.b	$a2, $vr0, 1
	andi	$a2, $a2, 31
	sltu	$a3, $a2, $a1
	masknez	$a2, $a2, $a3
	maskeqz	$a1, $a1, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 2
	andi	$a2, $a2, 30
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 3
	andi	$a2, $a2, 29
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 4
	andi	$a2, $a2, 28
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 5
	andi	$a2, $a2, 27
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 6
	andi	$a2, $a2, 26
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 7
	andi	$a2, $a2, 25
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 8
	andi	$a2, $a2, 24
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 9
	andi	$a2, $a2, 23
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 10
	andi	$a2, $a2, 22
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 11
	andi	$a2, $a2, 21
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 12
	andi	$a2, $a2, 20
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 13
	andi	$a2, $a2, 19
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 14
	andi	$a2, $a2, 18
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 15
	andi	$a2, $a2, 17
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	ori	$a2, $zero, 32
	sub.d	$a1, $a2, $a1
	andi	$a1, $a1, 255
	add.d	$a0, $a1, $a0
	addi.d	$s6, $a0, -32
	b	.LBB13_58
.LBB13_47:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1794
	b	.LBB13_58
.LBB13_48:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1795
	b	.LBB13_58
.LBB13_49:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1797
	b	.LBB13_58
.LBB13_50:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1798
	b	.LBB13_58
.LBB13_51:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1799
	b	.LBB13_58
.LBB13_52:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1801
	b	.LBB13_58
.LBB13_53:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1802
	b	.LBB13_58
.LBB13_54:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1803
	b	.LBB13_58
.LBB13_55:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1805
	b	.LBB13_58
.LBB13_56:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1806
	b	.LBB13_58
.LBB13_57:
	lu12i.w	$a0, 2
	ori	$s6, $a0, 1807
.LBB13_58:                              # %.loopexit
.Ltmp301:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp302:
# %bb.59:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	slli.d	$a0, $s6, 3
	ldx.d	$a1, $fp, $a0
.Ltmp303:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp304:
# %bb.60:                               # %_ZNSolsEm.exit
.Ltmp305:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp306:
# %bb.61:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.bu	$a1, $s3, $s6
.Ltmp307:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp308:
# %bb.62:
.Ltmp309:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp310:
# %bb.63:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit20
	ldx.bu	$a1, $s0, $s6
.Ltmp311:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp312:
# %bb.64:
.Ltmp313:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp314:
# %bb.65:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB13_66:                              # %.thread
.Ltmp292:
	move	$s1, $a0
	b	.LBB13_72
.LBB13_67:
.Ltmp289:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB13_68:
.Ltmp300:
	b	.LBB13_71
.LBB13_69:
.Ltmp315:
	b	.LBB13_71
.LBB13_70:
.Ltmp295:
.LBB13_71:
	move	$s1, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s3, $sp, 24
	beqz	$s3, .LBB13_73
.LBB13_72:                              # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i28
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB13_73:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end13:
	.size	_Z61benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint8_t_RN9benchmark5StateE, .Lfunc_end13-_Z61benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint8_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table13:
.Lexception13:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end13-.Lcst_begin13
.Lcst_begin13:
	.uleb128 .Lfunc_begin13-.Lfunc_begin13  # >> Call Site 1 <<
	.uleb128 .Ltmp287-.Lfunc_begin13        #   Call between .Lfunc_begin13 and .Ltmp287
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp287-.Lfunc_begin13        # >> Call Site 2 <<
	.uleb128 .Ltmp288-.Ltmp287              #   Call between .Ltmp287 and .Ltmp288
	.uleb128 .Ltmp289-.Lfunc_begin13        #     jumps to .Ltmp289
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp290-.Lfunc_begin13        # >> Call Site 3 <<
	.uleb128 .Ltmp291-.Ltmp290              #   Call between .Ltmp290 and .Ltmp291
	.uleb128 .Ltmp292-.Lfunc_begin13        #     jumps to .Ltmp292
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp293-.Lfunc_begin13        # >> Call Site 4 <<
	.uleb128 .Ltmp294-.Ltmp293              #   Call between .Ltmp293 and .Ltmp294
	.uleb128 .Ltmp295-.Lfunc_begin13        #     jumps to .Ltmp295
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp296-.Lfunc_begin13        # >> Call Site 5 <<
	.uleb128 .Ltmp299-.Ltmp296              #   Call between .Ltmp296 and .Ltmp299
	.uleb128 .Ltmp300-.Lfunc_begin13        #     jumps to .Ltmp300
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp299-.Lfunc_begin13        # >> Call Site 6 <<
	.uleb128 .Ltmp301-.Ltmp299              #   Call between .Ltmp299 and .Ltmp301
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp301-.Lfunc_begin13        # >> Call Site 7 <<
	.uleb128 .Ltmp314-.Ltmp301              #   Call between .Ltmp301 and .Ltmp314
	.uleb128 .Ltmp315-.Lfunc_begin13        #     jumps to .Ltmp315
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp314-.Lfunc_begin13        # >> Call Site 8 <<
	.uleb128 .Lfunc_end13-.Ltmp314          #   Call between .Ltmp314 and .Lfunc_end13
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end13:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z53benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint8_t_RN9benchmark5StateE
.LCPI14_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5, 0x0
.LCPI14_1:
	.byte	32                              # 0x20
	.byte	31                              # 0x1f
	.byte	30                              # 0x1e
	.byte	29                              # 0x1d
	.byte	28                              # 0x1c
	.byte	27                              # 0x1b
	.byte	26                              # 0x1a
	.byte	25                              # 0x19
	.byte	24                              # 0x18
	.byte	23                              # 0x17
	.byte	22                              # 0x16
	.byte	21                              # 0x15
	.byte	20                              # 0x14
	.byte	19                              # 0x13
	.byte	18                              # 0x12
	.byte	17                              # 0x11
	.byte	16                              # 0x10
	.byte	15                              # 0xf
	.byte	14                              # 0xe
	.byte	13                              # 0xd
	.byte	12                              # 0xc
	.byte	11                              # 0xb
	.byte	10                              # 0xa
	.byte	9                               # 0x9
	.byte	8                               # 0x8
	.byte	7                               # 0x7
	.byte	6                               # 0x6
	.byte	5                               # 0x5
	.byte	4                               # 0x4
	.byte	3                               # 0x3
	.byte	2                               # 0x2
	.byte	1                               # 0x1
	.text
	.globl	_Z53benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint8_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z53benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint8_t_RN9benchmark5StateE,@function
_Z53benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint8_t_RN9benchmark5StateE: # @_Z53benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint8_t_RN9benchmark5StateE
.Lfunc_begin14:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception14
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s0, $a0
	lu12i.w	$a0, 19
	ori	$s4, $a0, 2176
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp316:
	lu12i.w	$a0, 2
	ori	$s3, $a0, 1808
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp317:
# %bb.1:                                # %.split
	move	$s1, $a0
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $sp, 88
.Ltmp319:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp320:
# %bb.2:                                # %.split146
	move	$s0, $a0
	move	$s6, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI14_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI14_0)
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1793
	add.d	$s7, $s1, $s2
	add.d	$s8, $s0, $s2
	vst	$vr0, $sp, 96
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB14_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp322:
	addi.d	$a0, $sp, 96
	addi.d	$a2, $sp, 96
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp323:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB14_3 Depth=1
	stx.d	$a0, $fp, $s6
	addi.d	$s6, $s6, 8
	bne	$s6, $s4, .LBB14_3
# %bb.5:                                # %vector.ph
	addi.d	$a0, $fp, 8
	lu12i.w	$s6, -3
	ori	$a1, $s6, 2288
	lu12i.w	$a6, 2
	ori	$a2, $a6, 1809
	.p2align	4, , 16
.LBB14_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a3, $a0, -8
	ld.d	$a4, $a0, 0
	add.d	$a5, $s0, $a1
	stx.b	$a3, $a5, $s3
	stx.b	$a4, $a5, $a2
	addi.d	$a1, $a1, 2
	addi.d	$a0, $a0, 16
	bnez	$a1, .LBB14_6
# %bb.7:                                # %vector.body78.preheader
	move	$a0, $zero
	addi.d	$a1, $s1, 4
	.p2align	4, , 16
.LBB14_8:                               # %vector.body78
                                        # =>This Inner Loop Header: Depth=1
	xvldx	$xr0, $fp, $a0
	add.d	$a2, $fp, $a0
	xvld	$xr1, $a2, 32
	xvpickve2gr.d	$a2, $xr0, 3
	st.b	$a2, $sp, 51
	xvpickve2gr.d	$a2, $xr0, 2
	st.b	$a2, $sp, 50
	xvpickve2gr.d	$a2, $xr0, 1
	st.b	$a2, $sp, 49
	xvpickve2gr.d	$a2, $xr0, 0
	st.b	$a2, $sp, 48
	xvpickve2gr.d	$a2, $xr1, 3
	st.b	$a2, $sp, 67
	xvpickve2gr.d	$a2, $xr1, 2
	st.b	$a2, $sp, 66
	xvpickve2gr.d	$a2, $xr1, 1
	st.b	$a2, $sp, 65
	xvpickve2gr.d	$a2, $xr1, 0
	st.b	$a2, $sp, 64
	vld	$vr0, $sp, 48
	vstelm.w	$vr0, $a1, -4, 0
	vld	$vr0, $sp, 64
	vstelm.w	$vr0, $a1, 0, 0
	addi.d	$a0, $a0, 64
	addi.d	$a1, $a1, 8
	bne	$a0, $s4, .LBB14_8
# %bb.9:                                # %vector.body86.preheader
	move	$a0, $zero
	ori	$a1, $a6, 1760
	.p2align	4, , 16
.LBB14_10:                              # %vector.body86
                                        # =>This Inner Loop Header: Depth=1
	move	$a2, $a0
	xvldx	$xr0, $s1, $a0
	xvldx	$xr1, $s0, $a0
	xvseq.b	$xr0, $xr0, $xr1
	xvxori.b	$xr0, $xr0, 255
	xvmskltz.b	$xr1, $xr0
	xvpickve2gr.wu	$a0, $xr1, 0
	xvpickve2gr.wu	$a3, $xr1, 4
	bstrins.d	$a0, $a3, 31, 16
	addi.w	$a3, $a0, 0
	addi.d	$a0, $a2, 32
	bnez	$a3, .LBB14_12
# %bb.11:                               # %vector.body86
                                        #   in Loop: Header=BB14_10 Depth=1
	bne	$a2, $a1, .LBB14_10
.LBB14_12:                              # %middle.split
	bnez	$a3, .LBB14_44
# %bb.13:                               # %_ZL20truncOrZextVecInLoopImhEvPKT_PT0_i.exit.preheader
	ori	$s5, $a6, 1792
	ldx.bu	$a0, $s1, $s5
	ldx.bu	$a1, $s0, $s5
	bne	$a0, $a1, .LBB14_56
# %bb.14:                               # %_ZL20truncOrZextVecInLoopImhEvPKT_PT0_i.exit
	ld.bu	$a0, $s7, 0
	ld.bu	$a1, $s8, 0
	move	$s5, $s2
	bne	$a0, $a1, .LBB14_56
# %bb.15:                               # %_ZL20truncOrZextVecInLoopImhEvPKT_PT0_i.exit.1
	ld.bu	$a0, $s7, 1
	ld.bu	$a1, $s8, 1
	bne	$a0, $a1, .LBB14_45
# %bb.16:                               # %_ZL20truncOrZextVecInLoopImhEvPKT_PT0_i.exit.2
	ld.bu	$a0, $s7, 2
	ld.bu	$a1, $s8, 2
	bne	$a0, $a1, .LBB14_46
# %bb.17:                               # %_ZL20truncOrZextVecInLoopImhEvPKT_PT0_i.exit.3
	ori	$s5, $a6, 1796
	ldx.bu	$a0, $s1, $s5
	ldx.bu	$a1, $s0, $s5
	bne	$a0, $a1, .LBB14_56
# %bb.18:                               # %_ZL20truncOrZextVecInLoopImhEvPKT_PT0_i.exit.4
	ld.bu	$a0, $s7, 4
	ld.bu	$a1, $s8, 4
	bne	$a0, $a1, .LBB14_47
# %bb.19:                               # %_ZL20truncOrZextVecInLoopImhEvPKT_PT0_i.exit.5
	ld.bu	$a0, $s7, 5
	ld.bu	$a1, $s8, 5
	bne	$a0, $a1, .LBB14_48
# %bb.20:                               # %_ZL20truncOrZextVecInLoopImhEvPKT_PT0_i.exit.6
	ld.bu	$a0, $s7, 6
	ld.bu	$a1, $s8, 6
	bne	$a0, $a1, .LBB14_49
# %bb.21:                               # %_ZL20truncOrZextVecInLoopImhEvPKT_PT0_i.exit.7
	ori	$s5, $a6, 1800
	ldx.bu	$a0, $s1, $s5
	ldx.bu	$a1, $s0, $s5
	bne	$a0, $a1, .LBB14_56
# %bb.22:                               # %_ZL20truncOrZextVecInLoopImhEvPKT_PT0_i.exit.8
	ld.bu	$a0, $s7, 8
	ld.bu	$a1, $s8, 8
	bne	$a0, $a1, .LBB14_50
# %bb.23:                               # %_ZL20truncOrZextVecInLoopImhEvPKT_PT0_i.exit.9
	ld.bu	$a0, $s7, 9
	ld.bu	$a1, $s8, 9
	bne	$a0, $a1, .LBB14_51
# %bb.24:                               # %_ZL20truncOrZextVecInLoopImhEvPKT_PT0_i.exit.10
	ld.bu	$a0, $s7, 10
	ld.bu	$a1, $s8, 10
	bne	$a0, $a1, .LBB14_52
# %bb.25:                               # %_ZL20truncOrZextVecInLoopImhEvPKT_PT0_i.exit.11
	ori	$s5, $a6, 1804
	ldx.bu	$a0, $s1, $s5
	ldx.bu	$a1, $s0, $s5
	bne	$a0, $a1, .LBB14_56
# %bb.26:                               # %_ZL20truncOrZextVecInLoopImhEvPKT_PT0_i.exit.12
	ld.bu	$a0, $s7, 12
	ld.bu	$a1, $s8, 12
	bne	$a0, $a1, .LBB14_53
# %bb.27:                               # %_ZL20truncOrZextVecInLoopImhEvPKT_PT0_i.exit.13
	ld.bu	$a0, $s7, 13
	ld.bu	$a1, $s8, 13
	bne	$a0, $a1, .LBB14_54
# %bb.28:                               # %_ZL20truncOrZextVecInLoopImhEvPKT_PT0_i.exit.14
	ld.bu	$a0, $s7, 14
	ld.bu	$a1, $s8, 14
	bne	$a0, $a1, .LBB14_55
# %bb.29:                               # %_ZL20truncOrZextVecInLoopImhEvPKT_PT0_i.exit.15
	ld.d	$s5, $sp, 8                     # 8-byte Folded Reload
	ld.w	$s2, $s5, 28
	ld.d	$s1, $s5, 16
.Ltmp325:
	move	$a0, $s5
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp326:
# %bb.30:                               # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s2, .LBB14_40
# %bb.31:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s1, .LBB14_40
# %bb.32:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s4
	addi.d	$a1, $fp, 32
	addi.d	$a2, $sp, 88
	ori	$a3, $s6, 2288
	b	.LBB14_34
	.p2align	4, , 16
.LBB14_33:                              # %_ZL20truncOrZextVecInLoopImhEvPKT_PT0_i.exit25
                                        #   in Loop: Header=BB14_34 Depth=1
	addi.d	$s1, $s1, -1
	beqz	$s1, .LBB14_40
.LBB14_34:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_39 Depth 2
                                        #     Child Loop BB14_37 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a4, $sp, 88
	bgeu	$a4, $a0, .LBB14_38
# %bb.35:                               # %.lr.ph
                                        #   in Loop: Header=BB14_34 Depth=1
	add.d	$a5, $a4, $s3
	bgeu	$fp, $a5, .LBB14_38
# %bb.36:                               # %.lr.ph.i21.preheader
                                        #   in Loop: Header=BB14_34 Depth=1
	move	$a5, $fp
	move	$a6, $a3
	.p2align	4, , 16
.LBB14_37:                              # %.lr.ph.i21
                                        #   Parent Loop BB14_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a7, $a5, 0
	add.d	$t0, $a4, $a6
	stx.b	$a7, $t0, $s3
	addi.d	$a6, $a6, 1
	addi.d	$a5, $a5, 8
	bnez	$a6, .LBB14_37
	b	.LBB14_33
	.p2align	4, , 16
.LBB14_38:                              # %vector.body96.preheader
                                        #   in Loop: Header=BB14_34 Depth=1
	move	$a5, $a1
	move	$a6, $a3
	.p2align	4, , 16
.LBB14_39:                              # %vector.body96
                                        #   Parent Loop BB14_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr0, $a5, -32
	xvld	$xr1, $a5, 0
	xvpickve2gr.d	$a7, $xr0, 3
	st.b	$a7, $sp, 35
	xvpickve2gr.d	$a7, $xr0, 2
	st.b	$a7, $sp, 34
	xvpickve2gr.d	$a7, $xr0, 1
	st.b	$a7, $sp, 33
	xvpickve2gr.d	$a7, $xr0, 0
	st.b	$a7, $sp, 32
	xvpickve2gr.d	$a7, $xr1, 3
	st.b	$a7, $sp, 19
	xvpickve2gr.d	$a7, $xr1, 2
	st.b	$a7, $sp, 18
	xvpickve2gr.d	$a7, $xr1, 1
	st.b	$a7, $sp, 17
	xvpickve2gr.d	$a7, $xr1, 0
	st.b	$a7, $sp, 16
	vld	$vr0, $sp, 32
	add.d	$a7, $a4, $a6
	vpickve2gr.w	$t0, $vr0, 0
	stptr.w	$t0, $a7, 10000
	vld	$vr0, $sp, 16
	vpickve2gr.w	$t0, $vr0, 0
	stptr.w	$t0, $a7, 10004
	addi.d	$a6, $a6, 8
	addi.d	$a5, $a5, 64
	bnez	$a6, .LBB14_39
	b	.LBB14_33
.LBB14_40:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp327:
	move	$a0, $s5
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp328:
# %bb.41:                               # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit33
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 88
	beqz	$a0, .LBB14_43
# %bb.42:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i35
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB14_43:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit39
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB14_44:                              # %vector.early.exit
	pcalau12i	$a1, %pc_hi20(.LCPI14_1)
	xvld	$xr1, $a1, %pc_lo12(.LCPI14_1)
	xvand.v	$xr0, $xr0, $xr1
	xvpermi.q	$xr1, $xr0, 1
	vmax.bu	$vr0, $vr0, $vr1
	vpickve2gr.b	$a1, $vr0, 0
	andi	$a1, $a1, 48
	vpickve2gr.b	$a2, $vr0, 1
	andi	$a2, $a2, 31
	sltu	$a3, $a2, $a1
	masknez	$a2, $a2, $a3
	maskeqz	$a1, $a1, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 2
	andi	$a2, $a2, 30
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 3
	andi	$a2, $a2, 29
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 4
	andi	$a2, $a2, 28
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 5
	andi	$a2, $a2, 27
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 6
	andi	$a2, $a2, 26
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 7
	andi	$a2, $a2, 25
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 8
	andi	$a2, $a2, 24
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 9
	andi	$a2, $a2, 23
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 10
	andi	$a2, $a2, 22
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 11
	andi	$a2, $a2, 21
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 12
	andi	$a2, $a2, 20
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 13
	andi	$a2, $a2, 19
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 14
	andi	$a2, $a2, 18
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	vpickve2gr.b	$a2, $vr0, 15
	andi	$a2, $a2, 17
	sltu	$a3, $a2, $a1
	maskeqz	$a1, $a1, $a3
	masknez	$a2, $a2, $a3
	or	$a1, $a1, $a2
	ori	$a2, $zero, 32
	sub.d	$a1, $a2, $a1
	andi	$a1, $a1, 255
	add.d	$a0, $a1, $a0
	addi.d	$s5, $a0, -32
	b	.LBB14_56
.LBB14_45:
	ori	$s5, $a6, 1794
	b	.LBB14_56
.LBB14_46:
	ori	$s5, $a6, 1795
	b	.LBB14_56
.LBB14_47:
	ori	$s5, $a6, 1797
	b	.LBB14_56
.LBB14_48:
	ori	$s5, $a6, 1798
	b	.LBB14_56
.LBB14_49:
	ori	$s5, $a6, 1799
	b	.LBB14_56
.LBB14_50:
	ori	$s5, $a6, 1801
	b	.LBB14_56
.LBB14_51:
	ori	$s5, $a6, 1802
	b	.LBB14_56
.LBB14_52:
	ori	$s5, $a6, 1803
	b	.LBB14_56
.LBB14_53:
	ori	$s5, $a6, 1805
	b	.LBB14_56
.LBB14_54:
	ori	$s5, $a6, 1806
	b	.LBB14_56
.LBB14_55:
	ori	$s5, $a6, 1807
.LBB14_56:                              # %.loopexit
.Ltmp330:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp331:
# %bb.57:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	slli.d	$a0, $s5, 3
	ldx.d	$a1, $fp, $a0
.Ltmp332:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp333:
# %bb.58:                               # %_ZNSolsEm.exit
.Ltmp334:
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp335:
# %bb.59:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.bu	$a1, $s1, $s5
.Ltmp336:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp337:
# %bb.60:
.Ltmp338:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp339:
# %bb.61:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit20
	ldx.bu	$a1, $s0, $s5
.Ltmp340:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp341:
# %bb.62:
.Ltmp342:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp343:
# %bb.63:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB14_64:                              # %.thread
.Ltmp321:
	move	$s2, $a0
	b	.LBB14_70
.LBB14_65:
.Ltmp318:
	move	$s2, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB14_66:
.Ltmp329:
	b	.LBB14_69
.LBB14_67:
.Ltmp344:
	b	.LBB14_69
.LBB14_68:
.Ltmp324:
.LBB14_69:
	move	$s2, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s1, $sp, 88
	beqz	$s1, .LBB14_71
.LBB14_70:                              # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i28
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB14_71:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end14:
	.size	_Z53benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint8_t_RN9benchmark5StateE, .Lfunc_end14-_Z53benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint8_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table14:
.Lexception14:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end14-.Lcst_begin14
.Lcst_begin14:
	.uleb128 .Lfunc_begin14-.Lfunc_begin14  # >> Call Site 1 <<
	.uleb128 .Ltmp316-.Lfunc_begin14        #   Call between .Lfunc_begin14 and .Ltmp316
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp316-.Lfunc_begin14        # >> Call Site 2 <<
	.uleb128 .Ltmp317-.Ltmp316              #   Call between .Ltmp316 and .Ltmp317
	.uleb128 .Ltmp318-.Lfunc_begin14        #     jumps to .Ltmp318
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp319-.Lfunc_begin14        # >> Call Site 3 <<
	.uleb128 .Ltmp320-.Ltmp319              #   Call between .Ltmp319 and .Ltmp320
	.uleb128 .Ltmp321-.Lfunc_begin14        #     jumps to .Ltmp321
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp322-.Lfunc_begin14        # >> Call Site 4 <<
	.uleb128 .Ltmp323-.Ltmp322              #   Call between .Ltmp322 and .Ltmp323
	.uleb128 .Ltmp324-.Lfunc_begin14        #     jumps to .Ltmp324
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp325-.Lfunc_begin14        # >> Call Site 5 <<
	.uleb128 .Ltmp328-.Ltmp325              #   Call between .Ltmp325 and .Ltmp328
	.uleb128 .Ltmp329-.Lfunc_begin14        #     jumps to .Ltmp329
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp328-.Lfunc_begin14        # >> Call Site 6 <<
	.uleb128 .Ltmp330-.Ltmp328              #   Call between .Ltmp328 and .Ltmp330
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp330-.Lfunc_begin14        # >> Call Site 7 <<
	.uleb128 .Ltmp343-.Ltmp330              #   Call between .Ltmp330 and .Ltmp343
	.uleb128 .Ltmp344-.Lfunc_begin14        #     jumps to .Ltmp344
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp343-.Lfunc_begin14        # >> Call Site 8 <<
	.uleb128 .Lfunc_end14-.Ltmp343          #   Call between .Ltmp343 and .Lfunc_end14
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end14:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint8_t_RN9benchmark5StateE
.LCPI15_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint8_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint8_t_RN9benchmark5StateE,@function
_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint8_t_RN9benchmark5StateE: # @_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint8_t_RN9benchmark5StateE
.Lfunc_begin15:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception15
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$s0, $a0
	lu12i.w	$a0, 19
	ori	$s2, $a0, 2176
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp345:
	lu12i.w	$s5, 2
	ori	$s1, $s5, 1808
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp346:
# %bb.1:
	move	$s3, $a0
	pcalau12i	$a0, %pc_hi20(.LCPI15_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI15_0)
	move	$s6, $zero
	st.d	$s3, $sp, 72
	vst	$vr0, $sp, 80
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB15_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp348:
	addi.d	$a0, $sp, 80
	addi.d	$a2, $sp, 80
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp349:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB15_2 Depth=1
	stx.d	$a0, $fp, $s6
	addi.d	$s6, $s6, 8
	bne	$s6, $s2, .LBB15_2
# %bb.4:
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 80
	lu12i.w	$s6, -3
	ori	$s7, $s6, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB15_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp351:
	addi.d	$a0, $sp, 80
	addi.d	$a2, $sp, 80
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp352:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB15_5 Depth=1
	add.d	$a1, $s3, $s7
	addi.d	$s7, $s7, 1
	stx.b	$a0, $a1, $s1
	bnez	$s7, .LBB15_5
# %bb.7:
	ld.w	$s4, $s0, 28
	ld.d	$s3, $s0, 16
.Ltmp354:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp355:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s4, .LBB15_20
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s3, .LBB15_20
# %bb.10:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s2
	addi.d	$a1, $fp, 128
	addi.d	$a2, $sp, 72
	ori	$a3, $s6, 2288
	ori	$a4, $s6, 2304
	ori	$a5, $s5, 1776
	ori	$a6, $s5, 1792
	.p2align	4, , 16
.LBB15_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_15 Depth 2
                                        #     Child Loop BB15_18 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a7, $sp, 72
	bgeu	$a7, $a0, .LBB15_14
# %bb.12:                               # %.lr.ph
                                        #   in Loop: Header=BB15_11 Depth=1
	add.d	$t0, $a7, $s1
	bgeu	$fp, $t0, .LBB15_14
# %bb.13:                               #   in Loop: Header=BB15_11 Depth=1
	move	$t1, $zero
	b	.LBB15_17
	.p2align	4, , 16
.LBB15_14:                              # %vector.body.preheader
                                        #   in Loop: Header=BB15_11 Depth=1
	addi.d	$t0, $a7, 16
	move	$t1, $a1
	move	$t2, $a4
	.p2align	4, , 16
.LBB15_15:                              # %vector.body
                                        #   Parent Loop BB15_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$t3, $t0, $t2
	ldptr.d	$t4, $t3, 9968
	ldptr.d	$t5, $t3, 9976
	vinsgr2vr.d	$vr0, $t4, 0
	xvld	$xr5, $t1, -128
	xvld	$xr6, $t1, -96
	vinsgr2vr.d	$vr1, $t5, 0
	ldptr.d	$t4, $t3, 9984
	xvld	$xr7, $t1, -64
	xvld	$xr8, $t1, -32
	xvld	$xr9, $t1, 0
	vinsgr2vr.d	$vr2, $t4, 0
	ldptr.d	$t4, $t3, 9992
	xvld	$xr10, $t1, 32
	xvld	$xr4, $t1, 64
	xvld	$xr11, $t1, 96
	vinsgr2vr.d	$vr3, $t4, 0
	xvpickve2gr.d	$t4, $xr6, 3
	st.b	$t4, $sp, 55
	xvpickve2gr.d	$t4, $xr6, 2
	st.b	$t4, $sp, 54
	xvpickve2gr.d	$t4, $xr6, 1
	st.b	$t4, $sp, 53
	xvpickve2gr.d	$t4, $xr6, 0
	st.b	$t4, $sp, 52
	xvpickve2gr.d	$t4, $xr5, 3
	st.b	$t4, $sp, 51
	xvpickve2gr.d	$t4, $xr5, 2
	st.b	$t4, $sp, 50
	xvpickve2gr.d	$t4, $xr5, 1
	st.b	$t4, $sp, 49
	xvpickve2gr.d	$t4, $xr5, 0
	st.b	$t4, $sp, 48
	vld	$vr5, $sp, 48
	xvpickve2gr.d	$t4, $xr8, 3
	st.b	$t4, $sp, 39
	xvpickve2gr.d	$t4, $xr8, 2
	st.b	$t4, $sp, 38
	xvpickve2gr.d	$t4, $xr8, 1
	st.b	$t4, $sp, 37
	xvpickve2gr.d	$t4, $xr8, 0
	st.b	$t4, $sp, 36
	xvpickve2gr.d	$t4, $xr7, 3
	st.b	$t4, $sp, 35
	xvpickve2gr.d	$t4, $xr7, 2
	st.b	$t4, $sp, 34
	xvpickve2gr.d	$t4, $xr7, 1
	st.b	$t4, $sp, 33
	xvpickve2gr.d	$t4, $xr7, 0
	st.b	$t4, $sp, 32
	vld	$vr6, $sp, 32
	xvpickve2gr.d	$t4, $xr10, 3
	st.b	$t4, $sp, 7
	xvpickve2gr.d	$t4, $xr10, 2
	st.b	$t4, $sp, 6
	xvpickve2gr.d	$t4, $xr10, 1
	st.b	$t4, $sp, 5
	xvpickve2gr.d	$t4, $xr10, 0
	st.b	$t4, $sp, 4
	xvpickve2gr.d	$t4, $xr9, 3
	st.b	$t4, $sp, 3
	xvpickve2gr.d	$t4, $xr9, 2
	st.b	$t4, $sp, 2
	xvpickve2gr.d	$t4, $xr9, 1
	st.b	$t4, $sp, 1
	xvpickve2gr.d	$t4, $xr9, 0
	st.b	$t4, $sp, 0
	vld	$vr7, $sp, 0
	xvpickve2gr.d	$t4, $xr11, 3
	st.b	$t4, $sp, 23
	xvpickve2gr.d	$t4, $xr11, 2
	st.b	$t4, $sp, 22
	xvpickve2gr.d	$t4, $xr11, 1
	st.b	$t4, $sp, 21
	xvpickve2gr.d	$t4, $xr11, 0
	st.b	$t4, $sp, 20
	xvpickve2gr.d	$t4, $xr4, 3
	st.b	$t4, $sp, 19
	xvpickve2gr.d	$t4, $xr4, 2
	st.b	$t4, $sp, 18
	xvpickve2gr.d	$t4, $xr4, 1
	st.b	$t4, $sp, 17
	xvpickve2gr.d	$t4, $xr4, 0
	st.b	$t4, $sp, 16
	vld	$vr4, $sp, 16
	vadd.b	$vr0, $vr0, $vr5
	vadd.b	$vr1, $vr1, $vr6
	vadd.b	$vr2, $vr2, $vr7
	vadd.b	$vr3, $vr3, $vr4
	vpickve2gr.d	$t4, $vr0, 0
	xvinsgr2vr.d	$xr0, $t4, 0
	vpickve2gr.d	$t4, $vr1, 0
	xvinsgr2vr.d	$xr0, $t4, 1
	vpickve2gr.d	$t4, $vr2, 0
	xvinsgr2vr.d	$xr0, $t4, 2
	vpickve2gr.d	$t4, $vr3, 0
	xvinsgr2vr.d	$xr0, $t4, 3
	xvstx	$xr0, $t3, $a5
	addi.d	$t2, $t2, 32
	addi.d	$t1, $t1, 256
	bnez	$t2, .LBB15_15
# %bb.16:                               #   in Loop: Header=BB15_11 Depth=1
	move	$t1, $a6
.LBB15_17:                              # %.lr.ph.i.preheader
                                        #   in Loop: Header=BB15_11 Depth=1
	add.d	$t0, $t1, $a3
	add.d	$a7, $a7, $t1
	alsl.d	$t1, $t1, $fp, 3
	.p2align	4, , 16
.LBB15_18:                              # %.lr.ph.i
                                        #   Parent Loop BB15_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$t2, $t1, 0
	ld.b	$t3, $a7, 0
	add.d	$t2, $t3, $t2
	st.b	$t2, $a7, 0
	addi.d	$t0, $t0, 1
	addi.d	$a7, $a7, 1
	addi.d	$t1, $t1, 8
	bnez	$t0, .LBB15_18
# %bb.19:                               # %_ZL34truncOrZextVecWithAddInLoopWithVW8ImhEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB15_11 Depth=1
	addi.d	$s3, $s3, -1
	bnez	$s3, .LBB15_11
.LBB15_20:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp356:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp357:
# %bb.21:                               # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 72
	beqz	$a0, .LBB15_23
# %bb.22:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB15_23:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB15_24:
.Ltmp347:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB15_25:
.Ltmp358:
	ld.d	$s3, $sp, 72
	move	$s0, $a0
	bnez	$s3, .LBB15_29
	b	.LBB15_30
.LBB15_26:                              # %.loopexit
.Ltmp353:
	b	.LBB15_28
.LBB15_27:                              # %.loopexit.split-lp
.Ltmp350:
.LBB15_28:                              # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB15_29:                              # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB15_30:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end15:
	.size	_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint8_t_RN9benchmark5StateE, .Lfunc_end15-_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint8_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table15:
.Lexception15:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end15-.Lcst_begin15
.Lcst_begin15:
	.uleb128 .Lfunc_begin15-.Lfunc_begin15  # >> Call Site 1 <<
	.uleb128 .Ltmp345-.Lfunc_begin15        #   Call between .Lfunc_begin15 and .Ltmp345
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp345-.Lfunc_begin15        # >> Call Site 2 <<
	.uleb128 .Ltmp346-.Ltmp345              #   Call between .Ltmp345 and .Ltmp346
	.uleb128 .Ltmp347-.Lfunc_begin15        #     jumps to .Ltmp347
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp348-.Lfunc_begin15        # >> Call Site 3 <<
	.uleb128 .Ltmp349-.Ltmp348              #   Call between .Ltmp348 and .Ltmp349
	.uleb128 .Ltmp350-.Lfunc_begin15        #     jumps to .Ltmp350
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp351-.Lfunc_begin15        # >> Call Site 4 <<
	.uleb128 .Ltmp352-.Ltmp351              #   Call between .Ltmp351 and .Ltmp352
	.uleb128 .Ltmp353-.Lfunc_begin15        #     jumps to .Ltmp353
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp354-.Lfunc_begin15        # >> Call Site 5 <<
	.uleb128 .Ltmp357-.Ltmp354              #   Call between .Ltmp354 and .Ltmp357
	.uleb128 .Ltmp358-.Lfunc_begin15        #     jumps to .Ltmp358
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp357-.Lfunc_begin15        # >> Call Site 6 <<
	.uleb128 .Lfunc_end15-.Ltmp357          #   Call between .Ltmp357 and .Lfunc_end15
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end15:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint8_t_RN9benchmark5StateE
.LCPI16_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint8_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint8_t_RN9benchmark5StateE,@function
_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint8_t_RN9benchmark5StateE: # @_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint8_t_RN9benchmark5StateE
.Lfunc_begin16:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception16
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$s0, $a0
	lu12i.w	$a0, 19
	ori	$s2, $a0, 2176
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp359:
	lu12i.w	$s5, 2
	ori	$s1, $s5, 1808
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp360:
# %bb.1:
	move	$s3, $a0
	pcalau12i	$a0, %pc_hi20(.LCPI16_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI16_0)
	move	$s6, $zero
	st.d	$s3, $sp, 8
	vst	$vr0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB16_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp362:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp363:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB16_2 Depth=1
	stx.d	$a0, $fp, $s6
	addi.d	$s6, $s6, 8
	bne	$s6, $s2, .LBB16_2
# %bb.4:
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 16
	lu12i.w	$s6, -3
	ori	$s7, $s6, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB16_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp365:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp366:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB16_5 Depth=1
	add.d	$a1, $s3, $s7
	addi.d	$s7, $s7, 1
	stx.b	$a0, $a1, $s1
	bnez	$s7, .LBB16_5
# %bb.7:
	ld.w	$s4, $s0, 28
	ld.d	$s3, $s0, 16
.Ltmp368:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp369:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s4, .LBB16_20
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s3, .LBB16_20
# %bb.10:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s2
	addi.d	$a1, $fp, 256
	addi.d	$a2, $sp, 8
	ori	$a3, $s6, 2288
	ori	$a4, $s6, 2304
	ori	$a5, $s5, 1760
	ori	$a6, $s5, 1776
	ori	$a7, $s5, 1792
	.p2align	4, , 16
.LBB16_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_15 Depth 2
                                        #     Child Loop BB16_18 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$t0, $sp, 8
	bgeu	$t0, $a0, .LBB16_14
# %bb.12:                               # %.lr.ph
                                        #   in Loop: Header=BB16_11 Depth=1
	add.d	$t1, $t0, $s1
	bgeu	$fp, $t1, .LBB16_14
# %bb.13:                               #   in Loop: Header=BB16_11 Depth=1
	move	$t2, $zero
	b	.LBB16_17
	.p2align	4, , 16
.LBB16_14:                              # %vector.body.preheader
                                        #   in Loop: Header=BB16_11 Depth=1
	addi.d	$t1, $t0, 32
	move	$t2, $a1
	move	$t3, $a4
	.p2align	4, , 16
.LBB16_15:                              # %vector.body
                                        #   Parent Loop BB16_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr10, $t2, -160
	xvld	$xr18, $t2, -192
	xvld	$xr19, $t2, -224
	xvld	$xr20, $t2, -256
	xvld	$xr14, $t2, -32
	xvld	$xr15, $t2, -64
	xvld	$xr16, $t2, -96
	xvld	$xr17, $t2, -128
	xvld	$xr9, $t2, 96
	xvld	$xr11, $t2, 64
	xvld	$xr12, $t2, 32
	xvld	$xr13, $t2, 0
	xvld	$xr0, $t2, 224
	xvld	$xr6, $t2, 192
	xvld	$xr7, $t2, 160
	xvld	$xr8, $t2, 128
	add.d	$t4, $t1, $t3
	vldx	$vr1, $t4, $a5
	vldx	$vr2, $t4, $a6
	vldx	$vr3, $t4, $a7
	vldx	$vr4, $t4, $s1
	xvpickve2gr.d	$t5, $xr20, 0
	vinsgr2vr.b	$vr5, $t5, 0
	xvpickve2gr.d	$t5, $xr20, 1
	vinsgr2vr.b	$vr5, $t5, 1
	xvpickve2gr.d	$t5, $xr20, 2
	vinsgr2vr.b	$vr5, $t5, 2
	xvpickve2gr.d	$t5, $xr20, 3
	vinsgr2vr.b	$vr5, $t5, 3
	xvpickve2gr.d	$t5, $xr19, 0
	vinsgr2vr.b	$vr5, $t5, 4
	xvpickve2gr.d	$t5, $xr19, 1
	vinsgr2vr.b	$vr5, $t5, 5
	xvpickve2gr.d	$t5, $xr19, 2
	vinsgr2vr.b	$vr5, $t5, 6
	xvpickve2gr.d	$t5, $xr19, 3
	vinsgr2vr.b	$vr5, $t5, 7
	xvpickve2gr.d	$t5, $xr18, 0
	vinsgr2vr.b	$vr5, $t5, 8
	xvpickve2gr.d	$t5, $xr18, 1
	vinsgr2vr.b	$vr5, $t5, 9
	xvpickve2gr.d	$t5, $xr18, 2
	vinsgr2vr.b	$vr5, $t5, 10
	xvpickve2gr.d	$t5, $xr18, 3
	vinsgr2vr.b	$vr5, $t5, 11
	xvpickve2gr.d	$t5, $xr10, 0
	vinsgr2vr.b	$vr5, $t5, 12
	xvpickve2gr.d	$t5, $xr10, 1
	vinsgr2vr.b	$vr5, $t5, 13
	xvpickve2gr.d	$t5, $xr10, 2
	vinsgr2vr.b	$vr5, $t5, 14
	xvpickve2gr.d	$t5, $xr10, 3
	vinsgr2vr.b	$vr5, $t5, 15
	xvpickve2gr.d	$t5, $xr17, 0
	vinsgr2vr.b	$vr10, $t5, 0
	xvpickve2gr.d	$t5, $xr17, 1
	vinsgr2vr.b	$vr10, $t5, 1
	xvpickve2gr.d	$t5, $xr17, 2
	vinsgr2vr.b	$vr10, $t5, 2
	xvpickve2gr.d	$t5, $xr17, 3
	vinsgr2vr.b	$vr10, $t5, 3
	xvpickve2gr.d	$t5, $xr16, 0
	vinsgr2vr.b	$vr10, $t5, 4
	xvpickve2gr.d	$t5, $xr16, 1
	vinsgr2vr.b	$vr10, $t5, 5
	xvpickve2gr.d	$t5, $xr16, 2
	vinsgr2vr.b	$vr10, $t5, 6
	xvpickve2gr.d	$t5, $xr16, 3
	vinsgr2vr.b	$vr10, $t5, 7
	xvpickve2gr.d	$t5, $xr15, 0
	vinsgr2vr.b	$vr10, $t5, 8
	xvpickve2gr.d	$t5, $xr15, 1
	vinsgr2vr.b	$vr10, $t5, 9
	xvpickve2gr.d	$t5, $xr15, 2
	vinsgr2vr.b	$vr10, $t5, 10
	xvpickve2gr.d	$t5, $xr15, 3
	vinsgr2vr.b	$vr10, $t5, 11
	xvpickve2gr.d	$t5, $xr14, 0
	vinsgr2vr.b	$vr10, $t5, 12
	xvpickve2gr.d	$t5, $xr14, 1
	vinsgr2vr.b	$vr10, $t5, 13
	xvpickve2gr.d	$t5, $xr14, 2
	vinsgr2vr.b	$vr10, $t5, 14
	xvpickve2gr.d	$t5, $xr14, 3
	vinsgr2vr.b	$vr10, $t5, 15
	xvpickve2gr.d	$t5, $xr13, 0
	vinsgr2vr.b	$vr14, $t5, 0
	xvpickve2gr.d	$t5, $xr13, 1
	vinsgr2vr.b	$vr14, $t5, 1
	xvpickve2gr.d	$t5, $xr13, 2
	vinsgr2vr.b	$vr14, $t5, 2
	xvpickve2gr.d	$t5, $xr13, 3
	vinsgr2vr.b	$vr14, $t5, 3
	xvpickve2gr.d	$t5, $xr12, 0
	vinsgr2vr.b	$vr14, $t5, 4
	xvpickve2gr.d	$t5, $xr12, 1
	vinsgr2vr.b	$vr14, $t5, 5
	xvpickve2gr.d	$t5, $xr12, 2
	vinsgr2vr.b	$vr14, $t5, 6
	xvpickve2gr.d	$t5, $xr12, 3
	vinsgr2vr.b	$vr14, $t5, 7
	xvpickve2gr.d	$t5, $xr11, 0
	vinsgr2vr.b	$vr14, $t5, 8
	xvpickve2gr.d	$t5, $xr11, 1
	vinsgr2vr.b	$vr14, $t5, 9
	xvpickve2gr.d	$t5, $xr11, 2
	vinsgr2vr.b	$vr14, $t5, 10
	xvpickve2gr.d	$t5, $xr11, 3
	vinsgr2vr.b	$vr14, $t5, 11
	xvpickve2gr.d	$t5, $xr9, 0
	vinsgr2vr.b	$vr14, $t5, 12
	xvpickve2gr.d	$t5, $xr9, 1
	vinsgr2vr.b	$vr14, $t5, 13
	xvpickve2gr.d	$t5, $xr9, 2
	vinsgr2vr.b	$vr14, $t5, 14
	xvpickve2gr.d	$t5, $xr9, 3
	vinsgr2vr.b	$vr14, $t5, 15
	xvpickve2gr.d	$t5, $xr8, 0
	vinsgr2vr.b	$vr9, $t5, 0
	xvpickve2gr.d	$t5, $xr8, 1
	vinsgr2vr.b	$vr9, $t5, 1
	xvpickve2gr.d	$t5, $xr8, 2
	vinsgr2vr.b	$vr9, $t5, 2
	xvpickve2gr.d	$t5, $xr8, 3
	vinsgr2vr.b	$vr9, $t5, 3
	xvpickve2gr.d	$t5, $xr7, 0
	vinsgr2vr.b	$vr9, $t5, 4
	xvpickve2gr.d	$t5, $xr7, 1
	vinsgr2vr.b	$vr9, $t5, 5
	xvpickve2gr.d	$t5, $xr7, 2
	vinsgr2vr.b	$vr9, $t5, 6
	xvpickve2gr.d	$t5, $xr7, 3
	vinsgr2vr.b	$vr9, $t5, 7
	xvpickve2gr.d	$t5, $xr6, 0
	vinsgr2vr.b	$vr9, $t5, 8
	xvpickve2gr.d	$t5, $xr6, 1
	vinsgr2vr.b	$vr9, $t5, 9
	xvpickve2gr.d	$t5, $xr6, 2
	vinsgr2vr.b	$vr9, $t5, 10
	xvpickve2gr.d	$t5, $xr6, 3
	vinsgr2vr.b	$vr9, $t5, 11
	xvpickve2gr.d	$t5, $xr0, 0
	vinsgr2vr.b	$vr9, $t5, 12
	xvpickve2gr.d	$t5, $xr0, 1
	vinsgr2vr.b	$vr9, $t5, 13
	xvpickve2gr.d	$t5, $xr0, 2
	vinsgr2vr.b	$vr9, $t5, 14
	xvpickve2gr.d	$t5, $xr0, 3
	vinsgr2vr.b	$vr9, $t5, 15
	vadd.b	$vr0, $vr1, $vr5
	vadd.b	$vr1, $vr2, $vr10
	vadd.b	$vr2, $vr3, $vr14
	vadd.b	$vr3, $vr4, $vr9
	vstx	$vr0, $t4, $a5
	vstx	$vr1, $t4, $a6
	vstx	$vr2, $t4, $a7
	vstx	$vr3, $t4, $s1
	addi.d	$t3, $t3, 64
	addi.d	$t2, $t2, 512
	bnez	$t3, .LBB16_15
# %bb.16:                               #   in Loop: Header=BB16_11 Depth=1
	move	$t2, $a7
.LBB16_17:                              # %.lr.ph.i.preheader
                                        #   in Loop: Header=BB16_11 Depth=1
	add.d	$t1, $t2, $a3
	add.d	$t0, $t0, $t2
	alsl.d	$t2, $t2, $fp, 3
	.p2align	4, , 16
.LBB16_18:                              # %.lr.ph.i
                                        #   Parent Loop BB16_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$t3, $t2, 0
	ld.b	$t4, $t0, 0
	add.d	$t3, $t4, $t3
	st.b	$t3, $t0, 0
	addi.d	$t1, $t1, 1
	addi.d	$t0, $t0, 1
	addi.d	$t2, $t2, 8
	bnez	$t1, .LBB16_18
# %bb.19:                               # %_ZL35truncOrZextVecWithAddInLoopWithVW16ImhEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB16_11 Depth=1
	addi.d	$s3, $s3, -1
	bnez	$s3, .LBB16_11
.LBB16_20:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp370:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp371:
# %bb.21:                               # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 8
	beqz	$a0, .LBB16_23
# %bb.22:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB16_23:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB16_24:
.Ltmp361:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB16_25:
.Ltmp372:
	ld.d	$s3, $sp, 8
	move	$s0, $a0
	bnez	$s3, .LBB16_29
	b	.LBB16_30
.LBB16_26:                              # %.loopexit
.Ltmp367:
	b	.LBB16_28
.LBB16_27:                              # %.loopexit.split-lp
.Ltmp364:
.LBB16_28:                              # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB16_29:                              # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB16_30:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end16:
	.size	_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint8_t_RN9benchmark5StateE, .Lfunc_end16-_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint8_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table16:
.Lexception16:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end16-.Lcst_begin16
.Lcst_begin16:
	.uleb128 .Lfunc_begin16-.Lfunc_begin16  # >> Call Site 1 <<
	.uleb128 .Ltmp359-.Lfunc_begin16        #   Call between .Lfunc_begin16 and .Ltmp359
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp359-.Lfunc_begin16        # >> Call Site 2 <<
	.uleb128 .Ltmp360-.Ltmp359              #   Call between .Ltmp359 and .Ltmp360
	.uleb128 .Ltmp361-.Lfunc_begin16        #     jumps to .Ltmp361
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp362-.Lfunc_begin16        # >> Call Site 3 <<
	.uleb128 .Ltmp363-.Ltmp362              #   Call between .Ltmp362 and .Ltmp363
	.uleb128 .Ltmp364-.Lfunc_begin16        #     jumps to .Ltmp364
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp365-.Lfunc_begin16        # >> Call Site 4 <<
	.uleb128 .Ltmp366-.Ltmp365              #   Call between .Ltmp365 and .Ltmp366
	.uleb128 .Ltmp367-.Lfunc_begin16        #     jumps to .Ltmp367
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp368-.Lfunc_begin16        # >> Call Site 5 <<
	.uleb128 .Ltmp371-.Ltmp368              #   Call between .Ltmp368 and .Ltmp371
	.uleb128 .Ltmp372-.Lfunc_begin16        #     jumps to .Ltmp372
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp371-.Lfunc_begin16        # >> Call Site 6 <<
	.uleb128 .Lfunc_end16-.Ltmp371          #   Call between .Ltmp371 and .Lfunc_end16
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end16:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z60benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint8_t_RN9benchmark5StateE
.LCPI17_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint8_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint8_t_RN9benchmark5StateE,@function
_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint8_t_RN9benchmark5StateE: # @_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint8_t_RN9benchmark5StateE
.Lfunc_begin17:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception17
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$s0, $a0
	lu12i.w	$a0, 19
	ori	$s2, $a0, 2176
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp373:
	lu12i.w	$s5, 2
	ori	$s1, $s5, 1808
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp374:
# %bb.1:
	move	$s3, $a0
	pcalau12i	$a0, %pc_hi20(.LCPI17_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI17_0)
	move	$s6, $zero
	st.d	$s3, $sp, 40
	vst	$vr0, $sp, 48
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB17_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp376:
	addi.d	$a0, $sp, 48
	addi.d	$a2, $sp, 48
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp377:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB17_2 Depth=1
	stx.d	$a0, $fp, $s6
	addi.d	$s6, $s6, 8
	bne	$s6, $s2, .LBB17_2
# %bb.4:
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 48
	lu12i.w	$s6, -3
	ori	$s7, $s6, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB17_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp379:
	addi.d	$a0, $sp, 48
	addi.d	$a2, $sp, 48
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp380:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB17_5 Depth=1
	add.d	$a1, $s3, $s7
	addi.d	$s7, $s7, 1
	stx.b	$a0, $a1, $s1
	bnez	$s7, .LBB17_5
# %bb.7:
	ld.w	$s4, $s0, 28
	ld.d	$s3, $s0, 16
.Ltmp382:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp383:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s4, .LBB17_18
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s3, .LBB17_18
# %bb.10:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s2
	addi.d	$a1, $fp, 32
	addi.d	$a2, $sp, 40
	ori	$a3, $s6, 2288
	ori	$a4, $s5, 1812
	b	.LBB17_12
	.p2align	4, , 16
.LBB17_11:                              # %_ZL27truncOrZextVecWithAddInLoopImhEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB17_12 Depth=1
	addi.d	$s3, $s3, -1
	beqz	$s3, .LBB17_18
.LBB17_12:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_17 Depth 2
                                        #     Child Loop BB17_15 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a5, $sp, 40
	bgeu	$a5, $a0, .LBB17_16
# %bb.13:                               # %.lr.ph
                                        #   in Loop: Header=BB17_12 Depth=1
	add.d	$a6, $a5, $s1
	bgeu	$fp, $a6, .LBB17_16
# %bb.14:                               # %.lr.ph.i.preheader
                                        #   in Loop: Header=BB17_12 Depth=1
	move	$a6, $fp
	move	$a7, $a3
	.p2align	4, , 16
.LBB17_15:                              # %.lr.ph.i
                                        #   Parent Loop BB17_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$t0, $a6, 0
	add.d	$t1, $a5, $a7
	ldx.b	$t2, $t1, $s1
	add.d	$t0, $t2, $t0
	stx.b	$t0, $t1, $s1
	addi.d	$a7, $a7, 1
	addi.d	$a6, $a6, 8
	bnez	$a7, .LBB17_15
	b	.LBB17_11
	.p2align	4, , 16
.LBB17_16:                              # %vector.body.preheader
                                        #   in Loop: Header=BB17_12 Depth=1
	move	$a6, $a1
	move	$a7, $a3
	.p2align	4, , 16
.LBB17_17:                              # %vector.body
                                        #   Parent Loop BB17_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr0, $a6, -32
	xvld	$xr1, $a6, 0
	add.d	$t0, $a5, $a7
	ldx.w	$t1, $t0, $s1
	ldx.w	$t2, $t0, $a4
	xvpickve2gr.d	$t3, $xr0, 3
	st.b	$t3, $sp, 19
	xvpickve2gr.d	$t3, $xr0, 2
	st.b	$t3, $sp, 18
	xvpickve2gr.d	$t3, $xr0, 1
	st.b	$t3, $sp, 17
	xvpickve2gr.d	$t3, $xr0, 0
	st.b	$t3, $sp, 16
	vld	$vr0, $sp, 16
	xvpickve2gr.d	$t3, $xr1, 3
	st.b	$t3, $sp, 3
	xvpickve2gr.d	$t3, $xr1, 2
	st.b	$t3, $sp, 2
	xvpickve2gr.d	$t3, $xr1, 1
	st.b	$t3, $sp, 1
	xvpickve2gr.d	$t3, $xr1, 0
	st.b	$t3, $sp, 0
	vld	$vr1, $sp, 0
	vinsgr2vr.w	$vr2, $t1, 0
	vinsgr2vr.w	$vr3, $t2, 0
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	vpickve2gr.w	$t1, $vr0, 0
	stptr.w	$t1, $t0, 10000
	vpickve2gr.w	$t1, $vr1, 0
	stptr.w	$t1, $t0, 10004
	addi.d	$a7, $a7, 8
	addi.d	$a6, $a6, 64
	bnez	$a7, .LBB17_17
	b	.LBB17_11
.LBB17_18:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp384:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp385:
# %bb.19:                               # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 40
	beqz	$a0, .LBB17_21
# %bb.20:                               # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB17_21:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB17_22:
.Ltmp375:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB17_23:
.Ltmp386:
	ld.d	$s3, $sp, 40
	move	$s0, $a0
	bnez	$s3, .LBB17_27
	b	.LBB17_28
.LBB17_24:                              # %.loopexit
.Ltmp381:
	b	.LBB17_26
.LBB17_25:                              # %.loopexit.split-lp
.Ltmp378:
.LBB17_26:                              # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB17_27:                              # %_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB17_28:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end17:
	.size	_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint8_t_RN9benchmark5StateE, .Lfunc_end17-_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint8_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table17:
.Lexception17:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end17-.Lcst_begin17
.Lcst_begin17:
	.uleb128 .Lfunc_begin17-.Lfunc_begin17  # >> Call Site 1 <<
	.uleb128 .Ltmp373-.Lfunc_begin17        #   Call between .Lfunc_begin17 and .Ltmp373
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp373-.Lfunc_begin17        # >> Call Site 2 <<
	.uleb128 .Ltmp374-.Ltmp373              #   Call between .Ltmp373 and .Ltmp374
	.uleb128 .Ltmp375-.Lfunc_begin17        #     jumps to .Ltmp375
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp376-.Lfunc_begin17        # >> Call Site 3 <<
	.uleb128 .Ltmp377-.Ltmp376              #   Call between .Ltmp376 and .Ltmp377
	.uleb128 .Ltmp378-.Lfunc_begin17        #     jumps to .Ltmp378
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp379-.Lfunc_begin17        # >> Call Site 4 <<
	.uleb128 .Ltmp380-.Ltmp379              #   Call between .Ltmp379 and .Ltmp380
	.uleb128 .Ltmp381-.Lfunc_begin17        #     jumps to .Ltmp381
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp382-.Lfunc_begin17        # >> Call Site 5 <<
	.uleb128 .Ltmp385-.Ltmp382              #   Call between .Ltmp382 and .Ltmp385
	.uleb128 .Ltmp386-.Lfunc_begin17        #     jumps to .Ltmp386
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp385-.Lfunc_begin17        # >> Call Site 6 <<
	.uleb128 .Lfunc_end17-.Ltmp385          #   Call between .Ltmp385 and .Lfunc_end17
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end17:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z61benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint16_t_RN9benchmark5StateE # -- Begin function _Z61benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint16_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z61benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint16_t_RN9benchmark5StateE,@function
_Z61benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint16_t_RN9benchmark5StateE: # @_Z61benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint16_t_RN9benchmark5StateE
.Lfunc_begin18:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception18
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$fp, 9
	ori	$s4, $fp, 3136
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$s2, $a0
.Ltmp387:
	lu12i.w	$s7, 4
	ori	$s1, $s7, 3616
	move	$a0, $s1
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp388:
# %bb.1:                                # %.split
	move	$s8, $a0
	st.d	$a0, $sp, 56
.Ltmp390:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp391:
# %bb.2:
	move	$s3, $a0
	move	$s0, $zero
	ori	$fp, $fp, 3072
	add.d	$s6, $s2, $fp
	ori	$a0, $s7, 3586
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	add.d	$a0, $s8, $a0
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 64
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	st.d	$s3, $sp, 40                    # 8-byte Folded Spill
	.p2align	4, , 16
.LBB18_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp393:
	addi.d	$a0, $sp, 64
	addi.d	$a2, $sp, 64
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp394:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB18_3 Depth=1
	stx.w	$a0, $s2, $s0
	addi.d	$s0, $s0, 4
	bne	$s0, $s4, .LBB18_3
# %bb.5:                                # %vector.ph
	addi.d	$a0, $s2, 4
	lu12i.w	$a6, -5
	ori	$a1, $a6, 480
	ori	$a2, $s7, 3618
	.p2align	4, , 16
.LBB18_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ld.h	$a3, $a0, -4
	ld.h	$a4, $a0, 0
	add.d	$a5, $s3, $a1
	stx.h	$a3, $a5, $s1
	stx.h	$a4, $a5, $a2
	addi.d	$a1, $a1, 4
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB18_6
# %bb.7:                                # %vector.body83.preheader
	move	$a0, $zero
	addi.d	$a1, $s8, 32
	.p2align	4, , 16
.LBB18_8:                               # %vector.body83
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $s2, $a0
	xvldx	$xr2, $s2, $a0
	xvld	$xr4, $a2, 32
	xvld	$xr3, $a2, 64
	xvld	$xr1, $a2, 96
	xvpickve2gr.w	$a2, $xr2, 0
	vinsgr2vr.h	$vr0, $a2, 0
	xvpickve2gr.w	$a2, $xr2, 1
	vinsgr2vr.h	$vr0, $a2, 1
	xvpickve2gr.w	$a2, $xr2, 2
	vinsgr2vr.h	$vr0, $a2, 2
	xvpickve2gr.w	$a2, $xr2, 3
	vinsgr2vr.h	$vr0, $a2, 3
	xvpickve2gr.w	$a2, $xr2, 4
	vinsgr2vr.h	$vr0, $a2, 4
	xvpickve2gr.w	$a2, $xr2, 5
	vinsgr2vr.h	$vr0, $a2, 5
	xvpickve2gr.w	$a2, $xr2, 6
	vinsgr2vr.h	$vr0, $a2, 6
	xvpickve2gr.w	$a2, $xr2, 7
	vinsgr2vr.h	$vr0, $a2, 7
	xvpickve2gr.w	$a2, $xr4, 0
	vinsgr2vr.h	$vr2, $a2, 0
	xvpickve2gr.w	$a2, $xr4, 1
	vinsgr2vr.h	$vr2, $a2, 1
	xvpickve2gr.w	$a2, $xr4, 2
	vinsgr2vr.h	$vr2, $a2, 2
	xvpickve2gr.w	$a2, $xr4, 3
	vinsgr2vr.h	$vr2, $a2, 3
	xvpickve2gr.w	$a2, $xr4, 4
	vinsgr2vr.h	$vr2, $a2, 4
	xvpickve2gr.w	$a2, $xr4, 5
	vinsgr2vr.h	$vr2, $a2, 5
	xvpickve2gr.w	$a2, $xr4, 6
	vinsgr2vr.h	$vr2, $a2, 6
	xvpickve2gr.w	$a2, $xr4, 7
	vinsgr2vr.h	$vr2, $a2, 7
	xvpickve2gr.w	$a2, $xr3, 0
	vinsgr2vr.h	$vr4, $a2, 0
	xvpickve2gr.w	$a2, $xr3, 1
	vinsgr2vr.h	$vr4, $a2, 1
	xvpickve2gr.w	$a2, $xr3, 2
	vinsgr2vr.h	$vr4, $a2, 2
	xvpickve2gr.w	$a2, $xr3, 3
	vinsgr2vr.h	$vr4, $a2, 3
	xvpickve2gr.w	$a2, $xr3, 4
	vinsgr2vr.h	$vr4, $a2, 4
	xvpickve2gr.w	$a2, $xr3, 5
	vinsgr2vr.h	$vr4, $a2, 5
	xvpickve2gr.w	$a2, $xr3, 6
	vinsgr2vr.h	$vr4, $a2, 6
	xvpickve2gr.w	$a2, $xr3, 7
	vinsgr2vr.h	$vr4, $a2, 7
	xvpickve2gr.w	$a2, $xr1, 0
	vinsgr2vr.h	$vr3, $a2, 0
	xvpickve2gr.w	$a2, $xr1, 1
	vinsgr2vr.h	$vr3, $a2, 1
	xvpickve2gr.w	$a2, $xr1, 2
	vinsgr2vr.h	$vr3, $a2, 2
	xvpickve2gr.w	$a2, $xr1, 3
	vinsgr2vr.h	$vr3, $a2, 3
	xvpickve2gr.w	$a2, $xr1, 4
	vinsgr2vr.h	$vr3, $a2, 4
	xvpickve2gr.w	$a2, $xr1, 5
	vinsgr2vr.h	$vr3, $a2, 5
	xvpickve2gr.w	$a2, $xr1, 6
	vinsgr2vr.h	$vr3, $a2, 6
	xvpickve2gr.w	$a2, $xr1, 7
	vinsgr2vr.h	$vr3, $a2, 7
	vst	$vr0, $a1, -32
	vst	$vr2, $a1, -16
	vst	$vr4, $a1, 0
	vst	$vr3, $a1, 16
	addi.d	$a0, $a0, 128
	addi.d	$a1, $a1, 64
	bne	$a0, $fp, .LBB18_8
# %bb.9:                                # %.lr.ph.i
	ld.h	$a0, $s6, 0
	ld.h	$a1, $s6, 4
	ori	$s4, $s7, 3584
	stx.h	$a0, $s8, $s4
	ld.h	$a0, $s6, 8
	ld.d	$a7, $sp, 16                    # 8-byte Folded Reload
	st.h	$a1, $a7, 0
	ld.h	$a1, $s6, 12
	ori	$a5, $s7, 3588
	stx.h	$a0, $s8, $a5
	ld.h	$a0, $s6, 16
	st.h	$a1, $a7, 4
	ld.h	$a1, $s6, 20
	move	$s5, $s2
	ori	$s2, $s7, 3592
	stx.h	$a0, $s8, $s2
	ld.h	$a0, $s6, 24
	st.h	$a1, $a7, 8
	ld.h	$a1, $s6, 28
	move	$a4, $s8
	ori	$s8, $s7, 3596
	stx.h	$a0, $a4, $s8
	ld.h	$a0, $s6, 32
	st.h	$a1, $a7, 12
	ld.h	$a1, $s6, 36
	ori	$s0, $s7, 3600
	stx.h	$a0, $a4, $s0
	ld.h	$a0, $s6, 40
	st.h	$a1, $a7, 16
	ld.h	$a1, $s6, 44
	ori	$s3, $s7, 3604
	stx.h	$a0, $a4, $s3
	ld.h	$a0, $s6, 48
	st.h	$a1, $a7, 20
	ori	$fp, $s7, 3608
	ld.h	$a1, $s6, 52
	stx.h	$a0, $a4, $fp
	ld.h	$a0, $s6, 56
	ld.h	$a2, $s6, 60
	st.h	$a1, $a7, 24
	ori	$s7, $s7, 3612
	move	$a3, $a4
	stx.h	$a0, $a4, $s7
	st.h	$a2, $a7, 28
	ori	$a0, $a6, 480
	.p2align	4, , 16
.LBB18_10:                              # %_ZL27truncOrZextVecInLoopWithVW8IjtEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a6, $a3, $a0
	ldx.hu	$a1, $a6, $s1
	ld.d	$a2, $sp, 40                    # 8-byte Folded Reload
	add.d	$a4, $a2, $a0
	ldx.hu	$a2, $a4, $s1
	bne	$a1, $a2, .LBB18_23
# %bb.11:                               # %_ZL27truncOrZextVecInLoopWithVW8IjtEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB18_10 Depth=1
	addi.d	$a0, $a0, 2
	addi.d	$s5, $s5, 4
	bnez	$a0, .LBB18_10
# %bb.12:
	st.d	$a5, $sp, 16                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	ld.w	$a1, $a0, 28
	st.d	$a1, $sp, 8                     # 8-byte Folded Spill
	ld.d	$s5, $a0, 16
.Ltmp411:
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp412:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	ld.d	$t1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	bnez	$a0, .LBB18_19
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s5, .LBB18_19
# %bb.15:                               # %.lr.ph.preheader
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	addi.d	$a0, $a0, 64
	addi.d	$a1, $sp, 56
	lu12i.w	$a2, -5
	ori	$a2, $a2, 512
	lu12i.w	$a3, 4
	ori	$a3, $a3, 3632
	.p2align	4, , 16
.LBB18_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_17 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a5, $sp, 56
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	add.d	$a4, $a5, $a4
	move	$a6, $a0
	move	$a7, $a2
	.p2align	4, , 16
.LBB18_17:                              # %vector.body93
                                        #   Parent Loop BB18_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr2, $a6, -64
	xvld	$xr4, $a6, -32
	xvld	$xr3, $a6, 0
	xvld	$xr1, $a6, 32
	xvpickve2gr.w	$t0, $xr2, 0
	vinsgr2vr.h	$vr0, $t0, 0
	xvpickve2gr.w	$t0, $xr2, 1
	vinsgr2vr.h	$vr0, $t0, 1
	xvpickve2gr.w	$t0, $xr2, 2
	vinsgr2vr.h	$vr0, $t0, 2
	xvpickve2gr.w	$t0, $xr2, 3
	vinsgr2vr.h	$vr0, $t0, 3
	xvpickve2gr.w	$t0, $xr2, 4
	vinsgr2vr.h	$vr0, $t0, 4
	xvpickve2gr.w	$t0, $xr2, 5
	vinsgr2vr.h	$vr0, $t0, 5
	xvpickve2gr.w	$t0, $xr2, 6
	vinsgr2vr.h	$vr0, $t0, 6
	xvpickve2gr.w	$t0, $xr2, 7
	vinsgr2vr.h	$vr0, $t0, 7
	xvpickve2gr.w	$t0, $xr4, 0
	vinsgr2vr.h	$vr2, $t0, 0
	xvpickve2gr.w	$t0, $xr4, 1
	vinsgr2vr.h	$vr2, $t0, 1
	xvpickve2gr.w	$t0, $xr4, 2
	vinsgr2vr.h	$vr2, $t0, 2
	xvpickve2gr.w	$t0, $xr4, 3
	vinsgr2vr.h	$vr2, $t0, 3
	xvpickve2gr.w	$t0, $xr4, 4
	vinsgr2vr.h	$vr2, $t0, 4
	xvpickve2gr.w	$t0, $xr4, 5
	vinsgr2vr.h	$vr2, $t0, 5
	xvpickve2gr.w	$t0, $xr4, 6
	vinsgr2vr.h	$vr2, $t0, 6
	xvpickve2gr.w	$t0, $xr4, 7
	vinsgr2vr.h	$vr2, $t0, 7
	xvpickve2gr.w	$t0, $xr3, 0
	vinsgr2vr.h	$vr4, $t0, 0
	xvpickve2gr.w	$t0, $xr3, 1
	vinsgr2vr.h	$vr4, $t0, 1
	xvpickve2gr.w	$t0, $xr3, 2
	vinsgr2vr.h	$vr4, $t0, 2
	xvpickve2gr.w	$t0, $xr3, 3
	vinsgr2vr.h	$vr4, $t0, 3
	xvpickve2gr.w	$t0, $xr3, 4
	vinsgr2vr.h	$vr4, $t0, 4
	xvpickve2gr.w	$t0, $xr3, 5
	vinsgr2vr.h	$vr4, $t0, 5
	xvpickve2gr.w	$t0, $xr3, 6
	vinsgr2vr.h	$vr4, $t0, 6
	xvpickve2gr.w	$t0, $xr3, 7
	vinsgr2vr.h	$vr4, $t0, 7
	xvpickve2gr.w	$t0, $xr1, 0
	vinsgr2vr.h	$vr3, $t0, 0
	xvpickve2gr.w	$t0, $xr1, 1
	vinsgr2vr.h	$vr3, $t0, 1
	xvpickve2gr.w	$t0, $xr1, 2
	vinsgr2vr.h	$vr3, $t0, 2
	xvpickve2gr.w	$t0, $xr1, 3
	vinsgr2vr.h	$vr3, $t0, 3
	xvpickve2gr.w	$t0, $xr1, 4
	vinsgr2vr.h	$vr3, $t0, 4
	xvpickve2gr.w	$t0, $xr1, 5
	vinsgr2vr.h	$vr3, $t0, 5
	xvpickve2gr.w	$t0, $xr1, 6
	vinsgr2vr.h	$vr3, $t0, 6
	xvpickve2gr.w	$t0, $xr1, 7
	vinsgr2vr.h	$vr3, $t0, 7
	add.d	$t0, $a5, $a7
	vstx	$vr0, $t0, $s4
	vstx	$vr2, $t0, $s0
	vstx	$vr4, $t0, $s1
	vstx	$vr3, $t0, $a3
	addi.d	$a7, $a7, 64
	addi.d	$a6, $a6, 128
	bnez	$a7, .LBB18_17
# %bb.18:                               # %.lr.ph.i24
                                        #   in Loop: Header=BB18_16 Depth=1
	ld.h	$a6, $s6, 0
	ld.h	$a7, $s6, 4
	ld.h	$t0, $s6, 8
	stx.h	$a6, $a5, $s4
	ld.h	$a6, $s6, 12
	st.h	$a7, $a4, 0
	stx.h	$t0, $a5, $t1
	ld.h	$a7, $s6, 16
	st.h	$a6, $a4, 4
	ld.h	$a6, $s6, 20
	ld.h	$t0, $s6, 24
	stx.h	$a7, $a5, $s2
	ld.h	$a7, $s6, 28
	st.h	$a6, $a4, 8
	stx.h	$t0, $a5, $s8
	ld.h	$a6, $s6, 32
	st.h	$a7, $a4, 12
	ld.h	$a7, $s6, 40
	ld.h	$t0, $s6, 48
	stx.h	$a6, $a5, $s0
	ld.h	$a6, $s6, 56
	stx.h	$a7, $a5, $s3
	stx.h	$t0, $a5, $fp
	ld.h	$a7, $s6, 36
	stx.h	$a6, $a5, $s7
	ld.h	$a5, $s6, 44
	ld.h	$a6, $s6, 52
	st.h	$a7, $a4, 16
	ld.h	$a7, $s6, 60
	st.h	$a5, $a4, 20
	st.h	$a6, $a4, 24
	addi.d	$s5, $s5, -1
	st.h	$a7, $a4, 28
	bnez	$s5, .LBB18_16
.LBB18_19:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp413:
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp414:
# %bb.20:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit36
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56
	beqz	$a0, .LBB18_22
# %bb.21:                               # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i38
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB18_22:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit42
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB18_23:
.Ltmp396:
	move	$s0, $a6
	move	$fp, $a4
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp397:
# %bb.24:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	ld.wu	$a1, $s5, 0
.Ltmp398:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp399:
# %bb.25:                               # %_ZNSolsEj.exit
.Ltmp400:
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp401:
# %bb.26:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.hu	$a1, $s0, $s1
.Ltmp402:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp403:
# %bb.27:                               # %_ZNSolsEt.exit
.Ltmp404:
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp405:
# %bb.28:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit21
	ldx.hu	$a1, $fp, $s1
.Ltmp406:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp407:
# %bb.29:                               # %_ZNSolsEt.exit23
.Ltmp408:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp409:
# %bb.30:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB18_31:                              # %.thread
.Ltmp392:
	move	$s1, $a0
	b	.LBB18_37
.LBB18_32:
.Ltmp389:
	move	$s1, $a0
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB18_33:
.Ltmp415:
	b	.LBB18_36
.LBB18_34:
.Ltmp410:
	b	.LBB18_36
.LBB18_35:
.Ltmp395:
.LBB18_36:
	move	$s1, $a0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56
	move	$s8, $a0
	beqz	$a0, .LBB18_38
.LBB18_37:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i31
	move	$a0, $s8
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB18_38:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end18:
	.size	_Z61benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint16_t_RN9benchmark5StateE, .Lfunc_end18-_Z61benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint16_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table18:
.Lexception18:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end18-.Lcst_begin18
.Lcst_begin18:
	.uleb128 .Lfunc_begin18-.Lfunc_begin18  # >> Call Site 1 <<
	.uleb128 .Ltmp387-.Lfunc_begin18        #   Call between .Lfunc_begin18 and .Ltmp387
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp387-.Lfunc_begin18        # >> Call Site 2 <<
	.uleb128 .Ltmp388-.Ltmp387              #   Call between .Ltmp387 and .Ltmp388
	.uleb128 .Ltmp389-.Lfunc_begin18        #     jumps to .Ltmp389
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp390-.Lfunc_begin18        # >> Call Site 3 <<
	.uleb128 .Ltmp391-.Ltmp390              #   Call between .Ltmp390 and .Ltmp391
	.uleb128 .Ltmp392-.Lfunc_begin18        #     jumps to .Ltmp392
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp393-.Lfunc_begin18        # >> Call Site 4 <<
	.uleb128 .Ltmp394-.Ltmp393              #   Call between .Ltmp393 and .Ltmp394
	.uleb128 .Ltmp395-.Lfunc_begin18        #     jumps to .Ltmp395
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp411-.Lfunc_begin18        # >> Call Site 5 <<
	.uleb128 .Ltmp414-.Ltmp411              #   Call between .Ltmp411 and .Ltmp414
	.uleb128 .Ltmp415-.Lfunc_begin18        #     jumps to .Ltmp415
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp414-.Lfunc_begin18        # >> Call Site 6 <<
	.uleb128 .Ltmp396-.Ltmp414              #   Call between .Ltmp414 and .Ltmp396
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp396-.Lfunc_begin18        # >> Call Site 7 <<
	.uleb128 .Ltmp409-.Ltmp396              #   Call between .Ltmp396 and .Ltmp409
	.uleb128 .Ltmp410-.Lfunc_begin18        #     jumps to .Ltmp410
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp409-.Lfunc_begin18        # >> Call Site 8 <<
	.uleb128 .Lfunc_end18-.Ltmp409          #   Call between .Ltmp409 and .Lfunc_end18
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end18:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z62benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint16_t_RN9benchmark5StateE # -- Begin function _Z62benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint16_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z62benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint16_t_RN9benchmark5StateE,@function
_Z62benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint16_t_RN9benchmark5StateE: # @_Z62benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint16_t_RN9benchmark5StateE
.Lfunc_begin19:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception19
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$fp, 9
	ori	$s4, $fp, 3136
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$s2, $a0
.Ltmp416:
	lu12i.w	$s7, 4
	ori	$s1, $s7, 3616
	move	$a0, $s1
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp417:
# %bb.1:                                # %.split
	move	$s8, $a0
	st.d	$a0, $sp, 56
.Ltmp419:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp420:
# %bb.2:
	move	$s3, $a0
	move	$s0, $zero
	ori	$fp, $fp, 3072
	add.d	$s6, $s2, $fp
	ori	$a0, $s7, 3586
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	add.d	$a0, $s8, $a0
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 64
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	st.d	$s3, $sp, 40                    # 8-byte Folded Spill
	.p2align	4, , 16
.LBB19_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp422:
	addi.d	$a0, $sp, 64
	addi.d	$a2, $sp, 64
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp423:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB19_3 Depth=1
	stx.w	$a0, $s2, $s0
	addi.d	$s0, $s0, 4
	bne	$s0, $s4, .LBB19_3
# %bb.5:                                # %vector.ph
	addi.d	$a0, $s2, 4
	lu12i.w	$a6, -5
	ori	$a1, $a6, 480
	ori	$a2, $s7, 3618
	.p2align	4, , 16
.LBB19_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ld.h	$a3, $a0, -4
	ld.h	$a4, $a0, 0
	add.d	$a5, $s3, $a1
	stx.h	$a3, $a5, $s1
	stx.h	$a4, $a5, $a2
	addi.d	$a1, $a1, 4
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB19_6
# %bb.7:                                # %vector.body83.preheader
	move	$a0, $zero
	addi.d	$a1, $s8, 64
	.p2align	4, , 16
.LBB19_8:                               # %vector.body83
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $s2, $a0
	xvld	$xr3, $a2, 32
	xvldx	$xr8, $s2, $a0
	xvld	$xr6, $a2, 96
	xvld	$xr7, $a2, 64
	xvld	$xr4, $a2, 160
	xvld	$xr5, $a2, 128
	xvld	$xr1, $a2, 224
	xvld	$xr2, $a2, 192
	xvpickve2gr.w	$a2, $xr8, 0
	vinsgr2vr.h	$vr0, $a2, 0
	xvpickve2gr.w	$a2, $xr8, 1
	vinsgr2vr.h	$vr0, $a2, 1
	xvpickve2gr.w	$a2, $xr8, 2
	vinsgr2vr.h	$vr0, $a2, 2
	xvpickve2gr.w	$a2, $xr8, 3
	vinsgr2vr.h	$vr0, $a2, 3
	xvpickve2gr.w	$a2, $xr8, 4
	vinsgr2vr.h	$vr0, $a2, 4
	xvpickve2gr.w	$a2, $xr8, 5
	vinsgr2vr.h	$vr0, $a2, 5
	xvpickve2gr.w	$a2, $xr8, 6
	vinsgr2vr.h	$vr0, $a2, 6
	xvpickve2gr.w	$a2, $xr8, 7
	vinsgr2vr.h	$vr0, $a2, 7
	xvpickve2gr.w	$a2, $xr3, 0
	xvori.b	$xr8, $xr0, 0
	xvpermi.q	$xr8, $xr0, 1
	vinsgr2vr.h	$vr8, $a2, 0
	xvpermi.q	$xr0, $xr8, 2
	xvpickve2gr.w	$a2, $xr3, 1
	xvori.b	$xr8, $xr0, 0
	xvpermi.q	$xr8, $xr0, 1
	vinsgr2vr.h	$vr8, $a2, 1
	xvpermi.q	$xr0, $xr8, 2
	xvpickve2gr.w	$a2, $xr3, 2
	xvori.b	$xr8, $xr0, 0
	xvpermi.q	$xr8, $xr0, 1
	vinsgr2vr.h	$vr8, $a2, 2
	xvpermi.q	$xr0, $xr8, 2
	xvpickve2gr.w	$a2, $xr3, 3
	xvori.b	$xr8, $xr0, 0
	xvpermi.q	$xr8, $xr0, 1
	vinsgr2vr.h	$vr8, $a2, 3
	xvpermi.q	$xr0, $xr8, 2
	xvpickve2gr.w	$a2, $xr3, 4
	xvori.b	$xr8, $xr0, 0
	xvpermi.q	$xr8, $xr0, 1
	vinsgr2vr.h	$vr8, $a2, 4
	xvpermi.q	$xr0, $xr8, 2
	xvpickve2gr.w	$a2, $xr3, 5
	xvori.b	$xr8, $xr0, 0
	xvpermi.q	$xr8, $xr0, 1
	vinsgr2vr.h	$vr8, $a2, 5
	xvpermi.q	$xr0, $xr8, 2
	xvpickve2gr.w	$a2, $xr3, 6
	xvori.b	$xr8, $xr0, 0
	xvpermi.q	$xr8, $xr0, 1
	vinsgr2vr.h	$vr8, $a2, 6
	xvpermi.q	$xr0, $xr8, 2
	xvpickve2gr.w	$a2, $xr3, 7
	xvori.b	$xr3, $xr0, 0
	xvpermi.q	$xr3, $xr0, 1
	vinsgr2vr.h	$vr3, $a2, 7
	xvpermi.q	$xr0, $xr3, 2
	xvpickve2gr.w	$a2, $xr7, 0
	vinsgr2vr.h	$vr3, $a2, 0
	xvpickve2gr.w	$a2, $xr7, 1
	vinsgr2vr.h	$vr3, $a2, 1
	xvpickve2gr.w	$a2, $xr7, 2
	vinsgr2vr.h	$vr3, $a2, 2
	xvpickve2gr.w	$a2, $xr7, 3
	vinsgr2vr.h	$vr3, $a2, 3
	xvpickve2gr.w	$a2, $xr7, 4
	vinsgr2vr.h	$vr3, $a2, 4
	xvpickve2gr.w	$a2, $xr7, 5
	vinsgr2vr.h	$vr3, $a2, 5
	xvpickve2gr.w	$a2, $xr7, 6
	vinsgr2vr.h	$vr3, $a2, 6
	xvpickve2gr.w	$a2, $xr7, 7
	vinsgr2vr.h	$vr3, $a2, 7
	xvpickve2gr.w	$a2, $xr6, 0
	xvori.b	$xr7, $xr3, 0
	xvpermi.q	$xr7, $xr3, 1
	vinsgr2vr.h	$vr7, $a2, 0
	xvpermi.q	$xr3, $xr7, 2
	xvpickve2gr.w	$a2, $xr6, 1
	xvori.b	$xr7, $xr3, 0
	xvpermi.q	$xr7, $xr3, 1
	vinsgr2vr.h	$vr7, $a2, 1
	xvpermi.q	$xr3, $xr7, 2
	xvpickve2gr.w	$a2, $xr6, 2
	xvori.b	$xr7, $xr3, 0
	xvpermi.q	$xr7, $xr3, 1
	vinsgr2vr.h	$vr7, $a2, 2
	xvpermi.q	$xr3, $xr7, 2
	xvpickve2gr.w	$a2, $xr6, 3
	xvori.b	$xr7, $xr3, 0
	xvpermi.q	$xr7, $xr3, 1
	vinsgr2vr.h	$vr7, $a2, 3
	xvpermi.q	$xr3, $xr7, 2
	xvpickve2gr.w	$a2, $xr6, 4
	xvori.b	$xr7, $xr3, 0
	xvpermi.q	$xr7, $xr3, 1
	vinsgr2vr.h	$vr7, $a2, 4
	xvpermi.q	$xr3, $xr7, 2
	xvpickve2gr.w	$a2, $xr6, 5
	xvori.b	$xr7, $xr3, 0
	xvpermi.q	$xr7, $xr3, 1
	vinsgr2vr.h	$vr7, $a2, 5
	xvpermi.q	$xr3, $xr7, 2
	xvpickve2gr.w	$a2, $xr6, 6
	xvori.b	$xr7, $xr3, 0
	xvpermi.q	$xr7, $xr3, 1
	vinsgr2vr.h	$vr7, $a2, 6
	xvpermi.q	$xr3, $xr7, 2
	xvpickve2gr.w	$a2, $xr6, 7
	xvori.b	$xr6, $xr3, 0
	xvpermi.q	$xr6, $xr3, 1
	vinsgr2vr.h	$vr6, $a2, 7
	xvpermi.q	$xr3, $xr6, 2
	xvpickve2gr.w	$a2, $xr5, 0
	vinsgr2vr.h	$vr6, $a2, 0
	xvpickve2gr.w	$a2, $xr5, 1
	vinsgr2vr.h	$vr6, $a2, 1
	xvpickve2gr.w	$a2, $xr5, 2
	vinsgr2vr.h	$vr6, $a2, 2
	xvpickve2gr.w	$a2, $xr5, 3
	vinsgr2vr.h	$vr6, $a2, 3
	xvpickve2gr.w	$a2, $xr5, 4
	vinsgr2vr.h	$vr6, $a2, 4
	xvpickve2gr.w	$a2, $xr5, 5
	vinsgr2vr.h	$vr6, $a2, 5
	xvpickve2gr.w	$a2, $xr5, 6
	vinsgr2vr.h	$vr6, $a2, 6
	xvpickve2gr.w	$a2, $xr5, 7
	vinsgr2vr.h	$vr6, $a2, 7
	xvpickve2gr.w	$a2, $xr4, 0
	xvori.b	$xr5, $xr6, 0
	xvpermi.q	$xr5, $xr6, 1
	vinsgr2vr.h	$vr5, $a2, 0
	xvpermi.q	$xr6, $xr5, 2
	xvpickve2gr.w	$a2, $xr4, 1
	xvori.b	$xr5, $xr6, 0
	xvpermi.q	$xr5, $xr6, 1
	vinsgr2vr.h	$vr5, $a2, 1
	xvpermi.q	$xr6, $xr5, 2
	xvpickve2gr.w	$a2, $xr4, 2
	xvori.b	$xr5, $xr6, 0
	xvpermi.q	$xr5, $xr6, 1
	vinsgr2vr.h	$vr5, $a2, 2
	xvpermi.q	$xr6, $xr5, 2
	xvpickve2gr.w	$a2, $xr4, 3
	xvori.b	$xr5, $xr6, 0
	xvpermi.q	$xr5, $xr6, 1
	vinsgr2vr.h	$vr5, $a2, 3
	xvpermi.q	$xr6, $xr5, 2
	xvpickve2gr.w	$a2, $xr4, 4
	xvori.b	$xr5, $xr6, 0
	xvpermi.q	$xr5, $xr6, 1
	vinsgr2vr.h	$vr5, $a2, 4
	xvpermi.q	$xr6, $xr5, 2
	xvpickve2gr.w	$a2, $xr4, 5
	xvori.b	$xr5, $xr6, 0
	xvpermi.q	$xr5, $xr6, 1
	vinsgr2vr.h	$vr5, $a2, 5
	xvpermi.q	$xr6, $xr5, 2
	xvpickve2gr.w	$a2, $xr4, 6
	xvori.b	$xr5, $xr6, 0
	xvpermi.q	$xr5, $xr6, 1
	vinsgr2vr.h	$vr5, $a2, 6
	xvpermi.q	$xr6, $xr5, 2
	xvpickve2gr.w	$a2, $xr4, 7
	xvori.b	$xr4, $xr6, 0
	xvpermi.q	$xr4, $xr6, 1
	vinsgr2vr.h	$vr4, $a2, 7
	xvpermi.q	$xr6, $xr4, 2
	xvpickve2gr.w	$a2, $xr2, 0
	vinsgr2vr.h	$vr4, $a2, 0
	xvpickve2gr.w	$a2, $xr2, 1
	vinsgr2vr.h	$vr4, $a2, 1
	xvpickve2gr.w	$a2, $xr2, 2
	vinsgr2vr.h	$vr4, $a2, 2
	xvpickve2gr.w	$a2, $xr2, 3
	vinsgr2vr.h	$vr4, $a2, 3
	xvpickve2gr.w	$a2, $xr2, 4
	vinsgr2vr.h	$vr4, $a2, 4
	xvpickve2gr.w	$a2, $xr2, 5
	vinsgr2vr.h	$vr4, $a2, 5
	xvpickve2gr.w	$a2, $xr2, 6
	vinsgr2vr.h	$vr4, $a2, 6
	xvpickve2gr.w	$a2, $xr2, 7
	vinsgr2vr.h	$vr4, $a2, 7
	xvpickve2gr.w	$a2, $xr1, 0
	xvori.b	$xr2, $xr4, 0
	xvpermi.q	$xr2, $xr4, 1
	vinsgr2vr.h	$vr2, $a2, 0
	xvpermi.q	$xr4, $xr2, 2
	xvpickve2gr.w	$a2, $xr1, 1
	xvori.b	$xr2, $xr4, 0
	xvpermi.q	$xr2, $xr4, 1
	vinsgr2vr.h	$vr2, $a2, 1
	xvpermi.q	$xr4, $xr2, 2
	xvpickve2gr.w	$a2, $xr1, 2
	xvori.b	$xr2, $xr4, 0
	xvpermi.q	$xr2, $xr4, 1
	vinsgr2vr.h	$vr2, $a2, 2
	xvpermi.q	$xr4, $xr2, 2
	xvpickve2gr.w	$a2, $xr1, 3
	xvori.b	$xr2, $xr4, 0
	xvpermi.q	$xr2, $xr4, 1
	vinsgr2vr.h	$vr2, $a2, 3
	xvpermi.q	$xr4, $xr2, 2
	xvpickve2gr.w	$a2, $xr1, 4
	xvori.b	$xr2, $xr4, 0
	xvpermi.q	$xr2, $xr4, 1
	vinsgr2vr.h	$vr2, $a2, 4
	xvpermi.q	$xr4, $xr2, 2
	xvpickve2gr.w	$a2, $xr1, 5
	xvori.b	$xr2, $xr4, 0
	xvpermi.q	$xr2, $xr4, 1
	vinsgr2vr.h	$vr2, $a2, 5
	xvpermi.q	$xr4, $xr2, 2
	xvpickve2gr.w	$a2, $xr1, 6
	xvori.b	$xr2, $xr4, 0
	xvpermi.q	$xr2, $xr4, 1
	vinsgr2vr.h	$vr2, $a2, 6
	xvpermi.q	$xr4, $xr2, 2
	xvpickve2gr.w	$a2, $xr1, 7
	xvori.b	$xr1, $xr4, 0
	xvpermi.q	$xr1, $xr4, 1
	vinsgr2vr.h	$vr1, $a2, 7
	xvpermi.q	$xr4, $xr1, 2
	xvst	$xr0, $a1, -64
	xvst	$xr3, $a1, -32
	xvst	$xr6, $a1, 0
	xvst	$xr4, $a1, 32
	addi.d	$a0, $a0, 256
	addi.d	$a1, $a1, 128
	bne	$a0, $fp, .LBB19_8
# %bb.9:                                # %.lr.ph.i
	ld.h	$a0, $s6, 0
	ld.h	$a1, $s6, 4
	ori	$s4, $s7, 3584
	stx.h	$a0, $s8, $s4
	ld.h	$a0, $s6, 8
	ld.d	$a7, $sp, 16                    # 8-byte Folded Reload
	st.h	$a1, $a7, 0
	ld.h	$a1, $s6, 12
	ori	$a5, $s7, 3588
	stx.h	$a0, $s8, $a5
	ld.h	$a0, $s6, 16
	st.h	$a1, $a7, 4
	ld.h	$a1, $s6, 20
	move	$s5, $s2
	ori	$s2, $s7, 3592
	stx.h	$a0, $s8, $s2
	ld.h	$a0, $s6, 24
	st.h	$a1, $a7, 8
	ld.h	$a1, $s6, 28
	move	$a4, $s8
	ori	$s8, $s7, 3596
	stx.h	$a0, $a4, $s8
	ld.h	$a0, $s6, 32
	st.h	$a1, $a7, 12
	ld.h	$a1, $s6, 36
	ori	$s0, $s7, 3600
	stx.h	$a0, $a4, $s0
	ld.h	$a0, $s6, 40
	st.h	$a1, $a7, 16
	ld.h	$a1, $s6, 44
	ori	$s3, $s7, 3604
	stx.h	$a0, $a4, $s3
	ld.h	$a0, $s6, 48
	st.h	$a1, $a7, 20
	ori	$fp, $s7, 3608
	ld.h	$a1, $s6, 52
	stx.h	$a0, $a4, $fp
	ld.h	$a0, $s6, 56
	ld.h	$a2, $s6, 60
	st.h	$a1, $a7, 24
	ori	$s7, $s7, 3612
	move	$a3, $a4
	stx.h	$a0, $a4, $s7
	st.h	$a2, $a7, 28
	ori	$a0, $a6, 480
	.p2align	4, , 16
.LBB19_10:                              # %_ZL28truncOrZextVecInLoopWithVW16IjtEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a6, $a3, $a0
	ldx.hu	$a1, $a6, $s1
	ld.d	$a2, $sp, 40                    # 8-byte Folded Reload
	add.d	$a4, $a2, $a0
	ldx.hu	$a2, $a4, $s1
	bne	$a1, $a2, .LBB19_23
# %bb.11:                               # %_ZL28truncOrZextVecInLoopWithVW16IjtEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB19_10 Depth=1
	addi.d	$a0, $a0, 2
	addi.d	$s5, $s5, 4
	bnez	$a0, .LBB19_10
# %bb.12:
	st.d	$a5, $sp, 16                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	ld.w	$a1, $a0, 28
	st.d	$a1, $sp, 8                     # 8-byte Folded Spill
	ld.d	$s5, $a0, 16
.Ltmp440:
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp441:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	ld.d	$t2, $sp, 16                    # 8-byte Folded Reload
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	bnez	$a0, .LBB19_19
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s5, .LBB19_19
# %bb.15:                               # %.lr.ph.preheader
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	addi.d	$a0, $a0, 128
	addi.d	$a1, $sp, 56
	lu12i.w	$a2, -5
	ori	$a2, $a2, 512
	lu12i.w	$a4, 4
	ori	$a3, $a4, 3648
	ori	$a4, $a4, 3680
	.p2align	4, , 16
.LBB19_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_17 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a6, $sp, 56
	ld.d	$a5, $sp, 48                    # 8-byte Folded Reload
	add.d	$a5, $a6, $a5
	move	$a7, $a0
	move	$t0, $a2
	.p2align	4, , 16
.LBB19_17:                              # %vector.body93
                                        #   Parent Loop BB19_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr3, $a7, -96
	xvld	$xr8, $a7, -128
	xvld	$xr6, $a7, -32
	xvld	$xr7, $a7, -64
	xvld	$xr4, $a7, 32
	xvld	$xr5, $a7, 0
	xvld	$xr1, $a7, 96
	xvld	$xr2, $a7, 64
	xvpickve2gr.w	$t1, $xr8, 0
	vinsgr2vr.h	$vr0, $t1, 0
	xvpickve2gr.w	$t1, $xr8, 1
	vinsgr2vr.h	$vr0, $t1, 1
	xvpickve2gr.w	$t1, $xr8, 2
	vinsgr2vr.h	$vr0, $t1, 2
	xvpickve2gr.w	$t1, $xr8, 3
	vinsgr2vr.h	$vr0, $t1, 3
	xvpickve2gr.w	$t1, $xr8, 4
	vinsgr2vr.h	$vr0, $t1, 4
	xvpickve2gr.w	$t1, $xr8, 5
	vinsgr2vr.h	$vr0, $t1, 5
	xvpickve2gr.w	$t1, $xr8, 6
	vinsgr2vr.h	$vr0, $t1, 6
	xvpickve2gr.w	$t1, $xr8, 7
	vinsgr2vr.h	$vr0, $t1, 7
	xvpickve2gr.w	$t1, $xr3, 0
	xvori.b	$xr8, $xr0, 0
	xvpermi.q	$xr8, $xr0, 1
	vinsgr2vr.h	$vr8, $t1, 0
	xvpermi.q	$xr0, $xr8, 2
	xvpickve2gr.w	$t1, $xr3, 1
	xvori.b	$xr8, $xr0, 0
	xvpermi.q	$xr8, $xr0, 1
	vinsgr2vr.h	$vr8, $t1, 1
	xvpermi.q	$xr0, $xr8, 2
	xvpickve2gr.w	$t1, $xr3, 2
	xvori.b	$xr8, $xr0, 0
	xvpermi.q	$xr8, $xr0, 1
	vinsgr2vr.h	$vr8, $t1, 2
	xvpermi.q	$xr0, $xr8, 2
	xvpickve2gr.w	$t1, $xr3, 3
	xvori.b	$xr8, $xr0, 0
	xvpermi.q	$xr8, $xr0, 1
	vinsgr2vr.h	$vr8, $t1, 3
	xvpermi.q	$xr0, $xr8, 2
	xvpickve2gr.w	$t1, $xr3, 4
	xvori.b	$xr8, $xr0, 0
	xvpermi.q	$xr8, $xr0, 1
	vinsgr2vr.h	$vr8, $t1, 4
	xvpermi.q	$xr0, $xr8, 2
	xvpickve2gr.w	$t1, $xr3, 5
	xvori.b	$xr8, $xr0, 0
	xvpermi.q	$xr8, $xr0, 1
	vinsgr2vr.h	$vr8, $t1, 5
	xvpermi.q	$xr0, $xr8, 2
	xvpickve2gr.w	$t1, $xr3, 6
	xvori.b	$xr8, $xr0, 0
	xvpermi.q	$xr8, $xr0, 1
	vinsgr2vr.h	$vr8, $t1, 6
	xvpermi.q	$xr0, $xr8, 2
	xvpickve2gr.w	$t1, $xr3, 7
	xvori.b	$xr3, $xr0, 0
	xvpermi.q	$xr3, $xr0, 1
	vinsgr2vr.h	$vr3, $t1, 7
	xvpermi.q	$xr0, $xr3, 2
	xvpickve2gr.w	$t1, $xr7, 0
	vinsgr2vr.h	$vr3, $t1, 0
	xvpickve2gr.w	$t1, $xr7, 1
	vinsgr2vr.h	$vr3, $t1, 1
	xvpickve2gr.w	$t1, $xr7, 2
	vinsgr2vr.h	$vr3, $t1, 2
	xvpickve2gr.w	$t1, $xr7, 3
	vinsgr2vr.h	$vr3, $t1, 3
	xvpickve2gr.w	$t1, $xr7, 4
	vinsgr2vr.h	$vr3, $t1, 4
	xvpickve2gr.w	$t1, $xr7, 5
	vinsgr2vr.h	$vr3, $t1, 5
	xvpickve2gr.w	$t1, $xr7, 6
	vinsgr2vr.h	$vr3, $t1, 6
	xvpickve2gr.w	$t1, $xr7, 7
	vinsgr2vr.h	$vr3, $t1, 7
	xvpickve2gr.w	$t1, $xr6, 0
	xvori.b	$xr7, $xr3, 0
	xvpermi.q	$xr7, $xr3, 1
	vinsgr2vr.h	$vr7, $t1, 0
	xvpermi.q	$xr3, $xr7, 2
	xvpickve2gr.w	$t1, $xr6, 1
	xvori.b	$xr7, $xr3, 0
	xvpermi.q	$xr7, $xr3, 1
	vinsgr2vr.h	$vr7, $t1, 1
	xvpermi.q	$xr3, $xr7, 2
	xvpickve2gr.w	$t1, $xr6, 2
	xvori.b	$xr7, $xr3, 0
	xvpermi.q	$xr7, $xr3, 1
	vinsgr2vr.h	$vr7, $t1, 2
	xvpermi.q	$xr3, $xr7, 2
	xvpickve2gr.w	$t1, $xr6, 3
	xvori.b	$xr7, $xr3, 0
	xvpermi.q	$xr7, $xr3, 1
	vinsgr2vr.h	$vr7, $t1, 3
	xvpermi.q	$xr3, $xr7, 2
	xvpickve2gr.w	$t1, $xr6, 4
	xvori.b	$xr7, $xr3, 0
	xvpermi.q	$xr7, $xr3, 1
	vinsgr2vr.h	$vr7, $t1, 4
	xvpermi.q	$xr3, $xr7, 2
	xvpickve2gr.w	$t1, $xr6, 5
	xvori.b	$xr7, $xr3, 0
	xvpermi.q	$xr7, $xr3, 1
	vinsgr2vr.h	$vr7, $t1, 5
	xvpermi.q	$xr3, $xr7, 2
	xvpickve2gr.w	$t1, $xr6, 6
	xvori.b	$xr7, $xr3, 0
	xvpermi.q	$xr7, $xr3, 1
	vinsgr2vr.h	$vr7, $t1, 6
	xvpermi.q	$xr3, $xr7, 2
	xvpickve2gr.w	$t1, $xr6, 7
	xvori.b	$xr6, $xr3, 0
	xvpermi.q	$xr6, $xr3, 1
	vinsgr2vr.h	$vr6, $t1, 7
	xvpermi.q	$xr3, $xr6, 2
	xvpickve2gr.w	$t1, $xr5, 0
	vinsgr2vr.h	$vr6, $t1, 0
	xvpickve2gr.w	$t1, $xr5, 1
	vinsgr2vr.h	$vr6, $t1, 1
	xvpickve2gr.w	$t1, $xr5, 2
	vinsgr2vr.h	$vr6, $t1, 2
	xvpickve2gr.w	$t1, $xr5, 3
	vinsgr2vr.h	$vr6, $t1, 3
	xvpickve2gr.w	$t1, $xr5, 4
	vinsgr2vr.h	$vr6, $t1, 4
	xvpickve2gr.w	$t1, $xr5, 5
	vinsgr2vr.h	$vr6, $t1, 5
	xvpickve2gr.w	$t1, $xr5, 6
	vinsgr2vr.h	$vr6, $t1, 6
	xvpickve2gr.w	$t1, $xr5, 7
	vinsgr2vr.h	$vr6, $t1, 7
	xvpickve2gr.w	$t1, $xr4, 0
	xvori.b	$xr5, $xr6, 0
	xvpermi.q	$xr5, $xr6, 1
	vinsgr2vr.h	$vr5, $t1, 0
	xvpermi.q	$xr6, $xr5, 2
	xvpickve2gr.w	$t1, $xr4, 1
	xvori.b	$xr5, $xr6, 0
	xvpermi.q	$xr5, $xr6, 1
	vinsgr2vr.h	$vr5, $t1, 1
	xvpermi.q	$xr6, $xr5, 2
	xvpickve2gr.w	$t1, $xr4, 2
	xvori.b	$xr5, $xr6, 0
	xvpermi.q	$xr5, $xr6, 1
	vinsgr2vr.h	$vr5, $t1, 2
	xvpermi.q	$xr6, $xr5, 2
	xvpickve2gr.w	$t1, $xr4, 3
	xvori.b	$xr5, $xr6, 0
	xvpermi.q	$xr5, $xr6, 1
	vinsgr2vr.h	$vr5, $t1, 3
	xvpermi.q	$xr6, $xr5, 2
	xvpickve2gr.w	$t1, $xr4, 4
	xvori.b	$xr5, $xr6, 0
	xvpermi.q	$xr5, $xr6, 1
	vinsgr2vr.h	$vr5, $t1, 4
	xvpermi.q	$xr6, $xr5, 2
	xvpickve2gr.w	$t1, $xr4, 5
	xvori.b	$xr5, $xr6, 0
	xvpermi.q	$xr5, $xr6, 1
	vinsgr2vr.h	$vr5, $t1, 5
	xvpermi.q	$xr6, $xr5, 2
	xvpickve2gr.w	$t1, $xr4, 6
	xvori.b	$xr5, $xr6, 0
	xvpermi.q	$xr5, $xr6, 1
	vinsgr2vr.h	$vr5, $t1, 6
	xvpermi.q	$xr6, $xr5, 2
	xvpickve2gr.w	$t1, $xr4, 7
	xvori.b	$xr4, $xr6, 0
	xvpermi.q	$xr4, $xr6, 1
	vinsgr2vr.h	$vr4, $t1, 7
	xvpermi.q	$xr6, $xr4, 2
	xvpickve2gr.w	$t1, $xr2, 0
	vinsgr2vr.h	$vr4, $t1, 0
	xvpickve2gr.w	$t1, $xr2, 1
	vinsgr2vr.h	$vr4, $t1, 1
	xvpickve2gr.w	$t1, $xr2, 2
	vinsgr2vr.h	$vr4, $t1, 2
	xvpickve2gr.w	$t1, $xr2, 3
	vinsgr2vr.h	$vr4, $t1, 3
	xvpickve2gr.w	$t1, $xr2, 4
	vinsgr2vr.h	$vr4, $t1, 4
	xvpickve2gr.w	$t1, $xr2, 5
	vinsgr2vr.h	$vr4, $t1, 5
	xvpickve2gr.w	$t1, $xr2, 6
	vinsgr2vr.h	$vr4, $t1, 6
	xvpickve2gr.w	$t1, $xr2, 7
	vinsgr2vr.h	$vr4, $t1, 7
	xvpickve2gr.w	$t1, $xr1, 0
	xvori.b	$xr2, $xr4, 0
	xvpermi.q	$xr2, $xr4, 1
	vinsgr2vr.h	$vr2, $t1, 0
	xvpermi.q	$xr4, $xr2, 2
	xvpickve2gr.w	$t1, $xr1, 1
	xvori.b	$xr2, $xr4, 0
	xvpermi.q	$xr2, $xr4, 1
	vinsgr2vr.h	$vr2, $t1, 1
	xvpermi.q	$xr4, $xr2, 2
	xvpickve2gr.w	$t1, $xr1, 2
	xvori.b	$xr2, $xr4, 0
	xvpermi.q	$xr2, $xr4, 1
	vinsgr2vr.h	$vr2, $t1, 2
	xvpermi.q	$xr4, $xr2, 2
	xvpickve2gr.w	$t1, $xr1, 3
	xvori.b	$xr2, $xr4, 0
	xvpermi.q	$xr2, $xr4, 1
	vinsgr2vr.h	$vr2, $t1, 3
	xvpermi.q	$xr4, $xr2, 2
	xvpickve2gr.w	$t1, $xr1, 4
	xvori.b	$xr2, $xr4, 0
	xvpermi.q	$xr2, $xr4, 1
	vinsgr2vr.h	$vr2, $t1, 4
	xvpermi.q	$xr4, $xr2, 2
	xvpickve2gr.w	$t1, $xr1, 5
	xvori.b	$xr2, $xr4, 0
	xvpermi.q	$xr2, $xr4, 1
	vinsgr2vr.h	$vr2, $t1, 5
	xvpermi.q	$xr4, $xr2, 2
	xvpickve2gr.w	$t1, $xr1, 6
	xvori.b	$xr2, $xr4, 0
	xvpermi.q	$xr2, $xr4, 1
	vinsgr2vr.h	$vr2, $t1, 6
	xvpermi.q	$xr4, $xr2, 2
	xvpickve2gr.w	$t1, $xr1, 7
	xvori.b	$xr1, $xr4, 0
	xvpermi.q	$xr1, $xr4, 1
	vinsgr2vr.h	$vr1, $t1, 7
	xvpermi.q	$xr4, $xr1, 2
	add.d	$t1, $a6, $t0
	xvstx	$xr0, $t1, $s4
	xvstx	$xr3, $t1, $s1
	xvstx	$xr6, $t1, $a3
	xvstx	$xr4, $t1, $a4
	addi.d	$t0, $t0, 128
	addi.d	$a7, $a7, 256
	bnez	$t0, .LBB19_17
# %bb.18:                               # %.lr.ph.i24
                                        #   in Loop: Header=BB19_16 Depth=1
	ld.h	$a7, $s6, 0
	ld.h	$t0, $s6, 4
	ld.h	$t1, $s6, 8
	stx.h	$a7, $a6, $s4
	ld.h	$a7, $s6, 12
	st.h	$t0, $a5, 0
	stx.h	$t1, $a6, $t2
	ld.h	$t0, $s6, 16
	st.h	$a7, $a5, 4
	ld.h	$a7, $s6, 20
	ld.h	$t1, $s6, 24
	stx.h	$t0, $a6, $s2
	ld.h	$t0, $s6, 28
	st.h	$a7, $a5, 8
	stx.h	$t1, $a6, $s8
	ld.h	$a7, $s6, 32
	st.h	$t0, $a5, 12
	ld.h	$t0, $s6, 40
	ld.h	$t1, $s6, 48
	stx.h	$a7, $a6, $s0
	ld.h	$a7, $s6, 56
	stx.h	$t0, $a6, $s3
	stx.h	$t1, $a6, $fp
	ld.h	$t0, $s6, 36
	stx.h	$a7, $a6, $s7
	ld.h	$a6, $s6, 44
	ld.h	$a7, $s6, 52
	st.h	$t0, $a5, 16
	ld.h	$t0, $s6, 60
	st.h	$a6, $a5, 20
	st.h	$a7, $a5, 24
	addi.d	$s5, $s5, -1
	st.h	$t0, $a5, 28
	bnez	$s5, .LBB19_16
.LBB19_19:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp442:
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp443:
# %bb.20:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit36
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56
	beqz	$a0, .LBB19_22
# %bb.21:                               # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i38
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB19_22:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit42
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB19_23:
.Ltmp425:
	move	$s0, $a6
	move	$fp, $a4
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp426:
# %bb.24:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	ld.wu	$a1, $s5, 0
.Ltmp427:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp428:
# %bb.25:                               # %_ZNSolsEj.exit
.Ltmp429:
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp430:
# %bb.26:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.hu	$a1, $s0, $s1
.Ltmp431:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp432:
# %bb.27:                               # %_ZNSolsEt.exit
.Ltmp433:
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp434:
# %bb.28:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit21
	ldx.hu	$a1, $fp, $s1
.Ltmp435:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp436:
# %bb.29:                               # %_ZNSolsEt.exit23
.Ltmp437:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp438:
# %bb.30:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB19_31:                              # %.thread
.Ltmp421:
	move	$s1, $a0
	b	.LBB19_37
.LBB19_32:
.Ltmp418:
	move	$s1, $a0
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB19_33:
.Ltmp444:
	b	.LBB19_36
.LBB19_34:
.Ltmp439:
	b	.LBB19_36
.LBB19_35:
.Ltmp424:
.LBB19_36:
	move	$s1, $a0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56
	move	$s8, $a0
	beqz	$a0, .LBB19_38
.LBB19_37:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i31
	move	$a0, $s8
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB19_38:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end19:
	.size	_Z62benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint16_t_RN9benchmark5StateE, .Lfunc_end19-_Z62benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint16_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table19:
.Lexception19:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end19-.Lcst_begin19
.Lcst_begin19:
	.uleb128 .Lfunc_begin19-.Lfunc_begin19  # >> Call Site 1 <<
	.uleb128 .Ltmp416-.Lfunc_begin19        #   Call between .Lfunc_begin19 and .Ltmp416
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp416-.Lfunc_begin19        # >> Call Site 2 <<
	.uleb128 .Ltmp417-.Ltmp416              #   Call between .Ltmp416 and .Ltmp417
	.uleb128 .Ltmp418-.Lfunc_begin19        #     jumps to .Ltmp418
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp419-.Lfunc_begin19        # >> Call Site 3 <<
	.uleb128 .Ltmp420-.Ltmp419              #   Call between .Ltmp419 and .Ltmp420
	.uleb128 .Ltmp421-.Lfunc_begin19        #     jumps to .Ltmp421
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp422-.Lfunc_begin19        # >> Call Site 4 <<
	.uleb128 .Ltmp423-.Ltmp422              #   Call between .Ltmp422 and .Ltmp423
	.uleb128 .Ltmp424-.Lfunc_begin19        #     jumps to .Ltmp424
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp440-.Lfunc_begin19        # >> Call Site 5 <<
	.uleb128 .Ltmp443-.Ltmp440              #   Call between .Ltmp440 and .Ltmp443
	.uleb128 .Ltmp444-.Lfunc_begin19        #     jumps to .Ltmp444
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp443-.Lfunc_begin19        # >> Call Site 6 <<
	.uleb128 .Ltmp425-.Ltmp443              #   Call between .Ltmp443 and .Ltmp425
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp425-.Lfunc_begin19        # >> Call Site 7 <<
	.uleb128 .Ltmp438-.Ltmp425              #   Call between .Ltmp425 and .Ltmp438
	.uleb128 .Ltmp439-.Lfunc_begin19        #     jumps to .Ltmp439
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp438-.Lfunc_begin19        # >> Call Site 8 <<
	.uleb128 .Lfunc_end19-.Ltmp438          #   Call between .Ltmp438 and .Lfunc_end19
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end19:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z54benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint16_t_RN9benchmark5StateE # -- Begin function _Z54benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint16_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z54benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint16_t_RN9benchmark5StateE,@function
_Z54benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint16_t_RN9benchmark5StateE: # @_Z54benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint16_t_RN9benchmark5StateE
.Lfunc_begin20:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception20
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$s2, $a0
	lu12i.w	$a0, 9
	ori	$s4, $a0, 3136
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp445:
	lu12i.w	$s6, 4
	ori	$s1, $s6, 3616
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp446:
# %bb.1:
	move	$s3, $a0
	st.d	$a0, $sp, 0
.Ltmp448:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp449:
# %bb.2:
	move	$s0, $a0
	move	$s7, $zero
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 8
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB20_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp451:
	addi.d	$a0, $sp, 8
	addi.d	$a2, $sp, 8
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp452:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB20_3 Depth=1
	stx.w	$a0, $fp, $s7
	addi.d	$s7, $s7, 4
	bne	$s7, $s4, .LBB20_3
# %bb.5:                                # %vector.ph
	addi.d	$a0, $fp, 4
	lu12i.w	$s5, -5
	ori	$a1, $s5, 480
	ori	$a2, $s6, 3618
	.p2align	4, , 16
.LBB20_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ld.h	$a3, $a0, -4
	ld.h	$a4, $a0, 0
	add.d	$a5, $s0, $a1
	stx.h	$a3, $a5, $s1
	stx.h	$a4, $a5, $a2
	addi.d	$a1, $a1, 4
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB20_6
# %bb.7:                                # %vector.body83.preheader
	move	$a0, $zero
	addi.d	$a1, $s3, 8
	.p2align	4, , 16
.LBB20_8:                               # %vector.body83
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a0
	vldx	$vr0, $fp, $a0
	vld	$vr1, $a2, 16
	vpickev.h	$vr0, $vr0, $vr0
	vpickev.h	$vr1, $vr1, $vr1
	vpackev.d	$vr0, $vr1, $vr0
	vst	$vr0, $a1, -8
	addi.d	$a0, $a0, 32
	addi.d	$a1, $a1, 16
	bne	$a0, $s4, .LBB20_8
# %bb.9:                                # %_ZL20truncOrZextVecInLoopIjtEvPKT_PT0_i.exit.preheader.preheader
	ori	$a0, $s5, 480
	move	$s7, $fp
	.p2align	4, , 16
.LBB20_10:                              # %_ZL20truncOrZextVecInLoopIjtEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	add.d	$s6, $s3, $a0
	ldx.hu	$a1, $s6, $s1
	add.d	$s4, $s0, $a0
	ldx.hu	$a2, $s4, $s1
	bne	$a1, $a2, .LBB20_23
# %bb.11:                               # %_ZL20truncOrZextVecInLoopIjtEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB20_10 Depth=1
	addi.d	$a0, $a0, 2
	addi.d	$s7, $s7, 4
	bnez	$a0, .LBB20_10
# %bb.12:
	ld.w	$s4, $s2, 28
	ld.d	$s3, $s2, 16
.Ltmp469:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp470:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s4, .LBB20_19
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s3, .LBB20_19
# %bb.15:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 16
	addi.d	$a1, $sp, 0
	ori	$a2, $s5, 480
	.p2align	4, , 16
.LBB20_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_17 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a3, $sp, 0
	move	$a4, $a0
	move	$a5, $a2
	.p2align	4, , 16
.LBB20_17:                              # %vector.body91
                                        #   Parent Loop BB20_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr0, $a4, -16
	vld	$vr1, $a4, 0
	vpickev.h	$vr0, $vr0, $vr0
	vpickev.h	$vr1, $vr1, $vr1
	add.d	$a6, $a3, $a5
	vpackev.d	$vr0, $vr1, $vr0
	vstx	$vr0, $a6, $s1
	addi.d	$a5, $a5, 16
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB20_17
# %bb.18:                               # %_ZL20truncOrZextVecInLoopIjtEvPKT_PT0_i.exit28
                                        #   in Loop: Header=BB20_16 Depth=1
	addi.d	$s3, $s3, -1
	bnez	$s3, .LBB20_16
.LBB20_19:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp471:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp472:
# %bb.20:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit36
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 0
	beqz	$a0, .LBB20_22
# %bb.21:                               # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i38
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB20_22:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit42
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.LBB20_23:
.Ltmp454:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp455:
# %bb.24:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	ld.wu	$a1, $s7, 0
.Ltmp456:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp457:
# %bb.25:                               # %_ZNSolsEj.exit
.Ltmp458:
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp459:
# %bb.26:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.hu	$a1, $s6, $s1
.Ltmp460:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp461:
# %bb.27:                               # %_ZNSolsEt.exit
.Ltmp462:
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp463:
# %bb.28:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit21
	ldx.hu	$a1, $s4, $s1
.Ltmp464:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp465:
# %bb.29:                               # %_ZNSolsEt.exit23
.Ltmp466:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp467:
# %bb.30:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB20_31:                              # %.thread
.Ltmp450:
	move	$s1, $a0
	b	.LBB20_37
.LBB20_32:
.Ltmp447:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB20_33:
.Ltmp473:
	b	.LBB20_36
.LBB20_34:
.Ltmp468:
	b	.LBB20_36
.LBB20_35:
.Ltmp453:
.LBB20_36:
	move	$s1, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s3, $sp, 0
	beqz	$s3, .LBB20_38
.LBB20_37:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i31
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB20_38:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end20:
	.size	_Z54benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint16_t_RN9benchmark5StateE, .Lfunc_end20-_Z54benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint16_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table20:
.Lexception20:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end20-.Lcst_begin20
.Lcst_begin20:
	.uleb128 .Lfunc_begin20-.Lfunc_begin20  # >> Call Site 1 <<
	.uleb128 .Ltmp445-.Lfunc_begin20        #   Call between .Lfunc_begin20 and .Ltmp445
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp445-.Lfunc_begin20        # >> Call Site 2 <<
	.uleb128 .Ltmp446-.Ltmp445              #   Call between .Ltmp445 and .Ltmp446
	.uleb128 .Ltmp447-.Lfunc_begin20        #     jumps to .Ltmp447
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp448-.Lfunc_begin20        # >> Call Site 3 <<
	.uleb128 .Ltmp449-.Ltmp448              #   Call between .Ltmp448 and .Ltmp449
	.uleb128 .Ltmp450-.Lfunc_begin20        #     jumps to .Ltmp450
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp451-.Lfunc_begin20        # >> Call Site 4 <<
	.uleb128 .Ltmp452-.Ltmp451              #   Call between .Ltmp451 and .Ltmp452
	.uleb128 .Ltmp453-.Lfunc_begin20        #     jumps to .Ltmp453
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp469-.Lfunc_begin20        # >> Call Site 5 <<
	.uleb128 .Ltmp472-.Ltmp469              #   Call between .Ltmp469 and .Ltmp472
	.uleb128 .Ltmp473-.Lfunc_begin20        #     jumps to .Ltmp473
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp472-.Lfunc_begin20        # >> Call Site 6 <<
	.uleb128 .Ltmp454-.Ltmp472              #   Call between .Ltmp472 and .Ltmp454
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp454-.Lfunc_begin20        # >> Call Site 7 <<
	.uleb128 .Ltmp467-.Ltmp454              #   Call between .Ltmp454 and .Ltmp467
	.uleb128 .Ltmp468-.Lfunc_begin20        #     jumps to .Ltmp468
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp467-.Lfunc_begin20        # >> Call Site 8 <<
	.uleb128 .Lfunc_end20-.Ltmp467          #   Call between .Ltmp467 and .Lfunc_end20
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end20:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint16_t_RN9benchmark5StateE # -- Begin function _Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint16_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint16_t_RN9benchmark5StateE,@function
_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint16_t_RN9benchmark5StateE: # @_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint16_t_RN9benchmark5StateE
.Lfunc_begin21:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception21
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$s0, $a0
	lu12i.w	$s4, 9
	ori	$s3, $s4, 3136
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp474:
	lu12i.w	$s6, 4
	ori	$s1, $s6, 3616
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp475:
# %bb.1:
	move	$s2, $a0
	move	$s7, $zero
	ori	$a0, $s4, 3072
	add.d	$s5, $fp, $a0
	st.d	$s2, $sp, 0
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 8
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB21_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp477:
	addi.d	$a0, $sp, 8
	addi.d	$a2, $sp, 8
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp478:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB21_2 Depth=1
	stx.w	$a0, $fp, $s7
	addi.d	$s7, $s7, 4
	bne	$s7, $s3, .LBB21_2
# %bb.4:
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 8
	lu12i.w	$s4, -5
	ori	$s7, $s4, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s3, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB21_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp480:
	addi.d	$a0, $sp, 8
	addi.d	$a2, $sp, 8
	move	$a1, $s3
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp481:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB21_5 Depth=1
	add.d	$a1, $s2, $s7
	addi.d	$s7, $s7, 2
	stx.h	$a0, $a1, $s1
	bnez	$s7, .LBB21_5
# %bb.7:
	ld.w	$s3, $s0, 28
	ld.d	$s2, $s0, 16
.Ltmp483:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp484:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s3, .LBB21_14
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s2, .LBB21_14
# %bb.10:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 64
	addi.d	$a1, $sp, 0
	ori	$a2, $s6, 3586
	ori	$a3, $s4, 512
	ori	$a4, $s6, 3584
	ori	$a5, $s6, 3600
	ori	$a6, $s6, 3632
	ori	$a7, $s6, 3588
	ori	$t0, $s6, 3592
	ori	$t1, $s6, 3596
	ori	$t2, $s6, 3604
	ori	$t3, $s6, 3608
	ori	$t4, $s6, 3612
	.p2align	4, , 16
.LBB21_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_12 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$t6, $sp, 0
	add.d	$t5, $t6, $a2
	move	$t7, $a0
	move	$t8, $a3
	.p2align	4, , 16
.LBB21_12:                              # %vector.body
                                        #   Parent Loop BB21_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr7, $t7, -64
	xvld	$xr8, $t7, -32
	xvld	$xr6, $t7, 0
	xvld	$xr4, $t7, 32
	add.d	$s3, $t6, $t8
	vldx	$vr0, $s3, $a4
	vldx	$vr1, $s3, $a5
	vldx	$vr2, $s3, $s1
	vldx	$vr3, $s3, $a6
	xvpickve2gr.w	$s4, $xr7, 0
	vinsgr2vr.h	$vr5, $s4, 0
	xvpickve2gr.w	$s4, $xr7, 1
	vinsgr2vr.h	$vr5, $s4, 1
	xvpickve2gr.w	$s4, $xr7, 2
	vinsgr2vr.h	$vr5, $s4, 2
	xvpickve2gr.w	$s4, $xr7, 3
	vinsgr2vr.h	$vr5, $s4, 3
	xvpickve2gr.w	$s4, $xr7, 4
	vinsgr2vr.h	$vr5, $s4, 4
	xvpickve2gr.w	$s4, $xr7, 5
	vinsgr2vr.h	$vr5, $s4, 5
	xvpickve2gr.w	$s4, $xr7, 6
	vinsgr2vr.h	$vr5, $s4, 6
	xvpickve2gr.w	$s4, $xr7, 7
	vinsgr2vr.h	$vr5, $s4, 7
	xvpickve2gr.w	$s4, $xr8, 0
	vinsgr2vr.h	$vr7, $s4, 0
	xvpickve2gr.w	$s4, $xr8, 1
	vinsgr2vr.h	$vr7, $s4, 1
	xvpickve2gr.w	$s4, $xr8, 2
	vinsgr2vr.h	$vr7, $s4, 2
	xvpickve2gr.w	$s4, $xr8, 3
	vinsgr2vr.h	$vr7, $s4, 3
	xvpickve2gr.w	$s4, $xr8, 4
	vinsgr2vr.h	$vr7, $s4, 4
	xvpickve2gr.w	$s4, $xr8, 5
	vinsgr2vr.h	$vr7, $s4, 5
	xvpickve2gr.w	$s4, $xr8, 6
	vinsgr2vr.h	$vr7, $s4, 6
	xvpickve2gr.w	$s4, $xr8, 7
	vinsgr2vr.h	$vr7, $s4, 7
	xvpickve2gr.w	$s4, $xr6, 0
	vinsgr2vr.h	$vr8, $s4, 0
	xvpickve2gr.w	$s4, $xr6, 1
	vinsgr2vr.h	$vr8, $s4, 1
	xvpickve2gr.w	$s4, $xr6, 2
	vinsgr2vr.h	$vr8, $s4, 2
	xvpickve2gr.w	$s4, $xr6, 3
	vinsgr2vr.h	$vr8, $s4, 3
	xvpickve2gr.w	$s4, $xr6, 4
	vinsgr2vr.h	$vr8, $s4, 4
	xvpickve2gr.w	$s4, $xr6, 5
	vinsgr2vr.h	$vr8, $s4, 5
	xvpickve2gr.w	$s4, $xr6, 6
	vinsgr2vr.h	$vr8, $s4, 6
	xvpickve2gr.w	$s4, $xr6, 7
	vinsgr2vr.h	$vr8, $s4, 7
	xvpickve2gr.w	$s4, $xr4, 0
	vinsgr2vr.h	$vr6, $s4, 0
	xvpickve2gr.w	$s4, $xr4, 1
	vinsgr2vr.h	$vr6, $s4, 1
	xvpickve2gr.w	$s4, $xr4, 2
	vinsgr2vr.h	$vr6, $s4, 2
	xvpickve2gr.w	$s4, $xr4, 3
	vinsgr2vr.h	$vr6, $s4, 3
	xvpickve2gr.w	$s4, $xr4, 4
	vinsgr2vr.h	$vr6, $s4, 4
	xvpickve2gr.w	$s4, $xr4, 5
	vinsgr2vr.h	$vr6, $s4, 5
	xvpickve2gr.w	$s4, $xr4, 6
	vinsgr2vr.h	$vr6, $s4, 6
	xvpickve2gr.w	$s4, $xr4, 7
	vinsgr2vr.h	$vr6, $s4, 7
	vadd.h	$vr0, $vr0, $vr5
	vadd.h	$vr1, $vr1, $vr7
	vadd.h	$vr2, $vr2, $vr8
	vadd.h	$vr3, $vr3, $vr6
	vstx	$vr0, $s3, $a4
	vstx	$vr1, $s3, $a5
	vstx	$vr2, $s3, $s1
	vstx	$vr3, $s3, $a6
	addi.d	$t8, $t8, 64
	addi.d	$t7, $t7, 128
	bnez	$t8, .LBB21_12
# %bb.13:                               # %.lr.ph.i
                                        #   in Loop: Header=BB21_11 Depth=1
	ld.h	$t7, $s5, 0
	ldx.h	$t8, $t6, $a4
	add.d	$t7, $t8, $t7
	stx.h	$t7, $t6, $a4
	ld.h	$t7, $s5, 4
	ld.h	$t8, $t5, 0
	add.d	$t7, $t8, $t7
	st.h	$t7, $t5, 0
	ld.h	$t7, $s5, 8
	ldx.h	$t8, $t6, $a7
	add.d	$t7, $t8, $t7
	stx.h	$t7, $t6, $a7
	ld.h	$t7, $s5, 12
	ld.h	$t8, $t5, 4
	add.d	$t7, $t8, $t7
	st.h	$t7, $t5, 4
	ld.h	$t7, $s5, 16
	ldx.h	$t8, $t6, $t0
	add.d	$t7, $t8, $t7
	stx.h	$t7, $t6, $t0
	ld.h	$t7, $s5, 20
	ld.h	$t8, $t5, 8
	add.d	$t7, $t8, $t7
	st.h	$t7, $t5, 8
	ld.h	$t7, $s5, 24
	ldx.h	$t8, $t6, $t1
	add.d	$t7, $t8, $t7
	stx.h	$t7, $t6, $t1
	ld.h	$t7, $s5, 28
	ld.h	$t8, $t5, 12
	add.d	$t7, $t8, $t7
	st.h	$t7, $t5, 12
	ld.h	$t7, $s5, 32
	ldx.h	$t8, $t6, $a5
	add.d	$t7, $t8, $t7
	stx.h	$t7, $t6, $a5
	ld.h	$t7, $s5, 36
	ld.h	$t8, $t5, 16
	add.d	$t7, $t8, $t7
	st.h	$t7, $t5, 16
	ld.h	$t7, $s5, 40
	ldx.h	$t8, $t6, $t2
	add.d	$t7, $t8, $t7
	stx.h	$t7, $t6, $t2
	ld.h	$t7, $s5, 44
	ld.h	$t8, $t5, 20
	add.d	$t7, $t8, $t7
	st.h	$t7, $t5, 20
	ld.h	$t7, $s5, 48
	ldx.h	$t8, $t6, $t3
	add.d	$t7, $t8, $t7
	stx.h	$t7, $t6, $t3
	ld.h	$t7, $s5, 52
	ld.h	$t8, $t5, 24
	add.d	$t7, $t8, $t7
	st.h	$t7, $t5, 24
	ld.h	$t7, $s5, 56
	ldx.h	$t8, $t6, $t4
	add.d	$t7, $t8, $t7
	stx.h	$t7, $t6, $t4
	ld.h	$t6, $s5, 60
	ld.h	$t7, $t5, 28
	add.d	$t6, $t7, $t6
	addi.d	$s2, $s2, -1
	st.h	$t6, $t5, 28
	bnez	$s2, .LBB21_11
.LBB21_14:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp485:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp486:
# %bb.15:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 0
	beqz	$a0, .LBB21_17
# %bb.16:                               # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB21_17:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.LBB21_18:
.Ltmp476:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB21_19:
.Ltmp487:
	ld.d	$s2, $sp, 0
	move	$s0, $a0
	bnez	$s2, .LBB21_23
	b	.LBB21_24
.LBB21_20:                              # %.loopexit
.Ltmp482:
	b	.LBB21_22
.LBB21_21:                              # %.loopexit.split-lp
.Ltmp479:
.LBB21_22:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB21_23:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB21_24:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end21:
	.size	_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint16_t_RN9benchmark5StateE, .Lfunc_end21-_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint16_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table21:
.Lexception21:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end21-.Lcst_begin21
.Lcst_begin21:
	.uleb128 .Lfunc_begin21-.Lfunc_begin21  # >> Call Site 1 <<
	.uleb128 .Ltmp474-.Lfunc_begin21        #   Call between .Lfunc_begin21 and .Ltmp474
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp474-.Lfunc_begin21        # >> Call Site 2 <<
	.uleb128 .Ltmp475-.Ltmp474              #   Call between .Ltmp474 and .Ltmp475
	.uleb128 .Ltmp476-.Lfunc_begin21        #     jumps to .Ltmp476
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp477-.Lfunc_begin21        # >> Call Site 3 <<
	.uleb128 .Ltmp478-.Ltmp477              #   Call between .Ltmp477 and .Ltmp478
	.uleb128 .Ltmp479-.Lfunc_begin21        #     jumps to .Ltmp479
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp480-.Lfunc_begin21        # >> Call Site 4 <<
	.uleb128 .Ltmp481-.Ltmp480              #   Call between .Ltmp480 and .Ltmp481
	.uleb128 .Ltmp482-.Lfunc_begin21        #     jumps to .Ltmp482
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp483-.Lfunc_begin21        # >> Call Site 5 <<
	.uleb128 .Ltmp486-.Ltmp483              #   Call between .Ltmp483 and .Ltmp486
	.uleb128 .Ltmp487-.Lfunc_begin21        #     jumps to .Ltmp487
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp486-.Lfunc_begin21        # >> Call Site 6 <<
	.uleb128 .Lfunc_end21-.Ltmp486          #   Call between .Ltmp486 and .Lfunc_end21
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end21:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint16_t_RN9benchmark5StateE # -- Begin function _Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint16_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint16_t_RN9benchmark5StateE,@function
_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint16_t_RN9benchmark5StateE: # @_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint16_t_RN9benchmark5StateE
.Lfunc_begin22:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception22
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$s0, $a0
	lu12i.w	$s4, 9
	ori	$s3, $s4, 3136
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp488:
	lu12i.w	$s6, 4
	ori	$s1, $s6, 3616
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp489:
# %bb.1:
	move	$s2, $a0
	move	$s7, $zero
	ori	$a0, $s4, 3072
	add.d	$s5, $fp, $a0
	st.d	$s2, $sp, 0
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 8
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB22_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp491:
	addi.d	$a0, $sp, 8
	addi.d	$a2, $sp, 8
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp492:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB22_2 Depth=1
	stx.w	$a0, $fp, $s7
	addi.d	$s7, $s7, 4
	bne	$s7, $s3, .LBB22_2
# %bb.4:
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 8
	lu12i.w	$s4, -5
	ori	$s7, $s4, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s3, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB22_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp494:
	addi.d	$a0, $sp, 8
	addi.d	$a2, $sp, 8
	move	$a1, $s3
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp495:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB22_5 Depth=1
	add.d	$a1, $s2, $s7
	addi.d	$s7, $s7, 2
	stx.h	$a0, $a1, $s1
	bnez	$s7, .LBB22_5
# %bb.7:
	ld.w	$s3, $s0, 28
	ld.d	$s2, $s0, 16
.Ltmp497:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp498:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s3, .LBB22_14
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s2, .LBB22_14
# %bb.10:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 128
	addi.d	$a1, $sp, 0
	ori	$a2, $s6, 3586
	ori	$a3, $s4, 512
	ori	$a4, $s6, 3584
	ori	$a5, $s6, 3648
	ori	$a6, $s6, 3680
	ori	$a7, $s6, 3588
	ori	$t0, $s6, 3592
	ori	$t1, $s6, 3596
	ori	$t2, $s6, 3600
	ori	$t3, $s6, 3604
	ori	$t4, $s6, 3608
	ori	$t5, $s6, 3612
	.p2align	4, , 16
.LBB22_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_12 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$t7, $sp, 0
	add.d	$t6, $t7, $a2
	move	$t8, $a0
	move	$s3, $a3
	.p2align	4, , 16
.LBB22_12:                              # %vector.body
                                        #   Parent Loop BB22_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr8, $t8, -96
	xvld	$xr12, $t8, -128
	xvld	$xr10, $t8, -32
	xvld	$xr11, $t8, -64
	xvld	$xr7, $t8, 32
	xvld	$xr9, $t8, 0
	xvld	$xr5, $t8, 96
	xvld	$xr6, $t8, 64
	add.d	$s4, $t7, $s3
	xvldx	$xr0, $s4, $a4
	xvldx	$xr1, $s4, $s1
	xvldx	$xr2, $s4, $a5
	xvldx	$xr3, $s4, $a6
	xvpickve2gr.w	$s6, $xr12, 0
	vinsgr2vr.h	$vr4, $s6, 0
	xvpickve2gr.w	$s6, $xr12, 1
	vinsgr2vr.h	$vr4, $s6, 1
	xvpickve2gr.w	$s6, $xr12, 2
	vinsgr2vr.h	$vr4, $s6, 2
	xvpickve2gr.w	$s6, $xr12, 3
	vinsgr2vr.h	$vr4, $s6, 3
	xvpickve2gr.w	$s6, $xr12, 4
	vinsgr2vr.h	$vr4, $s6, 4
	xvpickve2gr.w	$s6, $xr12, 5
	vinsgr2vr.h	$vr4, $s6, 5
	xvpickve2gr.w	$s6, $xr12, 6
	vinsgr2vr.h	$vr4, $s6, 6
	xvpickve2gr.w	$s6, $xr12, 7
	vinsgr2vr.h	$vr4, $s6, 7
	xvpickve2gr.w	$s6, $xr8, 0
	xvori.b	$xr12, $xr4, 0
	xvpermi.q	$xr12, $xr4, 1
	vinsgr2vr.h	$vr12, $s6, 0
	xvpermi.q	$xr4, $xr12, 2
	xvpickve2gr.w	$s6, $xr8, 1
	xvori.b	$xr12, $xr4, 0
	xvpermi.q	$xr12, $xr4, 1
	vinsgr2vr.h	$vr12, $s6, 1
	xvpermi.q	$xr4, $xr12, 2
	xvpickve2gr.w	$s6, $xr8, 2
	xvori.b	$xr12, $xr4, 0
	xvpermi.q	$xr12, $xr4, 1
	vinsgr2vr.h	$vr12, $s6, 2
	xvpermi.q	$xr4, $xr12, 2
	xvpickve2gr.w	$s6, $xr8, 3
	xvori.b	$xr12, $xr4, 0
	xvpermi.q	$xr12, $xr4, 1
	vinsgr2vr.h	$vr12, $s6, 3
	xvpermi.q	$xr4, $xr12, 2
	xvpickve2gr.w	$s6, $xr8, 4
	xvori.b	$xr12, $xr4, 0
	xvpermi.q	$xr12, $xr4, 1
	vinsgr2vr.h	$vr12, $s6, 4
	xvpermi.q	$xr4, $xr12, 2
	xvpickve2gr.w	$s6, $xr8, 5
	xvori.b	$xr12, $xr4, 0
	xvpermi.q	$xr12, $xr4, 1
	vinsgr2vr.h	$vr12, $s6, 5
	xvpermi.q	$xr4, $xr12, 2
	xvpickve2gr.w	$s6, $xr8, 6
	xvori.b	$xr12, $xr4, 0
	xvpermi.q	$xr12, $xr4, 1
	vinsgr2vr.h	$vr12, $s6, 6
	xvpermi.q	$xr4, $xr12, 2
	xvpickve2gr.w	$s6, $xr8, 7
	xvori.b	$xr8, $xr4, 0
	xvpermi.q	$xr8, $xr4, 1
	vinsgr2vr.h	$vr8, $s6, 7
	xvpermi.q	$xr4, $xr8, 2
	xvpickve2gr.w	$s6, $xr11, 0
	vinsgr2vr.h	$vr8, $s6, 0
	xvpickve2gr.w	$s6, $xr11, 1
	vinsgr2vr.h	$vr8, $s6, 1
	xvpickve2gr.w	$s6, $xr11, 2
	vinsgr2vr.h	$vr8, $s6, 2
	xvpickve2gr.w	$s6, $xr11, 3
	vinsgr2vr.h	$vr8, $s6, 3
	xvpickve2gr.w	$s6, $xr11, 4
	vinsgr2vr.h	$vr8, $s6, 4
	xvpickve2gr.w	$s6, $xr11, 5
	vinsgr2vr.h	$vr8, $s6, 5
	xvpickve2gr.w	$s6, $xr11, 6
	vinsgr2vr.h	$vr8, $s6, 6
	xvpickve2gr.w	$s6, $xr11, 7
	vinsgr2vr.h	$vr8, $s6, 7
	xvpickve2gr.w	$s6, $xr10, 0
	xvori.b	$xr11, $xr8, 0
	xvpermi.q	$xr11, $xr8, 1
	vinsgr2vr.h	$vr11, $s6, 0
	xvpermi.q	$xr8, $xr11, 2
	xvpickve2gr.w	$s6, $xr10, 1
	xvori.b	$xr11, $xr8, 0
	xvpermi.q	$xr11, $xr8, 1
	vinsgr2vr.h	$vr11, $s6, 1
	xvpermi.q	$xr8, $xr11, 2
	xvpickve2gr.w	$s6, $xr10, 2
	xvori.b	$xr11, $xr8, 0
	xvpermi.q	$xr11, $xr8, 1
	vinsgr2vr.h	$vr11, $s6, 2
	xvpermi.q	$xr8, $xr11, 2
	xvpickve2gr.w	$s6, $xr10, 3
	xvori.b	$xr11, $xr8, 0
	xvpermi.q	$xr11, $xr8, 1
	vinsgr2vr.h	$vr11, $s6, 3
	xvpermi.q	$xr8, $xr11, 2
	xvpickve2gr.w	$s6, $xr10, 4
	xvori.b	$xr11, $xr8, 0
	xvpermi.q	$xr11, $xr8, 1
	vinsgr2vr.h	$vr11, $s6, 4
	xvpermi.q	$xr8, $xr11, 2
	xvpickve2gr.w	$s6, $xr10, 5
	xvori.b	$xr11, $xr8, 0
	xvpermi.q	$xr11, $xr8, 1
	vinsgr2vr.h	$vr11, $s6, 5
	xvpermi.q	$xr8, $xr11, 2
	xvpickve2gr.w	$s6, $xr10, 6
	xvori.b	$xr11, $xr8, 0
	xvpermi.q	$xr11, $xr8, 1
	vinsgr2vr.h	$vr11, $s6, 6
	xvpermi.q	$xr8, $xr11, 2
	xvpickve2gr.w	$s6, $xr10, 7
	xvori.b	$xr10, $xr8, 0
	xvpermi.q	$xr10, $xr8, 1
	vinsgr2vr.h	$vr10, $s6, 7
	xvpermi.q	$xr8, $xr10, 2
	xvpickve2gr.w	$s6, $xr9, 0
	vinsgr2vr.h	$vr10, $s6, 0
	xvpickve2gr.w	$s6, $xr9, 1
	vinsgr2vr.h	$vr10, $s6, 1
	xvpickve2gr.w	$s6, $xr9, 2
	vinsgr2vr.h	$vr10, $s6, 2
	xvpickve2gr.w	$s6, $xr9, 3
	vinsgr2vr.h	$vr10, $s6, 3
	xvpickve2gr.w	$s6, $xr9, 4
	vinsgr2vr.h	$vr10, $s6, 4
	xvpickve2gr.w	$s6, $xr9, 5
	vinsgr2vr.h	$vr10, $s6, 5
	xvpickve2gr.w	$s6, $xr9, 6
	vinsgr2vr.h	$vr10, $s6, 6
	xvpickve2gr.w	$s6, $xr9, 7
	vinsgr2vr.h	$vr10, $s6, 7
	xvpickve2gr.w	$s6, $xr7, 0
	xvori.b	$xr9, $xr10, 0
	xvpermi.q	$xr9, $xr10, 1
	vinsgr2vr.h	$vr9, $s6, 0
	xvpermi.q	$xr10, $xr9, 2
	xvpickve2gr.w	$s6, $xr7, 1
	xvori.b	$xr9, $xr10, 0
	xvpermi.q	$xr9, $xr10, 1
	vinsgr2vr.h	$vr9, $s6, 1
	xvpermi.q	$xr10, $xr9, 2
	xvpickve2gr.w	$s6, $xr7, 2
	xvori.b	$xr9, $xr10, 0
	xvpermi.q	$xr9, $xr10, 1
	vinsgr2vr.h	$vr9, $s6, 2
	xvpermi.q	$xr10, $xr9, 2
	xvpickve2gr.w	$s6, $xr7, 3
	xvori.b	$xr9, $xr10, 0
	xvpermi.q	$xr9, $xr10, 1
	vinsgr2vr.h	$vr9, $s6, 3
	xvpermi.q	$xr10, $xr9, 2
	xvpickve2gr.w	$s6, $xr7, 4
	xvori.b	$xr9, $xr10, 0
	xvpermi.q	$xr9, $xr10, 1
	vinsgr2vr.h	$vr9, $s6, 4
	xvpermi.q	$xr10, $xr9, 2
	xvpickve2gr.w	$s6, $xr7, 5
	xvori.b	$xr9, $xr10, 0
	xvpermi.q	$xr9, $xr10, 1
	vinsgr2vr.h	$vr9, $s6, 5
	xvpermi.q	$xr10, $xr9, 2
	xvpickve2gr.w	$s6, $xr7, 6
	xvori.b	$xr9, $xr10, 0
	xvpermi.q	$xr9, $xr10, 1
	vinsgr2vr.h	$vr9, $s6, 6
	xvpermi.q	$xr10, $xr9, 2
	xvpickve2gr.w	$s6, $xr7, 7
	xvori.b	$xr7, $xr10, 0
	xvpermi.q	$xr7, $xr10, 1
	vinsgr2vr.h	$vr7, $s6, 7
	xvpermi.q	$xr10, $xr7, 2
	xvpickve2gr.w	$s6, $xr6, 0
	vinsgr2vr.h	$vr7, $s6, 0
	xvpickve2gr.w	$s6, $xr6, 1
	vinsgr2vr.h	$vr7, $s6, 1
	xvpickve2gr.w	$s6, $xr6, 2
	vinsgr2vr.h	$vr7, $s6, 2
	xvpickve2gr.w	$s6, $xr6, 3
	vinsgr2vr.h	$vr7, $s6, 3
	xvpickve2gr.w	$s6, $xr6, 4
	vinsgr2vr.h	$vr7, $s6, 4
	xvpickve2gr.w	$s6, $xr6, 5
	vinsgr2vr.h	$vr7, $s6, 5
	xvpickve2gr.w	$s6, $xr6, 6
	vinsgr2vr.h	$vr7, $s6, 6
	xvpickve2gr.w	$s6, $xr6, 7
	vinsgr2vr.h	$vr7, $s6, 7
	xvpickve2gr.w	$s6, $xr5, 0
	xvori.b	$xr6, $xr7, 0
	xvpermi.q	$xr6, $xr7, 1
	vinsgr2vr.h	$vr6, $s6, 0
	xvpermi.q	$xr7, $xr6, 2
	xvpickve2gr.w	$s6, $xr5, 1
	xvori.b	$xr6, $xr7, 0
	xvpermi.q	$xr6, $xr7, 1
	vinsgr2vr.h	$vr6, $s6, 1
	xvpermi.q	$xr7, $xr6, 2
	xvpickve2gr.w	$s6, $xr5, 2
	xvori.b	$xr6, $xr7, 0
	xvpermi.q	$xr6, $xr7, 1
	vinsgr2vr.h	$vr6, $s6, 2
	xvpermi.q	$xr7, $xr6, 2
	xvpickve2gr.w	$s6, $xr5, 3
	xvori.b	$xr6, $xr7, 0
	xvpermi.q	$xr6, $xr7, 1
	vinsgr2vr.h	$vr6, $s6, 3
	xvpermi.q	$xr7, $xr6, 2
	xvpickve2gr.w	$s6, $xr5, 4
	xvori.b	$xr6, $xr7, 0
	xvpermi.q	$xr6, $xr7, 1
	vinsgr2vr.h	$vr6, $s6, 4
	xvpermi.q	$xr7, $xr6, 2
	xvpickve2gr.w	$s6, $xr5, 5
	xvori.b	$xr6, $xr7, 0
	xvpermi.q	$xr6, $xr7, 1
	vinsgr2vr.h	$vr6, $s6, 5
	xvpermi.q	$xr7, $xr6, 2
	xvpickve2gr.w	$s6, $xr5, 6
	xvori.b	$xr6, $xr7, 0
	xvpermi.q	$xr6, $xr7, 1
	vinsgr2vr.h	$vr6, $s6, 6
	xvpermi.q	$xr7, $xr6, 2
	xvpickve2gr.w	$s6, $xr5, 7
	xvori.b	$xr5, $xr7, 0
	xvpermi.q	$xr5, $xr7, 1
	vinsgr2vr.h	$vr5, $s6, 7
	xvpermi.q	$xr7, $xr5, 2
	xvadd.h	$xr0, $xr0, $xr4
	xvadd.h	$xr1, $xr1, $xr8
	xvadd.h	$xr2, $xr2, $xr10
	xvadd.h	$xr3, $xr3, $xr7
	xvstx	$xr0, $s4, $a4
	xvstx	$xr1, $s4, $s1
	xvstx	$xr2, $s4, $a5
	xvstx	$xr3, $s4, $a6
	addi.d	$s3, $s3, 128
	addi.d	$t8, $t8, 256
	bnez	$s3, .LBB22_12
# %bb.13:                               # %.lr.ph.i
                                        #   in Loop: Header=BB22_11 Depth=1
	ld.h	$t8, $s5, 0
	ldx.h	$s3, $t7, $a4
	add.d	$t8, $s3, $t8
	stx.h	$t8, $t7, $a4
	ld.h	$t8, $s5, 4
	ld.h	$s3, $t6, 0
	add.d	$t8, $s3, $t8
	st.h	$t8, $t6, 0
	ld.h	$t8, $s5, 8
	ldx.h	$s3, $t7, $a7
	add.d	$t8, $s3, $t8
	stx.h	$t8, $t7, $a7
	ld.h	$t8, $s5, 12
	ld.h	$s3, $t6, 4
	add.d	$t8, $s3, $t8
	st.h	$t8, $t6, 4
	ld.h	$t8, $s5, 16
	ldx.h	$s3, $t7, $t0
	add.d	$t8, $s3, $t8
	stx.h	$t8, $t7, $t0
	ld.h	$t8, $s5, 20
	ld.h	$s3, $t6, 8
	add.d	$t8, $s3, $t8
	st.h	$t8, $t6, 8
	ld.h	$t8, $s5, 24
	ldx.h	$s3, $t7, $t1
	add.d	$t8, $s3, $t8
	stx.h	$t8, $t7, $t1
	ld.h	$t8, $s5, 28
	ld.h	$s3, $t6, 12
	add.d	$t8, $s3, $t8
	st.h	$t8, $t6, 12
	ld.h	$t8, $s5, 32
	ldx.h	$s3, $t7, $t2
	add.d	$t8, $s3, $t8
	stx.h	$t8, $t7, $t2
	ld.h	$t8, $s5, 36
	ld.h	$s3, $t6, 16
	add.d	$t8, $s3, $t8
	st.h	$t8, $t6, 16
	ld.h	$t8, $s5, 40
	ldx.h	$s3, $t7, $t3
	add.d	$t8, $s3, $t8
	stx.h	$t8, $t7, $t3
	ld.h	$t8, $s5, 44
	ld.h	$s3, $t6, 20
	add.d	$t8, $s3, $t8
	st.h	$t8, $t6, 20
	ld.h	$t8, $s5, 48
	ldx.h	$s3, $t7, $t4
	add.d	$t8, $s3, $t8
	stx.h	$t8, $t7, $t4
	ld.h	$t8, $s5, 52
	ld.h	$s3, $t6, 24
	add.d	$t8, $s3, $t8
	st.h	$t8, $t6, 24
	ld.h	$t8, $s5, 56
	ldx.h	$s3, $t7, $t5
	add.d	$t8, $s3, $t8
	stx.h	$t8, $t7, $t5
	ld.h	$t7, $s5, 60
	ld.h	$t8, $t6, 28
	add.d	$t7, $t8, $t7
	addi.d	$s2, $s2, -1
	st.h	$t7, $t6, 28
	bnez	$s2, .LBB22_11
.LBB22_14:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp499:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp500:
# %bb.15:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 0
	beqz	$a0, .LBB22_17
# %bb.16:                               # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB22_17:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.LBB22_18:
.Ltmp490:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB22_19:
.Ltmp501:
	ld.d	$s2, $sp, 0
	move	$s0, $a0
	bnez	$s2, .LBB22_23
	b	.LBB22_24
.LBB22_20:                              # %.loopexit
.Ltmp496:
	b	.LBB22_22
.LBB22_21:                              # %.loopexit.split-lp
.Ltmp493:
.LBB22_22:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB22_23:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB22_24:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end22:
	.size	_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint16_t_RN9benchmark5StateE, .Lfunc_end22-_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint16_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table22:
.Lexception22:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end22-.Lcst_begin22
.Lcst_begin22:
	.uleb128 .Lfunc_begin22-.Lfunc_begin22  # >> Call Site 1 <<
	.uleb128 .Ltmp488-.Lfunc_begin22        #   Call between .Lfunc_begin22 and .Ltmp488
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp488-.Lfunc_begin22        # >> Call Site 2 <<
	.uleb128 .Ltmp489-.Ltmp488              #   Call between .Ltmp488 and .Ltmp489
	.uleb128 .Ltmp490-.Lfunc_begin22        #     jumps to .Ltmp490
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp491-.Lfunc_begin22        # >> Call Site 3 <<
	.uleb128 .Ltmp492-.Ltmp491              #   Call between .Ltmp491 and .Ltmp492
	.uleb128 .Ltmp493-.Lfunc_begin22        #     jumps to .Ltmp493
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp494-.Lfunc_begin22        # >> Call Site 4 <<
	.uleb128 .Ltmp495-.Ltmp494              #   Call between .Ltmp494 and .Ltmp495
	.uleb128 .Ltmp496-.Lfunc_begin22        #     jumps to .Ltmp496
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp497-.Lfunc_begin22        # >> Call Site 5 <<
	.uleb128 .Ltmp500-.Ltmp497              #   Call between .Ltmp497 and .Ltmp500
	.uleb128 .Ltmp501-.Lfunc_begin22        #     jumps to .Ltmp501
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp500-.Lfunc_begin22        # >> Call Site 6 <<
	.uleb128 .Lfunc_end22-.Ltmp500          #   Call between .Ltmp500 and .Lfunc_end22
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end22:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint16_t_RN9benchmark5StateE # -- Begin function _Z61benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint16_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint16_t_RN9benchmark5StateE,@function
_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint16_t_RN9benchmark5StateE: # @_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint16_t_RN9benchmark5StateE
.Lfunc_begin23:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception23
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	move	$s0, $a0
	lu12i.w	$a0, 9
	ori	$s3, $a0, 3136
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp502:
	lu12i.w	$a0, 4
	ori	$s1, $a0, 3616
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp503:
# %bb.1:
	move	$s2, $a0
	move	$s5, $zero
	st.d	$a0, $sp, 0
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 8
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB23_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp505:
	addi.d	$a0, $sp, 8
	addi.d	$a2, $sp, 8
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp506:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB23_2 Depth=1
	stx.w	$a0, $fp, $s5
	addi.d	$s5, $s5, 4
	bne	$s5, $s3, .LBB23_2
# %bb.4:
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 8
	lu12i.w	$s4, -5
	ori	$s5, $s4, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s3, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB23_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp508:
	addi.d	$a0, $sp, 8
	addi.d	$a2, $sp, 8
	move	$a1, $s3
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp509:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB23_5 Depth=1
	add.d	$a1, $s2, $s5
	addi.d	$s5, $s5, 2
	stx.h	$a0, $a1, $s1
	bnez	$s5, .LBB23_5
# %bb.7:
	ld.w	$s3, $s0, 28
	ld.d	$s2, $s0, 16
.Ltmp511:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp512:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s3, .LBB23_14
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s2, .LBB23_14
# %bb.10:
	addi.d	$a0, $sp, 0
	ori	$a1, $s4, 480
	.p2align	4, , 16
.LBB23_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_12 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a2, $sp, 0
	move	$a3, $fp
	move	$a4, $a1
	.p2align	4, , 16
.LBB23_12:                              # %vector.body
                                        #   Parent Loop BB23_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr0, $a3, 0
	add.d	$a5, $a2, $a4
	vldx	$vr1, $a5, $s1
	xvpickve2gr.w	$a6, $xr0, 0
	vinsgr2vr.h	$vr2, $a6, 0
	xvpickve2gr.w	$a6, $xr0, 1
	vinsgr2vr.h	$vr2, $a6, 1
	xvpickve2gr.w	$a6, $xr0, 2
	vinsgr2vr.h	$vr2, $a6, 2
	xvpickve2gr.w	$a6, $xr0, 3
	vinsgr2vr.h	$vr2, $a6, 3
	xvpickve2gr.w	$a6, $xr0, 4
	vinsgr2vr.h	$vr2, $a6, 4
	xvpickve2gr.w	$a6, $xr0, 5
	vinsgr2vr.h	$vr2, $a6, 5
	xvpickve2gr.w	$a6, $xr0, 6
	vinsgr2vr.h	$vr2, $a6, 6
	xvpickve2gr.w	$a6, $xr0, 7
	vinsgr2vr.h	$vr2, $a6, 7
	vadd.h	$vr0, $vr1, $vr2
	vstx	$vr0, $a5, $s1
	addi.d	$a4, $a4, 16
	addi.d	$a3, $a3, 32
	bnez	$a4, .LBB23_12
# %bb.13:                               # %_ZL27truncOrZextVecWithAddInLoopIjtEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB23_11 Depth=1
	addi.d	$s2, $s2, -1
	bnez	$s2, .LBB23_11
.LBB23_14:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp513:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp514:
# %bb.15:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 0
	beqz	$a0, .LBB23_17
# %bb.16:                               # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB23_17:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB23_18:
.Ltmp504:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB23_19:
.Ltmp515:
	ld.d	$s2, $sp, 0
	move	$s0, $a0
	bnez	$s2, .LBB23_23
	b	.LBB23_24
.LBB23_20:                              # %.loopexit
.Ltmp510:
	b	.LBB23_22
.LBB23_21:                              # %.loopexit.split-lp
.Ltmp507:
.LBB23_22:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB23_23:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB23_24:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end23:
	.size	_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint16_t_RN9benchmark5StateE, .Lfunc_end23-_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint16_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table23:
.Lexception23:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end23-.Lcst_begin23
.Lcst_begin23:
	.uleb128 .Lfunc_begin23-.Lfunc_begin23  # >> Call Site 1 <<
	.uleb128 .Ltmp502-.Lfunc_begin23        #   Call between .Lfunc_begin23 and .Ltmp502
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp502-.Lfunc_begin23        # >> Call Site 2 <<
	.uleb128 .Ltmp503-.Ltmp502              #   Call between .Ltmp502 and .Ltmp503
	.uleb128 .Ltmp504-.Lfunc_begin23        #     jumps to .Ltmp504
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp505-.Lfunc_begin23        # >> Call Site 3 <<
	.uleb128 .Ltmp506-.Ltmp505              #   Call between .Ltmp505 and .Ltmp506
	.uleb128 .Ltmp507-.Lfunc_begin23        #     jumps to .Ltmp507
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp508-.Lfunc_begin23        # >> Call Site 4 <<
	.uleb128 .Ltmp509-.Ltmp508              #   Call between .Ltmp508 and .Ltmp509
	.uleb128 .Ltmp510-.Lfunc_begin23        #     jumps to .Ltmp510
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp511-.Lfunc_begin23        # >> Call Site 5 <<
	.uleb128 .Ltmp514-.Ltmp511              #   Call between .Ltmp511 and .Ltmp514
	.uleb128 .Ltmp515-.Lfunc_begin23        #     jumps to .Ltmp515
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp514-.Lfunc_begin23        # >> Call Site 6 <<
	.uleb128 .Lfunc_end23-.Ltmp514          #   Call between .Ltmp514 and .Lfunc_end23
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end23:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z61benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint16_t_RN9benchmark5StateE
.LCPI24_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z61benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint16_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z61benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint16_t_RN9benchmark5StateE,@function
_Z61benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint16_t_RN9benchmark5StateE: # @_Z61benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint16_t_RN9benchmark5StateE
.Lfunc_begin24:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception24
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$fp, 19
	ori	$s4, $fp, 2176
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$s2, $a0
.Ltmp516:
	lu12i.w	$s7, 4
	ori	$s1, $s7, 3616
	move	$a0, $s1
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp517:
# %bb.1:                                # %.split
	move	$s8, $a0
	st.d	$a0, $sp, 56
.Ltmp519:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp520:
# %bb.2:
	move	$s3, $a0
	move	$s0, $zero
	ori	$fp, $fp, 2048
	pcalau12i	$a0, %pc_hi20(.LCPI24_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI24_0)
	add.d	$s6, $s2, $fp
	ori	$a0, $s7, 3586
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	add.d	$a0, $s8, $a0
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	vst	$vr0, $sp, 64
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	st.d	$s3, $sp, 40                    # 8-byte Folded Spill
	.p2align	4, , 16
.LBB24_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp522:
	addi.d	$a0, $sp, 64
	addi.d	$a2, $sp, 64
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp523:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB24_3 Depth=1
	stx.d	$a0, $s2, $s0
	addi.d	$s0, $s0, 8
	bne	$s0, $s4, .LBB24_3
# %bb.5:                                # %vector.ph
	addi.d	$a0, $s2, 8
	lu12i.w	$a6, -5
	ori	$a1, $a6, 480
	ori	$a2, $s7, 3618
	.p2align	4, , 16
.LBB24_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a3, $a0, -8
	ld.d	$a4, $a0, 0
	add.d	$a5, $s3, $a1
	stx.h	$a3, $a5, $s1
	stx.h	$a4, $a5, $a2
	addi.d	$a1, $a1, 4
	addi.d	$a0, $a0, 16
	bnez	$a1, .LBB24_6
# %bb.7:                                # %vector.body83.preheader
	move	$a0, $zero
	addi.d	$a1, $s8, 32
	.p2align	4, , 16
.LBB24_8:                               # %vector.body83
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $s2, $a0
	xvld	$xr4, $a2, 32
	xvldx	$xr5, $s2, $a0
	xvld	$xr6, $a2, 96
	xvld	$xr7, $a2, 64
	xvld	$xr3, $a2, 160
	xvld	$xr8, $a2, 128
	xvld	$xr0, $a2, 224
	xvld	$xr2, $a2, 192
	xvpickve2gr.d	$a2, $xr5, 0
	vinsgr2vr.h	$vr1, $a2, 0
	xvpickve2gr.d	$a2, $xr5, 1
	vinsgr2vr.h	$vr1, $a2, 1
	xvpickve2gr.d	$a2, $xr5, 2
	vinsgr2vr.h	$vr1, $a2, 2
	xvpickve2gr.d	$a2, $xr5, 3
	vinsgr2vr.h	$vr1, $a2, 3
	xvpickve2gr.d	$a2, $xr4, 0
	vinsgr2vr.h	$vr1, $a2, 4
	xvpickve2gr.d	$a2, $xr4, 1
	vinsgr2vr.h	$vr1, $a2, 5
	xvpickve2gr.d	$a2, $xr4, 2
	vinsgr2vr.h	$vr1, $a2, 6
	xvpickve2gr.d	$a2, $xr4, 3
	vinsgr2vr.h	$vr1, $a2, 7
	xvpickve2gr.d	$a2, $xr7, 0
	vinsgr2vr.h	$vr4, $a2, 0
	xvpickve2gr.d	$a2, $xr7, 1
	vinsgr2vr.h	$vr4, $a2, 1
	xvpickve2gr.d	$a2, $xr7, 2
	vinsgr2vr.h	$vr4, $a2, 2
	xvpickve2gr.d	$a2, $xr7, 3
	vinsgr2vr.h	$vr4, $a2, 3
	xvpickve2gr.d	$a2, $xr6, 0
	vinsgr2vr.h	$vr4, $a2, 4
	xvpickve2gr.d	$a2, $xr6, 1
	vinsgr2vr.h	$vr4, $a2, 5
	xvpickve2gr.d	$a2, $xr6, 2
	vinsgr2vr.h	$vr4, $a2, 6
	xvpickve2gr.d	$a2, $xr6, 3
	vinsgr2vr.h	$vr4, $a2, 7
	xvpickve2gr.d	$a2, $xr8, 0
	vinsgr2vr.h	$vr5, $a2, 0
	xvpickve2gr.d	$a2, $xr8, 1
	vinsgr2vr.h	$vr5, $a2, 1
	xvpickve2gr.d	$a2, $xr8, 2
	vinsgr2vr.h	$vr5, $a2, 2
	xvpickve2gr.d	$a2, $xr8, 3
	vinsgr2vr.h	$vr5, $a2, 3
	xvpickve2gr.d	$a2, $xr3, 0
	vinsgr2vr.h	$vr5, $a2, 4
	xvpickve2gr.d	$a2, $xr3, 1
	vinsgr2vr.h	$vr5, $a2, 5
	xvpickve2gr.d	$a2, $xr3, 2
	vinsgr2vr.h	$vr5, $a2, 6
	xvpickve2gr.d	$a2, $xr3, 3
	vinsgr2vr.h	$vr5, $a2, 7
	xvpickve2gr.d	$a2, $xr2, 0
	vinsgr2vr.h	$vr3, $a2, 0
	xvpickve2gr.d	$a2, $xr2, 1
	vinsgr2vr.h	$vr3, $a2, 1
	xvpickve2gr.d	$a2, $xr2, 2
	vinsgr2vr.h	$vr3, $a2, 2
	xvpickve2gr.d	$a2, $xr2, 3
	vinsgr2vr.h	$vr3, $a2, 3
	xvpickve2gr.d	$a2, $xr0, 0
	vinsgr2vr.h	$vr3, $a2, 4
	xvpickve2gr.d	$a2, $xr0, 1
	vinsgr2vr.h	$vr3, $a2, 5
	xvpickve2gr.d	$a2, $xr0, 2
	vinsgr2vr.h	$vr3, $a2, 6
	xvpickve2gr.d	$a2, $xr0, 3
	vinsgr2vr.h	$vr3, $a2, 7
	vst	$vr1, $a1, -32
	vst	$vr4, $a1, -16
	vst	$vr5, $a1, 0
	vst	$vr3, $a1, 16
	addi.d	$a0, $a0, 256
	addi.d	$a1, $a1, 64
	bne	$a0, $fp, .LBB24_8
# %bb.9:                                # %.lr.ph.i
	ld.d	$a0, $s6, 0
	ld.d	$a1, $s6, 8
	ori	$s4, $s7, 3584
	stx.h	$a0, $s8, $s4
	ld.d	$a0, $s6, 16
	ld.d	$a7, $sp, 16                    # 8-byte Folded Reload
	st.h	$a1, $a7, 0
	ld.d	$a1, $s6, 24
	ori	$a5, $s7, 3588
	stx.h	$a0, $s8, $a5
	ld.d	$a0, $s6, 32
	st.h	$a1, $a7, 4
	ld.d	$a1, $s6, 40
	move	$s5, $s2
	ori	$s2, $s7, 3592
	stx.h	$a0, $s8, $s2
	ld.d	$a0, $s6, 48
	st.h	$a1, $a7, 8
	ld.d	$a1, $s6, 56
	move	$a4, $s8
	ori	$s8, $s7, 3596
	stx.h	$a0, $a4, $s8
	ld.d	$a0, $s6, 64
	st.h	$a1, $a7, 12
	ld.d	$a1, $s6, 72
	ori	$s0, $s7, 3600
	stx.h	$a0, $a4, $s0
	ld.d	$a0, $s6, 80
	st.h	$a1, $a7, 16
	ld.d	$a1, $s6, 88
	ori	$s3, $s7, 3604
	stx.h	$a0, $a4, $s3
	ld.d	$a0, $s6, 96
	st.h	$a1, $a7, 20
	ori	$fp, $s7, 3608
	ld.d	$a1, $s6, 104
	stx.h	$a0, $a4, $fp
	ld.d	$a0, $s6, 112
	ld.d	$a2, $s6, 120
	st.h	$a1, $a7, 24
	ori	$s7, $s7, 3612
	move	$a3, $a4
	stx.h	$a0, $a4, $s7
	st.h	$a2, $a7, 28
	ori	$a0, $a6, 480
	.p2align	4, , 16
.LBB24_10:                              # %_ZL27truncOrZextVecInLoopWithVW8ImtEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a6, $a3, $a0
	ldx.hu	$a1, $a6, $s1
	ld.d	$a2, $sp, 40                    # 8-byte Folded Reload
	add.d	$a4, $a2, $a0
	ldx.hu	$a2, $a4, $s1
	bne	$a1, $a2, .LBB24_23
# %bb.11:                               # %_ZL27truncOrZextVecInLoopWithVW8ImtEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB24_10 Depth=1
	addi.d	$a0, $a0, 2
	addi.d	$s5, $s5, 8
	bnez	$a0, .LBB24_10
# %bb.12:
	st.d	$a5, $sp, 16                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	ld.w	$a1, $a0, 28
	st.d	$a1, $sp, 8                     # 8-byte Folded Spill
	ld.d	$s5, $a0, 16
.Ltmp540:
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp541:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	ld.d	$t1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	bnez	$a0, .LBB24_19
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s5, .LBB24_19
# %bb.15:                               # %.lr.ph.preheader
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	addi.d	$a0, $a0, 128
	addi.d	$a1, $sp, 56
	lu12i.w	$a2, -5
	ori	$a2, $a2, 512
	lu12i.w	$a3, 4
	ori	$a3, $a3, 3632
	.p2align	4, , 16
.LBB24_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_17 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a5, $sp, 56
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	add.d	$a4, $a5, $a4
	move	$a6, $a0
	move	$a7, $a2
	.p2align	4, , 16
.LBB24_17:                              # %vector.body93
                                        #   Parent Loop BB24_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr4, $a6, -96
	xvld	$xr5, $a6, -128
	xvld	$xr6, $a6, -32
	xvld	$xr7, $a6, -64
	xvld	$xr3, $a6, 32
	xvld	$xr8, $a6, 0
	xvld	$xr1, $a6, 96
	xvld	$xr2, $a6, 64
	xvpickve2gr.d	$t0, $xr5, 0
	vinsgr2vr.h	$vr0, $t0, 0
	xvpickve2gr.d	$t0, $xr5, 1
	vinsgr2vr.h	$vr0, $t0, 1
	xvpickve2gr.d	$t0, $xr5, 2
	vinsgr2vr.h	$vr0, $t0, 2
	xvpickve2gr.d	$t0, $xr5, 3
	vinsgr2vr.h	$vr0, $t0, 3
	xvpickve2gr.d	$t0, $xr4, 0
	vinsgr2vr.h	$vr0, $t0, 4
	xvpickve2gr.d	$t0, $xr4, 1
	vinsgr2vr.h	$vr0, $t0, 5
	xvpickve2gr.d	$t0, $xr4, 2
	vinsgr2vr.h	$vr0, $t0, 6
	xvpickve2gr.d	$t0, $xr4, 3
	vinsgr2vr.h	$vr0, $t0, 7
	xvpickve2gr.d	$t0, $xr7, 0
	vinsgr2vr.h	$vr4, $t0, 0
	xvpickve2gr.d	$t0, $xr7, 1
	vinsgr2vr.h	$vr4, $t0, 1
	xvpickve2gr.d	$t0, $xr7, 2
	vinsgr2vr.h	$vr4, $t0, 2
	xvpickve2gr.d	$t0, $xr7, 3
	vinsgr2vr.h	$vr4, $t0, 3
	xvpickve2gr.d	$t0, $xr6, 0
	vinsgr2vr.h	$vr4, $t0, 4
	xvpickve2gr.d	$t0, $xr6, 1
	vinsgr2vr.h	$vr4, $t0, 5
	xvpickve2gr.d	$t0, $xr6, 2
	vinsgr2vr.h	$vr4, $t0, 6
	xvpickve2gr.d	$t0, $xr6, 3
	vinsgr2vr.h	$vr4, $t0, 7
	xvpickve2gr.d	$t0, $xr8, 0
	vinsgr2vr.h	$vr5, $t0, 0
	xvpickve2gr.d	$t0, $xr8, 1
	vinsgr2vr.h	$vr5, $t0, 1
	xvpickve2gr.d	$t0, $xr8, 2
	vinsgr2vr.h	$vr5, $t0, 2
	xvpickve2gr.d	$t0, $xr8, 3
	vinsgr2vr.h	$vr5, $t0, 3
	xvpickve2gr.d	$t0, $xr3, 0
	vinsgr2vr.h	$vr5, $t0, 4
	xvpickve2gr.d	$t0, $xr3, 1
	vinsgr2vr.h	$vr5, $t0, 5
	xvpickve2gr.d	$t0, $xr3, 2
	vinsgr2vr.h	$vr5, $t0, 6
	xvpickve2gr.d	$t0, $xr3, 3
	vinsgr2vr.h	$vr5, $t0, 7
	xvpickve2gr.d	$t0, $xr2, 0
	vinsgr2vr.h	$vr3, $t0, 0
	xvpickve2gr.d	$t0, $xr2, 1
	vinsgr2vr.h	$vr3, $t0, 1
	xvpickve2gr.d	$t0, $xr2, 2
	vinsgr2vr.h	$vr3, $t0, 2
	xvpickve2gr.d	$t0, $xr2, 3
	vinsgr2vr.h	$vr3, $t0, 3
	xvpickve2gr.d	$t0, $xr1, 0
	vinsgr2vr.h	$vr3, $t0, 4
	xvpickve2gr.d	$t0, $xr1, 1
	vinsgr2vr.h	$vr3, $t0, 5
	xvpickve2gr.d	$t0, $xr1, 2
	vinsgr2vr.h	$vr3, $t0, 6
	xvpickve2gr.d	$t0, $xr1, 3
	vinsgr2vr.h	$vr3, $t0, 7
	add.d	$t0, $a5, $a7
	vstx	$vr0, $t0, $s4
	vstx	$vr4, $t0, $s0
	vstx	$vr5, $t0, $s1
	vstx	$vr3, $t0, $a3
	addi.d	$a7, $a7, 64
	addi.d	$a6, $a6, 256
	bnez	$a7, .LBB24_17
# %bb.18:                               # %.lr.ph.i24
                                        #   in Loop: Header=BB24_16 Depth=1
	ld.d	$a6, $s6, 0
	ld.d	$a7, $s6, 8
	ld.d	$t0, $s6, 16
	stx.h	$a6, $a5, $s4
	ld.d	$a6, $s6, 24
	st.h	$a7, $a4, 0
	stx.h	$t0, $a5, $t1
	ld.d	$a7, $s6, 32
	st.h	$a6, $a4, 4
	ld.d	$a6, $s6, 40
	ld.d	$t0, $s6, 48
	stx.h	$a7, $a5, $s2
	ld.d	$a7, $s6, 56
	st.h	$a6, $a4, 8
	stx.h	$t0, $a5, $s8
	ld.d	$a6, $s6, 64
	st.h	$a7, $a4, 12
	ld.d	$a7, $s6, 80
	ld.d	$t0, $s6, 96
	stx.h	$a6, $a5, $s0
	ld.d	$a6, $s6, 112
	stx.h	$a7, $a5, $s3
	stx.h	$t0, $a5, $fp
	ld.d	$a7, $s6, 72
	stx.h	$a6, $a5, $s7
	ld.d	$a5, $s6, 88
	ld.d	$a6, $s6, 104
	st.h	$a7, $a4, 16
	ld.d	$a7, $s6, 120
	st.h	$a5, $a4, 20
	st.h	$a6, $a4, 24
	addi.d	$s5, $s5, -1
	st.h	$a7, $a4, 28
	bnez	$s5, .LBB24_16
.LBB24_19:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp542:
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp543:
# %bb.20:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit36
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56
	beqz	$a0, .LBB24_22
# %bb.21:                               # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i38
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB24_22:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit42
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB24_23:
.Ltmp525:
	move	$s0, $a6
	move	$fp, $a4
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp526:
# %bb.24:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	ld.d	$a1, $s5, 0
.Ltmp527:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp528:
# %bb.25:                               # %_ZNSolsEm.exit
.Ltmp529:
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp530:
# %bb.26:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.hu	$a1, $s0, $s1
.Ltmp531:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp532:
# %bb.27:                               # %_ZNSolsEt.exit
.Ltmp533:
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp534:
# %bb.28:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit21
	ldx.hu	$a1, $fp, $s1
.Ltmp535:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp536:
# %bb.29:                               # %_ZNSolsEt.exit23
.Ltmp537:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp538:
# %bb.30:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB24_31:                              # %.thread
.Ltmp521:
	move	$s1, $a0
	b	.LBB24_37
.LBB24_32:
.Ltmp518:
	move	$s1, $a0
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB24_33:
.Ltmp544:
	b	.LBB24_36
.LBB24_34:
.Ltmp539:
	b	.LBB24_36
.LBB24_35:
.Ltmp524:
.LBB24_36:
	move	$s1, $a0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56
	move	$s8, $a0
	beqz	$a0, .LBB24_38
.LBB24_37:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i31
	move	$a0, $s8
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB24_38:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end24:
	.size	_Z61benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint16_t_RN9benchmark5StateE, .Lfunc_end24-_Z61benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint16_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table24:
.Lexception24:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end24-.Lcst_begin24
.Lcst_begin24:
	.uleb128 .Lfunc_begin24-.Lfunc_begin24  # >> Call Site 1 <<
	.uleb128 .Ltmp516-.Lfunc_begin24        #   Call between .Lfunc_begin24 and .Ltmp516
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp516-.Lfunc_begin24        # >> Call Site 2 <<
	.uleb128 .Ltmp517-.Ltmp516              #   Call between .Ltmp516 and .Ltmp517
	.uleb128 .Ltmp518-.Lfunc_begin24        #     jumps to .Ltmp518
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp519-.Lfunc_begin24        # >> Call Site 3 <<
	.uleb128 .Ltmp520-.Ltmp519              #   Call between .Ltmp519 and .Ltmp520
	.uleb128 .Ltmp521-.Lfunc_begin24        #     jumps to .Ltmp521
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp522-.Lfunc_begin24        # >> Call Site 4 <<
	.uleb128 .Ltmp523-.Ltmp522              #   Call between .Ltmp522 and .Ltmp523
	.uleb128 .Ltmp524-.Lfunc_begin24        #     jumps to .Ltmp524
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp540-.Lfunc_begin24        # >> Call Site 5 <<
	.uleb128 .Ltmp543-.Ltmp540              #   Call between .Ltmp540 and .Ltmp543
	.uleb128 .Ltmp544-.Lfunc_begin24        #     jumps to .Ltmp544
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp543-.Lfunc_begin24        # >> Call Site 6 <<
	.uleb128 .Ltmp525-.Ltmp543              #   Call between .Ltmp543 and .Ltmp525
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp525-.Lfunc_begin24        # >> Call Site 7 <<
	.uleb128 .Ltmp538-.Ltmp525              #   Call between .Ltmp525 and .Ltmp538
	.uleb128 .Ltmp539-.Lfunc_begin24        #     jumps to .Ltmp539
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp538-.Lfunc_begin24        # >> Call Site 8 <<
	.uleb128 .Lfunc_end24-.Ltmp538          #   Call between .Ltmp538 and .Lfunc_end24
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end24:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z62benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint16_t_RN9benchmark5StateE
.LCPI25_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z62benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint16_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z62benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint16_t_RN9benchmark5StateE,@function
_Z62benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint16_t_RN9benchmark5StateE: # @_Z62benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint16_t_RN9benchmark5StateE
.Lfunc_begin25:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception25
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$fp, 19
	ori	$s4, $fp, 2176
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$s2, $a0
.Ltmp545:
	lu12i.w	$s7, 4
	ori	$s1, $s7, 3616
	move	$a0, $s1
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp546:
# %bb.1:                                # %.split
	move	$s8, $a0
	st.d	$a0, $sp, 56
.Ltmp548:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp549:
# %bb.2:
	move	$s3, $a0
	move	$s0, $zero
	ori	$fp, $fp, 2048
	pcalau12i	$a0, %pc_hi20(.LCPI25_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI25_0)
	add.d	$s6, $s2, $fp
	ori	$a0, $s7, 3586
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	add.d	$a0, $s8, $a0
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	vst	$vr0, $sp, 64
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	st.d	$s3, $sp, 40                    # 8-byte Folded Spill
	.p2align	4, , 16
.LBB25_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp551:
	addi.d	$a0, $sp, 64
	addi.d	$a2, $sp, 64
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp552:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB25_3 Depth=1
	stx.d	$a0, $s2, $s0
	addi.d	$s0, $s0, 8
	bne	$s0, $s4, .LBB25_3
# %bb.5:                                # %vector.ph
	addi.d	$a0, $s2, 8
	lu12i.w	$a6, -5
	ori	$a1, $a6, 480
	ori	$a2, $s7, 3618
	.p2align	4, , 16
.LBB25_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a3, $a0, -8
	ld.d	$a4, $a0, 0
	add.d	$a5, $s3, $a1
	stx.h	$a3, $a5, $s1
	stx.h	$a4, $a5, $a2
	addi.d	$a1, $a1, 4
	addi.d	$a0, $a0, 16
	bnez	$a1, .LBB25_6
# %bb.7:                                # %vector.body83.preheader
	move	$a0, $zero
	addi.d	$a1, $s8, 64
	.p2align	4, , 16
.LBB25_8:                               # %vector.body83
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $s2, $a0
	xvld	$xr5, $a2, 96
	xvld	$xr14, $a2, 64
	xvld	$xr15, $a2, 32
	xvldx	$xr16, $s2, $a0
	xvld	$xr10, $a2, 224
	xvld	$xr11, $a2, 192
	xvld	$xr12, $a2, 160
	xvld	$xr13, $a2, 128
	xvld	$xr6, $a2, 352
	xvld	$xr7, $a2, 320
	xvld	$xr8, $a2, 288
	xvld	$xr9, $a2, 256
	xvld	$xr1, $a2, 480
	xvld	$xr2, $a2, 448
	xvld	$xr3, $a2, 416
	xvld	$xr4, $a2, 384
	xvpickve2gr.d	$a2, $xr16, 0
	vinsgr2vr.h	$vr0, $a2, 0
	xvpickve2gr.d	$a2, $xr16, 1
	vinsgr2vr.h	$vr0, $a2, 1
	xvpickve2gr.d	$a2, $xr16, 2
	vinsgr2vr.h	$vr0, $a2, 2
	xvpickve2gr.d	$a2, $xr16, 3
	vinsgr2vr.h	$vr0, $a2, 3
	xvpickve2gr.d	$a2, $xr15, 0
	vinsgr2vr.h	$vr0, $a2, 4
	xvpickve2gr.d	$a2, $xr15, 1
	vinsgr2vr.h	$vr0, $a2, 5
	xvpickve2gr.d	$a2, $xr15, 2
	vinsgr2vr.h	$vr0, $a2, 6
	xvpickve2gr.d	$a2, $xr15, 3
	vinsgr2vr.h	$vr0, $a2, 7
	xvpickve2gr.d	$a2, $xr14, 0
	xvori.b	$xr15, $xr0, 0
	xvpermi.q	$xr15, $xr0, 1
	vinsgr2vr.h	$vr15, $a2, 0
	xvpermi.q	$xr0, $xr15, 2
	xvpickve2gr.d	$a2, $xr14, 1
	xvori.b	$xr15, $xr0, 0
	xvpermi.q	$xr15, $xr0, 1
	vinsgr2vr.h	$vr15, $a2, 1
	xvpermi.q	$xr0, $xr15, 2
	xvpickve2gr.d	$a2, $xr14, 2
	xvori.b	$xr15, $xr0, 0
	xvpermi.q	$xr15, $xr0, 1
	vinsgr2vr.h	$vr15, $a2, 2
	xvpermi.q	$xr0, $xr15, 2
	xvpickve2gr.d	$a2, $xr14, 3
	xvori.b	$xr14, $xr0, 0
	xvpermi.q	$xr14, $xr0, 1
	vinsgr2vr.h	$vr14, $a2, 3
	xvpermi.q	$xr0, $xr14, 2
	xvpickve2gr.d	$a2, $xr5, 0
	xvori.b	$xr14, $xr0, 0
	xvpermi.q	$xr14, $xr0, 1
	vinsgr2vr.h	$vr14, $a2, 4
	xvpermi.q	$xr0, $xr14, 2
	xvpickve2gr.d	$a2, $xr5, 1
	xvori.b	$xr14, $xr0, 0
	xvpermi.q	$xr14, $xr0, 1
	vinsgr2vr.h	$vr14, $a2, 5
	xvpermi.q	$xr0, $xr14, 2
	xvpickve2gr.d	$a2, $xr5, 2
	xvori.b	$xr14, $xr0, 0
	xvpermi.q	$xr14, $xr0, 1
	vinsgr2vr.h	$vr14, $a2, 6
	xvpermi.q	$xr0, $xr14, 2
	xvpickve2gr.d	$a2, $xr5, 3
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $a2, 7
	xvpermi.q	$xr0, $xr5, 2
	xvpickve2gr.d	$a2, $xr13, 0
	vinsgr2vr.h	$vr5, $a2, 0
	xvpickve2gr.d	$a2, $xr13, 1
	vinsgr2vr.h	$vr5, $a2, 1
	xvpickve2gr.d	$a2, $xr13, 2
	vinsgr2vr.h	$vr5, $a2, 2
	xvpickve2gr.d	$a2, $xr13, 3
	vinsgr2vr.h	$vr5, $a2, 3
	xvpickve2gr.d	$a2, $xr12, 0
	vinsgr2vr.h	$vr5, $a2, 4
	xvpickve2gr.d	$a2, $xr12, 1
	vinsgr2vr.h	$vr5, $a2, 5
	xvpickve2gr.d	$a2, $xr12, 2
	vinsgr2vr.h	$vr5, $a2, 6
	xvpickve2gr.d	$a2, $xr12, 3
	vinsgr2vr.h	$vr5, $a2, 7
	xvpickve2gr.d	$a2, $xr11, 0
	xvori.b	$xr12, $xr5, 0
	xvpermi.q	$xr12, $xr5, 1
	vinsgr2vr.h	$vr12, $a2, 0
	xvpermi.q	$xr5, $xr12, 2
	xvpickve2gr.d	$a2, $xr11, 1
	xvori.b	$xr12, $xr5, 0
	xvpermi.q	$xr12, $xr5, 1
	vinsgr2vr.h	$vr12, $a2, 1
	xvpermi.q	$xr5, $xr12, 2
	xvpickve2gr.d	$a2, $xr11, 2
	xvori.b	$xr12, $xr5, 0
	xvpermi.q	$xr12, $xr5, 1
	vinsgr2vr.h	$vr12, $a2, 2
	xvpermi.q	$xr5, $xr12, 2
	xvpickve2gr.d	$a2, $xr11, 3
	xvori.b	$xr11, $xr5, 0
	xvpermi.q	$xr11, $xr5, 1
	vinsgr2vr.h	$vr11, $a2, 3
	xvpermi.q	$xr5, $xr11, 2
	xvpickve2gr.d	$a2, $xr10, 0
	xvori.b	$xr11, $xr5, 0
	xvpermi.q	$xr11, $xr5, 1
	vinsgr2vr.h	$vr11, $a2, 4
	xvpermi.q	$xr5, $xr11, 2
	xvpickve2gr.d	$a2, $xr10, 1
	xvori.b	$xr11, $xr5, 0
	xvpermi.q	$xr11, $xr5, 1
	vinsgr2vr.h	$vr11, $a2, 5
	xvpermi.q	$xr5, $xr11, 2
	xvpickve2gr.d	$a2, $xr10, 2
	xvori.b	$xr11, $xr5, 0
	xvpermi.q	$xr11, $xr5, 1
	vinsgr2vr.h	$vr11, $a2, 6
	xvpermi.q	$xr5, $xr11, 2
	xvpickve2gr.d	$a2, $xr10, 3
	xvori.b	$xr10, $xr5, 0
	xvpermi.q	$xr10, $xr5, 1
	vinsgr2vr.h	$vr10, $a2, 7
	xvpermi.q	$xr5, $xr10, 2
	xvpickve2gr.d	$a2, $xr9, 0
	vinsgr2vr.h	$vr10, $a2, 0
	xvpickve2gr.d	$a2, $xr9, 1
	vinsgr2vr.h	$vr10, $a2, 1
	xvpickve2gr.d	$a2, $xr9, 2
	vinsgr2vr.h	$vr10, $a2, 2
	xvpickve2gr.d	$a2, $xr9, 3
	vinsgr2vr.h	$vr10, $a2, 3
	xvpickve2gr.d	$a2, $xr8, 0
	vinsgr2vr.h	$vr10, $a2, 4
	xvpickve2gr.d	$a2, $xr8, 1
	vinsgr2vr.h	$vr10, $a2, 5
	xvpickve2gr.d	$a2, $xr8, 2
	vinsgr2vr.h	$vr10, $a2, 6
	xvpickve2gr.d	$a2, $xr8, 3
	vinsgr2vr.h	$vr10, $a2, 7
	xvpickve2gr.d	$a2, $xr7, 0
	xvori.b	$xr8, $xr10, 0
	xvpermi.q	$xr8, $xr10, 1
	vinsgr2vr.h	$vr8, $a2, 0
	xvpermi.q	$xr10, $xr8, 2
	xvpickve2gr.d	$a2, $xr7, 1
	xvori.b	$xr8, $xr10, 0
	xvpermi.q	$xr8, $xr10, 1
	vinsgr2vr.h	$vr8, $a2, 1
	xvpermi.q	$xr10, $xr8, 2
	xvpickve2gr.d	$a2, $xr7, 2
	xvori.b	$xr8, $xr10, 0
	xvpermi.q	$xr8, $xr10, 1
	vinsgr2vr.h	$vr8, $a2, 2
	xvpermi.q	$xr10, $xr8, 2
	xvpickve2gr.d	$a2, $xr7, 3
	xvori.b	$xr7, $xr10, 0
	xvpermi.q	$xr7, $xr10, 1
	vinsgr2vr.h	$vr7, $a2, 3
	xvpermi.q	$xr10, $xr7, 2
	xvpickve2gr.d	$a2, $xr6, 0
	xvori.b	$xr7, $xr10, 0
	xvpermi.q	$xr7, $xr10, 1
	vinsgr2vr.h	$vr7, $a2, 4
	xvpermi.q	$xr10, $xr7, 2
	xvpickve2gr.d	$a2, $xr6, 1
	xvori.b	$xr7, $xr10, 0
	xvpermi.q	$xr7, $xr10, 1
	vinsgr2vr.h	$vr7, $a2, 5
	xvpermi.q	$xr10, $xr7, 2
	xvpickve2gr.d	$a2, $xr6, 2
	xvori.b	$xr7, $xr10, 0
	xvpermi.q	$xr7, $xr10, 1
	vinsgr2vr.h	$vr7, $a2, 6
	xvpermi.q	$xr10, $xr7, 2
	xvpickve2gr.d	$a2, $xr6, 3
	xvori.b	$xr6, $xr10, 0
	xvpermi.q	$xr6, $xr10, 1
	vinsgr2vr.h	$vr6, $a2, 7
	xvpermi.q	$xr10, $xr6, 2
	xvpickve2gr.d	$a2, $xr4, 0
	vinsgr2vr.h	$vr6, $a2, 0
	xvpickve2gr.d	$a2, $xr4, 1
	vinsgr2vr.h	$vr6, $a2, 1
	xvpickve2gr.d	$a2, $xr4, 2
	vinsgr2vr.h	$vr6, $a2, 2
	xvpickve2gr.d	$a2, $xr4, 3
	vinsgr2vr.h	$vr6, $a2, 3
	xvpickve2gr.d	$a2, $xr3, 0
	vinsgr2vr.h	$vr6, $a2, 4
	xvpickve2gr.d	$a2, $xr3, 1
	vinsgr2vr.h	$vr6, $a2, 5
	xvpickve2gr.d	$a2, $xr3, 2
	vinsgr2vr.h	$vr6, $a2, 6
	xvpickve2gr.d	$a2, $xr3, 3
	vinsgr2vr.h	$vr6, $a2, 7
	xvpickve2gr.d	$a2, $xr2, 0
	xvori.b	$xr3, $xr6, 0
	xvpermi.q	$xr3, $xr6, 1
	vinsgr2vr.h	$vr3, $a2, 0
	xvpermi.q	$xr6, $xr3, 2
	xvpickve2gr.d	$a2, $xr2, 1
	xvori.b	$xr3, $xr6, 0
	xvpermi.q	$xr3, $xr6, 1
	vinsgr2vr.h	$vr3, $a2, 1
	xvpermi.q	$xr6, $xr3, 2
	xvpickve2gr.d	$a2, $xr2, 2
	xvori.b	$xr3, $xr6, 0
	xvpermi.q	$xr3, $xr6, 1
	vinsgr2vr.h	$vr3, $a2, 2
	xvpermi.q	$xr6, $xr3, 2
	xvpickve2gr.d	$a2, $xr2, 3
	xvori.b	$xr2, $xr6, 0
	xvpermi.q	$xr2, $xr6, 1
	vinsgr2vr.h	$vr2, $a2, 3
	xvpermi.q	$xr6, $xr2, 2
	xvpickve2gr.d	$a2, $xr1, 0
	xvori.b	$xr2, $xr6, 0
	xvpermi.q	$xr2, $xr6, 1
	vinsgr2vr.h	$vr2, $a2, 4
	xvpermi.q	$xr6, $xr2, 2
	xvpickve2gr.d	$a2, $xr1, 1
	xvori.b	$xr2, $xr6, 0
	xvpermi.q	$xr2, $xr6, 1
	vinsgr2vr.h	$vr2, $a2, 5
	xvpermi.q	$xr6, $xr2, 2
	xvpickve2gr.d	$a2, $xr1, 2
	xvori.b	$xr2, $xr6, 0
	xvpermi.q	$xr2, $xr6, 1
	vinsgr2vr.h	$vr2, $a2, 6
	xvpermi.q	$xr6, $xr2, 2
	xvpickve2gr.d	$a2, $xr1, 3
	xvori.b	$xr1, $xr6, 0
	xvpermi.q	$xr1, $xr6, 1
	vinsgr2vr.h	$vr1, $a2, 7
	xvpermi.q	$xr6, $xr1, 2
	xvst	$xr0, $a1, -64
	xvst	$xr5, $a1, -32
	xvst	$xr10, $a1, 0
	xvst	$xr6, $a1, 32
	addi.d	$a0, $a0, 512
	addi.d	$a1, $a1, 128
	bne	$a0, $fp, .LBB25_8
# %bb.9:                                # %.lr.ph.i
	ld.d	$a0, $s6, 0
	ld.d	$a1, $s6, 8
	ori	$s4, $s7, 3584
	stx.h	$a0, $s8, $s4
	ld.d	$a0, $s6, 16
	ld.d	$a7, $sp, 16                    # 8-byte Folded Reload
	st.h	$a1, $a7, 0
	ld.d	$a1, $s6, 24
	ori	$a5, $s7, 3588
	stx.h	$a0, $s8, $a5
	ld.d	$a0, $s6, 32
	st.h	$a1, $a7, 4
	ld.d	$a1, $s6, 40
	move	$s5, $s2
	ori	$s2, $s7, 3592
	stx.h	$a0, $s8, $s2
	ld.d	$a0, $s6, 48
	st.h	$a1, $a7, 8
	ld.d	$a1, $s6, 56
	move	$a4, $s8
	ori	$s8, $s7, 3596
	stx.h	$a0, $a4, $s8
	ld.d	$a0, $s6, 64
	st.h	$a1, $a7, 12
	ld.d	$a1, $s6, 72
	ori	$s0, $s7, 3600
	stx.h	$a0, $a4, $s0
	ld.d	$a0, $s6, 80
	st.h	$a1, $a7, 16
	ld.d	$a1, $s6, 88
	ori	$s3, $s7, 3604
	stx.h	$a0, $a4, $s3
	ld.d	$a0, $s6, 96
	st.h	$a1, $a7, 20
	ori	$fp, $s7, 3608
	ld.d	$a1, $s6, 104
	stx.h	$a0, $a4, $fp
	ld.d	$a0, $s6, 112
	ld.d	$a2, $s6, 120
	st.h	$a1, $a7, 24
	ori	$s7, $s7, 3612
	move	$a3, $a4
	stx.h	$a0, $a4, $s7
	st.h	$a2, $a7, 28
	ori	$a0, $a6, 480
	.p2align	4, , 16
.LBB25_10:                              # %_ZL28truncOrZextVecInLoopWithVW16ImtEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a6, $a3, $a0
	ldx.hu	$a1, $a6, $s1
	ld.d	$a2, $sp, 40                    # 8-byte Folded Reload
	add.d	$a4, $a2, $a0
	ldx.hu	$a2, $a4, $s1
	bne	$a1, $a2, .LBB25_23
# %bb.11:                               # %_ZL28truncOrZextVecInLoopWithVW16ImtEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB25_10 Depth=1
	addi.d	$a0, $a0, 2
	addi.d	$s5, $s5, 8
	bnez	$a0, .LBB25_10
# %bb.12:
	st.d	$a5, $sp, 16                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	ld.w	$a1, $a0, 28
	st.d	$a1, $sp, 8                     # 8-byte Folded Spill
	ld.d	$s5, $a0, 16
.Ltmp569:
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp570:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	ld.d	$t2, $sp, 16                    # 8-byte Folded Reload
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	bnez	$a0, .LBB25_19
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s5, .LBB25_19
# %bb.15:                               # %.lr.ph.preheader
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	addi.d	$a0, $a0, 256
	addi.d	$a1, $sp, 56
	lu12i.w	$a2, -5
	ori	$a2, $a2, 512
	lu12i.w	$a4, 4
	ori	$a3, $a4, 3648
	ori	$a4, $a4, 3680
	.p2align	4, , 16
.LBB25_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_17 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a6, $sp, 56
	ld.d	$a5, $sp, 48                    # 8-byte Folded Reload
	add.d	$a5, $a6, $a5
	move	$a7, $a0
	move	$t0, $a2
	.p2align	4, , 16
.LBB25_17:                              # %vector.body93
                                        #   Parent Loop BB25_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr5, $a7, -160
	xvld	$xr14, $a7, -192
	xvld	$xr15, $a7, -224
	xvld	$xr16, $a7, -256
	xvld	$xr10, $a7, -32
	xvld	$xr11, $a7, -64
	xvld	$xr12, $a7, -96
	xvld	$xr13, $a7, -128
	xvld	$xr6, $a7, 96
	xvld	$xr7, $a7, 64
	xvld	$xr8, $a7, 32
	xvld	$xr9, $a7, 0
	xvld	$xr1, $a7, 224
	xvld	$xr2, $a7, 192
	xvld	$xr3, $a7, 160
	xvld	$xr4, $a7, 128
	xvpickve2gr.d	$t1, $xr16, 0
	vinsgr2vr.h	$vr0, $t1, 0
	xvpickve2gr.d	$t1, $xr16, 1
	vinsgr2vr.h	$vr0, $t1, 1
	xvpickve2gr.d	$t1, $xr16, 2
	vinsgr2vr.h	$vr0, $t1, 2
	xvpickve2gr.d	$t1, $xr16, 3
	vinsgr2vr.h	$vr0, $t1, 3
	xvpickve2gr.d	$t1, $xr15, 0
	vinsgr2vr.h	$vr0, $t1, 4
	xvpickve2gr.d	$t1, $xr15, 1
	vinsgr2vr.h	$vr0, $t1, 5
	xvpickve2gr.d	$t1, $xr15, 2
	vinsgr2vr.h	$vr0, $t1, 6
	xvpickve2gr.d	$t1, $xr15, 3
	vinsgr2vr.h	$vr0, $t1, 7
	xvpickve2gr.d	$t1, $xr14, 0
	xvori.b	$xr15, $xr0, 0
	xvpermi.q	$xr15, $xr0, 1
	vinsgr2vr.h	$vr15, $t1, 0
	xvpermi.q	$xr0, $xr15, 2
	xvpickve2gr.d	$t1, $xr14, 1
	xvori.b	$xr15, $xr0, 0
	xvpermi.q	$xr15, $xr0, 1
	vinsgr2vr.h	$vr15, $t1, 1
	xvpermi.q	$xr0, $xr15, 2
	xvpickve2gr.d	$t1, $xr14, 2
	xvori.b	$xr15, $xr0, 0
	xvpermi.q	$xr15, $xr0, 1
	vinsgr2vr.h	$vr15, $t1, 2
	xvpermi.q	$xr0, $xr15, 2
	xvpickve2gr.d	$t1, $xr14, 3
	xvori.b	$xr14, $xr0, 0
	xvpermi.q	$xr14, $xr0, 1
	vinsgr2vr.h	$vr14, $t1, 3
	xvpermi.q	$xr0, $xr14, 2
	xvpickve2gr.d	$t1, $xr5, 0
	xvori.b	$xr14, $xr0, 0
	xvpermi.q	$xr14, $xr0, 1
	vinsgr2vr.h	$vr14, $t1, 4
	xvpermi.q	$xr0, $xr14, 2
	xvpickve2gr.d	$t1, $xr5, 1
	xvori.b	$xr14, $xr0, 0
	xvpermi.q	$xr14, $xr0, 1
	vinsgr2vr.h	$vr14, $t1, 5
	xvpermi.q	$xr0, $xr14, 2
	xvpickve2gr.d	$t1, $xr5, 2
	xvori.b	$xr14, $xr0, 0
	xvpermi.q	$xr14, $xr0, 1
	vinsgr2vr.h	$vr14, $t1, 6
	xvpermi.q	$xr0, $xr14, 2
	xvpickve2gr.d	$t1, $xr5, 3
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $t1, 7
	xvpermi.q	$xr0, $xr5, 2
	xvpickve2gr.d	$t1, $xr13, 0
	vinsgr2vr.h	$vr5, $t1, 0
	xvpickve2gr.d	$t1, $xr13, 1
	vinsgr2vr.h	$vr5, $t1, 1
	xvpickve2gr.d	$t1, $xr13, 2
	vinsgr2vr.h	$vr5, $t1, 2
	xvpickve2gr.d	$t1, $xr13, 3
	vinsgr2vr.h	$vr5, $t1, 3
	xvpickve2gr.d	$t1, $xr12, 0
	vinsgr2vr.h	$vr5, $t1, 4
	xvpickve2gr.d	$t1, $xr12, 1
	vinsgr2vr.h	$vr5, $t1, 5
	xvpickve2gr.d	$t1, $xr12, 2
	vinsgr2vr.h	$vr5, $t1, 6
	xvpickve2gr.d	$t1, $xr12, 3
	vinsgr2vr.h	$vr5, $t1, 7
	xvpickve2gr.d	$t1, $xr11, 0
	xvori.b	$xr12, $xr5, 0
	xvpermi.q	$xr12, $xr5, 1
	vinsgr2vr.h	$vr12, $t1, 0
	xvpermi.q	$xr5, $xr12, 2
	xvpickve2gr.d	$t1, $xr11, 1
	xvori.b	$xr12, $xr5, 0
	xvpermi.q	$xr12, $xr5, 1
	vinsgr2vr.h	$vr12, $t1, 1
	xvpermi.q	$xr5, $xr12, 2
	xvpickve2gr.d	$t1, $xr11, 2
	xvori.b	$xr12, $xr5, 0
	xvpermi.q	$xr12, $xr5, 1
	vinsgr2vr.h	$vr12, $t1, 2
	xvpermi.q	$xr5, $xr12, 2
	xvpickve2gr.d	$t1, $xr11, 3
	xvori.b	$xr11, $xr5, 0
	xvpermi.q	$xr11, $xr5, 1
	vinsgr2vr.h	$vr11, $t1, 3
	xvpermi.q	$xr5, $xr11, 2
	xvpickve2gr.d	$t1, $xr10, 0
	xvori.b	$xr11, $xr5, 0
	xvpermi.q	$xr11, $xr5, 1
	vinsgr2vr.h	$vr11, $t1, 4
	xvpermi.q	$xr5, $xr11, 2
	xvpickve2gr.d	$t1, $xr10, 1
	xvori.b	$xr11, $xr5, 0
	xvpermi.q	$xr11, $xr5, 1
	vinsgr2vr.h	$vr11, $t1, 5
	xvpermi.q	$xr5, $xr11, 2
	xvpickve2gr.d	$t1, $xr10, 2
	xvori.b	$xr11, $xr5, 0
	xvpermi.q	$xr11, $xr5, 1
	vinsgr2vr.h	$vr11, $t1, 6
	xvpermi.q	$xr5, $xr11, 2
	xvpickve2gr.d	$t1, $xr10, 3
	xvori.b	$xr10, $xr5, 0
	xvpermi.q	$xr10, $xr5, 1
	vinsgr2vr.h	$vr10, $t1, 7
	xvpermi.q	$xr5, $xr10, 2
	xvpickve2gr.d	$t1, $xr9, 0
	vinsgr2vr.h	$vr10, $t1, 0
	xvpickve2gr.d	$t1, $xr9, 1
	vinsgr2vr.h	$vr10, $t1, 1
	xvpickve2gr.d	$t1, $xr9, 2
	vinsgr2vr.h	$vr10, $t1, 2
	xvpickve2gr.d	$t1, $xr9, 3
	vinsgr2vr.h	$vr10, $t1, 3
	xvpickve2gr.d	$t1, $xr8, 0
	vinsgr2vr.h	$vr10, $t1, 4
	xvpickve2gr.d	$t1, $xr8, 1
	vinsgr2vr.h	$vr10, $t1, 5
	xvpickve2gr.d	$t1, $xr8, 2
	vinsgr2vr.h	$vr10, $t1, 6
	xvpickve2gr.d	$t1, $xr8, 3
	vinsgr2vr.h	$vr10, $t1, 7
	xvpickve2gr.d	$t1, $xr7, 0
	xvori.b	$xr8, $xr10, 0
	xvpermi.q	$xr8, $xr10, 1
	vinsgr2vr.h	$vr8, $t1, 0
	xvpermi.q	$xr10, $xr8, 2
	xvpickve2gr.d	$t1, $xr7, 1
	xvori.b	$xr8, $xr10, 0
	xvpermi.q	$xr8, $xr10, 1
	vinsgr2vr.h	$vr8, $t1, 1
	xvpermi.q	$xr10, $xr8, 2
	xvpickve2gr.d	$t1, $xr7, 2
	xvori.b	$xr8, $xr10, 0
	xvpermi.q	$xr8, $xr10, 1
	vinsgr2vr.h	$vr8, $t1, 2
	xvpermi.q	$xr10, $xr8, 2
	xvpickve2gr.d	$t1, $xr7, 3
	xvori.b	$xr7, $xr10, 0
	xvpermi.q	$xr7, $xr10, 1
	vinsgr2vr.h	$vr7, $t1, 3
	xvpermi.q	$xr10, $xr7, 2
	xvpickve2gr.d	$t1, $xr6, 0
	xvori.b	$xr7, $xr10, 0
	xvpermi.q	$xr7, $xr10, 1
	vinsgr2vr.h	$vr7, $t1, 4
	xvpermi.q	$xr10, $xr7, 2
	xvpickve2gr.d	$t1, $xr6, 1
	xvori.b	$xr7, $xr10, 0
	xvpermi.q	$xr7, $xr10, 1
	vinsgr2vr.h	$vr7, $t1, 5
	xvpermi.q	$xr10, $xr7, 2
	xvpickve2gr.d	$t1, $xr6, 2
	xvori.b	$xr7, $xr10, 0
	xvpermi.q	$xr7, $xr10, 1
	vinsgr2vr.h	$vr7, $t1, 6
	xvpermi.q	$xr10, $xr7, 2
	xvpickve2gr.d	$t1, $xr6, 3
	xvori.b	$xr6, $xr10, 0
	xvpermi.q	$xr6, $xr10, 1
	vinsgr2vr.h	$vr6, $t1, 7
	xvpermi.q	$xr10, $xr6, 2
	xvpickve2gr.d	$t1, $xr4, 0
	vinsgr2vr.h	$vr6, $t1, 0
	xvpickve2gr.d	$t1, $xr4, 1
	vinsgr2vr.h	$vr6, $t1, 1
	xvpickve2gr.d	$t1, $xr4, 2
	vinsgr2vr.h	$vr6, $t1, 2
	xvpickve2gr.d	$t1, $xr4, 3
	vinsgr2vr.h	$vr6, $t1, 3
	xvpickve2gr.d	$t1, $xr3, 0
	vinsgr2vr.h	$vr6, $t1, 4
	xvpickve2gr.d	$t1, $xr3, 1
	vinsgr2vr.h	$vr6, $t1, 5
	xvpickve2gr.d	$t1, $xr3, 2
	vinsgr2vr.h	$vr6, $t1, 6
	xvpickve2gr.d	$t1, $xr3, 3
	vinsgr2vr.h	$vr6, $t1, 7
	xvpickve2gr.d	$t1, $xr2, 0
	xvori.b	$xr3, $xr6, 0
	xvpermi.q	$xr3, $xr6, 1
	vinsgr2vr.h	$vr3, $t1, 0
	xvpermi.q	$xr6, $xr3, 2
	xvpickve2gr.d	$t1, $xr2, 1
	xvori.b	$xr3, $xr6, 0
	xvpermi.q	$xr3, $xr6, 1
	vinsgr2vr.h	$vr3, $t1, 1
	xvpermi.q	$xr6, $xr3, 2
	xvpickve2gr.d	$t1, $xr2, 2
	xvori.b	$xr3, $xr6, 0
	xvpermi.q	$xr3, $xr6, 1
	vinsgr2vr.h	$vr3, $t1, 2
	xvpermi.q	$xr6, $xr3, 2
	xvpickve2gr.d	$t1, $xr2, 3
	xvori.b	$xr2, $xr6, 0
	xvpermi.q	$xr2, $xr6, 1
	vinsgr2vr.h	$vr2, $t1, 3
	xvpermi.q	$xr6, $xr2, 2
	xvpickve2gr.d	$t1, $xr1, 0
	xvori.b	$xr2, $xr6, 0
	xvpermi.q	$xr2, $xr6, 1
	vinsgr2vr.h	$vr2, $t1, 4
	xvpermi.q	$xr6, $xr2, 2
	xvpickve2gr.d	$t1, $xr1, 1
	xvori.b	$xr2, $xr6, 0
	xvpermi.q	$xr2, $xr6, 1
	vinsgr2vr.h	$vr2, $t1, 5
	xvpermi.q	$xr6, $xr2, 2
	xvpickve2gr.d	$t1, $xr1, 2
	xvori.b	$xr2, $xr6, 0
	xvpermi.q	$xr2, $xr6, 1
	vinsgr2vr.h	$vr2, $t1, 6
	xvpermi.q	$xr6, $xr2, 2
	xvpickve2gr.d	$t1, $xr1, 3
	xvori.b	$xr1, $xr6, 0
	xvpermi.q	$xr1, $xr6, 1
	vinsgr2vr.h	$vr1, $t1, 7
	xvpermi.q	$xr6, $xr1, 2
	add.d	$t1, $a6, $t0
	xvstx	$xr0, $t1, $s4
	xvstx	$xr5, $t1, $s1
	xvstx	$xr10, $t1, $a3
	xvstx	$xr6, $t1, $a4
	addi.d	$t0, $t0, 128
	addi.d	$a7, $a7, 512
	bnez	$t0, .LBB25_17
# %bb.18:                               # %.lr.ph.i24
                                        #   in Loop: Header=BB25_16 Depth=1
	ld.d	$a7, $s6, 0
	ld.d	$t0, $s6, 8
	ld.d	$t1, $s6, 16
	stx.h	$a7, $a6, $s4
	ld.d	$a7, $s6, 24
	st.h	$t0, $a5, 0
	stx.h	$t1, $a6, $t2
	ld.d	$t0, $s6, 32
	st.h	$a7, $a5, 4
	ld.d	$a7, $s6, 40
	ld.d	$t1, $s6, 48
	stx.h	$t0, $a6, $s2
	ld.d	$t0, $s6, 56
	st.h	$a7, $a5, 8
	stx.h	$t1, $a6, $s8
	ld.d	$a7, $s6, 64
	st.h	$t0, $a5, 12
	ld.d	$t0, $s6, 80
	ld.d	$t1, $s6, 96
	stx.h	$a7, $a6, $s0
	ld.d	$a7, $s6, 112
	stx.h	$t0, $a6, $s3
	stx.h	$t1, $a6, $fp
	ld.d	$t0, $s6, 72
	stx.h	$a7, $a6, $s7
	ld.d	$a6, $s6, 88
	ld.d	$a7, $s6, 104
	st.h	$t0, $a5, 16
	ld.d	$t0, $s6, 120
	st.h	$a6, $a5, 20
	st.h	$a7, $a5, 24
	addi.d	$s5, $s5, -1
	st.h	$t0, $a5, 28
	bnez	$s5, .LBB25_16
.LBB25_19:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp571:
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp572:
# %bb.20:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit36
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56
	beqz	$a0, .LBB25_22
# %bb.21:                               # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i38
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB25_22:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit42
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB25_23:
.Ltmp554:
	move	$s0, $a6
	move	$fp, $a4
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp555:
# %bb.24:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	ld.d	$a1, $s5, 0
.Ltmp556:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp557:
# %bb.25:                               # %_ZNSolsEm.exit
.Ltmp558:
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp559:
# %bb.26:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.hu	$a1, $s0, $s1
.Ltmp560:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp561:
# %bb.27:                               # %_ZNSolsEt.exit
.Ltmp562:
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp563:
# %bb.28:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit21
	ldx.hu	$a1, $fp, $s1
.Ltmp564:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp565:
# %bb.29:                               # %_ZNSolsEt.exit23
.Ltmp566:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp567:
# %bb.30:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB25_31:                              # %.thread
.Ltmp550:
	move	$s1, $a0
	b	.LBB25_37
.LBB25_32:
.Ltmp547:
	move	$s1, $a0
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB25_33:
.Ltmp573:
	b	.LBB25_36
.LBB25_34:
.Ltmp568:
	b	.LBB25_36
.LBB25_35:
.Ltmp553:
.LBB25_36:
	move	$s1, $a0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56
	move	$s8, $a0
	beqz	$a0, .LBB25_38
.LBB25_37:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i31
	move	$a0, $s8
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB25_38:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end25:
	.size	_Z62benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint16_t_RN9benchmark5StateE, .Lfunc_end25-_Z62benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint16_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table25:
.Lexception25:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end25-.Lcst_begin25
.Lcst_begin25:
	.uleb128 .Lfunc_begin25-.Lfunc_begin25  # >> Call Site 1 <<
	.uleb128 .Ltmp545-.Lfunc_begin25        #   Call between .Lfunc_begin25 and .Ltmp545
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp545-.Lfunc_begin25        # >> Call Site 2 <<
	.uleb128 .Ltmp546-.Ltmp545              #   Call between .Ltmp545 and .Ltmp546
	.uleb128 .Ltmp547-.Lfunc_begin25        #     jumps to .Ltmp547
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp548-.Lfunc_begin25        # >> Call Site 3 <<
	.uleb128 .Ltmp549-.Ltmp548              #   Call between .Ltmp548 and .Ltmp549
	.uleb128 .Ltmp550-.Lfunc_begin25        #     jumps to .Ltmp550
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp551-.Lfunc_begin25        # >> Call Site 4 <<
	.uleb128 .Ltmp552-.Ltmp551              #   Call between .Ltmp551 and .Ltmp552
	.uleb128 .Ltmp553-.Lfunc_begin25        #     jumps to .Ltmp553
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp569-.Lfunc_begin25        # >> Call Site 5 <<
	.uleb128 .Ltmp572-.Ltmp569              #   Call between .Ltmp569 and .Ltmp572
	.uleb128 .Ltmp573-.Lfunc_begin25        #     jumps to .Ltmp573
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp572-.Lfunc_begin25        # >> Call Site 6 <<
	.uleb128 .Ltmp554-.Ltmp572              #   Call between .Ltmp572 and .Ltmp554
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp554-.Lfunc_begin25        # >> Call Site 7 <<
	.uleb128 .Ltmp567-.Ltmp554              #   Call between .Ltmp554 and .Ltmp567
	.uleb128 .Ltmp568-.Lfunc_begin25        #     jumps to .Ltmp568
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp567-.Lfunc_begin25        # >> Call Site 8 <<
	.uleb128 .Lfunc_end25-.Ltmp567          #   Call between .Ltmp567 and .Lfunc_end25
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end25:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z54benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint16_t_RN9benchmark5StateE
.LCPI26_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z54benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint16_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z54benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint16_t_RN9benchmark5StateE,@function
_Z54benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint16_t_RN9benchmark5StateE: # @_Z54benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint16_t_RN9benchmark5StateE
.Lfunc_begin26:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception26
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$s2, $a0
	lu12i.w	$a0, 19
	ori	$s4, $a0, 2176
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp574:
	lu12i.w	$s6, 4
	ori	$s1, $s6, 3616
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp575:
# %bb.1:
	move	$s3, $a0
	st.d	$a0, $sp, 72
.Ltmp577:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp578:
# %bb.2:
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(.LCPI26_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI26_0)
	move	$s7, $zero
	vst	$vr0, $sp, 80
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB26_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp580:
	addi.d	$a0, $sp, 80
	addi.d	$a2, $sp, 80
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp581:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB26_3 Depth=1
	stx.d	$a0, $fp, $s7
	addi.d	$s7, $s7, 8
	bne	$s7, $s4, .LBB26_3
# %bb.5:                                # %vector.ph
	addi.d	$a0, $fp, 8
	lu12i.w	$s5, -5
	ori	$a1, $s5, 480
	ori	$a2, $s6, 3618
	.p2align	4, , 16
.LBB26_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a3, $a0, -8
	ld.d	$a4, $a0, 0
	add.d	$a5, $s0, $a1
	stx.h	$a3, $a5, $s1
	stx.h	$a4, $a5, $a2
	addi.d	$a1, $a1, 4
	addi.d	$a0, $a0, 16
	bnez	$a1, .LBB26_6
# %bb.7:                                # %vector.body83.preheader
	move	$a0, $zero
	addi.d	$a1, $s3, 8
	.p2align	4, , 16
.LBB26_8:                               # %vector.body83
                                        # =>This Inner Loop Header: Depth=1
	xvldx	$xr0, $fp, $a0
	add.d	$a2, $fp, $a0
	xvld	$xr1, $a2, 32
	xvpickve2gr.d	$a2, $xr0, 3
	st.h	$a2, $sp, 38
	xvpickve2gr.d	$a2, $xr0, 2
	st.h	$a2, $sp, 36
	xvpickve2gr.d	$a2, $xr0, 1
	st.h	$a2, $sp, 34
	xvpickve2gr.d	$a2, $xr0, 0
	st.h	$a2, $sp, 32
	xvpickve2gr.d	$a2, $xr1, 3
	st.h	$a2, $sp, 54
	xvpickve2gr.d	$a2, $xr1, 2
	st.h	$a2, $sp, 52
	xvpickve2gr.d	$a2, $xr1, 1
	st.h	$a2, $sp, 50
	xvpickve2gr.d	$a2, $xr1, 0
	st.h	$a2, $sp, 48
	vld	$vr0, $sp, 32
	vld	$vr1, $sp, 48
	vpackev.d	$vr0, $vr1, $vr0
	vst	$vr0, $a1, -8
	addi.d	$a0, $a0, 64
	addi.d	$a1, $a1, 16
	bne	$a0, $s4, .LBB26_8
# %bb.9:                                # %_ZL20truncOrZextVecInLoopImtEvPKT_PT0_i.exit.preheader.preheader
	ori	$a0, $s5, 480
	move	$s7, $fp
	.p2align	4, , 16
.LBB26_10:                              # %_ZL20truncOrZextVecInLoopImtEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	add.d	$s6, $s3, $a0
	ldx.hu	$a1, $s6, $s1
	add.d	$s4, $s0, $a0
	ldx.hu	$a2, $s4, $s1
	bne	$a1, $a2, .LBB26_23
# %bb.11:                               # %_ZL20truncOrZextVecInLoopImtEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB26_10 Depth=1
	addi.d	$a0, $a0, 2
	addi.d	$s7, $s7, 8
	bnez	$a0, .LBB26_10
# %bb.12:
	ld.w	$s4, $s2, 28
	ld.d	$s3, $s2, 16
.Ltmp598:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp599:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s4, .LBB26_19
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s3, .LBB26_19
# %bb.15:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 32
	addi.d	$a1, $sp, 72
	ori	$a2, $s5, 480
	.p2align	4, , 16
.LBB26_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_17 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a3, $sp, 72
	move	$a4, $a0
	move	$a5, $a2
	.p2align	4, , 16
.LBB26_17:                              # %vector.body91
                                        #   Parent Loop BB26_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr0, $a4, -32
	xvld	$xr1, $a4, 0
	xvpickve2gr.d	$a6, $xr0, 3
	st.h	$a6, $sp, 22
	xvpickve2gr.d	$a6, $xr0, 2
	st.h	$a6, $sp, 20
	xvpickve2gr.d	$a6, $xr0, 1
	st.h	$a6, $sp, 18
	xvpickve2gr.d	$a6, $xr0, 0
	st.h	$a6, $sp, 16
	xvpickve2gr.d	$a6, $xr1, 3
	st.h	$a6, $sp, 6
	xvpickve2gr.d	$a6, $xr1, 2
	st.h	$a6, $sp, 4
	xvpickve2gr.d	$a6, $xr1, 1
	st.h	$a6, $sp, 2
	xvpickve2gr.d	$a6, $xr1, 0
	st.h	$a6, $sp, 0
	vld	$vr0, $sp, 16
	vld	$vr1, $sp, 0
	add.d	$a6, $a3, $a5
	vpackev.d	$vr0, $vr1, $vr0
	vstx	$vr0, $a6, $s1
	addi.d	$a5, $a5, 16
	addi.d	$a4, $a4, 64
	bnez	$a5, .LBB26_17
# %bb.18:                               # %_ZL20truncOrZextVecInLoopImtEvPKT_PT0_i.exit28
                                        #   in Loop: Header=BB26_16 Depth=1
	addi.d	$s3, $s3, -1
	bnez	$s3, .LBB26_16
.LBB26_19:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp600:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp601:
# %bb.20:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit36
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72
	beqz	$a0, .LBB26_22
# %bb.21:                               # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i38
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB26_22:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit42
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB26_23:
.Ltmp583:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp584:
# %bb.24:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	ld.d	$a1, $s7, 0
.Ltmp585:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp586:
# %bb.25:                               # %_ZNSolsEm.exit
.Ltmp587:
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp588:
# %bb.26:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.hu	$a1, $s6, $s1
.Ltmp589:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp590:
# %bb.27:                               # %_ZNSolsEt.exit
.Ltmp591:
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp592:
# %bb.28:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit21
	ldx.hu	$a1, $s4, $s1
.Ltmp593:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp594:
# %bb.29:                               # %_ZNSolsEt.exit23
.Ltmp595:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp596:
# %bb.30:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB26_31:                              # %.thread
.Ltmp579:
	move	$s1, $a0
	b	.LBB26_37
.LBB26_32:
.Ltmp576:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB26_33:
.Ltmp602:
	b	.LBB26_36
.LBB26_34:
.Ltmp597:
	b	.LBB26_36
.LBB26_35:
.Ltmp582:
.LBB26_36:
	move	$s1, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s3, $sp, 72
	beqz	$s3, .LBB26_38
.LBB26_37:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i31
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB26_38:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end26:
	.size	_Z54benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint16_t_RN9benchmark5StateE, .Lfunc_end26-_Z54benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint16_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table26:
.Lexception26:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end26-.Lcst_begin26
.Lcst_begin26:
	.uleb128 .Lfunc_begin26-.Lfunc_begin26  # >> Call Site 1 <<
	.uleb128 .Ltmp574-.Lfunc_begin26        #   Call between .Lfunc_begin26 and .Ltmp574
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp574-.Lfunc_begin26        # >> Call Site 2 <<
	.uleb128 .Ltmp575-.Ltmp574              #   Call between .Ltmp574 and .Ltmp575
	.uleb128 .Ltmp576-.Lfunc_begin26        #     jumps to .Ltmp576
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp577-.Lfunc_begin26        # >> Call Site 3 <<
	.uleb128 .Ltmp578-.Ltmp577              #   Call between .Ltmp577 and .Ltmp578
	.uleb128 .Ltmp579-.Lfunc_begin26        #     jumps to .Ltmp579
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp580-.Lfunc_begin26        # >> Call Site 4 <<
	.uleb128 .Ltmp581-.Ltmp580              #   Call between .Ltmp580 and .Ltmp581
	.uleb128 .Ltmp582-.Lfunc_begin26        #     jumps to .Ltmp582
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp598-.Lfunc_begin26        # >> Call Site 5 <<
	.uleb128 .Ltmp601-.Ltmp598              #   Call between .Ltmp598 and .Ltmp601
	.uleb128 .Ltmp602-.Lfunc_begin26        #     jumps to .Ltmp602
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp601-.Lfunc_begin26        # >> Call Site 6 <<
	.uleb128 .Ltmp583-.Ltmp601              #   Call between .Ltmp601 and .Ltmp583
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp583-.Lfunc_begin26        # >> Call Site 7 <<
	.uleb128 .Ltmp596-.Ltmp583              #   Call between .Ltmp583 and .Ltmp596
	.uleb128 .Ltmp597-.Lfunc_begin26        #     jumps to .Ltmp597
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp596-.Lfunc_begin26        # >> Call Site 8 <<
	.uleb128 .Lfunc_end26-.Ltmp596          #   Call between .Ltmp596 and .Lfunc_end26
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end26:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint16_t_RN9benchmark5StateE
.LCPI27_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint16_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint16_t_RN9benchmark5StateE,@function
_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint16_t_RN9benchmark5StateE: # @_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint16_t_RN9benchmark5StateE
.Lfunc_begin27:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception27
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$s0, $a0
	lu12i.w	$s4, 19
	ori	$s3, $s4, 2176
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp603:
	lu12i.w	$s6, 4
	ori	$s1, $s6, 3616
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp604:
# %bb.1:
	move	$s2, $a0
	move	$s7, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI27_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI27_0)
	ori	$a0, $s4, 2048
	add.d	$s5, $fp, $a0
	st.d	$s2, $sp, 8
	vst	$vr0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB27_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp606:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp607:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB27_2 Depth=1
	stx.d	$a0, $fp, $s7
	addi.d	$s7, $s7, 8
	bne	$s7, $s3, .LBB27_2
# %bb.4:
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 16
	lu12i.w	$s4, -5
	ori	$s7, $s4, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s3, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB27_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp609:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s3
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp610:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB27_5 Depth=1
	add.d	$a1, $s2, $s7
	addi.d	$s7, $s7, 2
	stx.h	$a0, $a1, $s1
	bnez	$s7, .LBB27_5
# %bb.7:
	ld.w	$s3, $s0, 28
	ld.d	$s2, $s0, 16
.Ltmp612:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp613:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s3, .LBB27_14
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s2, .LBB27_14
# %bb.10:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 128
	addi.d	$a1, $sp, 8
	ori	$a2, $s6, 3586
	ori	$a3, $s4, 512
	ori	$a4, $s6, 3584
	ori	$a5, $s6, 3600
	ori	$a6, $s6, 3632
	ori	$a7, $s6, 3588
	ori	$t0, $s6, 3592
	ori	$t1, $s6, 3596
	ori	$t2, $s6, 3604
	ori	$t3, $s6, 3608
	ori	$t4, $s6, 3612
	.p2align	4, , 16
.LBB27_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_12 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$t6, $sp, 8
	add.d	$t5, $t6, $a2
	move	$t7, $a0
	move	$t8, $a3
	.p2align	4, , 16
.LBB27_12:                              # %vector.body
                                        #   Parent Loop BB27_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr8, $t7, -96
	xvld	$xr9, $t7, -128
	xvld	$xr10, $t7, -32
	xvld	$xr11, $t7, -64
	xvld	$xr7, $t7, 32
	xvld	$xr12, $t7, 0
	xvld	$xr0, $t7, 96
	xvld	$xr6, $t7, 64
	add.d	$s3, $t6, $t8
	vldx	$vr1, $s3, $a4
	vldx	$vr2, $s3, $a5
	vldx	$vr3, $s3, $s1
	vldx	$vr4, $s3, $a6
	xvpickve2gr.d	$s4, $xr9, 0
	vinsgr2vr.h	$vr5, $s4, 0
	xvpickve2gr.d	$s4, $xr9, 1
	vinsgr2vr.h	$vr5, $s4, 1
	xvpickve2gr.d	$s4, $xr9, 2
	vinsgr2vr.h	$vr5, $s4, 2
	xvpickve2gr.d	$s4, $xr9, 3
	vinsgr2vr.h	$vr5, $s4, 3
	xvpickve2gr.d	$s4, $xr8, 0
	vinsgr2vr.h	$vr5, $s4, 4
	xvpickve2gr.d	$s4, $xr8, 1
	vinsgr2vr.h	$vr5, $s4, 5
	xvpickve2gr.d	$s4, $xr8, 2
	vinsgr2vr.h	$vr5, $s4, 6
	xvpickve2gr.d	$s4, $xr8, 3
	vinsgr2vr.h	$vr5, $s4, 7
	xvpickve2gr.d	$s4, $xr11, 0
	vinsgr2vr.h	$vr8, $s4, 0
	xvpickve2gr.d	$s4, $xr11, 1
	vinsgr2vr.h	$vr8, $s4, 1
	xvpickve2gr.d	$s4, $xr11, 2
	vinsgr2vr.h	$vr8, $s4, 2
	xvpickve2gr.d	$s4, $xr11, 3
	vinsgr2vr.h	$vr8, $s4, 3
	xvpickve2gr.d	$s4, $xr10, 0
	vinsgr2vr.h	$vr8, $s4, 4
	xvpickve2gr.d	$s4, $xr10, 1
	vinsgr2vr.h	$vr8, $s4, 5
	xvpickve2gr.d	$s4, $xr10, 2
	vinsgr2vr.h	$vr8, $s4, 6
	xvpickve2gr.d	$s4, $xr10, 3
	vinsgr2vr.h	$vr8, $s4, 7
	xvpickve2gr.d	$s4, $xr12, 0
	vinsgr2vr.h	$vr9, $s4, 0
	xvpickve2gr.d	$s4, $xr12, 1
	vinsgr2vr.h	$vr9, $s4, 1
	xvpickve2gr.d	$s4, $xr12, 2
	vinsgr2vr.h	$vr9, $s4, 2
	xvpickve2gr.d	$s4, $xr12, 3
	vinsgr2vr.h	$vr9, $s4, 3
	xvpickve2gr.d	$s4, $xr7, 0
	vinsgr2vr.h	$vr9, $s4, 4
	xvpickve2gr.d	$s4, $xr7, 1
	vinsgr2vr.h	$vr9, $s4, 5
	xvpickve2gr.d	$s4, $xr7, 2
	vinsgr2vr.h	$vr9, $s4, 6
	xvpickve2gr.d	$s4, $xr7, 3
	vinsgr2vr.h	$vr9, $s4, 7
	xvpickve2gr.d	$s4, $xr6, 0
	vinsgr2vr.h	$vr7, $s4, 0
	xvpickve2gr.d	$s4, $xr6, 1
	vinsgr2vr.h	$vr7, $s4, 1
	xvpickve2gr.d	$s4, $xr6, 2
	vinsgr2vr.h	$vr7, $s4, 2
	xvpickve2gr.d	$s4, $xr6, 3
	vinsgr2vr.h	$vr7, $s4, 3
	xvpickve2gr.d	$s4, $xr0, 0
	vinsgr2vr.h	$vr7, $s4, 4
	xvpickve2gr.d	$s4, $xr0, 1
	vinsgr2vr.h	$vr7, $s4, 5
	xvpickve2gr.d	$s4, $xr0, 2
	vinsgr2vr.h	$vr7, $s4, 6
	xvpickve2gr.d	$s4, $xr0, 3
	vinsgr2vr.h	$vr7, $s4, 7
	vadd.h	$vr0, $vr1, $vr5
	vadd.h	$vr1, $vr2, $vr8
	vadd.h	$vr2, $vr3, $vr9
	vadd.h	$vr3, $vr4, $vr7
	vstx	$vr0, $s3, $a4
	vstx	$vr1, $s3, $a5
	vstx	$vr2, $s3, $s1
	vstx	$vr3, $s3, $a6
	addi.d	$t8, $t8, 64
	addi.d	$t7, $t7, 256
	bnez	$t8, .LBB27_12
# %bb.13:                               # %.lr.ph.i
                                        #   in Loop: Header=BB27_11 Depth=1
	ld.h	$t7, $s5, 0
	ldx.h	$t8, $t6, $a4
	add.d	$t7, $t8, $t7
	stx.h	$t7, $t6, $a4
	ld.h	$t7, $s5, 8
	ld.h	$t8, $t5, 0
	add.d	$t7, $t8, $t7
	st.h	$t7, $t5, 0
	ld.h	$t7, $s5, 16
	ldx.h	$t8, $t6, $a7
	add.d	$t7, $t8, $t7
	stx.h	$t7, $t6, $a7
	ld.h	$t7, $s5, 24
	ld.h	$t8, $t5, 4
	add.d	$t7, $t8, $t7
	st.h	$t7, $t5, 4
	ld.h	$t7, $s5, 32
	ldx.h	$t8, $t6, $t0
	add.d	$t7, $t8, $t7
	stx.h	$t7, $t6, $t0
	ld.h	$t7, $s5, 40
	ld.h	$t8, $t5, 8
	add.d	$t7, $t8, $t7
	st.h	$t7, $t5, 8
	ld.h	$t7, $s5, 48
	ldx.h	$t8, $t6, $t1
	add.d	$t7, $t8, $t7
	stx.h	$t7, $t6, $t1
	ld.h	$t7, $s5, 56
	ld.h	$t8, $t5, 12
	add.d	$t7, $t8, $t7
	st.h	$t7, $t5, 12
	ld.h	$t7, $s5, 64
	ldx.h	$t8, $t6, $a5
	add.d	$t7, $t8, $t7
	stx.h	$t7, $t6, $a5
	ld.h	$t7, $s5, 72
	ld.h	$t8, $t5, 16
	add.d	$t7, $t8, $t7
	st.h	$t7, $t5, 16
	ld.h	$t7, $s5, 80
	ldx.h	$t8, $t6, $t2
	add.d	$t7, $t8, $t7
	stx.h	$t7, $t6, $t2
	ld.h	$t7, $s5, 88
	ld.h	$t8, $t5, 20
	add.d	$t7, $t8, $t7
	st.h	$t7, $t5, 20
	ld.h	$t7, $s5, 96
	ldx.h	$t8, $t6, $t3
	add.d	$t7, $t8, $t7
	stx.h	$t7, $t6, $t3
	ld.h	$t7, $s5, 104
	ld.h	$t8, $t5, 24
	add.d	$t7, $t8, $t7
	st.h	$t7, $t5, 24
	ld.h	$t7, $s5, 112
	ldx.h	$t8, $t6, $t4
	add.d	$t7, $t8, $t7
	stx.h	$t7, $t6, $t4
	ld.h	$t6, $s5, 120
	ld.h	$t7, $t5, 28
	add.d	$t6, $t7, $t6
	addi.d	$s2, $s2, -1
	st.h	$t6, $t5, 28
	bnez	$s2, .LBB27_11
.LBB27_14:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp614:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp615:
# %bb.15:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 8
	beqz	$a0, .LBB27_17
# %bb.16:                               # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB27_17:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB27_18:
.Ltmp605:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB27_19:
.Ltmp616:
	ld.d	$s2, $sp, 8
	move	$s0, $a0
	bnez	$s2, .LBB27_23
	b	.LBB27_24
.LBB27_20:                              # %.loopexit
.Ltmp611:
	b	.LBB27_22
.LBB27_21:                              # %.loopexit.split-lp
.Ltmp608:
.LBB27_22:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB27_23:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB27_24:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end27:
	.size	_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint16_t_RN9benchmark5StateE, .Lfunc_end27-_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint16_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table27:
.Lexception27:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end27-.Lcst_begin27
.Lcst_begin27:
	.uleb128 .Lfunc_begin27-.Lfunc_begin27  # >> Call Site 1 <<
	.uleb128 .Ltmp603-.Lfunc_begin27        #   Call between .Lfunc_begin27 and .Ltmp603
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp603-.Lfunc_begin27        # >> Call Site 2 <<
	.uleb128 .Ltmp604-.Ltmp603              #   Call between .Ltmp603 and .Ltmp604
	.uleb128 .Ltmp605-.Lfunc_begin27        #     jumps to .Ltmp605
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp606-.Lfunc_begin27        # >> Call Site 3 <<
	.uleb128 .Ltmp607-.Ltmp606              #   Call between .Ltmp606 and .Ltmp607
	.uleb128 .Ltmp608-.Lfunc_begin27        #     jumps to .Ltmp608
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp609-.Lfunc_begin27        # >> Call Site 4 <<
	.uleb128 .Ltmp610-.Ltmp609              #   Call between .Ltmp609 and .Ltmp610
	.uleb128 .Ltmp611-.Lfunc_begin27        #     jumps to .Ltmp611
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp612-.Lfunc_begin27        # >> Call Site 5 <<
	.uleb128 .Ltmp615-.Ltmp612              #   Call between .Ltmp612 and .Ltmp615
	.uleb128 .Ltmp616-.Lfunc_begin27        #     jumps to .Ltmp616
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp615-.Lfunc_begin27        # >> Call Site 6 <<
	.uleb128 .Lfunc_end27-.Ltmp615          #   Call between .Ltmp615 and .Lfunc_end27
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end27:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint16_t_RN9benchmark5StateE
.LCPI28_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint16_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint16_t_RN9benchmark5StateE,@function
_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint16_t_RN9benchmark5StateE: # @_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint16_t_RN9benchmark5StateE
.Lfunc_begin28:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception28
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$s0, $a0
	lu12i.w	$s4, 19
	ori	$s3, $s4, 2176
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp617:
	lu12i.w	$s6, 4
	ori	$s1, $s6, 3616
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp618:
# %bb.1:
	move	$s2, $a0
	move	$s7, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI28_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI28_0)
	ori	$a0, $s4, 2048
	add.d	$s5, $fp, $a0
	st.d	$s2, $sp, 8
	vst	$vr0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB28_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp620:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp621:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB28_2 Depth=1
	stx.d	$a0, $fp, $s7
	addi.d	$s7, $s7, 8
	bne	$s7, $s3, .LBB28_2
# %bb.4:
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 16
	lu12i.w	$s4, -5
	ori	$s7, $s4, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s3, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB28_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp623:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s3
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp624:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB28_5 Depth=1
	add.d	$a1, $s2, $s7
	addi.d	$s7, $s7, 2
	stx.h	$a0, $a1, $s1
	bnez	$s7, .LBB28_5
# %bb.7:
	ld.w	$s3, $s0, 28
	ld.d	$s2, $s0, 16
.Ltmp626:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp627:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s3, .LBB28_14
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s2, .LBB28_14
# %bb.10:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 256
	addi.d	$a1, $sp, 8
	ori	$a2, $s6, 3586
	ori	$a3, $s4, 512
	ori	$a4, $s6, 3584
	ori	$a5, $s6, 3648
	ori	$a6, $s6, 3680
	ori	$a7, $s6, 3588
	ori	$t0, $s6, 3592
	ori	$t1, $s6, 3596
	ori	$t2, $s6, 3600
	ori	$t3, $s6, 3604
	ori	$t4, $s6, 3608
	ori	$t5, $s6, 3612
	.p2align	4, , 16
.LBB28_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_12 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$t7, $sp, 8
	add.d	$t6, $t7, $a2
	move	$t8, $a0
	move	$s3, $a3
	.p2align	4, , 16
.LBB28_12:                              # %vector.body
                                        #   Parent Loop BB28_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr10, $t8, -160
	xvld	$xr18, $t8, -192
	xvld	$xr19, $t8, -224
	xvld	$xr20, $t8, -256
	xvld	$xr14, $t8, -32
	xvld	$xr15, $t8, -64
	xvld	$xr16, $t8, -96
	xvld	$xr17, $t8, -128
	xvld	$xr9, $t8, 96
	xvld	$xr11, $t8, 64
	xvld	$xr12, $t8, 32
	xvld	$xr13, $t8, 0
	xvld	$xr4, $t8, 224
	xvld	$xr6, $t8, 192
	xvld	$xr7, $t8, 160
	xvld	$xr8, $t8, 128
	add.d	$s4, $t7, $s3
	xvldx	$xr0, $s4, $a4
	xvldx	$xr1, $s4, $s1
	xvldx	$xr2, $s4, $a5
	xvldx	$xr3, $s4, $a6
	xvpickve2gr.d	$s6, $xr20, 0
	vinsgr2vr.h	$vr5, $s6, 0
	xvpickve2gr.d	$s6, $xr20, 1
	vinsgr2vr.h	$vr5, $s6, 1
	xvpickve2gr.d	$s6, $xr20, 2
	vinsgr2vr.h	$vr5, $s6, 2
	xvpickve2gr.d	$s6, $xr20, 3
	vinsgr2vr.h	$vr5, $s6, 3
	xvpickve2gr.d	$s6, $xr19, 0
	vinsgr2vr.h	$vr5, $s6, 4
	xvpickve2gr.d	$s6, $xr19, 1
	vinsgr2vr.h	$vr5, $s6, 5
	xvpickve2gr.d	$s6, $xr19, 2
	vinsgr2vr.h	$vr5, $s6, 6
	xvpickve2gr.d	$s6, $xr19, 3
	vinsgr2vr.h	$vr5, $s6, 7
	xvpickve2gr.d	$s6, $xr18, 0
	xvori.b	$xr19, $xr5, 0
	xvpermi.q	$xr19, $xr5, 1
	vinsgr2vr.h	$vr19, $s6, 0
	xvpermi.q	$xr5, $xr19, 2
	xvpickve2gr.d	$s6, $xr18, 1
	xvori.b	$xr19, $xr5, 0
	xvpermi.q	$xr19, $xr5, 1
	vinsgr2vr.h	$vr19, $s6, 1
	xvpermi.q	$xr5, $xr19, 2
	xvpickve2gr.d	$s6, $xr18, 2
	xvori.b	$xr19, $xr5, 0
	xvpermi.q	$xr19, $xr5, 1
	vinsgr2vr.h	$vr19, $s6, 2
	xvpermi.q	$xr5, $xr19, 2
	xvpickve2gr.d	$s6, $xr18, 3
	xvori.b	$xr18, $xr5, 0
	xvpermi.q	$xr18, $xr5, 1
	vinsgr2vr.h	$vr18, $s6, 3
	xvpermi.q	$xr5, $xr18, 2
	xvpickve2gr.d	$s6, $xr10, 0
	xvori.b	$xr18, $xr5, 0
	xvpermi.q	$xr18, $xr5, 1
	vinsgr2vr.h	$vr18, $s6, 4
	xvpermi.q	$xr5, $xr18, 2
	xvpickve2gr.d	$s6, $xr10, 1
	xvori.b	$xr18, $xr5, 0
	xvpermi.q	$xr18, $xr5, 1
	vinsgr2vr.h	$vr18, $s6, 5
	xvpermi.q	$xr5, $xr18, 2
	xvpickve2gr.d	$s6, $xr10, 2
	xvori.b	$xr18, $xr5, 0
	xvpermi.q	$xr18, $xr5, 1
	vinsgr2vr.h	$vr18, $s6, 6
	xvpermi.q	$xr5, $xr18, 2
	xvpickve2gr.d	$s6, $xr10, 3
	xvori.b	$xr10, $xr5, 0
	xvpermi.q	$xr10, $xr5, 1
	vinsgr2vr.h	$vr10, $s6, 7
	xvpermi.q	$xr5, $xr10, 2
	xvpickve2gr.d	$s6, $xr17, 0
	vinsgr2vr.h	$vr10, $s6, 0
	xvpickve2gr.d	$s6, $xr17, 1
	vinsgr2vr.h	$vr10, $s6, 1
	xvpickve2gr.d	$s6, $xr17, 2
	vinsgr2vr.h	$vr10, $s6, 2
	xvpickve2gr.d	$s6, $xr17, 3
	vinsgr2vr.h	$vr10, $s6, 3
	xvpickve2gr.d	$s6, $xr16, 0
	vinsgr2vr.h	$vr10, $s6, 4
	xvpickve2gr.d	$s6, $xr16, 1
	vinsgr2vr.h	$vr10, $s6, 5
	xvpickve2gr.d	$s6, $xr16, 2
	vinsgr2vr.h	$vr10, $s6, 6
	xvpickve2gr.d	$s6, $xr16, 3
	vinsgr2vr.h	$vr10, $s6, 7
	xvpickve2gr.d	$s6, $xr15, 0
	xvori.b	$xr16, $xr10, 0
	xvpermi.q	$xr16, $xr10, 1
	vinsgr2vr.h	$vr16, $s6, 0
	xvpermi.q	$xr10, $xr16, 2
	xvpickve2gr.d	$s6, $xr15, 1
	xvori.b	$xr16, $xr10, 0
	xvpermi.q	$xr16, $xr10, 1
	vinsgr2vr.h	$vr16, $s6, 1
	xvpermi.q	$xr10, $xr16, 2
	xvpickve2gr.d	$s6, $xr15, 2
	xvori.b	$xr16, $xr10, 0
	xvpermi.q	$xr16, $xr10, 1
	vinsgr2vr.h	$vr16, $s6, 2
	xvpermi.q	$xr10, $xr16, 2
	xvpickve2gr.d	$s6, $xr15, 3
	xvori.b	$xr15, $xr10, 0
	xvpermi.q	$xr15, $xr10, 1
	vinsgr2vr.h	$vr15, $s6, 3
	xvpermi.q	$xr10, $xr15, 2
	xvpickve2gr.d	$s6, $xr14, 0
	xvori.b	$xr15, $xr10, 0
	xvpermi.q	$xr15, $xr10, 1
	vinsgr2vr.h	$vr15, $s6, 4
	xvpermi.q	$xr10, $xr15, 2
	xvpickve2gr.d	$s6, $xr14, 1
	xvori.b	$xr15, $xr10, 0
	xvpermi.q	$xr15, $xr10, 1
	vinsgr2vr.h	$vr15, $s6, 5
	xvpermi.q	$xr10, $xr15, 2
	xvpickve2gr.d	$s6, $xr14, 2
	xvori.b	$xr15, $xr10, 0
	xvpermi.q	$xr15, $xr10, 1
	vinsgr2vr.h	$vr15, $s6, 6
	xvpermi.q	$xr10, $xr15, 2
	xvpickve2gr.d	$s6, $xr14, 3
	xvori.b	$xr14, $xr10, 0
	xvpermi.q	$xr14, $xr10, 1
	vinsgr2vr.h	$vr14, $s6, 7
	xvpermi.q	$xr10, $xr14, 2
	xvpickve2gr.d	$s6, $xr13, 0
	vinsgr2vr.h	$vr14, $s6, 0
	xvpickve2gr.d	$s6, $xr13, 1
	vinsgr2vr.h	$vr14, $s6, 1
	xvpickve2gr.d	$s6, $xr13, 2
	vinsgr2vr.h	$vr14, $s6, 2
	xvpickve2gr.d	$s6, $xr13, 3
	vinsgr2vr.h	$vr14, $s6, 3
	xvpickve2gr.d	$s6, $xr12, 0
	vinsgr2vr.h	$vr14, $s6, 4
	xvpickve2gr.d	$s6, $xr12, 1
	vinsgr2vr.h	$vr14, $s6, 5
	xvpickve2gr.d	$s6, $xr12, 2
	vinsgr2vr.h	$vr14, $s6, 6
	xvpickve2gr.d	$s6, $xr12, 3
	vinsgr2vr.h	$vr14, $s6, 7
	xvpickve2gr.d	$s6, $xr11, 0
	xvori.b	$xr12, $xr14, 0
	xvpermi.q	$xr12, $xr14, 1
	vinsgr2vr.h	$vr12, $s6, 0
	xvpermi.q	$xr14, $xr12, 2
	xvpickve2gr.d	$s6, $xr11, 1
	xvori.b	$xr12, $xr14, 0
	xvpermi.q	$xr12, $xr14, 1
	vinsgr2vr.h	$vr12, $s6, 1
	xvpermi.q	$xr14, $xr12, 2
	xvpickve2gr.d	$s6, $xr11, 2
	xvori.b	$xr12, $xr14, 0
	xvpermi.q	$xr12, $xr14, 1
	vinsgr2vr.h	$vr12, $s6, 2
	xvpermi.q	$xr14, $xr12, 2
	xvpickve2gr.d	$s6, $xr11, 3
	xvori.b	$xr11, $xr14, 0
	xvpermi.q	$xr11, $xr14, 1
	vinsgr2vr.h	$vr11, $s6, 3
	xvpermi.q	$xr14, $xr11, 2
	xvpickve2gr.d	$s6, $xr9, 0
	xvori.b	$xr11, $xr14, 0
	xvpermi.q	$xr11, $xr14, 1
	vinsgr2vr.h	$vr11, $s6, 4
	xvpermi.q	$xr14, $xr11, 2
	xvpickve2gr.d	$s6, $xr9, 1
	xvori.b	$xr11, $xr14, 0
	xvpermi.q	$xr11, $xr14, 1
	vinsgr2vr.h	$vr11, $s6, 5
	xvpermi.q	$xr14, $xr11, 2
	xvpickve2gr.d	$s6, $xr9, 2
	xvori.b	$xr11, $xr14, 0
	xvpermi.q	$xr11, $xr14, 1
	vinsgr2vr.h	$vr11, $s6, 6
	xvpermi.q	$xr14, $xr11, 2
	xvpickve2gr.d	$s6, $xr9, 3
	xvori.b	$xr9, $xr14, 0
	xvpermi.q	$xr9, $xr14, 1
	vinsgr2vr.h	$vr9, $s6, 7
	xvpermi.q	$xr14, $xr9, 2
	xvpickve2gr.d	$s6, $xr8, 0
	vinsgr2vr.h	$vr9, $s6, 0
	xvpickve2gr.d	$s6, $xr8, 1
	vinsgr2vr.h	$vr9, $s6, 1
	xvpickve2gr.d	$s6, $xr8, 2
	vinsgr2vr.h	$vr9, $s6, 2
	xvpickve2gr.d	$s6, $xr8, 3
	vinsgr2vr.h	$vr9, $s6, 3
	xvpickve2gr.d	$s6, $xr7, 0
	vinsgr2vr.h	$vr9, $s6, 4
	xvpickve2gr.d	$s6, $xr7, 1
	vinsgr2vr.h	$vr9, $s6, 5
	xvpickve2gr.d	$s6, $xr7, 2
	vinsgr2vr.h	$vr9, $s6, 6
	xvpickve2gr.d	$s6, $xr7, 3
	vinsgr2vr.h	$vr9, $s6, 7
	xvpickve2gr.d	$s6, $xr6, 0
	xvori.b	$xr7, $xr9, 0
	xvpermi.q	$xr7, $xr9, 1
	vinsgr2vr.h	$vr7, $s6, 0
	xvpermi.q	$xr9, $xr7, 2
	xvpickve2gr.d	$s6, $xr6, 1
	xvori.b	$xr7, $xr9, 0
	xvpermi.q	$xr7, $xr9, 1
	vinsgr2vr.h	$vr7, $s6, 1
	xvpermi.q	$xr9, $xr7, 2
	xvpickve2gr.d	$s6, $xr6, 2
	xvori.b	$xr7, $xr9, 0
	xvpermi.q	$xr7, $xr9, 1
	vinsgr2vr.h	$vr7, $s6, 2
	xvpermi.q	$xr9, $xr7, 2
	xvpickve2gr.d	$s6, $xr6, 3
	xvori.b	$xr6, $xr9, 0
	xvpermi.q	$xr6, $xr9, 1
	vinsgr2vr.h	$vr6, $s6, 3
	xvpermi.q	$xr9, $xr6, 2
	xvpickve2gr.d	$s6, $xr4, 0
	xvori.b	$xr6, $xr9, 0
	xvpermi.q	$xr6, $xr9, 1
	vinsgr2vr.h	$vr6, $s6, 4
	xvpermi.q	$xr9, $xr6, 2
	xvpickve2gr.d	$s6, $xr4, 1
	xvori.b	$xr6, $xr9, 0
	xvpermi.q	$xr6, $xr9, 1
	vinsgr2vr.h	$vr6, $s6, 5
	xvpermi.q	$xr9, $xr6, 2
	xvpickve2gr.d	$s6, $xr4, 2
	xvori.b	$xr6, $xr9, 0
	xvpermi.q	$xr6, $xr9, 1
	vinsgr2vr.h	$vr6, $s6, 6
	xvpermi.q	$xr9, $xr6, 2
	xvpickve2gr.d	$s6, $xr4, 3
	xvori.b	$xr4, $xr9, 0
	xvpermi.q	$xr4, $xr9, 1
	vinsgr2vr.h	$vr4, $s6, 7
	xvpermi.q	$xr9, $xr4, 2
	xvadd.h	$xr0, $xr0, $xr5
	xvadd.h	$xr1, $xr1, $xr10
	xvadd.h	$xr2, $xr2, $xr14
	xvadd.h	$xr3, $xr3, $xr9
	xvstx	$xr0, $s4, $a4
	xvstx	$xr1, $s4, $s1
	xvstx	$xr2, $s4, $a5
	xvstx	$xr3, $s4, $a6
	addi.d	$s3, $s3, 128
	addi.d	$t8, $t8, 512
	bnez	$s3, .LBB28_12
# %bb.13:                               # %.lr.ph.i
                                        #   in Loop: Header=BB28_11 Depth=1
	ld.h	$t8, $s5, 0
	ldx.h	$s3, $t7, $a4
	add.d	$t8, $s3, $t8
	stx.h	$t8, $t7, $a4
	ld.h	$t8, $s5, 8
	ld.h	$s3, $t6, 0
	add.d	$t8, $s3, $t8
	st.h	$t8, $t6, 0
	ld.h	$t8, $s5, 16
	ldx.h	$s3, $t7, $a7
	add.d	$t8, $s3, $t8
	stx.h	$t8, $t7, $a7
	ld.h	$t8, $s5, 24
	ld.h	$s3, $t6, 4
	add.d	$t8, $s3, $t8
	st.h	$t8, $t6, 4
	ld.h	$t8, $s5, 32
	ldx.h	$s3, $t7, $t0
	add.d	$t8, $s3, $t8
	stx.h	$t8, $t7, $t0
	ld.h	$t8, $s5, 40
	ld.h	$s3, $t6, 8
	add.d	$t8, $s3, $t8
	st.h	$t8, $t6, 8
	ld.h	$t8, $s5, 48
	ldx.h	$s3, $t7, $t1
	add.d	$t8, $s3, $t8
	stx.h	$t8, $t7, $t1
	ld.h	$t8, $s5, 56
	ld.h	$s3, $t6, 12
	add.d	$t8, $s3, $t8
	st.h	$t8, $t6, 12
	ld.h	$t8, $s5, 64
	ldx.h	$s3, $t7, $t2
	add.d	$t8, $s3, $t8
	stx.h	$t8, $t7, $t2
	ld.h	$t8, $s5, 72
	ld.h	$s3, $t6, 16
	add.d	$t8, $s3, $t8
	st.h	$t8, $t6, 16
	ld.h	$t8, $s5, 80
	ldx.h	$s3, $t7, $t3
	add.d	$t8, $s3, $t8
	stx.h	$t8, $t7, $t3
	ld.h	$t8, $s5, 88
	ld.h	$s3, $t6, 20
	add.d	$t8, $s3, $t8
	st.h	$t8, $t6, 20
	ld.h	$t8, $s5, 96
	ldx.h	$s3, $t7, $t4
	add.d	$t8, $s3, $t8
	stx.h	$t8, $t7, $t4
	ld.h	$t8, $s5, 104
	ld.h	$s3, $t6, 24
	add.d	$t8, $s3, $t8
	st.h	$t8, $t6, 24
	ld.h	$t8, $s5, 112
	ldx.h	$s3, $t7, $t5
	add.d	$t8, $s3, $t8
	stx.h	$t8, $t7, $t5
	ld.h	$t7, $s5, 120
	ld.h	$t8, $t6, 28
	add.d	$t7, $t8, $t7
	addi.d	$s2, $s2, -1
	st.h	$t7, $t6, 28
	bnez	$s2, .LBB28_11
.LBB28_14:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp628:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp629:
# %bb.15:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 8
	beqz	$a0, .LBB28_17
# %bb.16:                               # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB28_17:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB28_18:
.Ltmp619:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB28_19:
.Ltmp630:
	ld.d	$s2, $sp, 8
	move	$s0, $a0
	bnez	$s2, .LBB28_23
	b	.LBB28_24
.LBB28_20:                              # %.loopexit
.Ltmp625:
	b	.LBB28_22
.LBB28_21:                              # %.loopexit.split-lp
.Ltmp622:
.LBB28_22:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB28_23:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB28_24:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end28:
	.size	_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint16_t_RN9benchmark5StateE, .Lfunc_end28-_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint16_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table28:
.Lexception28:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end28-.Lcst_begin28
.Lcst_begin28:
	.uleb128 .Lfunc_begin28-.Lfunc_begin28  # >> Call Site 1 <<
	.uleb128 .Ltmp617-.Lfunc_begin28        #   Call between .Lfunc_begin28 and .Ltmp617
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp617-.Lfunc_begin28        # >> Call Site 2 <<
	.uleb128 .Ltmp618-.Ltmp617              #   Call between .Ltmp617 and .Ltmp618
	.uleb128 .Ltmp619-.Lfunc_begin28        #     jumps to .Ltmp619
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp620-.Lfunc_begin28        # >> Call Site 3 <<
	.uleb128 .Ltmp621-.Ltmp620              #   Call between .Ltmp620 and .Ltmp621
	.uleb128 .Ltmp622-.Lfunc_begin28        #     jumps to .Ltmp622
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp623-.Lfunc_begin28        # >> Call Site 4 <<
	.uleb128 .Ltmp624-.Ltmp623              #   Call between .Ltmp623 and .Ltmp624
	.uleb128 .Ltmp625-.Lfunc_begin28        #     jumps to .Ltmp625
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp626-.Lfunc_begin28        # >> Call Site 5 <<
	.uleb128 .Ltmp629-.Ltmp626              #   Call between .Ltmp626 and .Ltmp629
	.uleb128 .Ltmp630-.Lfunc_begin28        #     jumps to .Ltmp630
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp629-.Lfunc_begin28        # >> Call Site 6 <<
	.uleb128 .Lfunc_end28-.Ltmp629          #   Call between .Ltmp629 and .Lfunc_end28
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end28:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z61benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint16_t_RN9benchmark5StateE
.LCPI29_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint16_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint16_t_RN9benchmark5StateE,@function
_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint16_t_RN9benchmark5StateE: # @_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint16_t_RN9benchmark5StateE
.Lfunc_begin29:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception29
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	move	$s0, $a0
	lu12i.w	$a0, 19
	ori	$s3, $a0, 2176
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp631:
	lu12i.w	$a0, 4
	ori	$s1, $a0, 3616
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp632:
# %bb.1:
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.LCPI29_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI29_0)
	move	$s5, $zero
	st.d	$s2, $sp, 40
	vst	$vr0, $sp, 48
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB29_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp634:
	addi.d	$a0, $sp, 48
	addi.d	$a2, $sp, 48
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp635:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB29_2 Depth=1
	stx.d	$a0, $fp, $s5
	addi.d	$s5, $s5, 8
	bne	$s5, $s3, .LBB29_2
# %bb.4:
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 48
	lu12i.w	$s4, -5
	ori	$s5, $s4, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s3, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB29_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp637:
	addi.d	$a0, $sp, 48
	addi.d	$a2, $sp, 48
	move	$a1, $s3
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp638:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB29_5 Depth=1
	add.d	$a1, $s2, $s5
	addi.d	$s5, $s5, 2
	stx.h	$a0, $a1, $s1
	bnez	$s5, .LBB29_5
# %bb.7:
	ld.w	$s3, $s0, 28
	ld.d	$s2, $s0, 16
.Ltmp640:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp641:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s3, .LBB29_14
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s2, .LBB29_14
# %bb.10:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 32
	addi.d	$a1, $sp, 40
	ori	$a2, $s4, 480
	.p2align	4, , 16
.LBB29_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_12 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a3, $sp, 40
	move	$a4, $a0
	move	$a5, $a2
	.p2align	4, , 16
.LBB29_12:                              # %vector.body
                                        #   Parent Loop BB29_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr0, $a4, -32
	xvld	$xr1, $a4, 0
	add.d	$a6, $a3, $a5
	ldptr.d	$a7, $a6, 20000
	ldptr.d	$t0, $a6, 20008
	xvpickve2gr.d	$t1, $xr0, 3
	st.h	$t1, $sp, 22
	xvpickve2gr.d	$t1, $xr0, 2
	st.h	$t1, $sp, 20
	xvpickve2gr.d	$t1, $xr0, 1
	st.h	$t1, $sp, 18
	xvpickve2gr.d	$t1, $xr0, 0
	st.h	$t1, $sp, 16
	vld	$vr0, $sp, 16
	xvpickve2gr.d	$t1, $xr1, 3
	st.h	$t1, $sp, 6
	xvpickve2gr.d	$t1, $xr1, 2
	st.h	$t1, $sp, 4
	xvpickve2gr.d	$t1, $xr1, 1
	st.h	$t1, $sp, 2
	xvpickve2gr.d	$t1, $xr1, 0
	st.h	$t1, $sp, 0
	vld	$vr1, $sp, 0
	vinsgr2vr.d	$vr2, $a7, 0
	vinsgr2vr.d	$vr3, $t0, 0
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	vpackev.d	$vr0, $vr1, $vr0
	vstx	$vr0, $a6, $s1
	addi.d	$a5, $a5, 16
	addi.d	$a4, $a4, 64
	bnez	$a5, .LBB29_12
# %bb.13:                               # %_ZL27truncOrZextVecWithAddInLoopImtEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB29_11 Depth=1
	addi.d	$s2, $s2, -1
	bnez	$s2, .LBB29_11
.LBB29_14:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp642:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp643:
# %bb.15:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 40
	beqz	$a0, .LBB29_17
# %bb.16:                               # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB29_17:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB29_18:
.Ltmp633:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB29_19:
.Ltmp644:
	ld.d	$s2, $sp, 40
	move	$s0, $a0
	bnez	$s2, .LBB29_23
	b	.LBB29_24
.LBB29_20:                              # %.loopexit
.Ltmp639:
	b	.LBB29_22
.LBB29_21:                              # %.loopexit.split-lp
.Ltmp636:
.LBB29_22:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB29_23:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB29_24:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end29:
	.size	_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint16_t_RN9benchmark5StateE, .Lfunc_end29-_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint16_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table29:
.Lexception29:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end29-.Lcst_begin29
.Lcst_begin29:
	.uleb128 .Lfunc_begin29-.Lfunc_begin29  # >> Call Site 1 <<
	.uleb128 .Ltmp631-.Lfunc_begin29        #   Call between .Lfunc_begin29 and .Ltmp631
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp631-.Lfunc_begin29        # >> Call Site 2 <<
	.uleb128 .Ltmp632-.Ltmp631              #   Call between .Ltmp631 and .Ltmp632
	.uleb128 .Ltmp633-.Lfunc_begin29        #     jumps to .Ltmp633
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp634-.Lfunc_begin29        # >> Call Site 3 <<
	.uleb128 .Ltmp635-.Ltmp634              #   Call between .Ltmp634 and .Ltmp635
	.uleb128 .Ltmp636-.Lfunc_begin29        #     jumps to .Ltmp636
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp637-.Lfunc_begin29        # >> Call Site 4 <<
	.uleb128 .Ltmp638-.Ltmp637              #   Call between .Ltmp637 and .Ltmp638
	.uleb128 .Ltmp639-.Lfunc_begin29        #     jumps to .Ltmp639
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp640-.Lfunc_begin29        # >> Call Site 5 <<
	.uleb128 .Ltmp643-.Ltmp640              #   Call between .Ltmp640 and .Ltmp643
	.uleb128 .Ltmp644-.Lfunc_begin29        #     jumps to .Ltmp644
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp643-.Lfunc_begin29        # >> Call Site 6 <<
	.uleb128 .Lfunc_end29-.Ltmp643          #   Call between .Ltmp643 and .Lfunc_end29
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end29:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z61benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint32_t_RN9benchmark5StateE
.LCPI30_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z61benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint32_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z61benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint32_t_RN9benchmark5StateE,@function
_Z61benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint32_t_RN9benchmark5StateE: # @_Z61benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint32_t_RN9benchmark5StateE
.Lfunc_begin30:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception30
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	lu12i.w	$s1, 19
	ori	$s4, $s1, 2176
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp645:
	lu12i.w	$s5, 9
	ori	$s3, $s5, 3136
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp646:
# %bb.1:                                # %.split
	move	$s2, $a0
	st.d	$a0, $sp, 24
.Ltmp648:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
.Ltmp649:
# %bb.2:
	move	$s0, $zero
	ori	$s1, $s1, 2048
	pcalau12i	$a0, %pc_hi20(.LCPI30_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI30_0)
	add.d	$s6, $fp, $s1
	ori	$s7, $s5, 3072
	add.d	$s8, $s2, $s7
	vst	$vr0, $sp, 32
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB30_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp651:
	addi.d	$a0, $sp, 32
	addi.d	$a2, $sp, 32
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp652:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB30_3 Depth=1
	stx.d	$a0, $fp, $s0
	addi.d	$s0, $s0, 8
	bne	$s0, $s4, .LBB30_3
# %bb.5:                                # %vector.ph
	move	$a0, $zero
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	addi.d	$a1, $a1, 4
	.p2align	4, , 16
.LBB30_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a0
	ldx.d	$a3, $fp, $a0
	ld.d	$a2, $a2, 8
	st.w	$a3, $a1, -4
	st.w	$a2, $a1, 0
	addi.d	$a0, $a0, 16
	addi.d	$a1, $a1, 8
	bne	$a0, $s4, .LBB30_6
# %bb.7:                                # %vector.body83.preheader
	move	$a0, $zero
	addi.d	$a1, $s2, 64
	.p2align	4, , 16
.LBB30_8:                               # %vector.body83
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a0
	xvld	$xr4, $a2, 32
	xvldx	$xr5, $fp, $a0
	xvld	$xr6, $a2, 96
	xvld	$xr7, $a2, 64
	xvld	$xr3, $a2, 160
	xvld	$xr8, $a2, 128
	xvld	$xr0, $a2, 224
	xvld	$xr2, $a2, 192
	xvpickve2gr.d	$a2, $xr5, 0
	xvinsgr2vr.w	$xr1, $a2, 0
	xvpickve2gr.d	$a2, $xr5, 1
	xvinsgr2vr.w	$xr1, $a2, 1
	xvpickve2gr.d	$a2, $xr5, 2
	xvinsgr2vr.w	$xr1, $a2, 2
	xvpickve2gr.d	$a2, $xr5, 3
	xvinsgr2vr.w	$xr1, $a2, 3
	xvpickve2gr.d	$a2, $xr4, 0
	xvinsgr2vr.w	$xr1, $a2, 4
	xvpickve2gr.d	$a2, $xr4, 1
	xvinsgr2vr.w	$xr1, $a2, 5
	xvpickve2gr.d	$a2, $xr4, 2
	xvinsgr2vr.w	$xr1, $a2, 6
	xvpickve2gr.d	$a2, $xr4, 3
	xvinsgr2vr.w	$xr1, $a2, 7
	xvpickve2gr.d	$a2, $xr7, 0
	xvinsgr2vr.w	$xr4, $a2, 0
	xvpickve2gr.d	$a2, $xr7, 1
	xvinsgr2vr.w	$xr4, $a2, 1
	xvpickve2gr.d	$a2, $xr7, 2
	xvinsgr2vr.w	$xr4, $a2, 2
	xvpickve2gr.d	$a2, $xr7, 3
	xvinsgr2vr.w	$xr4, $a2, 3
	xvpickve2gr.d	$a2, $xr6, 0
	xvinsgr2vr.w	$xr4, $a2, 4
	xvpickve2gr.d	$a2, $xr6, 1
	xvinsgr2vr.w	$xr4, $a2, 5
	xvpickve2gr.d	$a2, $xr6, 2
	xvinsgr2vr.w	$xr4, $a2, 6
	xvpickve2gr.d	$a2, $xr6, 3
	xvinsgr2vr.w	$xr4, $a2, 7
	xvpickve2gr.d	$a2, $xr8, 0
	xvinsgr2vr.w	$xr5, $a2, 0
	xvpickve2gr.d	$a2, $xr8, 1
	xvinsgr2vr.w	$xr5, $a2, 1
	xvpickve2gr.d	$a2, $xr8, 2
	xvinsgr2vr.w	$xr5, $a2, 2
	xvpickve2gr.d	$a2, $xr8, 3
	xvinsgr2vr.w	$xr5, $a2, 3
	xvpickve2gr.d	$a2, $xr3, 0
	xvinsgr2vr.w	$xr5, $a2, 4
	xvpickve2gr.d	$a2, $xr3, 1
	xvinsgr2vr.w	$xr5, $a2, 5
	xvpickve2gr.d	$a2, $xr3, 2
	xvinsgr2vr.w	$xr5, $a2, 6
	xvpickve2gr.d	$a2, $xr3, 3
	xvinsgr2vr.w	$xr5, $a2, 7
	xvpickve2gr.d	$a2, $xr2, 0
	xvinsgr2vr.w	$xr3, $a2, 0
	xvpickve2gr.d	$a2, $xr2, 1
	xvinsgr2vr.w	$xr3, $a2, 1
	xvpickve2gr.d	$a2, $xr2, 2
	xvinsgr2vr.w	$xr3, $a2, 2
	xvpickve2gr.d	$a2, $xr2, 3
	xvinsgr2vr.w	$xr3, $a2, 3
	xvpickve2gr.d	$a2, $xr0, 0
	xvinsgr2vr.w	$xr3, $a2, 4
	xvpickve2gr.d	$a2, $xr0, 1
	xvinsgr2vr.w	$xr3, $a2, 5
	xvpickve2gr.d	$a2, $xr0, 2
	xvinsgr2vr.w	$xr3, $a2, 6
	xvpickve2gr.d	$a2, $xr0, 3
	xvinsgr2vr.w	$xr3, $a2, 7
	xvst	$xr1, $a1, -64
	xvst	$xr4, $a1, -32
	xvst	$xr5, $a1, 0
	xvst	$xr3, $a1, 32
	addi.d	$a0, $a0, 256
	addi.d	$a1, $a1, 128
	bne	$a0, $s1, .LBB30_8
# %bb.9:                                # %.lr.ph.i
	move	$s4, $zero
	ld.d	$a0, $s6, 0
	ld.d	$a1, $s6, 8
	ld.d	$a2, $s6, 16
	ld.d	$a3, $s6, 24
	st.w	$a0, $s8, 0
	st.w	$a1, $s8, 4
	st.w	$a2, $s8, 8
	st.w	$a3, $s8, 12
	ld.d	$a0, $s6, 32
	ld.d	$a1, $s6, 40
	ld.d	$a2, $s6, 48
	ld.d	$a3, $s6, 56
	st.w	$a0, $s8, 16
	st.w	$a1, $s8, 20
	st.w	$a2, $s8, 24
	st.w	$a3, $s8, 28
	ld.d	$a0, $s6, 64
	ld.d	$a1, $s6, 72
	ld.d	$a2, $s6, 80
	ld.d	$a3, $s6, 88
	st.w	$a0, $s8, 32
	st.w	$a1, $s8, 36
	st.w	$a2, $s8, 40
	st.w	$a3, $s8, 44
	ld.d	$a0, $s6, 96
	ld.d	$a1, $s6, 104
	ld.d	$a2, $s6, 112
	ld.d	$a3, $s6, 120
	st.w	$a0, $s8, 48
	st.w	$a1, $s8, 52
	st.w	$a2, $s8, 56
	st.w	$a3, $s8, 60
	move	$s1, $fp
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB30_10:                              # %_ZL27truncOrZextVecInLoopWithVW8ImjEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	ldx.w	$a0, $s2, $s4
	ldx.w	$a1, $s5, $s4
	bne	$a0, $a1, .LBB30_23
# %bb.11:                               # %_ZL27truncOrZextVecInLoopWithVW8ImjEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB30_10 Depth=1
	addi.d	$s4, $s4, 4
	addi.d	$s1, $s1, 8
	bne	$s4, $s3, .LBB30_10
# %bb.12:
	ld.d	$s1, $sp, 8                     # 8-byte Folded Reload
	ld.w	$s0, $s1, 28
	ld.d	$s2, $s1, 16
.Ltmp669:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp670:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s0, .LBB30_19
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s2, .LBB30_19
# %bb.15:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 128
	addi.d	$a1, $sp, 24
	lu12i.w	$a2, 2
	ori	$a2, $a2, 1792
	.p2align	4, , 16
.LBB30_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_17 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a4, $sp, 24
	add.d	$a3, $a4, $s7
	addi.d	$a4, $a4, 64
	move	$a5, $a0
	move	$a6, $a2
	.p2align	4, , 16
.LBB30_17:                              # %vector.body93
                                        #   Parent Loop BB30_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr4, $a5, -96
	xvld	$xr5, $a5, -128
	xvld	$xr6, $a5, -32
	xvld	$xr7, $a5, -64
	xvld	$xr3, $a5, 32
	xvld	$xr8, $a5, 0
	xvld	$xr0, $a5, 96
	xvld	$xr2, $a5, 64
	xvpickve2gr.d	$a7, $xr5, 0
	xvinsgr2vr.w	$xr1, $a7, 0
	xvpickve2gr.d	$a7, $xr5, 1
	xvinsgr2vr.w	$xr1, $a7, 1
	xvpickve2gr.d	$a7, $xr5, 2
	xvinsgr2vr.w	$xr1, $a7, 2
	xvpickve2gr.d	$a7, $xr5, 3
	xvinsgr2vr.w	$xr1, $a7, 3
	xvpickve2gr.d	$a7, $xr4, 0
	xvinsgr2vr.w	$xr1, $a7, 4
	xvpickve2gr.d	$a7, $xr4, 1
	xvinsgr2vr.w	$xr1, $a7, 5
	xvpickve2gr.d	$a7, $xr4, 2
	xvinsgr2vr.w	$xr1, $a7, 6
	xvpickve2gr.d	$a7, $xr4, 3
	xvinsgr2vr.w	$xr1, $a7, 7
	xvpickve2gr.d	$a7, $xr7, 0
	xvinsgr2vr.w	$xr4, $a7, 0
	xvpickve2gr.d	$a7, $xr7, 1
	xvinsgr2vr.w	$xr4, $a7, 1
	xvpickve2gr.d	$a7, $xr7, 2
	xvinsgr2vr.w	$xr4, $a7, 2
	xvpickve2gr.d	$a7, $xr7, 3
	xvinsgr2vr.w	$xr4, $a7, 3
	xvpickve2gr.d	$a7, $xr6, 0
	xvinsgr2vr.w	$xr4, $a7, 4
	xvpickve2gr.d	$a7, $xr6, 1
	xvinsgr2vr.w	$xr4, $a7, 5
	xvpickve2gr.d	$a7, $xr6, 2
	xvinsgr2vr.w	$xr4, $a7, 6
	xvpickve2gr.d	$a7, $xr6, 3
	xvinsgr2vr.w	$xr4, $a7, 7
	xvpickve2gr.d	$a7, $xr8, 0
	xvinsgr2vr.w	$xr5, $a7, 0
	xvpickve2gr.d	$a7, $xr8, 1
	xvinsgr2vr.w	$xr5, $a7, 1
	xvpickve2gr.d	$a7, $xr8, 2
	xvinsgr2vr.w	$xr5, $a7, 2
	xvpickve2gr.d	$a7, $xr8, 3
	xvinsgr2vr.w	$xr5, $a7, 3
	xvpickve2gr.d	$a7, $xr3, 0
	xvinsgr2vr.w	$xr5, $a7, 4
	xvpickve2gr.d	$a7, $xr3, 1
	xvinsgr2vr.w	$xr5, $a7, 5
	xvpickve2gr.d	$a7, $xr3, 2
	xvinsgr2vr.w	$xr5, $a7, 6
	xvpickve2gr.d	$a7, $xr3, 3
	xvinsgr2vr.w	$xr5, $a7, 7
	xvpickve2gr.d	$a7, $xr2, 0
	xvinsgr2vr.w	$xr3, $a7, 0
	xvpickve2gr.d	$a7, $xr2, 1
	xvinsgr2vr.w	$xr3, $a7, 1
	xvpickve2gr.d	$a7, $xr2, 2
	xvinsgr2vr.w	$xr3, $a7, 2
	xvpickve2gr.d	$a7, $xr2, 3
	xvinsgr2vr.w	$xr3, $a7, 3
	xvpickve2gr.d	$a7, $xr0, 0
	xvinsgr2vr.w	$xr3, $a7, 4
	xvpickve2gr.d	$a7, $xr0, 1
	xvinsgr2vr.w	$xr3, $a7, 5
	xvpickve2gr.d	$a7, $xr0, 2
	xvinsgr2vr.w	$xr3, $a7, 6
	xvpickve2gr.d	$a7, $xr0, 3
	xvinsgr2vr.w	$xr3, $a7, 7
	xvst	$xr1, $a4, -64
	xvst	$xr4, $a4, -32
	xvst	$xr5, $a4, 0
	xvst	$xr3, $a4, 32
	addi.d	$a6, $a6, -32
	addi.d	$a5, $a5, 256
	addi.d	$a4, $a4, 128
	bnez	$a6, .LBB30_17
# %bb.18:                               # %.lr.ph.i24
                                        #   in Loop: Header=BB30_16 Depth=1
	ld.d	$a4, $s6, 0
	ld.d	$a5, $s6, 8
	ld.d	$a6, $s6, 16
	st.w	$a4, $a3, 0
	ld.d	$a4, $s6, 24
	st.w	$a5, $a3, 4
	st.w	$a6, $a3, 8
	ld.d	$a5, $s6, 32
	st.w	$a4, $a3, 12
	ld.d	$a4, $s6, 40
	ld.d	$a6, $s6, 48
	st.w	$a5, $a3, 16
	ld.d	$a5, $s6, 56
	st.w	$a4, $a3, 20
	st.w	$a6, $a3, 24
	ld.d	$a4, $s6, 64
	st.w	$a5, $a3, 28
	ld.d	$a5, $s6, 72
	ld.d	$a6, $s6, 80
	st.w	$a4, $a3, 32
	ld.d	$a4, $s6, 88
	st.w	$a5, $a3, 36
	st.w	$a6, $a3, 40
	ld.d	$a5, $s6, 96
	st.w	$a4, $a3, 44
	ld.d	$a4, $s6, 104
	ld.d	$a6, $s6, 112
	st.w	$a5, $a3, 48
	ld.d	$a5, $s6, 120
	st.w	$a4, $a3, 52
	st.w	$a6, $a3, 56
	addi.d	$s2, $s2, -1
	st.w	$a5, $a3, 60
	bnez	$s2, .LBB30_16
.LBB30_19:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp671:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp672:
# %bb.20:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit36
	move	$a0, $s5
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 24
	beqz	$a0, .LBB30_22
# %bb.21:                               # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i38
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB30_22:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit42
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB30_23:
.Ltmp654:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp655:
# %bb.24:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	ld.d	$a1, $s1, 0
.Ltmp656:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp657:
# %bb.25:                               # %_ZNSolsEm.exit
.Ltmp658:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp659:
# %bb.26:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.wu	$a1, $s2, $s4
.Ltmp660:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp661:
# %bb.27:                               # %_ZNSolsEj.exit
.Ltmp662:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp663:
# %bb.28:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit21
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	ldx.wu	$a1, $a0, $s4
.Ltmp664:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp665:
# %bb.29:                               # %_ZNSolsEj.exit23
.Ltmp666:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp667:
# %bb.30:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB30_31:                              # %.thread
.Ltmp650:
	move	$s1, $a0
	b	.LBB30_37
.LBB30_32:
.Ltmp647:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB30_33:
.Ltmp673:
	b	.LBB30_36
.LBB30_34:
.Ltmp668:
	b	.LBB30_36
.LBB30_35:
.Ltmp653:
.LBB30_36:
	move	$s1, $a0
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s2, $sp, 24
	beqz	$s2, .LBB30_38
.LBB30_37:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i31
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB30_38:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end30:
	.size	_Z61benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint32_t_RN9benchmark5StateE, .Lfunc_end30-_Z61benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint32_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table30:
.Lexception30:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end30-.Lcst_begin30
.Lcst_begin30:
	.uleb128 .Lfunc_begin30-.Lfunc_begin30  # >> Call Site 1 <<
	.uleb128 .Ltmp645-.Lfunc_begin30        #   Call between .Lfunc_begin30 and .Ltmp645
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp645-.Lfunc_begin30        # >> Call Site 2 <<
	.uleb128 .Ltmp646-.Ltmp645              #   Call between .Ltmp645 and .Ltmp646
	.uleb128 .Ltmp647-.Lfunc_begin30        #     jumps to .Ltmp647
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp648-.Lfunc_begin30        # >> Call Site 3 <<
	.uleb128 .Ltmp649-.Ltmp648              #   Call between .Ltmp648 and .Ltmp649
	.uleb128 .Ltmp650-.Lfunc_begin30        #     jumps to .Ltmp650
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp651-.Lfunc_begin30        # >> Call Site 4 <<
	.uleb128 .Ltmp652-.Ltmp651              #   Call between .Ltmp651 and .Ltmp652
	.uleb128 .Ltmp653-.Lfunc_begin30        #     jumps to .Ltmp653
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp669-.Lfunc_begin30        # >> Call Site 5 <<
	.uleb128 .Ltmp672-.Ltmp669              #   Call between .Ltmp669 and .Ltmp672
	.uleb128 .Ltmp673-.Lfunc_begin30        #     jumps to .Ltmp673
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp672-.Lfunc_begin30        # >> Call Site 6 <<
	.uleb128 .Ltmp654-.Ltmp672              #   Call between .Ltmp672 and .Ltmp654
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp654-.Lfunc_begin30        # >> Call Site 7 <<
	.uleb128 .Ltmp667-.Ltmp654              #   Call between .Ltmp654 and .Ltmp667
	.uleb128 .Ltmp668-.Lfunc_begin30        #     jumps to .Ltmp668
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp667-.Lfunc_begin30        # >> Call Site 8 <<
	.uleb128 .Lfunc_end30-.Ltmp667          #   Call between .Ltmp667 and .Lfunc_end30
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end30:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z62benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint32_t_RN9benchmark5StateE
.LCPI31_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z62benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint32_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z62benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint32_t_RN9benchmark5StateE,@function
_Z62benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint32_t_RN9benchmark5StateE: # @_Z62benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint32_t_RN9benchmark5StateE
.Lfunc_begin31:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception31
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	lu12i.w	$s1, 19
	ori	$s4, $s1, 2176
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp674:
	lu12i.w	$s5, 9
	ori	$s3, $s5, 3136
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp675:
# %bb.1:                                # %.split
	move	$s2, $a0
	st.d	$a0, $sp, 24
.Ltmp677:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
.Ltmp678:
# %bb.2:
	move	$s0, $zero
	ori	$s1, $s1, 2048
	pcalau12i	$a0, %pc_hi20(.LCPI31_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI31_0)
	add.d	$s6, $fp, $s1
	ori	$s7, $s5, 3072
	add.d	$s8, $s2, $s7
	vst	$vr0, $sp, 32
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB31_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp680:
	addi.d	$a0, $sp, 32
	addi.d	$a2, $sp, 32
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp681:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB31_3 Depth=1
	stx.d	$a0, $fp, $s0
	addi.d	$s0, $s0, 8
	bne	$s0, $s4, .LBB31_3
# %bb.5:                                # %vector.ph
	move	$a0, $zero
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	addi.d	$a1, $a1, 4
	.p2align	4, , 16
.LBB31_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a0
	ldx.d	$a3, $fp, $a0
	ld.d	$a2, $a2, 8
	st.w	$a3, $a1, -4
	st.w	$a2, $a1, 0
	addi.d	$a0, $a0, 16
	addi.d	$a1, $a1, 8
	bne	$a0, $s4, .LBB31_6
# %bb.7:                                # %vector.body83.preheader
	move	$a0, $zero
	addi.d	$a1, $s2, 128
	.p2align	4, , 16
.LBB31_8:                               # %vector.body83
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a0
	xvld	$xr7, $a2, 32
	xvldx	$xr14, $fp, $a0
	xvld	$xr4, $a2, 96
	xvld	$xr15, $a2, 64
	xvld	$xr12, $a2, 224
	xvld	$xr13, $a2, 192
	xvld	$xr10, $a2, 160
	xvld	$xr16, $a2, 128
	xvld	$xr6, $a2, 352
	xvld	$xr8, $a2, 320
	xvld	$xr9, $a2, 288
	xvld	$xr11, $a2, 256
	xvld	$xr0, $a2, 480
	xvld	$xr2, $a2, 448
	xvld	$xr3, $a2, 416
	xvld	$xr5, $a2, 384
	xvpickve2gr.d	$a2, $xr15, 0
	xvinsgr2vr.w	$xr1, $a2, 0
	xvpickve2gr.d	$a2, $xr15, 1
	xvinsgr2vr.w	$xr1, $a2, 1
	xvpickve2gr.d	$a2, $xr15, 2
	xvinsgr2vr.w	$xr1, $a2, 2
	xvpickve2gr.d	$a2, $xr15, 3
	xvinsgr2vr.w	$xr1, $a2, 3
	xvpickve2gr.d	$a2, $xr4, 0
	xvinsgr2vr.w	$xr1, $a2, 4
	xvpickve2gr.d	$a2, $xr4, 1
	xvinsgr2vr.w	$xr1, $a2, 5
	xvpickve2gr.d	$a2, $xr4, 2
	xvinsgr2vr.w	$xr1, $a2, 6
	xvpickve2gr.d	$a2, $xr4, 3
	xvinsgr2vr.w	$xr1, $a2, 7
	xvpickve2gr.d	$a2, $xr14, 0
	xvinsgr2vr.w	$xr4, $a2, 0
	xvpickve2gr.d	$a2, $xr14, 1
	xvinsgr2vr.w	$xr4, $a2, 1
	xvpickve2gr.d	$a2, $xr14, 2
	xvinsgr2vr.w	$xr4, $a2, 2
	xvpickve2gr.d	$a2, $xr14, 3
	xvinsgr2vr.w	$xr4, $a2, 3
	xvpickve2gr.d	$a2, $xr7, 0
	xvinsgr2vr.w	$xr4, $a2, 4
	xvpickve2gr.d	$a2, $xr7, 1
	xvinsgr2vr.w	$xr4, $a2, 5
	xvpickve2gr.d	$a2, $xr7, 2
	xvinsgr2vr.w	$xr4, $a2, 6
	xvpickve2gr.d	$a2, $xr7, 3
	xvinsgr2vr.w	$xr4, $a2, 7
	xvpickve2gr.d	$a2, $xr16, 0
	xvinsgr2vr.w	$xr7, $a2, 0
	xvpickve2gr.d	$a2, $xr16, 1
	xvinsgr2vr.w	$xr7, $a2, 1
	xvpickve2gr.d	$a2, $xr16, 2
	xvinsgr2vr.w	$xr7, $a2, 2
	xvpickve2gr.d	$a2, $xr16, 3
	xvinsgr2vr.w	$xr7, $a2, 3
	xvpickve2gr.d	$a2, $xr10, 0
	xvinsgr2vr.w	$xr7, $a2, 4
	xvpickve2gr.d	$a2, $xr10, 1
	xvinsgr2vr.w	$xr7, $a2, 5
	xvpickve2gr.d	$a2, $xr10, 2
	xvinsgr2vr.w	$xr7, $a2, 6
	xvpickve2gr.d	$a2, $xr10, 3
	xvinsgr2vr.w	$xr7, $a2, 7
	xvpickve2gr.d	$a2, $xr13, 0
	xvinsgr2vr.w	$xr10, $a2, 0
	xvpickve2gr.d	$a2, $xr13, 1
	xvinsgr2vr.w	$xr10, $a2, 1
	xvpickve2gr.d	$a2, $xr13, 2
	xvinsgr2vr.w	$xr10, $a2, 2
	xvpickve2gr.d	$a2, $xr13, 3
	xvinsgr2vr.w	$xr10, $a2, 3
	xvpickve2gr.d	$a2, $xr12, 0
	xvinsgr2vr.w	$xr10, $a2, 4
	xvpickve2gr.d	$a2, $xr12, 1
	xvinsgr2vr.w	$xr10, $a2, 5
	xvpickve2gr.d	$a2, $xr12, 2
	xvinsgr2vr.w	$xr10, $a2, 6
	xvpickve2gr.d	$a2, $xr12, 3
	xvinsgr2vr.w	$xr10, $a2, 7
	xvpickve2gr.d	$a2, $xr11, 0
	xvinsgr2vr.w	$xr12, $a2, 0
	xvpickve2gr.d	$a2, $xr11, 1
	xvinsgr2vr.w	$xr12, $a2, 1
	xvpickve2gr.d	$a2, $xr11, 2
	xvinsgr2vr.w	$xr12, $a2, 2
	xvpickve2gr.d	$a2, $xr11, 3
	xvinsgr2vr.w	$xr12, $a2, 3
	xvpickve2gr.d	$a2, $xr9, 0
	xvinsgr2vr.w	$xr12, $a2, 4
	xvpickve2gr.d	$a2, $xr9, 1
	xvinsgr2vr.w	$xr12, $a2, 5
	xvpickve2gr.d	$a2, $xr9, 2
	xvinsgr2vr.w	$xr12, $a2, 6
	xvpickve2gr.d	$a2, $xr9, 3
	xvinsgr2vr.w	$xr12, $a2, 7
	xvpickve2gr.d	$a2, $xr8, 0
	xvinsgr2vr.w	$xr9, $a2, 0
	xvpickve2gr.d	$a2, $xr8, 1
	xvinsgr2vr.w	$xr9, $a2, 1
	xvpickve2gr.d	$a2, $xr8, 2
	xvinsgr2vr.w	$xr9, $a2, 2
	xvpickve2gr.d	$a2, $xr8, 3
	xvinsgr2vr.w	$xr9, $a2, 3
	xvpickve2gr.d	$a2, $xr6, 0
	xvinsgr2vr.w	$xr9, $a2, 4
	xvpickve2gr.d	$a2, $xr6, 1
	xvinsgr2vr.w	$xr9, $a2, 5
	xvpickve2gr.d	$a2, $xr6, 2
	xvinsgr2vr.w	$xr9, $a2, 6
	xvpickve2gr.d	$a2, $xr6, 3
	xvinsgr2vr.w	$xr9, $a2, 7
	xvpickve2gr.d	$a2, $xr5, 0
	xvinsgr2vr.w	$xr6, $a2, 0
	xvpickve2gr.d	$a2, $xr5, 1
	xvinsgr2vr.w	$xr6, $a2, 1
	xvpickve2gr.d	$a2, $xr5, 2
	xvinsgr2vr.w	$xr6, $a2, 2
	xvpickve2gr.d	$a2, $xr5, 3
	xvinsgr2vr.w	$xr6, $a2, 3
	xvpickve2gr.d	$a2, $xr3, 0
	xvinsgr2vr.w	$xr6, $a2, 4
	xvpickve2gr.d	$a2, $xr3, 1
	xvinsgr2vr.w	$xr6, $a2, 5
	xvpickve2gr.d	$a2, $xr3, 2
	xvinsgr2vr.w	$xr6, $a2, 6
	xvpickve2gr.d	$a2, $xr3, 3
	xvinsgr2vr.w	$xr6, $a2, 7
	xvpickve2gr.d	$a2, $xr2, 0
	xvinsgr2vr.w	$xr3, $a2, 0
	xvpickve2gr.d	$a2, $xr2, 1
	xvinsgr2vr.w	$xr3, $a2, 1
	xvpickve2gr.d	$a2, $xr2, 2
	xvinsgr2vr.w	$xr3, $a2, 2
	xvpickve2gr.d	$a2, $xr2, 3
	xvinsgr2vr.w	$xr3, $a2, 3
	xvpickve2gr.d	$a2, $xr0, 0
	xvinsgr2vr.w	$xr3, $a2, 4
	xvpickve2gr.d	$a2, $xr0, 1
	xvinsgr2vr.w	$xr3, $a2, 5
	xvpickve2gr.d	$a2, $xr0, 2
	xvinsgr2vr.w	$xr3, $a2, 6
	xvpickve2gr.d	$a2, $xr0, 3
	xvinsgr2vr.w	$xr3, $a2, 7
	xvst	$xr4, $a1, -128
	xvst	$xr1, $a1, -96
	xvst	$xr10, $a1, -32
	xvst	$xr7, $a1, -64
	xvst	$xr9, $a1, 32
	xvst	$xr12, $a1, 0
	xvst	$xr3, $a1, 96
	xvst	$xr6, $a1, 64
	addi.d	$a0, $a0, 512
	addi.d	$a1, $a1, 256
	bne	$a0, $s1, .LBB31_8
# %bb.9:                                # %.lr.ph.i
	move	$s4, $zero
	ld.d	$a0, $s6, 0
	ld.d	$a1, $s6, 8
	ld.d	$a2, $s6, 16
	ld.d	$a3, $s6, 24
	st.w	$a0, $s8, 0
	st.w	$a1, $s8, 4
	st.w	$a2, $s8, 8
	st.w	$a3, $s8, 12
	ld.d	$a0, $s6, 32
	ld.d	$a1, $s6, 40
	ld.d	$a2, $s6, 48
	ld.d	$a3, $s6, 56
	st.w	$a0, $s8, 16
	st.w	$a1, $s8, 20
	st.w	$a2, $s8, 24
	st.w	$a3, $s8, 28
	ld.d	$a0, $s6, 64
	ld.d	$a1, $s6, 72
	ld.d	$a2, $s6, 80
	ld.d	$a3, $s6, 88
	st.w	$a0, $s8, 32
	st.w	$a1, $s8, 36
	st.w	$a2, $s8, 40
	st.w	$a3, $s8, 44
	ld.d	$a0, $s6, 96
	ld.d	$a1, $s6, 104
	ld.d	$a2, $s6, 112
	ld.d	$a3, $s6, 120
	st.w	$a0, $s8, 48
	st.w	$a1, $s8, 52
	st.w	$a2, $s8, 56
	st.w	$a3, $s8, 60
	move	$s1, $fp
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB31_10:                              # %_ZL28truncOrZextVecInLoopWithVW16ImjEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	ldx.w	$a0, $s2, $s4
	ldx.w	$a1, $s5, $s4
	bne	$a0, $a1, .LBB31_23
# %bb.11:                               # %_ZL28truncOrZextVecInLoopWithVW16ImjEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB31_10 Depth=1
	addi.d	$s4, $s4, 4
	addi.d	$s1, $s1, 8
	bne	$s4, $s3, .LBB31_10
# %bb.12:
	ld.d	$s1, $sp, 8                     # 8-byte Folded Reload
	ld.w	$s0, $s1, 28
	ld.d	$s2, $s1, 16
.Ltmp698:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp699:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s0, .LBB31_19
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s2, .LBB31_19
# %bb.15:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 256
	addi.d	$a1, $sp, 24
	lu12i.w	$a2, 2
	ori	$a2, $a2, 1792
	.p2align	4, , 16
.LBB31_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_17 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a4, $sp, 24
	add.d	$a3, $a4, $s7
	addi.d	$a4, $a4, 128
	move	$a5, $a0
	move	$a6, $a2
	.p2align	4, , 16
.LBB31_17:                              # %vector.body93
                                        #   Parent Loop BB31_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr7, $a5, -160
	xvld	$xr14, $a5, -192
	xvld	$xr4, $a5, -224
	xvld	$xr15, $a5, -256
	xvld	$xr12, $a5, -32
	xvld	$xr13, $a5, -64
	xvld	$xr10, $a5, -96
	xvld	$xr16, $a5, -128
	xvld	$xr6, $a5, 96
	xvld	$xr8, $a5, 64
	xvld	$xr9, $a5, 32
	xvld	$xr11, $a5, 0
	xvld	$xr0, $a5, 224
	xvld	$xr2, $a5, 192
	xvld	$xr3, $a5, 160
	xvld	$xr5, $a5, 128
	xvpickve2gr.d	$a7, $xr15, 0
	xvinsgr2vr.w	$xr1, $a7, 0
	xvpickve2gr.d	$a7, $xr15, 1
	xvinsgr2vr.w	$xr1, $a7, 1
	xvpickve2gr.d	$a7, $xr15, 2
	xvinsgr2vr.w	$xr1, $a7, 2
	xvpickve2gr.d	$a7, $xr15, 3
	xvinsgr2vr.w	$xr1, $a7, 3
	xvpickve2gr.d	$a7, $xr4, 0
	xvinsgr2vr.w	$xr1, $a7, 4
	xvpickve2gr.d	$a7, $xr4, 1
	xvinsgr2vr.w	$xr1, $a7, 5
	xvpickve2gr.d	$a7, $xr4, 2
	xvinsgr2vr.w	$xr1, $a7, 6
	xvpickve2gr.d	$a7, $xr4, 3
	xvinsgr2vr.w	$xr1, $a7, 7
	xvpickve2gr.d	$a7, $xr14, 0
	xvinsgr2vr.w	$xr4, $a7, 0
	xvpickve2gr.d	$a7, $xr14, 1
	xvinsgr2vr.w	$xr4, $a7, 1
	xvpickve2gr.d	$a7, $xr14, 2
	xvinsgr2vr.w	$xr4, $a7, 2
	xvpickve2gr.d	$a7, $xr14, 3
	xvinsgr2vr.w	$xr4, $a7, 3
	xvpickve2gr.d	$a7, $xr7, 0
	xvinsgr2vr.w	$xr4, $a7, 4
	xvpickve2gr.d	$a7, $xr7, 1
	xvinsgr2vr.w	$xr4, $a7, 5
	xvpickve2gr.d	$a7, $xr7, 2
	xvinsgr2vr.w	$xr4, $a7, 6
	xvpickve2gr.d	$a7, $xr7, 3
	xvinsgr2vr.w	$xr4, $a7, 7
	xvpickve2gr.d	$a7, $xr16, 0
	xvinsgr2vr.w	$xr7, $a7, 0
	xvpickve2gr.d	$a7, $xr16, 1
	xvinsgr2vr.w	$xr7, $a7, 1
	xvpickve2gr.d	$a7, $xr16, 2
	xvinsgr2vr.w	$xr7, $a7, 2
	xvpickve2gr.d	$a7, $xr16, 3
	xvinsgr2vr.w	$xr7, $a7, 3
	xvpickve2gr.d	$a7, $xr10, 0
	xvinsgr2vr.w	$xr7, $a7, 4
	xvpickve2gr.d	$a7, $xr10, 1
	xvinsgr2vr.w	$xr7, $a7, 5
	xvpickve2gr.d	$a7, $xr10, 2
	xvinsgr2vr.w	$xr7, $a7, 6
	xvpickve2gr.d	$a7, $xr10, 3
	xvinsgr2vr.w	$xr7, $a7, 7
	xvpickve2gr.d	$a7, $xr13, 0
	xvinsgr2vr.w	$xr10, $a7, 0
	xvpickve2gr.d	$a7, $xr13, 1
	xvinsgr2vr.w	$xr10, $a7, 1
	xvpickve2gr.d	$a7, $xr13, 2
	xvinsgr2vr.w	$xr10, $a7, 2
	xvpickve2gr.d	$a7, $xr13, 3
	xvinsgr2vr.w	$xr10, $a7, 3
	xvpickve2gr.d	$a7, $xr12, 0
	xvinsgr2vr.w	$xr10, $a7, 4
	xvpickve2gr.d	$a7, $xr12, 1
	xvinsgr2vr.w	$xr10, $a7, 5
	xvpickve2gr.d	$a7, $xr12, 2
	xvinsgr2vr.w	$xr10, $a7, 6
	xvpickve2gr.d	$a7, $xr12, 3
	xvinsgr2vr.w	$xr10, $a7, 7
	xvpickve2gr.d	$a7, $xr11, 0
	xvinsgr2vr.w	$xr12, $a7, 0
	xvpickve2gr.d	$a7, $xr11, 1
	xvinsgr2vr.w	$xr12, $a7, 1
	xvpickve2gr.d	$a7, $xr11, 2
	xvinsgr2vr.w	$xr12, $a7, 2
	xvpickve2gr.d	$a7, $xr11, 3
	xvinsgr2vr.w	$xr12, $a7, 3
	xvpickve2gr.d	$a7, $xr9, 0
	xvinsgr2vr.w	$xr12, $a7, 4
	xvpickve2gr.d	$a7, $xr9, 1
	xvinsgr2vr.w	$xr12, $a7, 5
	xvpickve2gr.d	$a7, $xr9, 2
	xvinsgr2vr.w	$xr12, $a7, 6
	xvpickve2gr.d	$a7, $xr9, 3
	xvinsgr2vr.w	$xr12, $a7, 7
	xvpickve2gr.d	$a7, $xr8, 0
	xvinsgr2vr.w	$xr9, $a7, 0
	xvpickve2gr.d	$a7, $xr8, 1
	xvinsgr2vr.w	$xr9, $a7, 1
	xvpickve2gr.d	$a7, $xr8, 2
	xvinsgr2vr.w	$xr9, $a7, 2
	xvpickve2gr.d	$a7, $xr8, 3
	xvinsgr2vr.w	$xr9, $a7, 3
	xvpickve2gr.d	$a7, $xr6, 0
	xvinsgr2vr.w	$xr9, $a7, 4
	xvpickve2gr.d	$a7, $xr6, 1
	xvinsgr2vr.w	$xr9, $a7, 5
	xvpickve2gr.d	$a7, $xr6, 2
	xvinsgr2vr.w	$xr9, $a7, 6
	xvpickve2gr.d	$a7, $xr6, 3
	xvinsgr2vr.w	$xr9, $a7, 7
	xvpickve2gr.d	$a7, $xr5, 0
	xvinsgr2vr.w	$xr6, $a7, 0
	xvpickve2gr.d	$a7, $xr5, 1
	xvinsgr2vr.w	$xr6, $a7, 1
	xvpickve2gr.d	$a7, $xr5, 2
	xvinsgr2vr.w	$xr6, $a7, 2
	xvpickve2gr.d	$a7, $xr5, 3
	xvinsgr2vr.w	$xr6, $a7, 3
	xvpickve2gr.d	$a7, $xr3, 0
	xvinsgr2vr.w	$xr6, $a7, 4
	xvpickve2gr.d	$a7, $xr3, 1
	xvinsgr2vr.w	$xr6, $a7, 5
	xvpickve2gr.d	$a7, $xr3, 2
	xvinsgr2vr.w	$xr6, $a7, 6
	xvpickve2gr.d	$a7, $xr3, 3
	xvinsgr2vr.w	$xr6, $a7, 7
	xvpickve2gr.d	$a7, $xr2, 0
	xvinsgr2vr.w	$xr3, $a7, 0
	xvpickve2gr.d	$a7, $xr2, 1
	xvinsgr2vr.w	$xr3, $a7, 1
	xvpickve2gr.d	$a7, $xr2, 2
	xvinsgr2vr.w	$xr3, $a7, 2
	xvpickve2gr.d	$a7, $xr2, 3
	xvinsgr2vr.w	$xr3, $a7, 3
	xvpickve2gr.d	$a7, $xr0, 0
	xvinsgr2vr.w	$xr3, $a7, 4
	xvpickve2gr.d	$a7, $xr0, 1
	xvinsgr2vr.w	$xr3, $a7, 5
	xvpickve2gr.d	$a7, $xr0, 2
	xvinsgr2vr.w	$xr3, $a7, 6
	xvpickve2gr.d	$a7, $xr0, 3
	xvinsgr2vr.w	$xr3, $a7, 7
	xvst	$xr4, $a4, -96
	xvst	$xr1, $a4, -128
	xvst	$xr10, $a4, -32
	xvst	$xr7, $a4, -64
	xvst	$xr9, $a4, 32
	xvst	$xr12, $a4, 0
	xvst	$xr3, $a4, 96
	xvst	$xr6, $a4, 64
	addi.d	$a6, $a6, -64
	addi.d	$a5, $a5, 512
	addi.d	$a4, $a4, 256
	bnez	$a6, .LBB31_17
# %bb.18:                               # %.lr.ph.i24
                                        #   in Loop: Header=BB31_16 Depth=1
	ld.d	$a4, $s6, 0
	ld.d	$a5, $s6, 8
	ld.d	$a6, $s6, 16
	st.w	$a4, $a3, 0
	ld.d	$a4, $s6, 24
	st.w	$a5, $a3, 4
	st.w	$a6, $a3, 8
	ld.d	$a5, $s6, 32
	st.w	$a4, $a3, 12
	ld.d	$a4, $s6, 40
	ld.d	$a6, $s6, 48
	st.w	$a5, $a3, 16
	ld.d	$a5, $s6, 56
	st.w	$a4, $a3, 20
	st.w	$a6, $a3, 24
	ld.d	$a4, $s6, 64
	st.w	$a5, $a3, 28
	ld.d	$a5, $s6, 72
	ld.d	$a6, $s6, 80
	st.w	$a4, $a3, 32
	ld.d	$a4, $s6, 88
	st.w	$a5, $a3, 36
	st.w	$a6, $a3, 40
	ld.d	$a5, $s6, 96
	st.w	$a4, $a3, 44
	ld.d	$a4, $s6, 104
	ld.d	$a6, $s6, 112
	st.w	$a5, $a3, 48
	ld.d	$a5, $s6, 120
	st.w	$a4, $a3, 52
	st.w	$a6, $a3, 56
	addi.d	$s2, $s2, -1
	st.w	$a5, $a3, 60
	bnez	$s2, .LBB31_16
.LBB31_19:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp700:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp701:
# %bb.20:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit36
	move	$a0, $s5
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 24
	beqz	$a0, .LBB31_22
# %bb.21:                               # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i38
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB31_22:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit42
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB31_23:
.Ltmp683:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp684:
# %bb.24:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	ld.d	$a1, $s1, 0
.Ltmp685:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp686:
# %bb.25:                               # %_ZNSolsEm.exit
.Ltmp687:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp688:
# %bb.26:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.wu	$a1, $s2, $s4
.Ltmp689:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp690:
# %bb.27:                               # %_ZNSolsEj.exit
.Ltmp691:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp692:
# %bb.28:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit21
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	ldx.wu	$a1, $a0, $s4
.Ltmp693:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp694:
# %bb.29:                               # %_ZNSolsEj.exit23
.Ltmp695:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp696:
# %bb.30:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB31_31:                              # %.thread
.Ltmp679:
	move	$s1, $a0
	b	.LBB31_37
.LBB31_32:
.Ltmp676:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB31_33:
.Ltmp702:
	b	.LBB31_36
.LBB31_34:
.Ltmp697:
	b	.LBB31_36
.LBB31_35:
.Ltmp682:
.LBB31_36:
	move	$s1, $a0
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s2, $sp, 24
	beqz	$s2, .LBB31_38
.LBB31_37:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i31
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB31_38:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end31:
	.size	_Z62benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint32_t_RN9benchmark5StateE, .Lfunc_end31-_Z62benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint32_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table31:
.Lexception31:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end31-.Lcst_begin31
.Lcst_begin31:
	.uleb128 .Lfunc_begin31-.Lfunc_begin31  # >> Call Site 1 <<
	.uleb128 .Ltmp674-.Lfunc_begin31        #   Call between .Lfunc_begin31 and .Ltmp674
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp674-.Lfunc_begin31        # >> Call Site 2 <<
	.uleb128 .Ltmp675-.Ltmp674              #   Call between .Ltmp674 and .Ltmp675
	.uleb128 .Ltmp676-.Lfunc_begin31        #     jumps to .Ltmp676
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp677-.Lfunc_begin31        # >> Call Site 3 <<
	.uleb128 .Ltmp678-.Ltmp677              #   Call between .Ltmp677 and .Ltmp678
	.uleb128 .Ltmp679-.Lfunc_begin31        #     jumps to .Ltmp679
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp680-.Lfunc_begin31        # >> Call Site 4 <<
	.uleb128 .Ltmp681-.Ltmp680              #   Call between .Ltmp680 and .Ltmp681
	.uleb128 .Ltmp682-.Lfunc_begin31        #     jumps to .Ltmp682
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp698-.Lfunc_begin31        # >> Call Site 5 <<
	.uleb128 .Ltmp701-.Ltmp698              #   Call between .Ltmp698 and .Ltmp701
	.uleb128 .Ltmp702-.Lfunc_begin31        #     jumps to .Ltmp702
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp701-.Lfunc_begin31        # >> Call Site 6 <<
	.uleb128 .Ltmp683-.Ltmp701              #   Call between .Ltmp701 and .Ltmp683
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp683-.Lfunc_begin31        # >> Call Site 7 <<
	.uleb128 .Ltmp696-.Ltmp683              #   Call between .Ltmp683 and .Ltmp696
	.uleb128 .Ltmp697-.Lfunc_begin31        #     jumps to .Ltmp697
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp696-.Lfunc_begin31        # >> Call Site 8 <<
	.uleb128 .Lfunc_end31-.Ltmp696          #   Call between .Ltmp696 and .Lfunc_end31
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end31:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z54benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint32_t_RN9benchmark5StateE
.LCPI32_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z54benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint32_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z54benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint32_t_RN9benchmark5StateE,@function
_Z54benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint32_t_RN9benchmark5StateE: # @_Z54benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint32_t_RN9benchmark5StateE
.Lfunc_begin32:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception32
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$s1, $a0
	lu12i.w	$a0, 19
	ori	$s4, $a0, 2176
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp703:
	lu12i.w	$a0, 9
	ori	$s3, $a0, 3136
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp704:
# %bb.1:
	move	$s2, $a0
	st.d	$a0, $sp, 8
.Ltmp706:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp707:
# %bb.2:
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(.LCPI32_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI32_0)
	move	$s6, $zero
	vst	$vr0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB32_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp709:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp710:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB32_3 Depth=1
	stx.d	$a0, $fp, $s6
	addi.d	$s6, $s6, 8
	bne	$s6, $s4, .LBB32_3
# %bb.5:                                # %vector.ph
	move	$a0, $zero
	addi.d	$a1, $s0, 4
	.p2align	4, , 16
.LBB32_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a0
	ldx.d	$a3, $fp, $a0
	ld.d	$a2, $a2, 8
	st.w	$a3, $a1, -4
	st.w	$a2, $a1, 0
	addi.d	$a0, $a0, 16
	addi.d	$a1, $a1, 8
	bne	$a0, $s4, .LBB32_6
# %bb.7:                                # %vector.body83.preheader
	move	$a0, $zero
	addi.d	$a1, $s2, 16
	.p2align	4, , 16
.LBB32_8:                               # %vector.body83
                                        # =>This Inner Loop Header: Depth=1
	xvldx	$xr0, $fp, $a0
	add.d	$a2, $fp, $a0
	xvld	$xr1, $a2, 32
	xvpickve2gr.d	$a2, $xr0, 0
	vinsgr2vr.w	$vr2, $a2, 0
	xvpickve2gr.d	$a2, $xr0, 1
	vinsgr2vr.w	$vr2, $a2, 1
	xvpickve2gr.d	$a2, $xr0, 2
	vinsgr2vr.w	$vr2, $a2, 2
	xvpickve2gr.d	$a2, $xr0, 3
	vinsgr2vr.w	$vr2, $a2, 3
	xvpickve2gr.d	$a2, $xr1, 0
	vinsgr2vr.w	$vr0, $a2, 0
	xvpickve2gr.d	$a2, $xr1, 1
	vinsgr2vr.w	$vr0, $a2, 1
	xvpickve2gr.d	$a2, $xr1, 2
	vinsgr2vr.w	$vr0, $a2, 2
	xvpickve2gr.d	$a2, $xr1, 3
	vinsgr2vr.w	$vr0, $a2, 3
	vst	$vr2, $a1, -16
	vst	$vr0, $a1, 0
	addi.d	$a0, $a0, 64
	addi.d	$a1, $a1, 32
	bne	$a0, $s4, .LBB32_8
# %bb.9:                                # %_ZL20truncOrZextVecInLoopImjEvPKT_PT0_i.exit.preheader.preheader
	move	$s4, $zero
	move	$s5, $fp
	.p2align	4, , 16
.LBB32_10:                              # %_ZL20truncOrZextVecInLoopImjEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	ldx.w	$a0, $s2, $s4
	ldx.w	$a1, $s0, $s4
	bne	$a0, $a1, .LBB32_23
# %bb.11:                               # %_ZL20truncOrZextVecInLoopImjEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB32_10 Depth=1
	addi.d	$s4, $s4, 4
	addi.d	$s5, $s5, 8
	bne	$s4, $s3, .LBB32_10
# %bb.12:
	ld.w	$s3, $s1, 28
	ld.d	$s2, $s1, 16
.Ltmp727:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp728:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s3, .LBB32_19
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s2, .LBB32_19
# %bb.15:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 32
	addi.d	$a1, $sp, 8
	lu12i.w	$a2, 2
	ori	$a2, $a2, 1808
	.p2align	4, , 16
.LBB32_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_17 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a3, $sp, 8
	addi.d	$a3, $a3, 16
	move	$a4, $a0
	move	$a5, $a2
	.p2align	4, , 16
.LBB32_17:                              # %vector.body91
                                        #   Parent Loop BB32_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr0, $a4, -32
	xvld	$xr1, $a4, 0
	xvpickve2gr.d	$a6, $xr0, 0
	vinsgr2vr.w	$vr2, $a6, 0
	xvpickve2gr.d	$a6, $xr0, 1
	vinsgr2vr.w	$vr2, $a6, 1
	xvpickve2gr.d	$a6, $xr0, 2
	vinsgr2vr.w	$vr2, $a6, 2
	xvpickve2gr.d	$a6, $xr0, 3
	vinsgr2vr.w	$vr2, $a6, 3
	xvpickve2gr.d	$a6, $xr1, 0
	vinsgr2vr.w	$vr0, $a6, 0
	xvpickve2gr.d	$a6, $xr1, 1
	vinsgr2vr.w	$vr0, $a6, 1
	xvpickve2gr.d	$a6, $xr1, 2
	vinsgr2vr.w	$vr0, $a6, 2
	xvpickve2gr.d	$a6, $xr1, 3
	vinsgr2vr.w	$vr0, $a6, 3
	vst	$vr2, $a3, -16
	vst	$vr0, $a3, 0
	addi.d	$a5, $a5, -8
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 64
	bnez	$a5, .LBB32_17
# %bb.18:                               # %_ZL20truncOrZextVecInLoopImjEvPKT_PT0_i.exit28
                                        #   in Loop: Header=BB32_16 Depth=1
	addi.d	$s2, $s2, -1
	bnez	$s2, .LBB32_16
.LBB32_19:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp729:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp730:
# %bb.20:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit36
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 8
	beqz	$a0, .LBB32_22
# %bb.21:                               # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i38
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB32_22:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit42
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB32_23:
.Ltmp712:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp713:
# %bb.24:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	ld.d	$a1, $s5, 0
.Ltmp714:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp715:
# %bb.25:                               # %_ZNSolsEm.exit
.Ltmp716:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp717:
# %bb.26:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.wu	$a1, $s2, $s4
.Ltmp718:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp719:
# %bb.27:                               # %_ZNSolsEj.exit
.Ltmp720:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp721:
# %bb.28:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit21
	ldx.wu	$a1, $s0, $s4
.Ltmp722:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp723:
# %bb.29:                               # %_ZNSolsEj.exit23
.Ltmp724:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp725:
# %bb.30:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB32_31:                              # %.thread
.Ltmp708:
	move	$s1, $a0
	b	.LBB32_37
.LBB32_32:
.Ltmp705:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB32_33:
.Ltmp731:
	b	.LBB32_36
.LBB32_34:
.Ltmp726:
	b	.LBB32_36
.LBB32_35:
.Ltmp711:
.LBB32_36:
	move	$s1, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s2, $sp, 8
	beqz	$s2, .LBB32_38
.LBB32_37:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i31
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB32_38:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end32:
	.size	_Z54benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint32_t_RN9benchmark5StateE, .Lfunc_end32-_Z54benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint32_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table32:
.Lexception32:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end32-.Lcst_begin32
.Lcst_begin32:
	.uleb128 .Lfunc_begin32-.Lfunc_begin32  # >> Call Site 1 <<
	.uleb128 .Ltmp703-.Lfunc_begin32        #   Call between .Lfunc_begin32 and .Ltmp703
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp703-.Lfunc_begin32        # >> Call Site 2 <<
	.uleb128 .Ltmp704-.Ltmp703              #   Call between .Ltmp703 and .Ltmp704
	.uleb128 .Ltmp705-.Lfunc_begin32        #     jumps to .Ltmp705
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp706-.Lfunc_begin32        # >> Call Site 3 <<
	.uleb128 .Ltmp707-.Ltmp706              #   Call between .Ltmp706 and .Ltmp707
	.uleb128 .Ltmp708-.Lfunc_begin32        #     jumps to .Ltmp708
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp709-.Lfunc_begin32        # >> Call Site 4 <<
	.uleb128 .Ltmp710-.Ltmp709              #   Call between .Ltmp709 and .Ltmp710
	.uleb128 .Ltmp711-.Lfunc_begin32        #     jumps to .Ltmp711
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp727-.Lfunc_begin32        # >> Call Site 5 <<
	.uleb128 .Ltmp730-.Ltmp727              #   Call between .Ltmp727 and .Ltmp730
	.uleb128 .Ltmp731-.Lfunc_begin32        #     jumps to .Ltmp731
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp730-.Lfunc_begin32        # >> Call Site 6 <<
	.uleb128 .Ltmp712-.Ltmp730              #   Call between .Ltmp730 and .Ltmp712
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp712-.Lfunc_begin32        # >> Call Site 7 <<
	.uleb128 .Ltmp725-.Ltmp712              #   Call between .Ltmp712 and .Ltmp725
	.uleb128 .Ltmp726-.Lfunc_begin32        #     jumps to .Ltmp726
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp725-.Lfunc_begin32        # >> Call Site 8 <<
	.uleb128 .Lfunc_end32-.Ltmp725          #   Call between .Ltmp725 and .Lfunc_end32
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end32:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint32_t_RN9benchmark5StateE
.LCPI33_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint32_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint32_t_RN9benchmark5StateE,@function
_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint32_t_RN9benchmark5StateE: # @_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint32_t_RN9benchmark5StateE
.Lfunc_begin33:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception33
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$s0, $a0
	lu12i.w	$s4, 19
	ori	$s3, $s4, 2176
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp732:
	lu12i.w	$s6, 9
	ori	$s2, $s6, 3136
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp733:
# %bb.1:
	move	$s1, $a0
	move	$s7, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI33_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI33_0)
	ori	$a0, $s4, 2048
	add.d	$s5, $fp, $a0
	st.d	$s1, $sp, 8
	vst	$vr0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB33_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp735:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp736:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB33_2 Depth=1
	stx.d	$a0, $fp, $s7
	addi.d	$s7, $s7, 8
	bne	$s7, $s3, .LBB33_2
# %bb.4:
	move	$s4, $zero
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s3, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB33_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp738:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s3
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp739:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB33_5 Depth=1
	stx.w	$a0, $s1, $s4
	addi.d	$s4, $s4, 4
	bne	$s4, $s2, .LBB33_5
# %bb.7:
	ld.w	$s2, $s0, 28
	ld.d	$s1, $s0, 16
.Ltmp741:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp742:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s2, .LBB33_14
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s1, .LBB33_14
# %bb.10:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 128
	addi.d	$a1, $sp, 8
	ori	$a2, $s6, 3072
	lu12i.w	$a3, 2
	ori	$a3, $a3, 1792
	.p2align	4, , 16
.LBB33_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_12 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a5, $sp, 8
	add.d	$a4, $a5, $a2
	addi.d	$a5, $a5, 64
	move	$a6, $a0
	move	$a7, $a3
	.p2align	4, , 16
.LBB33_12:                              # %vector.body
                                        #   Parent Loop BB33_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr8, $a6, -96
	xvld	$xr9, $a6, -128
	xvld	$xr10, $a6, -32
	xvld	$xr11, $a6, -64
	xvld	$xr7, $a6, 32
	xvld	$xr12, $a6, 0
	xvld	$xr4, $a6, 96
	xvld	$xr6, $a6, 64
	xvld	$xr0, $a5, -64
	xvld	$xr1, $a5, -32
	xvld	$xr2, $a5, 0
	xvld	$xr3, $a5, 32
	xvpickve2gr.d	$t0, $xr9, 0
	xvinsgr2vr.w	$xr5, $t0, 0
	xvpickve2gr.d	$t0, $xr9, 1
	xvinsgr2vr.w	$xr5, $t0, 1
	xvpickve2gr.d	$t0, $xr9, 2
	xvinsgr2vr.w	$xr5, $t0, 2
	xvpickve2gr.d	$t0, $xr9, 3
	xvinsgr2vr.w	$xr5, $t0, 3
	xvpickve2gr.d	$t0, $xr8, 0
	xvinsgr2vr.w	$xr5, $t0, 4
	xvpickve2gr.d	$t0, $xr8, 1
	xvinsgr2vr.w	$xr5, $t0, 5
	xvpickve2gr.d	$t0, $xr8, 2
	xvinsgr2vr.w	$xr5, $t0, 6
	xvpickve2gr.d	$t0, $xr8, 3
	xvinsgr2vr.w	$xr5, $t0, 7
	xvpickve2gr.d	$t0, $xr11, 0
	xvinsgr2vr.w	$xr8, $t0, 0
	xvpickve2gr.d	$t0, $xr11, 1
	xvinsgr2vr.w	$xr8, $t0, 1
	xvpickve2gr.d	$t0, $xr11, 2
	xvinsgr2vr.w	$xr8, $t0, 2
	xvpickve2gr.d	$t0, $xr11, 3
	xvinsgr2vr.w	$xr8, $t0, 3
	xvpickve2gr.d	$t0, $xr10, 0
	xvinsgr2vr.w	$xr8, $t0, 4
	xvpickve2gr.d	$t0, $xr10, 1
	xvinsgr2vr.w	$xr8, $t0, 5
	xvpickve2gr.d	$t0, $xr10, 2
	xvinsgr2vr.w	$xr8, $t0, 6
	xvpickve2gr.d	$t0, $xr10, 3
	xvinsgr2vr.w	$xr8, $t0, 7
	xvpickve2gr.d	$t0, $xr12, 0
	xvinsgr2vr.w	$xr9, $t0, 0
	xvpickve2gr.d	$t0, $xr12, 1
	xvinsgr2vr.w	$xr9, $t0, 1
	xvpickve2gr.d	$t0, $xr12, 2
	xvinsgr2vr.w	$xr9, $t0, 2
	xvpickve2gr.d	$t0, $xr12, 3
	xvinsgr2vr.w	$xr9, $t0, 3
	xvpickve2gr.d	$t0, $xr7, 0
	xvinsgr2vr.w	$xr9, $t0, 4
	xvpickve2gr.d	$t0, $xr7, 1
	xvinsgr2vr.w	$xr9, $t0, 5
	xvpickve2gr.d	$t0, $xr7, 2
	xvinsgr2vr.w	$xr9, $t0, 6
	xvpickve2gr.d	$t0, $xr7, 3
	xvinsgr2vr.w	$xr9, $t0, 7
	xvpickve2gr.d	$t0, $xr6, 0
	xvinsgr2vr.w	$xr7, $t0, 0
	xvpickve2gr.d	$t0, $xr6, 1
	xvinsgr2vr.w	$xr7, $t0, 1
	xvpickve2gr.d	$t0, $xr6, 2
	xvinsgr2vr.w	$xr7, $t0, 2
	xvpickve2gr.d	$t0, $xr6, 3
	xvinsgr2vr.w	$xr7, $t0, 3
	xvpickve2gr.d	$t0, $xr4, 0
	xvinsgr2vr.w	$xr7, $t0, 4
	xvpickve2gr.d	$t0, $xr4, 1
	xvinsgr2vr.w	$xr7, $t0, 5
	xvpickve2gr.d	$t0, $xr4, 2
	xvinsgr2vr.w	$xr7, $t0, 6
	xvpickve2gr.d	$t0, $xr4, 3
	xvinsgr2vr.w	$xr7, $t0, 7
	xvadd.w	$xr0, $xr0, $xr5
	xvadd.w	$xr1, $xr1, $xr8
	xvadd.w	$xr2, $xr2, $xr9
	xvadd.w	$xr3, $xr3, $xr7
	xvst	$xr0, $a5, -64
	xvst	$xr1, $a5, -32
	xvst	$xr2, $a5, 0
	xvst	$xr3, $a5, 32
	addi.d	$a7, $a7, -32
	addi.d	$a6, $a6, 256
	addi.d	$a5, $a5, 128
	bnez	$a7, .LBB33_12
# %bb.13:                               # %.lr.ph.i
                                        #   in Loop: Header=BB33_11 Depth=1
	ld.w	$a5, $s5, 0
	ld.w	$a6, $a4, 0
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 0
	ld.w	$a5, $s5, 8
	ld.w	$a6, $a4, 4
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 4
	ld.w	$a5, $s5, 16
	ld.w	$a6, $a4, 8
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 8
	ld.w	$a5, $s5, 24
	ld.w	$a6, $a4, 12
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 12
	ld.w	$a5, $s5, 32
	ld.w	$a6, $a4, 16
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 16
	ld.w	$a5, $s5, 40
	ld.w	$a6, $a4, 20
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 20
	ld.w	$a5, $s5, 48
	ld.w	$a6, $a4, 24
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 24
	ld.w	$a5, $s5, 56
	ld.w	$a6, $a4, 28
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 28
	ld.w	$a5, $s5, 64
	ld.w	$a6, $a4, 32
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 32
	ld.w	$a5, $s5, 72
	ld.w	$a6, $a4, 36
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 36
	ld.w	$a5, $s5, 80
	ld.w	$a6, $a4, 40
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 40
	ld.w	$a5, $s5, 88
	ld.w	$a6, $a4, 44
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 44
	ld.w	$a5, $s5, 96
	ld.w	$a6, $a4, 48
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 48
	ld.w	$a5, $s5, 104
	ld.w	$a6, $a4, 52
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 52
	ld.w	$a5, $s5, 112
	ld.w	$a6, $a4, 56
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 56
	ld.w	$a5, $s5, 120
	ld.w	$a6, $a4, 60
	add.d	$a5, $a6, $a5
	addi.d	$s1, $s1, -1
	st.w	$a5, $a4, 60
	bnez	$s1, .LBB33_11
.LBB33_14:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp743:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp744:
# %bb.15:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 8
	beqz	$a0, .LBB33_17
# %bb.16:                               # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB33_17:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB33_18:
.Ltmp734:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB33_19:
.Ltmp745:
	ld.d	$s1, $sp, 8
	move	$s0, $a0
	bnez	$s1, .LBB33_23
	b	.LBB33_24
.LBB33_20:                              # %.loopexit
.Ltmp740:
	b	.LBB33_22
.LBB33_21:                              # %.loopexit.split-lp
.Ltmp737:
.LBB33_22:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB33_23:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB33_24:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end33:
	.size	_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint32_t_RN9benchmark5StateE, .Lfunc_end33-_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint32_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table33:
.Lexception33:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end33-.Lcst_begin33
.Lcst_begin33:
	.uleb128 .Lfunc_begin33-.Lfunc_begin33  # >> Call Site 1 <<
	.uleb128 .Ltmp732-.Lfunc_begin33        #   Call between .Lfunc_begin33 and .Ltmp732
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp732-.Lfunc_begin33        # >> Call Site 2 <<
	.uleb128 .Ltmp733-.Ltmp732              #   Call between .Ltmp732 and .Ltmp733
	.uleb128 .Ltmp734-.Lfunc_begin33        #     jumps to .Ltmp734
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp735-.Lfunc_begin33        # >> Call Site 3 <<
	.uleb128 .Ltmp736-.Ltmp735              #   Call between .Ltmp735 and .Ltmp736
	.uleb128 .Ltmp737-.Lfunc_begin33        #     jumps to .Ltmp737
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp738-.Lfunc_begin33        # >> Call Site 4 <<
	.uleb128 .Ltmp739-.Ltmp738              #   Call between .Ltmp738 and .Ltmp739
	.uleb128 .Ltmp740-.Lfunc_begin33        #     jumps to .Ltmp740
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp741-.Lfunc_begin33        # >> Call Site 5 <<
	.uleb128 .Ltmp744-.Ltmp741              #   Call between .Ltmp741 and .Ltmp744
	.uleb128 .Ltmp745-.Lfunc_begin33        #     jumps to .Ltmp745
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp744-.Lfunc_begin33        # >> Call Site 6 <<
	.uleb128 .Lfunc_end33-.Ltmp744          #   Call between .Ltmp744 and .Lfunc_end33
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end33:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint32_t_RN9benchmark5StateE
.LCPI34_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint32_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint32_t_RN9benchmark5StateE,@function
_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint32_t_RN9benchmark5StateE: # @_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint32_t_RN9benchmark5StateE
.Lfunc_begin34:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception34
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	move	$s0, $a0
	lu12i.w	$s4, 19
	ori	$s3, $s4, 2176
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp746:
	lu12i.w	$s6, 9
	ori	$s2, $s6, 3136
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp747:
# %bb.1:
	move	$s1, $a0
	move	$s7, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI34_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI34_0)
	ori	$a0, $s4, 2048
	add.d	$s5, $fp, $a0
	st.d	$s1, $sp, 8
	vst	$vr0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB34_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp749:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp750:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB34_2 Depth=1
	stx.d	$a0, $fp, $s7
	addi.d	$s7, $s7, 8
	bne	$s7, $s3, .LBB34_2
# %bb.4:
	move	$s4, $zero
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s3, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB34_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp752:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s3
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp753:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB34_5 Depth=1
	stx.w	$a0, $s1, $s4
	addi.d	$s4, $s4, 4
	bne	$s4, $s2, .LBB34_5
# %bb.7:
	ld.w	$s2, $s0, 28
	ld.d	$s1, $s0, 16
.Ltmp755:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp756:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s2, .LBB34_14
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s1, .LBB34_14
# %bb.10:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 256
	addi.d	$a1, $sp, 8
	ori	$a2, $s6, 3072
	lu12i.w	$a3, 2
	ori	$a3, $a3, 1792
	.p2align	4, , 16
.LBB34_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_12 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a5, $sp, 8
	add.d	$a4, $a5, $a2
	addi.d	$a5, $a5, 128
	move	$a6, $a0
	move	$a7, $a3
	.p2align	4, , 16
.LBB34_12:                              # %vector.body
                                        #   Parent Loop BB34_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr15, $a6, -160
	xvld	$xr23, $a6, -192
	xvld	$xr12, $a6, -224
	xvld	$xr24, $a6, -256
	xvld	$xr20, $a6, -32
	xvld	$xr21, $a6, -64
	xvld	$xr18, $a6, -96
	xvld	$xr22, $a6, -128
	xvld	$xr14, $a6, 96
	xvld	$xr16, $a6, 64
	xvld	$xr17, $a6, 32
	xvld	$xr19, $a6, 0
	xvld	$xr0, $a6, 224
	xvld	$xr10, $a6, 192
	xvld	$xr11, $a6, 160
	xvld	$xr13, $a6, 128
	xvld	$xr1, $a5, -128
	xvld	$xr5, $a5, -96
	xvld	$xr2, $a5, -64
	xvld	$xr6, $a5, -32
	xvld	$xr3, $a5, 0
	xvld	$xr7, $a5, 32
	xvld	$xr4, $a5, 64
	xvld	$xr8, $a5, 96
	xvpickve2gr.d	$t0, $xr24, 0
	xvinsgr2vr.w	$xr9, $t0, 0
	xvpickve2gr.d	$t0, $xr24, 1
	xvinsgr2vr.w	$xr9, $t0, 1
	xvpickve2gr.d	$t0, $xr24, 2
	xvinsgr2vr.w	$xr9, $t0, 2
	xvpickve2gr.d	$t0, $xr24, 3
	xvinsgr2vr.w	$xr9, $t0, 3
	xvpickve2gr.d	$t0, $xr12, 0
	xvinsgr2vr.w	$xr9, $t0, 4
	xvpickve2gr.d	$t0, $xr12, 1
	xvinsgr2vr.w	$xr9, $t0, 5
	xvpickve2gr.d	$t0, $xr12, 2
	xvinsgr2vr.w	$xr9, $t0, 6
	xvpickve2gr.d	$t0, $xr12, 3
	xvinsgr2vr.w	$xr9, $t0, 7
	xvpickve2gr.d	$t0, $xr23, 0
	xvinsgr2vr.w	$xr12, $t0, 0
	xvpickve2gr.d	$t0, $xr23, 1
	xvinsgr2vr.w	$xr12, $t0, 1
	xvpickve2gr.d	$t0, $xr23, 2
	xvinsgr2vr.w	$xr12, $t0, 2
	xvpickve2gr.d	$t0, $xr23, 3
	xvinsgr2vr.w	$xr12, $t0, 3
	xvpickve2gr.d	$t0, $xr15, 0
	xvinsgr2vr.w	$xr12, $t0, 4
	xvpickve2gr.d	$t0, $xr15, 1
	xvinsgr2vr.w	$xr12, $t0, 5
	xvpickve2gr.d	$t0, $xr15, 2
	xvinsgr2vr.w	$xr12, $t0, 6
	xvpickve2gr.d	$t0, $xr15, 3
	xvinsgr2vr.w	$xr12, $t0, 7
	xvpickve2gr.d	$t0, $xr22, 0
	xvinsgr2vr.w	$xr15, $t0, 0
	xvpickve2gr.d	$t0, $xr22, 1
	xvinsgr2vr.w	$xr15, $t0, 1
	xvpickve2gr.d	$t0, $xr22, 2
	xvinsgr2vr.w	$xr15, $t0, 2
	xvpickve2gr.d	$t0, $xr22, 3
	xvinsgr2vr.w	$xr15, $t0, 3
	xvpickve2gr.d	$t0, $xr18, 0
	xvinsgr2vr.w	$xr15, $t0, 4
	xvpickve2gr.d	$t0, $xr18, 1
	xvinsgr2vr.w	$xr15, $t0, 5
	xvpickve2gr.d	$t0, $xr18, 2
	xvinsgr2vr.w	$xr15, $t0, 6
	xvpickve2gr.d	$t0, $xr18, 3
	xvinsgr2vr.w	$xr15, $t0, 7
	xvpickve2gr.d	$t0, $xr21, 0
	xvinsgr2vr.w	$xr18, $t0, 0
	xvpickve2gr.d	$t0, $xr21, 1
	xvinsgr2vr.w	$xr18, $t0, 1
	xvpickve2gr.d	$t0, $xr21, 2
	xvinsgr2vr.w	$xr18, $t0, 2
	xvpickve2gr.d	$t0, $xr21, 3
	xvinsgr2vr.w	$xr18, $t0, 3
	xvpickve2gr.d	$t0, $xr20, 0
	xvinsgr2vr.w	$xr18, $t0, 4
	xvpickve2gr.d	$t0, $xr20, 1
	xvinsgr2vr.w	$xr18, $t0, 5
	xvpickve2gr.d	$t0, $xr20, 2
	xvinsgr2vr.w	$xr18, $t0, 6
	xvpickve2gr.d	$t0, $xr20, 3
	xvinsgr2vr.w	$xr18, $t0, 7
	xvpickve2gr.d	$t0, $xr19, 0
	xvinsgr2vr.w	$xr20, $t0, 0
	xvpickve2gr.d	$t0, $xr19, 1
	xvinsgr2vr.w	$xr20, $t0, 1
	xvpickve2gr.d	$t0, $xr19, 2
	xvinsgr2vr.w	$xr20, $t0, 2
	xvpickve2gr.d	$t0, $xr19, 3
	xvinsgr2vr.w	$xr20, $t0, 3
	xvpickve2gr.d	$t0, $xr17, 0
	xvinsgr2vr.w	$xr20, $t0, 4
	xvpickve2gr.d	$t0, $xr17, 1
	xvinsgr2vr.w	$xr20, $t0, 5
	xvpickve2gr.d	$t0, $xr17, 2
	xvinsgr2vr.w	$xr20, $t0, 6
	xvpickve2gr.d	$t0, $xr17, 3
	xvinsgr2vr.w	$xr20, $t0, 7
	xvpickve2gr.d	$t0, $xr16, 0
	xvinsgr2vr.w	$xr17, $t0, 0
	xvpickve2gr.d	$t0, $xr16, 1
	xvinsgr2vr.w	$xr17, $t0, 1
	xvpickve2gr.d	$t0, $xr16, 2
	xvinsgr2vr.w	$xr17, $t0, 2
	xvpickve2gr.d	$t0, $xr16, 3
	xvinsgr2vr.w	$xr17, $t0, 3
	xvpickve2gr.d	$t0, $xr14, 0
	xvinsgr2vr.w	$xr17, $t0, 4
	xvpickve2gr.d	$t0, $xr14, 1
	xvinsgr2vr.w	$xr17, $t0, 5
	xvpickve2gr.d	$t0, $xr14, 2
	xvinsgr2vr.w	$xr17, $t0, 6
	xvpickve2gr.d	$t0, $xr14, 3
	xvinsgr2vr.w	$xr17, $t0, 7
	xvpickve2gr.d	$t0, $xr13, 0
	xvinsgr2vr.w	$xr14, $t0, 0
	xvpickve2gr.d	$t0, $xr13, 1
	xvinsgr2vr.w	$xr14, $t0, 1
	xvpickve2gr.d	$t0, $xr13, 2
	xvinsgr2vr.w	$xr14, $t0, 2
	xvpickve2gr.d	$t0, $xr13, 3
	xvinsgr2vr.w	$xr14, $t0, 3
	xvpickve2gr.d	$t0, $xr11, 0
	xvinsgr2vr.w	$xr14, $t0, 4
	xvpickve2gr.d	$t0, $xr11, 1
	xvinsgr2vr.w	$xr14, $t0, 5
	xvpickve2gr.d	$t0, $xr11, 2
	xvinsgr2vr.w	$xr14, $t0, 6
	xvpickve2gr.d	$t0, $xr11, 3
	xvinsgr2vr.w	$xr14, $t0, 7
	xvpickve2gr.d	$t0, $xr10, 0
	xvinsgr2vr.w	$xr11, $t0, 0
	xvpickve2gr.d	$t0, $xr10, 1
	xvinsgr2vr.w	$xr11, $t0, 1
	xvpickve2gr.d	$t0, $xr10, 2
	xvinsgr2vr.w	$xr11, $t0, 2
	xvpickve2gr.d	$t0, $xr10, 3
	xvinsgr2vr.w	$xr11, $t0, 3
	xvpickve2gr.d	$t0, $xr0, 0
	xvinsgr2vr.w	$xr11, $t0, 4
	xvpickve2gr.d	$t0, $xr0, 1
	xvinsgr2vr.w	$xr11, $t0, 5
	xvpickve2gr.d	$t0, $xr0, 2
	xvinsgr2vr.w	$xr11, $t0, 6
	xvpickve2gr.d	$t0, $xr0, 3
	xvinsgr2vr.w	$xr11, $t0, 7
	xvadd.w	$xr0, $xr5, $xr12
	xvadd.w	$xr1, $xr1, $xr9
	xvadd.w	$xr5, $xr6, $xr18
	xvadd.w	$xr2, $xr2, $xr15
	xvadd.w	$xr6, $xr7, $xr17
	xvadd.w	$xr3, $xr3, $xr20
	xvadd.w	$xr7, $xr8, $xr11
	xvadd.w	$xr4, $xr4, $xr14
	xvst	$xr1, $a5, -128
	xvst	$xr0, $a5, -96
	xvst	$xr2, $a5, -64
	xvst	$xr5, $a5, -32
	xvst	$xr3, $a5, 0
	xvst	$xr6, $a5, 32
	xvst	$xr4, $a5, 64
	xvst	$xr7, $a5, 96
	addi.d	$a7, $a7, -64
	addi.d	$a6, $a6, 512
	addi.d	$a5, $a5, 256
	bnez	$a7, .LBB34_12
# %bb.13:                               # %.lr.ph.i
                                        #   in Loop: Header=BB34_11 Depth=1
	ld.w	$a5, $s5, 0
	ld.w	$a6, $a4, 0
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 0
	ld.w	$a5, $s5, 8
	ld.w	$a6, $a4, 4
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 4
	ld.w	$a5, $s5, 16
	ld.w	$a6, $a4, 8
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 8
	ld.w	$a5, $s5, 24
	ld.w	$a6, $a4, 12
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 12
	ld.w	$a5, $s5, 32
	ld.w	$a6, $a4, 16
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 16
	ld.w	$a5, $s5, 40
	ld.w	$a6, $a4, 20
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 20
	ld.w	$a5, $s5, 48
	ld.w	$a6, $a4, 24
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 24
	ld.w	$a5, $s5, 56
	ld.w	$a6, $a4, 28
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 28
	ld.w	$a5, $s5, 64
	ld.w	$a6, $a4, 32
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 32
	ld.w	$a5, $s5, 72
	ld.w	$a6, $a4, 36
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 36
	ld.w	$a5, $s5, 80
	ld.w	$a6, $a4, 40
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 40
	ld.w	$a5, $s5, 88
	ld.w	$a6, $a4, 44
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 44
	ld.w	$a5, $s5, 96
	ld.w	$a6, $a4, 48
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 48
	ld.w	$a5, $s5, 104
	ld.w	$a6, $a4, 52
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 52
	ld.w	$a5, $s5, 112
	ld.w	$a6, $a4, 56
	add.d	$a5, $a6, $a5
	st.w	$a5, $a4, 56
	ld.w	$a5, $s5, 120
	ld.w	$a6, $a4, 60
	add.d	$a5, $a6, $a5
	addi.d	$s1, $s1, -1
	st.w	$a5, $a4, 60
	bnez	$s1, .LBB34_11
.LBB34_14:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp757:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp758:
# %bb.15:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 8
	beqz	$a0, .LBB34_17
# %bb.16:                               # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB34_17:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB34_18:
.Ltmp748:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB34_19:
.Ltmp759:
	ld.d	$s1, $sp, 8
	move	$s0, $a0
	bnez	$s1, .LBB34_23
	b	.LBB34_24
.LBB34_20:                              # %.loopexit
.Ltmp754:
	b	.LBB34_22
.LBB34_21:                              # %.loopexit.split-lp
.Ltmp751:
.LBB34_22:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB34_23:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB34_24:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end34:
	.size	_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint32_t_RN9benchmark5StateE, .Lfunc_end34-_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint32_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table34:
.Lexception34:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end34-.Lcst_begin34
.Lcst_begin34:
	.uleb128 .Lfunc_begin34-.Lfunc_begin34  # >> Call Site 1 <<
	.uleb128 .Ltmp746-.Lfunc_begin34        #   Call between .Lfunc_begin34 and .Ltmp746
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp746-.Lfunc_begin34        # >> Call Site 2 <<
	.uleb128 .Ltmp747-.Ltmp746              #   Call between .Ltmp746 and .Ltmp747
	.uleb128 .Ltmp748-.Lfunc_begin34        #     jumps to .Ltmp748
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp749-.Lfunc_begin34        # >> Call Site 3 <<
	.uleb128 .Ltmp750-.Ltmp749              #   Call between .Ltmp749 and .Ltmp750
	.uleb128 .Ltmp751-.Lfunc_begin34        #     jumps to .Ltmp751
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp752-.Lfunc_begin34        # >> Call Site 4 <<
	.uleb128 .Ltmp753-.Ltmp752              #   Call between .Ltmp752 and .Ltmp753
	.uleb128 .Ltmp754-.Lfunc_begin34        #     jumps to .Ltmp754
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp755-.Lfunc_begin34        # >> Call Site 5 <<
	.uleb128 .Ltmp758-.Ltmp755              #   Call between .Ltmp755 and .Ltmp758
	.uleb128 .Ltmp759-.Lfunc_begin34        #     jumps to .Ltmp759
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp758-.Lfunc_begin34        # >> Call Site 6 <<
	.uleb128 .Lfunc_end34-.Ltmp758          #   Call between .Ltmp758 and .Lfunc_end34
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end34:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z61benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint32_t_RN9benchmark5StateE
.LCPI35_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint32_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint32_t_RN9benchmark5StateE,@function
_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint32_t_RN9benchmark5StateE: # @_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint32_t_RN9benchmark5StateE
.Lfunc_begin35:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception35
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	move	$s0, $a0
	lu12i.w	$a0, 19
	ori	$s3, $a0, 2176
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp760:
	lu12i.w	$a0, 9
	ori	$s2, $a0, 3136
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp761:
# %bb.1:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.LCPI35_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI35_0)
	move	$s5, $zero
	st.d	$s1, $sp, 8
	vst	$vr0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB35_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp763:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp764:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB35_2 Depth=1
	stx.d	$a0, $fp, $s5
	addi.d	$s5, $s5, 8
	bne	$s5, $s3, .LBB35_2
# %bb.4:
	move	$s4, $zero
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s3, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB35_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp766:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s3
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp767:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB35_5 Depth=1
	stx.w	$a0, $s1, $s4
	addi.d	$s4, $s4, 4
	bne	$s4, $s2, .LBB35_5
# %bb.7:
	ld.w	$s2, $s0, 28
	ld.d	$s1, $s0, 16
.Ltmp769:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp770:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s2, .LBB35_14
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s1, .LBB35_14
# %bb.10:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 32
	addi.d	$a1, $sp, 8
	lu12i.w	$a2, 2
	ori	$a2, $a2, 1808
	.p2align	4, , 16
.LBB35_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_12 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a3, $sp, 8
	addi.d	$a3, $a3, 16
	move	$a4, $a0
	move	$a5, $a2
	.p2align	4, , 16
.LBB35_12:                              # %vector.body
                                        #   Parent Loop BB35_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr0, $a4, -32
	xvld	$xr1, $a4, 0
	vld	$vr2, $a3, -16
	vld	$vr3, $a3, 0
	xvpickve2gr.d	$a6, $xr0, 0
	vinsgr2vr.w	$vr4, $a6, 0
	xvpickve2gr.d	$a6, $xr0, 1
	vinsgr2vr.w	$vr4, $a6, 1
	xvpickve2gr.d	$a6, $xr0, 2
	vinsgr2vr.w	$vr4, $a6, 2
	xvpickve2gr.d	$a6, $xr0, 3
	vinsgr2vr.w	$vr4, $a6, 3
	xvpickve2gr.d	$a6, $xr1, 0
	vinsgr2vr.w	$vr0, $a6, 0
	xvpickve2gr.d	$a6, $xr1, 1
	vinsgr2vr.w	$vr0, $a6, 1
	xvpickve2gr.d	$a6, $xr1, 2
	vinsgr2vr.w	$vr0, $a6, 2
	xvpickve2gr.d	$a6, $xr1, 3
	vinsgr2vr.w	$vr0, $a6, 3
	vadd.w	$vr1, $vr2, $vr4
	vadd.w	$vr0, $vr3, $vr0
	vst	$vr1, $a3, -16
	vst	$vr0, $a3, 0
	addi.d	$a5, $a5, -8
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 64
	bnez	$a5, .LBB35_12
# %bb.13:                               # %_ZL27truncOrZextVecWithAddInLoopImjEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB35_11 Depth=1
	addi.d	$s1, $s1, -1
	bnez	$s1, .LBB35_11
.LBB35_14:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp771:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp772:
# %bb.15:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 8
	beqz	$a0, .LBB35_17
# %bb.16:                               # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB35_17:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.LBB35_18:
.Ltmp762:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB35_19:
.Ltmp773:
	ld.d	$s1, $sp, 8
	move	$s0, $a0
	bnez	$s1, .LBB35_23
	b	.LBB35_24
.LBB35_20:                              # %.loopexit
.Ltmp768:
	b	.LBB35_22
.LBB35_21:                              # %.loopexit.split-lp
.Ltmp765:
.LBB35_22:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB35_23:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB35_24:                              # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end35:
	.size	_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint32_t_RN9benchmark5StateE, .Lfunc_end35-_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint32_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table35:
.Lexception35:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end35-.Lcst_begin35
.Lcst_begin35:
	.uleb128 .Lfunc_begin35-.Lfunc_begin35  # >> Call Site 1 <<
	.uleb128 .Ltmp760-.Lfunc_begin35        #   Call between .Lfunc_begin35 and .Ltmp760
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp760-.Lfunc_begin35        # >> Call Site 2 <<
	.uleb128 .Ltmp761-.Ltmp760              #   Call between .Ltmp760 and .Ltmp761
	.uleb128 .Ltmp762-.Lfunc_begin35        #     jumps to .Ltmp762
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp763-.Lfunc_begin35        # >> Call Site 3 <<
	.uleb128 .Ltmp764-.Ltmp763              #   Call between .Ltmp763 and .Ltmp764
	.uleb128 .Ltmp765-.Lfunc_begin35        #     jumps to .Ltmp765
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp766-.Lfunc_begin35        # >> Call Site 4 <<
	.uleb128 .Ltmp767-.Ltmp766              #   Call between .Ltmp766 and .Ltmp767
	.uleb128 .Ltmp768-.Lfunc_begin35        #     jumps to .Ltmp768
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp769-.Lfunc_begin35        # >> Call Site 5 <<
	.uleb128 .Ltmp772-.Ltmp769              #   Call between .Ltmp769 and .Ltmp772
	.uleb128 .Ltmp773-.Lfunc_begin35        #     jumps to .Ltmp773
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp772-.Lfunc_begin35        # >> Call Site 6 <<
	.uleb128 .Lfunc_end35-.Ltmp772          #   Call between .Ltmp772 and .Lfunc_end35
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end35:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint16_t_RN9benchmark5StateE # -- Begin function _Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint16_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint16_t_RN9benchmark5StateE,@function
_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint16_t_RN9benchmark5StateE: # @_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint16_t_RN9benchmark5StateE
.Lfunc_begin36:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception36
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s0, $a0
	lu12i.w	$s1, 2
	ori	$s4, $s1, 1808
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp774:
	lu12i.w	$s7, 4
	ori	$s2, $s7, 3616
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp775:
# %bb.1:                                # %.split
	move	$s3, $a0
	st.d	$s0, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $sp, 24
.Ltmp777:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp778:
# %bb.2:
	move	$s0, $a0
	ori	$a0, $s1, 1793
	add.d	$s6, $fp, $a0
	ori	$a0, $s7, 3586
	add.d	$s1, $s3, $a0
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 38
	lu12i.w	$a0, -3
	ori	$s8, $a0, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB36_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp780:
	addi.d	$a0, $sp, 38
	addi.d	$a2, $sp, 38
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp781:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB36_3 Depth=1
	add.d	$a1, $fp, $s8
	addi.d	$s8, $s8, 1
	stx.b	$a0, $a1, $s4
	bnez	$s8, .LBB36_3
# %bb.5:                                # %vector.ph
	addi.d	$a0, $s0, 2
	lu12i.w	$a1, -3
	ori	$a1, $a1, 2288
	lu12i.w	$a6, 2
	ori	$a2, $a6, 1809
	.p2align	4, , 16
.LBB36_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a3, $fp, $a1
	ldx.bu	$a4, $a3, $s4
	ldx.bu	$a3, $a3, $a2
	st.h	$a4, $a0, -2
	st.h	$a3, $a0, 0
	addi.d	$a1, $a1, 2
	addi.d	$a0, $a0, 4
	bnez	$a1, .LBB36_6
# %bb.7:                                # %vector.body82.preheader
	addi.d	$a0, $s3, 32
	lu12i.w	$a1, -3
	ori	$a1, $a1, 2304
	vrepli.b	$vr4, 0
	.p2align	4, , 16
.LBB36_8:                               # %vector.body82
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a1
	ldptr.d	$a3, $a2, 9984
	ldptr.d	$a4, $a2, 9992
	ldptr.d	$a5, $a2, 10000
	ldptr.d	$a2, $a2, 10008
	vinsgr2vr.d	$vr0, $a3, 0
	vinsgr2vr.d	$vr1, $a4, 0
	vinsgr2vr.d	$vr2, $a5, 0
	vinsgr2vr.d	$vr3, $a2, 0
	vilvl.b	$vr0, $vr4, $vr0
	vilvl.b	$vr1, $vr4, $vr1
	vilvl.b	$vr2, $vr4, $vr2
	vilvl.b	$vr3, $vr4, $vr3
	vst	$vr0, $a0, -32
	vst	$vr1, $a0, -16
	vst	$vr2, $a0, 0
	vst	$vr3, $a0, 16
	addi.d	$a1, $a1, 32
	addi.d	$a0, $a0, 64
	bnez	$a1, .LBB36_8
# %bb.9:                                # %.lr.ph.i
	ori	$s5, $a6, 1792
	ldx.bu	$a0, $fp, $s5
	move	$s8, $zero
	ori	$a1, $s7, 3584
	stx.h	$a0, $s3, $a1
	ld.bu	$a0, $s6, 1
	ori	$a1, $s7, 3588
	ori	$a2, $a6, 1796
	ldx.bu	$a2, $fp, $a2
	stx.h	$a0, $s3, $a1
	ori	$a0, $s7, 3592
	ld.bu	$a1, $s6, 5
	stx.h	$a2, $s3, $a0
	ld.bu	$a0, $s6, 0
	ori	$a2, $s7, 3596
	stx.h	$a1, $s3, $a2
	ld.bu	$a1, $s6, 2
	ori	$a2, $a6, 1800
	ldx.bu	$a2, $fp, $a2
	st.h	$a0, $s1, 0
	st.h	$a1, $s1, 4
	ori	$a0, $s7, 3600
	stx.h	$a2, $s3, $a0
	ld.bu	$a0, $s6, 9
	ori	$a1, $s7, 3604
	ori	$a2, $a6, 1804
	ldx.bu	$a2, $fp, $a2
	stx.h	$a0, $s3, $a1
	ld.bu	$a0, $s6, 4
	ori	$a1, $s7, 3608
	stx.h	$a2, $s3, $a1
	ld.bu	$a1, $s6, 6
	ld.bu	$a2, $s6, 8
	st.h	$a0, $s1, 8
	ld.bu	$a0, $s6, 10
	st.h	$a1, $s1, 12
	st.h	$a2, $s1, 16
	ld.bu	$a1, $s6, 12
	st.h	$a0, $s1, 20
	ld.bu	$a0, $s6, 13
	ld.bu	$a2, $s6, 14
	st.h	$a1, $s1, 24
	ori	$a1, $s7, 3612
	stx.h	$a0, $s3, $a1
	st.h	$a2, $s1, 28
	lu12i.w	$a0, -3
	ori	$s1, $a0, 2288
	.p2align	4, , 16
.LBB36_10:                              # %_ZL27truncOrZextVecInLoopWithVW8IhtEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	ldx.hu	$a0, $s3, $s8
	ldx.hu	$a1, $s0, $s8
	bne	$a0, $a1, .LBB36_29
# %bb.11:                               # %_ZL27truncOrZextVecInLoopWithVW8IhtEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB36_10 Depth=1
	addi.d	$s1, $s1, 1
	addi.d	$s8, $s8, 2
	bnez	$s1, .LBB36_10
# %bb.12:
	vst	$vr4, $sp, 0                    # 16-byte Folded Spill
	ld.d	$s6, $sp, 16                    # 8-byte Folded Reload
	ld.w	$s3, $s6, 28
	ld.d	$s1, $s6, 16
.Ltmp798:
	move	$a0, $s6
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp799:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	vld	$vr4, $sp, 0                    # 16-byte Folded Reload
	bnez	$s3, .LBB36_25
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s1, .LBB36_25
# %bb.15:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s4
	addi.d	$a1, $sp, 24
	lu12i.w	$a3, -3
	ori	$a2, $a3, 2288
	ori	$a3, $a3, 2304
	.p2align	4, , 16
.LBB36_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_20 Depth 2
                                        #     Child Loop BB36_23 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a4, $sp, 24
	bgeu	$a4, $a0, .LBB36_19
# %bb.17:                               # %.lr.ph
                                        #   in Loop: Header=BB36_16 Depth=1
	add.d	$a5, $a4, $s2
	bgeu	$fp, $a5, .LBB36_19
# %bb.18:                               #   in Loop: Header=BB36_16 Depth=1
	move	$a6, $zero
	b	.LBB36_22
	.p2align	4, , 16
.LBB36_19:                              # %vector.body93.preheader
                                        #   in Loop: Header=BB36_16 Depth=1
	addi.d	$a5, $a4, 32
	move	$a6, $a3
	.p2align	4, , 16
.LBB36_20:                              # %vector.body93
                                        #   Parent Loop BB36_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a7, $fp, $a6
	ldptr.d	$t0, $a7, 9984
	ldptr.d	$t1, $a7, 9992
	ldptr.d	$t2, $a7, 10000
	ldptr.d	$a7, $a7, 10008
	vinsgr2vr.d	$vr0, $t0, 0
	vinsgr2vr.d	$vr1, $t1, 0
	vinsgr2vr.d	$vr2, $t2, 0
	vinsgr2vr.d	$vr3, $a7, 0
	vilvl.b	$vr0, $vr4, $vr0
	vilvl.b	$vr1, $vr4, $vr1
	vilvl.b	$vr2, $vr4, $vr2
	vilvl.b	$vr3, $vr4, $vr3
	vst	$vr0, $a5, -32
	vst	$vr1, $a5, -16
	vst	$vr2, $a5, 0
	vst	$vr3, $a5, 16
	addi.d	$a6, $a6, 32
	addi.d	$a5, $a5, 64
	bnez	$a6, .LBB36_20
# %bb.21:                               #   in Loop: Header=BB36_16 Depth=1
	move	$a6, $s5
.LBB36_22:                              # %.lr.ph.i23.preheader
                                        #   in Loop: Header=BB36_16 Depth=1
	add.d	$a5, $a6, $a2
	alsl.d	$a4, $a6, $a4, 1
	add.d	$a6, $fp, $a6
	.p2align	4, , 16
.LBB36_23:                              # %.lr.ph.i23
                                        #   Parent Loop BB36_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$a7, $a6, 0
	st.h	$a7, $a4, 0
	addi.d	$a5, $a5, 1
	addi.d	$a4, $a4, 2
	addi.d	$a6, $a6, 1
	bnez	$a5, .LBB36_23
# %bb.24:                               # %_ZL27truncOrZextVecInLoopWithVW8IhtEvPKT_PT0_i.exit27
                                        #   in Loop: Header=BB36_16 Depth=1
	addi.d	$s1, $s1, -1
	bnez	$s1, .LBB36_16
.LBB36_25:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp800:
	move	$a0, $s6
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp801:
# %bb.26:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit35
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 24
	beqz	$a0, .LBB36_28
# %bb.27:                               # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i37
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB36_28:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit41
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB36_29:
.Ltmp783:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp784:
# %bb.30:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	add.d	$a0, $fp, $s1
	ldx.bu	$a1, $a0, $s4
.Ltmp785:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp786:
# %bb.31:
.Ltmp787:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp788:
# %bb.32:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit17
	ldx.hu	$a1, $s3, $s8
.Ltmp789:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp790:
# %bb.33:                               # %_ZNSolsEt.exit
.Ltmp791:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp792:
# %bb.34:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit20
	ldx.hu	$a1, $s0, $s8
.Ltmp793:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp794:
# %bb.35:                               # %_ZNSolsEt.exit22
.Ltmp795:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp796:
# %bb.36:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB36_37:                              # %.thread
.Ltmp779:
	move	$s1, $a0
	b	.LBB36_43
.LBB36_38:
.Ltmp776:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB36_39:
.Ltmp802:
	b	.LBB36_42
.LBB36_40:
.Ltmp797:
	b	.LBB36_42
.LBB36_41:
.Ltmp782:
.LBB36_42:
	move	$s1, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s3, $sp, 24
	beqz	$s3, .LBB36_44
.LBB36_43:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i30
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB36_44:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end36:
	.size	_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint16_t_RN9benchmark5StateE, .Lfunc_end36-_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint16_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table36:
.Lexception36:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end36-.Lcst_begin36
.Lcst_begin36:
	.uleb128 .Lfunc_begin36-.Lfunc_begin36  # >> Call Site 1 <<
	.uleb128 .Ltmp774-.Lfunc_begin36        #   Call between .Lfunc_begin36 and .Ltmp774
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp774-.Lfunc_begin36        # >> Call Site 2 <<
	.uleb128 .Ltmp775-.Ltmp774              #   Call between .Ltmp774 and .Ltmp775
	.uleb128 .Ltmp776-.Lfunc_begin36        #     jumps to .Ltmp776
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp777-.Lfunc_begin36        # >> Call Site 3 <<
	.uleb128 .Ltmp778-.Ltmp777              #   Call between .Ltmp777 and .Ltmp778
	.uleb128 .Ltmp779-.Lfunc_begin36        #     jumps to .Ltmp779
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp780-.Lfunc_begin36        # >> Call Site 4 <<
	.uleb128 .Ltmp781-.Ltmp780              #   Call between .Ltmp780 and .Ltmp781
	.uleb128 .Ltmp782-.Lfunc_begin36        #     jumps to .Ltmp782
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp798-.Lfunc_begin36        # >> Call Site 5 <<
	.uleb128 .Ltmp801-.Ltmp798              #   Call between .Ltmp798 and .Ltmp801
	.uleb128 .Ltmp802-.Lfunc_begin36        #     jumps to .Ltmp802
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp801-.Lfunc_begin36        # >> Call Site 6 <<
	.uleb128 .Ltmp783-.Ltmp801              #   Call between .Ltmp801 and .Ltmp783
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp783-.Lfunc_begin36        # >> Call Site 7 <<
	.uleb128 .Ltmp796-.Ltmp783              #   Call between .Ltmp783 and .Ltmp796
	.uleb128 .Ltmp797-.Lfunc_begin36        #     jumps to .Ltmp797
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp796-.Lfunc_begin36        # >> Call Site 8 <<
	.uleb128 .Lfunc_end36-.Ltmp796          #   Call between .Ltmp796 and .Lfunc_end36
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end36:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint16_t_RN9benchmark5StateE # -- Begin function _Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint16_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint16_t_RN9benchmark5StateE,@function
_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint16_t_RN9benchmark5StateE: # @_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint16_t_RN9benchmark5StateE
.Lfunc_begin37:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception37
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	st.d	$s8, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s7, $a0
	lu12i.w	$s2, 2
	ori	$s1, $s2, 1808
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp803:
	lu12i.w	$s5, 4
	ori	$s3, $s5, 3616
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp804:
# %bb.1:                                # %.split
	move	$s4, $a0
	st.d	$a0, $sp, 8
.Ltmp806:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp807:
# %bb.2:
	move	$s0, $a0
	ori	$a0, $s2, 1793
	add.d	$s2, $fp, $a0
	ori	$a0, $s5, 3586
	add.d	$a0, $s4, $a0
	st.d	$a0, $sp, 0                     # 8-byte Folded Spill
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 22
	lu12i.w	$s8, -3
	ori	$s6, $s8, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB37_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp809:
	addi.d	$a0, $sp, 22
	addi.d	$a2, $sp, 22
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp810:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB37_3 Depth=1
	add.d	$a1, $fp, $s6
	addi.d	$s6, $s6, 1
	stx.b	$a0, $a1, $s1
	bnez	$s6, .LBB37_3
# %bb.5:                                # %vector.ph
	addi.d	$a0, $s0, 2
	ori	$a1, $s8, 2288
	lu12i.w	$a5, 2
	ori	$a2, $a5, 1809
	.p2align	4, , 16
.LBB37_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a3, $fp, $a1
	ldx.bu	$a4, $a3, $s1
	ldx.bu	$a3, $a3, $a2
	st.h	$a4, $a0, -2
	st.h	$a3, $a0, 0
	addi.d	$a1, $a1, 2
	addi.d	$a0, $a0, 4
	bnez	$a1, .LBB37_6
# %bb.7:                                # %vector.body82.preheader
	move	$a3, $s7
	addi.d	$a0, $s4, 64
	ori	$a1, $s8, 2304
	ori	$s5, $a5, 1792
	ori	$s6, $a5, 1824
	ori	$s7, $a5, 1840
	.p2align	4, , 16
.LBB37_8:                               # %vector.body82
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a1
	vldx	$vr2, $a2, $s5
	vldx	$vr4, $a2, $s1
	vldx	$vr3, $a2, $s6
	vldx	$vr1, $a2, $s7
	vpickve2gr.b	$a2, $vr2, 0
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr0, $a2, 0
	vpickve2gr.b	$a2, $vr2, 1
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr0, $a2, 1
	vpickve2gr.b	$a2, $vr2, 2
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr0, $a2, 2
	vpickve2gr.b	$a2, $vr2, 3
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr0, $a2, 3
	vpickve2gr.b	$a2, $vr2, 4
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr0, $a2, 4
	vpickve2gr.b	$a2, $vr2, 5
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr0, $a2, 5
	vpickve2gr.b	$a2, $vr2, 6
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr0, $a2, 6
	vpickve2gr.b	$a2, $vr2, 7
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr0, $a2, 7
	vpickve2gr.b	$a2, $vr2, 8
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $a2, 0
	xvpermi.q	$xr0, $xr5, 2
	vpickve2gr.b	$a2, $vr2, 9
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $a2, 1
	xvpermi.q	$xr0, $xr5, 2
	vpickve2gr.b	$a2, $vr2, 10
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $a2, 2
	xvpermi.q	$xr0, $xr5, 2
	vpickve2gr.b	$a2, $vr2, 11
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $a2, 3
	xvpermi.q	$xr0, $xr5, 2
	vpickve2gr.b	$a2, $vr2, 12
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $a2, 4
	xvpermi.q	$xr0, $xr5, 2
	vpickve2gr.b	$a2, $vr2, 13
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $a2, 5
	xvpermi.q	$xr0, $xr5, 2
	vpickve2gr.b	$a2, $vr2, 14
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $a2, 6
	xvpermi.q	$xr0, $xr5, 2
	vpickve2gr.b	$a2, $vr2, 15
	andi	$a2, $a2, 255
	xvori.b	$xr2, $xr0, 0
	xvpermi.q	$xr2, $xr0, 1
	vinsgr2vr.h	$vr2, $a2, 7
	xvpermi.q	$xr0, $xr2, 2
	vpickve2gr.b	$a2, $vr4, 0
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr2, $a2, 0
	vpickve2gr.b	$a2, $vr4, 1
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr2, $a2, 1
	vpickve2gr.b	$a2, $vr4, 2
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr2, $a2, 2
	vpickve2gr.b	$a2, $vr4, 3
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr2, $a2, 3
	vpickve2gr.b	$a2, $vr4, 4
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr2, $a2, 4
	vpickve2gr.b	$a2, $vr4, 5
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr2, $a2, 5
	vpickve2gr.b	$a2, $vr4, 6
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr2, $a2, 6
	vpickve2gr.b	$a2, $vr4, 7
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr2, $a2, 7
	vpickve2gr.b	$a2, $vr4, 8
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr2, 0
	xvpermi.q	$xr5, $xr2, 1
	vinsgr2vr.h	$vr5, $a2, 0
	xvpermi.q	$xr2, $xr5, 2
	vpickve2gr.b	$a2, $vr4, 9
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr2, 0
	xvpermi.q	$xr5, $xr2, 1
	vinsgr2vr.h	$vr5, $a2, 1
	xvpermi.q	$xr2, $xr5, 2
	vpickve2gr.b	$a2, $vr4, 10
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr2, 0
	xvpermi.q	$xr5, $xr2, 1
	vinsgr2vr.h	$vr5, $a2, 2
	xvpermi.q	$xr2, $xr5, 2
	vpickve2gr.b	$a2, $vr4, 11
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr2, 0
	xvpermi.q	$xr5, $xr2, 1
	vinsgr2vr.h	$vr5, $a2, 3
	xvpermi.q	$xr2, $xr5, 2
	vpickve2gr.b	$a2, $vr4, 12
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr2, 0
	xvpermi.q	$xr5, $xr2, 1
	vinsgr2vr.h	$vr5, $a2, 4
	xvpermi.q	$xr2, $xr5, 2
	vpickve2gr.b	$a2, $vr4, 13
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr2, 0
	xvpermi.q	$xr5, $xr2, 1
	vinsgr2vr.h	$vr5, $a2, 5
	xvpermi.q	$xr2, $xr5, 2
	vpickve2gr.b	$a2, $vr4, 14
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr2, 0
	xvpermi.q	$xr5, $xr2, 1
	vinsgr2vr.h	$vr5, $a2, 6
	xvpermi.q	$xr2, $xr5, 2
	vpickve2gr.b	$a2, $vr4, 15
	andi	$a2, $a2, 255
	xvori.b	$xr4, $xr2, 0
	xvpermi.q	$xr4, $xr2, 1
	vinsgr2vr.h	$vr4, $a2, 7
	xvpermi.q	$xr2, $xr4, 2
	vpickve2gr.b	$a2, $vr3, 0
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr4, $a2, 0
	vpickve2gr.b	$a2, $vr3, 1
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr4, $a2, 1
	vpickve2gr.b	$a2, $vr3, 2
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr4, $a2, 2
	vpickve2gr.b	$a2, $vr3, 3
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr4, $a2, 3
	vpickve2gr.b	$a2, $vr3, 4
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr4, $a2, 4
	vpickve2gr.b	$a2, $vr3, 5
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr4, $a2, 5
	vpickve2gr.b	$a2, $vr3, 6
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr4, $a2, 6
	vpickve2gr.b	$a2, $vr3, 7
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr4, $a2, 7
	vpickve2gr.b	$a2, $vr3, 8
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr4, 0
	xvpermi.q	$xr5, $xr4, 1
	vinsgr2vr.h	$vr5, $a2, 0
	xvpermi.q	$xr4, $xr5, 2
	vpickve2gr.b	$a2, $vr3, 9
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr4, 0
	xvpermi.q	$xr5, $xr4, 1
	vinsgr2vr.h	$vr5, $a2, 1
	xvpermi.q	$xr4, $xr5, 2
	vpickve2gr.b	$a2, $vr3, 10
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr4, 0
	xvpermi.q	$xr5, $xr4, 1
	vinsgr2vr.h	$vr5, $a2, 2
	xvpermi.q	$xr4, $xr5, 2
	vpickve2gr.b	$a2, $vr3, 11
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr4, 0
	xvpermi.q	$xr5, $xr4, 1
	vinsgr2vr.h	$vr5, $a2, 3
	xvpermi.q	$xr4, $xr5, 2
	vpickve2gr.b	$a2, $vr3, 12
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr4, 0
	xvpermi.q	$xr5, $xr4, 1
	vinsgr2vr.h	$vr5, $a2, 4
	xvpermi.q	$xr4, $xr5, 2
	vpickve2gr.b	$a2, $vr3, 13
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr4, 0
	xvpermi.q	$xr5, $xr4, 1
	vinsgr2vr.h	$vr5, $a2, 5
	xvpermi.q	$xr4, $xr5, 2
	vpickve2gr.b	$a2, $vr3, 14
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr4, 0
	xvpermi.q	$xr5, $xr4, 1
	vinsgr2vr.h	$vr5, $a2, 6
	xvpermi.q	$xr4, $xr5, 2
	vpickve2gr.b	$a2, $vr3, 15
	andi	$a2, $a2, 255
	xvori.b	$xr3, $xr4, 0
	xvpermi.q	$xr3, $xr4, 1
	vinsgr2vr.h	$vr3, $a2, 7
	xvpermi.q	$xr4, $xr3, 2
	vpickve2gr.b	$a2, $vr1, 0
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr3, $a2, 0
	vpickve2gr.b	$a2, $vr1, 1
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr3, $a2, 1
	vpickve2gr.b	$a2, $vr1, 2
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr3, $a2, 2
	vpickve2gr.b	$a2, $vr1, 3
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr3, $a2, 3
	vpickve2gr.b	$a2, $vr1, 4
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr3, $a2, 4
	vpickve2gr.b	$a2, $vr1, 5
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr3, $a2, 5
	vpickve2gr.b	$a2, $vr1, 6
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr3, $a2, 6
	vpickve2gr.b	$a2, $vr1, 7
	andi	$a2, $a2, 255
	vinsgr2vr.h	$vr3, $a2, 7
	vpickve2gr.b	$a2, $vr1, 8
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr3, 0
	xvpermi.q	$xr5, $xr3, 1
	vinsgr2vr.h	$vr5, $a2, 0
	xvpermi.q	$xr3, $xr5, 2
	vpickve2gr.b	$a2, $vr1, 9
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr3, 0
	xvpermi.q	$xr5, $xr3, 1
	vinsgr2vr.h	$vr5, $a2, 1
	xvpermi.q	$xr3, $xr5, 2
	vpickve2gr.b	$a2, $vr1, 10
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr3, 0
	xvpermi.q	$xr5, $xr3, 1
	vinsgr2vr.h	$vr5, $a2, 2
	xvpermi.q	$xr3, $xr5, 2
	vpickve2gr.b	$a2, $vr1, 11
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr3, 0
	xvpermi.q	$xr5, $xr3, 1
	vinsgr2vr.h	$vr5, $a2, 3
	xvpermi.q	$xr3, $xr5, 2
	vpickve2gr.b	$a2, $vr1, 12
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr3, 0
	xvpermi.q	$xr5, $xr3, 1
	vinsgr2vr.h	$vr5, $a2, 4
	xvpermi.q	$xr3, $xr5, 2
	vpickve2gr.b	$a2, $vr1, 13
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr3, 0
	xvpermi.q	$xr5, $xr3, 1
	vinsgr2vr.h	$vr5, $a2, 5
	xvpermi.q	$xr3, $xr5, 2
	vpickve2gr.b	$a2, $vr1, 14
	andi	$a2, $a2, 255
	xvori.b	$xr5, $xr3, 0
	xvpermi.q	$xr5, $xr3, 1
	vinsgr2vr.h	$vr5, $a2, 6
	xvpermi.q	$xr3, $xr5, 2
	vpickve2gr.b	$a2, $vr1, 15
	andi	$a2, $a2, 255
	xvori.b	$xr1, $xr3, 0
	xvpermi.q	$xr1, $xr3, 1
	vinsgr2vr.h	$vr1, $a2, 7
	xvpermi.q	$xr3, $xr1, 2
	xvst	$xr0, $a0, -64
	xvst	$xr2, $a0, -32
	xvst	$xr4, $a0, 0
	xvst	$xr3, $a0, 32
	addi.d	$a1, $a1, 64
	addi.d	$a0, $a0, 128
	bnez	$a1, .LBB37_8
# %bb.9:                                # %.lr.ph.i
	ldx.bu	$a0, $fp, $s5
	move	$s8, $zero
	lu12i.w	$a4, 4
	ori	$a1, $a4, 3584
	stx.h	$a0, $s4, $a1
	ld.bu	$a0, $s2, 1
	ori	$a1, $a4, 3588
	lu12i.w	$a5, 2
	ori	$a2, $a5, 1796
	ldx.bu	$a2, $fp, $a2
	stx.h	$a0, $s4, $a1
	ori	$a0, $a4, 3592
	ld.bu	$a1, $s2, 5
	stx.h	$a2, $s4, $a0
	ld.bu	$a0, $s2, 0
	ori	$a2, $a4, 3596
	stx.h	$a1, $s4, $a2
	ld.bu	$a1, $s2, 2
	ori	$a2, $a5, 1800
	ldx.bu	$a2, $fp, $a2
	ld.d	$a6, $sp, 0                     # 8-byte Folded Reload
	st.h	$a0, $a6, 0
	st.h	$a1, $a6, 4
	ori	$a0, $a4, 3600
	stx.h	$a2, $s4, $a0
	ld.bu	$a0, $s2, 9
	ori	$a1, $a4, 3604
	ori	$a2, $a5, 1804
	ldx.bu	$a2, $fp, $a2
	stx.h	$a0, $s4, $a1
	ld.bu	$a0, $s2, 4
	ori	$a1, $a4, 3608
	stx.h	$a2, $s4, $a1
	ld.bu	$a1, $s2, 6
	ld.bu	$a2, $s2, 8
	st.h	$a0, $a6, 8
	ld.bu	$a0, $s2, 10
	st.h	$a1, $a6, 12
	st.h	$a2, $a6, 16
	ld.bu	$a1, $s2, 12
	st.h	$a0, $a6, 20
	ld.bu	$a0, $s2, 13
	ld.bu	$a2, $s2, 14
	st.h	$a1, $a6, 24
	ori	$a1, $a4, 3612
	stx.h	$a0, $s4, $a1
	st.h	$a2, $a6, 28
	lu12i.w	$a0, -3
	ori	$s2, $a0, 2288
	.p2align	4, , 16
.LBB37_10:                              # %_ZL28truncOrZextVecInLoopWithVW16IhtEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	ldx.hu	$a0, $s4, $s8
	ldx.hu	$a1, $s0, $s8
	bne	$a0, $a1, .LBB37_29
# %bb.11:                               # %_ZL28truncOrZextVecInLoopWithVW16IhtEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB37_10 Depth=1
	addi.d	$s2, $s2, 1
	addi.d	$s8, $s8, 2
	bnez	$s2, .LBB37_10
# %bb.12:
	move	$s8, $a3
	ld.w	$s4, $a3, 28
	ld.d	$s2, $a3, 16
.Ltmp827:
	move	$a0, $a3
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp828:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s4, .LBB37_25
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s2, .LBB37_25
# %bb.15:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s1
	addi.d	$a1, $sp, 8
	lu12i.w	$a3, -3
	ori	$a2, $a3, 2288
	ori	$a3, $a3, 2304
	.p2align	4, , 16
.LBB37_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_20 Depth 2
                                        #     Child Loop BB37_23 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a4, $sp, 8
	bgeu	$a4, $a0, .LBB37_19
# %bb.17:                               # %.lr.ph
                                        #   in Loop: Header=BB37_16 Depth=1
	add.d	$a5, $a4, $s3
	bgeu	$fp, $a5, .LBB37_19
# %bb.18:                               #   in Loop: Header=BB37_16 Depth=1
	move	$a6, $zero
	b	.LBB37_22
	.p2align	4, , 16
.LBB37_19:                              # %vector.body93.preheader
                                        #   in Loop: Header=BB37_16 Depth=1
	addi.d	$a5, $a4, 64
	move	$a6, $a3
	.p2align	4, , 16
.LBB37_20:                              # %vector.body93
                                        #   Parent Loop BB37_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a7, $fp, $a6
	vldx	$vr2, $a7, $s5
	vldx	$vr4, $a7, $s1
	vldx	$vr3, $a7, $s6
	vldx	$vr1, $a7, $s7
	vpickve2gr.b	$a7, $vr2, 0
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr0, $a7, 0
	vpickve2gr.b	$a7, $vr2, 1
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr0, $a7, 1
	vpickve2gr.b	$a7, $vr2, 2
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr0, $a7, 2
	vpickve2gr.b	$a7, $vr2, 3
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr0, $a7, 3
	vpickve2gr.b	$a7, $vr2, 4
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr0, $a7, 4
	vpickve2gr.b	$a7, $vr2, 5
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr0, $a7, 5
	vpickve2gr.b	$a7, $vr2, 6
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr0, $a7, 6
	vpickve2gr.b	$a7, $vr2, 7
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr0, $a7, 7
	vpickve2gr.b	$a7, $vr2, 8
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $a7, 0
	xvpermi.q	$xr0, $xr5, 2
	vpickve2gr.b	$a7, $vr2, 9
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $a7, 1
	xvpermi.q	$xr0, $xr5, 2
	vpickve2gr.b	$a7, $vr2, 10
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $a7, 2
	xvpermi.q	$xr0, $xr5, 2
	vpickve2gr.b	$a7, $vr2, 11
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $a7, 3
	xvpermi.q	$xr0, $xr5, 2
	vpickve2gr.b	$a7, $vr2, 12
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $a7, 4
	xvpermi.q	$xr0, $xr5, 2
	vpickve2gr.b	$a7, $vr2, 13
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $a7, 5
	xvpermi.q	$xr0, $xr5, 2
	vpickve2gr.b	$a7, $vr2, 14
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $a7, 6
	xvpermi.q	$xr0, $xr5, 2
	vpickve2gr.b	$a7, $vr2, 15
	andi	$a7, $a7, 255
	xvori.b	$xr2, $xr0, 0
	xvpermi.q	$xr2, $xr0, 1
	vinsgr2vr.h	$vr2, $a7, 7
	xvpermi.q	$xr0, $xr2, 2
	vpickve2gr.b	$a7, $vr4, 0
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr2, $a7, 0
	vpickve2gr.b	$a7, $vr4, 1
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr2, $a7, 1
	vpickve2gr.b	$a7, $vr4, 2
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr2, $a7, 2
	vpickve2gr.b	$a7, $vr4, 3
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr2, $a7, 3
	vpickve2gr.b	$a7, $vr4, 4
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr2, $a7, 4
	vpickve2gr.b	$a7, $vr4, 5
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr2, $a7, 5
	vpickve2gr.b	$a7, $vr4, 6
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr2, $a7, 6
	vpickve2gr.b	$a7, $vr4, 7
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr2, $a7, 7
	vpickve2gr.b	$a7, $vr4, 8
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr2, 0
	xvpermi.q	$xr5, $xr2, 1
	vinsgr2vr.h	$vr5, $a7, 0
	xvpermi.q	$xr2, $xr5, 2
	vpickve2gr.b	$a7, $vr4, 9
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr2, 0
	xvpermi.q	$xr5, $xr2, 1
	vinsgr2vr.h	$vr5, $a7, 1
	xvpermi.q	$xr2, $xr5, 2
	vpickve2gr.b	$a7, $vr4, 10
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr2, 0
	xvpermi.q	$xr5, $xr2, 1
	vinsgr2vr.h	$vr5, $a7, 2
	xvpermi.q	$xr2, $xr5, 2
	vpickve2gr.b	$a7, $vr4, 11
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr2, 0
	xvpermi.q	$xr5, $xr2, 1
	vinsgr2vr.h	$vr5, $a7, 3
	xvpermi.q	$xr2, $xr5, 2
	vpickve2gr.b	$a7, $vr4, 12
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr2, 0
	xvpermi.q	$xr5, $xr2, 1
	vinsgr2vr.h	$vr5, $a7, 4
	xvpermi.q	$xr2, $xr5, 2
	vpickve2gr.b	$a7, $vr4, 13
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr2, 0
	xvpermi.q	$xr5, $xr2, 1
	vinsgr2vr.h	$vr5, $a7, 5
	xvpermi.q	$xr2, $xr5, 2
	vpickve2gr.b	$a7, $vr4, 14
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr2, 0
	xvpermi.q	$xr5, $xr2, 1
	vinsgr2vr.h	$vr5, $a7, 6
	xvpermi.q	$xr2, $xr5, 2
	vpickve2gr.b	$a7, $vr4, 15
	andi	$a7, $a7, 255
	xvori.b	$xr4, $xr2, 0
	xvpermi.q	$xr4, $xr2, 1
	vinsgr2vr.h	$vr4, $a7, 7
	xvpermi.q	$xr2, $xr4, 2
	vpickve2gr.b	$a7, $vr3, 0
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr4, $a7, 0
	vpickve2gr.b	$a7, $vr3, 1
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr4, $a7, 1
	vpickve2gr.b	$a7, $vr3, 2
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr4, $a7, 2
	vpickve2gr.b	$a7, $vr3, 3
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr4, $a7, 3
	vpickve2gr.b	$a7, $vr3, 4
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr4, $a7, 4
	vpickve2gr.b	$a7, $vr3, 5
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr4, $a7, 5
	vpickve2gr.b	$a7, $vr3, 6
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr4, $a7, 6
	vpickve2gr.b	$a7, $vr3, 7
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr4, $a7, 7
	vpickve2gr.b	$a7, $vr3, 8
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr4, 0
	xvpermi.q	$xr5, $xr4, 1
	vinsgr2vr.h	$vr5, $a7, 0
	xvpermi.q	$xr4, $xr5, 2
	vpickve2gr.b	$a7, $vr3, 9
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr4, 0
	xvpermi.q	$xr5, $xr4, 1
	vinsgr2vr.h	$vr5, $a7, 1
	xvpermi.q	$xr4, $xr5, 2
	vpickve2gr.b	$a7, $vr3, 10
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr4, 0
	xvpermi.q	$xr5, $xr4, 1
	vinsgr2vr.h	$vr5, $a7, 2
	xvpermi.q	$xr4, $xr5, 2
	vpickve2gr.b	$a7, $vr3, 11
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr4, 0
	xvpermi.q	$xr5, $xr4, 1
	vinsgr2vr.h	$vr5, $a7, 3
	xvpermi.q	$xr4, $xr5, 2
	vpickve2gr.b	$a7, $vr3, 12
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr4, 0
	xvpermi.q	$xr5, $xr4, 1
	vinsgr2vr.h	$vr5, $a7, 4
	xvpermi.q	$xr4, $xr5, 2
	vpickve2gr.b	$a7, $vr3, 13
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr4, 0
	xvpermi.q	$xr5, $xr4, 1
	vinsgr2vr.h	$vr5, $a7, 5
	xvpermi.q	$xr4, $xr5, 2
	vpickve2gr.b	$a7, $vr3, 14
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr4, 0
	xvpermi.q	$xr5, $xr4, 1
	vinsgr2vr.h	$vr5, $a7, 6
	xvpermi.q	$xr4, $xr5, 2
	vpickve2gr.b	$a7, $vr3, 15
	andi	$a7, $a7, 255
	xvori.b	$xr3, $xr4, 0
	xvpermi.q	$xr3, $xr4, 1
	vinsgr2vr.h	$vr3, $a7, 7
	xvpermi.q	$xr4, $xr3, 2
	vpickve2gr.b	$a7, $vr1, 0
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr3, $a7, 0
	vpickve2gr.b	$a7, $vr1, 1
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr3, $a7, 1
	vpickve2gr.b	$a7, $vr1, 2
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr3, $a7, 2
	vpickve2gr.b	$a7, $vr1, 3
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr3, $a7, 3
	vpickve2gr.b	$a7, $vr1, 4
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr3, $a7, 4
	vpickve2gr.b	$a7, $vr1, 5
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr3, $a7, 5
	vpickve2gr.b	$a7, $vr1, 6
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr3, $a7, 6
	vpickve2gr.b	$a7, $vr1, 7
	andi	$a7, $a7, 255
	vinsgr2vr.h	$vr3, $a7, 7
	vpickve2gr.b	$a7, $vr1, 8
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr3, 0
	xvpermi.q	$xr5, $xr3, 1
	vinsgr2vr.h	$vr5, $a7, 0
	xvpermi.q	$xr3, $xr5, 2
	vpickve2gr.b	$a7, $vr1, 9
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr3, 0
	xvpermi.q	$xr5, $xr3, 1
	vinsgr2vr.h	$vr5, $a7, 1
	xvpermi.q	$xr3, $xr5, 2
	vpickve2gr.b	$a7, $vr1, 10
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr3, 0
	xvpermi.q	$xr5, $xr3, 1
	vinsgr2vr.h	$vr5, $a7, 2
	xvpermi.q	$xr3, $xr5, 2
	vpickve2gr.b	$a7, $vr1, 11
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr3, 0
	xvpermi.q	$xr5, $xr3, 1
	vinsgr2vr.h	$vr5, $a7, 3
	xvpermi.q	$xr3, $xr5, 2
	vpickve2gr.b	$a7, $vr1, 12
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr3, 0
	xvpermi.q	$xr5, $xr3, 1
	vinsgr2vr.h	$vr5, $a7, 4
	xvpermi.q	$xr3, $xr5, 2
	vpickve2gr.b	$a7, $vr1, 13
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr3, 0
	xvpermi.q	$xr5, $xr3, 1
	vinsgr2vr.h	$vr5, $a7, 5
	xvpermi.q	$xr3, $xr5, 2
	vpickve2gr.b	$a7, $vr1, 14
	andi	$a7, $a7, 255
	xvori.b	$xr5, $xr3, 0
	xvpermi.q	$xr5, $xr3, 1
	vinsgr2vr.h	$vr5, $a7, 6
	xvpermi.q	$xr3, $xr5, 2
	vpickve2gr.b	$a7, $vr1, 15
	andi	$a7, $a7, 255
	xvori.b	$xr1, $xr3, 0
	xvpermi.q	$xr1, $xr3, 1
	vinsgr2vr.h	$vr1, $a7, 7
	xvpermi.q	$xr3, $xr1, 2
	xvst	$xr0, $a5, -64
	xvst	$xr2, $a5, -32
	xvst	$xr4, $a5, 0
	xvst	$xr3, $a5, 32
	addi.d	$a6, $a6, 64
	addi.d	$a5, $a5, 128
	bnez	$a6, .LBB37_20
# %bb.21:                               #   in Loop: Header=BB37_16 Depth=1
	move	$a6, $s5
.LBB37_22:                              # %.lr.ph.i23.preheader
                                        #   in Loop: Header=BB37_16 Depth=1
	add.d	$a5, $a6, $a2
	alsl.d	$a4, $a6, $a4, 1
	add.d	$a6, $fp, $a6
	.p2align	4, , 16
.LBB37_23:                              # %.lr.ph.i23
                                        #   Parent Loop BB37_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$a7, $a6, 0
	st.h	$a7, $a4, 0
	addi.d	$a5, $a5, 1
	addi.d	$a4, $a4, 2
	addi.d	$a6, $a6, 1
	bnez	$a5, .LBB37_23
# %bb.24:                               # %_ZL28truncOrZextVecInLoopWithVW16IhtEvPKT_PT0_i.exit27
                                        #   in Loop: Header=BB37_16 Depth=1
	addi.d	$s2, $s2, -1
	bnez	$s2, .LBB37_16
.LBB37_25:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp829:
	move	$a0, $s8
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp830:
# %bb.26:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit35
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 8
	beqz	$a0, .LBB37_28
# %bb.27:                               # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i37
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB37_28:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit41
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB37_29:
.Ltmp812:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp813:
# %bb.30:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	add.d	$a0, $fp, $s2
	ldx.bu	$a1, $a0, $s1
.Ltmp814:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp815:
# %bb.31:
.Ltmp816:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp817:
# %bb.32:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit17
	ldx.hu	$a1, $s4, $s8
.Ltmp818:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp819:
# %bb.33:                               # %_ZNSolsEt.exit
.Ltmp820:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp821:
# %bb.34:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit20
	ldx.hu	$a1, $s0, $s8
.Ltmp822:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp823:
# %bb.35:                               # %_ZNSolsEt.exit22
.Ltmp824:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp825:
# %bb.36:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB37_37:                              # %.thread
.Ltmp808:
	move	$s1, $a0
	b	.LBB37_43
.LBB37_38:
.Ltmp805:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB37_39:
.Ltmp831:
	b	.LBB37_42
.LBB37_40:
.Ltmp826:
	b	.LBB37_42
.LBB37_41:
.Ltmp811:
.LBB37_42:
	move	$s1, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s4, $sp, 8
	beqz	$s4, .LBB37_44
.LBB37_43:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i30
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB37_44:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end37:
	.size	_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint16_t_RN9benchmark5StateE, .Lfunc_end37-_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint16_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table37:
.Lexception37:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end37-.Lcst_begin37
.Lcst_begin37:
	.uleb128 .Lfunc_begin37-.Lfunc_begin37  # >> Call Site 1 <<
	.uleb128 .Ltmp803-.Lfunc_begin37        #   Call between .Lfunc_begin37 and .Ltmp803
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp803-.Lfunc_begin37        # >> Call Site 2 <<
	.uleb128 .Ltmp804-.Ltmp803              #   Call between .Ltmp803 and .Ltmp804
	.uleb128 .Ltmp805-.Lfunc_begin37        #     jumps to .Ltmp805
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp806-.Lfunc_begin37        # >> Call Site 3 <<
	.uleb128 .Ltmp807-.Ltmp806              #   Call between .Ltmp806 and .Ltmp807
	.uleb128 .Ltmp808-.Lfunc_begin37        #     jumps to .Ltmp808
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp809-.Lfunc_begin37        # >> Call Site 4 <<
	.uleb128 .Ltmp810-.Ltmp809              #   Call between .Ltmp809 and .Ltmp810
	.uleb128 .Ltmp811-.Lfunc_begin37        #     jumps to .Ltmp811
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp827-.Lfunc_begin37        # >> Call Site 5 <<
	.uleb128 .Ltmp830-.Ltmp827              #   Call between .Ltmp827 and .Ltmp830
	.uleb128 .Ltmp831-.Lfunc_begin37        #     jumps to .Ltmp831
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp830-.Lfunc_begin37        # >> Call Site 6 <<
	.uleb128 .Ltmp812-.Ltmp830              #   Call between .Ltmp830 and .Ltmp812
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp812-.Lfunc_begin37        # >> Call Site 7 <<
	.uleb128 .Ltmp825-.Ltmp812              #   Call between .Ltmp812 and .Ltmp825
	.uleb128 .Ltmp826-.Lfunc_begin37        #     jumps to .Ltmp826
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp825-.Lfunc_begin37        # >> Call Site 8 <<
	.uleb128 .Lfunc_end37-.Ltmp825          #   Call between .Ltmp825 and .Lfunc_end37
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end37:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint16_t_RN9benchmark5StateE # -- Begin function _Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint16_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint16_t_RN9benchmark5StateE,@function
_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint16_t_RN9benchmark5StateE: # @_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint16_t_RN9benchmark5StateE
.Lfunc_begin38:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception38
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s2, $a0
	lu12i.w	$s7, 2
	ori	$s1, $s7, 1808
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp832:
	lu12i.w	$a0, 4
	ori	$s3, $a0, 3616
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp833:
# %bb.1:
	move	$s4, $a0
	st.d	$a0, $sp, 24
.Ltmp835:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp836:
# %bb.2:
	move	$s0, $a0
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 38
	lu12i.w	$s6, -3
	ori	$s8, $s6, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB38_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp838:
	addi.d	$a0, $sp, 38
	addi.d	$a2, $sp, 38
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp839:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB38_3 Depth=1
	add.d	$a1, $fp, $s8
	addi.d	$s8, $s8, 1
	stx.b	$a0, $a1, $s1
	bnez	$s8, .LBB38_3
# %bb.5:                                # %vector.ph
	addi.d	$a0, $s0, 2
	ori	$a1, $s6, 2288
	ori	$a2, $s7, 1809
	.p2align	4, , 16
.LBB38_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a3, $fp, $a1
	ldx.bu	$a4, $a3, $s1
	ldx.bu	$a3, $a3, $a2
	st.h	$a4, $a0, -2
	st.h	$a3, $a0, 0
	addi.d	$a1, $a1, 2
	addi.d	$a0, $a0, 4
	bnez	$a1, .LBB38_6
# %bb.7:                                # %vector.body82.preheader
	addi.d	$a0, $s4, 16
	ori	$a1, $s6, 2288
	vrepli.b	$vr2, 0
	.p2align	4, , 16
.LBB38_8:                               # %vector.body82
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a1
	ldptr.d	$a3, $a2, 10000
	ldptr.d	$a2, $a2, 10008
	vinsgr2vr.d	$vr0, $a3, 0
	vinsgr2vr.d	$vr1, $a2, 0
	vilvl.b	$vr0, $vr2, $vr0
	vilvl.b	$vr1, $vr2, $vr1
	vst	$vr0, $a0, -16
	vst	$vr1, $a0, 0
	addi.d	$a1, $a1, 16
	addi.d	$a0, $a0, 32
	bnez	$a1, .LBB38_8
# %bb.9:                                # %_ZL20truncOrZextVecInLoopIhtEvPKT_PT0_i.exit.preheader.preheader
	move	$s5, $zero
	ori	$s7, $s6, 2288
	.p2align	4, , 16
.LBB38_10:                              # %_ZL20truncOrZextVecInLoopIhtEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	ldx.hu	$a0, $s4, $s5
	ldx.hu	$a1, $s0, $s5
	bne	$a0, $a1, .LBB38_27
# %bb.11:                               # %_ZL20truncOrZextVecInLoopIhtEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB38_10 Depth=1
	addi.d	$s7, $s7, 1
	addi.d	$s5, $s5, 2
	bnez	$s7, .LBB38_10
# %bb.12:
	vst	$vr2, $sp, 0                    # 16-byte Folded Spill
	ld.w	$s5, $s2, 28
	ld.d	$s4, $s2, 16
.Ltmp856:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp857:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	vld	$vr2, $sp, 0                    # 16-byte Folded Reload
	bnez	$s5, .LBB38_23
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s4, .LBB38_23
# %bb.15:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s1
	addi.d	$a1, $sp, 24
	ori	$a2, $s6, 2288
	b	.LBB38_17
	.p2align	4, , 16
.LBB38_16:                              # %_ZL20truncOrZextVecInLoopIhtEvPKT_PT0_i.exit27
                                        #   in Loop: Header=BB38_17 Depth=1
	addi.d	$s4, $s4, -1
	beqz	$s4, .LBB38_23
.LBB38_17:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_22 Depth 2
                                        #     Child Loop BB38_20 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a3, $sp, 24
	bgeu	$a3, $a0, .LBB38_21
# %bb.18:                               # %.lr.ph
                                        #   in Loop: Header=BB38_17 Depth=1
	add.d	$a4, $a3, $s3
	bgeu	$fp, $a4, .LBB38_21
# %bb.19:                               # %.lr.ph.i23.preheader
                                        #   in Loop: Header=BB38_17 Depth=1
	move	$a4, $a2
	.p2align	4, , 16
.LBB38_20:                              # %.lr.ph.i23
                                        #   Parent Loop BB38_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a5, $fp, $a4
	ldx.bu	$a5, $a5, $s1
	st.h	$a5, $a3, 0
	addi.d	$a4, $a4, 1
	addi.d	$a3, $a3, 2
	bnez	$a4, .LBB38_20
	b	.LBB38_16
	.p2align	4, , 16
.LBB38_21:                              # %vector.body91.preheader
                                        #   in Loop: Header=BB38_17 Depth=1
	addi.d	$a3, $a3, 16
	move	$a4, $a2
	.p2align	4, , 16
.LBB38_22:                              # %vector.body91
                                        #   Parent Loop BB38_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a5, $fp, $a4
	ldptr.d	$a6, $a5, 10000
	ldptr.d	$a5, $a5, 10008
	vinsgr2vr.d	$vr0, $a6, 0
	vinsgr2vr.d	$vr1, $a5, 0
	vilvl.b	$vr0, $vr2, $vr0
	vilvl.b	$vr1, $vr2, $vr1
	vst	$vr0, $a3, -16
	vst	$vr1, $a3, 0
	addi.d	$a4, $a4, 16
	addi.d	$a3, $a3, 32
	bnez	$a4, .LBB38_22
	b	.LBB38_16
.LBB38_23:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp858:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp859:
# %bb.24:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit35
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 24
	beqz	$a0, .LBB38_26
# %bb.25:                               # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i37
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB38_26:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit41
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB38_27:
.Ltmp841:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp842:
# %bb.28:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	add.d	$a0, $fp, $s7
	ldx.bu	$a1, $a0, $s1
.Ltmp843:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp844:
# %bb.29:
.Ltmp845:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp846:
# %bb.30:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit17
	ldx.hu	$a1, $s4, $s5
.Ltmp847:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp848:
# %bb.31:                               # %_ZNSolsEt.exit
.Ltmp849:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp850:
# %bb.32:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit20
	ldx.hu	$a1, $s0, $s5
.Ltmp851:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp852:
# %bb.33:                               # %_ZNSolsEt.exit22
.Ltmp853:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp854:
# %bb.34:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB38_35:                              # %.thread
.Ltmp837:
	move	$s1, $a0
	b	.LBB38_41
.LBB38_36:
.Ltmp834:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB38_37:
.Ltmp860:
	b	.LBB38_40
.LBB38_38:
.Ltmp855:
	b	.LBB38_40
.LBB38_39:
.Ltmp840:
.LBB38_40:
	move	$s1, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s4, $sp, 24
	beqz	$s4, .LBB38_42
.LBB38_41:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i30
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB38_42:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end38:
	.size	_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint16_t_RN9benchmark5StateE, .Lfunc_end38-_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint16_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table38:
.Lexception38:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end38-.Lcst_begin38
.Lcst_begin38:
	.uleb128 .Lfunc_begin38-.Lfunc_begin38  # >> Call Site 1 <<
	.uleb128 .Ltmp832-.Lfunc_begin38        #   Call between .Lfunc_begin38 and .Ltmp832
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp832-.Lfunc_begin38        # >> Call Site 2 <<
	.uleb128 .Ltmp833-.Ltmp832              #   Call between .Ltmp832 and .Ltmp833
	.uleb128 .Ltmp834-.Lfunc_begin38        #     jumps to .Ltmp834
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp835-.Lfunc_begin38        # >> Call Site 3 <<
	.uleb128 .Ltmp836-.Ltmp835              #   Call between .Ltmp835 and .Ltmp836
	.uleb128 .Ltmp837-.Lfunc_begin38        #     jumps to .Ltmp837
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp838-.Lfunc_begin38        # >> Call Site 4 <<
	.uleb128 .Ltmp839-.Ltmp838              #   Call between .Ltmp838 and .Ltmp839
	.uleb128 .Ltmp840-.Lfunc_begin38        #     jumps to .Ltmp840
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp856-.Lfunc_begin38        # >> Call Site 5 <<
	.uleb128 .Ltmp859-.Ltmp856              #   Call between .Ltmp856 and .Ltmp859
	.uleb128 .Ltmp860-.Lfunc_begin38        #     jumps to .Ltmp860
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp859-.Lfunc_begin38        # >> Call Site 6 <<
	.uleb128 .Ltmp841-.Ltmp859              #   Call between .Ltmp859 and .Ltmp841
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp841-.Lfunc_begin38        # >> Call Site 7 <<
	.uleb128 .Ltmp854-.Ltmp841              #   Call between .Ltmp841 and .Ltmp854
	.uleb128 .Ltmp855-.Lfunc_begin38        #     jumps to .Ltmp855
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp854-.Lfunc_begin38        # >> Call Site 8 <<
	.uleb128 .Lfunc_end38-.Ltmp854          #   Call between .Ltmp854 and .Lfunc_end38
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end38:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint16_t_RN9benchmark5StateE # -- Begin function _Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint16_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint16_t_RN9benchmark5StateE,@function
_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint16_t_RN9benchmark5StateE: # @_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint16_t_RN9benchmark5StateE
.Lfunc_begin39:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception39
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$s0, $a0
	lu12i.w	$s5, 2
	ori	$s2, $s5, 1808
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp861:
	lu12i.w	$a0, 4
	ori	$s1, $a0, 3616
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp862:
# %bb.1:
	move	$s3, $a0
	st.d	$a0, $sp, 0
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 10
	lu12i.w	$s6, -3
	ori	$s7, $s6, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB39_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp864:
	addi.d	$a0, $sp, 10
	addi.d	$a2, $sp, 10
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp865:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB39_2 Depth=1
	add.d	$a1, $fp, $s7
	addi.d	$s7, $s7, 1
	stx.b	$a0, $a1, $s2
	bnez	$s7, .LBB39_2
# %bb.4:
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 12
	lu12i.w	$a0, -5
	ori	$s7, $a0, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB39_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp867:
	addi.d	$a0, $sp, 12
	addi.d	$a2, $sp, 12
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp868:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB39_5 Depth=1
	add.d	$a1, $s3, $s7
	addi.d	$s7, $s7, 2
	stx.h	$a0, $a1, $s1
	bnez	$s7, .LBB39_5
# %bb.7:
	ld.w	$s4, $s0, 28
	ld.d	$s3, $s0, 16
.Ltmp870:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp871:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s4, .LBB39_20
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s3, .LBB39_20
# %bb.10:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s2
	addi.d	$a1, $sp, 0
	ori	$a2, $s6, 2288
	ori	$a3, $s6, 2304
	vrepli.b	$vr0, 0
	ori	$a4, $s5, 1792
	.p2align	4, , 16
.LBB39_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_15 Depth 2
                                        #     Child Loop BB39_18 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a5, $sp, 0
	bgeu	$a5, $a0, .LBB39_14
# %bb.12:                               # %.lr.ph
                                        #   in Loop: Header=BB39_11 Depth=1
	add.d	$a6, $a5, $s1
	bgeu	$fp, $a6, .LBB39_14
# %bb.13:                               #   in Loop: Header=BB39_11 Depth=1
	move	$a7, $zero
	b	.LBB39_17
	.p2align	4, , 16
.LBB39_14:                              # %vector.body.preheader
                                        #   in Loop: Header=BB39_11 Depth=1
	addi.d	$a6, $a5, 32
	move	$a7, $a3
	.p2align	4, , 16
.LBB39_15:                              # %vector.body
                                        #   Parent Loop BB39_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$t0, $fp, $a7
	ldptr.d	$t1, $t0, 9984
	ldptr.d	$t2, $t0, 9992
	ldptr.d	$t3, $t0, 10000
	ldptr.d	$t0, $t0, 10008
	vinsgr2vr.d	$vr1, $t1, 0
	vinsgr2vr.d	$vr2, $t2, 0
	vinsgr2vr.d	$vr3, $t3, 0
	vinsgr2vr.d	$vr4, $t0, 0
	vilvl.b	$vr1, $vr0, $vr1
	vilvl.b	$vr2, $vr0, $vr2
	vilvl.b	$vr3, $vr0, $vr3
	vilvl.b	$vr4, $vr0, $vr4
	vld	$vr5, $a6, -32
	vld	$vr6, $a6, -16
	vld	$vr7, $a6, 0
	vld	$vr8, $a6, 16
	vadd.h	$vr1, $vr5, $vr1
	vadd.h	$vr2, $vr6, $vr2
	vadd.h	$vr3, $vr7, $vr3
	vadd.h	$vr4, $vr8, $vr4
	vst	$vr1, $a6, -32
	vst	$vr2, $a6, -16
	vst	$vr3, $a6, 0
	vst	$vr4, $a6, 16
	addi.d	$a7, $a7, 32
	addi.d	$a6, $a6, 64
	bnez	$a7, .LBB39_15
# %bb.16:                               #   in Loop: Header=BB39_11 Depth=1
	move	$a7, $a4
.LBB39_17:                              # %.lr.ph.i.preheader
                                        #   in Loop: Header=BB39_11 Depth=1
	add.d	$a6, $a7, $a2
	alsl.d	$a5, $a7, $a5, 1
	add.d	$a7, $fp, $a7
	.p2align	4, , 16
.LBB39_18:                              # %.lr.ph.i
                                        #   Parent Loop BB39_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$t0, $a7, 0
	ld.h	$t1, $a5, 0
	add.d	$t0, $t1, $t0
	st.h	$t0, $a5, 0
	addi.d	$a6, $a6, 1
	addi.d	$a5, $a5, 2
	addi.d	$a7, $a7, 1
	bnez	$a6, .LBB39_18
# %bb.19:                               # %_ZL34truncOrZextVecWithAddInLoopWithVW8IhtEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB39_11 Depth=1
	addi.d	$s3, $s3, -1
	bnez	$s3, .LBB39_11
.LBB39_20:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp872:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp873:
# %bb.21:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 0
	beqz	$a0, .LBB39_23
# %bb.22:                               # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB39_23:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.LBB39_24:
.Ltmp863:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB39_25:
.Ltmp874:
	ld.d	$s3, $sp, 0
	move	$s0, $a0
	bnez	$s3, .LBB39_29
	b	.LBB39_30
.LBB39_26:                              # %.loopexit
.Ltmp869:
	b	.LBB39_28
.LBB39_27:                              # %.loopexit.split-lp
.Ltmp866:
.LBB39_28:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB39_29:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB39_30:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end39:
	.size	_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint16_t_RN9benchmark5StateE, .Lfunc_end39-_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint16_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table39:
.Lexception39:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end39-.Lcst_begin39
.Lcst_begin39:
	.uleb128 .Lfunc_begin39-.Lfunc_begin39  # >> Call Site 1 <<
	.uleb128 .Ltmp861-.Lfunc_begin39        #   Call between .Lfunc_begin39 and .Ltmp861
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp861-.Lfunc_begin39        # >> Call Site 2 <<
	.uleb128 .Ltmp862-.Ltmp861              #   Call between .Ltmp861 and .Ltmp862
	.uleb128 .Ltmp863-.Lfunc_begin39        #     jumps to .Ltmp863
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp864-.Lfunc_begin39        # >> Call Site 3 <<
	.uleb128 .Ltmp865-.Ltmp864              #   Call between .Ltmp864 and .Ltmp865
	.uleb128 .Ltmp866-.Lfunc_begin39        #     jumps to .Ltmp866
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp867-.Lfunc_begin39        # >> Call Site 4 <<
	.uleb128 .Ltmp868-.Ltmp867              #   Call between .Ltmp867 and .Ltmp868
	.uleb128 .Ltmp869-.Lfunc_begin39        #     jumps to .Ltmp869
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp870-.Lfunc_begin39        # >> Call Site 5 <<
	.uleb128 .Ltmp873-.Ltmp870              #   Call between .Ltmp870 and .Ltmp873
	.uleb128 .Ltmp874-.Lfunc_begin39        #     jumps to .Ltmp874
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp873-.Lfunc_begin39        # >> Call Site 6 <<
	.uleb128 .Lfunc_end39-.Ltmp873          #   Call between .Ltmp873 and .Lfunc_end39
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end39:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint16_t_RN9benchmark5StateE # -- Begin function _Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint16_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint16_t_RN9benchmark5StateE,@function
_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint16_t_RN9benchmark5StateE: # @_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint16_t_RN9benchmark5StateE
.Lfunc_begin40:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception40
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$s0, $a0
	lu12i.w	$s5, 2
	ori	$s1, $s5, 1808
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp875:
	lu12i.w	$a0, 4
	ori	$s2, $a0, 3616
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp876:
# %bb.1:
	move	$s3, $a0
	st.d	$a0, $sp, 0
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 10
	lu12i.w	$s6, -3
	ori	$s7, $s6, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB40_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp878:
	addi.d	$a0, $sp, 10
	addi.d	$a2, $sp, 10
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp879:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB40_2 Depth=1
	add.d	$a1, $fp, $s7
	addi.d	$s7, $s7, 1
	stx.b	$a0, $a1, $s1
	bnez	$s7, .LBB40_2
# %bb.4:
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 12
	lu12i.w	$a0, -5
	ori	$s7, $a0, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB40_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp881:
	addi.d	$a0, $sp, 12
	addi.d	$a2, $sp, 12
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp882:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB40_5 Depth=1
	add.d	$a1, $s3, $s7
	addi.d	$s7, $s7, 2
	stx.h	$a0, $a1, $s2
	bnez	$s7, .LBB40_5
# %bb.7:
	ld.w	$s4, $s0, 28
	ld.d	$s3, $s0, 16
.Ltmp884:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp885:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s4, .LBB40_20
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s3, .LBB40_20
# %bb.10:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s1
	addi.d	$a1, $sp, 0
	ori	$a2, $s6, 2288
	ori	$a3, $s6, 2304
	ori	$a4, $s5, 1792
	ori	$a5, $s5, 1824
	ori	$a6, $s5, 1840
	.p2align	4, , 16
.LBB40_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_15 Depth 2
                                        #     Child Loop BB40_18 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a7, $sp, 0
	bgeu	$a7, $a0, .LBB40_14
# %bb.12:                               # %.lr.ph
                                        #   in Loop: Header=BB40_11 Depth=1
	add.d	$t0, $a7, $s2
	bgeu	$fp, $t0, .LBB40_14
# %bb.13:                               #   in Loop: Header=BB40_11 Depth=1
	move	$t1, $zero
	b	.LBB40_17
	.p2align	4, , 16
.LBB40_14:                              # %vector.body.preheader
                                        #   in Loop: Header=BB40_11 Depth=1
	addi.d	$t0, $a7, 64
	move	$t1, $a3
	.p2align	4, , 16
.LBB40_15:                              # %vector.body
                                        #   Parent Loop BB40_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$t2, $fp, $t1
	vldx	$vr2, $t2, $a4
	vldx	$vr4, $t2, $s1
	vldx	$vr3, $t2, $a5
	vldx	$vr1, $t2, $a6
	vpickve2gr.b	$t2, $vr2, 0
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr0, $t2, 0
	vpickve2gr.b	$t2, $vr2, 1
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr0, $t2, 1
	vpickve2gr.b	$t2, $vr2, 2
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr0, $t2, 2
	vpickve2gr.b	$t2, $vr2, 3
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr0, $t2, 3
	vpickve2gr.b	$t2, $vr2, 4
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr0, $t2, 4
	vpickve2gr.b	$t2, $vr2, 5
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr0, $t2, 5
	vpickve2gr.b	$t2, $vr2, 6
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr0, $t2, 6
	vpickve2gr.b	$t2, $vr2, 7
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr0, $t2, 7
	vpickve2gr.b	$t2, $vr2, 8
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $t2, 0
	xvpermi.q	$xr0, $xr5, 2
	vpickve2gr.b	$t2, $vr2, 9
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $t2, 1
	xvpermi.q	$xr0, $xr5, 2
	vpickve2gr.b	$t2, $vr2, 10
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $t2, 2
	xvpermi.q	$xr0, $xr5, 2
	vpickve2gr.b	$t2, $vr2, 11
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $t2, 3
	xvpermi.q	$xr0, $xr5, 2
	vpickve2gr.b	$t2, $vr2, 12
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $t2, 4
	xvpermi.q	$xr0, $xr5, 2
	vpickve2gr.b	$t2, $vr2, 13
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $t2, 5
	xvpermi.q	$xr0, $xr5, 2
	vpickve2gr.b	$t2, $vr2, 14
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr0, 0
	xvpermi.q	$xr5, $xr0, 1
	vinsgr2vr.h	$vr5, $t2, 6
	xvpermi.q	$xr0, $xr5, 2
	vpickve2gr.b	$t2, $vr2, 15
	andi	$t2, $t2, 255
	xvori.b	$xr2, $xr0, 0
	xvpermi.q	$xr2, $xr0, 1
	vinsgr2vr.h	$vr2, $t2, 7
	xvpermi.q	$xr0, $xr2, 2
	vpickve2gr.b	$t2, $vr4, 0
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr2, $t2, 0
	vpickve2gr.b	$t2, $vr4, 1
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr2, $t2, 1
	vpickve2gr.b	$t2, $vr4, 2
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr2, $t2, 2
	vpickve2gr.b	$t2, $vr4, 3
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr2, $t2, 3
	vpickve2gr.b	$t2, $vr4, 4
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr2, $t2, 4
	vpickve2gr.b	$t2, $vr4, 5
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr2, $t2, 5
	vpickve2gr.b	$t2, $vr4, 6
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr2, $t2, 6
	vpickve2gr.b	$t2, $vr4, 7
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr2, $t2, 7
	vpickve2gr.b	$t2, $vr4, 8
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr2, 0
	xvpermi.q	$xr5, $xr2, 1
	vinsgr2vr.h	$vr5, $t2, 0
	xvpermi.q	$xr2, $xr5, 2
	vpickve2gr.b	$t2, $vr4, 9
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr2, 0
	xvpermi.q	$xr5, $xr2, 1
	vinsgr2vr.h	$vr5, $t2, 1
	xvpermi.q	$xr2, $xr5, 2
	vpickve2gr.b	$t2, $vr4, 10
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr2, 0
	xvpermi.q	$xr5, $xr2, 1
	vinsgr2vr.h	$vr5, $t2, 2
	xvpermi.q	$xr2, $xr5, 2
	vpickve2gr.b	$t2, $vr4, 11
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr2, 0
	xvpermi.q	$xr5, $xr2, 1
	vinsgr2vr.h	$vr5, $t2, 3
	xvpermi.q	$xr2, $xr5, 2
	vpickve2gr.b	$t2, $vr4, 12
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr2, 0
	xvpermi.q	$xr5, $xr2, 1
	vinsgr2vr.h	$vr5, $t2, 4
	xvpermi.q	$xr2, $xr5, 2
	vpickve2gr.b	$t2, $vr4, 13
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr2, 0
	xvpermi.q	$xr5, $xr2, 1
	vinsgr2vr.h	$vr5, $t2, 5
	xvpermi.q	$xr2, $xr5, 2
	vpickve2gr.b	$t2, $vr4, 14
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr2, 0
	xvpermi.q	$xr5, $xr2, 1
	vinsgr2vr.h	$vr5, $t2, 6
	xvpermi.q	$xr2, $xr5, 2
	vpickve2gr.b	$t2, $vr4, 15
	andi	$t2, $t2, 255
	xvori.b	$xr4, $xr2, 0
	xvpermi.q	$xr4, $xr2, 1
	vinsgr2vr.h	$vr4, $t2, 7
	xvpermi.q	$xr2, $xr4, 2
	vpickve2gr.b	$t2, $vr3, 0
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr4, $t2, 0
	vpickve2gr.b	$t2, $vr3, 1
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr4, $t2, 1
	vpickve2gr.b	$t2, $vr3, 2
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr4, $t2, 2
	vpickve2gr.b	$t2, $vr3, 3
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr4, $t2, 3
	vpickve2gr.b	$t2, $vr3, 4
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr4, $t2, 4
	vpickve2gr.b	$t2, $vr3, 5
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr4, $t2, 5
	vpickve2gr.b	$t2, $vr3, 6
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr4, $t2, 6
	vpickve2gr.b	$t2, $vr3, 7
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr4, $t2, 7
	vpickve2gr.b	$t2, $vr3, 8
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr4, 0
	xvpermi.q	$xr5, $xr4, 1
	vinsgr2vr.h	$vr5, $t2, 0
	xvpermi.q	$xr4, $xr5, 2
	vpickve2gr.b	$t2, $vr3, 9
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr4, 0
	xvpermi.q	$xr5, $xr4, 1
	vinsgr2vr.h	$vr5, $t2, 1
	xvpermi.q	$xr4, $xr5, 2
	vpickve2gr.b	$t2, $vr3, 10
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr4, 0
	xvpermi.q	$xr5, $xr4, 1
	vinsgr2vr.h	$vr5, $t2, 2
	xvpermi.q	$xr4, $xr5, 2
	vpickve2gr.b	$t2, $vr3, 11
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr4, 0
	xvpermi.q	$xr5, $xr4, 1
	vinsgr2vr.h	$vr5, $t2, 3
	xvpermi.q	$xr4, $xr5, 2
	vpickve2gr.b	$t2, $vr3, 12
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr4, 0
	xvpermi.q	$xr5, $xr4, 1
	vinsgr2vr.h	$vr5, $t2, 4
	xvpermi.q	$xr4, $xr5, 2
	vpickve2gr.b	$t2, $vr3, 13
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr4, 0
	xvpermi.q	$xr5, $xr4, 1
	vinsgr2vr.h	$vr5, $t2, 5
	xvpermi.q	$xr4, $xr5, 2
	vpickve2gr.b	$t2, $vr3, 14
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr4, 0
	xvpermi.q	$xr5, $xr4, 1
	vinsgr2vr.h	$vr5, $t2, 6
	xvpermi.q	$xr4, $xr5, 2
	vpickve2gr.b	$t2, $vr3, 15
	andi	$t2, $t2, 255
	xvori.b	$xr3, $xr4, 0
	xvpermi.q	$xr3, $xr4, 1
	vinsgr2vr.h	$vr3, $t2, 7
	xvpermi.q	$xr4, $xr3, 2
	vpickve2gr.b	$t2, $vr1, 0
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr3, $t2, 0
	vpickve2gr.b	$t2, $vr1, 1
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr3, $t2, 1
	vpickve2gr.b	$t2, $vr1, 2
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr3, $t2, 2
	vpickve2gr.b	$t2, $vr1, 3
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr3, $t2, 3
	vpickve2gr.b	$t2, $vr1, 4
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr3, $t2, 4
	vpickve2gr.b	$t2, $vr1, 5
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr3, $t2, 5
	vpickve2gr.b	$t2, $vr1, 6
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr3, $t2, 6
	vpickve2gr.b	$t2, $vr1, 7
	andi	$t2, $t2, 255
	vinsgr2vr.h	$vr3, $t2, 7
	vpickve2gr.b	$t2, $vr1, 8
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr3, 0
	xvpermi.q	$xr5, $xr3, 1
	vinsgr2vr.h	$vr5, $t2, 0
	xvpermi.q	$xr3, $xr5, 2
	vpickve2gr.b	$t2, $vr1, 9
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr3, 0
	xvpermi.q	$xr5, $xr3, 1
	vinsgr2vr.h	$vr5, $t2, 1
	xvpermi.q	$xr3, $xr5, 2
	vpickve2gr.b	$t2, $vr1, 10
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr3, 0
	xvpermi.q	$xr5, $xr3, 1
	vinsgr2vr.h	$vr5, $t2, 2
	xvpermi.q	$xr3, $xr5, 2
	vpickve2gr.b	$t2, $vr1, 11
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr3, 0
	xvpermi.q	$xr5, $xr3, 1
	vinsgr2vr.h	$vr5, $t2, 3
	xvpermi.q	$xr3, $xr5, 2
	vpickve2gr.b	$t2, $vr1, 12
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr3, 0
	xvpermi.q	$xr5, $xr3, 1
	vinsgr2vr.h	$vr5, $t2, 4
	xvpermi.q	$xr3, $xr5, 2
	vpickve2gr.b	$t2, $vr1, 13
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr3, 0
	xvpermi.q	$xr5, $xr3, 1
	vinsgr2vr.h	$vr5, $t2, 5
	xvpermi.q	$xr3, $xr5, 2
	vpickve2gr.b	$t2, $vr1, 14
	andi	$t2, $t2, 255
	xvori.b	$xr5, $xr3, 0
	xvpermi.q	$xr5, $xr3, 1
	vinsgr2vr.h	$vr5, $t2, 6
	xvpermi.q	$xr3, $xr5, 2
	vpickve2gr.b	$t2, $vr1, 15
	andi	$t2, $t2, 255
	xvori.b	$xr1, $xr3, 0
	xvpermi.q	$xr1, $xr3, 1
	vinsgr2vr.h	$vr1, $t2, 7
	xvpermi.q	$xr3, $xr1, 2
	xvld	$xr1, $t0, -64
	xvld	$xr5, $t0, -32
	xvld	$xr6, $t0, 0
	xvld	$xr7, $t0, 32
	xvadd.h	$xr0, $xr1, $xr0
	xvadd.h	$xr1, $xr5, $xr2
	xvadd.h	$xr2, $xr6, $xr4
	xvadd.h	$xr3, $xr7, $xr3
	xvst	$xr0, $t0, -64
	xvst	$xr1, $t0, -32
	xvst	$xr2, $t0, 0
	xvst	$xr3, $t0, 32
	addi.d	$t1, $t1, 64
	addi.d	$t0, $t0, 128
	bnez	$t1, .LBB40_15
# %bb.16:                               #   in Loop: Header=BB40_11 Depth=1
	move	$t1, $a4
.LBB40_17:                              # %.lr.ph.i.preheader
                                        #   in Loop: Header=BB40_11 Depth=1
	add.d	$t0, $t1, $a2
	alsl.d	$a7, $t1, $a7, 1
	add.d	$t1, $fp, $t1
	.p2align	4, , 16
.LBB40_18:                              # %.lr.ph.i
                                        #   Parent Loop BB40_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$t2, $t1, 0
	ld.h	$t3, $a7, 0
	add.d	$t2, $t3, $t2
	st.h	$t2, $a7, 0
	addi.d	$t0, $t0, 1
	addi.d	$a7, $a7, 2
	addi.d	$t1, $t1, 1
	bnez	$t0, .LBB40_18
# %bb.19:                               # %_ZL35truncOrZextVecWithAddInLoopWithVW16IhtEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB40_11 Depth=1
	addi.d	$s3, $s3, -1
	bnez	$s3, .LBB40_11
.LBB40_20:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp886:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp887:
# %bb.21:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 0
	beqz	$a0, .LBB40_23
# %bb.22:                               # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB40_23:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.LBB40_24:
.Ltmp877:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB40_25:
.Ltmp888:
	ld.d	$s3, $sp, 0
	move	$s0, $a0
	bnez	$s3, .LBB40_29
	b	.LBB40_30
.LBB40_26:                              # %.loopexit
.Ltmp883:
	b	.LBB40_28
.LBB40_27:                              # %.loopexit.split-lp
.Ltmp880:
.LBB40_28:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB40_29:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB40_30:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end40:
	.size	_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint16_t_RN9benchmark5StateE, .Lfunc_end40-_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint16_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table40:
.Lexception40:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end40-.Lcst_begin40
.Lcst_begin40:
	.uleb128 .Lfunc_begin40-.Lfunc_begin40  # >> Call Site 1 <<
	.uleb128 .Ltmp875-.Lfunc_begin40        #   Call between .Lfunc_begin40 and .Ltmp875
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp875-.Lfunc_begin40        # >> Call Site 2 <<
	.uleb128 .Ltmp876-.Ltmp875              #   Call between .Ltmp875 and .Ltmp876
	.uleb128 .Ltmp877-.Lfunc_begin40        #     jumps to .Ltmp877
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp878-.Lfunc_begin40        # >> Call Site 3 <<
	.uleb128 .Ltmp879-.Ltmp878              #   Call between .Ltmp878 and .Ltmp879
	.uleb128 .Ltmp880-.Lfunc_begin40        #     jumps to .Ltmp880
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp881-.Lfunc_begin40        # >> Call Site 4 <<
	.uleb128 .Ltmp882-.Ltmp881              #   Call between .Ltmp881 and .Ltmp882
	.uleb128 .Ltmp883-.Lfunc_begin40        #     jumps to .Ltmp883
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp884-.Lfunc_begin40        # >> Call Site 5 <<
	.uleb128 .Ltmp887-.Ltmp884              #   Call between .Ltmp884 and .Ltmp887
	.uleb128 .Ltmp888-.Lfunc_begin40        #     jumps to .Ltmp888
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp887-.Lfunc_begin40        # >> Call Site 6 <<
	.uleb128 .Lfunc_end40-.Ltmp887          #   Call between .Ltmp887 and .Lfunc_end40
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end40:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint16_t_RN9benchmark5StateE # -- Begin function _Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint16_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint16_t_RN9benchmark5StateE,@function
_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint16_t_RN9benchmark5StateE: # @_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint16_t_RN9benchmark5StateE
.Lfunc_begin41:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception41
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$s0, $a0
	lu12i.w	$a0, 2
	ori	$s1, $a0, 1808
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp889:
	lu12i.w	$a0, 4
	ori	$s2, $a0, 3616
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp890:
# %bb.1:
	move	$s3, $a0
	st.d	$a0, $sp, 8
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 18
	lu12i.w	$s5, -3
	ori	$s6, $s5, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB41_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp892:
	addi.d	$a0, $sp, 18
	addi.d	$a2, $sp, 18
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp893:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB41_2 Depth=1
	add.d	$a1, $fp, $s6
	addi.d	$s6, $s6, 1
	stx.b	$a0, $a1, $s1
	bnez	$s6, .LBB41_2
# %bb.4:
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 20
	lu12i.w	$a0, -5
	ori	$s6, $a0, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB41_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp895:
	addi.d	$a0, $sp, 20
	addi.d	$a2, $sp, 20
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp896:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB41_5 Depth=1
	add.d	$a1, $s3, $s6
	addi.d	$s6, $s6, 2
	stx.h	$a0, $a1, $s2
	bnez	$s6, .LBB41_5
# %bb.7:
	ld.w	$s4, $s0, 28
	ld.d	$s3, $s0, 16
.Ltmp898:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp899:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s4, .LBB41_18
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s3, .LBB41_18
# %bb.10:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s1
	addi.d	$a1, $sp, 8
	ori	$a2, $s5, 2288
	vrepli.b	$vr0, 0
	b	.LBB41_12
	.p2align	4, , 16
.LBB41_11:                              # %_ZL27truncOrZextVecWithAddInLoopIhtEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB41_12 Depth=1
	addi.d	$s3, $s3, -1
	beqz	$s3, .LBB41_18
.LBB41_12:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_17 Depth 2
                                        #     Child Loop BB41_15 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a3, $sp, 8
	bgeu	$a3, $a0, .LBB41_16
# %bb.13:                               # %.lr.ph
                                        #   in Loop: Header=BB41_12 Depth=1
	add.d	$a4, $a3, $s2
	bgeu	$fp, $a4, .LBB41_16
# %bb.14:                               # %.lr.ph.i.preheader
                                        #   in Loop: Header=BB41_12 Depth=1
	move	$a4, $a2
	.p2align	4, , 16
.LBB41_15:                              # %.lr.ph.i
                                        #   Parent Loop BB41_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a5, $fp, $a4
	ldx.bu	$a5, $a5, $s1
	ld.h	$a6, $a3, 0
	add.d	$a5, $a6, $a5
	st.h	$a5, $a3, 0
	addi.d	$a4, $a4, 1
	addi.d	$a3, $a3, 2
	bnez	$a4, .LBB41_15
	b	.LBB41_11
	.p2align	4, , 16
.LBB41_16:                              # %vector.body.preheader
                                        #   in Loop: Header=BB41_12 Depth=1
	addi.d	$a3, $a3, 16
	move	$a4, $a2
	.p2align	4, , 16
.LBB41_17:                              # %vector.body
                                        #   Parent Loop BB41_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a5, $fp, $a4
	ldptr.d	$a6, $a5, 10000
	ldptr.d	$a5, $a5, 10008
	vinsgr2vr.d	$vr1, $a6, 0
	vinsgr2vr.d	$vr2, $a5, 0
	vld	$vr3, $a3, -16
	vld	$vr4, $a3, 0
	vilvl.b	$vr1, $vr0, $vr1
	vilvl.b	$vr2, $vr0, $vr2
	vadd.h	$vr1, $vr3, $vr1
	vadd.h	$vr2, $vr4, $vr2
	vst	$vr1, $a3, -16
	vst	$vr2, $a3, 0
	addi.d	$a4, $a4, 16
	addi.d	$a3, $a3, 32
	bnez	$a4, .LBB41_17
	b	.LBB41_11
.LBB41_18:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp900:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp901:
# %bb.19:                               # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 8
	beqz	$a0, .LBB41_21
# %bb.20:                               # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB41_21:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.LBB41_22:
.Ltmp891:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB41_23:
.Ltmp902:
	ld.d	$s3, $sp, 8
	move	$s0, $a0
	bnez	$s3, .LBB41_27
	b	.LBB41_28
.LBB41_24:                              # %.loopexit
.Ltmp897:
	b	.LBB41_26
.LBB41_25:                              # %.loopexit.split-lp
.Ltmp894:
.LBB41_26:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB41_27:                              # %_ZNKSt14default_deleteIA_tEclItEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB41_28:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end41:
	.size	_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint16_t_RN9benchmark5StateE, .Lfunc_end41-_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint16_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table41:
.Lexception41:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end41-.Lcst_begin41
.Lcst_begin41:
	.uleb128 .Lfunc_begin41-.Lfunc_begin41  # >> Call Site 1 <<
	.uleb128 .Ltmp889-.Lfunc_begin41        #   Call between .Lfunc_begin41 and .Ltmp889
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp889-.Lfunc_begin41        # >> Call Site 2 <<
	.uleb128 .Ltmp890-.Ltmp889              #   Call between .Ltmp889 and .Ltmp890
	.uleb128 .Ltmp891-.Lfunc_begin41        #     jumps to .Ltmp891
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp892-.Lfunc_begin41        # >> Call Site 3 <<
	.uleb128 .Ltmp893-.Ltmp892              #   Call between .Ltmp892 and .Ltmp893
	.uleb128 .Ltmp894-.Lfunc_begin41        #     jumps to .Ltmp894
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp895-.Lfunc_begin41        # >> Call Site 4 <<
	.uleb128 .Ltmp896-.Ltmp895              #   Call between .Ltmp895 and .Ltmp896
	.uleb128 .Ltmp897-.Lfunc_begin41        #     jumps to .Ltmp897
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp898-.Lfunc_begin41        # >> Call Site 5 <<
	.uleb128 .Ltmp901-.Ltmp898              #   Call between .Ltmp898 and .Ltmp901
	.uleb128 .Ltmp902-.Lfunc_begin41        #     jumps to .Ltmp902
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp901-.Lfunc_begin41        # >> Call Site 6 <<
	.uleb128 .Lfunc_end41-.Ltmp901          #   Call between .Ltmp901 and .Lfunc_end41
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end41:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint32_t_RN9benchmark5StateE # -- Begin function _Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint32_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint32_t_RN9benchmark5StateE,@function
_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint32_t_RN9benchmark5StateE: # @_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint32_t_RN9benchmark5StateE
.Lfunc_begin42:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception42
# %bb.0:
	addi.d	$sp, $sp, -416
	.cfi_def_cfa_offset 416
	st.d	$ra, $sp, 408                   # 8-byte Folded Spill
	st.d	$fp, $sp, 400                   # 8-byte Folded Spill
	st.d	$s0, $sp, 392                   # 8-byte Folded Spill
	st.d	$s1, $sp, 384                   # 8-byte Folded Spill
	st.d	$s2, $sp, 376                   # 8-byte Folded Spill
	st.d	$s3, $sp, 368                   # 8-byte Folded Spill
	st.d	$s4, $sp, 360                   # 8-byte Folded Spill
	st.d	$s5, $sp, 352                   # 8-byte Folded Spill
	st.d	$s6, $sp, 344                   # 8-byte Folded Spill
	st.d	$s7, $sp, 336                   # 8-byte Folded Spill
	st.d	$s8, $sp, 328                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	addi.d	$fp, $sp, 416
	.cfi_def_cfa 22, 0
	bstrins.d	$sp, $zero, 4, 0
	move	$s1, $a0
	lu12i.w	$s6, 2
	ori	$s5, $s6, 1808
	move	$a0, $s5
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$s0, $a0
.Ltmp903:
	lu12i.w	$s2, 9
	ori	$s3, $s2, 3136
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp904:
# %bb.1:                                # %.split
	move	$s4, $a0
	st.d	$s1, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $sp, 312
.Ltmp906:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp907:
# %bb.2:
	move	$s1, $a0
	ori	$a0, $s6, 1793
	add.d	$s7, $s0, $a0
	ori	$a0, $s2, 3072
	add.d	$s2, $s4, $a0
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 326
	lu12i.w	$a0, -3
	ori	$s8, $a0, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s6, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB42_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp909:
	addi.d	$a0, $sp, 326
	addi.d	$a2, $sp, 326
	move	$a1, $s6
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp910:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB42_3 Depth=1
	add.d	$a1, $s0, $s8
	addi.d	$s8, $s8, 1
	stx.b	$a0, $a1, $s5
	bnez	$s8, .LBB42_3
# %bb.5:                                # %vector.ph
	addi.d	$a0, $s1, 4
	lu12i.w	$a1, -3
	ori	$a1, $a1, 2288
	lu12i.w	$a6, 2
	ori	$a2, $a6, 1809
	.p2align	4, , 16
.LBB42_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a3, $s0, $a1
	ldx.bu	$a4, $a3, $s5
	ldx.bu	$a3, $a3, $a2
	st.w	$a4, $a0, -4
	st.w	$a3, $a0, 0
	addi.d	$a1, $a1, 2
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB42_6
# %bb.7:                                # %vector.body82.preheader
	addi.d	$a0, $s4, 64
	lu12i.w	$a1, -3
	ori	$a1, $a1, 2304
	.p2align	4, , 16
.LBB42_8:                               # %vector.body82
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $s0, $a1
	ldptr.d	$a3, $a2, 9984
	ldptr.d	$a4, $a2, 9992
	ldptr.d	$a5, $a2, 10000
	ldptr.d	$a2, $a2, 10008
	vinsgr2vr.d	$vr1, $a3, 0
	vinsgr2vr.d	$vr3, $a4, 0
	vinsgr2vr.d	$vr2, $a5, 0
	vinsgr2vr.d	$vr0, $a2, 0
	st.b	$zero, $sp, 191
	st.h	$zero, $sp, 189
	st.b	$zero, $sp, 187
	st.h	$zero, $sp, 185
	st.b	$zero, $sp, 183
	st.h	$zero, $sp, 181
	st.b	$zero, $sp, 179
	st.h	$zero, $sp, 177
	st.b	$zero, $sp, 175
	st.h	$zero, $sp, 173
	st.b	$zero, $sp, 171
	st.h	$zero, $sp, 169
	st.b	$zero, $sp, 167
	st.h	$zero, $sp, 165
	st.b	$zero, $sp, 163
	st.h	$zero, $sp, 161
	addi.d	$a2, $sp, 188
	xvstelm.b	$xr1, $a2, 0, 7
	addi.d	$a2, $sp, 184
	xvstelm.b	$xr1, $a2, 0, 6
	addi.d	$a2, $sp, 180
	xvstelm.b	$xr1, $a2, 0, 5
	addi.d	$a2, $sp, 176
	xvstelm.b	$xr1, $a2, 0, 4
	addi.d	$a2, $sp, 172
	xvstelm.b	$xr1, $a2, 0, 3
	addi.d	$a2, $sp, 168
	xvstelm.b	$xr1, $a2, 0, 2
	addi.d	$a2, $sp, 164
	xvstelm.b	$xr1, $a2, 0, 1
	addi.d	$a2, $sp, 160
	xvstelm.b	$xr1, $a2, 0, 0
	xvld	$xr1, $sp, 160
	st.b	$zero, $sp, 223
	st.h	$zero, $sp, 221
	st.b	$zero, $sp, 219
	st.h	$zero, $sp, 217
	st.b	$zero, $sp, 215
	st.h	$zero, $sp, 213
	st.b	$zero, $sp, 211
	st.h	$zero, $sp, 209
	st.b	$zero, $sp, 207
	st.h	$zero, $sp, 205
	st.b	$zero, $sp, 203
	st.h	$zero, $sp, 201
	st.b	$zero, $sp, 199
	st.h	$zero, $sp, 197
	st.b	$zero, $sp, 195
	st.h	$zero, $sp, 193
	addi.d	$a2, $sp, 220
	xvstelm.b	$xr3, $a2, 0, 7
	addi.d	$a2, $sp, 216
	xvstelm.b	$xr3, $a2, 0, 6
	addi.d	$a2, $sp, 212
	xvstelm.b	$xr3, $a2, 0, 5
	addi.d	$a2, $sp, 208
	xvstelm.b	$xr3, $a2, 0, 4
	addi.d	$a2, $sp, 204
	xvstelm.b	$xr3, $a2, 0, 3
	addi.d	$a2, $sp, 200
	xvstelm.b	$xr3, $a2, 0, 2
	addi.d	$a2, $sp, 196
	xvstelm.b	$xr3, $a2, 0, 1
	addi.d	$a2, $sp, 192
	xvstelm.b	$xr3, $a2, 0, 0
	xvld	$xr3, $sp, 192
	st.b	$zero, $sp, 255
	st.h	$zero, $sp, 253
	st.b	$zero, $sp, 251
	st.h	$zero, $sp, 249
	st.b	$zero, $sp, 247
	st.h	$zero, $sp, 245
	st.b	$zero, $sp, 243
	st.h	$zero, $sp, 241
	st.b	$zero, $sp, 239
	st.h	$zero, $sp, 237
	st.b	$zero, $sp, 235
	st.h	$zero, $sp, 233
	st.b	$zero, $sp, 231
	st.h	$zero, $sp, 229
	st.b	$zero, $sp, 227
	st.h	$zero, $sp, 225
	addi.d	$a2, $sp, 252
	xvstelm.b	$xr2, $a2, 0, 7
	addi.d	$a2, $sp, 248
	xvstelm.b	$xr2, $a2, 0, 6
	addi.d	$a2, $sp, 244
	xvstelm.b	$xr2, $a2, 0, 5
	addi.d	$a2, $sp, 240
	xvstelm.b	$xr2, $a2, 0, 4
	addi.d	$a2, $sp, 236
	xvstelm.b	$xr2, $a2, 0, 3
	addi.d	$a2, $sp, 232
	xvstelm.b	$xr2, $a2, 0, 2
	addi.d	$a2, $sp, 228
	xvstelm.b	$xr2, $a2, 0, 1
	addi.d	$a2, $sp, 224
	xvstelm.b	$xr2, $a2, 0, 0
	xvld	$xr2, $sp, 224
	st.b	$zero, $sp, 287
	st.h	$zero, $sp, 285
	st.b	$zero, $sp, 283
	st.h	$zero, $sp, 281
	st.b	$zero, $sp, 279
	st.h	$zero, $sp, 277
	st.b	$zero, $sp, 275
	st.h	$zero, $sp, 273
	st.b	$zero, $sp, 271
	st.h	$zero, $sp, 269
	st.b	$zero, $sp, 267
	st.h	$zero, $sp, 265
	st.b	$zero, $sp, 263
	st.h	$zero, $sp, 261
	st.b	$zero, $sp, 259
	st.h	$zero, $sp, 257
	addi.d	$a2, $sp, 284
	xvstelm.b	$xr0, $a2, 0, 7
	addi.d	$a2, $sp, 280
	xvstelm.b	$xr0, $a2, 0, 6
	addi.d	$a2, $sp, 276
	xvstelm.b	$xr0, $a2, 0, 5
	addi.d	$a2, $sp, 272
	xvstelm.b	$xr0, $a2, 0, 4
	addi.d	$a2, $sp, 268
	xvstelm.b	$xr0, $a2, 0, 3
	addi.d	$a2, $sp, 264
	xvstelm.b	$xr0, $a2, 0, 2
	addi.d	$a2, $sp, 260
	xvstelm.b	$xr0, $a2, 0, 1
	addi.d	$a2, $sp, 256
	xvstelm.b	$xr0, $a2, 0, 0
	xvld	$xr0, $sp, 256
	xvst	$xr1, $a0, -64
	xvst	$xr3, $a0, -32
	xvst	$xr2, $a0, 0
	xvst	$xr0, $a0, 32
	addi.d	$a1, $a1, 32
	addi.d	$a0, $a0, 128
	bnez	$a1, .LBB42_8
# %bb.9:                                # %.lr.ph.i
	move	$s8, $zero
	ori	$s6, $a6, 1792
	ldx.bu	$a0, $s0, $s6
	ld.bu	$a1, $s7, 0
	ld.bu	$a2, $s7, 1
	ld.bu	$a3, $s7, 2
	st.w	$a0, $s2, 0
	st.w	$a1, $s2, 4
	st.w	$a2, $s2, 8
	st.w	$a3, $s2, 12
	ori	$a0, $a6, 1796
	ldx.bu	$a0, $s0, $a0
	ld.bu	$a1, $s7, 4
	ld.bu	$a2, $s7, 5
	ld.bu	$a3, $s7, 6
	st.w	$a0, $s2, 16
	st.w	$a1, $s2, 20
	st.w	$a2, $s2, 24
	st.w	$a3, $s2, 28
	ori	$a0, $a6, 1800
	ldx.bu	$a0, $s0, $a0
	ld.bu	$a1, $s7, 8
	ld.bu	$a2, $s7, 9
	ld.bu	$a3, $s7, 10
	st.w	$a0, $s2, 32
	st.w	$a1, $s2, 36
	st.w	$a2, $s2, 40
	st.w	$a3, $s2, 44
	ori	$a0, $a6, 1804
	ldx.bu	$a0, $s0, $a0
	ld.bu	$a1, $s7, 12
	ld.bu	$a2, $s7, 13
	ld.bu	$a3, $s7, 14
	st.w	$a0, $s2, 48
	st.w	$a1, $s2, 52
	st.w	$a2, $s2, 56
	st.w	$a3, $s2, 60
	lu12i.w	$a0, -3
	ori	$s2, $a0, 2288
	.p2align	4, , 16
.LBB42_10:                              # %_ZL27truncOrZextVecInLoopWithVW8IhjEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	ldx.w	$a0, $s4, $s8
	ldx.w	$a1, $s1, $s8
	bne	$a0, $a1, .LBB42_29
# %bb.11:                               # %_ZL27truncOrZextVecInLoopWithVW8IhjEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB42_10 Depth=1
	addi.d	$s2, $s2, 1
	addi.d	$s8, $s8, 4
	bnez	$s2, .LBB42_10
# %bb.12:
	ld.d	$s7, $sp, 24                    # 8-byte Folded Reload
	ld.w	$s4, $s7, 28
	ld.d	$s2, $s7, 16
.Ltmp927:
	move	$a0, $s7
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp928:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s4, .LBB42_25
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s2, .LBB42_25
# %bb.15:                               # %.lr.ph.preheader
	add.d	$a0, $s0, $s5
	addi.d	$a1, $sp, 312
	lu12i.w	$a3, -3
	ori	$a2, $a3, 2288
	ori	$a3, $a3, 2304
	.p2align	4, , 16
.LBB42_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_20 Depth 2
                                        #     Child Loop BB42_23 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a4, $sp, 312
	bgeu	$a4, $a0, .LBB42_19
# %bb.17:                               # %.lr.ph
                                        #   in Loop: Header=BB42_16 Depth=1
	add.d	$a5, $a4, $s3
	bgeu	$s0, $a5, .LBB42_19
# %bb.18:                               #   in Loop: Header=BB42_16 Depth=1
	move	$a6, $zero
	b	.LBB42_22
	.p2align	4, , 16
.LBB42_19:                              # %vector.body93.preheader
                                        #   in Loop: Header=BB42_16 Depth=1
	addi.d	$a5, $a4, 64
	move	$a6, $a3
	.p2align	4, , 16
.LBB42_20:                              # %vector.body93
                                        #   Parent Loop BB42_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a7, $s0, $a6
	ldptr.d	$t0, $a7, 9984
	ldptr.d	$t1, $a7, 9992
	ldptr.d	$t2, $a7, 10000
	ldptr.d	$a7, $a7, 10008
	vinsgr2vr.d	$vr1, $t0, 0
	vinsgr2vr.d	$vr3, $t1, 0
	vinsgr2vr.d	$vr2, $t2, 0
	vinsgr2vr.d	$vr0, $a7, 0
	st.b	$zero, $sp, 63
	st.h	$zero, $sp, 61
	st.b	$zero, $sp, 59
	st.h	$zero, $sp, 57
	st.b	$zero, $sp, 55
	st.h	$zero, $sp, 53
	st.b	$zero, $sp, 51
	st.h	$zero, $sp, 49
	st.b	$zero, $sp, 47
	st.h	$zero, $sp, 45
	st.b	$zero, $sp, 43
	st.h	$zero, $sp, 41
	st.b	$zero, $sp, 39
	st.h	$zero, $sp, 37
	st.b	$zero, $sp, 35
	st.h	$zero, $sp, 33
	xvstelm.b	$xr1, $sp, 60, 7
	xvstelm.b	$xr1, $sp, 56, 6
	xvstelm.b	$xr1, $sp, 52, 5
	xvstelm.b	$xr1, $sp, 48, 4
	xvstelm.b	$xr1, $sp, 44, 3
	xvstelm.b	$xr1, $sp, 40, 2
	xvstelm.b	$xr1, $sp, 36, 1
	xvstelm.b	$xr1, $sp, 32, 0
	xvld	$xr1, $sp, 32
	st.b	$zero, $sp, 95
	st.h	$zero, $sp, 93
	st.b	$zero, $sp, 91
	st.h	$zero, $sp, 89
	st.b	$zero, $sp, 87
	st.h	$zero, $sp, 85
	st.b	$zero, $sp, 83
	st.h	$zero, $sp, 81
	st.b	$zero, $sp, 79
	st.h	$zero, $sp, 77
	st.b	$zero, $sp, 75
	st.h	$zero, $sp, 73
	st.b	$zero, $sp, 71
	st.h	$zero, $sp, 69
	st.b	$zero, $sp, 67
	st.h	$zero, $sp, 65
	xvstelm.b	$xr3, $sp, 92, 7
	xvstelm.b	$xr3, $sp, 88, 6
	xvstelm.b	$xr3, $sp, 84, 5
	xvstelm.b	$xr3, $sp, 80, 4
	xvstelm.b	$xr3, $sp, 76, 3
	xvstelm.b	$xr3, $sp, 72, 2
	xvstelm.b	$xr3, $sp, 68, 1
	xvstelm.b	$xr3, $sp, 64, 0
	xvld	$xr3, $sp, 64
	st.b	$zero, $sp, 127
	st.h	$zero, $sp, 125
	st.b	$zero, $sp, 123
	st.h	$zero, $sp, 121
	st.b	$zero, $sp, 119
	st.h	$zero, $sp, 117
	st.b	$zero, $sp, 115
	st.h	$zero, $sp, 113
	st.b	$zero, $sp, 111
	st.h	$zero, $sp, 109
	st.b	$zero, $sp, 107
	st.h	$zero, $sp, 105
	st.b	$zero, $sp, 103
	st.h	$zero, $sp, 101
	st.b	$zero, $sp, 99
	st.h	$zero, $sp, 97
	xvstelm.b	$xr2, $sp, 124, 7
	xvstelm.b	$xr2, $sp, 120, 6
	xvstelm.b	$xr2, $sp, 116, 5
	xvstelm.b	$xr2, $sp, 112, 4
	xvstelm.b	$xr2, $sp, 108, 3
	xvstelm.b	$xr2, $sp, 104, 2
	xvstelm.b	$xr2, $sp, 100, 1
	xvstelm.b	$xr2, $sp, 96, 0
	xvld	$xr2, $sp, 96
	st.b	$zero, $sp, 159
	st.h	$zero, $sp, 157
	st.b	$zero, $sp, 155
	st.h	$zero, $sp, 153
	st.b	$zero, $sp, 151
	st.h	$zero, $sp, 149
	st.b	$zero, $sp, 147
	st.h	$zero, $sp, 145
	st.b	$zero, $sp, 143
	st.h	$zero, $sp, 141
	st.b	$zero, $sp, 139
	st.h	$zero, $sp, 137
	st.b	$zero, $sp, 135
	st.h	$zero, $sp, 133
	st.b	$zero, $sp, 131
	st.h	$zero, $sp, 129
	addi.d	$a7, $sp, 156
	xvstelm.b	$xr0, $a7, 0, 7
	addi.d	$a7, $sp, 152
	xvstelm.b	$xr0, $a7, 0, 6
	addi.d	$a7, $sp, 148
	xvstelm.b	$xr0, $a7, 0, 5
	addi.d	$a7, $sp, 144
	xvstelm.b	$xr0, $a7, 0, 4
	addi.d	$a7, $sp, 140
	xvstelm.b	$xr0, $a7, 0, 3
	addi.d	$a7, $sp, 136
	xvstelm.b	$xr0, $a7, 0, 2
	addi.d	$a7, $sp, 132
	xvstelm.b	$xr0, $a7, 0, 1
	addi.d	$a7, $sp, 128
	xvstelm.b	$xr0, $a7, 0, 0
	xvld	$xr0, $sp, 128
	xvst	$xr1, $a5, -64
	xvst	$xr3, $a5, -32
	xvst	$xr2, $a5, 0
	xvst	$xr0, $a5, 32
	addi.d	$a6, $a6, 32
	addi.d	$a5, $a5, 128
	bnez	$a6, .LBB42_20
# %bb.21:                               #   in Loop: Header=BB42_16 Depth=1
	move	$a6, $s6
.LBB42_22:                              # %.lr.ph.i23.preheader
                                        #   in Loop: Header=BB42_16 Depth=1
	add.d	$a5, $a6, $a2
	alsl.d	$a4, $a6, $a4, 2
	add.d	$a6, $s0, $a6
	.p2align	4, , 16
.LBB42_23:                              # %.lr.ph.i23
                                        #   Parent Loop BB42_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$a7, $a6, 0
	st.w	$a7, $a4, 0
	addi.d	$a5, $a5, 1
	addi.d	$a4, $a4, 4
	addi.d	$a6, $a6, 1
	bnez	$a5, .LBB42_23
# %bb.24:                               # %_ZL27truncOrZextVecInLoopWithVW8IhjEvPKT_PT0_i.exit27
                                        #   in Loop: Header=BB42_16 Depth=1
	addi.d	$s2, $s2, -1
	bnez	$s2, .LBB42_16
.LBB42_25:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp929:
	move	$a0, $s7
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp930:
# %bb.26:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit35
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 312
	beqz	$a0, .LBB42_28
# %bb.27:                               # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i37
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB42_28:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit41
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	addi.d	$sp, $fp, -416
	ld.d	$s8, $sp, 328                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 336                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 344                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 352                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 360                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 368                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 376                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 384                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 392                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 400                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 408                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 416
	ret
.LBB42_29:
.Ltmp912:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp913:
# %bb.30:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	add.d	$a0, $s0, $s2
	ldx.bu	$a1, $a0, $s5
.Ltmp914:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp915:
# %bb.31:
.Ltmp916:
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp917:
# %bb.32:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit17
	ldx.wu	$a1, $s4, $s8
.Ltmp918:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp919:
# %bb.33:                               # %_ZNSolsEj.exit
.Ltmp920:
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp921:
# %bb.34:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit20
	ldx.wu	$a1, $s1, $s8
.Ltmp922:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp923:
# %bb.35:                               # %_ZNSolsEj.exit22
.Ltmp924:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp925:
# %bb.36:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB42_37:                              # %.thread
.Ltmp908:
	move	$s2, $a0
	b	.LBB42_43
.LBB42_38:
.Ltmp905:
	move	$s2, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB42_39:
.Ltmp931:
	b	.LBB42_42
.LBB42_40:
.Ltmp926:
	b	.LBB42_42
.LBB42_41:
.Ltmp911:
.LBB42_42:
	move	$s2, $a0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s4, $sp, 312
	beqz	$s4, .LBB42_44
.LBB42_43:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i30
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB42_44:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end42:
	.size	_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint32_t_RN9benchmark5StateE, .Lfunc_end42-_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint32_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table42:
.Lexception42:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end42-.Lcst_begin42
.Lcst_begin42:
	.uleb128 .Lfunc_begin42-.Lfunc_begin42  # >> Call Site 1 <<
	.uleb128 .Ltmp903-.Lfunc_begin42        #   Call between .Lfunc_begin42 and .Ltmp903
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp903-.Lfunc_begin42        # >> Call Site 2 <<
	.uleb128 .Ltmp904-.Ltmp903              #   Call between .Ltmp903 and .Ltmp904
	.uleb128 .Ltmp905-.Lfunc_begin42        #     jumps to .Ltmp905
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp906-.Lfunc_begin42        # >> Call Site 3 <<
	.uleb128 .Ltmp907-.Ltmp906              #   Call between .Ltmp906 and .Ltmp907
	.uleb128 .Ltmp908-.Lfunc_begin42        #     jumps to .Ltmp908
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp909-.Lfunc_begin42        # >> Call Site 4 <<
	.uleb128 .Ltmp910-.Ltmp909              #   Call between .Ltmp909 and .Ltmp910
	.uleb128 .Ltmp911-.Lfunc_begin42        #     jumps to .Ltmp911
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp927-.Lfunc_begin42        # >> Call Site 5 <<
	.uleb128 .Ltmp930-.Ltmp927              #   Call between .Ltmp927 and .Ltmp930
	.uleb128 .Ltmp931-.Lfunc_begin42        #     jumps to .Ltmp931
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp930-.Lfunc_begin42        # >> Call Site 6 <<
	.uleb128 .Ltmp912-.Ltmp930              #   Call between .Ltmp930 and .Ltmp912
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp912-.Lfunc_begin42        # >> Call Site 7 <<
	.uleb128 .Ltmp925-.Ltmp912              #   Call between .Ltmp912 and .Ltmp925
	.uleb128 .Ltmp926-.Lfunc_begin42        #     jumps to .Ltmp926
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp925-.Lfunc_begin42        # >> Call Site 8 <<
	.uleb128 .Lfunc_end42-.Ltmp925          #   Call between .Ltmp925 and .Lfunc_end42
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end42:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint32_t_RN9benchmark5StateE # -- Begin function _Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint32_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint32_t_RN9benchmark5StateE,@function
_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint32_t_RN9benchmark5StateE: # @_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint32_t_RN9benchmark5StateE
.Lfunc_begin43:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception43
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s0, $a0
	lu12i.w	$s7, 2
	ori	$s1, $s7, 1808
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp932:
	lu12i.w	$s2, 9
	ori	$s3, $s2, 3136
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp933:
# %bb.1:                                # %.split
	move	$s4, $a0
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $sp, 24
.Ltmp935:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp936:
# %bb.2:
	move	$s0, $a0
	ori	$a0, $s7, 1793
	add.d	$a0, $fp, $a0
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	ori	$a0, $s2, 3072
	add.d	$s8, $s4, $a0
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 38
	lu12i.w	$s6, -3
	ori	$s2, $s6, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB43_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp938:
	addi.d	$a0, $sp, 38
	addi.d	$a2, $sp, 38
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp939:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB43_3 Depth=1
	add.d	$a1, $fp, $s2
	addi.d	$s2, $s2, 1
	stx.b	$a0, $a1, $s1
	bnez	$s2, .LBB43_3
# %bb.5:                                # %vector.ph
	addi.d	$a0, $s0, 4
	ori	$a1, $s6, 2288
	ori	$a2, $s7, 1809
	.p2align	4, , 16
.LBB43_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a3, $fp, $a1
	ldx.bu	$a4, $a3, $s1
	ldx.bu	$a3, $a3, $a2
	st.w	$a4, $a0, -4
	st.w	$a3, $a0, 0
	addi.d	$a1, $a1, 2
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB43_6
# %bb.7:                                # %vector.body82.preheader
	addi.d	$a0, $s4, 128
	ori	$a1, $s6, 2304
	ori	$s5, $s7, 1792
	ori	$s6, $s7, 1824
	move	$a4, $s7
	ori	$s7, $s7, 1840
	.p2align	4, , 16
.LBB43_8:                               # %vector.body82
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a1
	vldx	$vr3, $a2, $s5
	vldx	$vr6, $a2, $s1
	vldx	$vr4, $a2, $s6
	vldx	$vr1, $a2, $s7
	vpickve2gr.b	$a2, $vr3, 0
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr0, $a2, 0
	vpickve2gr.b	$a2, $vr3, 1
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr0, $a2, 1
	vpickve2gr.b	$a2, $vr3, 2
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr0, $a2, 2
	vpickve2gr.b	$a2, $vr3, 3
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr0, $a2, 3
	vpickve2gr.b	$a2, $vr3, 4
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr0, $a2, 4
	vpickve2gr.b	$a2, $vr3, 5
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr0, $a2, 5
	vpickve2gr.b	$a2, $vr3, 6
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr0, $a2, 6
	vpickve2gr.b	$a2, $vr3, 7
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr0, $a2, 7
	vpickve2gr.b	$a2, $vr3, 8
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr2, $a2, 0
	vpickve2gr.b	$a2, $vr3, 9
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr2, $a2, 1
	vpickve2gr.b	$a2, $vr3, 10
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr2, $a2, 2
	vpickve2gr.b	$a2, $vr3, 11
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr2, $a2, 3
	vpickve2gr.b	$a2, $vr3, 12
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr2, $a2, 4
	vpickve2gr.b	$a2, $vr3, 13
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr2, $a2, 5
	vpickve2gr.b	$a2, $vr3, 14
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr2, $a2, 6
	vpickve2gr.b	$a2, $vr3, 15
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr2, $a2, 7
	vpickve2gr.b	$a2, $vr6, 0
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr3, $a2, 0
	vpickve2gr.b	$a2, $vr6, 1
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr3, $a2, 1
	vpickve2gr.b	$a2, $vr6, 2
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr3, $a2, 2
	vpickve2gr.b	$a2, $vr6, 3
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr3, $a2, 3
	vpickve2gr.b	$a2, $vr6, 4
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr3, $a2, 4
	vpickve2gr.b	$a2, $vr6, 5
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr3, $a2, 5
	vpickve2gr.b	$a2, $vr6, 6
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr3, $a2, 6
	vpickve2gr.b	$a2, $vr6, 7
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr3, $a2, 7
	vpickve2gr.b	$a2, $vr6, 8
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr5, $a2, 0
	vpickve2gr.b	$a2, $vr6, 9
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr5, $a2, 1
	vpickve2gr.b	$a2, $vr6, 10
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr5, $a2, 2
	vpickve2gr.b	$a2, $vr6, 11
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr5, $a2, 3
	vpickve2gr.b	$a2, $vr6, 12
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr5, $a2, 4
	vpickve2gr.b	$a2, $vr6, 13
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr5, $a2, 5
	vpickve2gr.b	$a2, $vr6, 14
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr5, $a2, 6
	vpickve2gr.b	$a2, $vr6, 15
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr5, $a2, 7
	vpickve2gr.b	$a2, $vr4, 0
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr6, $a2, 0
	vpickve2gr.b	$a2, $vr4, 1
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr6, $a2, 1
	vpickve2gr.b	$a2, $vr4, 2
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr6, $a2, 2
	vpickve2gr.b	$a2, $vr4, 3
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr6, $a2, 3
	vpickve2gr.b	$a2, $vr4, 4
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr6, $a2, 4
	vpickve2gr.b	$a2, $vr4, 5
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr6, $a2, 5
	vpickve2gr.b	$a2, $vr4, 6
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr6, $a2, 6
	vpickve2gr.b	$a2, $vr4, 7
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr6, $a2, 7
	vpickve2gr.b	$a2, $vr4, 8
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr7, $a2, 0
	vpickve2gr.b	$a2, $vr4, 9
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr7, $a2, 1
	vpickve2gr.b	$a2, $vr4, 10
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr7, $a2, 2
	vpickve2gr.b	$a2, $vr4, 11
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr7, $a2, 3
	vpickve2gr.b	$a2, $vr4, 12
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr7, $a2, 4
	vpickve2gr.b	$a2, $vr4, 13
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr7, $a2, 5
	vpickve2gr.b	$a2, $vr4, 14
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr7, $a2, 6
	vpickve2gr.b	$a2, $vr4, 15
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr7, $a2, 7
	vpickve2gr.b	$a2, $vr1, 0
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr4, $a2, 0
	vpickve2gr.b	$a2, $vr1, 1
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr4, $a2, 1
	vpickve2gr.b	$a2, $vr1, 2
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr4, $a2, 2
	vpickve2gr.b	$a2, $vr1, 3
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr4, $a2, 3
	vpickve2gr.b	$a2, $vr1, 4
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr4, $a2, 4
	vpickve2gr.b	$a2, $vr1, 5
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr4, $a2, 5
	vpickve2gr.b	$a2, $vr1, 6
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr4, $a2, 6
	vpickve2gr.b	$a2, $vr1, 7
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr4, $a2, 7
	vpickve2gr.b	$a2, $vr1, 8
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr8, $a2, 0
	vpickve2gr.b	$a2, $vr1, 9
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr8, $a2, 1
	vpickve2gr.b	$a2, $vr1, 10
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr8, $a2, 2
	vpickve2gr.b	$a2, $vr1, 11
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr8, $a2, 3
	vpickve2gr.b	$a2, $vr1, 12
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr8, $a2, 4
	vpickve2gr.b	$a2, $vr1, 13
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr8, $a2, 5
	vpickve2gr.b	$a2, $vr1, 14
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr8, $a2, 6
	vpickve2gr.b	$a2, $vr1, 15
	andi	$a2, $a2, 255
	xvinsgr2vr.w	$xr8, $a2, 7
	xvst	$xr2, $a0, -96
	xvst	$xr0, $a0, -128
	xvst	$xr5, $a0, -32
	xvst	$xr3, $a0, -64
	xvst	$xr7, $a0, 32
	xvst	$xr6, $a0, 0
	xvst	$xr8, $a0, 96
	xvst	$xr4, $a0, 64
	addi.d	$a1, $a1, 64
	addi.d	$a0, $a0, 256
	bnez	$a1, .LBB43_8
# %bb.9:                                # %.lr.ph.i
	move	$s2, $zero
	ldx.bu	$a0, $fp, $s5
	ld.d	$a5, $sp, 16                    # 8-byte Folded Reload
	ld.bu	$a1, $a5, 0
	ld.bu	$a2, $a5, 1
	ld.bu	$a3, $a5, 2
	st.w	$a0, $s8, 0
	st.w	$a1, $s8, 4
	st.w	$a2, $s8, 8
	st.w	$a3, $s8, 12
	ori	$a0, $a4, 1796
	ldx.bu	$a0, $fp, $a0
	ld.bu	$a1, $a5, 4
	ld.bu	$a2, $a5, 5
	ld.bu	$a3, $a5, 6
	st.w	$a0, $s8, 16
	st.w	$a1, $s8, 20
	st.w	$a2, $s8, 24
	st.w	$a3, $s8, 28
	ori	$a0, $a4, 1800
	ldx.bu	$a0, $fp, $a0
	ld.bu	$a1, $a5, 8
	ld.bu	$a2, $a5, 9
	ld.bu	$a3, $a5, 10
	st.w	$a0, $s8, 32
	st.w	$a1, $s8, 36
	st.w	$a2, $s8, 40
	st.w	$a3, $s8, 44
	ori	$a0, $a4, 1804
	ldx.bu	$a0, $fp, $a0
	ld.bu	$a1, $a5, 12
	ld.bu	$a2, $a5, 13
	ld.bu	$a3, $a5, 14
	st.w	$a0, $s8, 48
	st.w	$a1, $s8, 52
	st.w	$a2, $s8, 56
	st.w	$a3, $s8, 60
	lu12i.w	$a0, -3
	ori	$s8, $a0, 2288
	.p2align	4, , 16
.LBB43_10:                              # %_ZL28truncOrZextVecInLoopWithVW16IhjEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	ldx.w	$a0, $s4, $s2
	ldx.w	$a1, $s0, $s2
	bne	$a0, $a1, .LBB43_29
# %bb.11:                               # %_ZL28truncOrZextVecInLoopWithVW16IhjEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB43_10 Depth=1
	addi.d	$s8, $s8, 1
	addi.d	$s2, $s2, 4
	bnez	$s8, .LBB43_10
# %bb.12:
	ld.d	$s8, $sp, 8                     # 8-byte Folded Reload
	ld.w	$s4, $s8, 28
	ld.d	$s2, $s8, 16
.Ltmp956:
	move	$a0, $s8
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp957:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s4, .LBB43_25
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s2, .LBB43_25
# %bb.15:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s1
	addi.d	$a1, $sp, 24
	lu12i.w	$a3, -3
	ori	$a2, $a3, 2288
	ori	$a3, $a3, 2304
	.p2align	4, , 16
.LBB43_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_20 Depth 2
                                        #     Child Loop BB43_23 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a4, $sp, 24
	bgeu	$a4, $a0, .LBB43_19
# %bb.17:                               # %.lr.ph
                                        #   in Loop: Header=BB43_16 Depth=1
	add.d	$a5, $a4, $s3
	bgeu	$fp, $a5, .LBB43_19
# %bb.18:                               #   in Loop: Header=BB43_16 Depth=1
	move	$a6, $zero
	b	.LBB43_22
	.p2align	4, , 16
.LBB43_19:                              # %vector.body93.preheader
                                        #   in Loop: Header=BB43_16 Depth=1
	addi.d	$a5, $a4, 128
	move	$a6, $a3
	.p2align	4, , 16
.LBB43_20:                              # %vector.body93
                                        #   Parent Loop BB43_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a7, $fp, $a6
	vldx	$vr3, $a7, $s5
	vldx	$vr6, $a7, $s1
	vldx	$vr4, $a7, $s6
	vldx	$vr1, $a7, $s7
	vpickve2gr.b	$a7, $vr3, 0
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr0, $a7, 0
	vpickve2gr.b	$a7, $vr3, 1
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr0, $a7, 1
	vpickve2gr.b	$a7, $vr3, 2
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr0, $a7, 2
	vpickve2gr.b	$a7, $vr3, 3
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr0, $a7, 3
	vpickve2gr.b	$a7, $vr3, 4
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr0, $a7, 4
	vpickve2gr.b	$a7, $vr3, 5
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr0, $a7, 5
	vpickve2gr.b	$a7, $vr3, 6
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr0, $a7, 6
	vpickve2gr.b	$a7, $vr3, 7
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr0, $a7, 7
	vpickve2gr.b	$a7, $vr3, 8
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr2, $a7, 0
	vpickve2gr.b	$a7, $vr3, 9
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr2, $a7, 1
	vpickve2gr.b	$a7, $vr3, 10
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr2, $a7, 2
	vpickve2gr.b	$a7, $vr3, 11
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr2, $a7, 3
	vpickve2gr.b	$a7, $vr3, 12
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr2, $a7, 4
	vpickve2gr.b	$a7, $vr3, 13
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr2, $a7, 5
	vpickve2gr.b	$a7, $vr3, 14
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr2, $a7, 6
	vpickve2gr.b	$a7, $vr3, 15
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr2, $a7, 7
	vpickve2gr.b	$a7, $vr6, 0
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr3, $a7, 0
	vpickve2gr.b	$a7, $vr6, 1
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr3, $a7, 1
	vpickve2gr.b	$a7, $vr6, 2
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr3, $a7, 2
	vpickve2gr.b	$a7, $vr6, 3
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr3, $a7, 3
	vpickve2gr.b	$a7, $vr6, 4
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr3, $a7, 4
	vpickve2gr.b	$a7, $vr6, 5
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr3, $a7, 5
	vpickve2gr.b	$a7, $vr6, 6
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr3, $a7, 6
	vpickve2gr.b	$a7, $vr6, 7
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr3, $a7, 7
	vpickve2gr.b	$a7, $vr6, 8
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr5, $a7, 0
	vpickve2gr.b	$a7, $vr6, 9
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr5, $a7, 1
	vpickve2gr.b	$a7, $vr6, 10
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr5, $a7, 2
	vpickve2gr.b	$a7, $vr6, 11
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr5, $a7, 3
	vpickve2gr.b	$a7, $vr6, 12
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr5, $a7, 4
	vpickve2gr.b	$a7, $vr6, 13
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr5, $a7, 5
	vpickve2gr.b	$a7, $vr6, 14
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr5, $a7, 6
	vpickve2gr.b	$a7, $vr6, 15
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr5, $a7, 7
	vpickve2gr.b	$a7, $vr4, 0
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr6, $a7, 0
	vpickve2gr.b	$a7, $vr4, 1
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr6, $a7, 1
	vpickve2gr.b	$a7, $vr4, 2
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr6, $a7, 2
	vpickve2gr.b	$a7, $vr4, 3
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr6, $a7, 3
	vpickve2gr.b	$a7, $vr4, 4
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr6, $a7, 4
	vpickve2gr.b	$a7, $vr4, 5
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr6, $a7, 5
	vpickve2gr.b	$a7, $vr4, 6
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr6, $a7, 6
	vpickve2gr.b	$a7, $vr4, 7
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr6, $a7, 7
	vpickve2gr.b	$a7, $vr4, 8
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr7, $a7, 0
	vpickve2gr.b	$a7, $vr4, 9
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr7, $a7, 1
	vpickve2gr.b	$a7, $vr4, 10
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr7, $a7, 2
	vpickve2gr.b	$a7, $vr4, 11
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr7, $a7, 3
	vpickve2gr.b	$a7, $vr4, 12
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr7, $a7, 4
	vpickve2gr.b	$a7, $vr4, 13
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr7, $a7, 5
	vpickve2gr.b	$a7, $vr4, 14
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr7, $a7, 6
	vpickve2gr.b	$a7, $vr4, 15
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr7, $a7, 7
	vpickve2gr.b	$a7, $vr1, 0
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr4, $a7, 0
	vpickve2gr.b	$a7, $vr1, 1
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr4, $a7, 1
	vpickve2gr.b	$a7, $vr1, 2
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr4, $a7, 2
	vpickve2gr.b	$a7, $vr1, 3
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr4, $a7, 3
	vpickve2gr.b	$a7, $vr1, 4
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr4, $a7, 4
	vpickve2gr.b	$a7, $vr1, 5
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr4, $a7, 5
	vpickve2gr.b	$a7, $vr1, 6
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr4, $a7, 6
	vpickve2gr.b	$a7, $vr1, 7
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr4, $a7, 7
	vpickve2gr.b	$a7, $vr1, 8
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr8, $a7, 0
	vpickve2gr.b	$a7, $vr1, 9
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr8, $a7, 1
	vpickve2gr.b	$a7, $vr1, 10
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr8, $a7, 2
	vpickve2gr.b	$a7, $vr1, 11
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr8, $a7, 3
	vpickve2gr.b	$a7, $vr1, 12
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr8, $a7, 4
	vpickve2gr.b	$a7, $vr1, 13
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr8, $a7, 5
	vpickve2gr.b	$a7, $vr1, 14
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr8, $a7, 6
	vpickve2gr.b	$a7, $vr1, 15
	andi	$a7, $a7, 255
	xvinsgr2vr.w	$xr8, $a7, 7
	xvst	$xr2, $a5, -96
	xvst	$xr0, $a5, -128
	xvst	$xr5, $a5, -32
	xvst	$xr3, $a5, -64
	xvst	$xr7, $a5, 32
	xvst	$xr6, $a5, 0
	xvst	$xr8, $a5, 96
	xvst	$xr4, $a5, 64
	addi.d	$a6, $a6, 64
	addi.d	$a5, $a5, 256
	bnez	$a6, .LBB43_20
# %bb.21:                               #   in Loop: Header=BB43_16 Depth=1
	move	$a6, $s5
.LBB43_22:                              # %.lr.ph.i23.preheader
                                        #   in Loop: Header=BB43_16 Depth=1
	add.d	$a5, $a6, $a2
	alsl.d	$a4, $a6, $a4, 2
	add.d	$a6, $fp, $a6
	.p2align	4, , 16
.LBB43_23:                              # %.lr.ph.i23
                                        #   Parent Loop BB43_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$a7, $a6, 0
	st.w	$a7, $a4, 0
	addi.d	$a5, $a5, 1
	addi.d	$a4, $a4, 4
	addi.d	$a6, $a6, 1
	bnez	$a5, .LBB43_23
# %bb.24:                               # %_ZL28truncOrZextVecInLoopWithVW16IhjEvPKT_PT0_i.exit27
                                        #   in Loop: Header=BB43_16 Depth=1
	addi.d	$s2, $s2, -1
	bnez	$s2, .LBB43_16
.LBB43_25:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp958:
	move	$a0, $s8
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp959:
# %bb.26:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit35
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 24
	beqz	$a0, .LBB43_28
# %bb.27:                               # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i37
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB43_28:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit41
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB43_29:
.Ltmp941:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp942:
# %bb.30:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	add.d	$a0, $fp, $s8
	ldx.bu	$a1, $a0, $s1
.Ltmp943:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp944:
# %bb.31:
.Ltmp945:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp946:
# %bb.32:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit17
	ldx.wu	$a1, $s4, $s2
.Ltmp947:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp948:
# %bb.33:                               # %_ZNSolsEj.exit
.Ltmp949:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp950:
# %bb.34:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit20
	ldx.wu	$a1, $s0, $s2
.Ltmp951:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp952:
# %bb.35:                               # %_ZNSolsEj.exit22
.Ltmp953:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp954:
# %bb.36:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB43_37:                              # %.thread
.Ltmp937:
	move	$s1, $a0
	b	.LBB43_43
.LBB43_38:
.Ltmp934:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB43_39:
.Ltmp960:
	b	.LBB43_42
.LBB43_40:
.Ltmp955:
	b	.LBB43_42
.LBB43_41:
.Ltmp940:
.LBB43_42:
	move	$s1, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s4, $sp, 24
	beqz	$s4, .LBB43_44
.LBB43_43:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i30
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB43_44:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end43:
	.size	_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint32_t_RN9benchmark5StateE, .Lfunc_end43-_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint32_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table43:
.Lexception43:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end43-.Lcst_begin43
.Lcst_begin43:
	.uleb128 .Lfunc_begin43-.Lfunc_begin43  # >> Call Site 1 <<
	.uleb128 .Ltmp932-.Lfunc_begin43        #   Call between .Lfunc_begin43 and .Ltmp932
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp932-.Lfunc_begin43        # >> Call Site 2 <<
	.uleb128 .Ltmp933-.Ltmp932              #   Call between .Ltmp932 and .Ltmp933
	.uleb128 .Ltmp934-.Lfunc_begin43        #     jumps to .Ltmp934
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp935-.Lfunc_begin43        # >> Call Site 3 <<
	.uleb128 .Ltmp936-.Ltmp935              #   Call between .Ltmp935 and .Ltmp936
	.uleb128 .Ltmp937-.Lfunc_begin43        #     jumps to .Ltmp937
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp938-.Lfunc_begin43        # >> Call Site 4 <<
	.uleb128 .Ltmp939-.Ltmp938              #   Call between .Ltmp938 and .Ltmp939
	.uleb128 .Ltmp940-.Lfunc_begin43        #     jumps to .Ltmp940
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp956-.Lfunc_begin43        # >> Call Site 5 <<
	.uleb128 .Ltmp959-.Ltmp956              #   Call between .Ltmp956 and .Ltmp959
	.uleb128 .Ltmp960-.Lfunc_begin43        #     jumps to .Ltmp960
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp959-.Lfunc_begin43        # >> Call Site 6 <<
	.uleb128 .Ltmp941-.Ltmp959              #   Call between .Ltmp959 and .Ltmp941
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp941-.Lfunc_begin43        # >> Call Site 7 <<
	.uleb128 .Ltmp954-.Ltmp941              #   Call between .Ltmp941 and .Ltmp954
	.uleb128 .Ltmp955-.Lfunc_begin43        #     jumps to .Ltmp955
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp954-.Lfunc_begin43        # >> Call Site 8 <<
	.uleb128 .Lfunc_end43-.Ltmp954          #   Call between .Ltmp954 and .Lfunc_end43
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end43:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint32_t_RN9benchmark5StateE # -- Begin function _Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint32_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint32_t_RN9benchmark5StateE,@function
_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint32_t_RN9benchmark5StateE: # @_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint32_t_RN9benchmark5StateE
.Lfunc_begin44:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception44
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s2, $a0
	lu12i.w	$s7, 2
	ori	$s1, $s7, 1808
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp961:
	lu12i.w	$a0, 9
	ori	$s3, $a0, 3136
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp962:
# %bb.1:
	move	$s4, $a0
	st.d	$a0, $sp, 24
.Ltmp964:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp965:
# %bb.2:
	move	$s0, $a0
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 38
	lu12i.w	$s6, -3
	ori	$s8, $s6, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB44_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp967:
	addi.d	$a0, $sp, 38
	addi.d	$a2, $sp, 38
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp968:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB44_3 Depth=1
	add.d	$a1, $fp, $s8
	addi.d	$s8, $s8, 1
	stx.b	$a0, $a1, $s1
	bnez	$s8, .LBB44_3
# %bb.5:                                # %vector.ph
	addi.d	$a0, $s0, 4
	ori	$a1, $s6, 2288
	ori	$a2, $s7, 1809
	.p2align	4, , 16
.LBB44_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a3, $fp, $a1
	ldx.bu	$a4, $a3, $s1
	ldx.bu	$a3, $a3, $a2
	st.w	$a4, $a0, -4
	st.w	$a3, $a0, 0
	addi.d	$a1, $a1, 2
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB44_6
# %bb.7:                                # %vector.body82.preheader
	addi.d	$a0, $s4, 16
	ori	$a1, $s6, 2288
	ori	$s5, $s7, 1812
	vrepli.b	$vr2, 0
	.p2align	4, , 16
.LBB44_8:                               # %vector.body82
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a1
	ldx.w	$a3, $a2, $s1
	ldx.w	$a2, $a2, $s5
	vinsgr2vr.w	$vr0, $a3, 0
	vinsgr2vr.w	$vr1, $a2, 0
	vilvl.b	$vr0, $vr2, $vr0
	vilvl.h	$vr0, $vr2, $vr0
	vilvl.b	$vr1, $vr2, $vr1
	vilvl.h	$vr1, $vr2, $vr1
	vst	$vr0, $a0, -16
	vst	$vr1, $a0, 0
	addi.d	$a1, $a1, 8
	addi.d	$a0, $a0, 32
	bnez	$a1, .LBB44_8
# %bb.9:                                # %_ZL20truncOrZextVecInLoopIhjEvPKT_PT0_i.exit.preheader.preheader
	move	$s7, $zero
	ori	$s8, $s6, 2288
	.p2align	4, , 16
.LBB44_10:                              # %_ZL20truncOrZextVecInLoopIhjEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	ldx.w	$a0, $s4, $s7
	ldx.w	$a1, $s0, $s7
	bne	$a0, $a1, .LBB44_27
# %bb.11:                               # %_ZL20truncOrZextVecInLoopIhjEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB44_10 Depth=1
	addi.d	$s8, $s8, 1
	addi.d	$s7, $s7, 4
	bnez	$s8, .LBB44_10
# %bb.12:
	vst	$vr2, $sp, 0                    # 16-byte Folded Spill
	ld.w	$s7, $s2, 28
	ld.d	$s4, $s2, 16
.Ltmp985:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp986:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	vld	$vr2, $sp, 0                    # 16-byte Folded Reload
	bnez	$s7, .LBB44_23
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s4, .LBB44_23
# %bb.15:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s1
	addi.d	$a1, $sp, 24
	ori	$a2, $s6, 2288
	b	.LBB44_17
	.p2align	4, , 16
.LBB44_16:                              # %_ZL20truncOrZextVecInLoopIhjEvPKT_PT0_i.exit27
                                        #   in Loop: Header=BB44_17 Depth=1
	addi.d	$s4, $s4, -1
	beqz	$s4, .LBB44_23
.LBB44_17:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_22 Depth 2
                                        #     Child Loop BB44_20 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a3, $sp, 24
	bgeu	$a3, $a0, .LBB44_21
# %bb.18:                               # %.lr.ph
                                        #   in Loop: Header=BB44_17 Depth=1
	add.d	$a4, $a3, $s3
	bgeu	$fp, $a4, .LBB44_21
# %bb.19:                               # %.lr.ph.i23.preheader
                                        #   in Loop: Header=BB44_17 Depth=1
	move	$a4, $a2
	.p2align	4, , 16
.LBB44_20:                              # %.lr.ph.i23
                                        #   Parent Loop BB44_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a5, $fp, $a4
	ldx.bu	$a5, $a5, $s1
	st.w	$a5, $a3, 0
	addi.d	$a4, $a4, 1
	addi.d	$a3, $a3, 4
	bnez	$a4, .LBB44_20
	b	.LBB44_16
	.p2align	4, , 16
.LBB44_21:                              # %vector.body91.preheader
                                        #   in Loop: Header=BB44_17 Depth=1
	addi.d	$a3, $a3, 16
	move	$a4, $a2
	.p2align	4, , 16
.LBB44_22:                              # %vector.body91
                                        #   Parent Loop BB44_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a5, $fp, $a4
	ldx.w	$a6, $a5, $s1
	ldx.w	$a5, $a5, $s5
	vinsgr2vr.w	$vr0, $a6, 0
	vinsgr2vr.w	$vr1, $a5, 0
	vilvl.b	$vr0, $vr2, $vr0
	vilvl.h	$vr0, $vr2, $vr0
	vilvl.b	$vr1, $vr2, $vr1
	vilvl.h	$vr1, $vr2, $vr1
	vst	$vr0, $a3, -16
	vst	$vr1, $a3, 0
	addi.d	$a4, $a4, 8
	addi.d	$a3, $a3, 32
	bnez	$a4, .LBB44_22
	b	.LBB44_16
.LBB44_23:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp987:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp988:
# %bb.24:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit35
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 24
	beqz	$a0, .LBB44_26
# %bb.25:                               # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i37
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB44_26:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit41
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB44_27:
.Ltmp970:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp971:
# %bb.28:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	add.d	$a0, $fp, $s8
	ldx.bu	$a1, $a0, $s1
.Ltmp972:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp973:
# %bb.29:
.Ltmp974:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp975:
# %bb.30:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit17
	ldx.wu	$a1, $s4, $s7
.Ltmp976:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp977:
# %bb.31:                               # %_ZNSolsEj.exit
.Ltmp978:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp979:
# %bb.32:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit20
	ldx.wu	$a1, $s0, $s7
.Ltmp980:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp981:
# %bb.33:                               # %_ZNSolsEj.exit22
.Ltmp982:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp983:
# %bb.34:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB44_35:                              # %.thread
.Ltmp966:
	move	$s1, $a0
	b	.LBB44_41
.LBB44_36:
.Ltmp963:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB44_37:
.Ltmp989:
	b	.LBB44_40
.LBB44_38:
.Ltmp984:
	b	.LBB44_40
.LBB44_39:
.Ltmp969:
.LBB44_40:
	move	$s1, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s4, $sp, 24
	beqz	$s4, .LBB44_42
.LBB44_41:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i30
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB44_42:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end44:
	.size	_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint32_t_RN9benchmark5StateE, .Lfunc_end44-_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint32_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table44:
.Lexception44:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end44-.Lcst_begin44
.Lcst_begin44:
	.uleb128 .Lfunc_begin44-.Lfunc_begin44  # >> Call Site 1 <<
	.uleb128 .Ltmp961-.Lfunc_begin44        #   Call between .Lfunc_begin44 and .Ltmp961
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp961-.Lfunc_begin44        # >> Call Site 2 <<
	.uleb128 .Ltmp962-.Ltmp961              #   Call between .Ltmp961 and .Ltmp962
	.uleb128 .Ltmp963-.Lfunc_begin44        #     jumps to .Ltmp963
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp964-.Lfunc_begin44        # >> Call Site 3 <<
	.uleb128 .Ltmp965-.Ltmp964              #   Call between .Ltmp964 and .Ltmp965
	.uleb128 .Ltmp966-.Lfunc_begin44        #     jumps to .Ltmp966
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp967-.Lfunc_begin44        # >> Call Site 4 <<
	.uleb128 .Ltmp968-.Ltmp967              #   Call between .Ltmp967 and .Ltmp968
	.uleb128 .Ltmp969-.Lfunc_begin44        #     jumps to .Ltmp969
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp985-.Lfunc_begin44        # >> Call Site 5 <<
	.uleb128 .Ltmp988-.Ltmp985              #   Call between .Ltmp985 and .Ltmp988
	.uleb128 .Ltmp989-.Lfunc_begin44        #     jumps to .Ltmp989
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp988-.Lfunc_begin44        # >> Call Site 6 <<
	.uleb128 .Ltmp970-.Ltmp988              #   Call between .Ltmp988 and .Ltmp970
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp970-.Lfunc_begin44        # >> Call Site 7 <<
	.uleb128 .Ltmp983-.Ltmp970              #   Call between .Ltmp970 and .Ltmp983
	.uleb128 .Ltmp984-.Lfunc_begin44        #     jumps to .Ltmp984
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp983-.Lfunc_begin44        # >> Call Site 8 <<
	.uleb128 .Lfunc_end44-.Ltmp983          #   Call between .Ltmp983 and .Lfunc_end44
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end44:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint32_t_RN9benchmark5StateE # -- Begin function _Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint32_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint32_t_RN9benchmark5StateE,@function
_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint32_t_RN9benchmark5StateE: # @_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint32_t_RN9benchmark5StateE
.Lfunc_begin45:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception45
# %bb.0:
	addi.d	$sp, $sp, -256
	.cfi_def_cfa_offset 256
	st.d	$ra, $sp, 248                   # 8-byte Folded Spill
	st.d	$fp, $sp, 240                   # 8-byte Folded Spill
	st.d	$s0, $sp, 232                   # 8-byte Folded Spill
	st.d	$s1, $sp, 224                   # 8-byte Folded Spill
	st.d	$s2, $sp, 216                   # 8-byte Folded Spill
	st.d	$s3, $sp, 208                   # 8-byte Folded Spill
	st.d	$s4, $sp, 200                   # 8-byte Folded Spill
	st.d	$s5, $sp, 192                   # 8-byte Folded Spill
	st.d	$s6, $sp, 184                   # 8-byte Folded Spill
	st.d	$s7, $sp, 176                   # 8-byte Folded Spill
	st.d	$s8, $sp, 168                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	addi.d	$fp, $sp, 256
	.cfi_def_cfa 22, 0
	bstrins.d	$sp, $zero, 4, 0
	move	$s1, $a0
	lu12i.w	$s6, 2
	ori	$s3, $s6, 1808
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$s0, $a0
.Ltmp990:
	lu12i.w	$a0, 9
	ori	$s2, $a0, 3136
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp991:
# %bb.1:
	move	$s4, $a0
	st.d	$a0, $sp, 152
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 160
	lu12i.w	$s7, -3
	ori	$s8, $s7, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB45_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp993:
	addi.d	$a0, $sp, 160
	addi.d	$a2, $sp, 160
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp994:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB45_2 Depth=1
	add.d	$a1, $s0, $s8
	addi.d	$s8, $s8, 1
	stx.b	$a0, $a1, $s3
	bnez	$s8, .LBB45_2
# %bb.4:
	move	$s8, $zero
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 160
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB45_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp996:
	addi.d	$a0, $sp, 160
	addi.d	$a2, $sp, 160
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp997:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB45_5 Depth=1
	stx.w	$a0, $s4, $s8
	addi.d	$s8, $s8, 4
	bne	$s8, $s2, .LBB45_5
# %bb.7:
	ld.w	$s5, $s1, 28
	ld.d	$s4, $s1, 16
.Ltmp999:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1000:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s5, .LBB45_20
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s4, .LBB45_20
# %bb.10:                               # %.lr.ph.preheader
	add.d	$a0, $s0, $s3
	addi.d	$a1, $sp, 152
	ori	$a2, $s7, 2288
	ori	$a3, $s7, 2304
	ori	$a4, $s6, 1792
	.p2align	4, , 16
.LBB45_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_15 Depth 2
                                        #     Child Loop BB45_18 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a5, $sp, 152
	bgeu	$a5, $a0, .LBB45_14
# %bb.12:                               # %.lr.ph
                                        #   in Loop: Header=BB45_11 Depth=1
	add.d	$a6, $a5, $s2
	bgeu	$s0, $a6, .LBB45_14
# %bb.13:                               #   in Loop: Header=BB45_11 Depth=1
	move	$a7, $zero
	b	.LBB45_17
	.p2align	4, , 16
.LBB45_14:                              # %vector.body.preheader
                                        #   in Loop: Header=BB45_11 Depth=1
	addi.d	$a6, $a5, 64
	move	$a7, $a3
	.p2align	4, , 16
.LBB45_15:                              # %vector.body
                                        #   Parent Loop BB45_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$t0, $s0, $a7
	ldptr.d	$t1, $t0, 9984
	ldptr.d	$t2, $t0, 9992
	ldptr.d	$t3, $t0, 10000
	ldptr.d	$t0, $t0, 10008
	vinsgr2vr.d	$vr1, $t1, 0
	vinsgr2vr.d	$vr3, $t2, 0
	vinsgr2vr.d	$vr2, $t3, 0
	vinsgr2vr.d	$vr0, $t0, 0
	st.b	$zero, $sp, 31
	st.h	$zero, $sp, 29
	st.b	$zero, $sp, 27
	st.h	$zero, $sp, 25
	st.b	$zero, $sp, 23
	st.h	$zero, $sp, 21
	st.b	$zero, $sp, 19
	st.h	$zero, $sp, 17
	st.b	$zero, $sp, 15
	st.h	$zero, $sp, 13
	st.b	$zero, $sp, 11
	st.h	$zero, $sp, 9
	st.b	$zero, $sp, 7
	st.h	$zero, $sp, 5
	st.b	$zero, $sp, 3
	st.h	$zero, $sp, 1
	xvstelm.b	$xr1, $sp, 28, 7
	xvstelm.b	$xr1, $sp, 24, 6
	xvstelm.b	$xr1, $sp, 20, 5
	xvstelm.b	$xr1, $sp, 16, 4
	xvstelm.b	$xr1, $sp, 12, 3
	xvstelm.b	$xr1, $sp, 8, 2
	xvstelm.b	$xr1, $sp, 4, 1
	xvstelm.b	$xr1, $sp, 0, 0
	xvld	$xr1, $sp, 0
	st.b	$zero, $sp, 63
	st.h	$zero, $sp, 61
	st.b	$zero, $sp, 59
	st.h	$zero, $sp, 57
	st.b	$zero, $sp, 55
	st.h	$zero, $sp, 53
	st.b	$zero, $sp, 51
	st.h	$zero, $sp, 49
	st.b	$zero, $sp, 47
	st.h	$zero, $sp, 45
	st.b	$zero, $sp, 43
	st.h	$zero, $sp, 41
	st.b	$zero, $sp, 39
	st.h	$zero, $sp, 37
	st.b	$zero, $sp, 35
	st.h	$zero, $sp, 33
	xvstelm.b	$xr3, $sp, 60, 7
	xvstelm.b	$xr3, $sp, 56, 6
	xvstelm.b	$xr3, $sp, 52, 5
	xvstelm.b	$xr3, $sp, 48, 4
	xvstelm.b	$xr3, $sp, 44, 3
	xvstelm.b	$xr3, $sp, 40, 2
	xvstelm.b	$xr3, $sp, 36, 1
	xvstelm.b	$xr3, $sp, 32, 0
	xvld	$xr3, $sp, 32
	st.b	$zero, $sp, 95
	st.h	$zero, $sp, 93
	st.b	$zero, $sp, 91
	st.h	$zero, $sp, 89
	st.b	$zero, $sp, 87
	st.h	$zero, $sp, 85
	st.b	$zero, $sp, 83
	st.h	$zero, $sp, 81
	st.b	$zero, $sp, 79
	st.h	$zero, $sp, 77
	st.b	$zero, $sp, 75
	st.h	$zero, $sp, 73
	st.b	$zero, $sp, 71
	st.h	$zero, $sp, 69
	st.b	$zero, $sp, 67
	st.h	$zero, $sp, 65
	xvstelm.b	$xr2, $sp, 92, 7
	xvstelm.b	$xr2, $sp, 88, 6
	xvstelm.b	$xr2, $sp, 84, 5
	xvstelm.b	$xr2, $sp, 80, 4
	xvstelm.b	$xr2, $sp, 76, 3
	xvstelm.b	$xr2, $sp, 72, 2
	xvstelm.b	$xr2, $sp, 68, 1
	xvstelm.b	$xr2, $sp, 64, 0
	xvld	$xr2, $sp, 64
	st.b	$zero, $sp, 127
	st.h	$zero, $sp, 125
	st.b	$zero, $sp, 123
	st.h	$zero, $sp, 121
	st.b	$zero, $sp, 119
	st.h	$zero, $sp, 117
	st.b	$zero, $sp, 115
	st.h	$zero, $sp, 113
	st.b	$zero, $sp, 111
	st.h	$zero, $sp, 109
	st.b	$zero, $sp, 107
	st.h	$zero, $sp, 105
	st.b	$zero, $sp, 103
	st.h	$zero, $sp, 101
	st.b	$zero, $sp, 99
	st.h	$zero, $sp, 97
	xvstelm.b	$xr0, $sp, 124, 7
	xvstelm.b	$xr0, $sp, 120, 6
	xvstelm.b	$xr0, $sp, 116, 5
	xvstelm.b	$xr0, $sp, 112, 4
	xvstelm.b	$xr0, $sp, 108, 3
	xvstelm.b	$xr0, $sp, 104, 2
	xvstelm.b	$xr0, $sp, 100, 1
	xvstelm.b	$xr0, $sp, 96, 0
	xvld	$xr0, $sp, 96
	xvld	$xr4, $a6, -64
	xvld	$xr5, $a6, -32
	xvld	$xr6, $a6, 0
	xvld	$xr7, $a6, 32
	xvadd.w	$xr1, $xr4, $xr1
	xvadd.w	$xr3, $xr5, $xr3
	xvadd.w	$xr2, $xr6, $xr2
	xvadd.w	$xr0, $xr7, $xr0
	xvst	$xr1, $a6, -64
	xvst	$xr3, $a6, -32
	xvst	$xr2, $a6, 0
	xvst	$xr0, $a6, 32
	addi.d	$a7, $a7, 32
	addi.d	$a6, $a6, 128
	bnez	$a7, .LBB45_15
# %bb.16:                               #   in Loop: Header=BB45_11 Depth=1
	move	$a7, $a4
.LBB45_17:                              # %.lr.ph.i.preheader
                                        #   in Loop: Header=BB45_11 Depth=1
	add.d	$a6, $a7, $a2
	alsl.d	$a5, $a7, $a5, 2
	add.d	$a7, $s0, $a7
	.p2align	4, , 16
.LBB45_18:                              # %.lr.ph.i
                                        #   Parent Loop BB45_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$t0, $a7, 0
	ld.w	$t1, $a5, 0
	add.d	$t0, $t1, $t0
	st.w	$t0, $a5, 0
	addi.d	$a6, $a6, 1
	addi.d	$a5, $a5, 4
	addi.d	$a7, $a7, 1
	bnez	$a6, .LBB45_18
# %bb.19:                               # %_ZL34truncOrZextVecWithAddInLoopWithVW8IhjEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB45_11 Depth=1
	addi.d	$s4, $s4, -1
	bnez	$s4, .LBB45_11
.LBB45_20:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1001:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1002:
# %bb.21:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 152
	beqz	$a0, .LBB45_23
# %bb.22:                               # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB45_23:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	addi.d	$sp, $fp, -256
	ld.d	$s8, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 216                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 224                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 232                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 240                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 248                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 256
	ret
.LBB45_24:
.Ltmp992:
	move	$s1, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB45_25:
.Ltmp1003:
	ld.d	$s4, $sp, 152
	move	$s1, $a0
	bnez	$s4, .LBB45_29
	b	.LBB45_30
.LBB45_26:                              # %.loopexit
.Ltmp998:
	b	.LBB45_28
.LBB45_27:                              # %.loopexit.split-lp
.Ltmp995:
.LBB45_28:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s1, $a0
.LBB45_29:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB45_30:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end45:
	.size	_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint32_t_RN9benchmark5StateE, .Lfunc_end45-_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint32_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table45:
.Lexception45:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end45-.Lcst_begin45
.Lcst_begin45:
	.uleb128 .Lfunc_begin45-.Lfunc_begin45  # >> Call Site 1 <<
	.uleb128 .Ltmp990-.Lfunc_begin45        #   Call between .Lfunc_begin45 and .Ltmp990
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp990-.Lfunc_begin45        # >> Call Site 2 <<
	.uleb128 .Ltmp991-.Ltmp990              #   Call between .Ltmp990 and .Ltmp991
	.uleb128 .Ltmp992-.Lfunc_begin45        #     jumps to .Ltmp992
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp993-.Lfunc_begin45        # >> Call Site 3 <<
	.uleb128 .Ltmp994-.Ltmp993              #   Call between .Ltmp993 and .Ltmp994
	.uleb128 .Ltmp995-.Lfunc_begin45        #     jumps to .Ltmp995
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp996-.Lfunc_begin45        # >> Call Site 4 <<
	.uleb128 .Ltmp997-.Ltmp996              #   Call between .Ltmp996 and .Ltmp997
	.uleb128 .Ltmp998-.Lfunc_begin45        #     jumps to .Ltmp998
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp999-.Lfunc_begin45        # >> Call Site 5 <<
	.uleb128 .Ltmp1002-.Ltmp999             #   Call between .Ltmp999 and .Ltmp1002
	.uleb128 .Ltmp1003-.Lfunc_begin45       #     jumps to .Ltmp1003
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1002-.Lfunc_begin45       # >> Call Site 6 <<
	.uleb128 .Lfunc_end45-.Ltmp1002         #   Call between .Ltmp1002 and .Lfunc_end45
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end45:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint32_t_RN9benchmark5StateE # -- Begin function _Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint32_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint32_t_RN9benchmark5StateE,@function
_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint32_t_RN9benchmark5StateE: # @_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint32_t_RN9benchmark5StateE
.Lfunc_begin46:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception46
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$s0, $a0
	lu12i.w	$s5, 2
	ori	$s1, $s5, 1808
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp1004:
	lu12i.w	$a0, 9
	ori	$s2, $a0, 3136
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1005:
# %bb.1:
	move	$s3, $a0
	st.d	$a0, $sp, 0
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 8
	lu12i.w	$s6, -3
	ori	$s7, $s6, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB46_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp1007:
	addi.d	$a0, $sp, 8
	addi.d	$a2, $sp, 8
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1008:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB46_2 Depth=1
	add.d	$a1, $fp, $s7
	addi.d	$s7, $s7, 1
	stx.b	$a0, $a1, $s1
	bnez	$s7, .LBB46_2
# %bb.4:
	move	$s7, $zero
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 8
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB46_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp1010:
	addi.d	$a0, $sp, 8
	addi.d	$a2, $sp, 8
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1011:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB46_5 Depth=1
	stx.w	$a0, $s3, $s7
	addi.d	$s7, $s7, 4
	bne	$s7, $s2, .LBB46_5
# %bb.7:
	ld.w	$s4, $s0, 28
	ld.d	$s3, $s0, 16
.Ltmp1013:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1014:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s4, .LBB46_20
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s3, .LBB46_20
# %bb.10:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s1
	addi.d	$a1, $sp, 0
	ori	$a2, $s6, 2288
	ori	$a3, $s6, 2304
	ori	$a4, $s5, 1792
	ori	$a5, $s5, 1824
	ori	$a6, $s5, 1840
	.p2align	4, , 16
.LBB46_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_15 Depth 2
                                        #     Child Loop BB46_18 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a7, $sp, 0
	bgeu	$a7, $a0, .LBB46_14
# %bb.12:                               # %.lr.ph
                                        #   in Loop: Header=BB46_11 Depth=1
	add.d	$t0, $a7, $s2
	bgeu	$fp, $t0, .LBB46_14
# %bb.13:                               #   in Loop: Header=BB46_11 Depth=1
	move	$t1, $zero
	b	.LBB46_17
	.p2align	4, , 16
.LBB46_14:                              # %vector.body.preheader
                                        #   in Loop: Header=BB46_11 Depth=1
	addi.d	$t0, $a7, 128
	move	$t1, $a3
	.p2align	4, , 16
.LBB46_15:                              # %vector.body
                                        #   Parent Loop BB46_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$t2, $fp, $t1
	vldx	$vr3, $t2, $a4
	vldx	$vr6, $t2, $s1
	vldx	$vr4, $t2, $a5
	vldx	$vr1, $t2, $a6
	vpickve2gr.b	$t2, $vr3, 0
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr0, $t2, 0
	vpickve2gr.b	$t2, $vr3, 1
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr0, $t2, 1
	vpickve2gr.b	$t2, $vr3, 2
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr0, $t2, 2
	vpickve2gr.b	$t2, $vr3, 3
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr0, $t2, 3
	vpickve2gr.b	$t2, $vr3, 4
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr0, $t2, 4
	vpickve2gr.b	$t2, $vr3, 5
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr0, $t2, 5
	vpickve2gr.b	$t2, $vr3, 6
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr0, $t2, 6
	vpickve2gr.b	$t2, $vr3, 7
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr0, $t2, 7
	vpickve2gr.b	$t2, $vr3, 8
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr2, $t2, 0
	vpickve2gr.b	$t2, $vr3, 9
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr2, $t2, 1
	vpickve2gr.b	$t2, $vr3, 10
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr2, $t2, 2
	vpickve2gr.b	$t2, $vr3, 11
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr2, $t2, 3
	vpickve2gr.b	$t2, $vr3, 12
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr2, $t2, 4
	vpickve2gr.b	$t2, $vr3, 13
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr2, $t2, 5
	vpickve2gr.b	$t2, $vr3, 14
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr2, $t2, 6
	vpickve2gr.b	$t2, $vr3, 15
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr2, $t2, 7
	vpickve2gr.b	$t2, $vr6, 0
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr3, $t2, 0
	vpickve2gr.b	$t2, $vr6, 1
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr3, $t2, 1
	vpickve2gr.b	$t2, $vr6, 2
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr3, $t2, 2
	vpickve2gr.b	$t2, $vr6, 3
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr3, $t2, 3
	vpickve2gr.b	$t2, $vr6, 4
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr3, $t2, 4
	vpickve2gr.b	$t2, $vr6, 5
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr3, $t2, 5
	vpickve2gr.b	$t2, $vr6, 6
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr3, $t2, 6
	vpickve2gr.b	$t2, $vr6, 7
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr3, $t2, 7
	vpickve2gr.b	$t2, $vr6, 8
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr5, $t2, 0
	vpickve2gr.b	$t2, $vr6, 9
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr5, $t2, 1
	vpickve2gr.b	$t2, $vr6, 10
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr5, $t2, 2
	vpickve2gr.b	$t2, $vr6, 11
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr5, $t2, 3
	vpickve2gr.b	$t2, $vr6, 12
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr5, $t2, 4
	vpickve2gr.b	$t2, $vr6, 13
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr5, $t2, 5
	vpickve2gr.b	$t2, $vr6, 14
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr5, $t2, 6
	vpickve2gr.b	$t2, $vr6, 15
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr5, $t2, 7
	vpickve2gr.b	$t2, $vr4, 0
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr6, $t2, 0
	vpickve2gr.b	$t2, $vr4, 1
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr6, $t2, 1
	vpickve2gr.b	$t2, $vr4, 2
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr6, $t2, 2
	vpickve2gr.b	$t2, $vr4, 3
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr6, $t2, 3
	vpickve2gr.b	$t2, $vr4, 4
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr6, $t2, 4
	vpickve2gr.b	$t2, $vr4, 5
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr6, $t2, 5
	vpickve2gr.b	$t2, $vr4, 6
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr6, $t2, 6
	vpickve2gr.b	$t2, $vr4, 7
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr6, $t2, 7
	vpickve2gr.b	$t2, $vr4, 8
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr7, $t2, 0
	vpickve2gr.b	$t2, $vr4, 9
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr7, $t2, 1
	vpickve2gr.b	$t2, $vr4, 10
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr7, $t2, 2
	vpickve2gr.b	$t2, $vr4, 11
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr7, $t2, 3
	vpickve2gr.b	$t2, $vr4, 12
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr7, $t2, 4
	vpickve2gr.b	$t2, $vr4, 13
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr7, $t2, 5
	vpickve2gr.b	$t2, $vr4, 14
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr7, $t2, 6
	vpickve2gr.b	$t2, $vr4, 15
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr7, $t2, 7
	vpickve2gr.b	$t2, $vr1, 0
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr4, $t2, 0
	vpickve2gr.b	$t2, $vr1, 1
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr4, $t2, 1
	vpickve2gr.b	$t2, $vr1, 2
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr4, $t2, 2
	vpickve2gr.b	$t2, $vr1, 3
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr4, $t2, 3
	vpickve2gr.b	$t2, $vr1, 4
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr4, $t2, 4
	vpickve2gr.b	$t2, $vr1, 5
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr4, $t2, 5
	vpickve2gr.b	$t2, $vr1, 6
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr4, $t2, 6
	vpickve2gr.b	$t2, $vr1, 7
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr4, $t2, 7
	vpickve2gr.b	$t2, $vr1, 8
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr8, $t2, 0
	vpickve2gr.b	$t2, $vr1, 9
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr8, $t2, 1
	vpickve2gr.b	$t2, $vr1, 10
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr8, $t2, 2
	vpickve2gr.b	$t2, $vr1, 11
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr8, $t2, 3
	vpickve2gr.b	$t2, $vr1, 12
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr8, $t2, 4
	vpickve2gr.b	$t2, $vr1, 13
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr8, $t2, 5
	vpickve2gr.b	$t2, $vr1, 14
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr8, $t2, 6
	vpickve2gr.b	$t2, $vr1, 15
	andi	$t2, $t2, 255
	xvinsgr2vr.w	$xr8, $t2, 7
	xvld	$xr1, $t0, -128
	xvld	$xr9, $t0, -96
	xvld	$xr10, $t0, -64
	xvld	$xr11, $t0, -32
	xvld	$xr12, $t0, 0
	xvld	$xr13, $t0, 32
	xvld	$xr14, $t0, 64
	xvld	$xr15, $t0, 96
	xvadd.w	$xr2, $xr9, $xr2
	xvadd.w	$xr0, $xr1, $xr0
	xvadd.w	$xr1, $xr11, $xr5
	xvadd.w	$xr3, $xr10, $xr3
	xvadd.w	$xr5, $xr13, $xr7
	xvadd.w	$xr6, $xr12, $xr6
	xvadd.w	$xr7, $xr15, $xr8
	xvadd.w	$xr4, $xr14, $xr4
	xvst	$xr0, $t0, -128
	xvst	$xr2, $t0, -96
	xvst	$xr3, $t0, -64
	xvst	$xr1, $t0, -32
	xvst	$xr6, $t0, 0
	xvst	$xr5, $t0, 32
	xvst	$xr4, $t0, 64
	xvst	$xr7, $t0, 96
	addi.d	$t1, $t1, 64
	addi.d	$t0, $t0, 256
	bnez	$t1, .LBB46_15
# %bb.16:                               #   in Loop: Header=BB46_11 Depth=1
	move	$t1, $a4
.LBB46_17:                              # %.lr.ph.i.preheader
                                        #   in Loop: Header=BB46_11 Depth=1
	add.d	$t0, $t1, $a2
	alsl.d	$a7, $t1, $a7, 2
	add.d	$t1, $fp, $t1
	.p2align	4, , 16
.LBB46_18:                              # %.lr.ph.i
                                        #   Parent Loop BB46_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$t2, $t1, 0
	ld.w	$t3, $a7, 0
	add.d	$t2, $t3, $t2
	st.w	$t2, $a7, 0
	addi.d	$t0, $t0, 1
	addi.d	$a7, $a7, 4
	addi.d	$t1, $t1, 1
	bnez	$t0, .LBB46_18
# %bb.19:                               # %_ZL35truncOrZextVecWithAddInLoopWithVW16IhjEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB46_11 Depth=1
	addi.d	$s3, $s3, -1
	bnez	$s3, .LBB46_11
.LBB46_20:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1015:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1016:
# %bb.21:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 0
	beqz	$a0, .LBB46_23
# %bb.22:                               # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB46_23:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.LBB46_24:
.Ltmp1006:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB46_25:
.Ltmp1017:
	ld.d	$s3, $sp, 0
	move	$s0, $a0
	bnez	$s3, .LBB46_29
	b	.LBB46_30
.LBB46_26:                              # %.loopexit
.Ltmp1012:
	b	.LBB46_28
.LBB46_27:                              # %.loopexit.split-lp
.Ltmp1009:
.LBB46_28:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB46_29:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB46_30:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end46:
	.size	_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint32_t_RN9benchmark5StateE, .Lfunc_end46-_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint32_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table46:
.Lexception46:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end46-.Lcst_begin46
.Lcst_begin46:
	.uleb128 .Lfunc_begin46-.Lfunc_begin46  # >> Call Site 1 <<
	.uleb128 .Ltmp1004-.Lfunc_begin46       #   Call between .Lfunc_begin46 and .Ltmp1004
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1004-.Lfunc_begin46       # >> Call Site 2 <<
	.uleb128 .Ltmp1005-.Ltmp1004            #   Call between .Ltmp1004 and .Ltmp1005
	.uleb128 .Ltmp1006-.Lfunc_begin46       #     jumps to .Ltmp1006
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1007-.Lfunc_begin46       # >> Call Site 3 <<
	.uleb128 .Ltmp1008-.Ltmp1007            #   Call between .Ltmp1007 and .Ltmp1008
	.uleb128 .Ltmp1009-.Lfunc_begin46       #     jumps to .Ltmp1009
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1010-.Lfunc_begin46       # >> Call Site 4 <<
	.uleb128 .Ltmp1011-.Ltmp1010            #   Call between .Ltmp1010 and .Ltmp1011
	.uleb128 .Ltmp1012-.Lfunc_begin46       #     jumps to .Ltmp1012
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1013-.Lfunc_begin46       # >> Call Site 5 <<
	.uleb128 .Ltmp1016-.Ltmp1013            #   Call between .Ltmp1013 and .Ltmp1016
	.uleb128 .Ltmp1017-.Lfunc_begin46       #     jumps to .Ltmp1017
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1016-.Lfunc_begin46       # >> Call Site 6 <<
	.uleb128 .Lfunc_end46-.Ltmp1016         #   Call between .Ltmp1016 and .Lfunc_end46
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end46:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint32_t_RN9benchmark5StateE # -- Begin function _Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint32_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint32_t_RN9benchmark5StateE,@function
_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint32_t_RN9benchmark5StateE: # @_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint32_t_RN9benchmark5StateE
.Lfunc_begin47:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception47
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$s0, $a0
	lu12i.w	$s5, 2
	ori	$s1, $s5, 1808
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp1018:
	lu12i.w	$a0, 9
	ori	$s2, $a0, 3136
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1019:
# %bb.1:
	move	$s3, $a0
	st.d	$a0, $sp, 0
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 8
	lu12i.w	$s6, -3
	ori	$s7, $s6, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB47_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp1021:
	addi.d	$a0, $sp, 8
	addi.d	$a2, $sp, 8
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1022:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB47_2 Depth=1
	add.d	$a1, $fp, $s7
	addi.d	$s7, $s7, 1
	stx.b	$a0, $a1, $s1
	bnez	$s7, .LBB47_2
# %bb.4:
	move	$s7, $zero
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 8
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB47_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp1024:
	addi.d	$a0, $sp, 8
	addi.d	$a2, $sp, 8
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1025:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB47_5 Depth=1
	stx.w	$a0, $s3, $s7
	addi.d	$s7, $s7, 4
	bne	$s7, $s2, .LBB47_5
# %bb.7:
	ld.w	$s4, $s0, 28
	ld.d	$s3, $s0, 16
.Ltmp1027:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1028:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s4, .LBB47_18
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s3, .LBB47_18
# %bb.10:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s1
	addi.d	$a1, $sp, 0
	ori	$a2, $s6, 2288
	ori	$a3, $s5, 1812
	vrepli.b	$vr0, 0
	b	.LBB47_12
	.p2align	4, , 16
.LBB47_11:                              # %_ZL27truncOrZextVecWithAddInLoopIhjEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB47_12 Depth=1
	addi.d	$s3, $s3, -1
	beqz	$s3, .LBB47_18
.LBB47_12:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_17 Depth 2
                                        #     Child Loop BB47_15 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a4, $sp, 0
	bgeu	$a4, $a0, .LBB47_16
# %bb.13:                               # %.lr.ph
                                        #   in Loop: Header=BB47_12 Depth=1
	add.d	$a5, $a4, $s2
	bgeu	$fp, $a5, .LBB47_16
# %bb.14:                               # %.lr.ph.i.preheader
                                        #   in Loop: Header=BB47_12 Depth=1
	move	$a5, $a2
	.p2align	4, , 16
.LBB47_15:                              # %.lr.ph.i
                                        #   Parent Loop BB47_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a6, $fp, $a5
	ldx.bu	$a6, $a6, $s1
	ld.w	$a7, $a4, 0
	add.d	$a6, $a7, $a6
	st.w	$a6, $a4, 0
	addi.d	$a5, $a5, 1
	addi.d	$a4, $a4, 4
	bnez	$a5, .LBB47_15
	b	.LBB47_11
	.p2align	4, , 16
.LBB47_16:                              # %vector.body.preheader
                                        #   in Loop: Header=BB47_12 Depth=1
	addi.d	$a4, $a4, 16
	move	$a5, $a2
	.p2align	4, , 16
.LBB47_17:                              # %vector.body
                                        #   Parent Loop BB47_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a6, $fp, $a5
	ldx.w	$a7, $a6, $s1
	ldx.w	$a6, $a6, $a3
	vinsgr2vr.w	$vr1, $a7, 0
	vinsgr2vr.w	$vr2, $a6, 0
	vilvl.b	$vr1, $vr0, $vr1
	vilvl.h	$vr1, $vr0, $vr1
	vld	$vr3, $a4, -16
	vld	$vr4, $a4, 0
	vilvl.b	$vr2, $vr0, $vr2
	vilvl.h	$vr2, $vr0, $vr2
	vadd.w	$vr1, $vr3, $vr1
	vadd.w	$vr2, $vr4, $vr2
	vst	$vr1, $a4, -16
	vst	$vr2, $a4, 0
	addi.d	$a5, $a5, 8
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB47_17
	b	.LBB47_11
.LBB47_18:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1029:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1030:
# %bb.19:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 0
	beqz	$a0, .LBB47_21
# %bb.20:                               # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB47_21:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.LBB47_22:
.Ltmp1020:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB47_23:
.Ltmp1031:
	ld.d	$s3, $sp, 0
	move	$s0, $a0
	bnez	$s3, .LBB47_27
	b	.LBB47_28
.LBB47_24:                              # %.loopexit
.Ltmp1026:
	b	.LBB47_26
.LBB47_25:                              # %.loopexit.split-lp
.Ltmp1023:
.LBB47_26:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB47_27:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB47_28:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end47:
	.size	_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint32_t_RN9benchmark5StateE, .Lfunc_end47-_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint32_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table47:
.Lexception47:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end47-.Lcst_begin47
.Lcst_begin47:
	.uleb128 .Lfunc_begin47-.Lfunc_begin47  # >> Call Site 1 <<
	.uleb128 .Ltmp1018-.Lfunc_begin47       #   Call between .Lfunc_begin47 and .Ltmp1018
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1018-.Lfunc_begin47       # >> Call Site 2 <<
	.uleb128 .Ltmp1019-.Ltmp1018            #   Call between .Ltmp1018 and .Ltmp1019
	.uleb128 .Ltmp1020-.Lfunc_begin47       #     jumps to .Ltmp1020
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1021-.Lfunc_begin47       # >> Call Site 3 <<
	.uleb128 .Ltmp1022-.Ltmp1021            #   Call between .Ltmp1021 and .Ltmp1022
	.uleb128 .Ltmp1023-.Lfunc_begin47       #     jumps to .Ltmp1023
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1024-.Lfunc_begin47       # >> Call Site 4 <<
	.uleb128 .Ltmp1025-.Ltmp1024            #   Call between .Ltmp1024 and .Ltmp1025
	.uleb128 .Ltmp1026-.Lfunc_begin47       #     jumps to .Ltmp1026
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1027-.Lfunc_begin47       # >> Call Site 5 <<
	.uleb128 .Ltmp1030-.Ltmp1027            #   Call between .Ltmp1027 and .Ltmp1030
	.uleb128 .Ltmp1031-.Lfunc_begin47       #     jumps to .Ltmp1031
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1030-.Lfunc_begin47       # >> Call Site 6 <<
	.uleb128 .Lfunc_end47-.Ltmp1030         #   Call between .Ltmp1030 and .Lfunc_end47
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end47:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint64_t_RN9benchmark5StateE # -- Begin function _Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint64_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint64_t_RN9benchmark5StateE,@function
_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint64_t_RN9benchmark5StateE: # @_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint64_t_RN9benchmark5StateE
.Lfunc_begin48:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception48
# %bb.0:
	addi.d	$sp, $sp, -672
	.cfi_def_cfa_offset 672
	st.d	$ra, $sp, 664                   # 8-byte Folded Spill
	st.d	$fp, $sp, 656                   # 8-byte Folded Spill
	st.d	$s0, $sp, 648                   # 8-byte Folded Spill
	st.d	$s1, $sp, 640                   # 8-byte Folded Spill
	st.d	$s2, $sp, 632                   # 8-byte Folded Spill
	st.d	$s3, $sp, 624                   # 8-byte Folded Spill
	st.d	$s4, $sp, 616                   # 8-byte Folded Spill
	st.d	$s5, $sp, 608                   # 8-byte Folded Spill
	st.d	$s6, $sp, 600                   # 8-byte Folded Spill
	st.d	$s7, $sp, 592                   # 8-byte Folded Spill
	st.d	$s8, $sp, 584                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	addi.d	$fp, $sp, 672
	.cfi_def_cfa 22, 0
	bstrins.d	$sp, $zero, 4, 0
	move	$s1, $a0
	lu12i.w	$s6, 2
	ori	$s5, $s6, 1808
	move	$a0, $s5
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$s0, $a0
.Ltmp1032:
	lu12i.w	$s2, 19
	ori	$s3, $s2, 2176
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1033:
# %bb.1:                                # %.split
	move	$s4, $a0
	st.d	$s1, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $sp, 568
.Ltmp1035:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1036:
# %bb.2:
	move	$s1, $a0
	ori	$a0, $s6, 1793
	add.d	$s7, $s0, $a0
	ori	$a0, $s2, 2048
	add.d	$s2, $s4, $a0
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 582
	lu12i.w	$a0, -3
	ori	$s8, $a0, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s6, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB48_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp1038:
	addi.d	$a0, $sp, 582
	addi.d	$a2, $sp, 582
	move	$a1, $s6
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1039:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB48_3 Depth=1
	add.d	$a1, $s0, $s8
	addi.d	$s8, $s8, 1
	stx.b	$a0, $a1, $s5
	bnez	$s8, .LBB48_3
# %bb.5:                                # %vector.ph
	lu12i.w	$a0, -3
	ori	$a0, $a0, 2288
	vrepli.b	$vr0, 0
	move	$a1, $s1
	.p2align	4, , 16
.LBB48_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $s0, $a0
	ldx.h	$a2, $a2, $s5
	vinsgr2vr.h	$vr1, $a2, 0
	vilvl.b	$vr1, $vr0, $vr1
	vilvl.h	$vr1, $vr0, $vr1
	vilvl.w	$vr1, $vr0, $vr1
	vst	$vr1, $a1, 0
	addi.d	$a0, $a0, 2
	addi.d	$a1, $a1, 16
	bnez	$a0, .LBB48_6
# %bb.7:                                # %vector.body82.preheader
	addi.d	$a0, $s4, 128
	lu12i.w	$a1, -3
	ori	$a1, $a1, 2304
	.p2align	4, , 16
.LBB48_8:                               # %vector.body82
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $s0, $a1
	ldptr.d	$a3, $a2, 9984
	ldptr.d	$a4, $a2, 9992
	ldptr.d	$a5, $a2, 10000
	ldptr.d	$a2, $a2, 10008
	vinsgr2vr.d	$vr1, $a3, 0
	vinsgr2vr.d	$vr4, $a4, 0
	vinsgr2vr.d	$vr3, $a5, 0
	vinsgr2vr.d	$vr0, $a2, 0
	st.b	$zero, $sp, 319
	st.h	$zero, $sp, 317
	st.w	$zero, $sp, 313
	st.b	$zero, $sp, 311
	st.h	$zero, $sp, 309
	st.w	$zero, $sp, 305
	st.b	$zero, $sp, 303
	st.h	$zero, $sp, 301
	st.w	$zero, $sp, 297
	st.b	$zero, $sp, 295
	st.h	$zero, $sp, 293
	st.w	$zero, $sp, 289
	vsrli.d	$vr2, $vr1, 32
	addi.d	$a2, $sp, 312
	xvstelm.b	$xr2, $a2, 0, 3
	addi.d	$a2, $sp, 304
	xvstelm.b	$xr2, $a2, 0, 2
	addi.d	$a2, $sp, 296
	xvstelm.b	$xr2, $a2, 0, 1
	addi.d	$a2, $sp, 288
	xvstelm.b	$xr2, $a2, 0, 0
	st.b	$zero, $sp, 447
	st.h	$zero, $sp, 445
	st.w	$zero, $sp, 441
	st.b	$zero, $sp, 439
	st.h	$zero, $sp, 437
	st.w	$zero, $sp, 433
	st.b	$zero, $sp, 431
	st.h	$zero, $sp, 429
	st.w	$zero, $sp, 425
	st.b	$zero, $sp, 423
	st.h	$zero, $sp, 421
	st.w	$zero, $sp, 417
	addi.d	$a2, $sp, 440
	xvstelm.b	$xr1, $a2, 0, 3
	addi.d	$a2, $sp, 432
	xvstelm.b	$xr1, $a2, 0, 2
	addi.d	$a2, $sp, 424
	xvstelm.b	$xr1, $a2, 0, 1
	addi.d	$a2, $sp, 416
	xvstelm.b	$xr1, $a2, 0, 0
	xvld	$xr1, $sp, 288
	xvld	$xr2, $sp, 416
	st.b	$zero, $sp, 351
	st.h	$zero, $sp, 349
	st.w	$zero, $sp, 345
	st.b	$zero, $sp, 343
	st.h	$zero, $sp, 341
	st.w	$zero, $sp, 337
	st.b	$zero, $sp, 335
	st.h	$zero, $sp, 333
	st.w	$zero, $sp, 329
	st.b	$zero, $sp, 327
	st.h	$zero, $sp, 325
	st.w	$zero, $sp, 321
	vsrli.d	$vr5, $vr4, 32
	addi.d	$a2, $sp, 344
	xvstelm.b	$xr5, $a2, 0, 3
	addi.d	$a2, $sp, 336
	xvstelm.b	$xr5, $a2, 0, 2
	addi.d	$a2, $sp, 328
	xvstelm.b	$xr5, $a2, 0, 1
	addi.d	$a2, $sp, 320
	xvstelm.b	$xr5, $a2, 0, 0
	st.b	$zero, $sp, 479
	st.h	$zero, $sp, 477
	st.w	$zero, $sp, 473
	st.b	$zero, $sp, 471
	st.h	$zero, $sp, 469
	st.w	$zero, $sp, 465
	st.b	$zero, $sp, 463
	st.h	$zero, $sp, 461
	st.w	$zero, $sp, 457
	st.b	$zero, $sp, 455
	st.h	$zero, $sp, 453
	st.w	$zero, $sp, 449
	addi.d	$a2, $sp, 472
	xvstelm.b	$xr4, $a2, 0, 3
	addi.d	$a2, $sp, 464
	xvstelm.b	$xr4, $a2, 0, 2
	addi.d	$a2, $sp, 456
	xvstelm.b	$xr4, $a2, 0, 1
	addi.d	$a2, $sp, 448
	xvstelm.b	$xr4, $a2, 0, 0
	xvld	$xr4, $sp, 320
	xvld	$xr5, $sp, 448
	st.b	$zero, $sp, 383
	st.h	$zero, $sp, 381
	st.w	$zero, $sp, 377
	st.b	$zero, $sp, 375
	st.h	$zero, $sp, 373
	st.w	$zero, $sp, 369
	st.b	$zero, $sp, 367
	st.h	$zero, $sp, 365
	st.w	$zero, $sp, 361
	st.b	$zero, $sp, 359
	st.h	$zero, $sp, 357
	st.w	$zero, $sp, 353
	vsrli.d	$vr6, $vr3, 32
	addi.d	$a2, $sp, 376
	xvstelm.b	$xr6, $a2, 0, 3
	addi.d	$a2, $sp, 368
	xvstelm.b	$xr6, $a2, 0, 2
	addi.d	$a2, $sp, 360
	xvstelm.b	$xr6, $a2, 0, 1
	addi.d	$a2, $sp, 352
	xvstelm.b	$xr6, $a2, 0, 0
	st.b	$zero, $sp, 511
	st.h	$zero, $sp, 509
	st.w	$zero, $sp, 505
	st.b	$zero, $sp, 503
	st.h	$zero, $sp, 501
	st.w	$zero, $sp, 497
	st.b	$zero, $sp, 495
	st.h	$zero, $sp, 493
	st.w	$zero, $sp, 489
	st.b	$zero, $sp, 487
	st.h	$zero, $sp, 485
	st.w	$zero, $sp, 481
	addi.d	$a2, $sp, 504
	xvstelm.b	$xr3, $a2, 0, 3
	addi.d	$a2, $sp, 496
	xvstelm.b	$xr3, $a2, 0, 2
	addi.d	$a2, $sp, 488
	xvstelm.b	$xr3, $a2, 0, 1
	addi.d	$a2, $sp, 480
	xvstelm.b	$xr3, $a2, 0, 0
	xvld	$xr3, $sp, 352
	xvld	$xr6, $sp, 480
	st.b	$zero, $sp, 415
	st.h	$zero, $sp, 413
	st.w	$zero, $sp, 409
	st.b	$zero, $sp, 407
	st.h	$zero, $sp, 405
	st.w	$zero, $sp, 401
	st.b	$zero, $sp, 399
	st.h	$zero, $sp, 397
	st.w	$zero, $sp, 393
	st.b	$zero, $sp, 391
	st.h	$zero, $sp, 389
	st.w	$zero, $sp, 385
	vsrli.d	$vr7, $vr0, 32
	addi.d	$a2, $sp, 408
	xvstelm.b	$xr7, $a2, 0, 3
	addi.d	$a2, $sp, 400
	xvstelm.b	$xr7, $a2, 0, 2
	addi.d	$a2, $sp, 392
	xvstelm.b	$xr7, $a2, 0, 1
	addi.d	$a2, $sp, 384
	xvstelm.b	$xr7, $a2, 0, 0
	st.b	$zero, $sp, 543
	st.h	$zero, $sp, 541
	st.w	$zero, $sp, 537
	st.b	$zero, $sp, 535
	st.h	$zero, $sp, 533
	st.w	$zero, $sp, 529
	st.b	$zero, $sp, 527
	st.h	$zero, $sp, 525
	st.w	$zero, $sp, 521
	st.b	$zero, $sp, 519
	st.h	$zero, $sp, 517
	st.w	$zero, $sp, 513
	addi.d	$a2, $sp, 536
	xvstelm.b	$xr0, $a2, 0, 3
	addi.d	$a2, $sp, 528
	xvstelm.b	$xr0, $a2, 0, 2
	addi.d	$a2, $sp, 520
	xvstelm.b	$xr0, $a2, 0, 1
	addi.d	$a2, $sp, 512
	xvstelm.b	$xr0, $a2, 0, 0
	xvld	$xr0, $sp, 384
	xvld	$xr7, $sp, 512
	xvst	$xr2, $a0, -128
	xvst	$xr1, $a0, -96
	xvst	$xr5, $a0, -64
	xvst	$xr4, $a0, -32
	xvst	$xr6, $a0, 0
	xvst	$xr3, $a0, 32
	xvst	$xr7, $a0, 64
	xvst	$xr0, $a0, 96
	addi.d	$a1, $a1, 32
	addi.d	$a0, $a0, 256
	bnez	$a1, .LBB48_8
# %bb.9:                                # %.lr.ph.i
	move	$s8, $zero
	lu12i.w	$a4, 2
	ori	$s6, $a4, 1792
	ldx.bu	$a0, $s0, $s6
	ld.bu	$a1, $s7, 0
	ld.bu	$a2, $s7, 1
	ld.bu	$a3, $s7, 2
	st.d	$a0, $s2, 0
	st.d	$a1, $s2, 8
	st.d	$a2, $s2, 16
	st.d	$a3, $s2, 24
	ori	$a0, $a4, 1796
	ldx.bu	$a0, $s0, $a0
	ld.bu	$a1, $s7, 4
	ld.bu	$a2, $s7, 5
	ld.bu	$a3, $s7, 6
	st.d	$a0, $s2, 32
	st.d	$a1, $s2, 40
	st.d	$a2, $s2, 48
	st.d	$a3, $s2, 56
	ori	$a0, $a4, 1800
	ldx.bu	$a0, $s0, $a0
	ld.bu	$a1, $s7, 8
	ld.bu	$a2, $s7, 9
	ld.bu	$a3, $s7, 10
	st.d	$a0, $s2, 64
	st.d	$a1, $s2, 72
	st.d	$a2, $s2, 80
	st.d	$a3, $s2, 88
	ori	$a0, $a4, 1804
	ldx.bu	$a0, $s0, $a0
	ld.bu	$a1, $s7, 12
	ld.bu	$a2, $s7, 13
	ld.bu	$a3, $s7, 14
	st.d	$a0, $s2, 96
	st.d	$a1, $s2, 104
	st.d	$a2, $s2, 112
	st.d	$a3, $s2, 120
	lu12i.w	$a0, -3
	ori	$s2, $a0, 2288
	.p2align	4, , 16
.LBB48_10:                              # %_ZL27truncOrZextVecInLoopWithVW8IhmEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	ldx.d	$a0, $s4, $s8
	ldx.d	$a1, $s1, $s8
	bne	$a0, $a1, .LBB48_29
# %bb.11:                               # %_ZL27truncOrZextVecInLoopWithVW8IhmEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB48_10 Depth=1
	addi.d	$s2, $s2, 1
	addi.d	$s8, $s8, 8
	bnez	$s2, .LBB48_10
# %bb.12:
	ld.d	$s7, $sp, 24                    # 8-byte Folded Reload
	ld.w	$s4, $s7, 28
	ld.d	$s2, $s7, 16
.Ltmp1056:
	move	$a0, $s7
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1057:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s4, .LBB48_25
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s2, .LBB48_25
# %bb.15:                               # %.lr.ph.preheader
	add.d	$a0, $s0, $s5
	addi.d	$a1, $sp, 568
	lu12i.w	$a3, -3
	ori	$a2, $a3, 2288
	ori	$a3, $a3, 2304
	.p2align	4, , 16
.LBB48_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_20 Depth 2
                                        #     Child Loop BB48_23 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a4, $sp, 568
	bgeu	$a4, $a0, .LBB48_19
# %bb.17:                               # %.lr.ph
                                        #   in Loop: Header=BB48_16 Depth=1
	add.d	$a5, $a4, $s3
	bgeu	$s0, $a5, .LBB48_19
# %bb.18:                               #   in Loop: Header=BB48_16 Depth=1
	move	$a6, $zero
	b	.LBB48_22
	.p2align	4, , 16
.LBB48_19:                              # %vector.body93.preheader
                                        #   in Loop: Header=BB48_16 Depth=1
	addi.d	$a5, $a4, 128
	move	$a6, $a3
	.p2align	4, , 16
.LBB48_20:                              # %vector.body93
                                        #   Parent Loop BB48_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a7, $s0, $a6
	ldptr.d	$t0, $a7, 9984
	ldptr.d	$t1, $a7, 9992
	ldptr.d	$t2, $a7, 10000
	ldptr.d	$a7, $a7, 10008
	vinsgr2vr.d	$vr1, $t0, 0
	vinsgr2vr.d	$vr4, $t1, 0
	vinsgr2vr.d	$vr3, $t2, 0
	vinsgr2vr.d	$vr0, $a7, 0
	st.b	$zero, $sp, 63
	st.h	$zero, $sp, 61
	st.w	$zero, $sp, 57
	st.b	$zero, $sp, 55
	st.h	$zero, $sp, 53
	st.w	$zero, $sp, 49
	st.b	$zero, $sp, 47
	st.h	$zero, $sp, 45
	st.w	$zero, $sp, 41
	st.b	$zero, $sp, 39
	st.h	$zero, $sp, 37
	st.w	$zero, $sp, 33
	vsrli.d	$vr2, $vr1, 32
	xvstelm.b	$xr2, $sp, 56, 3
	xvstelm.b	$xr2, $sp, 48, 2
	xvstelm.b	$xr2, $sp, 40, 1
	xvstelm.b	$xr2, $sp, 32, 0
	st.b	$zero, $sp, 191
	st.h	$zero, $sp, 189
	st.w	$zero, $sp, 185
	st.b	$zero, $sp, 183
	st.h	$zero, $sp, 181
	st.w	$zero, $sp, 177
	st.b	$zero, $sp, 175
	st.h	$zero, $sp, 173
	st.w	$zero, $sp, 169
	st.b	$zero, $sp, 167
	st.h	$zero, $sp, 165
	st.w	$zero, $sp, 161
	addi.d	$a7, $sp, 184
	xvstelm.b	$xr1, $a7, 0, 3
	addi.d	$a7, $sp, 176
	xvstelm.b	$xr1, $a7, 0, 2
	addi.d	$a7, $sp, 168
	xvstelm.b	$xr1, $a7, 0, 1
	addi.d	$a7, $sp, 160
	xvstelm.b	$xr1, $a7, 0, 0
	xvld	$xr1, $sp, 32
	xvld	$xr2, $sp, 160
	st.b	$zero, $sp, 95
	st.h	$zero, $sp, 93
	st.w	$zero, $sp, 89
	st.b	$zero, $sp, 87
	st.h	$zero, $sp, 85
	st.w	$zero, $sp, 81
	st.b	$zero, $sp, 79
	st.h	$zero, $sp, 77
	st.w	$zero, $sp, 73
	st.b	$zero, $sp, 71
	st.h	$zero, $sp, 69
	st.w	$zero, $sp, 65
	vsrli.d	$vr5, $vr4, 32
	xvstelm.b	$xr5, $sp, 88, 3
	xvstelm.b	$xr5, $sp, 80, 2
	xvstelm.b	$xr5, $sp, 72, 1
	xvstelm.b	$xr5, $sp, 64, 0
	st.b	$zero, $sp, 223
	st.h	$zero, $sp, 221
	st.w	$zero, $sp, 217
	st.b	$zero, $sp, 215
	st.h	$zero, $sp, 213
	st.w	$zero, $sp, 209
	st.b	$zero, $sp, 207
	st.h	$zero, $sp, 205
	st.w	$zero, $sp, 201
	st.b	$zero, $sp, 199
	st.h	$zero, $sp, 197
	st.w	$zero, $sp, 193
	addi.d	$a7, $sp, 216
	xvstelm.b	$xr4, $a7, 0, 3
	addi.d	$a7, $sp, 208
	xvstelm.b	$xr4, $a7, 0, 2
	addi.d	$a7, $sp, 200
	xvstelm.b	$xr4, $a7, 0, 1
	addi.d	$a7, $sp, 192
	xvstelm.b	$xr4, $a7, 0, 0
	xvld	$xr4, $sp, 64
	xvld	$xr5, $sp, 192
	st.b	$zero, $sp, 127
	st.h	$zero, $sp, 125
	st.w	$zero, $sp, 121
	st.b	$zero, $sp, 119
	st.h	$zero, $sp, 117
	st.w	$zero, $sp, 113
	st.b	$zero, $sp, 111
	st.h	$zero, $sp, 109
	st.w	$zero, $sp, 105
	st.b	$zero, $sp, 103
	st.h	$zero, $sp, 101
	st.w	$zero, $sp, 97
	vsrli.d	$vr6, $vr3, 32
	xvstelm.b	$xr6, $sp, 120, 3
	xvstelm.b	$xr6, $sp, 112, 2
	xvstelm.b	$xr6, $sp, 104, 1
	xvstelm.b	$xr6, $sp, 96, 0
	st.b	$zero, $sp, 255
	st.h	$zero, $sp, 253
	st.w	$zero, $sp, 249
	st.b	$zero, $sp, 247
	st.h	$zero, $sp, 245
	st.w	$zero, $sp, 241
	st.b	$zero, $sp, 239
	st.h	$zero, $sp, 237
	st.w	$zero, $sp, 233
	st.b	$zero, $sp, 231
	st.h	$zero, $sp, 229
	st.w	$zero, $sp, 225
	addi.d	$a7, $sp, 248
	xvstelm.b	$xr3, $a7, 0, 3
	addi.d	$a7, $sp, 240
	xvstelm.b	$xr3, $a7, 0, 2
	addi.d	$a7, $sp, 232
	xvstelm.b	$xr3, $a7, 0, 1
	addi.d	$a7, $sp, 224
	xvstelm.b	$xr3, $a7, 0, 0
	xvld	$xr3, $sp, 96
	xvld	$xr6, $sp, 224
	st.b	$zero, $sp, 159
	st.h	$zero, $sp, 157
	st.w	$zero, $sp, 153
	st.b	$zero, $sp, 151
	st.h	$zero, $sp, 149
	st.w	$zero, $sp, 145
	st.b	$zero, $sp, 143
	st.h	$zero, $sp, 141
	st.w	$zero, $sp, 137
	st.b	$zero, $sp, 135
	st.h	$zero, $sp, 133
	st.w	$zero, $sp, 129
	vsrli.d	$vr7, $vr0, 32
	addi.d	$a7, $sp, 152
	xvstelm.b	$xr7, $a7, 0, 3
	addi.d	$a7, $sp, 144
	xvstelm.b	$xr7, $a7, 0, 2
	addi.d	$a7, $sp, 136
	xvstelm.b	$xr7, $a7, 0, 1
	addi.d	$a7, $sp, 128
	xvstelm.b	$xr7, $a7, 0, 0
	st.b	$zero, $sp, 287
	st.h	$zero, $sp, 285
	st.w	$zero, $sp, 281
	st.b	$zero, $sp, 279
	st.h	$zero, $sp, 277
	st.w	$zero, $sp, 273
	st.b	$zero, $sp, 271
	st.h	$zero, $sp, 269
	st.w	$zero, $sp, 265
	st.b	$zero, $sp, 263
	st.h	$zero, $sp, 261
	st.w	$zero, $sp, 257
	addi.d	$a7, $sp, 280
	xvstelm.b	$xr0, $a7, 0, 3
	addi.d	$a7, $sp, 272
	xvstelm.b	$xr0, $a7, 0, 2
	addi.d	$a7, $sp, 264
	xvstelm.b	$xr0, $a7, 0, 1
	addi.d	$a7, $sp, 256
	xvstelm.b	$xr0, $a7, 0, 0
	xvld	$xr0, $sp, 128
	xvld	$xr7, $sp, 256
	xvst	$xr2, $a5, -128
	xvst	$xr1, $a5, -96
	xvst	$xr5, $a5, -64
	xvst	$xr4, $a5, -32
	xvst	$xr6, $a5, 0
	xvst	$xr3, $a5, 32
	xvst	$xr7, $a5, 64
	xvst	$xr0, $a5, 96
	addi.d	$a6, $a6, 32
	addi.d	$a5, $a5, 256
	bnez	$a6, .LBB48_20
# %bb.21:                               #   in Loop: Header=BB48_16 Depth=1
	move	$a6, $s6
.LBB48_22:                              # %.lr.ph.i23.preheader
                                        #   in Loop: Header=BB48_16 Depth=1
	add.d	$a5, $a6, $a2
	alsl.d	$a4, $a6, $a4, 3
	add.d	$a6, $s0, $a6
	.p2align	4, , 16
.LBB48_23:                              # %.lr.ph.i23
                                        #   Parent Loop BB48_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$a7, $a6, 0
	st.d	$a7, $a4, 0
	addi.d	$a5, $a5, 1
	addi.d	$a4, $a4, 8
	addi.d	$a6, $a6, 1
	bnez	$a5, .LBB48_23
# %bb.24:                               # %_ZL27truncOrZextVecInLoopWithVW8IhmEvPKT_PT0_i.exit27
                                        #   in Loop: Header=BB48_16 Depth=1
	addi.d	$s2, $s2, -1
	bnez	$s2, .LBB48_16
.LBB48_25:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1058:
	move	$a0, $s7
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1059:
# %bb.26:                               # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit35
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 568
	beqz	$a0, .LBB48_28
# %bb.27:                               # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i37
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB48_28:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit41
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	addi.d	$sp, $fp, -672
	ld.d	$s8, $sp, 584                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 592                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 600                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 608                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 616                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 624                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 632                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 640                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 648                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 656                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 664                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 672
	ret
.LBB48_29:
.Ltmp1041:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1042:
# %bb.30:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	add.d	$a0, $s0, $s2
	ldx.bu	$a1, $a0, $s5
.Ltmp1043:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp1044:
# %bb.31:
.Ltmp1045:
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1046:
# %bb.32:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit17
	ldx.d	$a1, $s4, $s8
.Ltmp1047:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1048:
# %bb.33:                               # %_ZNSolsEm.exit
.Ltmp1049:
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1050:
# %bb.34:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit20
	ldx.d	$a1, $s1, $s8
.Ltmp1051:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1052:
# %bb.35:                               # %_ZNSolsEm.exit22
.Ltmp1053:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp1054:
# %bb.36:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB48_37:                              # %.thread
.Ltmp1037:
	move	$s2, $a0
	b	.LBB48_43
.LBB48_38:
.Ltmp1034:
	move	$s2, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB48_39:
.Ltmp1060:
	b	.LBB48_42
.LBB48_40:
.Ltmp1055:
	b	.LBB48_42
.LBB48_41:
.Ltmp1040:
.LBB48_42:
	move	$s2, $a0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s4, $sp, 568
	beqz	$s4, .LBB48_44
.LBB48_43:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i30
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB48_44:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end48:
	.size	_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint64_t_RN9benchmark5StateE, .Lfunc_end48-_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint64_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table48:
.Lexception48:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end48-.Lcst_begin48
.Lcst_begin48:
	.uleb128 .Lfunc_begin48-.Lfunc_begin48  # >> Call Site 1 <<
	.uleb128 .Ltmp1032-.Lfunc_begin48       #   Call between .Lfunc_begin48 and .Ltmp1032
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1032-.Lfunc_begin48       # >> Call Site 2 <<
	.uleb128 .Ltmp1033-.Ltmp1032            #   Call between .Ltmp1032 and .Ltmp1033
	.uleb128 .Ltmp1034-.Lfunc_begin48       #     jumps to .Ltmp1034
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1035-.Lfunc_begin48       # >> Call Site 3 <<
	.uleb128 .Ltmp1036-.Ltmp1035            #   Call between .Ltmp1035 and .Ltmp1036
	.uleb128 .Ltmp1037-.Lfunc_begin48       #     jumps to .Ltmp1037
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1038-.Lfunc_begin48       # >> Call Site 4 <<
	.uleb128 .Ltmp1039-.Ltmp1038            #   Call between .Ltmp1038 and .Ltmp1039
	.uleb128 .Ltmp1040-.Lfunc_begin48       #     jumps to .Ltmp1040
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1056-.Lfunc_begin48       # >> Call Site 5 <<
	.uleb128 .Ltmp1059-.Ltmp1056            #   Call between .Ltmp1056 and .Ltmp1059
	.uleb128 .Ltmp1060-.Lfunc_begin48       #     jumps to .Ltmp1060
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1059-.Lfunc_begin48       # >> Call Site 6 <<
	.uleb128 .Ltmp1041-.Ltmp1059            #   Call between .Ltmp1059 and .Ltmp1041
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1041-.Lfunc_begin48       # >> Call Site 7 <<
	.uleb128 .Ltmp1054-.Ltmp1041            #   Call between .Ltmp1041 and .Ltmp1054
	.uleb128 .Ltmp1055-.Lfunc_begin48       #     jumps to .Ltmp1055
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1054-.Lfunc_begin48       # >> Call Site 8 <<
	.uleb128 .Lfunc_end48-.Ltmp1054         #   Call between .Ltmp1054 and .Lfunc_end48
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end48:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint64_t_RN9benchmark5StateE # -- Begin function _Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint64_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint64_t_RN9benchmark5StateE,@function
_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint64_t_RN9benchmark5StateE: # @_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint64_t_RN9benchmark5StateE
.Lfunc_begin49:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception49
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s0, $a0
	lu12i.w	$s7, 2
	ori	$s1, $s7, 1808
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp1061:
	lu12i.w	$s2, 19
	ori	$s3, $s2, 2176
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1062:
# %bb.1:                                # %.split
	move	$s4, $a0
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$a0, $sp, 24
.Ltmp1064:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1065:
# %bb.2:
	move	$s0, $a0
	ori	$a0, $s7, 1793
	add.d	$a0, $fp, $a0
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	ori	$a0, $s2, 2048
	add.d	$s8, $s4, $a0
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 38
	lu12i.w	$s6, -3
	ori	$s2, $s6, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB49_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp1067:
	addi.d	$a0, $sp, 38
	addi.d	$a2, $sp, 38
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1068:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB49_3 Depth=1
	add.d	$a1, $fp, $s2
	addi.d	$s2, $s2, 1
	stx.b	$a0, $a1, $s1
	bnez	$s2, .LBB49_3
# %bb.5:                                # %vector.ph
	ori	$a0, $s6, 2288
	vrepli.b	$vr0, 0
	move	$a1, $s0
	.p2align	4, , 16
.LBB49_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a0
	ldx.h	$a2, $a2, $s1
	vinsgr2vr.h	$vr1, $a2, 0
	vilvl.b	$vr1, $vr0, $vr1
	vilvl.h	$vr1, $vr0, $vr1
	vilvl.w	$vr1, $vr0, $vr1
	vst	$vr1, $a1, 0
	addi.d	$a0, $a0, 2
	addi.d	$a1, $a1, 16
	bnez	$a0, .LBB49_6
# %bb.7:                                # %vector.body82.preheader
	addi.d	$a0, $s4, 256
	ori	$a1, $s6, 2304
	ori	$s5, $s7, 1792
	ori	$s6, $s7, 1824
	move	$a4, $s7
	ori	$s7, $s7, 1840
	.p2align	4, , 16
.LBB49_8:                               # %vector.body82
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a1
	vldx	$vr5, $a2, $s5
	vldx	$vr10, $a2, $s1
	vldx	$vr6, $a2, $s6
	vldx	$vr1, $a2, $s7
	vpickve2gr.b	$a2, $vr5, 0
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr0, $a2, 0
	vpickve2gr.b	$a2, $vr5, 1
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr0, $a2, 1
	vpickve2gr.b	$a2, $vr5, 2
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr0, $a2, 2
	vpickve2gr.b	$a2, $vr5, 3
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr0, $a2, 3
	vpickve2gr.b	$a2, $vr5, 4
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr2, $a2, 0
	vpickve2gr.b	$a2, $vr5, 5
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr2, $a2, 1
	vpickve2gr.b	$a2, $vr5, 6
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr2, $a2, 2
	vpickve2gr.b	$a2, $vr5, 7
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr2, $a2, 3
	vpickve2gr.b	$a2, $vr5, 8
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr3, $a2, 0
	vpickve2gr.b	$a2, $vr5, 9
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr3, $a2, 1
	vpickve2gr.b	$a2, $vr5, 10
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr3, $a2, 2
	vpickve2gr.b	$a2, $vr5, 11
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr3, $a2, 3
	vpickve2gr.b	$a2, $vr5, 12
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr4, $a2, 0
	vpickve2gr.b	$a2, $vr5, 13
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr4, $a2, 1
	vpickve2gr.b	$a2, $vr5, 14
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr4, $a2, 2
	vpickve2gr.b	$a2, $vr5, 15
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr4, $a2, 3
	vpickve2gr.b	$a2, $vr10, 0
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr5, $a2, 0
	vpickve2gr.b	$a2, $vr10, 1
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr5, $a2, 1
	vpickve2gr.b	$a2, $vr10, 2
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr5, $a2, 2
	vpickve2gr.b	$a2, $vr10, 3
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr5, $a2, 3
	vpickve2gr.b	$a2, $vr10, 4
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr7, $a2, 0
	vpickve2gr.b	$a2, $vr10, 5
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr7, $a2, 1
	vpickve2gr.b	$a2, $vr10, 6
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr7, $a2, 2
	vpickve2gr.b	$a2, $vr10, 7
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr7, $a2, 3
	vpickve2gr.b	$a2, $vr10, 8
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr8, $a2, 0
	vpickve2gr.b	$a2, $vr10, 9
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr8, $a2, 1
	vpickve2gr.b	$a2, $vr10, 10
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr8, $a2, 2
	vpickve2gr.b	$a2, $vr10, 11
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr8, $a2, 3
	vpickve2gr.b	$a2, $vr10, 12
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr9, $a2, 0
	vpickve2gr.b	$a2, $vr10, 13
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr9, $a2, 1
	vpickve2gr.b	$a2, $vr10, 14
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr9, $a2, 2
	vpickve2gr.b	$a2, $vr10, 15
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr9, $a2, 3
	vpickve2gr.b	$a2, $vr6, 0
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr10, $a2, 0
	vpickve2gr.b	$a2, $vr6, 1
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr10, $a2, 1
	vpickve2gr.b	$a2, $vr6, 2
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr10, $a2, 2
	vpickve2gr.b	$a2, $vr6, 3
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr10, $a2, 3
	vpickve2gr.b	$a2, $vr6, 4
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr11, $a2, 0
	vpickve2gr.b	$a2, $vr6, 5
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr11, $a2, 1
	vpickve2gr.b	$a2, $vr6, 6
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr11, $a2, 2
	vpickve2gr.b	$a2, $vr6, 7
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr11, $a2, 3
	vpickve2gr.b	$a2, $vr6, 8
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr12, $a2, 0
	vpickve2gr.b	$a2, $vr6, 9
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr12, $a2, 1
	vpickve2gr.b	$a2, $vr6, 10
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr12, $a2, 2
	vpickve2gr.b	$a2, $vr6, 11
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr12, $a2, 3
	vpickve2gr.b	$a2, $vr6, 12
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr13, $a2, 0
	vpickve2gr.b	$a2, $vr6, 13
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr13, $a2, 1
	vpickve2gr.b	$a2, $vr6, 14
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr13, $a2, 2
	vpickve2gr.b	$a2, $vr6, 15
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr13, $a2, 3
	vpickve2gr.b	$a2, $vr1, 0
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr6, $a2, 0
	vpickve2gr.b	$a2, $vr1, 1
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr6, $a2, 1
	vpickve2gr.b	$a2, $vr1, 2
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr6, $a2, 2
	vpickve2gr.b	$a2, $vr1, 3
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr6, $a2, 3
	vpickve2gr.b	$a2, $vr1, 4
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr14, $a2, 0
	vpickve2gr.b	$a2, $vr1, 5
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr14, $a2, 1
	vpickve2gr.b	$a2, $vr1, 6
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr14, $a2, 2
	vpickve2gr.b	$a2, $vr1, 7
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr14, $a2, 3
	vpickve2gr.b	$a2, $vr1, 8
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr15, $a2, 0
	vpickve2gr.b	$a2, $vr1, 9
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr15, $a2, 1
	vpickve2gr.b	$a2, $vr1, 10
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr15, $a2, 2
	vpickve2gr.b	$a2, $vr1, 11
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr15, $a2, 3
	vpickve2gr.b	$a2, $vr1, 12
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr16, $a2, 0
	vpickve2gr.b	$a2, $vr1, 13
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr16, $a2, 1
	vpickve2gr.b	$a2, $vr1, 14
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr16, $a2, 2
	vpickve2gr.b	$a2, $vr1, 15
	andi	$a2, $a2, 255
	bstrpick.d	$a2, $a2, 15, 0
	xvinsgr2vr.d	$xr16, $a2, 3
	xvst	$xr4, $a0, -160
	xvst	$xr3, $a0, -192
	xvst	$xr2, $a0, -224
	xvst	$xr0, $a0, -256
	xvst	$xr9, $a0, -32
	xvst	$xr8, $a0, -64
	xvst	$xr7, $a0, -96
	xvst	$xr5, $a0, -128
	xvst	$xr13, $a0, 96
	xvst	$xr12, $a0, 64
	xvst	$xr11, $a0, 32
	xvst	$xr10, $a0, 0
	xvst	$xr16, $a0, 224
	xvst	$xr15, $a0, 192
	xvst	$xr14, $a0, 160
	xvst	$xr6, $a0, 128
	addi.d	$a1, $a1, 64
	addi.d	$a0, $a0, 512
	bnez	$a1, .LBB49_8
# %bb.9:                                # %.lr.ph.i
	move	$s2, $zero
	ldx.bu	$a0, $fp, $s5
	ld.d	$a5, $sp, 16                    # 8-byte Folded Reload
	ld.bu	$a1, $a5, 0
	ld.bu	$a2, $a5, 1
	ld.bu	$a3, $a5, 2
	st.d	$a0, $s8, 0
	st.d	$a1, $s8, 8
	st.d	$a2, $s8, 16
	st.d	$a3, $s8, 24
	ori	$a0, $a4, 1796
	ldx.bu	$a0, $fp, $a0
	ld.bu	$a1, $a5, 4
	ld.bu	$a2, $a5, 5
	ld.bu	$a3, $a5, 6
	st.d	$a0, $s8, 32
	st.d	$a1, $s8, 40
	st.d	$a2, $s8, 48
	st.d	$a3, $s8, 56
	ori	$a0, $a4, 1800
	ldx.bu	$a0, $fp, $a0
	ld.bu	$a1, $a5, 8
	ld.bu	$a2, $a5, 9
	ld.bu	$a3, $a5, 10
	st.d	$a0, $s8, 64
	st.d	$a1, $s8, 72
	st.d	$a2, $s8, 80
	st.d	$a3, $s8, 88
	ori	$a0, $a4, 1804
	ldx.bu	$a0, $fp, $a0
	ld.bu	$a1, $a5, 12
	ld.bu	$a2, $a5, 13
	ld.bu	$a3, $a5, 14
	st.d	$a0, $s8, 96
	st.d	$a1, $s8, 104
	st.d	$a2, $s8, 112
	st.d	$a3, $s8, 120
	lu12i.w	$a0, -3
	ori	$s8, $a0, 2288
	.p2align	4, , 16
.LBB49_10:                              # %_ZL28truncOrZextVecInLoopWithVW16IhmEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	ldx.d	$a0, $s4, $s2
	ldx.d	$a1, $s0, $s2
	bne	$a0, $a1, .LBB49_29
# %bb.11:                               # %_ZL28truncOrZextVecInLoopWithVW16IhmEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB49_10 Depth=1
	addi.d	$s8, $s8, 1
	addi.d	$s2, $s2, 8
	bnez	$s8, .LBB49_10
# %bb.12:
	ld.d	$s8, $sp, 8                     # 8-byte Folded Reload
	ld.w	$s4, $s8, 28
	ld.d	$s2, $s8, 16
.Ltmp1085:
	move	$a0, $s8
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1086:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s4, .LBB49_25
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s2, .LBB49_25
# %bb.15:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s1
	addi.d	$a1, $sp, 24
	lu12i.w	$a3, -3
	ori	$a2, $a3, 2288
	ori	$a3, $a3, 2304
	.p2align	4, , 16
.LBB49_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_20 Depth 2
                                        #     Child Loop BB49_23 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a4, $sp, 24
	bgeu	$a4, $a0, .LBB49_19
# %bb.17:                               # %.lr.ph
                                        #   in Loop: Header=BB49_16 Depth=1
	add.d	$a5, $a4, $s3
	bgeu	$fp, $a5, .LBB49_19
# %bb.18:                               #   in Loop: Header=BB49_16 Depth=1
	move	$a6, $zero
	b	.LBB49_22
	.p2align	4, , 16
.LBB49_19:                              # %vector.body93.preheader
                                        #   in Loop: Header=BB49_16 Depth=1
	addi.d	$a5, $a4, 256
	move	$a6, $a3
	.p2align	4, , 16
.LBB49_20:                              # %vector.body93
                                        #   Parent Loop BB49_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a7, $fp, $a6
	vldx	$vr5, $a7, $s5
	vldx	$vr10, $a7, $s1
	vldx	$vr6, $a7, $s6
	vldx	$vr1, $a7, $s7
	vpickve2gr.b	$a7, $vr5, 0
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr0, $a7, 0
	vpickve2gr.b	$a7, $vr5, 1
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr0, $a7, 1
	vpickve2gr.b	$a7, $vr5, 2
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr0, $a7, 2
	vpickve2gr.b	$a7, $vr5, 3
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr0, $a7, 3
	vpickve2gr.b	$a7, $vr5, 4
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr2, $a7, 0
	vpickve2gr.b	$a7, $vr5, 5
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr2, $a7, 1
	vpickve2gr.b	$a7, $vr5, 6
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr2, $a7, 2
	vpickve2gr.b	$a7, $vr5, 7
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr2, $a7, 3
	vpickve2gr.b	$a7, $vr5, 8
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr3, $a7, 0
	vpickve2gr.b	$a7, $vr5, 9
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr3, $a7, 1
	vpickve2gr.b	$a7, $vr5, 10
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr3, $a7, 2
	vpickve2gr.b	$a7, $vr5, 11
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr3, $a7, 3
	vpickve2gr.b	$a7, $vr5, 12
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr4, $a7, 0
	vpickve2gr.b	$a7, $vr5, 13
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr4, $a7, 1
	vpickve2gr.b	$a7, $vr5, 14
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr4, $a7, 2
	vpickve2gr.b	$a7, $vr5, 15
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr4, $a7, 3
	vpickve2gr.b	$a7, $vr10, 0
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr5, $a7, 0
	vpickve2gr.b	$a7, $vr10, 1
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr5, $a7, 1
	vpickve2gr.b	$a7, $vr10, 2
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr5, $a7, 2
	vpickve2gr.b	$a7, $vr10, 3
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr5, $a7, 3
	vpickve2gr.b	$a7, $vr10, 4
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr7, $a7, 0
	vpickve2gr.b	$a7, $vr10, 5
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr7, $a7, 1
	vpickve2gr.b	$a7, $vr10, 6
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr7, $a7, 2
	vpickve2gr.b	$a7, $vr10, 7
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr7, $a7, 3
	vpickve2gr.b	$a7, $vr10, 8
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr8, $a7, 0
	vpickve2gr.b	$a7, $vr10, 9
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr8, $a7, 1
	vpickve2gr.b	$a7, $vr10, 10
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr8, $a7, 2
	vpickve2gr.b	$a7, $vr10, 11
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr8, $a7, 3
	vpickve2gr.b	$a7, $vr10, 12
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr9, $a7, 0
	vpickve2gr.b	$a7, $vr10, 13
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr9, $a7, 1
	vpickve2gr.b	$a7, $vr10, 14
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr9, $a7, 2
	vpickve2gr.b	$a7, $vr10, 15
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr9, $a7, 3
	vpickve2gr.b	$a7, $vr6, 0
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr10, $a7, 0
	vpickve2gr.b	$a7, $vr6, 1
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr10, $a7, 1
	vpickve2gr.b	$a7, $vr6, 2
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr10, $a7, 2
	vpickve2gr.b	$a7, $vr6, 3
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr10, $a7, 3
	vpickve2gr.b	$a7, $vr6, 4
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr11, $a7, 0
	vpickve2gr.b	$a7, $vr6, 5
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr11, $a7, 1
	vpickve2gr.b	$a7, $vr6, 6
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr11, $a7, 2
	vpickve2gr.b	$a7, $vr6, 7
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr11, $a7, 3
	vpickve2gr.b	$a7, $vr6, 8
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr12, $a7, 0
	vpickve2gr.b	$a7, $vr6, 9
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr12, $a7, 1
	vpickve2gr.b	$a7, $vr6, 10
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr12, $a7, 2
	vpickve2gr.b	$a7, $vr6, 11
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr12, $a7, 3
	vpickve2gr.b	$a7, $vr6, 12
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr13, $a7, 0
	vpickve2gr.b	$a7, $vr6, 13
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr13, $a7, 1
	vpickve2gr.b	$a7, $vr6, 14
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr13, $a7, 2
	vpickve2gr.b	$a7, $vr6, 15
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr13, $a7, 3
	vpickve2gr.b	$a7, $vr1, 0
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr6, $a7, 0
	vpickve2gr.b	$a7, $vr1, 1
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr6, $a7, 1
	vpickve2gr.b	$a7, $vr1, 2
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr6, $a7, 2
	vpickve2gr.b	$a7, $vr1, 3
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr6, $a7, 3
	vpickve2gr.b	$a7, $vr1, 4
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr14, $a7, 0
	vpickve2gr.b	$a7, $vr1, 5
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr14, $a7, 1
	vpickve2gr.b	$a7, $vr1, 6
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr14, $a7, 2
	vpickve2gr.b	$a7, $vr1, 7
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr14, $a7, 3
	vpickve2gr.b	$a7, $vr1, 8
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr15, $a7, 0
	vpickve2gr.b	$a7, $vr1, 9
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr15, $a7, 1
	vpickve2gr.b	$a7, $vr1, 10
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr15, $a7, 2
	vpickve2gr.b	$a7, $vr1, 11
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr15, $a7, 3
	vpickve2gr.b	$a7, $vr1, 12
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr16, $a7, 0
	vpickve2gr.b	$a7, $vr1, 13
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr16, $a7, 1
	vpickve2gr.b	$a7, $vr1, 14
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr16, $a7, 2
	vpickve2gr.b	$a7, $vr1, 15
	andi	$a7, $a7, 255
	bstrpick.d	$a7, $a7, 15, 0
	xvinsgr2vr.d	$xr16, $a7, 3
	xvst	$xr4, $a5, -160
	xvst	$xr3, $a5, -192
	xvst	$xr2, $a5, -224
	xvst	$xr0, $a5, -256
	xvst	$xr9, $a5, -32
	xvst	$xr8, $a5, -64
	xvst	$xr7, $a5, -96
	xvst	$xr5, $a5, -128
	xvst	$xr13, $a5, 96
	xvst	$xr12, $a5, 64
	xvst	$xr11, $a5, 32
	xvst	$xr10, $a5, 0
	xvst	$xr16, $a5, 224
	xvst	$xr15, $a5, 192
	xvst	$xr14, $a5, 160
	xvst	$xr6, $a5, 128
	addi.d	$a6, $a6, 64
	addi.d	$a5, $a5, 512
	bnez	$a6, .LBB49_20
# %bb.21:                               #   in Loop: Header=BB49_16 Depth=1
	move	$a6, $s5
.LBB49_22:                              # %.lr.ph.i23.preheader
                                        #   in Loop: Header=BB49_16 Depth=1
	add.d	$a5, $a6, $a2
	alsl.d	$a4, $a6, $a4, 3
	add.d	$a6, $fp, $a6
	.p2align	4, , 16
.LBB49_23:                              # %.lr.ph.i23
                                        #   Parent Loop BB49_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$a7, $a6, 0
	st.d	$a7, $a4, 0
	addi.d	$a5, $a5, 1
	addi.d	$a4, $a4, 8
	addi.d	$a6, $a6, 1
	bnez	$a5, .LBB49_23
# %bb.24:                               # %_ZL28truncOrZextVecInLoopWithVW16IhmEvPKT_PT0_i.exit27
                                        #   in Loop: Header=BB49_16 Depth=1
	addi.d	$s2, $s2, -1
	bnez	$s2, .LBB49_16
.LBB49_25:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1087:
	move	$a0, $s8
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1088:
# %bb.26:                               # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit35
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 24
	beqz	$a0, .LBB49_28
# %bb.27:                               # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i37
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB49_28:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit41
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB49_29:
.Ltmp1070:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1071:
# %bb.30:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	add.d	$a0, $fp, $s8
	ldx.bu	$a1, $a0, $s1
.Ltmp1072:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp1073:
# %bb.31:
.Ltmp1074:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1075:
# %bb.32:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit17
	ldx.d	$a1, $s4, $s2
.Ltmp1076:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1077:
# %bb.33:                               # %_ZNSolsEm.exit
.Ltmp1078:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1079:
# %bb.34:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit20
	ldx.d	$a1, $s0, $s2
.Ltmp1080:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1081:
# %bb.35:                               # %_ZNSolsEm.exit22
.Ltmp1082:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp1083:
# %bb.36:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB49_37:                              # %.thread
.Ltmp1066:
	move	$s1, $a0
	b	.LBB49_43
.LBB49_38:
.Ltmp1063:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB49_39:
.Ltmp1089:
	b	.LBB49_42
.LBB49_40:
.Ltmp1084:
	b	.LBB49_42
.LBB49_41:
.Ltmp1069:
.LBB49_42:
	move	$s1, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s4, $sp, 24
	beqz	$s4, .LBB49_44
.LBB49_43:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i30
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB49_44:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end49:
	.size	_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint64_t_RN9benchmark5StateE, .Lfunc_end49-_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint64_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table49:
.Lexception49:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end49-.Lcst_begin49
.Lcst_begin49:
	.uleb128 .Lfunc_begin49-.Lfunc_begin49  # >> Call Site 1 <<
	.uleb128 .Ltmp1061-.Lfunc_begin49       #   Call between .Lfunc_begin49 and .Ltmp1061
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1061-.Lfunc_begin49       # >> Call Site 2 <<
	.uleb128 .Ltmp1062-.Ltmp1061            #   Call between .Ltmp1061 and .Ltmp1062
	.uleb128 .Ltmp1063-.Lfunc_begin49       #     jumps to .Ltmp1063
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1064-.Lfunc_begin49       # >> Call Site 3 <<
	.uleb128 .Ltmp1065-.Ltmp1064            #   Call between .Ltmp1064 and .Ltmp1065
	.uleb128 .Ltmp1066-.Lfunc_begin49       #     jumps to .Ltmp1066
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1067-.Lfunc_begin49       # >> Call Site 4 <<
	.uleb128 .Ltmp1068-.Ltmp1067            #   Call between .Ltmp1067 and .Ltmp1068
	.uleb128 .Ltmp1069-.Lfunc_begin49       #     jumps to .Ltmp1069
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1085-.Lfunc_begin49       # >> Call Site 5 <<
	.uleb128 .Ltmp1088-.Ltmp1085            #   Call between .Ltmp1085 and .Ltmp1088
	.uleb128 .Ltmp1089-.Lfunc_begin49       #     jumps to .Ltmp1089
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1088-.Lfunc_begin49       # >> Call Site 6 <<
	.uleb128 .Ltmp1070-.Ltmp1088            #   Call between .Ltmp1088 and .Ltmp1070
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1070-.Lfunc_begin49       # >> Call Site 7 <<
	.uleb128 .Ltmp1083-.Ltmp1070            #   Call between .Ltmp1070 and .Ltmp1083
	.uleb128 .Ltmp1084-.Lfunc_begin49       #     jumps to .Ltmp1084
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1083-.Lfunc_begin49       # >> Call Site 8 <<
	.uleb128 .Lfunc_end49-.Ltmp1083         #   Call between .Ltmp1083 and .Lfunc_end49
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end49:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint64_t_RN9benchmark5StateE # -- Begin function _Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint64_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint64_t_RN9benchmark5StateE,@function
_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint64_t_RN9benchmark5StateE: # @_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint64_t_RN9benchmark5StateE
.Lfunc_begin50:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception50
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s2, $a0
	lu12i.w	$s7, 2
	ori	$s1, $s7, 1808
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp1090:
	lu12i.w	$a0, 19
	ori	$s3, $a0, 2176
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1091:
# %bb.1:
	move	$s4, $a0
	st.d	$a0, $sp, 24
.Ltmp1093:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1094:
# %bb.2:
	move	$s0, $a0
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 38
	lu12i.w	$s6, -3
	ori	$s8, $s6, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB50_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp1096:
	addi.d	$a0, $sp, 38
	addi.d	$a2, $sp, 38
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1097:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB50_3 Depth=1
	add.d	$a1, $fp, $s8
	addi.d	$s8, $s8, 1
	stx.b	$a0, $a1, $s1
	bnez	$s8, .LBB50_3
# %bb.5:                                # %vector.ph
	ori	$a0, $s6, 2288
	vrepli.b	$vr2, 0
	move	$a1, $s0
	.p2align	4, , 16
.LBB50_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a0
	ldx.h	$a2, $a2, $s1
	vinsgr2vr.h	$vr0, $a2, 0
	vilvl.b	$vr0, $vr2, $vr0
	vilvl.h	$vr0, $vr2, $vr0
	vilvl.w	$vr0, $vr2, $vr0
	vst	$vr0, $a1, 0
	addi.d	$a0, $a0, 2
	addi.d	$a1, $a1, 16
	bnez	$a0, .LBB50_6
# %bb.7:                                # %vector.body82.preheader
	addi.d	$a0, $s4, 16
	ori	$a1, $s6, 2288
	ori	$s5, $s7, 1810
	.p2align	4, , 16
.LBB50_8:                               # %vector.body82
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a1
	ldx.h	$a3, $a2, $s1
	ldx.h	$a2, $a2, $s5
	vinsgr2vr.h	$vr0, $a3, 0
	vinsgr2vr.h	$vr1, $a2, 0
	vilvl.b	$vr0, $vr2, $vr0
	vilvl.h	$vr0, $vr2, $vr0
	vilvl.w	$vr0, $vr2, $vr0
	vilvl.b	$vr1, $vr2, $vr1
	vilvl.h	$vr1, $vr2, $vr1
	vilvl.w	$vr1, $vr2, $vr1
	vst	$vr0, $a0, -16
	vst	$vr1, $a0, 0
	addi.d	$a1, $a1, 4
	addi.d	$a0, $a0, 32
	bnez	$a1, .LBB50_8
# %bb.9:                                # %_ZL20truncOrZextVecInLoopIhmEvPKT_PT0_i.exit.preheader.preheader
	move	$s7, $zero
	ori	$s8, $s6, 2288
	.p2align	4, , 16
.LBB50_10:                              # %_ZL20truncOrZextVecInLoopIhmEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	ldx.d	$a0, $s4, $s7
	ldx.d	$a1, $s0, $s7
	bne	$a0, $a1, .LBB50_27
# %bb.11:                               # %_ZL20truncOrZextVecInLoopIhmEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB50_10 Depth=1
	addi.d	$s8, $s8, 1
	addi.d	$s7, $s7, 8
	bnez	$s8, .LBB50_10
# %bb.12:
	vst	$vr2, $sp, 0                    # 16-byte Folded Spill
	ld.w	$s7, $s2, 28
	ld.d	$s4, $s2, 16
.Ltmp1114:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1115:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	vld	$vr2, $sp, 0                    # 16-byte Folded Reload
	bnez	$s7, .LBB50_23
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s4, .LBB50_23
# %bb.15:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s1
	addi.d	$a1, $sp, 24
	ori	$a2, $s6, 2288
	b	.LBB50_17
	.p2align	4, , 16
.LBB50_16:                              # %_ZL20truncOrZextVecInLoopIhmEvPKT_PT0_i.exit27
                                        #   in Loop: Header=BB50_17 Depth=1
	addi.d	$s4, $s4, -1
	beqz	$s4, .LBB50_23
.LBB50_17:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_22 Depth 2
                                        #     Child Loop BB50_20 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a3, $sp, 24
	bgeu	$a3, $a0, .LBB50_21
# %bb.18:                               # %.lr.ph
                                        #   in Loop: Header=BB50_17 Depth=1
	add.d	$a4, $a3, $s3
	bgeu	$fp, $a4, .LBB50_21
# %bb.19:                               # %.lr.ph.i23.preheader
                                        #   in Loop: Header=BB50_17 Depth=1
	move	$a4, $a2
	.p2align	4, , 16
.LBB50_20:                              # %.lr.ph.i23
                                        #   Parent Loop BB50_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a5, $fp, $a4
	ldx.bu	$a5, $a5, $s1
	st.d	$a5, $a3, 0
	addi.d	$a4, $a4, 1
	addi.d	$a3, $a3, 8
	bnez	$a4, .LBB50_20
	b	.LBB50_16
	.p2align	4, , 16
.LBB50_21:                              # %vector.body91.preheader
                                        #   in Loop: Header=BB50_17 Depth=1
	addi.d	$a3, $a3, 16
	move	$a4, $a2
	.p2align	4, , 16
.LBB50_22:                              # %vector.body91
                                        #   Parent Loop BB50_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a5, $fp, $a4
	ldx.h	$a6, $a5, $s1
	ldx.h	$a5, $a5, $s5
	vinsgr2vr.h	$vr0, $a6, 0
	vinsgr2vr.h	$vr1, $a5, 0
	vilvl.b	$vr0, $vr2, $vr0
	vilvl.h	$vr0, $vr2, $vr0
	vilvl.w	$vr0, $vr2, $vr0
	vilvl.b	$vr1, $vr2, $vr1
	vilvl.h	$vr1, $vr2, $vr1
	vilvl.w	$vr1, $vr2, $vr1
	vst	$vr0, $a3, -16
	vst	$vr1, $a3, 0
	addi.d	$a4, $a4, 4
	addi.d	$a3, $a3, 32
	bnez	$a4, .LBB50_22
	b	.LBB50_16
.LBB50_23:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1116:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1117:
# %bb.24:                               # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit35
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 24
	beqz	$a0, .LBB50_26
# %bb.25:                               # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i37
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB50_26:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit41
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB50_27:
.Ltmp1099:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1100:
# %bb.28:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	add.d	$a0, $fp, $s8
	ldx.bu	$a1, $a0, $s1
.Ltmp1101:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h)
	jirl	$ra, $ra, 0
.Ltmp1102:
# %bb.29:
.Ltmp1103:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1104:
# %bb.30:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit17
	ldx.d	$a1, $s4, $s7
.Ltmp1105:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1106:
# %bb.31:                               # %_ZNSolsEm.exit
.Ltmp1107:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1108:
# %bb.32:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit20
	ldx.d	$a1, $s0, $s7
.Ltmp1109:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1110:
# %bb.33:                               # %_ZNSolsEm.exit22
.Ltmp1111:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp1112:
# %bb.34:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB50_35:                              # %.thread
.Ltmp1095:
	move	$s1, $a0
	b	.LBB50_41
.LBB50_36:
.Ltmp1092:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB50_37:
.Ltmp1118:
	b	.LBB50_40
.LBB50_38:
.Ltmp1113:
	b	.LBB50_40
.LBB50_39:
.Ltmp1098:
.LBB50_40:
	move	$s1, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s4, $sp, 24
	beqz	$s4, .LBB50_42
.LBB50_41:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i30
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB50_42:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end50:
	.size	_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint64_t_RN9benchmark5StateE, .Lfunc_end50-_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint64_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table50:
.Lexception50:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end50-.Lcst_begin50
.Lcst_begin50:
	.uleb128 .Lfunc_begin50-.Lfunc_begin50  # >> Call Site 1 <<
	.uleb128 .Ltmp1090-.Lfunc_begin50       #   Call between .Lfunc_begin50 and .Ltmp1090
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1090-.Lfunc_begin50       # >> Call Site 2 <<
	.uleb128 .Ltmp1091-.Ltmp1090            #   Call between .Ltmp1090 and .Ltmp1091
	.uleb128 .Ltmp1092-.Lfunc_begin50       #     jumps to .Ltmp1092
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1093-.Lfunc_begin50       # >> Call Site 3 <<
	.uleb128 .Ltmp1094-.Ltmp1093            #   Call between .Ltmp1093 and .Ltmp1094
	.uleb128 .Ltmp1095-.Lfunc_begin50       #     jumps to .Ltmp1095
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1096-.Lfunc_begin50       # >> Call Site 4 <<
	.uleb128 .Ltmp1097-.Ltmp1096            #   Call between .Ltmp1096 and .Ltmp1097
	.uleb128 .Ltmp1098-.Lfunc_begin50       #     jumps to .Ltmp1098
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1114-.Lfunc_begin50       # >> Call Site 5 <<
	.uleb128 .Ltmp1117-.Ltmp1114            #   Call between .Ltmp1114 and .Ltmp1117
	.uleb128 .Ltmp1118-.Lfunc_begin50       #     jumps to .Ltmp1118
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1117-.Lfunc_begin50       # >> Call Site 6 <<
	.uleb128 .Ltmp1099-.Ltmp1117            #   Call between .Ltmp1117 and .Ltmp1099
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1099-.Lfunc_begin50       # >> Call Site 7 <<
	.uleb128 .Ltmp1112-.Ltmp1099            #   Call between .Ltmp1099 and .Ltmp1112
	.uleb128 .Ltmp1113-.Lfunc_begin50       #     jumps to .Ltmp1113
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1112-.Lfunc_begin50       # >> Call Site 8 <<
	.uleb128 .Lfunc_end50-.Ltmp1112         #   Call between .Ltmp1112 and .Lfunc_end50
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end50:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint64_t_RN9benchmark5StateE
.LCPI51_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint64_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint64_t_RN9benchmark5StateE,@function
_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint64_t_RN9benchmark5StateE: # @_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint64_t_RN9benchmark5StateE
.Lfunc_begin51:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception51
# %bb.0:
	addi.d	$sp, $sp, -384
	.cfi_def_cfa_offset 384
	st.d	$ra, $sp, 376                   # 8-byte Folded Spill
	st.d	$fp, $sp, 368                   # 8-byte Folded Spill
	st.d	$s0, $sp, 360                   # 8-byte Folded Spill
	st.d	$s1, $sp, 352                   # 8-byte Folded Spill
	st.d	$s2, $sp, 344                   # 8-byte Folded Spill
	st.d	$s3, $sp, 336                   # 8-byte Folded Spill
	st.d	$s4, $sp, 328                   # 8-byte Folded Spill
	st.d	$s5, $sp, 320                   # 8-byte Folded Spill
	st.d	$s6, $sp, 312                   # 8-byte Folded Spill
	st.d	$s7, $sp, 304                   # 8-byte Folded Spill
	st.d	$s8, $sp, 296                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	addi.d	$fp, $sp, 384
	.cfi_def_cfa 22, 0
	bstrins.d	$sp, $zero, 4, 0
	move	$s1, $a0
	lu12i.w	$s6, 2
	ori	$s3, $s6, 1808
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$s0, $a0
.Ltmp1119:
	lu12i.w	$a0, 19
	ori	$s2, $a0, 2176
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1120:
# %bb.1:
	move	$s4, $a0
	st.d	$a0, $sp, 264
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 272
	lu12i.w	$s7, -3
	ori	$s8, $s7, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB51_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp1122:
	addi.d	$a0, $sp, 272
	addi.d	$a2, $sp, 272
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1123:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB51_2 Depth=1
	add.d	$a1, $s0, $s8
	addi.d	$s8, $s8, 1
	stx.b	$a0, $a1, $s3
	bnez	$s8, .LBB51_2
# %bb.4:
	pcalau12i	$a0, %pc_hi20(.LCPI51_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI51_0)
	move	$s8, $zero
	vst	$vr0, $sp, 272
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB51_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp1125:
	addi.d	$a0, $sp, 272
	addi.d	$a2, $sp, 272
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1126:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB51_5 Depth=1
	stx.d	$a0, $s4, $s8
	addi.d	$s8, $s8, 8
	bne	$s8, $s2, .LBB51_5
# %bb.7:
	ld.w	$s5, $s1, 28
	ld.d	$s4, $s1, 16
.Ltmp1128:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1129:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s5, .LBB51_20
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s4, .LBB51_20
# %bb.10:                               # %.lr.ph.preheader
	add.d	$a0, $s0, $s3
	addi.d	$a1, $sp, 264
	ori	$a2, $s7, 2288
	ori	$a3, $s7, 2304
	ori	$a4, $s6, 1792
	.p2align	4, , 16
.LBB51_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_15 Depth 2
                                        #     Child Loop BB51_18 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a5, $sp, 264
	bgeu	$a5, $a0, .LBB51_14
# %bb.12:                               # %.lr.ph
                                        #   in Loop: Header=BB51_11 Depth=1
	add.d	$a6, $a5, $s2
	bgeu	$s0, $a6, .LBB51_14
# %bb.13:                               #   in Loop: Header=BB51_11 Depth=1
	move	$a7, $zero
	b	.LBB51_17
	.p2align	4, , 16
.LBB51_14:                              # %vector.body.preheader
                                        #   in Loop: Header=BB51_11 Depth=1
	addi.d	$a6, $a5, 128
	move	$a7, $a3
	.p2align	4, , 16
.LBB51_15:                              # %vector.body
                                        #   Parent Loop BB51_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$t0, $s0, $a7
	ldptr.d	$t1, $t0, 9984
	ldptr.d	$t2, $t0, 9992
	ldptr.d	$t3, $t0, 10000
	ldptr.d	$t0, $t0, 10008
	vinsgr2vr.d	$vr1, $t1, 0
	vinsgr2vr.d	$vr4, $t2, 0
	vinsgr2vr.d	$vr3, $t3, 0
	vinsgr2vr.d	$vr0, $t0, 0
	st.b	$zero, $sp, 159
	st.h	$zero, $sp, 157
	st.w	$zero, $sp, 153
	st.b	$zero, $sp, 151
	st.h	$zero, $sp, 149
	st.w	$zero, $sp, 145
	st.b	$zero, $sp, 143
	st.h	$zero, $sp, 141
	st.w	$zero, $sp, 137
	st.b	$zero, $sp, 135
	st.h	$zero, $sp, 133
	st.w	$zero, $sp, 129
	addi.d	$t0, $sp, 152
	xvstelm.b	$xr1, $t0, 0, 3
	addi.d	$t0, $sp, 144
	xvstelm.b	$xr1, $t0, 0, 2
	addi.d	$t0, $sp, 136
	xvstelm.b	$xr1, $t0, 0, 1
	addi.d	$t0, $sp, 128
	xvstelm.b	$xr1, $t0, 0, 0
	st.b	$zero, $sp, 31
	st.h	$zero, $sp, 29
	st.w	$zero, $sp, 25
	st.b	$zero, $sp, 23
	st.h	$zero, $sp, 21
	st.w	$zero, $sp, 17
	st.b	$zero, $sp, 15
	st.h	$zero, $sp, 13
	st.w	$zero, $sp, 9
	st.b	$zero, $sp, 7
	st.h	$zero, $sp, 5
	st.w	$zero, $sp, 1
	vsrli.d	$vr1, $vr1, 32
	xvstelm.b	$xr1, $sp, 24, 3
	xvstelm.b	$xr1, $sp, 16, 2
	xvstelm.b	$xr1, $sp, 8, 1
	xvstelm.b	$xr1, $sp, 0, 0
	xvld	$xr1, $sp, 128
	xvld	$xr2, $sp, 0
	st.b	$zero, $sp, 191
	st.h	$zero, $sp, 189
	st.w	$zero, $sp, 185
	st.b	$zero, $sp, 183
	st.h	$zero, $sp, 181
	st.w	$zero, $sp, 177
	st.b	$zero, $sp, 175
	st.h	$zero, $sp, 173
	st.w	$zero, $sp, 169
	st.b	$zero, $sp, 167
	st.h	$zero, $sp, 165
	st.w	$zero, $sp, 161
	addi.d	$t0, $sp, 184
	xvstelm.b	$xr4, $t0, 0, 3
	addi.d	$t0, $sp, 176
	xvstelm.b	$xr4, $t0, 0, 2
	addi.d	$t0, $sp, 168
	xvstelm.b	$xr4, $t0, 0, 1
	addi.d	$t0, $sp, 160
	xvstelm.b	$xr4, $t0, 0, 0
	st.b	$zero, $sp, 63
	st.h	$zero, $sp, 61
	st.w	$zero, $sp, 57
	st.b	$zero, $sp, 55
	st.h	$zero, $sp, 53
	st.w	$zero, $sp, 49
	st.b	$zero, $sp, 47
	st.h	$zero, $sp, 45
	st.w	$zero, $sp, 41
	st.b	$zero, $sp, 39
	st.h	$zero, $sp, 37
	st.w	$zero, $sp, 33
	vsrli.d	$vr4, $vr4, 32
	xvstelm.b	$xr4, $sp, 56, 3
	xvstelm.b	$xr4, $sp, 48, 2
	xvstelm.b	$xr4, $sp, 40, 1
	xvstelm.b	$xr4, $sp, 32, 0
	xvld	$xr4, $sp, 160
	xvld	$xr5, $sp, 32
	st.b	$zero, $sp, 223
	st.h	$zero, $sp, 221
	st.w	$zero, $sp, 217
	st.b	$zero, $sp, 215
	st.h	$zero, $sp, 213
	st.w	$zero, $sp, 209
	st.b	$zero, $sp, 207
	st.h	$zero, $sp, 205
	st.w	$zero, $sp, 201
	st.b	$zero, $sp, 199
	st.h	$zero, $sp, 197
	st.w	$zero, $sp, 193
	addi.d	$t0, $sp, 216
	xvstelm.b	$xr3, $t0, 0, 3
	addi.d	$t0, $sp, 208
	xvstelm.b	$xr3, $t0, 0, 2
	addi.d	$t0, $sp, 200
	xvstelm.b	$xr3, $t0, 0, 1
	addi.d	$t0, $sp, 192
	xvstelm.b	$xr3, $t0, 0, 0
	st.b	$zero, $sp, 95
	st.h	$zero, $sp, 93
	st.w	$zero, $sp, 89
	st.b	$zero, $sp, 87
	st.h	$zero, $sp, 85
	st.w	$zero, $sp, 81
	st.b	$zero, $sp, 79
	st.h	$zero, $sp, 77
	st.w	$zero, $sp, 73
	st.b	$zero, $sp, 71
	st.h	$zero, $sp, 69
	st.w	$zero, $sp, 65
	vsrli.d	$vr3, $vr3, 32
	xvstelm.b	$xr3, $sp, 88, 3
	xvstelm.b	$xr3, $sp, 80, 2
	xvstelm.b	$xr3, $sp, 72, 1
	xvstelm.b	$xr3, $sp, 64, 0
	xvld	$xr3, $sp, 192
	xvld	$xr6, $sp, 64
	st.b	$zero, $sp, 255
	st.h	$zero, $sp, 253
	st.w	$zero, $sp, 249
	st.b	$zero, $sp, 247
	st.h	$zero, $sp, 245
	st.w	$zero, $sp, 241
	st.b	$zero, $sp, 239
	st.h	$zero, $sp, 237
	st.w	$zero, $sp, 233
	st.b	$zero, $sp, 231
	st.h	$zero, $sp, 229
	st.w	$zero, $sp, 225
	addi.d	$t0, $sp, 248
	xvstelm.b	$xr0, $t0, 0, 3
	addi.d	$t0, $sp, 240
	xvstelm.b	$xr0, $t0, 0, 2
	addi.d	$t0, $sp, 232
	xvstelm.b	$xr0, $t0, 0, 1
	addi.d	$t0, $sp, 224
	xvstelm.b	$xr0, $t0, 0, 0
	st.b	$zero, $sp, 127
	st.h	$zero, $sp, 125
	st.w	$zero, $sp, 121
	st.b	$zero, $sp, 119
	st.h	$zero, $sp, 117
	st.w	$zero, $sp, 113
	st.b	$zero, $sp, 111
	st.h	$zero, $sp, 109
	st.w	$zero, $sp, 105
	st.b	$zero, $sp, 103
	st.h	$zero, $sp, 101
	st.w	$zero, $sp, 97
	vsrli.d	$vr0, $vr0, 32
	xvstelm.b	$xr0, $sp, 120, 3
	xvstelm.b	$xr0, $sp, 112, 2
	xvstelm.b	$xr0, $sp, 104, 1
	xvstelm.b	$xr0, $sp, 96, 0
	xvld	$xr0, $sp, 224
	xvld	$xr7, $sp, 96
	xvld	$xr8, $a6, -128
	xvld	$xr9, $a6, -96
	xvld	$xr10, $a6, -64
	xvld	$xr11, $a6, -32
	xvld	$xr12, $a6, 0
	xvld	$xr13, $a6, 32
	xvld	$xr14, $a6, 64
	xvld	$xr15, $a6, 96
	xvadd.d	$xr2, $xr9, $xr2
	xvadd.d	$xr1, $xr8, $xr1
	xvadd.d	$xr5, $xr11, $xr5
	xvadd.d	$xr4, $xr10, $xr4
	xvadd.d	$xr6, $xr13, $xr6
	xvadd.d	$xr3, $xr12, $xr3
	xvadd.d	$xr7, $xr15, $xr7
	xvadd.d	$xr0, $xr14, $xr0
	xvst	$xr1, $a6, -128
	xvst	$xr2, $a6, -96
	xvst	$xr4, $a6, -64
	xvst	$xr5, $a6, -32
	xvst	$xr3, $a6, 0
	xvst	$xr6, $a6, 32
	xvst	$xr0, $a6, 64
	xvst	$xr7, $a6, 96
	addi.d	$a7, $a7, 32
	addi.d	$a6, $a6, 256
	bnez	$a7, .LBB51_15
# %bb.16:                               #   in Loop: Header=BB51_11 Depth=1
	move	$a7, $a4
.LBB51_17:                              # %.lr.ph.i.preheader
                                        #   in Loop: Header=BB51_11 Depth=1
	add.d	$a6, $a7, $a2
	alsl.d	$a5, $a7, $a5, 3
	add.d	$a7, $s0, $a7
	.p2align	4, , 16
.LBB51_18:                              # %.lr.ph.i
                                        #   Parent Loop BB51_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$t0, $a7, 0
	ld.d	$t1, $a5, 0
	add.d	$t0, $t1, $t0
	st.d	$t0, $a5, 0
	addi.d	$a6, $a6, 1
	addi.d	$a5, $a5, 8
	addi.d	$a7, $a7, 1
	bnez	$a6, .LBB51_18
# %bb.19:                               # %_ZL34truncOrZextVecWithAddInLoopWithVW8IhmEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB51_11 Depth=1
	addi.d	$s4, $s4, -1
	bnez	$s4, .LBB51_11
.LBB51_20:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1130:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1131:
# %bb.21:                               # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 264
	beqz	$a0, .LBB51_23
# %bb.22:                               # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB51_23:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	addi.d	$sp, $fp, -384
	ld.d	$s8, $sp, 296                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 304                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 312                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 320                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 328                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 336                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 344                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 352                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 360                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 368                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 376                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 384
	ret
.LBB51_24:
.Ltmp1121:
	move	$s1, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB51_25:
.Ltmp1132:
	ld.d	$s4, $sp, 264
	move	$s1, $a0
	bnez	$s4, .LBB51_29
	b	.LBB51_30
.LBB51_26:                              # %.loopexit
.Ltmp1127:
	b	.LBB51_28
.LBB51_27:                              # %.loopexit.split-lp
.Ltmp1124:
.LBB51_28:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s1, $a0
.LBB51_29:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB51_30:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end51:
	.size	_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint64_t_RN9benchmark5StateE, .Lfunc_end51-_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint64_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table51:
.Lexception51:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end51-.Lcst_begin51
.Lcst_begin51:
	.uleb128 .Lfunc_begin51-.Lfunc_begin51  # >> Call Site 1 <<
	.uleb128 .Ltmp1119-.Lfunc_begin51       #   Call between .Lfunc_begin51 and .Ltmp1119
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1119-.Lfunc_begin51       # >> Call Site 2 <<
	.uleb128 .Ltmp1120-.Ltmp1119            #   Call between .Ltmp1119 and .Ltmp1120
	.uleb128 .Ltmp1121-.Lfunc_begin51       #     jumps to .Ltmp1121
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1122-.Lfunc_begin51       # >> Call Site 3 <<
	.uleb128 .Ltmp1123-.Ltmp1122            #   Call between .Ltmp1122 and .Ltmp1123
	.uleb128 .Ltmp1124-.Lfunc_begin51       #     jumps to .Ltmp1124
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1125-.Lfunc_begin51       # >> Call Site 4 <<
	.uleb128 .Ltmp1126-.Ltmp1125            #   Call between .Ltmp1125 and .Ltmp1126
	.uleb128 .Ltmp1127-.Lfunc_begin51       #     jumps to .Ltmp1127
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1128-.Lfunc_begin51       # >> Call Site 5 <<
	.uleb128 .Ltmp1131-.Ltmp1128            #   Call between .Ltmp1128 and .Ltmp1131
	.uleb128 .Ltmp1132-.Lfunc_begin51       #     jumps to .Ltmp1132
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1131-.Lfunc_begin51       # >> Call Site 6 <<
	.uleb128 .Lfunc_end51-.Ltmp1131         #   Call between .Ltmp1131 and .Lfunc_end51
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end51:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint64_t_RN9benchmark5StateE
.LCPI52_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint64_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint64_t_RN9benchmark5StateE,@function
_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint64_t_RN9benchmark5StateE: # @_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint64_t_RN9benchmark5StateE
.Lfunc_begin52:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception52
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs6, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs7, $sp, 32                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	.cfi_offset 61, -128
	.cfi_offset 62, -136
	.cfi_offset 63, -144
	move	$s0, $a0
	lu12i.w	$s5, 2
	ori	$s1, $s5, 1808
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp1133:
	lu12i.w	$a0, 19
	ori	$s2, $a0, 2176
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1134:
# %bb.1:
	move	$s3, $a0
	st.d	$a0, $sp, 8
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 16
	lu12i.w	$s6, -3
	ori	$s7, $s6, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB52_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp1136:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1137:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB52_2 Depth=1
	add.d	$a1, $fp, $s7
	addi.d	$s7, $s7, 1
	stx.b	$a0, $a1, $s1
	bnez	$s7, .LBB52_2
# %bb.4:
	pcalau12i	$a0, %pc_hi20(.LCPI52_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI52_0)
	move	$s7, $zero
	vst	$vr0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB52_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp1139:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1140:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB52_5 Depth=1
	stx.d	$a0, $s3, $s7
	addi.d	$s7, $s7, 8
	bne	$s7, $s2, .LBB52_5
# %bb.7:
	ld.w	$s4, $s0, 28
	ld.d	$s3, $s0, 16
.Ltmp1142:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1143:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s4, .LBB52_20
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s3, .LBB52_20
# %bb.10:                               # %.lr.ph.preheader
	add.d	$a0, $fp, $s1
	addi.d	$a1, $sp, 8
	ori	$a2, $s6, 2288
	ori	$a3, $s6, 2304
	ori	$a4, $s5, 1792
	ori	$a5, $s5, 1824
	ori	$a6, $s5, 1840
	.p2align	4, , 16
.LBB52_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_15 Depth 2
                                        #     Child Loop BB52_18 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a7, $sp, 8
	bgeu	$a7, $a0, .LBB52_14
# %bb.12:                               # %.lr.ph
                                        #   in Loop: Header=BB52_11 Depth=1
	add.d	$t0, $a7, $s2
	bgeu	$fp, $t0, .LBB52_14
# %bb.13:                               #   in Loop: Header=BB52_11 Depth=1
	move	$t1, $zero
	b	.LBB52_17
	.p2align	4, , 16
.LBB52_14:                              # %vector.body.preheader
                                        #   in Loop: Header=BB52_11 Depth=1
	addi.d	$t0, $a7, 256
	move	$t1, $a3
	.p2align	4, , 16
.LBB52_15:                              # %vector.body
                                        #   Parent Loop BB52_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$t2, $fp, $t1
	vldx	$vr5, $t2, $a4
	vldx	$vr10, $t2, $s1
	vldx	$vr7, $t2, $a5
	vldx	$vr1, $t2, $a6
	vpickve2gr.b	$t2, $vr5, 8
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr0, $t2, 0
	vpickve2gr.b	$t2, $vr5, 9
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr0, $t2, 1
	vpickve2gr.b	$t2, $vr5, 10
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr0, $t2, 2
	vpickve2gr.b	$t2, $vr5, 11
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr0, $t2, 3
	vpickve2gr.b	$t2, $vr5, 12
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr2, $t2, 0
	vpickve2gr.b	$t2, $vr5, 13
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr2, $t2, 1
	vpickve2gr.b	$t2, $vr5, 14
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr2, $t2, 2
	vpickve2gr.b	$t2, $vr5, 15
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr2, $t2, 3
	vpickve2gr.b	$t2, $vr5, 0
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr3, $t2, 0
	vpickve2gr.b	$t2, $vr5, 1
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr3, $t2, 1
	vpickve2gr.b	$t2, $vr5, 2
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr3, $t2, 2
	vpickve2gr.b	$t2, $vr5, 3
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr3, $t2, 3
	vpickve2gr.b	$t2, $vr5, 4
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr4, $t2, 0
	vpickve2gr.b	$t2, $vr5, 5
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr4, $t2, 1
	vpickve2gr.b	$t2, $vr5, 6
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr4, $t2, 2
	vpickve2gr.b	$t2, $vr5, 7
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr4, $t2, 3
	vpickve2gr.b	$t2, $vr10, 8
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr5, $t2, 0
	vpickve2gr.b	$t2, $vr10, 9
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr5, $t2, 1
	vpickve2gr.b	$t2, $vr10, 10
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr5, $t2, 2
	vpickve2gr.b	$t2, $vr10, 11
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr5, $t2, 3
	vpickve2gr.b	$t2, $vr10, 12
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr6, $t2, 0
	vpickve2gr.b	$t2, $vr10, 13
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr6, $t2, 1
	vpickve2gr.b	$t2, $vr10, 14
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr6, $t2, 2
	vpickve2gr.b	$t2, $vr10, 15
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr6, $t2, 3
	vpickve2gr.b	$t2, $vr10, 0
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr8, $t2, 0
	vpickve2gr.b	$t2, $vr10, 1
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr8, $t2, 1
	vpickve2gr.b	$t2, $vr10, 2
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr8, $t2, 2
	vpickve2gr.b	$t2, $vr10, 3
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr8, $t2, 3
	vpickve2gr.b	$t2, $vr10, 4
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr9, $t2, 0
	vpickve2gr.b	$t2, $vr10, 5
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr9, $t2, 1
	vpickve2gr.b	$t2, $vr10, 6
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr9, $t2, 2
	vpickve2gr.b	$t2, $vr10, 7
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr9, $t2, 3
	vpickve2gr.b	$t2, $vr7, 8
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr10, $t2, 0
	vpickve2gr.b	$t2, $vr7, 9
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr10, $t2, 1
	vpickve2gr.b	$t2, $vr7, 10
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr10, $t2, 2
	vpickve2gr.b	$t2, $vr7, 11
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr10, $t2, 3
	vpickve2gr.b	$t2, $vr7, 12
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr11, $t2, 0
	vpickve2gr.b	$t2, $vr7, 13
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr11, $t2, 1
	vpickve2gr.b	$t2, $vr7, 14
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr11, $t2, 2
	vpickve2gr.b	$t2, $vr7, 15
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr11, $t2, 3
	vpickve2gr.b	$t2, $vr7, 0
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr12, $t2, 0
	vpickve2gr.b	$t2, $vr7, 1
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr12, $t2, 1
	vpickve2gr.b	$t2, $vr7, 2
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr12, $t2, 2
	vpickve2gr.b	$t2, $vr7, 3
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr12, $t2, 3
	vpickve2gr.b	$t2, $vr7, 4
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr13, $t2, 0
	vpickve2gr.b	$t2, $vr7, 5
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr13, $t2, 1
	vpickve2gr.b	$t2, $vr7, 6
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr13, $t2, 2
	vpickve2gr.b	$t2, $vr7, 7
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr13, $t2, 3
	vpickve2gr.b	$t2, $vr1, 8
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr7, $t2, 0
	vpickve2gr.b	$t2, $vr1, 9
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr7, $t2, 1
	vpickve2gr.b	$t2, $vr1, 10
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr7, $t2, 2
	vpickve2gr.b	$t2, $vr1, 11
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr7, $t2, 3
	vpickve2gr.b	$t2, $vr1, 12
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr14, $t2, 0
	vpickve2gr.b	$t2, $vr1, 13
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr14, $t2, 1
	vpickve2gr.b	$t2, $vr1, 14
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr14, $t2, 2
	vpickve2gr.b	$t2, $vr1, 15
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr14, $t2, 3
	vpickve2gr.b	$t2, $vr1, 0
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr15, $t2, 0
	vpickve2gr.b	$t2, $vr1, 1
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr15, $t2, 1
	vpickve2gr.b	$t2, $vr1, 2
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr15, $t2, 2
	vpickve2gr.b	$t2, $vr1, 3
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr15, $t2, 3
	vpickve2gr.b	$t2, $vr1, 4
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr16, $t2, 0
	vpickve2gr.b	$t2, $vr1, 5
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr16, $t2, 1
	vpickve2gr.b	$t2, $vr1, 6
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr16, $t2, 2
	vpickve2gr.b	$t2, $vr1, 7
	andi	$t2, $t2, 255
	bstrpick.d	$t2, $t2, 15, 0
	xvinsgr2vr.d	$xr16, $t2, 3
	xvld	$xr1, $t0, -192
	xvld	$xr17, $t0, -160
	xvld	$xr18, $t0, -256
	xvld	$xr19, $t0, -224
	xvld	$xr20, $t0, -64
	xvld	$xr21, $t0, -32
	xvld	$xr22, $t0, -128
	xvld	$xr23, $t0, -96
	xvld	$xr24, $t0, 64
	xvld	$xr25, $t0, 96
	xvld	$xr26, $t0, 0
	xvld	$xr27, $t0, 32
	xvld	$xr28, $t0, 192
	xvld	$xr29, $t0, 224
	xvld	$xr30, $t0, 128
	xvld	$xr31, $t0, 160
	xvadd.d	$xr4, $xr19, $xr4
	xvadd.d	$xr3, $xr18, $xr3
	xvadd.d	$xr2, $xr17, $xr2
	xvadd.d	$xr0, $xr1, $xr0
	xvadd.d	$xr1, $xr23, $xr9
	xvadd.d	$xr8, $xr22, $xr8
	xvadd.d	$xr6, $xr21, $xr6
	xvadd.d	$xr5, $xr20, $xr5
	xvadd.d	$xr9, $xr27, $xr13
	xvadd.d	$xr12, $xr26, $xr12
	xvadd.d	$xr11, $xr25, $xr11
	xvadd.d	$xr10, $xr24, $xr10
	xvadd.d	$xr13, $xr31, $xr16
	xvadd.d	$xr15, $xr30, $xr15
	xvadd.d	$xr14, $xr29, $xr14
	xvadd.d	$xr7, $xr28, $xr7
	xvst	$xr0, $t0, -192
	xvst	$xr2, $t0, -160
	xvst	$xr3, $t0, -256
	xvst	$xr4, $t0, -224
	xvst	$xr5, $t0, -64
	xvst	$xr6, $t0, -32
	xvst	$xr8, $t0, -128
	xvst	$xr1, $t0, -96
	xvst	$xr10, $t0, 64
	xvst	$xr11, $t0, 96
	xvst	$xr12, $t0, 0
	xvst	$xr9, $t0, 32
	xvst	$xr7, $t0, 192
	xvst	$xr14, $t0, 224
	xvst	$xr15, $t0, 128
	xvst	$xr13, $t0, 160
	addi.d	$t1, $t1, 64
	addi.d	$t0, $t0, 512
	bnez	$t1, .LBB52_15
# %bb.16:                               #   in Loop: Header=BB52_11 Depth=1
	move	$t1, $a4
.LBB52_17:                              # %.lr.ph.i.preheader
                                        #   in Loop: Header=BB52_11 Depth=1
	add.d	$t0, $t1, $a2
	alsl.d	$a7, $t1, $a7, 3
	add.d	$t1, $fp, $t1
	.p2align	4, , 16
.LBB52_18:                              # %.lr.ph.i
                                        #   Parent Loop BB52_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$t2, $t1, 0
	ld.d	$t3, $a7, 0
	add.d	$t2, $t3, $t2
	st.d	$t2, $a7, 0
	addi.d	$t0, $t0, 1
	addi.d	$a7, $a7, 8
	addi.d	$t1, $t1, 1
	bnez	$t0, .LBB52_18
# %bb.19:                               # %_ZL35truncOrZextVecWithAddInLoopWithVW16IhmEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB52_11 Depth=1
	addi.d	$s3, $s3, -1
	bnez	$s3, .LBB52_11
.LBB52_20:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1144:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1145:
# %bb.21:                               # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 8
	beqz	$a0, .LBB52_23
# %bb.22:                               # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB52_23:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	fld.d	$fs7, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs6, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs5, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 88                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB52_24:
.Ltmp1135:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB52_25:
.Ltmp1146:
	ld.d	$s3, $sp, 8
	move	$s0, $a0
	bnez	$s3, .LBB52_29
	b	.LBB52_30
.LBB52_26:                              # %.loopexit
.Ltmp1141:
	b	.LBB52_28
.LBB52_27:                              # %.loopexit.split-lp
.Ltmp1138:
.LBB52_28:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB52_29:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB52_30:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end52:
	.size	_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint64_t_RN9benchmark5StateE, .Lfunc_end52-_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint64_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table52:
.Lexception52:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end52-.Lcst_begin52
.Lcst_begin52:
	.uleb128 .Lfunc_begin52-.Lfunc_begin52  # >> Call Site 1 <<
	.uleb128 .Ltmp1133-.Lfunc_begin52       #   Call between .Lfunc_begin52 and .Ltmp1133
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1133-.Lfunc_begin52       # >> Call Site 2 <<
	.uleb128 .Ltmp1134-.Ltmp1133            #   Call between .Ltmp1133 and .Ltmp1134
	.uleb128 .Ltmp1135-.Lfunc_begin52       #     jumps to .Ltmp1135
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1136-.Lfunc_begin52       # >> Call Site 3 <<
	.uleb128 .Ltmp1137-.Ltmp1136            #   Call between .Ltmp1136 and .Ltmp1137
	.uleb128 .Ltmp1138-.Lfunc_begin52       #     jumps to .Ltmp1138
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1139-.Lfunc_begin52       # >> Call Site 4 <<
	.uleb128 .Ltmp1140-.Ltmp1139            #   Call between .Ltmp1139 and .Ltmp1140
	.uleb128 .Ltmp1141-.Lfunc_begin52       #     jumps to .Ltmp1141
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1142-.Lfunc_begin52       # >> Call Site 5 <<
	.uleb128 .Ltmp1145-.Ltmp1142            #   Call between .Ltmp1142 and .Ltmp1145
	.uleb128 .Ltmp1146-.Lfunc_begin52       #     jumps to .Ltmp1146
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1145-.Lfunc_begin52       # >> Call Site 6 <<
	.uleb128 .Lfunc_end52-.Ltmp1145         #   Call between .Ltmp1145 and .Lfunc_end52
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end52:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint64_t_RN9benchmark5StateE
.LCPI53_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint64_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint64_t_RN9benchmark5StateE,@function
_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint64_t_RN9benchmark5StateE: # @_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint64_t_RN9benchmark5StateE
.Lfunc_begin53:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception53
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	addi.d	$fp, $sp, 160
	.cfi_def_cfa 22, 0
	bstrins.d	$sp, $zero, 4, 0
	move	$s1, $a0
	lu12i.w	$a0, 2
	ori	$s2, $a0, 1808
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$s0, $a0
.Ltmp1147:
	lu12i.w	$a0, 19
	ori	$s3, $a0, 2176
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1148:
# %bb.1:
	move	$s4, $a0
	st.d	$a0, $sp, 56
	lu12i.w	$a0, 15
	ori	$a0, $a0, 3840
	st.h	$a0, $sp, 64
	lu12i.w	$s6, -3
	ori	$s7, $s6, 2288
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB53_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp1150:
	addi.d	$a0, $sp, 64
	addi.d	$a2, $sp, 64
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1151:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB53_2 Depth=1
	add.d	$a1, $s0, $s7
	addi.d	$s7, $s7, 1
	stx.b	$a0, $a1, $s2
	bnez	$s7, .LBB53_2
# %bb.4:
	pcalau12i	$a0, %pc_hi20(.LCPI53_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI53_0)
	move	$s7, $zero
	vst	$vr0, $sp, 64
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB53_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp1153:
	addi.d	$a0, $sp, 64
	addi.d	$a2, $sp, 64
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1154:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB53_5 Depth=1
	stx.d	$a0, $s4, $s7
	addi.d	$s7, $s7, 8
	bne	$s7, $s3, .LBB53_5
# %bb.7:
	ld.w	$s5, $s1, 28
	ld.d	$s4, $s1, 16
.Ltmp1156:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1157:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s5, .LBB53_18
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s4, .LBB53_18
# %bb.10:                               # %.lr.ph.preheader
	add.d	$a0, $s0, $s2
	addi.d	$a1, $sp, 56
	ori	$a2, $s6, 2288
	b	.LBB53_12
	.p2align	4, , 16
.LBB53_11:                              # %_ZL27truncOrZextVecWithAddInLoopIhmEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB53_12 Depth=1
	addi.d	$s4, $s4, -1
	beqz	$s4, .LBB53_18
.LBB53_12:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_17 Depth 2
                                        #     Child Loop BB53_15 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a3, $sp, 56
	bgeu	$a3, $a0, .LBB53_16
# %bb.13:                               # %.lr.ph
                                        #   in Loop: Header=BB53_12 Depth=1
	add.d	$a4, $a3, $s3
	bgeu	$s0, $a4, .LBB53_16
# %bb.14:                               # %.lr.ph.i.preheader
                                        #   in Loop: Header=BB53_12 Depth=1
	move	$a4, $a2
	.p2align	4, , 16
.LBB53_15:                              # %.lr.ph.i
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a5, $s0, $a4
	ldx.bu	$a5, $a5, $s2
	ld.d	$a6, $a3, 0
	add.d	$a5, $a6, $a5
	st.d	$a5, $a3, 0
	addi.d	$a4, $a4, 1
	addi.d	$a3, $a3, 8
	bnez	$a4, .LBB53_15
	b	.LBB53_11
	.p2align	4, , 16
.LBB53_16:                              # %vector.body.preheader
                                        #   in Loop: Header=BB53_12 Depth=1
	move	$a4, $a2
	.p2align	4, , 16
.LBB53_17:                              # %vector.body
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a5, $s0, $a4
	ldx.w	$a5, $a5, $s2
	vinsgr2vr.w	$vr0, $a5, 0
	st.b	$zero, $sp, 31
	st.h	$zero, $sp, 29
	st.w	$zero, $sp, 25
	st.b	$zero, $sp, 23
	st.h	$zero, $sp, 21
	st.w	$zero, $sp, 17
	st.b	$zero, $sp, 15
	st.h	$zero, $sp, 13
	st.w	$zero, $sp, 9
	st.b	$zero, $sp, 7
	st.h	$zero, $sp, 5
	st.w	$zero, $sp, 1
	xvstelm.b	$xr0, $sp, 24, 3
	xvstelm.b	$xr0, $sp, 16, 2
	xvstelm.b	$xr0, $sp, 8, 1
	xvstelm.b	$xr0, $sp, 0, 0
	xvld	$xr0, $sp, 0
	xvld	$xr1, $a3, 0
	xvadd.d	$xr0, $xr1, $xr0
	xvst	$xr0, $a3, 0
	addi.d	$a4, $a4, 4
	addi.d	$a3, $a3, 32
	bnez	$a4, .LBB53_17
	b	.LBB53_11
.LBB53_18:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1158:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1159:
# %bb.19:                               # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 56
	beqz	$a0, .LBB53_21
# %bb.20:                               # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB53_21:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	addi.d	$sp, $fp, -160
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB53_22:
.Ltmp1149:
	move	$s1, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB53_23:
.Ltmp1160:
	ld.d	$s4, $sp, 56
	move	$s1, $a0
	bnez	$s4, .LBB53_27
	b	.LBB53_28
.LBB53_24:                              # %.loopexit
.Ltmp1155:
	b	.LBB53_26
.LBB53_25:                              # %.loopexit.split-lp
.Ltmp1152:
.LBB53_26:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s1, $a0
.LBB53_27:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB53_28:                              # %_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end53:
	.size	_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint64_t_RN9benchmark5StateE, .Lfunc_end53-_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint64_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table53:
.Lexception53:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end53-.Lcst_begin53
.Lcst_begin53:
	.uleb128 .Lfunc_begin53-.Lfunc_begin53  # >> Call Site 1 <<
	.uleb128 .Ltmp1147-.Lfunc_begin53       #   Call between .Lfunc_begin53 and .Ltmp1147
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1147-.Lfunc_begin53       # >> Call Site 2 <<
	.uleb128 .Ltmp1148-.Ltmp1147            #   Call between .Ltmp1147 and .Ltmp1148
	.uleb128 .Ltmp1149-.Lfunc_begin53       #     jumps to .Ltmp1149
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1150-.Lfunc_begin53       # >> Call Site 3 <<
	.uleb128 .Ltmp1151-.Ltmp1150            #   Call between .Ltmp1150 and .Ltmp1151
	.uleb128 .Ltmp1152-.Lfunc_begin53       #     jumps to .Ltmp1152
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1153-.Lfunc_begin53       # >> Call Site 4 <<
	.uleb128 .Ltmp1154-.Ltmp1153            #   Call between .Ltmp1153 and .Ltmp1154
	.uleb128 .Ltmp1155-.Lfunc_begin53       #     jumps to .Ltmp1155
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1156-.Lfunc_begin53       # >> Call Site 5 <<
	.uleb128 .Ltmp1159-.Ltmp1156            #   Call between .Ltmp1156 and .Ltmp1159
	.uleb128 .Ltmp1160-.Lfunc_begin53       #     jumps to .Ltmp1160
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1159-.Lfunc_begin53       # >> Call Site 6 <<
	.uleb128 .Lfunc_end53-.Ltmp1159         #   Call between .Ltmp1159 and .Lfunc_end53
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end53:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z61benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint32_t_RN9benchmark5StateE # -- Begin function _Z61benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint32_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z61benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint32_t_RN9benchmark5StateE,@function
_Z61benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint32_t_RN9benchmark5StateE: # @_Z61benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint32_t_RN9benchmark5StateE
.Lfunc_begin54:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception54
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	lu12i.w	$s6, 4
	ori	$s3, $s6, 3616
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp1161:
	lu12i.w	$s1, 9
	ori	$s0, $s1, 3136
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1162:
# %bb.1:                                # %.split
	move	$s2, $a0
	st.d	$a0, $sp, 40
.Ltmp1164:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
.Ltmp1165:
# %bb.2:
	ori	$a0, $s6, 3586
	add.d	$s5, $fp, $a0
	ori	$a0, $s1, 3072
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	add.d	$s1, $s2, $a0
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 52
	lu12i.w	$s7, -5
	ori	$s0, $s7, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB54_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp1167:
	addi.d	$a0, $sp, 52
	addi.d	$a2, $sp, 52
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1168:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB54_3 Depth=1
	add.d	$a1, $fp, $s0
	addi.d	$s0, $s0, 2
	stx.h	$a0, $a1, $s3
	bnez	$s0, .LBB54_3
# %bb.5:                                # %vector.ph
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	addi.d	$a0, $a0, 4
	ori	$a1, $s7, 480
	ori	$a2, $s6, 3618
	.p2align	4, , 16
.LBB54_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a3, $fp, $a1
	ldx.hu	$a4, $a3, $s3
	ldx.hu	$a3, $a3, $a2
	st.w	$a4, $a0, -4
	st.w	$a3, $a0, 0
	addi.d	$a1, $a1, 4
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB54_6
# %bb.7:                                # %vector.body83.preheader
	st.d	$s2, $sp, 16                    # 8-byte Folded Spill
	addi.d	$a0, $s2, 64
	ori	$a1, $s7, 512
	ori	$s4, $s6, 3584
	ori	$a4, $s6, 3600
	ori	$a2, $s6, 3632
	.p2align	4, , 16
.LBB54_8:                               # %vector.body83
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a3, $fp, $a1
	vldx	$vr2, $a3, $s4
	vldx	$vr4, $a3, $a4
	vldx	$vr3, $a3, $s3
	vldx	$vr1, $a3, $a2
	vpickve2gr.h	$a3, $vr2, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr0, $a3, 0
	vpickve2gr.h	$a3, $vr2, 1
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr0, $a3, 1
	vpickve2gr.h	$a3, $vr2, 2
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr0, $a3, 2
	vpickve2gr.h	$a3, $vr2, 3
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr0, $a3, 3
	vpickve2gr.h	$a3, $vr2, 4
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr0, $a3, 4
	vpickve2gr.h	$a3, $vr2, 5
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr0, $a3, 5
	vpickve2gr.h	$a3, $vr2, 6
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr0, $a3, 6
	vpickve2gr.h	$a3, $vr2, 7
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr0, $a3, 7
	vpickve2gr.h	$a3, $vr4, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr2, $a3, 0
	vpickve2gr.h	$a3, $vr4, 1
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr2, $a3, 1
	vpickve2gr.h	$a3, $vr4, 2
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr2, $a3, 2
	vpickve2gr.h	$a3, $vr4, 3
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr2, $a3, 3
	vpickve2gr.h	$a3, $vr4, 4
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr2, $a3, 4
	vpickve2gr.h	$a3, $vr4, 5
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr2, $a3, 5
	vpickve2gr.h	$a3, $vr4, 6
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr2, $a3, 6
	vpickve2gr.h	$a3, $vr4, 7
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr2, $a3, 7
	vpickve2gr.h	$a3, $vr3, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr4, $a3, 0
	vpickve2gr.h	$a3, $vr3, 1
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr4, $a3, 1
	vpickve2gr.h	$a3, $vr3, 2
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr4, $a3, 2
	vpickve2gr.h	$a3, $vr3, 3
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr4, $a3, 3
	vpickve2gr.h	$a3, $vr3, 4
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr4, $a3, 4
	vpickve2gr.h	$a3, $vr3, 5
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr4, $a3, 5
	vpickve2gr.h	$a3, $vr3, 6
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr4, $a3, 6
	vpickve2gr.h	$a3, $vr3, 7
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr4, $a3, 7
	vpickve2gr.h	$a3, $vr1, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr3, $a3, 0
	vpickve2gr.h	$a3, $vr1, 1
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr3, $a3, 1
	vpickve2gr.h	$a3, $vr1, 2
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr3, $a3, 2
	vpickve2gr.h	$a3, $vr1, 3
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr3, $a3, 3
	vpickve2gr.h	$a3, $vr1, 4
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr3, $a3, 4
	vpickve2gr.h	$a3, $vr1, 5
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr3, $a3, 5
	vpickve2gr.h	$a3, $vr1, 6
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr3, $a3, 6
	vpickve2gr.h	$a3, $vr1, 7
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.w	$xr3, $a3, 7
	xvst	$xr0, $a0, -64
	xvst	$xr2, $a0, -32
	xvst	$xr4, $a0, 0
	xvst	$xr3, $a0, 32
	addi.d	$a1, $a1, 64
	addi.d	$a0, $a0, 128
	bnez	$a1, .LBB54_8
# %bb.9:                                # %.lr.ph.i
	st.d	$s3, $sp, 0                     # 8-byte Folded Spill
	ldx.hu	$a0, $fp, $s4
	ld.hu	$a1, $s5, 0
	ori	$s8, $s6, 3588
	ldx.hu	$a2, $fp, $s8
	ld.hu	$a3, $s5, 4
	st.w	$a0, $s1, 0
	st.w	$a1, $s1, 4
	st.w	$a2, $s1, 8
	st.w	$a3, $s1, 12
	ori	$s0, $s6, 3592
	ldx.hu	$a0, $fp, $s0
	ld.hu	$a1, $s5, 8
	move	$a5, $s1
	ori	$s1, $s6, 3596
	ldx.hu	$a2, $fp, $s1
	ld.hu	$a3, $s5, 12
	st.w	$a0, $a5, 16
	st.w	$a1, $a5, 20
	st.w	$a2, $a5, 24
	st.w	$a3, $a5, 28
	ldx.hu	$a0, $fp, $a4
	ld.hu	$a1, $s5, 16
	ori	$s2, $s6, 3604
	ldx.hu	$a2, $fp, $s2
	ld.hu	$a3, $s5, 20
	st.w	$a0, $a5, 32
	st.w	$a1, $a5, 36
	st.w	$a2, $a5, 40
	st.w	$a3, $a5, 44
	ori	$s3, $s6, 3608
	ldx.hu	$a0, $fp, $s3
	ld.hu	$a1, $s5, 24
	ori	$s6, $s6, 3612
	ldx.hu	$a2, $fp, $s6
	ld.hu	$a3, $s5, 28
	st.w	$a0, $a5, 48
	st.w	$a1, $a5, 52
	move	$a1, $zero
	st.w	$a2, $a5, 56
	st.w	$a3, $a5, 60
	ori	$s7, $s7, 480
	.p2align	4, , 16
.LBB54_10:                              # %_ZL27truncOrZextVecInLoopWithVW8ItjEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	ldx.w	$a0, $a0, $a1
	move	$a2, $a1
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ldx.w	$a1, $a1, $a2
	bne	$a0, $a1, .LBB54_23
# %bb.11:                               # %_ZL27truncOrZextVecInLoopWithVW8ItjEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB54_10 Depth=1
	addi.d	$s7, $s7, 2
	addi.d	$a1, $a2, 4
	bnez	$s7, .LBB54_10
# %bb.12:
	st.d	$a4, $sp, 16                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	ld.w	$a1, $a0, 28
	st.d	$a1, $sp, 0                     # 8-byte Folded Spill
	ld.d	$s7, $a0, 16
.Ltmp1185:
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1186:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	ld.d	$t2, $sp, 16                    # 8-byte Folded Reload
	ld.d	$a0, $sp, 0                     # 8-byte Folded Reload
	bnez	$a0, .LBB54_19
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s7, .LBB54_19
# %bb.15:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 48
	addi.d	$a1, $sp, 40
	lu12i.w	$a2, -5
	ori	$a2, $a2, 512
	lu12i.w	$a5, 4
	ori	$a3, $a5, 3536
	ori	$a4, $a5, 3552
	ori	$a5, $a5, 3568
	.p2align	4, , 16
.LBB54_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_17 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a7, $sp, 40
	ld.d	$a6, $sp, 32                    # 8-byte Folded Reload
	add.d	$a6, $a7, $a6
	addi.d	$a7, $a7, 64
	move	$t0, $a2
	.p2align	4, , 16
.LBB54_17:                              # %vector.body93
                                        #   Parent Loop BB54_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$t1, $a0, $t0
	vldx	$vr2, $t1, $a3
	vldx	$vr4, $t1, $a4
	vldx	$vr3, $t1, $a5
	vldx	$vr1, $t1, $s4
	vpickve2gr.h	$t1, $vr2, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr0, $t1, 0
	vpickve2gr.h	$t1, $vr2, 1
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr0, $t1, 1
	vpickve2gr.h	$t1, $vr2, 2
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr0, $t1, 2
	vpickve2gr.h	$t1, $vr2, 3
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr0, $t1, 3
	vpickve2gr.h	$t1, $vr2, 4
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr0, $t1, 4
	vpickve2gr.h	$t1, $vr2, 5
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr0, $t1, 5
	vpickve2gr.h	$t1, $vr2, 6
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr0, $t1, 6
	vpickve2gr.h	$t1, $vr2, 7
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr0, $t1, 7
	vpickve2gr.h	$t1, $vr4, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr2, $t1, 0
	vpickve2gr.h	$t1, $vr4, 1
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr2, $t1, 1
	vpickve2gr.h	$t1, $vr4, 2
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr2, $t1, 2
	vpickve2gr.h	$t1, $vr4, 3
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr2, $t1, 3
	vpickve2gr.h	$t1, $vr4, 4
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr2, $t1, 4
	vpickve2gr.h	$t1, $vr4, 5
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr2, $t1, 5
	vpickve2gr.h	$t1, $vr4, 6
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr2, $t1, 6
	vpickve2gr.h	$t1, $vr4, 7
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr2, $t1, 7
	vpickve2gr.h	$t1, $vr3, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr4, $t1, 0
	vpickve2gr.h	$t1, $vr3, 1
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr4, $t1, 1
	vpickve2gr.h	$t1, $vr3, 2
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr4, $t1, 2
	vpickve2gr.h	$t1, $vr3, 3
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr4, $t1, 3
	vpickve2gr.h	$t1, $vr3, 4
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr4, $t1, 4
	vpickve2gr.h	$t1, $vr3, 5
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr4, $t1, 5
	vpickve2gr.h	$t1, $vr3, 6
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr4, $t1, 6
	vpickve2gr.h	$t1, $vr3, 7
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr4, $t1, 7
	vpickve2gr.h	$t1, $vr1, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr3, $t1, 0
	vpickve2gr.h	$t1, $vr1, 1
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr3, $t1, 1
	vpickve2gr.h	$t1, $vr1, 2
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr3, $t1, 2
	vpickve2gr.h	$t1, $vr1, 3
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr3, $t1, 3
	vpickve2gr.h	$t1, $vr1, 4
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr3, $t1, 4
	vpickve2gr.h	$t1, $vr1, 5
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr3, $t1, 5
	vpickve2gr.h	$t1, $vr1, 6
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr3, $t1, 6
	vpickve2gr.h	$t1, $vr1, 7
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr3, $t1, 7
	xvst	$xr0, $a7, -64
	xvst	$xr2, $a7, -32
	xvst	$xr4, $a7, 0
	xvst	$xr3, $a7, 32
	addi.d	$t0, $t0, 64
	addi.d	$a7, $a7, 128
	bnez	$t0, .LBB54_17
# %bb.18:                               # %.lr.ph.i24
                                        #   in Loop: Header=BB54_16 Depth=1
	ldx.hu	$a7, $fp, $s4
	ld.hu	$t0, $s5, 0
	ldx.hu	$t1, $fp, $s8
	st.w	$a7, $a6, 0
	ld.hu	$a7, $s5, 4
	st.w	$t0, $a6, 4
	st.w	$t1, $a6, 8
	ldx.hu	$t0, $fp, $s0
	st.w	$a7, $a6, 12
	ld.hu	$a7, $s5, 8
	ldx.hu	$t1, $fp, $s1
	st.w	$t0, $a6, 16
	ld.hu	$t0, $s5, 12
	st.w	$a7, $a6, 20
	st.w	$t1, $a6, 24
	ldx.hu	$a7, $fp, $t2
	st.w	$t0, $a6, 28
	ld.hu	$t0, $s5, 16
	ldx.hu	$t1, $fp, $s2
	st.w	$a7, $a6, 32
	ld.hu	$a7, $s5, 20
	st.w	$t0, $a6, 36
	st.w	$t1, $a6, 40
	ldx.hu	$t0, $fp, $s3
	st.w	$a7, $a6, 44
	ld.hu	$a7, $s5, 24
	ldx.hu	$t1, $fp, $s6
	st.w	$t0, $a6, 48
	ld.hu	$t0, $s5, 28
	st.w	$a7, $a6, 52
	st.w	$t1, $a6, 56
	addi.d	$s7, $s7, -1
	st.w	$t0, $a6, 60
	bnez	$s7, .LBB54_16
.LBB54_19:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1187:
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1188:
# %bb.20:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit36
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 40
	beqz	$a0, .LBB54_22
# %bb.21:                               # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i38
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB54_22:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit42
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB54_23:
.Ltmp1170:
	move	$s0, $a2
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1171:
# %bb.24:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	add.d	$a0, $fp, $s7
	ld.d	$a1, $sp, 0                     # 8-byte Folded Reload
	ldx.hu	$a1, $a0, $a1
.Ltmp1172:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1173:
# %bb.25:                               # %_ZNSolsEt.exit
.Ltmp1174:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1175:
# %bb.26:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	ldx.wu	$a1, $a0, $s0
.Ltmp1176:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1177:
# %bb.27:                               # %_ZNSolsEj.exit
.Ltmp1178:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1179:
# %bb.28:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit21
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	ldx.wu	$a1, $a0, $s0
.Ltmp1180:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1181:
# %bb.29:                               # %_ZNSolsEj.exit23
.Ltmp1182:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp1183:
# %bb.30:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB54_31:                              # %.thread
.Ltmp1166:
	move	$s1, $a0
	b	.LBB54_37
.LBB54_32:
.Ltmp1163:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB54_33:
.Ltmp1189:
	b	.LBB54_36
.LBB54_34:
.Ltmp1184:
	b	.LBB54_36
.LBB54_35:
.Ltmp1169:
.LBB54_36:
	move	$s1, $a0
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 40
	move	$s2, $a0
	beqz	$a0, .LBB54_38
.LBB54_37:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i31
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB54_38:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end54:
	.size	_Z61benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint32_t_RN9benchmark5StateE, .Lfunc_end54-_Z61benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint32_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table54:
.Lexception54:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end54-.Lcst_begin54
.Lcst_begin54:
	.uleb128 .Lfunc_begin54-.Lfunc_begin54  # >> Call Site 1 <<
	.uleb128 .Ltmp1161-.Lfunc_begin54       #   Call between .Lfunc_begin54 and .Ltmp1161
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1161-.Lfunc_begin54       # >> Call Site 2 <<
	.uleb128 .Ltmp1162-.Ltmp1161            #   Call between .Ltmp1161 and .Ltmp1162
	.uleb128 .Ltmp1163-.Lfunc_begin54       #     jumps to .Ltmp1163
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1164-.Lfunc_begin54       # >> Call Site 3 <<
	.uleb128 .Ltmp1165-.Ltmp1164            #   Call between .Ltmp1164 and .Ltmp1165
	.uleb128 .Ltmp1166-.Lfunc_begin54       #     jumps to .Ltmp1166
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1167-.Lfunc_begin54       # >> Call Site 4 <<
	.uleb128 .Ltmp1168-.Ltmp1167            #   Call between .Ltmp1167 and .Ltmp1168
	.uleb128 .Ltmp1169-.Lfunc_begin54       #     jumps to .Ltmp1169
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1185-.Lfunc_begin54       # >> Call Site 5 <<
	.uleb128 .Ltmp1188-.Ltmp1185            #   Call between .Ltmp1185 and .Ltmp1188
	.uleb128 .Ltmp1189-.Lfunc_begin54       #     jumps to .Ltmp1189
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1188-.Lfunc_begin54       # >> Call Site 6 <<
	.uleb128 .Ltmp1170-.Ltmp1188            #   Call between .Ltmp1188 and .Ltmp1170
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1170-.Lfunc_begin54       # >> Call Site 7 <<
	.uleb128 .Ltmp1183-.Ltmp1170            #   Call between .Ltmp1170 and .Ltmp1183
	.uleb128 .Ltmp1184-.Lfunc_begin54       #     jumps to .Ltmp1184
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1183-.Lfunc_begin54       # >> Call Site 8 <<
	.uleb128 .Lfunc_end54-.Ltmp1183         #   Call between .Ltmp1183 and .Lfunc_end54
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end54:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z62benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint32_t_RN9benchmark5StateE # -- Begin function _Z62benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint32_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z62benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint32_t_RN9benchmark5StateE,@function
_Z62benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint32_t_RN9benchmark5StateE: # @_Z62benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint32_t_RN9benchmark5StateE
.Lfunc_begin55:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception55
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	lu12i.w	$s6, 4
	ori	$s3, $s6, 3616
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp1190:
	lu12i.w	$s1, 9
	ori	$s0, $s1, 3136
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1191:
# %bb.1:                                # %.split
	move	$s2, $a0
	st.d	$a0, $sp, 40
.Ltmp1193:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
.Ltmp1194:
# %bb.2:
	ori	$a0, $s6, 3586
	add.d	$s5, $fp, $a0
	ori	$a0, $s1, 3072
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	add.d	$s1, $s2, $a0
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 52
	lu12i.w	$s8, -5
	ori	$s0, $s8, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB55_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp1196:
	addi.d	$a0, $sp, 52
	addi.d	$a2, $sp, 52
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1197:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB55_3 Depth=1
	add.d	$a1, $fp, $s0
	addi.d	$s0, $s0, 2
	stx.h	$a0, $a1, $s3
	bnez	$s0, .LBB55_3
# %bb.5:                                # %vector.ph
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	addi.d	$a0, $a0, 4
	ori	$a1, $s8, 480
	ori	$a2, $s6, 3618
	.p2align	4, , 16
.LBB55_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a3, $fp, $a1
	ldx.hu	$a4, $a3, $s3
	ldx.hu	$a3, $a3, $a2
	st.w	$a4, $a0, -4
	st.w	$a3, $a0, 0
	addi.d	$a1, $a1, 4
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB55_6
# %bb.7:                                # %vector.body83.preheader
	st.d	$s2, $sp, 16                    # 8-byte Folded Spill
	addi.d	$a0, $s2, 128
	ori	$a1, $s8, 512
	ori	$s4, $s6, 3584
	ori	$a2, $s6, 3648
	ori	$a3, $s6, 3680
	.p2align	4, , 16
.LBB55_8:                               # %vector.body83
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a4, $fp, $a1
	xvldx	$xr3, $a4, $s4
	xvldx	$xr6, $a4, $s3
	xvldx	$xr4, $a4, $a2
	xvldx	$xr0, $a4, $a3
	xvpermi.q	$xr2, $xr3, 1
	vpickve2gr.h	$a4, $vr2, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr1, $a4, 0
	vpickve2gr.h	$a4, $vr2, 1
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr1, $a4, 1
	vpickve2gr.h	$a4, $vr2, 2
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr1, $a4, 2
	vpickve2gr.h	$a4, $vr2, 3
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr1, $a4, 3
	vpickve2gr.h	$a4, $vr2, 4
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr1, $a4, 4
	vpickve2gr.h	$a4, $vr2, 5
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr1, $a4, 5
	vpickve2gr.h	$a4, $vr2, 6
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr1, $a4, 6
	vpickve2gr.h	$a4, $vr2, 7
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr1, $a4, 7
	vpickve2gr.h	$a4, $vr3, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr2, $a4, 0
	vpickve2gr.h	$a4, $vr3, 1
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr2, $a4, 1
	vpickve2gr.h	$a4, $vr3, 2
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr2, $a4, 2
	vpickve2gr.h	$a4, $vr3, 3
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr2, $a4, 3
	vpickve2gr.h	$a4, $vr3, 4
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr2, $a4, 4
	vpickve2gr.h	$a4, $vr3, 5
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr2, $a4, 5
	vpickve2gr.h	$a4, $vr3, 6
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr2, $a4, 6
	vpickve2gr.h	$a4, $vr3, 7
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr2, $a4, 7
	xvpermi.q	$xr5, $xr6, 1
	vpickve2gr.h	$a4, $vr5, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr3, $a4, 0
	vpickve2gr.h	$a4, $vr5, 1
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr3, $a4, 1
	vpickve2gr.h	$a4, $vr5, 2
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr3, $a4, 2
	vpickve2gr.h	$a4, $vr5, 3
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr3, $a4, 3
	vpickve2gr.h	$a4, $vr5, 4
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr3, $a4, 4
	vpickve2gr.h	$a4, $vr5, 5
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr3, $a4, 5
	vpickve2gr.h	$a4, $vr5, 6
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr3, $a4, 6
	vpickve2gr.h	$a4, $vr5, 7
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr3, $a4, 7
	vpickve2gr.h	$a4, $vr6, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr5, $a4, 0
	vpickve2gr.h	$a4, $vr6, 1
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr5, $a4, 1
	vpickve2gr.h	$a4, $vr6, 2
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr5, $a4, 2
	vpickve2gr.h	$a4, $vr6, 3
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr5, $a4, 3
	vpickve2gr.h	$a4, $vr6, 4
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr5, $a4, 4
	vpickve2gr.h	$a4, $vr6, 5
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr5, $a4, 5
	vpickve2gr.h	$a4, $vr6, 6
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr5, $a4, 6
	vpickve2gr.h	$a4, $vr6, 7
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr5, $a4, 7
	xvpermi.q	$xr7, $xr4, 1
	vpickve2gr.h	$a4, $vr7, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr6, $a4, 0
	vpickve2gr.h	$a4, $vr7, 1
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr6, $a4, 1
	vpickve2gr.h	$a4, $vr7, 2
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr6, $a4, 2
	vpickve2gr.h	$a4, $vr7, 3
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr6, $a4, 3
	vpickve2gr.h	$a4, $vr7, 4
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr6, $a4, 4
	vpickve2gr.h	$a4, $vr7, 5
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr6, $a4, 5
	vpickve2gr.h	$a4, $vr7, 6
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr6, $a4, 6
	vpickve2gr.h	$a4, $vr7, 7
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr6, $a4, 7
	vpickve2gr.h	$a4, $vr4, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr7, $a4, 0
	vpickve2gr.h	$a4, $vr4, 1
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr7, $a4, 1
	vpickve2gr.h	$a4, $vr4, 2
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr7, $a4, 2
	vpickve2gr.h	$a4, $vr4, 3
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr7, $a4, 3
	vpickve2gr.h	$a4, $vr4, 4
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr7, $a4, 4
	vpickve2gr.h	$a4, $vr4, 5
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr7, $a4, 5
	vpickve2gr.h	$a4, $vr4, 6
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr7, $a4, 6
	vpickve2gr.h	$a4, $vr4, 7
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr7, $a4, 7
	xvpermi.q	$xr8, $xr0, 1
	vpickve2gr.h	$a4, $vr8, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr4, $a4, 0
	vpickve2gr.h	$a4, $vr8, 1
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr4, $a4, 1
	vpickve2gr.h	$a4, $vr8, 2
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr4, $a4, 2
	vpickve2gr.h	$a4, $vr8, 3
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr4, $a4, 3
	vpickve2gr.h	$a4, $vr8, 4
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr4, $a4, 4
	vpickve2gr.h	$a4, $vr8, 5
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr4, $a4, 5
	vpickve2gr.h	$a4, $vr8, 6
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr4, $a4, 6
	vpickve2gr.h	$a4, $vr8, 7
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr4, $a4, 7
	vpickve2gr.h	$a4, $vr0, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr8, $a4, 0
	vpickve2gr.h	$a4, $vr0, 1
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr8, $a4, 1
	vpickve2gr.h	$a4, $vr0, 2
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr8, $a4, 2
	vpickve2gr.h	$a4, $vr0, 3
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr8, $a4, 3
	vpickve2gr.h	$a4, $vr0, 4
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr8, $a4, 4
	vpickve2gr.h	$a4, $vr0, 5
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr8, $a4, 5
	vpickve2gr.h	$a4, $vr0, 6
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr8, $a4, 6
	vpickve2gr.h	$a4, $vr0, 7
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr8, $a4, 7
	xvst	$xr2, $a0, -128
	xvst	$xr1, $a0, -96
	xvst	$xr5, $a0, -64
	xvst	$xr3, $a0, -32
	xvst	$xr7, $a0, 0
	xvst	$xr6, $a0, 32
	xvst	$xr8, $a0, 64
	xvst	$xr4, $a0, 96
	addi.d	$a1, $a1, 128
	addi.d	$a0, $a0, 256
	bnez	$a1, .LBB55_8
# %bb.9:                                # %.lr.ph.i
	st.d	$s3, $sp, 0                     # 8-byte Folded Spill
	ldx.hu	$a0, $fp, $s4
	ld.hu	$a1, $s5, 0
	ori	$a5, $s6, 3588
	ldx.hu	$a2, $fp, $a5
	ld.hu	$a3, $s5, 4
	st.w	$a0, $s1, 0
	st.w	$a1, $s1, 4
	st.w	$a2, $s1, 8
	st.w	$a3, $s1, 12
	ori	$s7, $s6, 3592
	ldx.hu	$a0, $fp, $s7
	ld.hu	$a1, $s5, 8
	ori	$s0, $s6, 3596
	ldx.hu	$a2, $fp, $s0
	ld.hu	$a3, $s5, 12
	st.w	$a0, $s1, 16
	st.w	$a1, $s1, 20
	st.w	$a2, $s1, 24
	st.w	$a3, $s1, 28
	move	$a4, $s1
	ori	$s1, $s6, 3600
	ldx.hu	$a0, $fp, $s1
	ld.hu	$a1, $s5, 16
	ori	$s2, $s6, 3604
	ldx.hu	$a2, $fp, $s2
	ld.hu	$a3, $s5, 20
	st.w	$a0, $a4, 32
	st.w	$a1, $a4, 36
	st.w	$a2, $a4, 40
	st.w	$a3, $a4, 44
	ori	$s3, $s6, 3608
	ldx.hu	$a0, $fp, $s3
	ld.hu	$a1, $s5, 24
	ori	$s6, $s6, 3612
	ldx.hu	$a2, $fp, $s6
	ld.hu	$a3, $s5, 28
	st.w	$a0, $a4, 48
	st.w	$a1, $a4, 52
	move	$a1, $zero
	st.w	$a2, $a4, 56
	st.w	$a3, $a4, 60
	ori	$s8, $s8, 480
	.p2align	4, , 16
.LBB55_10:                              # %_ZL28truncOrZextVecInLoopWithVW16ItjEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	ldx.w	$a0, $a0, $a1
	move	$a2, $a1
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ldx.w	$a1, $a1, $a2
	bne	$a0, $a1, .LBB55_23
# %bb.11:                               # %_ZL28truncOrZextVecInLoopWithVW16ItjEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB55_10 Depth=1
	addi.d	$s8, $s8, 2
	addi.d	$a1, $a2, 4
	bnez	$s8, .LBB55_10
# %bb.12:
	st.d	$a5, $sp, 16                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	ld.w	$a1, $a0, 28
	st.d	$a1, $sp, 0                     # 8-byte Folded Spill
	ld.d	$s8, $a0, 16
.Ltmp1214:
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1215:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	ld.d	$t2, $sp, 16                    # 8-byte Folded Reload
	ld.d	$a0, $sp, 0                     # 8-byte Folded Reload
	bnez	$a0, .LBB55_19
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s8, .LBB55_19
# %bb.15:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 96
	addi.d	$a1, $sp, 40
	lu12i.w	$a2, -5
	ori	$a2, $a2, 512
	lu12i.w	$a5, 4
	ori	$a3, $a5, 3488
	ori	$a4, $a5, 3520
	ori	$a5, $a5, 3552
	.p2align	4, , 16
.LBB55_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_17 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a7, $sp, 40
	ld.d	$a6, $sp, 32                    # 8-byte Folded Reload
	add.d	$a6, $a7, $a6
	addi.d	$a7, $a7, 128
	move	$t0, $a2
	.p2align	4, , 16
.LBB55_17:                              # %vector.body93
                                        #   Parent Loop BB55_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$t1, $a0, $t0
	xvldx	$xr3, $t1, $a3
	xvldx	$xr6, $t1, $a4
	xvldx	$xr4, $t1, $a5
	xvldx	$xr0, $t1, $s4
	xvpermi.q	$xr2, $xr3, 1
	vpickve2gr.h	$t1, $vr2, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr1, $t1, 0
	vpickve2gr.h	$t1, $vr2, 1
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr1, $t1, 1
	vpickve2gr.h	$t1, $vr2, 2
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr1, $t1, 2
	vpickve2gr.h	$t1, $vr2, 3
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr1, $t1, 3
	vpickve2gr.h	$t1, $vr2, 4
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr1, $t1, 4
	vpickve2gr.h	$t1, $vr2, 5
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr1, $t1, 5
	vpickve2gr.h	$t1, $vr2, 6
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr1, $t1, 6
	vpickve2gr.h	$t1, $vr2, 7
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr1, $t1, 7
	vpickve2gr.h	$t1, $vr3, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr2, $t1, 0
	vpickve2gr.h	$t1, $vr3, 1
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr2, $t1, 1
	vpickve2gr.h	$t1, $vr3, 2
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr2, $t1, 2
	vpickve2gr.h	$t1, $vr3, 3
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr2, $t1, 3
	vpickve2gr.h	$t1, $vr3, 4
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr2, $t1, 4
	vpickve2gr.h	$t1, $vr3, 5
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr2, $t1, 5
	vpickve2gr.h	$t1, $vr3, 6
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr2, $t1, 6
	vpickve2gr.h	$t1, $vr3, 7
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr2, $t1, 7
	xvpermi.q	$xr5, $xr6, 1
	vpickve2gr.h	$t1, $vr5, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr3, $t1, 0
	vpickve2gr.h	$t1, $vr5, 1
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr3, $t1, 1
	vpickve2gr.h	$t1, $vr5, 2
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr3, $t1, 2
	vpickve2gr.h	$t1, $vr5, 3
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr3, $t1, 3
	vpickve2gr.h	$t1, $vr5, 4
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr3, $t1, 4
	vpickve2gr.h	$t1, $vr5, 5
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr3, $t1, 5
	vpickve2gr.h	$t1, $vr5, 6
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr3, $t1, 6
	vpickve2gr.h	$t1, $vr5, 7
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr3, $t1, 7
	vpickve2gr.h	$t1, $vr6, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr5, $t1, 0
	vpickve2gr.h	$t1, $vr6, 1
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr5, $t1, 1
	vpickve2gr.h	$t1, $vr6, 2
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr5, $t1, 2
	vpickve2gr.h	$t1, $vr6, 3
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr5, $t1, 3
	vpickve2gr.h	$t1, $vr6, 4
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr5, $t1, 4
	vpickve2gr.h	$t1, $vr6, 5
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr5, $t1, 5
	vpickve2gr.h	$t1, $vr6, 6
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr5, $t1, 6
	vpickve2gr.h	$t1, $vr6, 7
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr5, $t1, 7
	xvpermi.q	$xr7, $xr4, 1
	vpickve2gr.h	$t1, $vr7, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr6, $t1, 0
	vpickve2gr.h	$t1, $vr7, 1
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr6, $t1, 1
	vpickve2gr.h	$t1, $vr7, 2
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr6, $t1, 2
	vpickve2gr.h	$t1, $vr7, 3
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr6, $t1, 3
	vpickve2gr.h	$t1, $vr7, 4
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr6, $t1, 4
	vpickve2gr.h	$t1, $vr7, 5
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr6, $t1, 5
	vpickve2gr.h	$t1, $vr7, 6
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr6, $t1, 6
	vpickve2gr.h	$t1, $vr7, 7
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr6, $t1, 7
	vpickve2gr.h	$t1, $vr4, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr7, $t1, 0
	vpickve2gr.h	$t1, $vr4, 1
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr7, $t1, 1
	vpickve2gr.h	$t1, $vr4, 2
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr7, $t1, 2
	vpickve2gr.h	$t1, $vr4, 3
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr7, $t1, 3
	vpickve2gr.h	$t1, $vr4, 4
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr7, $t1, 4
	vpickve2gr.h	$t1, $vr4, 5
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr7, $t1, 5
	vpickve2gr.h	$t1, $vr4, 6
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr7, $t1, 6
	vpickve2gr.h	$t1, $vr4, 7
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr7, $t1, 7
	xvpermi.q	$xr8, $xr0, 1
	vpickve2gr.h	$t1, $vr8, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr4, $t1, 0
	vpickve2gr.h	$t1, $vr8, 1
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr4, $t1, 1
	vpickve2gr.h	$t1, $vr8, 2
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr4, $t1, 2
	vpickve2gr.h	$t1, $vr8, 3
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr4, $t1, 3
	vpickve2gr.h	$t1, $vr8, 4
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr4, $t1, 4
	vpickve2gr.h	$t1, $vr8, 5
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr4, $t1, 5
	vpickve2gr.h	$t1, $vr8, 6
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr4, $t1, 6
	vpickve2gr.h	$t1, $vr8, 7
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr4, $t1, 7
	vpickve2gr.h	$t1, $vr0, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr8, $t1, 0
	vpickve2gr.h	$t1, $vr0, 1
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr8, $t1, 1
	vpickve2gr.h	$t1, $vr0, 2
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr8, $t1, 2
	vpickve2gr.h	$t1, $vr0, 3
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr8, $t1, 3
	vpickve2gr.h	$t1, $vr0, 4
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr8, $t1, 4
	vpickve2gr.h	$t1, $vr0, 5
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr8, $t1, 5
	vpickve2gr.h	$t1, $vr0, 6
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr8, $t1, 6
	vpickve2gr.h	$t1, $vr0, 7
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.w	$xr8, $t1, 7
	xvst	$xr2, $a7, -128
	xvst	$xr1, $a7, -96
	xvst	$xr5, $a7, -64
	xvst	$xr3, $a7, -32
	xvst	$xr7, $a7, 0
	xvst	$xr6, $a7, 32
	xvst	$xr8, $a7, 64
	xvst	$xr4, $a7, 96
	addi.d	$t0, $t0, 128
	addi.d	$a7, $a7, 256
	bnez	$t0, .LBB55_17
# %bb.18:                               # %.lr.ph.i24
                                        #   in Loop: Header=BB55_16 Depth=1
	ldx.hu	$a7, $fp, $s4
	ld.hu	$t0, $s5, 0
	ldx.hu	$t1, $fp, $t2
	st.w	$a7, $a6, 0
	ld.hu	$a7, $s5, 4
	st.w	$t0, $a6, 4
	st.w	$t1, $a6, 8
	ldx.hu	$t0, $fp, $s7
	st.w	$a7, $a6, 12
	ld.hu	$a7, $s5, 8
	ldx.hu	$t1, $fp, $s0
	st.w	$t0, $a6, 16
	ld.hu	$t0, $s5, 12
	st.w	$a7, $a6, 20
	st.w	$t1, $a6, 24
	ldx.hu	$a7, $fp, $s1
	st.w	$t0, $a6, 28
	ld.hu	$t0, $s5, 16
	ldx.hu	$t1, $fp, $s2
	st.w	$a7, $a6, 32
	ld.hu	$a7, $s5, 20
	st.w	$t0, $a6, 36
	st.w	$t1, $a6, 40
	ldx.hu	$t0, $fp, $s3
	st.w	$a7, $a6, 44
	ld.hu	$a7, $s5, 24
	ldx.hu	$t1, $fp, $s6
	st.w	$t0, $a6, 48
	ld.hu	$t0, $s5, 28
	st.w	$a7, $a6, 52
	st.w	$t1, $a6, 56
	addi.d	$s8, $s8, -1
	st.w	$t0, $a6, 60
	bnez	$s8, .LBB55_16
.LBB55_19:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1216:
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1217:
# %bb.20:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit36
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 40
	beqz	$a0, .LBB55_22
# %bb.21:                               # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i38
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB55_22:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit42
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB55_23:
.Ltmp1199:
	move	$s0, $a2
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1200:
# %bb.24:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	add.d	$a0, $fp, $s8
	ld.d	$a1, $sp, 0                     # 8-byte Folded Reload
	ldx.hu	$a1, $a0, $a1
.Ltmp1201:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1202:
# %bb.25:                               # %_ZNSolsEt.exit
.Ltmp1203:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1204:
# %bb.26:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	ldx.wu	$a1, $a0, $s0
.Ltmp1205:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1206:
# %bb.27:                               # %_ZNSolsEj.exit
.Ltmp1207:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1208:
# %bb.28:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit21
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	ldx.wu	$a1, $a0, $s0
.Ltmp1209:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1210:
# %bb.29:                               # %_ZNSolsEj.exit23
.Ltmp1211:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp1212:
# %bb.30:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB55_31:                              # %.thread
.Ltmp1195:
	move	$s1, $a0
	b	.LBB55_37
.LBB55_32:
.Ltmp1192:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB55_33:
.Ltmp1218:
	b	.LBB55_36
.LBB55_34:
.Ltmp1213:
	b	.LBB55_36
.LBB55_35:
.Ltmp1198:
.LBB55_36:
	move	$s1, $a0
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 40
	move	$s2, $a0
	beqz	$a0, .LBB55_38
.LBB55_37:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i31
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB55_38:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end55:
	.size	_Z62benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint32_t_RN9benchmark5StateE, .Lfunc_end55-_Z62benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint32_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table55:
.Lexception55:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end55-.Lcst_begin55
.Lcst_begin55:
	.uleb128 .Lfunc_begin55-.Lfunc_begin55  # >> Call Site 1 <<
	.uleb128 .Ltmp1190-.Lfunc_begin55       #   Call between .Lfunc_begin55 and .Ltmp1190
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1190-.Lfunc_begin55       # >> Call Site 2 <<
	.uleb128 .Ltmp1191-.Ltmp1190            #   Call between .Ltmp1190 and .Ltmp1191
	.uleb128 .Ltmp1192-.Lfunc_begin55       #     jumps to .Ltmp1192
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1193-.Lfunc_begin55       # >> Call Site 3 <<
	.uleb128 .Ltmp1194-.Ltmp1193            #   Call between .Ltmp1193 and .Ltmp1194
	.uleb128 .Ltmp1195-.Lfunc_begin55       #     jumps to .Ltmp1195
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1196-.Lfunc_begin55       # >> Call Site 4 <<
	.uleb128 .Ltmp1197-.Ltmp1196            #   Call between .Ltmp1196 and .Ltmp1197
	.uleb128 .Ltmp1198-.Lfunc_begin55       #     jumps to .Ltmp1198
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1214-.Lfunc_begin55       # >> Call Site 5 <<
	.uleb128 .Ltmp1217-.Ltmp1214            #   Call between .Ltmp1214 and .Ltmp1217
	.uleb128 .Ltmp1218-.Lfunc_begin55       #     jumps to .Ltmp1218
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1217-.Lfunc_begin55       # >> Call Site 6 <<
	.uleb128 .Ltmp1199-.Ltmp1217            #   Call between .Ltmp1217 and .Ltmp1199
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1199-.Lfunc_begin55       # >> Call Site 7 <<
	.uleb128 .Ltmp1212-.Ltmp1199            #   Call between .Ltmp1199 and .Ltmp1212
	.uleb128 .Ltmp1213-.Lfunc_begin55       #     jumps to .Ltmp1213
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1212-.Lfunc_begin55       # >> Call Site 8 <<
	.uleb128 .Lfunc_end55-.Ltmp1212         #   Call between .Ltmp1212 and .Lfunc_end55
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end55:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z54benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint32_t_RN9benchmark5StateE # -- Begin function _Z54benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint32_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z54benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint32_t_RN9benchmark5StateE,@function
_Z54benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint32_t_RN9benchmark5StateE: # @_Z54benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint32_t_RN9benchmark5StateE
.Lfunc_begin56:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception56
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$s1, $a0
	lu12i.w	$s6, 4
	ori	$s3, $s6, 3616
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp1219:
	lu12i.w	$a0, 9
	ori	$s0, $a0, 3136
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1220:
# %bb.1:
	move	$s2, $a0
	st.d	$a0, $sp, 16
.Ltmp1222:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1223:
# %bb.2:
	move	$s0, $a0
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 28
	lu12i.w	$s5, -5
	ori	$s7, $s5, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB56_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp1225:
	addi.d	$a0, $sp, 28
	addi.d	$a2, $sp, 28
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1226:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB56_3 Depth=1
	add.d	$a1, $fp, $s7
	addi.d	$s7, $s7, 2
	stx.h	$a0, $a1, $s3
	bnez	$s7, .LBB56_3
# %bb.5:                                # %vector.ph
	addi.d	$a0, $s0, 4
	ori	$a1, $s5, 480
	ori	$a2, $s6, 3618
	.p2align	4, , 16
.LBB56_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a3, $fp, $a1
	ldx.hu	$a4, $a3, $s3
	ldx.hu	$a3, $a3, $a2
	st.w	$a4, $a0, -4
	st.w	$a3, $a0, 0
	addi.d	$a1, $a1, 4
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB56_6
# %bb.7:                                # %vector.body83.preheader
	addi.d	$a0, $s2, 16
	ori	$a1, $s5, 480
	vrepli.b	$vr2, 0
	.p2align	4, , 16
.LBB56_8:                               # %vector.body83
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a1
	ldptr.d	$a3, $a2, 20000
	ldptr.d	$a2, $a2, 20008
	vinsgr2vr.d	$vr0, $a3, 0
	vinsgr2vr.d	$vr1, $a2, 0
	vilvl.h	$vr0, $vr2, $vr0
	vilvl.h	$vr1, $vr2, $vr1
	vst	$vr0, $a0, -16
	vst	$vr1, $a0, 0
	addi.d	$a1, $a1, 16
	addi.d	$a0, $a0, 32
	bnez	$a1, .LBB56_8
# %bb.9:                                # %_ZL20truncOrZextVecInLoopItjEvPKT_PT0_i.exit.preheader.preheader
	move	$s4, $zero
	ori	$s6, $s5, 480
	.p2align	4, , 16
.LBB56_10:                              # %_ZL20truncOrZextVecInLoopItjEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	ldx.w	$a0, $s2, $s4
	ldx.w	$a1, $s0, $s4
	bne	$a0, $a1, .LBB56_23
# %bb.11:                               # %_ZL20truncOrZextVecInLoopItjEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB56_10 Depth=1
	addi.d	$s6, $s6, 2
	addi.d	$s4, $s4, 4
	bnez	$s6, .LBB56_10
# %bb.12:
	vst	$vr2, $sp, 0                    # 16-byte Folded Spill
	ld.w	$s3, $s1, 28
	ld.d	$s2, $s1, 16
.Ltmp1243:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1244:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	vld	$vr2, $sp, 0                    # 16-byte Folded Reload
	bnez	$s3, .LBB56_19
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s2, .LBB56_19
# %bb.15:
	addi.d	$a0, $sp, 16
	ori	$a1, $s5, 480
	.p2align	4, , 16
.LBB56_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_17 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a2, $sp, 16
	addi.d	$a2, $a2, 16
	move	$a3, $a1
	.p2align	4, , 16
.LBB56_17:                              # %vector.body91
                                        #   Parent Loop BB56_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a4, $fp, $a3
	ldptr.d	$a5, $a4, 20000
	ldptr.d	$a4, $a4, 20008
	vinsgr2vr.d	$vr0, $a5, 0
	vinsgr2vr.d	$vr1, $a4, 0
	vilvl.h	$vr0, $vr2, $vr0
	vilvl.h	$vr1, $vr2, $vr1
	vst	$vr0, $a2, -16
	vst	$vr1, $a2, 0
	addi.d	$a3, $a3, 16
	addi.d	$a2, $a2, 32
	bnez	$a3, .LBB56_17
# %bb.18:                               # %_ZL20truncOrZextVecInLoopItjEvPKT_PT0_i.exit28
                                        #   in Loop: Header=BB56_16 Depth=1
	addi.d	$s2, $s2, -1
	bnez	$s2, .LBB56_16
.LBB56_19:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1245:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1246:
# %bb.20:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit36
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 16
	beqz	$a0, .LBB56_22
# %bb.21:                               # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i38
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB56_22:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit42
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB56_23:
.Ltmp1228:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1229:
# %bb.24:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	add.d	$a0, $fp, $s6
	ldx.hu	$a1, $a0, $s3
.Ltmp1230:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1231:
# %bb.25:                               # %_ZNSolsEt.exit
.Ltmp1232:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1233:
# %bb.26:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.wu	$a1, $s2, $s4
.Ltmp1234:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1235:
# %bb.27:                               # %_ZNSolsEj.exit
.Ltmp1236:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1237:
# %bb.28:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit21
	ldx.wu	$a1, $s0, $s4
.Ltmp1238:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1239:
# %bb.29:                               # %_ZNSolsEj.exit23
.Ltmp1240:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp1241:
# %bb.30:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB56_31:                              # %.thread
.Ltmp1224:
	move	$s1, $a0
	b	.LBB56_37
.LBB56_32:
.Ltmp1221:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB56_33:
.Ltmp1247:
	b	.LBB56_36
.LBB56_34:
.Ltmp1242:
	b	.LBB56_36
.LBB56_35:
.Ltmp1227:
.LBB56_36:
	move	$s1, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s2, $sp, 16
	beqz	$s2, .LBB56_38
.LBB56_37:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i31
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB56_38:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end56:
	.size	_Z54benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint32_t_RN9benchmark5StateE, .Lfunc_end56-_Z54benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint32_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table56:
.Lexception56:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end56-.Lcst_begin56
.Lcst_begin56:
	.uleb128 .Lfunc_begin56-.Lfunc_begin56  # >> Call Site 1 <<
	.uleb128 .Ltmp1219-.Lfunc_begin56       #   Call between .Lfunc_begin56 and .Ltmp1219
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1219-.Lfunc_begin56       # >> Call Site 2 <<
	.uleb128 .Ltmp1220-.Ltmp1219            #   Call between .Ltmp1219 and .Ltmp1220
	.uleb128 .Ltmp1221-.Lfunc_begin56       #     jumps to .Ltmp1221
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1222-.Lfunc_begin56       # >> Call Site 3 <<
	.uleb128 .Ltmp1223-.Ltmp1222            #   Call between .Ltmp1222 and .Ltmp1223
	.uleb128 .Ltmp1224-.Lfunc_begin56       #     jumps to .Ltmp1224
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1225-.Lfunc_begin56       # >> Call Site 4 <<
	.uleb128 .Ltmp1226-.Ltmp1225            #   Call between .Ltmp1225 and .Ltmp1226
	.uleb128 .Ltmp1227-.Lfunc_begin56       #     jumps to .Ltmp1227
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1243-.Lfunc_begin56       # >> Call Site 5 <<
	.uleb128 .Ltmp1246-.Ltmp1243            #   Call between .Ltmp1243 and .Ltmp1246
	.uleb128 .Ltmp1247-.Lfunc_begin56       #     jumps to .Ltmp1247
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1246-.Lfunc_begin56       # >> Call Site 6 <<
	.uleb128 .Ltmp1228-.Ltmp1246            #   Call between .Ltmp1246 and .Ltmp1228
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1228-.Lfunc_begin56       # >> Call Site 7 <<
	.uleb128 .Ltmp1241-.Ltmp1228            #   Call between .Ltmp1228 and .Ltmp1241
	.uleb128 .Ltmp1242-.Lfunc_begin56       #     jumps to .Ltmp1242
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1241-.Lfunc_begin56       # >> Call Site 8 <<
	.uleb128 .Lfunc_end56-.Ltmp1241         #   Call between .Ltmp1241 and .Lfunc_end56
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end56:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint32_t_RN9benchmark5StateE # -- Begin function _Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint32_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint32_t_RN9benchmark5StateE,@function
_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint32_t_RN9benchmark5StateE: # @_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint32_t_RN9benchmark5StateE
.Lfunc_begin57:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception57
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	st.d	$s8, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s0, $a0
	lu12i.w	$s6, 4
	ori	$s3, $s6, 3616
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp1248:
	lu12i.w	$a0, 9
	ori	$s2, $a0, 3136
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1249:
# %bb.1:
	move	$s1, $a0
	ori	$a0, $s6, 3586
	add.d	$s5, $fp, $a0
	st.d	$s1, $sp, 8
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 16
	lu12i.w	$s8, -5
	ori	$s7, $s8, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB57_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp1251:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1252:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB57_2 Depth=1
	add.d	$a1, $fp, $s7
	addi.d	$s7, $s7, 2
	stx.h	$a0, $a1, $s3
	bnez	$s7, .LBB57_2
# %bb.4:
	move	$s4, $zero
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s3, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB57_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp1254:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s3
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1255:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB57_5 Depth=1
	stx.w	$a0, $s1, $s4
	addi.d	$s4, $s4, 4
	bne	$s4, $s2, .LBB57_5
# %bb.7:
	ld.w	$s2, $s0, 28
	ld.d	$s1, $s0, 16
.Ltmp1257:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1258:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s2, .LBB57_14
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s1, .LBB57_14
# %bb.10:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 48
	addi.d	$a1, $sp, 8
	lu12i.w	$a2, 9
	ori	$a2, $a2, 3072
	ori	$a3, $s8, 512
	ori	$a4, $s6, 3536
	ori	$a5, $s6, 3552
	ori	$a6, $s6, 3568
	ori	$a7, $s6, 3584
	ori	$t0, $s6, 3588
	ori	$t1, $s6, 3592
	ori	$t2, $s6, 3596
	ori	$t3, $s6, 3600
	ori	$t4, $s6, 3604
	ori	$t5, $s6, 3608
	ori	$t6, $s6, 3612
	.p2align	4, , 16
.LBB57_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_12 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$t8, $sp, 8
	add.d	$t7, $t8, $a2
	addi.d	$t8, $t8, 64
	move	$s2, $a3
	.p2align	4, , 16
.LBB57_12:                              # %vector.body
                                        #   Parent Loop BB57_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$s3, $a0, $s2
	vldx	$vr2, $s3, $a4
	vldx	$vr4, $s3, $a5
	vldx	$vr3, $s3, $a6
	vldx	$vr1, $s3, $a7
	vpickve2gr.h	$s3, $vr2, 0
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr0, $s3, 0
	vpickve2gr.h	$s3, $vr2, 1
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr0, $s3, 1
	vpickve2gr.h	$s3, $vr2, 2
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr0, $s3, 2
	vpickve2gr.h	$s3, $vr2, 3
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr0, $s3, 3
	vpickve2gr.h	$s3, $vr2, 4
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr0, $s3, 4
	vpickve2gr.h	$s3, $vr2, 5
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr0, $s3, 5
	vpickve2gr.h	$s3, $vr2, 6
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr0, $s3, 6
	vpickve2gr.h	$s3, $vr2, 7
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr0, $s3, 7
	vpickve2gr.h	$s3, $vr4, 0
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr2, $s3, 0
	vpickve2gr.h	$s3, $vr4, 1
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr2, $s3, 1
	vpickve2gr.h	$s3, $vr4, 2
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr2, $s3, 2
	vpickve2gr.h	$s3, $vr4, 3
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr2, $s3, 3
	vpickve2gr.h	$s3, $vr4, 4
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr2, $s3, 4
	vpickve2gr.h	$s3, $vr4, 5
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr2, $s3, 5
	vpickve2gr.h	$s3, $vr4, 6
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr2, $s3, 6
	vpickve2gr.h	$s3, $vr4, 7
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr2, $s3, 7
	vpickve2gr.h	$s3, $vr3, 0
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr4, $s3, 0
	vpickve2gr.h	$s3, $vr3, 1
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr4, $s3, 1
	vpickve2gr.h	$s3, $vr3, 2
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr4, $s3, 2
	vpickve2gr.h	$s3, $vr3, 3
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr4, $s3, 3
	vpickve2gr.h	$s3, $vr3, 4
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr4, $s3, 4
	vpickve2gr.h	$s3, $vr3, 5
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr4, $s3, 5
	vpickve2gr.h	$s3, $vr3, 6
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr4, $s3, 6
	vpickve2gr.h	$s3, $vr3, 7
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr4, $s3, 7
	vpickve2gr.h	$s3, $vr1, 0
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr3, $s3, 0
	vpickve2gr.h	$s3, $vr1, 1
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr3, $s3, 1
	vpickve2gr.h	$s3, $vr1, 2
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr3, $s3, 2
	vpickve2gr.h	$s3, $vr1, 3
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr3, $s3, 3
	vpickve2gr.h	$s3, $vr1, 4
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr3, $s3, 4
	vpickve2gr.h	$s3, $vr1, 5
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr3, $s3, 5
	vpickve2gr.h	$s3, $vr1, 6
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr3, $s3, 6
	vpickve2gr.h	$s3, $vr1, 7
	bstrpick.d	$s3, $s3, 15, 0
	xvinsgr2vr.w	$xr3, $s3, 7
	xvld	$xr1, $t8, -64
	xvld	$xr5, $t8, -32
	xvld	$xr6, $t8, 0
	xvld	$xr7, $t8, 32
	xvadd.w	$xr0, $xr1, $xr0
	xvadd.w	$xr1, $xr5, $xr2
	xvadd.w	$xr2, $xr6, $xr4
	xvadd.w	$xr3, $xr7, $xr3
	xvst	$xr0, $t8, -64
	xvst	$xr1, $t8, -32
	xvst	$xr2, $t8, 0
	xvst	$xr3, $t8, 32
	addi.d	$s2, $s2, 64
	addi.d	$t8, $t8, 128
	bnez	$s2, .LBB57_12
# %bb.13:                               # %.lr.ph.i
                                        #   in Loop: Header=BB57_11 Depth=1
	ldx.hu	$t8, $fp, $a7
	ld.w	$s2, $t7, 0
	add.d	$t8, $s2, $t8
	st.w	$t8, $t7, 0
	ld.hu	$t8, $s5, 0
	ld.w	$s2, $t7, 4
	add.d	$t8, $s2, $t8
	st.w	$t8, $t7, 4
	ldx.hu	$t8, $fp, $t0
	ld.w	$s2, $t7, 8
	add.d	$t8, $s2, $t8
	st.w	$t8, $t7, 8
	ld.hu	$t8, $s5, 4
	ld.w	$s2, $t7, 12
	add.d	$t8, $s2, $t8
	st.w	$t8, $t7, 12
	ldx.hu	$t8, $fp, $t1
	ld.w	$s2, $t7, 16
	add.d	$t8, $s2, $t8
	st.w	$t8, $t7, 16
	ld.hu	$t8, $s5, 8
	ld.w	$s2, $t7, 20
	add.d	$t8, $s2, $t8
	st.w	$t8, $t7, 20
	ldx.hu	$t8, $fp, $t2
	ld.w	$s2, $t7, 24
	add.d	$t8, $s2, $t8
	st.w	$t8, $t7, 24
	ld.hu	$t8, $s5, 12
	ld.w	$s2, $t7, 28
	add.d	$t8, $s2, $t8
	st.w	$t8, $t7, 28
	ldx.hu	$t8, $fp, $t3
	ld.w	$s2, $t7, 32
	add.d	$t8, $s2, $t8
	st.w	$t8, $t7, 32
	ld.hu	$t8, $s5, 16
	ld.w	$s2, $t7, 36
	add.d	$t8, $s2, $t8
	st.w	$t8, $t7, 36
	ldx.hu	$t8, $fp, $t4
	ld.w	$s2, $t7, 40
	add.d	$t8, $s2, $t8
	st.w	$t8, $t7, 40
	ld.hu	$t8, $s5, 20
	ld.w	$s2, $t7, 44
	add.d	$t8, $s2, $t8
	st.w	$t8, $t7, 44
	ldx.hu	$t8, $fp, $t5
	ld.w	$s2, $t7, 48
	add.d	$t8, $s2, $t8
	st.w	$t8, $t7, 48
	ld.hu	$t8, $s5, 24
	ld.w	$s2, $t7, 52
	add.d	$t8, $s2, $t8
	st.w	$t8, $t7, 52
	ldx.hu	$t8, $fp, $t6
	ld.w	$s2, $t7, 56
	add.d	$t8, $s2, $t8
	st.w	$t8, $t7, 56
	ld.hu	$t8, $s5, 28
	ld.w	$s2, $t7, 60
	add.d	$t8, $s2, $t8
	addi.d	$s1, $s1, -1
	st.w	$t8, $t7, 60
	bnez	$s1, .LBB57_11
.LBB57_14:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1259:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1260:
# %bb.15:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 8
	beqz	$a0, .LBB57_17
# %bb.16:                               # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB57_17:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB57_18:
.Ltmp1250:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB57_19:
.Ltmp1261:
	ld.d	$s1, $sp, 8
	move	$s0, $a0
	bnez	$s1, .LBB57_23
	b	.LBB57_24
.LBB57_20:                              # %.loopexit
.Ltmp1256:
	b	.LBB57_22
.LBB57_21:                              # %.loopexit.split-lp
.Ltmp1253:
.LBB57_22:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB57_23:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB57_24:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end57:
	.size	_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint32_t_RN9benchmark5StateE, .Lfunc_end57-_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint32_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table57:
.Lexception57:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end57-.Lcst_begin57
.Lcst_begin57:
	.uleb128 .Lfunc_begin57-.Lfunc_begin57  # >> Call Site 1 <<
	.uleb128 .Ltmp1248-.Lfunc_begin57       #   Call between .Lfunc_begin57 and .Ltmp1248
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1248-.Lfunc_begin57       # >> Call Site 2 <<
	.uleb128 .Ltmp1249-.Ltmp1248            #   Call between .Ltmp1248 and .Ltmp1249
	.uleb128 .Ltmp1250-.Lfunc_begin57       #     jumps to .Ltmp1250
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1251-.Lfunc_begin57       # >> Call Site 3 <<
	.uleb128 .Ltmp1252-.Ltmp1251            #   Call between .Ltmp1251 and .Ltmp1252
	.uleb128 .Ltmp1253-.Lfunc_begin57       #     jumps to .Ltmp1253
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1254-.Lfunc_begin57       # >> Call Site 4 <<
	.uleb128 .Ltmp1255-.Ltmp1254            #   Call between .Ltmp1254 and .Ltmp1255
	.uleb128 .Ltmp1256-.Lfunc_begin57       #     jumps to .Ltmp1256
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1257-.Lfunc_begin57       # >> Call Site 5 <<
	.uleb128 .Ltmp1260-.Ltmp1257            #   Call between .Ltmp1257 and .Ltmp1260
	.uleb128 .Ltmp1261-.Lfunc_begin57       #     jumps to .Ltmp1261
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1260-.Lfunc_begin57       # >> Call Site 6 <<
	.uleb128 .Lfunc_end57-.Ltmp1260         #   Call between .Ltmp1260 and .Lfunc_end57
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end57:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint32_t_RN9benchmark5StateE # -- Begin function _Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint32_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint32_t_RN9benchmark5StateE,@function
_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint32_t_RN9benchmark5StateE: # @_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint32_t_RN9benchmark5StateE
.Lfunc_begin58:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception58
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	st.d	$s8, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s7, $a0
	lu12i.w	$s6, 4
	ori	$s3, $s6, 3616
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp1262:
	lu12i.w	$a0, 9
	ori	$s2, $a0, 3136
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1263:
# %bb.1:
	move	$s1, $a0
	ori	$a0, $s6, 3586
	add.d	$s5, $fp, $a0
	st.d	$s1, $sp, 8
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 16
	lu12i.w	$s8, -5
	ori	$s0, $s8, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB58_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp1265:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1266:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB58_2 Depth=1
	add.d	$a1, $fp, $s0
	addi.d	$s0, $s0, 2
	stx.h	$a0, $a1, $s3
	bnez	$s0, .LBB58_2
# %bb.4:
	move	$s0, $zero
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s3, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB58_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp1268:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s3
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1269:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB58_5 Depth=1
	stx.w	$a0, $s1, $s0
	addi.d	$s0, $s0, 4
	bne	$s0, $s2, .LBB58_5
# %bb.7:
	ld.w	$s0, $s7, 28
	ld.d	$s1, $s7, 16
.Ltmp1271:
	move	$a0, $s7
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1272:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s0, .LBB58_14
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s1, .LBB58_14
# %bb.10:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 96
	addi.d	$a1, $sp, 8
	lu12i.w	$a2, 9
	ori	$a2, $a2, 3072
	ori	$a3, $s8, 512
	ori	$a4, $s6, 3488
	ori	$a5, $s6, 3520
	ori	$a6, $s6, 3552
	ori	$a7, $s6, 3584
	ori	$t0, $s6, 3588
	ori	$t1, $s6, 3592
	ori	$t2, $s6, 3596
	ori	$t3, $s6, 3600
	ori	$t4, $s6, 3604
	ori	$t5, $s6, 3608
	ori	$t6, $s6, 3612
	.p2align	4, , 16
.LBB58_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_12 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$t8, $sp, 8
	add.d	$t7, $t8, $a2
	addi.d	$t8, $t8, 128
	move	$s2, $a3
	.p2align	4, , 16
.LBB58_12:                              # %vector.body
                                        #   Parent Loop BB58_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$s0, $a0, $s2
	xvldx	$xr1, $s0, $a4
	xvldx	$xr4, $s0, $a5
	xvldx	$xr5, $s0, $a6
	xvldx	$xr2, $s0, $a7
	vpickve2gr.h	$s0, $vr1, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr0, $s0, 0
	vpickve2gr.h	$s0, $vr1, 1
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr0, $s0, 1
	vpickve2gr.h	$s0, $vr1, 2
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr0, $s0, 2
	vpickve2gr.h	$s0, $vr1, 3
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr0, $s0, 3
	vpickve2gr.h	$s0, $vr1, 4
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr0, $s0, 4
	vpickve2gr.h	$s0, $vr1, 5
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr0, $s0, 5
	vpickve2gr.h	$s0, $vr1, 6
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr0, $s0, 6
	vpickve2gr.h	$s0, $vr1, 7
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr0, $s0, 7
	xvpermi.q	$xr3, $xr1, 1
	vpickve2gr.h	$s0, $vr3, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr1, $s0, 0
	vpickve2gr.h	$s0, $vr3, 1
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr1, $s0, 1
	vpickve2gr.h	$s0, $vr3, 2
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr1, $s0, 2
	vpickve2gr.h	$s0, $vr3, 3
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr1, $s0, 3
	vpickve2gr.h	$s0, $vr3, 4
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr1, $s0, 4
	vpickve2gr.h	$s0, $vr3, 5
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr1, $s0, 5
	vpickve2gr.h	$s0, $vr3, 6
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr1, $s0, 6
	vpickve2gr.h	$s0, $vr3, 7
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr1, $s0, 7
	vpickve2gr.h	$s0, $vr4, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr3, $s0, 0
	vpickve2gr.h	$s0, $vr4, 1
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr3, $s0, 1
	vpickve2gr.h	$s0, $vr4, 2
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr3, $s0, 2
	vpickve2gr.h	$s0, $vr4, 3
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr3, $s0, 3
	vpickve2gr.h	$s0, $vr4, 4
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr3, $s0, 4
	vpickve2gr.h	$s0, $vr4, 5
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr3, $s0, 5
	vpickve2gr.h	$s0, $vr4, 6
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr3, $s0, 6
	vpickve2gr.h	$s0, $vr4, 7
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr3, $s0, 7
	xvpermi.q	$xr6, $xr4, 1
	vpickve2gr.h	$s0, $vr6, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr4, $s0, 0
	vpickve2gr.h	$s0, $vr6, 1
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr4, $s0, 1
	vpickve2gr.h	$s0, $vr6, 2
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr4, $s0, 2
	vpickve2gr.h	$s0, $vr6, 3
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr4, $s0, 3
	vpickve2gr.h	$s0, $vr6, 4
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr4, $s0, 4
	vpickve2gr.h	$s0, $vr6, 5
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr4, $s0, 5
	vpickve2gr.h	$s0, $vr6, 6
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr4, $s0, 6
	vpickve2gr.h	$s0, $vr6, 7
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr4, $s0, 7
	vpickve2gr.h	$s0, $vr5, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr6, $s0, 0
	vpickve2gr.h	$s0, $vr5, 1
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr6, $s0, 1
	vpickve2gr.h	$s0, $vr5, 2
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr6, $s0, 2
	vpickve2gr.h	$s0, $vr5, 3
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr6, $s0, 3
	vpickve2gr.h	$s0, $vr5, 4
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr6, $s0, 4
	vpickve2gr.h	$s0, $vr5, 5
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr6, $s0, 5
	vpickve2gr.h	$s0, $vr5, 6
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr6, $s0, 6
	vpickve2gr.h	$s0, $vr5, 7
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr6, $s0, 7
	xvpermi.q	$xr7, $xr5, 1
	vpickve2gr.h	$s0, $vr7, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr5, $s0, 0
	vpickve2gr.h	$s0, $vr7, 1
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr5, $s0, 1
	vpickve2gr.h	$s0, $vr7, 2
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr5, $s0, 2
	vpickve2gr.h	$s0, $vr7, 3
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr5, $s0, 3
	vpickve2gr.h	$s0, $vr7, 4
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr5, $s0, 4
	vpickve2gr.h	$s0, $vr7, 5
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr5, $s0, 5
	vpickve2gr.h	$s0, $vr7, 6
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr5, $s0, 6
	vpickve2gr.h	$s0, $vr7, 7
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr5, $s0, 7
	vpickve2gr.h	$s0, $vr2, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr7, $s0, 0
	vpickve2gr.h	$s0, $vr2, 1
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr7, $s0, 1
	vpickve2gr.h	$s0, $vr2, 2
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr7, $s0, 2
	vpickve2gr.h	$s0, $vr2, 3
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr7, $s0, 3
	vpickve2gr.h	$s0, $vr2, 4
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr7, $s0, 4
	vpickve2gr.h	$s0, $vr2, 5
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr7, $s0, 5
	vpickve2gr.h	$s0, $vr2, 6
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr7, $s0, 6
	vpickve2gr.h	$s0, $vr2, 7
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr7, $s0, 7
	xvpermi.q	$xr2, $xr2, 1
	vpickve2gr.h	$s0, $vr2, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr8, $s0, 0
	vpickve2gr.h	$s0, $vr2, 1
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr8, $s0, 1
	vpickve2gr.h	$s0, $vr2, 2
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr8, $s0, 2
	vpickve2gr.h	$s0, $vr2, 3
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr8, $s0, 3
	vpickve2gr.h	$s0, $vr2, 4
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr8, $s0, 4
	vpickve2gr.h	$s0, $vr2, 5
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr8, $s0, 5
	vpickve2gr.h	$s0, $vr2, 6
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr8, $s0, 6
	vpickve2gr.h	$s0, $vr2, 7
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.w	$xr8, $s0, 7
	xvld	$xr2, $t8, -128
	xvld	$xr9, $t8, -96
	xvld	$xr10, $t8, -64
	xvld	$xr11, $t8, -32
	xvld	$xr12, $t8, 0
	xvld	$xr13, $t8, 32
	xvld	$xr14, $t8, 64
	xvld	$xr15, $t8, 96
	xvadd.w	$xr1, $xr9, $xr1
	xvadd.w	$xr0, $xr2, $xr0
	xvadd.w	$xr2, $xr11, $xr4
	xvadd.w	$xr3, $xr10, $xr3
	xvadd.w	$xr4, $xr13, $xr5
	xvadd.w	$xr5, $xr12, $xr6
	xvadd.w	$xr6, $xr15, $xr8
	xvadd.w	$xr7, $xr14, $xr7
	xvst	$xr0, $t8, -128
	xvst	$xr1, $t8, -96
	xvst	$xr3, $t8, -64
	xvst	$xr2, $t8, -32
	xvst	$xr5, $t8, 0
	xvst	$xr4, $t8, 32
	xvst	$xr7, $t8, 64
	xvst	$xr6, $t8, 96
	addi.d	$s2, $s2, 128
	addi.d	$t8, $t8, 256
	bnez	$s2, .LBB58_12
# %bb.13:                               # %.lr.ph.i
                                        #   in Loop: Header=BB58_11 Depth=1
	ldx.hu	$t8, $fp, $a7
	ld.w	$s0, $t7, 0
	add.d	$t8, $s0, $t8
	st.w	$t8, $t7, 0
	ld.hu	$t8, $s5, 0
	ld.w	$s0, $t7, 4
	add.d	$t8, $s0, $t8
	st.w	$t8, $t7, 4
	ldx.hu	$t8, $fp, $t0
	ld.w	$s0, $t7, 8
	add.d	$t8, $s0, $t8
	st.w	$t8, $t7, 8
	ld.hu	$t8, $s5, 4
	ld.w	$s0, $t7, 12
	add.d	$t8, $s0, $t8
	st.w	$t8, $t7, 12
	ldx.hu	$t8, $fp, $t1
	ld.w	$s0, $t7, 16
	add.d	$t8, $s0, $t8
	st.w	$t8, $t7, 16
	ld.hu	$t8, $s5, 8
	ld.w	$s0, $t7, 20
	add.d	$t8, $s0, $t8
	st.w	$t8, $t7, 20
	ldx.hu	$t8, $fp, $t2
	ld.w	$s0, $t7, 24
	add.d	$t8, $s0, $t8
	st.w	$t8, $t7, 24
	ld.hu	$t8, $s5, 12
	ld.w	$s0, $t7, 28
	add.d	$t8, $s0, $t8
	st.w	$t8, $t7, 28
	ldx.hu	$t8, $fp, $t3
	ld.w	$s0, $t7, 32
	add.d	$t8, $s0, $t8
	st.w	$t8, $t7, 32
	ld.hu	$t8, $s5, 16
	ld.w	$s0, $t7, 36
	add.d	$t8, $s0, $t8
	st.w	$t8, $t7, 36
	ldx.hu	$t8, $fp, $t4
	ld.w	$s0, $t7, 40
	add.d	$t8, $s0, $t8
	st.w	$t8, $t7, 40
	ld.hu	$t8, $s5, 20
	ld.w	$s0, $t7, 44
	add.d	$t8, $s0, $t8
	st.w	$t8, $t7, 44
	ldx.hu	$t8, $fp, $t5
	ld.w	$s0, $t7, 48
	add.d	$t8, $s0, $t8
	st.w	$t8, $t7, 48
	ld.hu	$t8, $s5, 24
	ld.w	$s0, $t7, 52
	add.d	$t8, $s0, $t8
	st.w	$t8, $t7, 52
	ldx.hu	$t8, $fp, $t6
	ld.w	$s0, $t7, 56
	add.d	$t8, $s0, $t8
	st.w	$t8, $t7, 56
	ld.hu	$t8, $s5, 28
	ld.w	$s0, $t7, 60
	add.d	$t8, $s0, $t8
	addi.d	$s1, $s1, -1
	st.w	$t8, $t7, 60
	bnez	$s1, .LBB58_11
.LBB58_14:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1273:
	move	$a0, $s7
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1274:
# %bb.15:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 8
	beqz	$a0, .LBB58_17
# %bb.16:                               # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB58_17:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB58_18:
.Ltmp1264:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB58_19:
.Ltmp1275:
	ld.d	$s1, $sp, 8
	move	$s0, $a0
	bnez	$s1, .LBB58_23
	b	.LBB58_24
.LBB58_20:                              # %.loopexit
.Ltmp1270:
	b	.LBB58_22
.LBB58_21:                              # %.loopexit.split-lp
.Ltmp1267:
.LBB58_22:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB58_23:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB58_24:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end58:
	.size	_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint32_t_RN9benchmark5StateE, .Lfunc_end58-_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint32_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table58:
.Lexception58:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end58-.Lcst_begin58
.Lcst_begin58:
	.uleb128 .Lfunc_begin58-.Lfunc_begin58  # >> Call Site 1 <<
	.uleb128 .Ltmp1262-.Lfunc_begin58       #   Call between .Lfunc_begin58 and .Ltmp1262
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1262-.Lfunc_begin58       # >> Call Site 2 <<
	.uleb128 .Ltmp1263-.Ltmp1262            #   Call between .Ltmp1262 and .Ltmp1263
	.uleb128 .Ltmp1264-.Lfunc_begin58       #     jumps to .Ltmp1264
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1265-.Lfunc_begin58       # >> Call Site 3 <<
	.uleb128 .Ltmp1266-.Ltmp1265            #   Call between .Ltmp1265 and .Ltmp1266
	.uleb128 .Ltmp1267-.Lfunc_begin58       #     jumps to .Ltmp1267
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1268-.Lfunc_begin58       # >> Call Site 4 <<
	.uleb128 .Ltmp1269-.Ltmp1268            #   Call between .Ltmp1268 and .Ltmp1269
	.uleb128 .Ltmp1270-.Lfunc_begin58       #     jumps to .Ltmp1270
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1271-.Lfunc_begin58       # >> Call Site 5 <<
	.uleb128 .Ltmp1274-.Ltmp1271            #   Call between .Ltmp1271 and .Ltmp1274
	.uleb128 .Ltmp1275-.Lfunc_begin58       #     jumps to .Ltmp1275
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1274-.Lfunc_begin58       # >> Call Site 6 <<
	.uleb128 .Lfunc_end58-.Ltmp1274         #   Call between .Ltmp1274 and .Lfunc_end58
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end58:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint32_t_RN9benchmark5StateE # -- Begin function _Z61benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint32_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint32_t_RN9benchmark5StateE,@function
_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint32_t_RN9benchmark5StateE: # @_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint32_t_RN9benchmark5StateE
.Lfunc_begin59:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception59
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$s0, $a0
	lu12i.w	$a0, 4
	ori	$s1, $a0, 3616
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp1276:
	lu12i.w	$a0, 9
	ori	$s3, $a0, 3136
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1277:
# %bb.1:
	move	$s2, $a0
	st.d	$a0, $sp, 8
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 16
	lu12i.w	$s5, -5
	ori	$s6, $s5, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB59_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp1279:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1280:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB59_2 Depth=1
	add.d	$a1, $fp, $s6
	addi.d	$s6, $s6, 2
	stx.h	$a0, $a1, $s1
	bnez	$s6, .LBB59_2
# %bb.4:
	move	$s6, $zero
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB59_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp1282:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1283:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB59_5 Depth=1
	stx.w	$a0, $s2, $s6
	addi.d	$s6, $s6, 4
	bne	$s6, $s3, .LBB59_5
# %bb.7:
	ld.w	$s3, $s0, 28
	ld.d	$s2, $s0, 16
.Ltmp1285:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1286:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s3, .LBB59_14
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s2, .LBB59_14
# %bb.10:
	addi.d	$a0, $sp, 8
	ori	$a1, $s5, 480
	.p2align	4, , 16
.LBB59_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_12 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a2, $sp, 8
	move	$a3, $a1
	.p2align	4, , 16
.LBB59_12:                              # %vector.body
                                        #   Parent Loop BB59_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a4, $fp, $a3
	vldx	$vr0, $a4, $s1
	vpickve2gr.h	$a4, $vr0, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr1, $a4, 0
	vpickve2gr.h	$a4, $vr0, 1
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr1, $a4, 1
	vpickve2gr.h	$a4, $vr0, 2
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr1, $a4, 2
	vpickve2gr.h	$a4, $vr0, 3
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr1, $a4, 3
	vpickve2gr.h	$a4, $vr0, 4
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr1, $a4, 4
	vpickve2gr.h	$a4, $vr0, 5
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.w	$xr1, $a4, 5
	vpickve2gr.h	$a4, $vr0, 6
	bstrpick.d	$a4, $a4, 15, 0
	vpickve2gr.h	$a5, $vr0, 7
	xvld	$xr0, $a2, 0
	xvinsgr2vr.w	$xr1, $a4, 6
	bstrpick.d	$a4, $a5, 15, 0
	xvinsgr2vr.w	$xr1, $a4, 7
	xvadd.w	$xr0, $xr0, $xr1
	xvst	$xr0, $a2, 0
	addi.d	$a3, $a3, 16
	addi.d	$a2, $a2, 32
	bnez	$a3, .LBB59_12
# %bb.13:                               # %_ZL27truncOrZextVecWithAddInLoopItjEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB59_11 Depth=1
	addi.d	$s2, $s2, -1
	bnez	$s2, .LBB59_11
.LBB59_14:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1287:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1288:
# %bb.15:                               # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 8
	beqz	$a0, .LBB59_17
# %bb.16:                               # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB59_17:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.LBB59_18:
.Ltmp1278:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB59_19:
.Ltmp1289:
	ld.d	$s2, $sp, 8
	move	$s0, $a0
	bnez	$s2, .LBB59_23
	b	.LBB59_24
.LBB59_20:                              # %.loopexit
.Ltmp1284:
	b	.LBB59_22
.LBB59_21:                              # %.loopexit.split-lp
.Ltmp1281:
.LBB59_22:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB59_23:                              # %_ZNKSt14default_deleteIA_jEclIjEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB59_24:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end59:
	.size	_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint32_t_RN9benchmark5StateE, .Lfunc_end59-_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint32_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table59:
.Lexception59:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end59-.Lcst_begin59
.Lcst_begin59:
	.uleb128 .Lfunc_begin59-.Lfunc_begin59  # >> Call Site 1 <<
	.uleb128 .Ltmp1276-.Lfunc_begin59       #   Call between .Lfunc_begin59 and .Ltmp1276
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1276-.Lfunc_begin59       # >> Call Site 2 <<
	.uleb128 .Ltmp1277-.Ltmp1276            #   Call between .Ltmp1276 and .Ltmp1277
	.uleb128 .Ltmp1278-.Lfunc_begin59       #     jumps to .Ltmp1278
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1279-.Lfunc_begin59       # >> Call Site 3 <<
	.uleb128 .Ltmp1280-.Ltmp1279            #   Call between .Ltmp1279 and .Ltmp1280
	.uleb128 .Ltmp1281-.Lfunc_begin59       #     jumps to .Ltmp1281
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1282-.Lfunc_begin59       # >> Call Site 4 <<
	.uleb128 .Ltmp1283-.Ltmp1282            #   Call between .Ltmp1282 and .Ltmp1283
	.uleb128 .Ltmp1284-.Lfunc_begin59       #     jumps to .Ltmp1284
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1285-.Lfunc_begin59       # >> Call Site 5 <<
	.uleb128 .Ltmp1288-.Ltmp1285            #   Call between .Ltmp1285 and .Ltmp1288
	.uleb128 .Ltmp1289-.Lfunc_begin59       #     jumps to .Ltmp1289
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1288-.Lfunc_begin59       # >> Call Site 6 <<
	.uleb128 .Lfunc_end59-.Ltmp1288         #   Call between .Ltmp1288 and .Lfunc_end59
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end59:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z61benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint64_t_RN9benchmark5StateE # -- Begin function _Z61benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint64_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z61benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint64_t_RN9benchmark5StateE,@function
_Z61benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint64_t_RN9benchmark5StateE: # @_Z61benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint64_t_RN9benchmark5StateE
.Lfunc_begin60:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception60
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	lu12i.w	$s6, 4
	ori	$s3, $s6, 3616
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp1290:
	lu12i.w	$s1, 19
	ori	$s0, $s1, 2176
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1291:
# %bb.1:                                # %.split
	move	$s2, $a0
	st.d	$a0, $sp, 40
.Ltmp1293:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
.Ltmp1294:
# %bb.2:
	ori	$a0, $s6, 3586
	add.d	$s5, $fp, $a0
	ori	$a0, $s1, 2048
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	add.d	$s1, $s2, $a0
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 52
	lu12i.w	$s7, -5
	ori	$s0, $s7, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB60_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp1296:
	addi.d	$a0, $sp, 52
	addi.d	$a2, $sp, 52
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1297:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB60_3 Depth=1
	add.d	$a1, $fp, $s0
	addi.d	$s0, $s0, 2
	stx.h	$a0, $a1, $s3
	bnez	$s0, .LBB60_3
# %bb.5:                                # %vector.ph
	ori	$a0, $s7, 480
	vrepli.b	$vr0, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB60_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a0
	ldx.w	$a2, $a2, $s3
	vinsgr2vr.w	$vr1, $a2, 0
	vilvl.h	$vr1, $vr0, $vr1
	vilvl.w	$vr1, $vr0, $vr1
	vst	$vr1, $a1, 0
	addi.d	$a0, $a0, 4
	addi.d	$a1, $a1, 16
	bnez	$a0, .LBB60_6
# %bb.7:                                # %vector.body83.preheader
	st.d	$s2, $sp, 16                    # 8-byte Folded Spill
	addi.d	$a0, $s2, 128
	ori	$a1, $s7, 512
	ori	$s4, $s6, 3584
	ori	$a4, $s6, 3600
	ori	$a2, $s6, 3632
	.p2align	4, , 16
.LBB60_8:                               # %vector.body83
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a3, $fp, $a1
	vldx	$vr3, $a3, $s4
	vldx	$vr6, $a3, $a4
	vldx	$vr4, $a3, $s3
	vldx	$vr1, $a3, $a2
	vpickve2gr.h	$a3, $vr3, 0
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr0, $a3, 0
	vpickve2gr.h	$a3, $vr3, 1
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr0, $a3, 1
	vpickve2gr.h	$a3, $vr3, 2
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr0, $a3, 2
	vpickve2gr.h	$a3, $vr3, 3
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr0, $a3, 3
	vpickve2gr.h	$a3, $vr3, 4
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr2, $a3, 0
	vpickve2gr.h	$a3, $vr3, 5
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr2, $a3, 1
	vpickve2gr.h	$a3, $vr3, 6
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr2, $a3, 2
	vpickve2gr.h	$a3, $vr3, 7
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr2, $a3, 3
	vpickve2gr.h	$a3, $vr6, 0
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr3, $a3, 0
	vpickve2gr.h	$a3, $vr6, 1
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr3, $a3, 1
	vpickve2gr.h	$a3, $vr6, 2
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr3, $a3, 2
	vpickve2gr.h	$a3, $vr6, 3
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr3, $a3, 3
	vpickve2gr.h	$a3, $vr6, 4
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr5, $a3, 0
	vpickve2gr.h	$a3, $vr6, 5
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr5, $a3, 1
	vpickve2gr.h	$a3, $vr6, 6
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr5, $a3, 2
	vpickve2gr.h	$a3, $vr6, 7
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr5, $a3, 3
	vpickve2gr.h	$a3, $vr4, 0
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr6, $a3, 0
	vpickve2gr.h	$a3, $vr4, 1
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr6, $a3, 1
	vpickve2gr.h	$a3, $vr4, 2
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr6, $a3, 2
	vpickve2gr.h	$a3, $vr4, 3
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr6, $a3, 3
	vpickve2gr.h	$a3, $vr4, 4
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr7, $a3, 0
	vpickve2gr.h	$a3, $vr4, 5
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr7, $a3, 1
	vpickve2gr.h	$a3, $vr4, 6
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr7, $a3, 2
	vpickve2gr.h	$a3, $vr4, 7
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr7, $a3, 3
	vpickve2gr.h	$a3, $vr1, 0
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr4, $a3, 0
	vpickve2gr.h	$a3, $vr1, 1
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr4, $a3, 1
	vpickve2gr.h	$a3, $vr1, 2
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr4, $a3, 2
	vpickve2gr.h	$a3, $vr1, 3
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr4, $a3, 3
	vpickve2gr.h	$a3, $vr1, 4
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr8, $a3, 0
	vpickve2gr.h	$a3, $vr1, 5
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr8, $a3, 1
	vpickve2gr.h	$a3, $vr1, 6
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr8, $a3, 2
	vpickve2gr.h	$a3, $vr1, 7
	bstrpick.d	$a3, $a3, 15, 0
	bstrpick.d	$a3, $a3, 15, 0
	xvinsgr2vr.d	$xr8, $a3, 3
	xvst	$xr2, $a0, -96
	xvst	$xr0, $a0, -128
	xvst	$xr5, $a0, -32
	xvst	$xr3, $a0, -64
	xvst	$xr7, $a0, 32
	xvst	$xr6, $a0, 0
	xvst	$xr8, $a0, 96
	xvst	$xr4, $a0, 64
	addi.d	$a1, $a1, 64
	addi.d	$a0, $a0, 256
	bnez	$a1, .LBB60_8
# %bb.9:                                # %.lr.ph.i
	st.d	$s3, $sp, 0                     # 8-byte Folded Spill
	ldx.hu	$a0, $fp, $s4
	ld.hu	$a1, $s5, 0
	ori	$s8, $s6, 3588
	ldx.hu	$a2, $fp, $s8
	ld.hu	$a3, $s5, 4
	st.d	$a0, $s1, 0
	st.d	$a1, $s1, 8
	st.d	$a2, $s1, 16
	st.d	$a3, $s1, 24
	ori	$s0, $s6, 3592
	ldx.hu	$a0, $fp, $s0
	ld.hu	$a1, $s5, 8
	move	$a5, $s1
	ori	$s1, $s6, 3596
	ldx.hu	$a2, $fp, $s1
	ld.hu	$a3, $s5, 12
	st.d	$a0, $a5, 32
	st.d	$a1, $a5, 40
	st.d	$a2, $a5, 48
	st.d	$a3, $a5, 56
	ldx.hu	$a0, $fp, $a4
	ld.hu	$a1, $s5, 16
	ori	$s2, $s6, 3604
	ldx.hu	$a2, $fp, $s2
	ld.hu	$a3, $s5, 20
	st.d	$a0, $a5, 64
	st.d	$a1, $a5, 72
	st.d	$a2, $a5, 80
	st.d	$a3, $a5, 88
	ori	$s3, $s6, 3608
	ldx.hu	$a0, $fp, $s3
	ld.hu	$a1, $s5, 24
	ori	$s6, $s6, 3612
	ldx.hu	$a2, $fp, $s6
	ld.hu	$a3, $s5, 28
	st.d	$a0, $a5, 96
	st.d	$a1, $a5, 104
	move	$a1, $zero
	st.d	$a2, $a5, 112
	st.d	$a3, $a5, 120
	ori	$s7, $s7, 480
	.p2align	4, , 16
.LBB60_10:                              # %_ZL27truncOrZextVecInLoopWithVW8ItmEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	ldx.d	$a0, $a0, $a1
	move	$a2, $a1
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ldx.d	$a1, $a1, $a2
	bne	$a0, $a1, .LBB60_23
# %bb.11:                               # %_ZL27truncOrZextVecInLoopWithVW8ItmEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB60_10 Depth=1
	addi.d	$s7, $s7, 2
	addi.d	$a1, $a2, 8
	bnez	$s7, .LBB60_10
# %bb.12:
	st.d	$a4, $sp, 16                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	ld.w	$a1, $a0, 28
	st.d	$a1, $sp, 0                     # 8-byte Folded Spill
	ld.d	$s7, $a0, 16
.Ltmp1314:
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1315:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	ld.d	$t2, $sp, 16                    # 8-byte Folded Reload
	ld.d	$a0, $sp, 0                     # 8-byte Folded Reload
	bnez	$a0, .LBB60_19
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s7, .LBB60_19
# %bb.15:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 48
	addi.d	$a1, $sp, 40
	lu12i.w	$a2, -5
	ori	$a2, $a2, 512
	lu12i.w	$a5, 4
	ori	$a3, $a5, 3536
	ori	$a4, $a5, 3552
	ori	$a5, $a5, 3568
	.p2align	4, , 16
.LBB60_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_17 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a7, $sp, 40
	ld.d	$a6, $sp, 32                    # 8-byte Folded Reload
	add.d	$a6, $a7, $a6
	addi.d	$a7, $a7, 128
	move	$t0, $a2
	.p2align	4, , 16
.LBB60_17:                              # %vector.body93
                                        #   Parent Loop BB60_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$t1, $a0, $t0
	vldx	$vr3, $t1, $a3
	vldx	$vr6, $t1, $a4
	vldx	$vr4, $t1, $a5
	vldx	$vr1, $t1, $s4
	vpickve2gr.h	$t1, $vr3, 0
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr0, $t1, 0
	vpickve2gr.h	$t1, $vr3, 1
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr0, $t1, 1
	vpickve2gr.h	$t1, $vr3, 2
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr0, $t1, 2
	vpickve2gr.h	$t1, $vr3, 3
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr0, $t1, 3
	vpickve2gr.h	$t1, $vr3, 4
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr2, $t1, 0
	vpickve2gr.h	$t1, $vr3, 5
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr2, $t1, 1
	vpickve2gr.h	$t1, $vr3, 6
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr2, $t1, 2
	vpickve2gr.h	$t1, $vr3, 7
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr2, $t1, 3
	vpickve2gr.h	$t1, $vr6, 0
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr3, $t1, 0
	vpickve2gr.h	$t1, $vr6, 1
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr3, $t1, 1
	vpickve2gr.h	$t1, $vr6, 2
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr3, $t1, 2
	vpickve2gr.h	$t1, $vr6, 3
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr3, $t1, 3
	vpickve2gr.h	$t1, $vr6, 4
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr5, $t1, 0
	vpickve2gr.h	$t1, $vr6, 5
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr5, $t1, 1
	vpickve2gr.h	$t1, $vr6, 6
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr5, $t1, 2
	vpickve2gr.h	$t1, $vr6, 7
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr5, $t1, 3
	vpickve2gr.h	$t1, $vr4, 0
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr6, $t1, 0
	vpickve2gr.h	$t1, $vr4, 1
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr6, $t1, 1
	vpickve2gr.h	$t1, $vr4, 2
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr6, $t1, 2
	vpickve2gr.h	$t1, $vr4, 3
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr6, $t1, 3
	vpickve2gr.h	$t1, $vr4, 4
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr7, $t1, 0
	vpickve2gr.h	$t1, $vr4, 5
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr7, $t1, 1
	vpickve2gr.h	$t1, $vr4, 6
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr7, $t1, 2
	vpickve2gr.h	$t1, $vr4, 7
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr7, $t1, 3
	vpickve2gr.h	$t1, $vr1, 0
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr4, $t1, 0
	vpickve2gr.h	$t1, $vr1, 1
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr4, $t1, 1
	vpickve2gr.h	$t1, $vr1, 2
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr4, $t1, 2
	vpickve2gr.h	$t1, $vr1, 3
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr4, $t1, 3
	vpickve2gr.h	$t1, $vr1, 4
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr8, $t1, 0
	vpickve2gr.h	$t1, $vr1, 5
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr8, $t1, 1
	vpickve2gr.h	$t1, $vr1, 6
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr8, $t1, 2
	vpickve2gr.h	$t1, $vr1, 7
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr8, $t1, 3
	xvst	$xr2, $a7, -96
	xvst	$xr0, $a7, -128
	xvst	$xr5, $a7, -32
	xvst	$xr3, $a7, -64
	xvst	$xr7, $a7, 32
	xvst	$xr6, $a7, 0
	xvst	$xr8, $a7, 96
	xvst	$xr4, $a7, 64
	addi.d	$t0, $t0, 64
	addi.d	$a7, $a7, 256
	bnez	$t0, .LBB60_17
# %bb.18:                               # %.lr.ph.i24
                                        #   in Loop: Header=BB60_16 Depth=1
	ldx.hu	$a7, $fp, $s4
	ld.hu	$t0, $s5, 0
	ldx.hu	$t1, $fp, $s8
	st.d	$a7, $a6, 0
	ld.hu	$a7, $s5, 4
	st.d	$t0, $a6, 8
	st.d	$t1, $a6, 16
	ldx.hu	$t0, $fp, $s0
	st.d	$a7, $a6, 24
	ld.hu	$a7, $s5, 8
	ldx.hu	$t1, $fp, $s1
	st.d	$t0, $a6, 32
	ld.hu	$t0, $s5, 12
	st.d	$a7, $a6, 40
	st.d	$t1, $a6, 48
	ldx.hu	$a7, $fp, $t2
	st.d	$t0, $a6, 56
	ld.hu	$t0, $s5, 16
	ldx.hu	$t1, $fp, $s2
	st.d	$a7, $a6, 64
	ld.hu	$a7, $s5, 20
	st.d	$t0, $a6, 72
	st.d	$t1, $a6, 80
	ldx.hu	$t0, $fp, $s3
	st.d	$a7, $a6, 88
	ld.hu	$a7, $s5, 24
	ldx.hu	$t1, $fp, $s6
	st.d	$t0, $a6, 96
	ld.hu	$t0, $s5, 28
	st.d	$a7, $a6, 104
	st.d	$t1, $a6, 112
	addi.d	$s7, $s7, -1
	st.d	$t0, $a6, 120
	bnez	$s7, .LBB60_16
.LBB60_19:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1316:
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1317:
# %bb.20:                               # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit36
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 40
	beqz	$a0, .LBB60_22
# %bb.21:                               # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i38
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB60_22:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit42
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB60_23:
.Ltmp1299:
	move	$s0, $a2
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1300:
# %bb.24:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	add.d	$a0, $fp, $s7
	ld.d	$a1, $sp, 0                     # 8-byte Folded Reload
	ldx.hu	$a1, $a0, $a1
.Ltmp1301:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1302:
# %bb.25:                               # %_ZNSolsEt.exit
.Ltmp1303:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1304:
# %bb.26:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	ldx.d	$a1, $a0, $s0
.Ltmp1305:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1306:
# %bb.27:                               # %_ZNSolsEm.exit
.Ltmp1307:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1308:
# %bb.28:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit21
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	ldx.d	$a1, $a0, $s0
.Ltmp1309:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1310:
# %bb.29:                               # %_ZNSolsEm.exit23
.Ltmp1311:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp1312:
# %bb.30:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB60_31:                              # %.thread
.Ltmp1295:
	move	$s1, $a0
	b	.LBB60_37
.LBB60_32:
.Ltmp1292:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB60_33:
.Ltmp1318:
	b	.LBB60_36
.LBB60_34:
.Ltmp1313:
	b	.LBB60_36
.LBB60_35:
.Ltmp1298:
.LBB60_36:
	move	$s1, $a0
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 40
	move	$s2, $a0
	beqz	$a0, .LBB60_38
.LBB60_37:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i31
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB60_38:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end60:
	.size	_Z61benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint64_t_RN9benchmark5StateE, .Lfunc_end60-_Z61benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint64_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table60:
.Lexception60:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end60-.Lcst_begin60
.Lcst_begin60:
	.uleb128 .Lfunc_begin60-.Lfunc_begin60  # >> Call Site 1 <<
	.uleb128 .Ltmp1290-.Lfunc_begin60       #   Call between .Lfunc_begin60 and .Ltmp1290
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1290-.Lfunc_begin60       # >> Call Site 2 <<
	.uleb128 .Ltmp1291-.Ltmp1290            #   Call between .Ltmp1290 and .Ltmp1291
	.uleb128 .Ltmp1292-.Lfunc_begin60       #     jumps to .Ltmp1292
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1293-.Lfunc_begin60       # >> Call Site 3 <<
	.uleb128 .Ltmp1294-.Ltmp1293            #   Call between .Ltmp1293 and .Ltmp1294
	.uleb128 .Ltmp1295-.Lfunc_begin60       #     jumps to .Ltmp1295
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1296-.Lfunc_begin60       # >> Call Site 4 <<
	.uleb128 .Ltmp1297-.Ltmp1296            #   Call between .Ltmp1296 and .Ltmp1297
	.uleb128 .Ltmp1298-.Lfunc_begin60       #     jumps to .Ltmp1298
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1314-.Lfunc_begin60       # >> Call Site 5 <<
	.uleb128 .Ltmp1317-.Ltmp1314            #   Call between .Ltmp1314 and .Ltmp1317
	.uleb128 .Ltmp1318-.Lfunc_begin60       #     jumps to .Ltmp1318
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1317-.Lfunc_begin60       # >> Call Site 6 <<
	.uleb128 .Ltmp1299-.Ltmp1317            #   Call between .Ltmp1317 and .Ltmp1299
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1299-.Lfunc_begin60       # >> Call Site 7 <<
	.uleb128 .Ltmp1312-.Ltmp1299            #   Call between .Ltmp1299 and .Ltmp1312
	.uleb128 .Ltmp1313-.Lfunc_begin60       #     jumps to .Ltmp1313
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1312-.Lfunc_begin60       # >> Call Site 8 <<
	.uleb128 .Lfunc_end60-.Ltmp1312         #   Call between .Ltmp1312 and .Lfunc_end60
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end60:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z62benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint64_t_RN9benchmark5StateE # -- Begin function _Z62benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint64_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z62benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint64_t_RN9benchmark5StateE,@function
_Z62benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint64_t_RN9benchmark5StateE: # @_Z62benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint64_t_RN9benchmark5StateE
.Lfunc_begin61:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception61
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	lu12i.w	$s6, 4
	ori	$s3, $s6, 3616
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp1319:
	lu12i.w	$s1, 19
	ori	$s0, $s1, 2176
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1320:
# %bb.1:                                # %.split
	move	$s2, $a0
	st.d	$a0, $sp, 40
.Ltmp1322:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
.Ltmp1323:
# %bb.2:
	ori	$a0, $s6, 3586
	add.d	$s5, $fp, $a0
	ori	$a0, $s1, 2048
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	add.d	$s1, $s2, $a0
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 52
	lu12i.w	$s8, -5
	ori	$s0, $s8, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB61_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp1325:
	addi.d	$a0, $sp, 52
	addi.d	$a2, $sp, 52
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1326:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB61_3 Depth=1
	add.d	$a1, $fp, $s0
	addi.d	$s0, $s0, 2
	stx.h	$a0, $a1, $s3
	bnez	$s0, .LBB61_3
# %bb.5:                                # %vector.ph
	ori	$a0, $s8, 480
	vrepli.b	$vr0, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB61_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a0
	ldx.w	$a2, $a2, $s3
	vinsgr2vr.w	$vr1, $a2, 0
	vilvl.h	$vr1, $vr0, $vr1
	vilvl.w	$vr1, $vr0, $vr1
	vst	$vr1, $a1, 0
	addi.d	$a0, $a0, 4
	addi.d	$a1, $a1, 16
	bnez	$a0, .LBB61_6
# %bb.7:                                # %vector.body83.preheader
	st.d	$s2, $sp, 16                    # 8-byte Folded Spill
	addi.d	$a0, $s2, 256
	ori	$a1, $s8, 512
	ori	$s4, $s6, 3584
	ori	$a2, $s6, 3648
	ori	$a3, $s6, 3680
	.p2align	4, , 16
.LBB61_8:                               # %vector.body83
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a4, $fp, $a1
	xvldx	$xr5, $a4, $s4
	xvldx	$xr10, $a4, $s3
	xvldx	$xr6, $a4, $a2
	xvldx	$xr1, $a4, $a3
	xvpermi.q	$xr3, $xr5, 1
	vpickve2gr.h	$a4, $vr3, 0
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr0, $a4, 0
	vpickve2gr.h	$a4, $vr3, 1
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr0, $a4, 1
	vpickve2gr.h	$a4, $vr3, 2
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr0, $a4, 2
	vpickve2gr.h	$a4, $vr3, 3
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr0, $a4, 3
	vpickve2gr.h	$a4, $vr3, 4
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr2, $a4, 0
	vpickve2gr.h	$a4, $vr3, 5
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr2, $a4, 1
	vpickve2gr.h	$a4, $vr3, 6
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr2, $a4, 2
	vpickve2gr.h	$a4, $vr3, 7
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr2, $a4, 3
	vpickve2gr.h	$a4, $vr5, 0
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr3, $a4, 0
	vpickve2gr.h	$a4, $vr5, 1
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr3, $a4, 1
	vpickve2gr.h	$a4, $vr5, 2
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr3, $a4, 2
	vpickve2gr.h	$a4, $vr5, 3
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr3, $a4, 3
	vpickve2gr.h	$a4, $vr5, 4
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr4, $a4, 0
	vpickve2gr.h	$a4, $vr5, 5
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr4, $a4, 1
	vpickve2gr.h	$a4, $vr5, 6
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr4, $a4, 2
	vpickve2gr.h	$a4, $vr5, 7
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr4, $a4, 3
	xvpermi.q	$xr8, $xr10, 1
	vpickve2gr.h	$a4, $vr8, 0
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr5, $a4, 0
	vpickve2gr.h	$a4, $vr8, 1
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr5, $a4, 1
	vpickve2gr.h	$a4, $vr8, 2
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr5, $a4, 2
	vpickve2gr.h	$a4, $vr8, 3
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr5, $a4, 3
	vpickve2gr.h	$a4, $vr8, 4
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr7, $a4, 0
	vpickve2gr.h	$a4, $vr8, 5
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr7, $a4, 1
	vpickve2gr.h	$a4, $vr8, 6
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr7, $a4, 2
	vpickve2gr.h	$a4, $vr8, 7
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr7, $a4, 3
	vpickve2gr.h	$a4, $vr10, 0
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr8, $a4, 0
	vpickve2gr.h	$a4, $vr10, 1
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr8, $a4, 1
	vpickve2gr.h	$a4, $vr10, 2
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr8, $a4, 2
	vpickve2gr.h	$a4, $vr10, 3
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr8, $a4, 3
	vpickve2gr.h	$a4, $vr10, 4
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr9, $a4, 0
	vpickve2gr.h	$a4, $vr10, 5
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr9, $a4, 1
	vpickve2gr.h	$a4, $vr10, 6
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr9, $a4, 2
	vpickve2gr.h	$a4, $vr10, 7
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr9, $a4, 3
	xvpermi.q	$xr12, $xr6, 1
	vpickve2gr.h	$a4, $vr12, 0
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr10, $a4, 0
	vpickve2gr.h	$a4, $vr12, 1
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr10, $a4, 1
	vpickve2gr.h	$a4, $vr12, 2
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr10, $a4, 2
	vpickve2gr.h	$a4, $vr12, 3
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr10, $a4, 3
	vpickve2gr.h	$a4, $vr12, 4
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr11, $a4, 0
	vpickve2gr.h	$a4, $vr12, 5
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr11, $a4, 1
	vpickve2gr.h	$a4, $vr12, 6
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr11, $a4, 2
	vpickve2gr.h	$a4, $vr12, 7
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr11, $a4, 3
	vpickve2gr.h	$a4, $vr6, 0
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr12, $a4, 0
	vpickve2gr.h	$a4, $vr6, 1
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr12, $a4, 1
	vpickve2gr.h	$a4, $vr6, 2
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr12, $a4, 2
	vpickve2gr.h	$a4, $vr6, 3
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr12, $a4, 3
	vpickve2gr.h	$a4, $vr6, 4
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr13, $a4, 0
	vpickve2gr.h	$a4, $vr6, 5
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr13, $a4, 1
	vpickve2gr.h	$a4, $vr6, 6
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr13, $a4, 2
	vpickve2gr.h	$a4, $vr6, 7
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr13, $a4, 3
	xvpermi.q	$xr15, $xr1, 1
	vpickve2gr.h	$a4, $vr15, 0
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr6, $a4, 0
	vpickve2gr.h	$a4, $vr15, 1
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr6, $a4, 1
	vpickve2gr.h	$a4, $vr15, 2
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr6, $a4, 2
	vpickve2gr.h	$a4, $vr15, 3
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr6, $a4, 3
	vpickve2gr.h	$a4, $vr15, 4
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr14, $a4, 0
	vpickve2gr.h	$a4, $vr15, 5
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr14, $a4, 1
	vpickve2gr.h	$a4, $vr15, 6
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr14, $a4, 2
	vpickve2gr.h	$a4, $vr15, 7
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr14, $a4, 3
	vpickve2gr.h	$a4, $vr1, 0
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr15, $a4, 0
	vpickve2gr.h	$a4, $vr1, 1
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr15, $a4, 1
	vpickve2gr.h	$a4, $vr1, 2
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr15, $a4, 2
	vpickve2gr.h	$a4, $vr1, 3
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr15, $a4, 3
	vpickve2gr.h	$a4, $vr1, 4
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr16, $a4, 0
	vpickve2gr.h	$a4, $vr1, 5
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr16, $a4, 1
	vpickve2gr.h	$a4, $vr1, 6
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr16, $a4, 2
	vpickve2gr.h	$a4, $vr1, 7
	bstrpick.d	$a4, $a4, 15, 0
	bstrpick.d	$a4, $a4, 15, 0
	xvinsgr2vr.d	$xr16, $a4, 3
	xvst	$xr4, $a0, -224
	xvst	$xr3, $a0, -256
	xvst	$xr2, $a0, -160
	xvst	$xr0, $a0, -192
	xvst	$xr9, $a0, -96
	xvst	$xr8, $a0, -128
	xvst	$xr7, $a0, -32
	xvst	$xr5, $a0, -64
	xvst	$xr13, $a0, 32
	xvst	$xr12, $a0, 0
	xvst	$xr11, $a0, 96
	xvst	$xr10, $a0, 64
	xvst	$xr16, $a0, 160
	xvst	$xr15, $a0, 128
	xvst	$xr14, $a0, 224
	xvst	$xr6, $a0, 192
	addi.d	$a1, $a1, 128
	addi.d	$a0, $a0, 512
	bnez	$a1, .LBB61_8
# %bb.9:                                # %.lr.ph.i
	st.d	$s3, $sp, 0                     # 8-byte Folded Spill
	ldx.hu	$a0, $fp, $s4
	ld.hu	$a1, $s5, 0
	ori	$a5, $s6, 3588
	ldx.hu	$a2, $fp, $a5
	ld.hu	$a3, $s5, 4
	st.d	$a0, $s1, 0
	st.d	$a1, $s1, 8
	st.d	$a2, $s1, 16
	st.d	$a3, $s1, 24
	ori	$s7, $s6, 3592
	ldx.hu	$a0, $fp, $s7
	ld.hu	$a1, $s5, 8
	ori	$s0, $s6, 3596
	ldx.hu	$a2, $fp, $s0
	ld.hu	$a3, $s5, 12
	st.d	$a0, $s1, 32
	st.d	$a1, $s1, 40
	st.d	$a2, $s1, 48
	st.d	$a3, $s1, 56
	move	$a4, $s1
	ori	$s1, $s6, 3600
	ldx.hu	$a0, $fp, $s1
	ld.hu	$a1, $s5, 16
	ori	$s2, $s6, 3604
	ldx.hu	$a2, $fp, $s2
	ld.hu	$a3, $s5, 20
	st.d	$a0, $a4, 64
	st.d	$a1, $a4, 72
	st.d	$a2, $a4, 80
	st.d	$a3, $a4, 88
	ori	$s3, $s6, 3608
	ldx.hu	$a0, $fp, $s3
	ld.hu	$a1, $s5, 24
	ori	$s6, $s6, 3612
	ldx.hu	$a2, $fp, $s6
	ld.hu	$a3, $s5, 28
	st.d	$a0, $a4, 96
	st.d	$a1, $a4, 104
	move	$a1, $zero
	st.d	$a2, $a4, 112
	st.d	$a3, $a4, 120
	ori	$s8, $s8, 480
	.p2align	4, , 16
.LBB61_10:                              # %_ZL28truncOrZextVecInLoopWithVW16ItmEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	ldx.d	$a0, $a0, $a1
	move	$a2, $a1
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ldx.d	$a1, $a1, $a2
	bne	$a0, $a1, .LBB61_23
# %bb.11:                               # %_ZL28truncOrZextVecInLoopWithVW16ItmEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB61_10 Depth=1
	addi.d	$s8, $s8, 2
	addi.d	$a1, $a2, 8
	bnez	$s8, .LBB61_10
# %bb.12:
	st.d	$a5, $sp, 16                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	ld.w	$a1, $a0, 28
	st.d	$a1, $sp, 0                     # 8-byte Folded Spill
	ld.d	$s8, $a0, 16
.Ltmp1343:
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1344:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	ld.d	$t2, $sp, 16                    # 8-byte Folded Reload
	ld.d	$a0, $sp, 0                     # 8-byte Folded Reload
	bnez	$a0, .LBB61_19
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s8, .LBB61_19
# %bb.15:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 96
	addi.d	$a1, $sp, 40
	lu12i.w	$a2, -5
	ori	$a2, $a2, 512
	lu12i.w	$a5, 4
	ori	$a3, $a5, 3488
	ori	$a4, $a5, 3520
	ori	$a5, $a5, 3552
	.p2align	4, , 16
.LBB61_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_17 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a7, $sp, 40
	ld.d	$a6, $sp, 32                    # 8-byte Folded Reload
	add.d	$a6, $a7, $a6
	addi.d	$a7, $a7, 256
	move	$t0, $a2
	.p2align	4, , 16
.LBB61_17:                              # %vector.body93
                                        #   Parent Loop BB61_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$t1, $a0, $t0
	xvldx	$xr5, $t1, $a3
	xvldx	$xr10, $t1, $a4
	xvldx	$xr6, $t1, $a5
	xvldx	$xr1, $t1, $s4
	xvpermi.q	$xr3, $xr5, 1
	vpickve2gr.h	$t1, $vr3, 0
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr0, $t1, 0
	vpickve2gr.h	$t1, $vr3, 1
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr0, $t1, 1
	vpickve2gr.h	$t1, $vr3, 2
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr0, $t1, 2
	vpickve2gr.h	$t1, $vr3, 3
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr0, $t1, 3
	vpickve2gr.h	$t1, $vr3, 4
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr2, $t1, 0
	vpickve2gr.h	$t1, $vr3, 5
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr2, $t1, 1
	vpickve2gr.h	$t1, $vr3, 6
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr2, $t1, 2
	vpickve2gr.h	$t1, $vr3, 7
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr2, $t1, 3
	vpickve2gr.h	$t1, $vr5, 0
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr3, $t1, 0
	vpickve2gr.h	$t1, $vr5, 1
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr3, $t1, 1
	vpickve2gr.h	$t1, $vr5, 2
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr3, $t1, 2
	vpickve2gr.h	$t1, $vr5, 3
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr3, $t1, 3
	vpickve2gr.h	$t1, $vr5, 4
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr4, $t1, 0
	vpickve2gr.h	$t1, $vr5, 5
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr4, $t1, 1
	vpickve2gr.h	$t1, $vr5, 6
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr4, $t1, 2
	vpickve2gr.h	$t1, $vr5, 7
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr4, $t1, 3
	xvpermi.q	$xr8, $xr10, 1
	vpickve2gr.h	$t1, $vr8, 0
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr5, $t1, 0
	vpickve2gr.h	$t1, $vr8, 1
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr5, $t1, 1
	vpickve2gr.h	$t1, $vr8, 2
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr5, $t1, 2
	vpickve2gr.h	$t1, $vr8, 3
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr5, $t1, 3
	vpickve2gr.h	$t1, $vr8, 4
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr7, $t1, 0
	vpickve2gr.h	$t1, $vr8, 5
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr7, $t1, 1
	vpickve2gr.h	$t1, $vr8, 6
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr7, $t1, 2
	vpickve2gr.h	$t1, $vr8, 7
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr7, $t1, 3
	vpickve2gr.h	$t1, $vr10, 0
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr8, $t1, 0
	vpickve2gr.h	$t1, $vr10, 1
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr8, $t1, 1
	vpickve2gr.h	$t1, $vr10, 2
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr8, $t1, 2
	vpickve2gr.h	$t1, $vr10, 3
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr8, $t1, 3
	vpickve2gr.h	$t1, $vr10, 4
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr9, $t1, 0
	vpickve2gr.h	$t1, $vr10, 5
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr9, $t1, 1
	vpickve2gr.h	$t1, $vr10, 6
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr9, $t1, 2
	vpickve2gr.h	$t1, $vr10, 7
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr9, $t1, 3
	xvpermi.q	$xr12, $xr6, 1
	vpickve2gr.h	$t1, $vr12, 0
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr10, $t1, 0
	vpickve2gr.h	$t1, $vr12, 1
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr10, $t1, 1
	vpickve2gr.h	$t1, $vr12, 2
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr10, $t1, 2
	vpickve2gr.h	$t1, $vr12, 3
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr10, $t1, 3
	vpickve2gr.h	$t1, $vr12, 4
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr11, $t1, 0
	vpickve2gr.h	$t1, $vr12, 5
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr11, $t1, 1
	vpickve2gr.h	$t1, $vr12, 6
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr11, $t1, 2
	vpickve2gr.h	$t1, $vr12, 7
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr11, $t1, 3
	vpickve2gr.h	$t1, $vr6, 0
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr12, $t1, 0
	vpickve2gr.h	$t1, $vr6, 1
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr12, $t1, 1
	vpickve2gr.h	$t1, $vr6, 2
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr12, $t1, 2
	vpickve2gr.h	$t1, $vr6, 3
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr12, $t1, 3
	vpickve2gr.h	$t1, $vr6, 4
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr13, $t1, 0
	vpickve2gr.h	$t1, $vr6, 5
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr13, $t1, 1
	vpickve2gr.h	$t1, $vr6, 6
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr13, $t1, 2
	vpickve2gr.h	$t1, $vr6, 7
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr13, $t1, 3
	xvpermi.q	$xr15, $xr1, 1
	vpickve2gr.h	$t1, $vr15, 0
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr6, $t1, 0
	vpickve2gr.h	$t1, $vr15, 1
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr6, $t1, 1
	vpickve2gr.h	$t1, $vr15, 2
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr6, $t1, 2
	vpickve2gr.h	$t1, $vr15, 3
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr6, $t1, 3
	vpickve2gr.h	$t1, $vr15, 4
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr14, $t1, 0
	vpickve2gr.h	$t1, $vr15, 5
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr14, $t1, 1
	vpickve2gr.h	$t1, $vr15, 6
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr14, $t1, 2
	vpickve2gr.h	$t1, $vr15, 7
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr14, $t1, 3
	vpickve2gr.h	$t1, $vr1, 0
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr15, $t1, 0
	vpickve2gr.h	$t1, $vr1, 1
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr15, $t1, 1
	vpickve2gr.h	$t1, $vr1, 2
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr15, $t1, 2
	vpickve2gr.h	$t1, $vr1, 3
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr15, $t1, 3
	vpickve2gr.h	$t1, $vr1, 4
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr16, $t1, 0
	vpickve2gr.h	$t1, $vr1, 5
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr16, $t1, 1
	vpickve2gr.h	$t1, $vr1, 6
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr16, $t1, 2
	vpickve2gr.h	$t1, $vr1, 7
	bstrpick.d	$t1, $t1, 15, 0
	bstrpick.d	$t1, $t1, 15, 0
	xvinsgr2vr.d	$xr16, $t1, 3
	xvst	$xr4, $a7, -224
	xvst	$xr3, $a7, -256
	xvst	$xr2, $a7, -160
	xvst	$xr0, $a7, -192
	xvst	$xr9, $a7, -96
	xvst	$xr8, $a7, -128
	xvst	$xr7, $a7, -32
	xvst	$xr5, $a7, -64
	xvst	$xr13, $a7, 32
	xvst	$xr12, $a7, 0
	xvst	$xr11, $a7, 96
	xvst	$xr10, $a7, 64
	xvst	$xr16, $a7, 160
	xvst	$xr15, $a7, 128
	xvst	$xr14, $a7, 224
	xvst	$xr6, $a7, 192
	addi.d	$t0, $t0, 128
	addi.d	$a7, $a7, 512
	bnez	$t0, .LBB61_17
# %bb.18:                               # %.lr.ph.i24
                                        #   in Loop: Header=BB61_16 Depth=1
	ldx.hu	$a7, $fp, $s4
	ld.hu	$t0, $s5, 0
	ldx.hu	$t1, $fp, $t2
	st.d	$a7, $a6, 0
	ld.hu	$a7, $s5, 4
	st.d	$t0, $a6, 8
	st.d	$t1, $a6, 16
	ldx.hu	$t0, $fp, $s7
	st.d	$a7, $a6, 24
	ld.hu	$a7, $s5, 8
	ldx.hu	$t1, $fp, $s0
	st.d	$t0, $a6, 32
	ld.hu	$t0, $s5, 12
	st.d	$a7, $a6, 40
	st.d	$t1, $a6, 48
	ldx.hu	$a7, $fp, $s1
	st.d	$t0, $a6, 56
	ld.hu	$t0, $s5, 16
	ldx.hu	$t1, $fp, $s2
	st.d	$a7, $a6, 64
	ld.hu	$a7, $s5, 20
	st.d	$t0, $a6, 72
	st.d	$t1, $a6, 80
	ldx.hu	$t0, $fp, $s3
	st.d	$a7, $a6, 88
	ld.hu	$a7, $s5, 24
	ldx.hu	$t1, $fp, $s6
	st.d	$t0, $a6, 96
	ld.hu	$t0, $s5, 28
	st.d	$a7, $a6, 104
	st.d	$t1, $a6, 112
	addi.d	$s8, $s8, -1
	st.d	$t0, $a6, 120
	bnez	$s8, .LBB61_16
.LBB61_19:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1345:
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1346:
# %bb.20:                               # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit36
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 40
	beqz	$a0, .LBB61_22
# %bb.21:                               # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i38
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB61_22:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit42
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB61_23:
.Ltmp1328:
	move	$s0, $a2
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1329:
# %bb.24:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	add.d	$a0, $fp, $s8
	ld.d	$a1, $sp, 0                     # 8-byte Folded Reload
	ldx.hu	$a1, $a0, $a1
.Ltmp1330:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1331:
# %bb.25:                               # %_ZNSolsEt.exit
.Ltmp1332:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1333:
# %bb.26:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	ldx.d	$a1, $a0, $s0
.Ltmp1334:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1335:
# %bb.27:                               # %_ZNSolsEm.exit
.Ltmp1336:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1337:
# %bb.28:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit21
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	ldx.d	$a1, $a0, $s0
.Ltmp1338:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1339:
# %bb.29:                               # %_ZNSolsEm.exit23
.Ltmp1340:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp1341:
# %bb.30:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB61_31:                              # %.thread
.Ltmp1324:
	move	$s1, $a0
	b	.LBB61_37
.LBB61_32:
.Ltmp1321:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB61_33:
.Ltmp1347:
	b	.LBB61_36
.LBB61_34:
.Ltmp1342:
	b	.LBB61_36
.LBB61_35:
.Ltmp1327:
.LBB61_36:
	move	$s1, $a0
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 40
	move	$s2, $a0
	beqz	$a0, .LBB61_38
.LBB61_37:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i31
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB61_38:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end61:
	.size	_Z62benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint64_t_RN9benchmark5StateE, .Lfunc_end61-_Z62benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint64_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table61:
.Lexception61:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end61-.Lcst_begin61
.Lcst_begin61:
	.uleb128 .Lfunc_begin61-.Lfunc_begin61  # >> Call Site 1 <<
	.uleb128 .Ltmp1319-.Lfunc_begin61       #   Call between .Lfunc_begin61 and .Ltmp1319
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1319-.Lfunc_begin61       # >> Call Site 2 <<
	.uleb128 .Ltmp1320-.Ltmp1319            #   Call between .Ltmp1319 and .Ltmp1320
	.uleb128 .Ltmp1321-.Lfunc_begin61       #     jumps to .Ltmp1321
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1322-.Lfunc_begin61       # >> Call Site 3 <<
	.uleb128 .Ltmp1323-.Ltmp1322            #   Call between .Ltmp1322 and .Ltmp1323
	.uleb128 .Ltmp1324-.Lfunc_begin61       #     jumps to .Ltmp1324
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1325-.Lfunc_begin61       # >> Call Site 4 <<
	.uleb128 .Ltmp1326-.Ltmp1325            #   Call between .Ltmp1325 and .Ltmp1326
	.uleb128 .Ltmp1327-.Lfunc_begin61       #     jumps to .Ltmp1327
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1343-.Lfunc_begin61       # >> Call Site 5 <<
	.uleb128 .Ltmp1346-.Ltmp1343            #   Call between .Ltmp1343 and .Ltmp1346
	.uleb128 .Ltmp1347-.Lfunc_begin61       #     jumps to .Ltmp1347
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1346-.Lfunc_begin61       # >> Call Site 6 <<
	.uleb128 .Ltmp1328-.Ltmp1346            #   Call between .Ltmp1346 and .Ltmp1328
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1328-.Lfunc_begin61       # >> Call Site 7 <<
	.uleb128 .Ltmp1341-.Ltmp1328            #   Call between .Ltmp1328 and .Ltmp1341
	.uleb128 .Ltmp1342-.Lfunc_begin61       #     jumps to .Ltmp1342
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1341-.Lfunc_begin61       # >> Call Site 8 <<
	.uleb128 .Lfunc_end61-.Ltmp1341         #   Call between .Ltmp1341 and .Lfunc_end61
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end61:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z54benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint64_t_RN9benchmark5StateE # -- Begin function _Z54benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint64_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z54benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint64_t_RN9benchmark5StateE,@function
_Z54benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint64_t_RN9benchmark5StateE: # @_Z54benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint64_t_RN9benchmark5StateE
.Lfunc_begin62:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception62
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$s2, $a0
	lu12i.w	$s6, 4
	ori	$s1, $s6, 3616
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp1348:
	lu12i.w	$a0, 19
	ori	$s0, $a0, 2176
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1349:
# %bb.1:
	move	$s3, $a0
	st.d	$a0, $sp, 16
.Ltmp1351:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1352:
# %bb.2:
	move	$s0, $a0
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 28
	lu12i.w	$s5, -5
	ori	$s7, $s5, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB62_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp1354:
	addi.d	$a0, $sp, 28
	addi.d	$a2, $sp, 28
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1355:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB62_3 Depth=1
	add.d	$a1, $fp, $s7
	addi.d	$s7, $s7, 2
	stx.h	$a0, $a1, $s1
	bnez	$s7, .LBB62_3
# %bb.5:                                # %vector.ph
	ori	$a0, $s5, 480
	vrepli.b	$vr2, 0
	move	$a1, $s0
	.p2align	4, , 16
.LBB62_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a0
	ldx.w	$a2, $a2, $s1
	vinsgr2vr.w	$vr0, $a2, 0
	vilvl.h	$vr0, $vr2, $vr0
	vilvl.w	$vr0, $vr2, $vr0
	vst	$vr0, $a1, 0
	addi.d	$a0, $a0, 4
	addi.d	$a1, $a1, 16
	bnez	$a0, .LBB62_6
# %bb.7:                                # %vector.body83.preheader
	addi.d	$a0, $s3, 16
	ori	$a1, $s5, 480
	ori	$s4, $s6, 3620
	.p2align	4, , 16
.LBB62_8:                               # %vector.body83
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a1
	ldx.w	$a3, $a2, $s1
	ldx.w	$a2, $a2, $s4
	vinsgr2vr.w	$vr0, $a3, 0
	vinsgr2vr.w	$vr1, $a2, 0
	vilvl.h	$vr0, $vr2, $vr0
	vilvl.w	$vr0, $vr2, $vr0
	vilvl.h	$vr1, $vr2, $vr1
	vilvl.w	$vr1, $vr2, $vr1
	vst	$vr0, $a0, -16
	vst	$vr1, $a0, 0
	addi.d	$a1, $a1, 8
	addi.d	$a0, $a0, 32
	bnez	$a1, .LBB62_8
# %bb.9:                                # %_ZL20truncOrZextVecInLoopItmEvPKT_PT0_i.exit.preheader.preheader
	move	$s6, $zero
	ori	$s7, $s5, 480
	.p2align	4, , 16
.LBB62_10:                              # %_ZL20truncOrZextVecInLoopItmEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	ldx.d	$a0, $s3, $s6
	ldx.d	$a1, $s0, $s6
	bne	$a0, $a1, .LBB62_23
# %bb.11:                               # %_ZL20truncOrZextVecInLoopItmEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB62_10 Depth=1
	addi.d	$s7, $s7, 2
	addi.d	$s6, $s6, 8
	bnez	$s7, .LBB62_10
# %bb.12:
	vst	$vr2, $sp, 0                    # 16-byte Folded Spill
	ld.w	$s6, $s2, 28
	ld.d	$s3, $s2, 16
.Ltmp1372:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1373:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	vld	$vr2, $sp, 0                    # 16-byte Folded Reload
	bnez	$s6, .LBB62_19
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s3, .LBB62_19
# %bb.15:
	addi.d	$a0, $sp, 16
	ori	$a1, $s5, 480
	.p2align	4, , 16
.LBB62_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_17 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a2, $sp, 16
	addi.d	$a2, $a2, 16
	move	$a3, $a1
	.p2align	4, , 16
.LBB62_17:                              # %vector.body91
                                        #   Parent Loop BB62_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a4, $fp, $a3
	ldx.w	$a5, $a4, $s1
	ldx.w	$a4, $a4, $s4
	vinsgr2vr.w	$vr0, $a5, 0
	vinsgr2vr.w	$vr1, $a4, 0
	vilvl.h	$vr0, $vr2, $vr0
	vilvl.w	$vr0, $vr2, $vr0
	vilvl.h	$vr1, $vr2, $vr1
	vilvl.w	$vr1, $vr2, $vr1
	vst	$vr0, $a2, -16
	vst	$vr1, $a2, 0
	addi.d	$a3, $a3, 8
	addi.d	$a2, $a2, 32
	bnez	$a3, .LBB62_17
# %bb.18:                               # %_ZL20truncOrZextVecInLoopItmEvPKT_PT0_i.exit28
                                        #   in Loop: Header=BB62_16 Depth=1
	addi.d	$s3, $s3, -1
	bnez	$s3, .LBB62_16
.LBB62_19:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1374:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1375:
# %bb.20:                               # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit36
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 16
	beqz	$a0, .LBB62_22
# %bb.21:                               # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i38
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB62_22:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit42
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB62_23:
.Ltmp1357:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1358:
# %bb.24:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	add.d	$a0, $fp, $s7
	ldx.hu	$a1, $a0, $s1
.Ltmp1359:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1360:
# %bb.25:                               # %_ZNSolsEt.exit
.Ltmp1361:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1362:
# %bb.26:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.d	$a1, $s3, $s6
.Ltmp1363:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1364:
# %bb.27:                               # %_ZNSolsEm.exit
.Ltmp1365:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1366:
# %bb.28:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit21
	ldx.d	$a1, $s0, $s6
.Ltmp1367:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1368:
# %bb.29:                               # %_ZNSolsEm.exit23
.Ltmp1369:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp1370:
# %bb.30:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB62_31:                              # %.thread
.Ltmp1353:
	move	$s1, $a0
	b	.LBB62_37
.LBB62_32:
.Ltmp1350:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB62_33:
.Ltmp1376:
	b	.LBB62_36
.LBB62_34:
.Ltmp1371:
	b	.LBB62_36
.LBB62_35:
.Ltmp1356:
.LBB62_36:
	move	$s1, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s3, $sp, 16
	beqz	$s3, .LBB62_38
.LBB62_37:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i31
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB62_38:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end62:
	.size	_Z54benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint64_t_RN9benchmark5StateE, .Lfunc_end62-_Z54benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint64_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table62:
.Lexception62:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end62-.Lcst_begin62
.Lcst_begin62:
	.uleb128 .Lfunc_begin62-.Lfunc_begin62  # >> Call Site 1 <<
	.uleb128 .Ltmp1348-.Lfunc_begin62       #   Call between .Lfunc_begin62 and .Ltmp1348
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1348-.Lfunc_begin62       # >> Call Site 2 <<
	.uleb128 .Ltmp1349-.Ltmp1348            #   Call between .Ltmp1348 and .Ltmp1349
	.uleb128 .Ltmp1350-.Lfunc_begin62       #     jumps to .Ltmp1350
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1351-.Lfunc_begin62       # >> Call Site 3 <<
	.uleb128 .Ltmp1352-.Ltmp1351            #   Call between .Ltmp1351 and .Ltmp1352
	.uleb128 .Ltmp1353-.Lfunc_begin62       #     jumps to .Ltmp1353
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1354-.Lfunc_begin62       # >> Call Site 4 <<
	.uleb128 .Ltmp1355-.Ltmp1354            #   Call between .Ltmp1354 and .Ltmp1355
	.uleb128 .Ltmp1356-.Lfunc_begin62       #     jumps to .Ltmp1356
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1372-.Lfunc_begin62       # >> Call Site 5 <<
	.uleb128 .Ltmp1375-.Ltmp1372            #   Call between .Ltmp1372 and .Ltmp1375
	.uleb128 .Ltmp1376-.Lfunc_begin62       #     jumps to .Ltmp1376
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1375-.Lfunc_begin62       # >> Call Site 6 <<
	.uleb128 .Ltmp1357-.Ltmp1375            #   Call between .Ltmp1375 and .Ltmp1357
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1357-.Lfunc_begin62       # >> Call Site 7 <<
	.uleb128 .Ltmp1370-.Ltmp1357            #   Call between .Ltmp1357 and .Ltmp1370
	.uleb128 .Ltmp1371-.Lfunc_begin62       #     jumps to .Ltmp1371
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1370-.Lfunc_begin62       # >> Call Site 8 <<
	.uleb128 .Lfunc_end62-.Ltmp1370         #   Call between .Ltmp1370 and .Lfunc_end62
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end62:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint64_t_RN9benchmark5StateE
.LCPI63_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint64_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint64_t_RN9benchmark5StateE,@function
_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint64_t_RN9benchmark5StateE: # @_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint64_t_RN9benchmark5StateE
.Lfunc_begin63:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception63
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s7, $a0
	lu12i.w	$s6, 4
	ori	$s3, $s6, 3616
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp1377:
	lu12i.w	$a0, 19
	ori	$s2, $a0, 2176
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1378:
# %bb.1:
	move	$s1, $a0
	ori	$a0, $s6, 3586
	add.d	$s5, $fp, $a0
	st.d	$s1, $sp, 8
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 16
	lu12i.w	$s8, -5
	ori	$s0, $s8, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB63_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp1380:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1381:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB63_2 Depth=1
	add.d	$a1, $fp, $s0
	addi.d	$s0, $s0, 2
	stx.h	$a0, $a1, $s3
	bnez	$s0, .LBB63_2
# %bb.4:
	pcalau12i	$a0, %pc_hi20(.LCPI63_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI63_0)
	move	$s0, $zero
	vst	$vr0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s3, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB63_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp1383:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s3
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1384:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB63_5 Depth=1
	stx.d	$a0, $s1, $s0
	addi.d	$s0, $s0, 8
	bne	$s0, $s2, .LBB63_5
# %bb.7:
	ld.w	$s0, $s7, 28
	ld.d	$s1, $s7, 16
.Ltmp1386:
	move	$a0, $s7
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1387:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s0, .LBB63_14
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s1, .LBB63_14
# %bb.10:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 48
	addi.d	$a1, $sp, 8
	lu12i.w	$a2, 19
	ori	$a2, $a2, 2048
	ori	$a3, $s8, 512
	ori	$a4, $s6, 3536
	ori	$a5, $s6, 3552
	ori	$a6, $s6, 3568
	ori	$a7, $s6, 3584
	ori	$t0, $s6, 3588
	ori	$t1, $s6, 3592
	ori	$t2, $s6, 3596
	ori	$t3, $s6, 3600
	ori	$t4, $s6, 3604
	ori	$t5, $s6, 3608
	ori	$t6, $s6, 3612
	.p2align	4, , 16
.LBB63_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_12 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$t8, $sp, 8
	add.d	$t7, $t8, $a2
	addi.d	$t8, $t8, 128
	move	$s2, $a3
	.p2align	4, , 16
.LBB63_12:                              # %vector.body
                                        #   Parent Loop BB63_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$s0, $a0, $s2
	vldx	$vr3, $s0, $a4
	vldx	$vr6, $s0, $a5
	vldx	$vr4, $s0, $a6
	vldx	$vr1, $s0, $a7
	vpickve2gr.h	$s0, $vr3, 0
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr0, $s0, 0
	vpickve2gr.h	$s0, $vr3, 1
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr0, $s0, 1
	vpickve2gr.h	$s0, $vr3, 2
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr0, $s0, 2
	vpickve2gr.h	$s0, $vr3, 3
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr0, $s0, 3
	vpickve2gr.h	$s0, $vr3, 4
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr2, $s0, 0
	vpickve2gr.h	$s0, $vr3, 5
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr2, $s0, 1
	vpickve2gr.h	$s0, $vr3, 6
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr2, $s0, 2
	vpickve2gr.h	$s0, $vr3, 7
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr2, $s0, 3
	vpickve2gr.h	$s0, $vr6, 0
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr3, $s0, 0
	vpickve2gr.h	$s0, $vr6, 1
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr3, $s0, 1
	vpickve2gr.h	$s0, $vr6, 2
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr3, $s0, 2
	vpickve2gr.h	$s0, $vr6, 3
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr3, $s0, 3
	vpickve2gr.h	$s0, $vr6, 4
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr5, $s0, 0
	vpickve2gr.h	$s0, $vr6, 5
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr5, $s0, 1
	vpickve2gr.h	$s0, $vr6, 6
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr5, $s0, 2
	vpickve2gr.h	$s0, $vr6, 7
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr5, $s0, 3
	vpickve2gr.h	$s0, $vr4, 0
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr6, $s0, 0
	vpickve2gr.h	$s0, $vr4, 1
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr6, $s0, 1
	vpickve2gr.h	$s0, $vr4, 2
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr6, $s0, 2
	vpickve2gr.h	$s0, $vr4, 3
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr6, $s0, 3
	vpickve2gr.h	$s0, $vr4, 4
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr7, $s0, 0
	vpickve2gr.h	$s0, $vr4, 5
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr7, $s0, 1
	vpickve2gr.h	$s0, $vr4, 6
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr7, $s0, 2
	vpickve2gr.h	$s0, $vr4, 7
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr7, $s0, 3
	vpickve2gr.h	$s0, $vr1, 0
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr4, $s0, 0
	vpickve2gr.h	$s0, $vr1, 1
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr4, $s0, 1
	vpickve2gr.h	$s0, $vr1, 2
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr4, $s0, 2
	vpickve2gr.h	$s0, $vr1, 3
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr4, $s0, 3
	vpickve2gr.h	$s0, $vr1, 4
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr8, $s0, 0
	vpickve2gr.h	$s0, $vr1, 5
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr8, $s0, 1
	vpickve2gr.h	$s0, $vr1, 6
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr8, $s0, 2
	vpickve2gr.h	$s0, $vr1, 7
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr8, $s0, 3
	xvld	$xr1, $t8, -128
	xvld	$xr9, $t8, -96
	xvld	$xr10, $t8, -64
	xvld	$xr11, $t8, -32
	xvld	$xr12, $t8, 0
	xvld	$xr13, $t8, 32
	xvld	$xr14, $t8, 64
	xvld	$xr15, $t8, 96
	xvadd.d	$xr2, $xr9, $xr2
	xvadd.d	$xr0, $xr1, $xr0
	xvadd.d	$xr1, $xr11, $xr5
	xvadd.d	$xr3, $xr10, $xr3
	xvadd.d	$xr5, $xr13, $xr7
	xvadd.d	$xr6, $xr12, $xr6
	xvadd.d	$xr7, $xr15, $xr8
	xvadd.d	$xr4, $xr14, $xr4
	xvst	$xr0, $t8, -128
	xvst	$xr2, $t8, -96
	xvst	$xr3, $t8, -64
	xvst	$xr1, $t8, -32
	xvst	$xr6, $t8, 0
	xvst	$xr5, $t8, 32
	xvst	$xr4, $t8, 64
	xvst	$xr7, $t8, 96
	addi.d	$s2, $s2, 64
	addi.d	$t8, $t8, 256
	bnez	$s2, .LBB63_12
# %bb.13:                               # %.lr.ph.i
                                        #   in Loop: Header=BB63_11 Depth=1
	ldx.hu	$t8, $fp, $a7
	ld.d	$s0, $t7, 0
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 0
	ld.hu	$t8, $s5, 0
	ld.d	$s0, $t7, 8
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 8
	ldx.hu	$t8, $fp, $t0
	ld.d	$s0, $t7, 16
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 16
	ld.hu	$t8, $s5, 4
	ld.d	$s0, $t7, 24
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 24
	ldx.hu	$t8, $fp, $t1
	ld.d	$s0, $t7, 32
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 32
	ld.hu	$t8, $s5, 8
	ld.d	$s0, $t7, 40
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 40
	ldx.hu	$t8, $fp, $t2
	ld.d	$s0, $t7, 48
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 48
	ld.hu	$t8, $s5, 12
	ld.d	$s0, $t7, 56
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 56
	ldx.hu	$t8, $fp, $t3
	ld.d	$s0, $t7, 64
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 64
	ld.hu	$t8, $s5, 16
	ld.d	$s0, $t7, 72
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 72
	ldx.hu	$t8, $fp, $t4
	ld.d	$s0, $t7, 80
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 80
	ld.hu	$t8, $s5, 20
	ld.d	$s0, $t7, 88
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 88
	ldx.hu	$t8, $fp, $t5
	ld.d	$s0, $t7, 96
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 96
	ld.hu	$t8, $s5, 24
	ld.d	$s0, $t7, 104
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 104
	ldx.hu	$t8, $fp, $t6
	ld.d	$s0, $t7, 112
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 112
	ld.hu	$t8, $s5, 28
	ld.d	$s0, $t7, 120
	add.d	$t8, $s0, $t8
	addi.d	$s1, $s1, -1
	st.d	$t8, $t7, 120
	bnez	$s1, .LBB63_11
.LBB63_14:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1388:
	move	$a0, $s7
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1389:
# %bb.15:                               # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 8
	beqz	$a0, .LBB63_17
# %bb.16:                               # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB63_17:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB63_18:
.Ltmp1379:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB63_19:
.Ltmp1390:
	ld.d	$s1, $sp, 8
	move	$s0, $a0
	bnez	$s1, .LBB63_23
	b	.LBB63_24
.LBB63_20:                              # %.loopexit
.Ltmp1385:
	b	.LBB63_22
.LBB63_21:                              # %.loopexit.split-lp
.Ltmp1382:
.LBB63_22:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB63_23:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB63_24:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end63:
	.size	_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint64_t_RN9benchmark5StateE, .Lfunc_end63-_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint64_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table63:
.Lexception63:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end63-.Lcst_begin63
.Lcst_begin63:
	.uleb128 .Lfunc_begin63-.Lfunc_begin63  # >> Call Site 1 <<
	.uleb128 .Ltmp1377-.Lfunc_begin63       #   Call between .Lfunc_begin63 and .Ltmp1377
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1377-.Lfunc_begin63       # >> Call Site 2 <<
	.uleb128 .Ltmp1378-.Ltmp1377            #   Call between .Ltmp1377 and .Ltmp1378
	.uleb128 .Ltmp1379-.Lfunc_begin63       #     jumps to .Ltmp1379
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1380-.Lfunc_begin63       # >> Call Site 3 <<
	.uleb128 .Ltmp1381-.Ltmp1380            #   Call between .Ltmp1380 and .Ltmp1381
	.uleb128 .Ltmp1382-.Lfunc_begin63       #     jumps to .Ltmp1382
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1383-.Lfunc_begin63       # >> Call Site 4 <<
	.uleb128 .Ltmp1384-.Ltmp1383            #   Call between .Ltmp1383 and .Ltmp1384
	.uleb128 .Ltmp1385-.Lfunc_begin63       #     jumps to .Ltmp1385
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1386-.Lfunc_begin63       # >> Call Site 5 <<
	.uleb128 .Ltmp1389-.Ltmp1386            #   Call between .Ltmp1386 and .Ltmp1389
	.uleb128 .Ltmp1390-.Lfunc_begin63       #     jumps to .Ltmp1390
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1389-.Lfunc_begin63       # >> Call Site 6 <<
	.uleb128 .Lfunc_end63-.Ltmp1389         #   Call between .Ltmp1389 and .Lfunc_end63
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end63:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint64_t_RN9benchmark5StateE
.LCPI64_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint64_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint64_t_RN9benchmark5StateE,@function
_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint64_t_RN9benchmark5StateE: # @_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint64_t_RN9benchmark5StateE
.Lfunc_begin64:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception64
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs6, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs7, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	move	$s7, $a0
	lu12i.w	$s6, 4
	ori	$s3, $s6, 3616
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp1391:
	lu12i.w	$a0, 19
	ori	$s2, $a0, 2176
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1392:
# %bb.1:
	move	$s1, $a0
	ori	$a0, $s6, 3586
	add.d	$s5, $fp, $a0
	st.d	$s1, $sp, 8
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 16
	lu12i.w	$s8, -5
	ori	$s0, $s8, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB64_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp1394:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1395:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB64_2 Depth=1
	add.d	$a1, $fp, $s0
	addi.d	$s0, $s0, 2
	stx.h	$a0, $a1, $s3
	bnez	$s0, .LBB64_2
# %bb.4:
	pcalau12i	$a0, %pc_hi20(.LCPI64_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI64_0)
	move	$s0, $zero
	vst	$vr0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s3, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB64_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp1397:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s3
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1398:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB64_5 Depth=1
	stx.d	$a0, $s1, $s0
	addi.d	$s0, $s0, 8
	bne	$s0, $s2, .LBB64_5
# %bb.7:
	ld.w	$s0, $s7, 28
	ld.d	$s1, $s7, 16
.Ltmp1400:
	move	$a0, $s7
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1401:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s0, .LBB64_14
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s1, .LBB64_14
# %bb.10:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 96
	addi.d	$a1, $sp, 8
	lu12i.w	$a2, 19
	ori	$a2, $a2, 2048
	ori	$a3, $s8, 512
	ori	$a4, $s6, 3488
	ori	$a5, $s6, 3520
	ori	$a6, $s6, 3552
	ori	$a7, $s6, 3584
	ori	$t0, $s6, 3588
	ori	$t1, $s6, 3592
	ori	$t2, $s6, 3596
	ori	$t3, $s6, 3600
	ori	$t4, $s6, 3604
	ori	$t5, $s6, 3608
	ori	$t6, $s6, 3612
	.p2align	4, , 16
.LBB64_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_12 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$t8, $sp, 8
	add.d	$t7, $t8, $a2
	addi.d	$t8, $t8, 256
	move	$s2, $a3
	.p2align	4, , 16
.LBB64_12:                              # %vector.body
                                        #   Parent Loop BB64_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$s0, $a0, $s2
	xvldx	$xr2, $s0, $a4
	xvldx	$xr7, $s0, $a5
	xvldx	$xr8, $s0, $a6
	xvldx	$xr3, $s0, $a7
	vpickve2gr.h	$s0, $vr2, 0
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr0, $s0, 0
	vpickve2gr.h	$s0, $vr2, 1
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr0, $s0, 1
	vpickve2gr.h	$s0, $vr2, 2
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr0, $s0, 2
	vpickve2gr.h	$s0, $vr2, 3
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr0, $s0, 3
	vpickve2gr.h	$s0, $vr2, 4
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr1, $s0, 0
	vpickve2gr.h	$s0, $vr2, 5
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr1, $s0, 1
	vpickve2gr.h	$s0, $vr2, 6
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr1, $s0, 2
	vpickve2gr.h	$s0, $vr2, 7
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr1, $s0, 3
	xvpermi.q	$xr5, $xr2, 1
	vpickve2gr.h	$s0, $vr5, 0
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr2, $s0, 0
	vpickve2gr.h	$s0, $vr5, 1
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr2, $s0, 1
	vpickve2gr.h	$s0, $vr5, 2
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr2, $s0, 2
	vpickve2gr.h	$s0, $vr5, 3
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr2, $s0, 3
	vpickve2gr.h	$s0, $vr5, 4
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr4, $s0, 0
	vpickve2gr.h	$s0, $vr5, 5
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr4, $s0, 1
	vpickve2gr.h	$s0, $vr5, 6
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr4, $s0, 2
	vpickve2gr.h	$s0, $vr5, 7
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr4, $s0, 3
	vpickve2gr.h	$s0, $vr7, 0
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr5, $s0, 0
	vpickve2gr.h	$s0, $vr7, 1
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr5, $s0, 1
	vpickve2gr.h	$s0, $vr7, 2
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr5, $s0, 2
	vpickve2gr.h	$s0, $vr7, 3
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr5, $s0, 3
	vpickve2gr.h	$s0, $vr7, 4
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr6, $s0, 0
	vpickve2gr.h	$s0, $vr7, 5
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr6, $s0, 1
	vpickve2gr.h	$s0, $vr7, 6
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr6, $s0, 2
	vpickve2gr.h	$s0, $vr7, 7
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr6, $s0, 3
	xvpermi.q	$xr10, $xr7, 1
	vpickve2gr.h	$s0, $vr10, 0
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr7, $s0, 0
	vpickve2gr.h	$s0, $vr10, 1
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr7, $s0, 1
	vpickve2gr.h	$s0, $vr10, 2
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr7, $s0, 2
	vpickve2gr.h	$s0, $vr10, 3
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr7, $s0, 3
	vpickve2gr.h	$s0, $vr10, 4
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr9, $s0, 0
	vpickve2gr.h	$s0, $vr10, 5
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr9, $s0, 1
	vpickve2gr.h	$s0, $vr10, 6
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr9, $s0, 2
	vpickve2gr.h	$s0, $vr10, 7
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr9, $s0, 3
	vpickve2gr.h	$s0, $vr8, 0
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr10, $s0, 0
	vpickve2gr.h	$s0, $vr8, 1
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr10, $s0, 1
	vpickve2gr.h	$s0, $vr8, 2
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr10, $s0, 2
	vpickve2gr.h	$s0, $vr8, 3
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr10, $s0, 3
	vpickve2gr.h	$s0, $vr8, 4
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr11, $s0, 0
	vpickve2gr.h	$s0, $vr8, 5
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr11, $s0, 1
	vpickve2gr.h	$s0, $vr8, 6
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr11, $s0, 2
	vpickve2gr.h	$s0, $vr8, 7
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr11, $s0, 3
	xvpermi.q	$xr13, $xr8, 1
	vpickve2gr.h	$s0, $vr13, 0
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr8, $s0, 0
	vpickve2gr.h	$s0, $vr13, 1
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr8, $s0, 1
	vpickve2gr.h	$s0, $vr13, 2
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr8, $s0, 2
	vpickve2gr.h	$s0, $vr13, 3
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr8, $s0, 3
	vpickve2gr.h	$s0, $vr13, 4
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr12, $s0, 0
	vpickve2gr.h	$s0, $vr13, 5
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr12, $s0, 1
	vpickve2gr.h	$s0, $vr13, 6
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr12, $s0, 2
	vpickve2gr.h	$s0, $vr13, 7
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr12, $s0, 3
	vpickve2gr.h	$s0, $vr3, 0
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr13, $s0, 0
	vpickve2gr.h	$s0, $vr3, 1
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr13, $s0, 1
	vpickve2gr.h	$s0, $vr3, 2
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr13, $s0, 2
	vpickve2gr.h	$s0, $vr3, 3
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr13, $s0, 3
	vpickve2gr.h	$s0, $vr3, 4
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr14, $s0, 0
	vpickve2gr.h	$s0, $vr3, 5
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr14, $s0, 1
	vpickve2gr.h	$s0, $vr3, 6
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr14, $s0, 2
	vpickve2gr.h	$s0, $vr3, 7
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr14, $s0, 3
	xvpermi.q	$xr3, $xr3, 1
	vpickve2gr.h	$s0, $vr3, 0
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr15, $s0, 0
	vpickve2gr.h	$s0, $vr3, 1
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr15, $s0, 1
	vpickve2gr.h	$s0, $vr3, 2
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr15, $s0, 2
	vpickve2gr.h	$s0, $vr3, 3
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr15, $s0, 3
	vpickve2gr.h	$s0, $vr3, 4
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr16, $s0, 0
	vpickve2gr.h	$s0, $vr3, 5
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr16, $s0, 1
	vpickve2gr.h	$s0, $vr3, 6
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr16, $s0, 2
	vpickve2gr.h	$s0, $vr3, 7
	bstrpick.d	$s0, $s0, 15, 0
	bstrpick.d	$s0, $s0, 15, 0
	xvinsgr2vr.d	$xr16, $s0, 3
	xvld	$xr3, $t8, -256
	xvld	$xr17, $t8, -224
	xvld	$xr18, $t8, -192
	xvld	$xr19, $t8, -160
	xvld	$xr20, $t8, -128
	xvld	$xr21, $t8, -96
	xvld	$xr22, $t8, -64
	xvld	$xr23, $t8, -32
	xvld	$xr24, $t8, 0
	xvld	$xr25, $t8, 32
	xvld	$xr26, $t8, 64
	xvld	$xr27, $t8, 96
	xvld	$xr28, $t8, 128
	xvld	$xr29, $t8, 160
	xvld	$xr30, $t8, 192
	xvld	$xr31, $t8, 224
	xvadd.d	$xr4, $xr19, $xr4
	xvadd.d	$xr2, $xr18, $xr2
	xvadd.d	$xr1, $xr17, $xr1
	xvadd.d	$xr0, $xr3, $xr0
	xvadd.d	$xr3, $xr23, $xr9
	xvadd.d	$xr7, $xr22, $xr7
	xvadd.d	$xr6, $xr21, $xr6
	xvadd.d	$xr5, $xr20, $xr5
	xvadd.d	$xr9, $xr27, $xr12
	xvadd.d	$xr8, $xr26, $xr8
	xvadd.d	$xr11, $xr25, $xr11
	xvadd.d	$xr10, $xr24, $xr10
	xvadd.d	$xr12, $xr31, $xr16
	xvadd.d	$xr15, $xr30, $xr15
	xvadd.d	$xr14, $xr29, $xr14
	xvadd.d	$xr13, $xr28, $xr13
	xvst	$xr0, $t8, -256
	xvst	$xr1, $t8, -224
	xvst	$xr2, $t8, -192
	xvst	$xr4, $t8, -160
	xvst	$xr5, $t8, -128
	xvst	$xr6, $t8, -96
	xvst	$xr7, $t8, -64
	xvst	$xr3, $t8, -32
	xvst	$xr10, $t8, 0
	xvst	$xr11, $t8, 32
	xvst	$xr8, $t8, 64
	xvst	$xr9, $t8, 96
	xvst	$xr13, $t8, 128
	xvst	$xr14, $t8, 160
	xvst	$xr15, $t8, 192
	xvst	$xr12, $t8, 224
	addi.d	$s2, $s2, 128
	addi.d	$t8, $t8, 512
	bnez	$s2, .LBB64_12
# %bb.13:                               # %.lr.ph.i
                                        #   in Loop: Header=BB64_11 Depth=1
	ldx.hu	$t8, $fp, $a7
	ld.d	$s0, $t7, 0
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 0
	ld.hu	$t8, $s5, 0
	ld.d	$s0, $t7, 8
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 8
	ldx.hu	$t8, $fp, $t0
	ld.d	$s0, $t7, 16
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 16
	ld.hu	$t8, $s5, 4
	ld.d	$s0, $t7, 24
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 24
	ldx.hu	$t8, $fp, $t1
	ld.d	$s0, $t7, 32
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 32
	ld.hu	$t8, $s5, 8
	ld.d	$s0, $t7, 40
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 40
	ldx.hu	$t8, $fp, $t2
	ld.d	$s0, $t7, 48
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 48
	ld.hu	$t8, $s5, 12
	ld.d	$s0, $t7, 56
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 56
	ldx.hu	$t8, $fp, $t3
	ld.d	$s0, $t7, 64
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 64
	ld.hu	$t8, $s5, 16
	ld.d	$s0, $t7, 72
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 72
	ldx.hu	$t8, $fp, $t4
	ld.d	$s0, $t7, 80
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 80
	ld.hu	$t8, $s5, 20
	ld.d	$s0, $t7, 88
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 88
	ldx.hu	$t8, $fp, $t5
	ld.d	$s0, $t7, 96
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 96
	ld.hu	$t8, $s5, 24
	ld.d	$s0, $t7, 104
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 104
	ldx.hu	$t8, $fp, $t6
	ld.d	$s0, $t7, 112
	add.d	$t8, $s0, $t8
	st.d	$t8, $t7, 112
	ld.hu	$t8, $s5, 28
	ld.d	$s0, $t7, 120
	add.d	$t8, $s0, $t8
	addi.d	$s1, $s1, -1
	st.d	$t8, $t7, 120
	bnez	$s1, .LBB64_11
.LBB64_14:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1402:
	move	$a0, $s7
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1403:
# %bb.15:                               # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 8
	beqz	$a0, .LBB64_17
# %bb.16:                               # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB64_17:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	fld.d	$fs7, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs6, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB64_18:
.Ltmp1393:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB64_19:
.Ltmp1404:
	ld.d	$s1, $sp, 8
	move	$s0, $a0
	bnez	$s1, .LBB64_23
	b	.LBB64_24
.LBB64_20:                              # %.loopexit
.Ltmp1399:
	b	.LBB64_22
.LBB64_21:                              # %.loopexit.split-lp
.Ltmp1396:
.LBB64_22:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB64_23:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB64_24:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end64:
	.size	_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint64_t_RN9benchmark5StateE, .Lfunc_end64-_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint64_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table64:
.Lexception64:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end64-.Lcst_begin64
.Lcst_begin64:
	.uleb128 .Lfunc_begin64-.Lfunc_begin64  # >> Call Site 1 <<
	.uleb128 .Ltmp1391-.Lfunc_begin64       #   Call between .Lfunc_begin64 and .Ltmp1391
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1391-.Lfunc_begin64       # >> Call Site 2 <<
	.uleb128 .Ltmp1392-.Ltmp1391            #   Call between .Ltmp1391 and .Ltmp1392
	.uleb128 .Ltmp1393-.Lfunc_begin64       #     jumps to .Ltmp1393
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1394-.Lfunc_begin64       # >> Call Site 3 <<
	.uleb128 .Ltmp1395-.Ltmp1394            #   Call between .Ltmp1394 and .Ltmp1395
	.uleb128 .Ltmp1396-.Lfunc_begin64       #     jumps to .Ltmp1396
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1397-.Lfunc_begin64       # >> Call Site 4 <<
	.uleb128 .Ltmp1398-.Ltmp1397            #   Call between .Ltmp1397 and .Ltmp1398
	.uleb128 .Ltmp1399-.Lfunc_begin64       #     jumps to .Ltmp1399
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1400-.Lfunc_begin64       # >> Call Site 5 <<
	.uleb128 .Ltmp1403-.Ltmp1400            #   Call between .Ltmp1400 and .Ltmp1403
	.uleb128 .Ltmp1404-.Lfunc_begin64       #     jumps to .Ltmp1404
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1403-.Lfunc_begin64       # >> Call Site 6 <<
	.uleb128 .Lfunc_end64-.Ltmp1403         #   Call between .Ltmp1403 and .Lfunc_end64
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end64:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z61benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint64_t_RN9benchmark5StateE
.LCPI65_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint64_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint64_t_RN9benchmark5StateE,@function
_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint64_t_RN9benchmark5StateE: # @_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint64_t_RN9benchmark5StateE
.Lfunc_begin65:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception65
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	addi.d	$fp, $sp, 160
	.cfi_def_cfa 22, 0
	bstrins.d	$sp, $zero, 4, 0
	move	$s1, $a0
	lu12i.w	$a0, 4
	ori	$s4, $a0, 3616
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$s0, $a0
.Ltmp1405:
	lu12i.w	$a0, 19
	ori	$s3, $a0, 2176
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1406:
# %bb.1:
	move	$s2, $a0
	st.d	$a0, $sp, 56
	lu12i.w	$a0, -16
	lu32i.d	$a0, 0
	st.w	$a0, $sp, 64
	lu12i.w	$s6, -5
	ori	$s7, $s6, 480
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB65_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp1408:
	addi.d	$a0, $sp, 64
	addi.d	$a2, $sp, 64
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1409:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB65_2 Depth=1
	add.d	$a1, $s0, $s7
	addi.d	$s7, $s7, 2
	stx.h	$a0, $a1, $s4
	bnez	$s7, .LBB65_2
# %bb.4:
	pcalau12i	$a0, %pc_hi20(.LCPI65_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI65_0)
	move	$s5, $zero
	vst	$vr0, $sp, 64
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB65_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp1411:
	addi.d	$a0, $sp, 64
	addi.d	$a2, $sp, 64
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1412:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB65_5 Depth=1
	stx.d	$a0, $s2, $s5
	addi.d	$s5, $s5, 8
	bne	$s5, $s3, .LBB65_5
# %bb.7:
	ld.w	$s3, $s1, 28
	ld.d	$s2, $s1, 16
.Ltmp1414:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1415:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s3, .LBB65_14
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s2, .LBB65_14
# %bb.10:
	addi.d	$a0, $sp, 56
	ori	$a1, $s6, 480
	.p2align	4, , 16
.LBB65_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_12 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a2, $sp, 56
	move	$a3, $a1
	.p2align	4, , 16
.LBB65_12:                              # %vector.body
                                        #   Parent Loop BB65_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a4, $s0, $a3
	ldptr.d	$a4, $a4, 20000
	vinsgr2vr.d	$vr0, $a4, 0
	st.h	$zero, $sp, 30
	st.w	$zero, $sp, 26
	st.h	$zero, $sp, 22
	st.w	$zero, $sp, 18
	st.h	$zero, $sp, 14
	st.w	$zero, $sp, 10
	st.h	$zero, $sp, 6
	st.w	$zero, $sp, 2
	xvstelm.h	$xr0, $sp, 24, 3
	xvstelm.h	$xr0, $sp, 16, 2
	xvstelm.h	$xr0, $sp, 8, 1
	xvstelm.h	$xr0, $sp, 0, 0
	xvld	$xr0, $sp, 0
	xvld	$xr1, $a2, 0
	xvadd.d	$xr0, $xr1, $xr0
	xvst	$xr0, $a2, 0
	addi.d	$a3, $a3, 8
	addi.d	$a2, $a2, 32
	bnez	$a3, .LBB65_12
# %bb.13:                               # %_ZL27truncOrZextVecWithAddInLoopItmEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB65_11 Depth=1
	addi.d	$s2, $s2, -1
	bnez	$s2, .LBB65_11
.LBB65_14:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1416:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1417:
# %bb.15:                               # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 56
	beqz	$a0, .LBB65_17
# %bb.16:                               # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB65_17:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	addi.d	$sp, $fp, -160
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB65_18:
.Ltmp1407:
	move	$s1, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB65_19:
.Ltmp1418:
	ld.d	$s2, $sp, 56
	move	$s1, $a0
	bnez	$s2, .LBB65_23
	b	.LBB65_24
.LBB65_20:                              # %.loopexit
.Ltmp1413:
	b	.LBB65_22
.LBB65_21:                              # %.loopexit.split-lp
.Ltmp1410:
.LBB65_22:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s1, $a0
.LBB65_23:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB65_24:                              # %_ZNSt10unique_ptrIA_tSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end65:
	.size	_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint64_t_RN9benchmark5StateE, .Lfunc_end65-_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint64_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table65:
.Lexception65:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end65-.Lcst_begin65
.Lcst_begin65:
	.uleb128 .Lfunc_begin65-.Lfunc_begin65  # >> Call Site 1 <<
	.uleb128 .Ltmp1405-.Lfunc_begin65       #   Call between .Lfunc_begin65 and .Ltmp1405
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1405-.Lfunc_begin65       # >> Call Site 2 <<
	.uleb128 .Ltmp1406-.Ltmp1405            #   Call between .Ltmp1405 and .Ltmp1406
	.uleb128 .Ltmp1407-.Lfunc_begin65       #     jumps to .Ltmp1407
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1408-.Lfunc_begin65       # >> Call Site 3 <<
	.uleb128 .Ltmp1409-.Ltmp1408            #   Call between .Ltmp1408 and .Ltmp1409
	.uleb128 .Ltmp1410-.Lfunc_begin65       #     jumps to .Ltmp1410
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1411-.Lfunc_begin65       # >> Call Site 4 <<
	.uleb128 .Ltmp1412-.Ltmp1411            #   Call between .Ltmp1411 and .Ltmp1412
	.uleb128 .Ltmp1413-.Lfunc_begin65       #     jumps to .Ltmp1413
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1414-.Lfunc_begin65       # >> Call Site 5 <<
	.uleb128 .Ltmp1417-.Ltmp1414            #   Call between .Ltmp1414 and .Ltmp1417
	.uleb128 .Ltmp1418-.Lfunc_begin65       #     jumps to .Ltmp1418
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1417-.Lfunc_begin65       # >> Call Site 6 <<
	.uleb128 .Lfunc_end65-.Ltmp1417         #   Call between .Ltmp1417 and .Lfunc_end65
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end65:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z61benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint64_t_RN9benchmark5StateE # -- Begin function _Z61benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint64_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z61benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint64_t_RN9benchmark5StateE,@function
_Z61benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint64_t_RN9benchmark5StateE: # @_Z61benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint64_t_RN9benchmark5StateE
.Lfunc_begin66:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception66
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	lu12i.w	$s1, 9
	ori	$s4, $s1, 3136
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp1419:
	lu12i.w	$s5, 19
	ori	$s3, $s5, 2176
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1420:
# %bb.1:                                # %.split
	move	$s2, $a0
	st.d	$a0, $sp, 24
.Ltmp1422:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
.Ltmp1423:
# %bb.2:
	move	$s0, $zero
	ori	$s1, $s1, 3072
	add.d	$s6, $fp, $s1
	ori	$s7, $s5, 2048
	add.d	$s8, $s2, $s7
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 32
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB66_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp1425:
	addi.d	$a0, $sp, 32
	addi.d	$a2, $sp, 32
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1426:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB66_3 Depth=1
	stx.w	$a0, $fp, $s0
	addi.d	$s0, $s0, 4
	bne	$s0, $s4, .LBB66_3
# %bb.5:                                # %vector.ph
	move	$a0, $zero
	vrepli.b	$vr0, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB66_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ldx.d	$a2, $fp, $a0
	vinsgr2vr.d	$vr1, $a2, 0
	vilvl.w	$vr1, $vr0, $vr1
	vst	$vr1, $a1, 0
	addi.d	$a0, $a0, 8
	addi.d	$a1, $a1, 16
	bne	$a0, $s4, .LBB66_6
# %bb.7:                                # %vector.body83.preheader
	move	$a0, $zero
	addi.d	$a1, $s2, 128
	.p2align	4, , 16
.LBB66_8:                               # %vector.body83
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a0
	xvldx	$xr3, $fp, $a0
	xvld	$xr6, $a2, 32
	xvld	$xr4, $a2, 64
	xvld	$xr0, $a2, 96
	xvpermi.q	$xr2, $xr3, 1
	vpickve2gr.w	$a2, $vr2, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr1, $a2, 0
	vpickve2gr.w	$a2, $vr2, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr1, $a2, 1
	vpickve2gr.w	$a2, $vr2, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr1, $a2, 2
	vpickve2gr.w	$a2, $vr2, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr1, $a2, 3
	vpickve2gr.w	$a2, $vr3, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr2, $a2, 0
	vpickve2gr.w	$a2, $vr3, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr2, $a2, 1
	vpickve2gr.w	$a2, $vr3, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr2, $a2, 2
	vpickve2gr.w	$a2, $vr3, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr2, $a2, 3
	xvpermi.q	$xr5, $xr6, 1
	vpickve2gr.w	$a2, $vr5, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr3, $a2, 0
	vpickve2gr.w	$a2, $vr5, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr3, $a2, 1
	vpickve2gr.w	$a2, $vr5, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr3, $a2, 2
	vpickve2gr.w	$a2, $vr5, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr3, $a2, 3
	vpickve2gr.w	$a2, $vr6, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr5, $a2, 0
	vpickve2gr.w	$a2, $vr6, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr5, $a2, 1
	vpickve2gr.w	$a2, $vr6, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr5, $a2, 2
	vpickve2gr.w	$a2, $vr6, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr5, $a2, 3
	xvpermi.q	$xr7, $xr4, 1
	vpickve2gr.w	$a2, $vr7, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr6, $a2, 0
	vpickve2gr.w	$a2, $vr7, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr6, $a2, 1
	vpickve2gr.w	$a2, $vr7, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr6, $a2, 2
	vpickve2gr.w	$a2, $vr7, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr6, $a2, 3
	vpickve2gr.w	$a2, $vr4, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr7, $a2, 0
	vpickve2gr.w	$a2, $vr4, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr7, $a2, 1
	vpickve2gr.w	$a2, $vr4, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr7, $a2, 2
	vpickve2gr.w	$a2, $vr4, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr7, $a2, 3
	xvpermi.q	$xr4, $xr0, 1
	vpickve2gr.w	$a2, $vr4, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr8, $a2, 0
	vpickve2gr.w	$a2, $vr4, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr8, $a2, 1
	vpickve2gr.w	$a2, $vr4, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr8, $a2, 2
	vpickve2gr.w	$a2, $vr4, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr8, $a2, 3
	vpickve2gr.w	$a2, $vr0, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr4, $a2, 0
	vpickve2gr.w	$a2, $vr0, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr4, $a2, 1
	vpickve2gr.w	$a2, $vr0, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr4, $a2, 2
	vpickve2gr.w	$a2, $vr0, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr4, $a2, 3
	xvst	$xr2, $a1, -128
	xvst	$xr1, $a1, -96
	xvst	$xr5, $a1, -64
	xvst	$xr3, $a1, -32
	xvst	$xr7, $a1, 0
	xvst	$xr6, $a1, 32
	xvst	$xr4, $a1, 64
	xvst	$xr8, $a1, 96
	addi.d	$a0, $a0, 128
	addi.d	$a1, $a1, 256
	bne	$a0, $s1, .LBB66_8
# %bb.9:                                # %.lr.ph.i
	move	$s4, $zero
	ld.wu	$a0, $s6, 0
	ld.wu	$a1, $s6, 4
	ld.wu	$a2, $s6, 8
	ld.wu	$a3, $s6, 12
	st.d	$a0, $s8, 0
	st.d	$a1, $s8, 8
	st.d	$a2, $s8, 16
	st.d	$a3, $s8, 24
	ld.wu	$a0, $s6, 16
	ld.wu	$a1, $s6, 20
	ld.wu	$a2, $s6, 24
	ld.wu	$a3, $s6, 28
	st.d	$a0, $s8, 32
	st.d	$a1, $s8, 40
	st.d	$a2, $s8, 48
	st.d	$a3, $s8, 56
	ld.wu	$a0, $s6, 32
	ld.wu	$a1, $s6, 36
	ld.wu	$a2, $s6, 40
	ld.wu	$a3, $s6, 44
	st.d	$a0, $s8, 64
	st.d	$a1, $s8, 72
	st.d	$a2, $s8, 80
	st.d	$a3, $s8, 88
	ld.wu	$a0, $s6, 48
	ld.wu	$a1, $s6, 52
	ld.wu	$a2, $s6, 56
	ld.wu	$a3, $s6, 60
	st.d	$a0, $s8, 96
	st.d	$a1, $s8, 104
	st.d	$a2, $s8, 112
	st.d	$a3, $s8, 120
	move	$s1, $fp
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB66_10:                              # %_ZL27truncOrZextVecInLoopWithVW8IjmEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	ldx.d	$a0, $s2, $s4
	ldx.d	$a1, $s5, $s4
	bne	$a0, $a1, .LBB66_23
# %bb.11:                               # %_ZL27truncOrZextVecInLoopWithVW8IjmEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB66_10 Depth=1
	addi.d	$s4, $s4, 8
	addi.d	$s1, $s1, 4
	bne	$s4, $s3, .LBB66_10
# %bb.12:
	ld.d	$s1, $sp, 8                     # 8-byte Folded Reload
	ld.w	$s0, $s1, 28
	ld.d	$s2, $s1, 16
.Ltmp1443:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1444:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s0, .LBB66_19
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s2, .LBB66_19
# %bb.15:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 64
	addi.d	$a1, $sp, 24
	lu12i.w	$a2, 2
	ori	$a2, $a2, 1792
	.p2align	4, , 16
.LBB66_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_17 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a4, $sp, 24
	add.d	$a3, $a4, $s7
	addi.d	$a4, $a4, 128
	move	$a5, $a0
	move	$a6, $a2
	.p2align	4, , 16
.LBB66_17:                              # %vector.body93
                                        #   Parent Loop BB66_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr3, $a5, -64
	xvld	$xr6, $a5, -32
	xvld	$xr4, $a5, 0
	xvld	$xr0, $a5, 32
	xvpermi.q	$xr2, $xr3, 1
	vpickve2gr.w	$a7, $vr2, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr1, $a7, 0
	vpickve2gr.w	$a7, $vr2, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr1, $a7, 1
	vpickve2gr.w	$a7, $vr2, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr1, $a7, 2
	vpickve2gr.w	$a7, $vr2, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr1, $a7, 3
	vpickve2gr.w	$a7, $vr3, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr2, $a7, 0
	vpickve2gr.w	$a7, $vr3, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr2, $a7, 1
	vpickve2gr.w	$a7, $vr3, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr2, $a7, 2
	vpickve2gr.w	$a7, $vr3, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr2, $a7, 3
	xvpermi.q	$xr5, $xr6, 1
	vpickve2gr.w	$a7, $vr5, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr3, $a7, 0
	vpickve2gr.w	$a7, $vr5, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr3, $a7, 1
	vpickve2gr.w	$a7, $vr5, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr3, $a7, 2
	vpickve2gr.w	$a7, $vr5, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr3, $a7, 3
	vpickve2gr.w	$a7, $vr6, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr5, $a7, 0
	vpickve2gr.w	$a7, $vr6, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr5, $a7, 1
	vpickve2gr.w	$a7, $vr6, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr5, $a7, 2
	vpickve2gr.w	$a7, $vr6, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr5, $a7, 3
	xvpermi.q	$xr7, $xr4, 1
	vpickve2gr.w	$a7, $vr7, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr6, $a7, 0
	vpickve2gr.w	$a7, $vr7, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr6, $a7, 1
	vpickve2gr.w	$a7, $vr7, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr6, $a7, 2
	vpickve2gr.w	$a7, $vr7, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr6, $a7, 3
	vpickve2gr.w	$a7, $vr4, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr7, $a7, 0
	vpickve2gr.w	$a7, $vr4, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr7, $a7, 1
	vpickve2gr.w	$a7, $vr4, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr7, $a7, 2
	vpickve2gr.w	$a7, $vr4, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr7, $a7, 3
	xvpermi.q	$xr4, $xr0, 1
	vpickve2gr.w	$a7, $vr4, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr8, $a7, 0
	vpickve2gr.w	$a7, $vr4, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr8, $a7, 1
	vpickve2gr.w	$a7, $vr4, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr8, $a7, 2
	vpickve2gr.w	$a7, $vr4, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr8, $a7, 3
	vpickve2gr.w	$a7, $vr0, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr4, $a7, 0
	vpickve2gr.w	$a7, $vr0, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr4, $a7, 1
	vpickve2gr.w	$a7, $vr0, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr4, $a7, 2
	vpickve2gr.w	$a7, $vr0, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr4, $a7, 3
	xvst	$xr2, $a4, -128
	xvst	$xr1, $a4, -96
	xvst	$xr5, $a4, -64
	xvst	$xr3, $a4, -32
	xvst	$xr7, $a4, 0
	xvst	$xr6, $a4, 32
	xvst	$xr4, $a4, 64
	xvst	$xr8, $a4, 96
	addi.d	$a6, $a6, -32
	addi.d	$a5, $a5, 128
	addi.d	$a4, $a4, 256
	bnez	$a6, .LBB66_17
# %bb.18:                               # %.lr.ph.i24
                                        #   in Loop: Header=BB66_16 Depth=1
	ld.wu	$a4, $s6, 0
	ld.wu	$a5, $s6, 4
	ld.wu	$a6, $s6, 8
	st.d	$a4, $a3, 0
	ld.wu	$a4, $s6, 12
	st.d	$a5, $a3, 8
	st.d	$a6, $a3, 16
	ld.wu	$a5, $s6, 16
	st.d	$a4, $a3, 24
	ld.wu	$a4, $s6, 20
	ld.wu	$a6, $s6, 24
	st.d	$a5, $a3, 32
	ld.wu	$a5, $s6, 28
	st.d	$a4, $a3, 40
	st.d	$a6, $a3, 48
	ld.wu	$a4, $s6, 32
	st.d	$a5, $a3, 56
	ld.wu	$a5, $s6, 36
	ld.wu	$a6, $s6, 40
	st.d	$a4, $a3, 64
	ld.wu	$a4, $s6, 44
	st.d	$a5, $a3, 72
	st.d	$a6, $a3, 80
	ld.wu	$a5, $s6, 48
	st.d	$a4, $a3, 88
	ld.wu	$a4, $s6, 52
	ld.wu	$a6, $s6, 56
	st.d	$a5, $a3, 96
	ld.wu	$a5, $s6, 60
	st.d	$a4, $a3, 104
	st.d	$a6, $a3, 112
	addi.d	$s2, $s2, -1
	st.d	$a5, $a3, 120
	bnez	$s2, .LBB66_16
.LBB66_19:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1445:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1446:
# %bb.20:                               # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit36
	move	$a0, $s5
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 24
	beqz	$a0, .LBB66_22
# %bb.21:                               # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i38
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB66_22:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit42
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB66_23:
.Ltmp1428:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1429:
# %bb.24:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	ld.wu	$a1, $s1, 0
.Ltmp1430:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1431:
# %bb.25:                               # %_ZNSolsEj.exit
.Ltmp1432:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1433:
# %bb.26:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.d	$a1, $s2, $s4
.Ltmp1434:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1435:
# %bb.27:                               # %_ZNSolsEm.exit
.Ltmp1436:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1437:
# %bb.28:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit21
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	ldx.d	$a1, $a0, $s4
.Ltmp1438:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1439:
# %bb.29:                               # %_ZNSolsEm.exit23
.Ltmp1440:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp1441:
# %bb.30:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB66_31:                              # %.thread
.Ltmp1424:
	move	$s1, $a0
	b	.LBB66_37
.LBB66_32:
.Ltmp1421:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB66_33:
.Ltmp1447:
	b	.LBB66_36
.LBB66_34:
.Ltmp1442:
	b	.LBB66_36
.LBB66_35:
.Ltmp1427:
.LBB66_36:
	move	$s1, $a0
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s2, $sp, 24
	beqz	$s2, .LBB66_38
.LBB66_37:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i31
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB66_38:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end66:
	.size	_Z61benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint64_t_RN9benchmark5StateE, .Lfunc_end66-_Z61benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint64_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table66:
.Lexception66:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end66-.Lcst_begin66
.Lcst_begin66:
	.uleb128 .Lfunc_begin66-.Lfunc_begin66  # >> Call Site 1 <<
	.uleb128 .Ltmp1419-.Lfunc_begin66       #   Call between .Lfunc_begin66 and .Ltmp1419
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1419-.Lfunc_begin66       # >> Call Site 2 <<
	.uleb128 .Ltmp1420-.Ltmp1419            #   Call between .Ltmp1419 and .Ltmp1420
	.uleb128 .Ltmp1421-.Lfunc_begin66       #     jumps to .Ltmp1421
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1422-.Lfunc_begin66       # >> Call Site 3 <<
	.uleb128 .Ltmp1423-.Ltmp1422            #   Call between .Ltmp1422 and .Ltmp1423
	.uleb128 .Ltmp1424-.Lfunc_begin66       #     jumps to .Ltmp1424
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1425-.Lfunc_begin66       # >> Call Site 4 <<
	.uleb128 .Ltmp1426-.Ltmp1425            #   Call between .Ltmp1425 and .Ltmp1426
	.uleb128 .Ltmp1427-.Lfunc_begin66       #     jumps to .Ltmp1427
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1443-.Lfunc_begin66       # >> Call Site 5 <<
	.uleb128 .Ltmp1446-.Ltmp1443            #   Call between .Ltmp1443 and .Ltmp1446
	.uleb128 .Ltmp1447-.Lfunc_begin66       #     jumps to .Ltmp1447
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1446-.Lfunc_begin66       # >> Call Site 6 <<
	.uleb128 .Ltmp1428-.Ltmp1446            #   Call between .Ltmp1446 and .Ltmp1428
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1428-.Lfunc_begin66       # >> Call Site 7 <<
	.uleb128 .Ltmp1441-.Ltmp1428            #   Call between .Ltmp1428 and .Ltmp1441
	.uleb128 .Ltmp1442-.Lfunc_begin66       #     jumps to .Ltmp1442
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1441-.Lfunc_begin66       # >> Call Site 8 <<
	.uleb128 .Lfunc_end66-.Ltmp1441         #   Call between .Ltmp1441 and .Lfunc_end66
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end66:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z62benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint64_t_RN9benchmark5StateE # -- Begin function _Z62benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint64_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z62benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint64_t_RN9benchmark5StateE,@function
_Z62benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint64_t_RN9benchmark5StateE: # @_Z62benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint64_t_RN9benchmark5StateE
.Lfunc_begin67:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception67
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	lu12i.w	$s1, 9
	ori	$s4, $s1, 3136
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp1448:
	lu12i.w	$s5, 19
	ori	$s3, $s5, 2176
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1449:
# %bb.1:                                # %.split
	move	$s2, $a0
	st.d	$a0, $sp, 24
.Ltmp1451:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
.Ltmp1452:
# %bb.2:
	move	$s0, $zero
	ori	$s1, $s1, 3072
	add.d	$s6, $fp, $s1
	ori	$s7, $s5, 2048
	add.d	$s8, $s2, $s7
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 32
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB67_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp1454:
	addi.d	$a0, $sp, 32
	addi.d	$a2, $sp, 32
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1455:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB67_3 Depth=1
	stx.w	$a0, $fp, $s0
	addi.d	$s0, $s0, 4
	bne	$s0, $s4, .LBB67_3
# %bb.5:                                # %vector.ph
	move	$a0, $zero
	vrepli.b	$vr0, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB67_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ldx.d	$a2, $fp, $a0
	vinsgr2vr.d	$vr1, $a2, 0
	vilvl.w	$vr1, $vr0, $vr1
	vst	$vr1, $a1, 0
	addi.d	$a0, $a0, 8
	addi.d	$a1, $a1, 16
	bne	$a0, $s4, .LBB67_6
# %bb.7:                                # %vector.body83.preheader
	move	$a0, $zero
	addi.d	$a1, $s2, 256
	.p2align	4, , 16
.LBB67_8:                               # %vector.body83
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $fp, $a0
	xvldx	$xr6, $fp, $a0
	xvld	$xr5, $a2, 32
	xvld	$xr12, $a2, 96
	xvld	$xr11, $a2, 64
	xvld	$xr7, $a2, 160
	xvld	$xr9, $a2, 128
	xvld	$xr1, $a2, 224
	xvld	$xr2, $a2, 192
	xvpermi.q	$xr3, $xr5, 1
	vpickve2gr.w	$a2, $vr3, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr0, $a2, 0
	vpickve2gr.w	$a2, $vr3, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr0, $a2, 1
	vpickve2gr.w	$a2, $vr3, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr0, $a2, 2
	vpickve2gr.w	$a2, $vr3, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr0, $a2, 3
	xvpermi.q	$xr4, $xr6, 1
	vpickve2gr.w	$a2, $vr4, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr3, $a2, 0
	vpickve2gr.w	$a2, $vr4, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr3, $a2, 1
	vpickve2gr.w	$a2, $vr4, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr3, $a2, 2
	vpickve2gr.w	$a2, $vr4, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr3, $a2, 3
	vpickve2gr.w	$a2, $vr5, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr4, $a2, 0
	vpickve2gr.w	$a2, $vr5, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr4, $a2, 1
	vpickve2gr.w	$a2, $vr5, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr4, $a2, 2
	vpickve2gr.w	$a2, $vr5, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr4, $a2, 3
	vpickve2gr.w	$a2, $vr6, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr5, $a2, 0
	vpickve2gr.w	$a2, $vr6, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr5, $a2, 1
	vpickve2gr.w	$a2, $vr6, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr5, $a2, 2
	vpickve2gr.w	$a2, $vr6, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr5, $a2, 3
	xvpermi.q	$xr8, $xr11, 1
	vpickve2gr.w	$a2, $vr8, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr6, $a2, 0
	vpickve2gr.w	$a2, $vr8, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr6, $a2, 1
	vpickve2gr.w	$a2, $vr8, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr6, $a2, 2
	vpickve2gr.w	$a2, $vr8, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr6, $a2, 3
	xvpermi.q	$xr10, $xr12, 1
	vpickve2gr.w	$a2, $vr10, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr8, $a2, 0
	vpickve2gr.w	$a2, $vr10, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr8, $a2, 1
	vpickve2gr.w	$a2, $vr10, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr8, $a2, 2
	vpickve2gr.w	$a2, $vr10, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr8, $a2, 3
	vpickve2gr.w	$a2, $vr11, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr10, $a2, 0
	vpickve2gr.w	$a2, $vr11, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr10, $a2, 1
	vpickve2gr.w	$a2, $vr11, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr10, $a2, 2
	vpickve2gr.w	$a2, $vr11, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr10, $a2, 3
	vpickve2gr.w	$a2, $vr12, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr11, $a2, 0
	vpickve2gr.w	$a2, $vr12, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr11, $a2, 1
	vpickve2gr.w	$a2, $vr12, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr11, $a2, 2
	vpickve2gr.w	$a2, $vr12, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr11, $a2, 3
	xvpermi.q	$xr13, $xr9, 1
	vpickve2gr.w	$a2, $vr13, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr12, $a2, 0
	vpickve2gr.w	$a2, $vr13, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr12, $a2, 1
	vpickve2gr.w	$a2, $vr13, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr12, $a2, 2
	vpickve2gr.w	$a2, $vr13, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr12, $a2, 3
	xvpermi.q	$xr14, $xr7, 1
	vpickve2gr.w	$a2, $vr14, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr13, $a2, 0
	vpickve2gr.w	$a2, $vr14, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr13, $a2, 1
	vpickve2gr.w	$a2, $vr14, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr13, $a2, 2
	vpickve2gr.w	$a2, $vr14, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr13, $a2, 3
	vpickve2gr.w	$a2, $vr9, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr14, $a2, 0
	vpickve2gr.w	$a2, $vr9, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr14, $a2, 1
	vpickve2gr.w	$a2, $vr9, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr14, $a2, 2
	vpickve2gr.w	$a2, $vr9, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr14, $a2, 3
	vpickve2gr.w	$a2, $vr7, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr9, $a2, 0
	vpickve2gr.w	$a2, $vr7, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr9, $a2, 1
	vpickve2gr.w	$a2, $vr7, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr9, $a2, 2
	vpickve2gr.w	$a2, $vr7, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr9, $a2, 3
	xvpermi.q	$xr15, $xr2, 1
	vpickve2gr.w	$a2, $vr15, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr7, $a2, 0
	vpickve2gr.w	$a2, $vr15, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr7, $a2, 1
	vpickve2gr.w	$a2, $vr15, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr7, $a2, 2
	vpickve2gr.w	$a2, $vr15, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr7, $a2, 3
	xvpermi.q	$xr15, $xr1, 1
	vpickve2gr.w	$a2, $vr15, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr16, $a2, 0
	vpickve2gr.w	$a2, $vr15, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr16, $a2, 1
	vpickve2gr.w	$a2, $vr15, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr16, $a2, 2
	vpickve2gr.w	$a2, $vr15, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr16, $a2, 3
	vpickve2gr.w	$a2, $vr2, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr15, $a2, 0
	vpickve2gr.w	$a2, $vr2, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr15, $a2, 1
	vpickve2gr.w	$a2, $vr2, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr15, $a2, 2
	vpickve2gr.w	$a2, $vr2, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr15, $a2, 3
	vpickve2gr.w	$a2, $vr1, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr2, $a2, 0
	vpickve2gr.w	$a2, $vr1, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr2, $a2, 1
	vpickve2gr.w	$a2, $vr1, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr2, $a2, 2
	vpickve2gr.w	$a2, $vr1, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr2, $a2, 3
	xvst	$xr5, $a1, -256
	xvst	$xr4, $a1, -192
	xvst	$xr3, $a1, -224
	xvst	$xr0, $a1, -160
	xvst	$xr11, $a1, -64
	xvst	$xr10, $a1, -128
	xvst	$xr8, $a1, -32
	xvst	$xr6, $a1, -96
	xvst	$xr9, $a1, 64
	xvst	$xr14, $a1, 0
	xvst	$xr13, $a1, 96
	xvst	$xr12, $a1, 32
	xvst	$xr2, $a1, 192
	xvst	$xr15, $a1, 128
	xvst	$xr16, $a1, 224
	xvst	$xr7, $a1, 160
	addi.d	$a0, $a0, 256
	addi.d	$a1, $a1, 512
	bne	$a0, $s1, .LBB67_8
# %bb.9:                                # %.lr.ph.i
	move	$s4, $zero
	ld.wu	$a0, $s6, 0
	ld.wu	$a1, $s6, 4
	ld.wu	$a2, $s6, 8
	ld.wu	$a3, $s6, 12
	st.d	$a0, $s8, 0
	st.d	$a1, $s8, 8
	st.d	$a2, $s8, 16
	st.d	$a3, $s8, 24
	ld.wu	$a0, $s6, 16
	ld.wu	$a1, $s6, 20
	ld.wu	$a2, $s6, 24
	ld.wu	$a3, $s6, 28
	st.d	$a0, $s8, 32
	st.d	$a1, $s8, 40
	st.d	$a2, $s8, 48
	st.d	$a3, $s8, 56
	ld.wu	$a0, $s6, 32
	ld.wu	$a1, $s6, 36
	ld.wu	$a2, $s6, 40
	ld.wu	$a3, $s6, 44
	st.d	$a0, $s8, 64
	st.d	$a1, $s8, 72
	st.d	$a2, $s8, 80
	st.d	$a3, $s8, 88
	ld.wu	$a0, $s6, 48
	ld.wu	$a1, $s6, 52
	ld.wu	$a2, $s6, 56
	ld.wu	$a3, $s6, 60
	st.d	$a0, $s8, 96
	st.d	$a1, $s8, 104
	st.d	$a2, $s8, 112
	st.d	$a3, $s8, 120
	move	$s1, $fp
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB67_10:                              # %_ZL28truncOrZextVecInLoopWithVW16IjmEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	ldx.d	$a0, $s2, $s4
	ldx.d	$a1, $s5, $s4
	bne	$a0, $a1, .LBB67_23
# %bb.11:                               # %_ZL28truncOrZextVecInLoopWithVW16IjmEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB67_10 Depth=1
	addi.d	$s4, $s4, 8
	addi.d	$s1, $s1, 4
	bne	$s4, $s3, .LBB67_10
# %bb.12:
	ld.d	$s1, $sp, 8                     # 8-byte Folded Reload
	ld.w	$s0, $s1, 28
	ld.d	$s2, $s1, 16
.Ltmp1472:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1473:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s0, .LBB67_19
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s2, .LBB67_19
# %bb.15:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 128
	addi.d	$a1, $sp, 24
	lu12i.w	$a2, 2
	ori	$a2, $a2, 1792
	.p2align	4, , 16
.LBB67_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_17 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a4, $sp, 24
	add.d	$a3, $a4, $s7
	addi.d	$a4, $a4, 256
	move	$a5, $a0
	move	$a6, $a2
	.p2align	4, , 16
.LBB67_17:                              # %vector.body93
                                        #   Parent Loop BB67_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr6, $a5, -96
	xvld	$xr5, $a5, -128
	xvld	$xr12, $a5, -32
	xvld	$xr11, $a5, -64
	xvld	$xr7, $a5, 32
	xvld	$xr9, $a5, 0
	xvld	$xr1, $a5, 96
	xvld	$xr2, $a5, 64
	xvpermi.q	$xr3, $xr5, 1
	vpickve2gr.w	$a7, $vr3, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr0, $a7, 0
	vpickve2gr.w	$a7, $vr3, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr0, $a7, 1
	vpickve2gr.w	$a7, $vr3, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr0, $a7, 2
	vpickve2gr.w	$a7, $vr3, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr0, $a7, 3
	xvpermi.q	$xr4, $xr6, 1
	vpickve2gr.w	$a7, $vr4, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr3, $a7, 0
	vpickve2gr.w	$a7, $vr4, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr3, $a7, 1
	vpickve2gr.w	$a7, $vr4, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr3, $a7, 2
	vpickve2gr.w	$a7, $vr4, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr3, $a7, 3
	vpickve2gr.w	$a7, $vr5, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr4, $a7, 0
	vpickve2gr.w	$a7, $vr5, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr4, $a7, 1
	vpickve2gr.w	$a7, $vr5, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr4, $a7, 2
	vpickve2gr.w	$a7, $vr5, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr4, $a7, 3
	vpickve2gr.w	$a7, $vr6, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr5, $a7, 0
	vpickve2gr.w	$a7, $vr6, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr5, $a7, 1
	vpickve2gr.w	$a7, $vr6, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr5, $a7, 2
	vpickve2gr.w	$a7, $vr6, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr5, $a7, 3
	xvpermi.q	$xr8, $xr11, 1
	vpickve2gr.w	$a7, $vr8, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr6, $a7, 0
	vpickve2gr.w	$a7, $vr8, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr6, $a7, 1
	vpickve2gr.w	$a7, $vr8, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr6, $a7, 2
	vpickve2gr.w	$a7, $vr8, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr6, $a7, 3
	xvpermi.q	$xr10, $xr12, 1
	vpickve2gr.w	$a7, $vr10, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr8, $a7, 0
	vpickve2gr.w	$a7, $vr10, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr8, $a7, 1
	vpickve2gr.w	$a7, $vr10, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr8, $a7, 2
	vpickve2gr.w	$a7, $vr10, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr8, $a7, 3
	vpickve2gr.w	$a7, $vr11, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr10, $a7, 0
	vpickve2gr.w	$a7, $vr11, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr10, $a7, 1
	vpickve2gr.w	$a7, $vr11, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr10, $a7, 2
	vpickve2gr.w	$a7, $vr11, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr10, $a7, 3
	vpickve2gr.w	$a7, $vr12, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr11, $a7, 0
	vpickve2gr.w	$a7, $vr12, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr11, $a7, 1
	vpickve2gr.w	$a7, $vr12, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr11, $a7, 2
	vpickve2gr.w	$a7, $vr12, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr11, $a7, 3
	xvpermi.q	$xr13, $xr9, 1
	vpickve2gr.w	$a7, $vr13, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr12, $a7, 0
	vpickve2gr.w	$a7, $vr13, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr12, $a7, 1
	vpickve2gr.w	$a7, $vr13, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr12, $a7, 2
	vpickve2gr.w	$a7, $vr13, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr12, $a7, 3
	xvpermi.q	$xr14, $xr7, 1
	vpickve2gr.w	$a7, $vr14, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr13, $a7, 0
	vpickve2gr.w	$a7, $vr14, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr13, $a7, 1
	vpickve2gr.w	$a7, $vr14, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr13, $a7, 2
	vpickve2gr.w	$a7, $vr14, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr13, $a7, 3
	vpickve2gr.w	$a7, $vr9, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr14, $a7, 0
	vpickve2gr.w	$a7, $vr9, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr14, $a7, 1
	vpickve2gr.w	$a7, $vr9, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr14, $a7, 2
	vpickve2gr.w	$a7, $vr9, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr14, $a7, 3
	vpickve2gr.w	$a7, $vr7, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr9, $a7, 0
	vpickve2gr.w	$a7, $vr7, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr9, $a7, 1
	vpickve2gr.w	$a7, $vr7, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr9, $a7, 2
	vpickve2gr.w	$a7, $vr7, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr9, $a7, 3
	xvpermi.q	$xr15, $xr2, 1
	vpickve2gr.w	$a7, $vr15, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr7, $a7, 0
	vpickve2gr.w	$a7, $vr15, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr7, $a7, 1
	vpickve2gr.w	$a7, $vr15, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr7, $a7, 2
	vpickve2gr.w	$a7, $vr15, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr7, $a7, 3
	xvpermi.q	$xr15, $xr1, 1
	vpickve2gr.w	$a7, $vr15, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr16, $a7, 0
	vpickve2gr.w	$a7, $vr15, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr16, $a7, 1
	vpickve2gr.w	$a7, $vr15, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr16, $a7, 2
	vpickve2gr.w	$a7, $vr15, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr16, $a7, 3
	vpickve2gr.w	$a7, $vr2, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr15, $a7, 0
	vpickve2gr.w	$a7, $vr2, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr15, $a7, 1
	vpickve2gr.w	$a7, $vr2, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr15, $a7, 2
	vpickve2gr.w	$a7, $vr2, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr15, $a7, 3
	vpickve2gr.w	$a7, $vr1, 0
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr2, $a7, 0
	vpickve2gr.w	$a7, $vr1, 1
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr2, $a7, 1
	vpickve2gr.w	$a7, $vr1, 2
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr2, $a7, 2
	vpickve2gr.w	$a7, $vr1, 3
	bstrpick.d	$a7, $a7, 31, 0
	xvinsgr2vr.d	$xr2, $a7, 3
	xvst	$xr5, $a4, -192
	xvst	$xr4, $a4, -256
	xvst	$xr3, $a4, -160
	xvst	$xr0, $a4, -224
	xvst	$xr11, $a4, -64
	xvst	$xr10, $a4, -128
	xvst	$xr8, $a4, -32
	xvst	$xr6, $a4, -96
	xvst	$xr9, $a4, 64
	xvst	$xr14, $a4, 0
	xvst	$xr13, $a4, 96
	xvst	$xr12, $a4, 32
	xvst	$xr2, $a4, 192
	xvst	$xr15, $a4, 128
	xvst	$xr16, $a4, 224
	xvst	$xr7, $a4, 160
	addi.d	$a6, $a6, -64
	addi.d	$a5, $a5, 256
	addi.d	$a4, $a4, 512
	bnez	$a6, .LBB67_17
# %bb.18:                               # %.lr.ph.i24
                                        #   in Loop: Header=BB67_16 Depth=1
	ld.wu	$a4, $s6, 0
	ld.wu	$a5, $s6, 4
	ld.wu	$a6, $s6, 8
	st.d	$a4, $a3, 0
	ld.wu	$a4, $s6, 12
	st.d	$a5, $a3, 8
	st.d	$a6, $a3, 16
	ld.wu	$a5, $s6, 16
	st.d	$a4, $a3, 24
	ld.wu	$a4, $s6, 20
	ld.wu	$a6, $s6, 24
	st.d	$a5, $a3, 32
	ld.wu	$a5, $s6, 28
	st.d	$a4, $a3, 40
	st.d	$a6, $a3, 48
	ld.wu	$a4, $s6, 32
	st.d	$a5, $a3, 56
	ld.wu	$a5, $s6, 36
	ld.wu	$a6, $s6, 40
	st.d	$a4, $a3, 64
	ld.wu	$a4, $s6, 44
	st.d	$a5, $a3, 72
	st.d	$a6, $a3, 80
	ld.wu	$a5, $s6, 48
	st.d	$a4, $a3, 88
	ld.wu	$a4, $s6, 52
	ld.wu	$a6, $s6, 56
	st.d	$a5, $a3, 96
	ld.wu	$a5, $s6, 60
	st.d	$a4, $a3, 104
	st.d	$a6, $a3, 112
	addi.d	$s2, $s2, -1
	st.d	$a5, $a3, 120
	bnez	$s2, .LBB67_16
.LBB67_19:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1474:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1475:
# %bb.20:                               # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit36
	move	$a0, $s5
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 24
	beqz	$a0, .LBB67_22
# %bb.21:                               # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i38
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB67_22:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit42
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB67_23:
.Ltmp1457:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1458:
# %bb.24:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	ld.wu	$a1, $s1, 0
.Ltmp1459:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1460:
# %bb.25:                               # %_ZNSolsEj.exit
.Ltmp1461:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1462:
# %bb.26:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.d	$a1, $s2, $s4
.Ltmp1463:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1464:
# %bb.27:                               # %_ZNSolsEm.exit
.Ltmp1465:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1466:
# %bb.28:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit21
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	ldx.d	$a1, $a0, $s4
.Ltmp1467:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1468:
# %bb.29:                               # %_ZNSolsEm.exit23
.Ltmp1469:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp1470:
# %bb.30:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB67_31:                              # %.thread
.Ltmp1453:
	move	$s1, $a0
	b	.LBB67_37
.LBB67_32:
.Ltmp1450:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB67_33:
.Ltmp1476:
	b	.LBB67_36
.LBB67_34:
.Ltmp1471:
	b	.LBB67_36
.LBB67_35:
.Ltmp1456:
.LBB67_36:
	move	$s1, $a0
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s2, $sp, 24
	beqz	$s2, .LBB67_38
.LBB67_37:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i31
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB67_38:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end67:
	.size	_Z62benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint64_t_RN9benchmark5StateE, .Lfunc_end67-_Z62benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint64_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table67:
.Lexception67:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end67-.Lcst_begin67
.Lcst_begin67:
	.uleb128 .Lfunc_begin67-.Lfunc_begin67  # >> Call Site 1 <<
	.uleb128 .Ltmp1448-.Lfunc_begin67       #   Call between .Lfunc_begin67 and .Ltmp1448
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1448-.Lfunc_begin67       # >> Call Site 2 <<
	.uleb128 .Ltmp1449-.Ltmp1448            #   Call between .Ltmp1448 and .Ltmp1449
	.uleb128 .Ltmp1450-.Lfunc_begin67       #     jumps to .Ltmp1450
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1451-.Lfunc_begin67       # >> Call Site 3 <<
	.uleb128 .Ltmp1452-.Ltmp1451            #   Call between .Ltmp1451 and .Ltmp1452
	.uleb128 .Ltmp1453-.Lfunc_begin67       #     jumps to .Ltmp1453
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1454-.Lfunc_begin67       # >> Call Site 4 <<
	.uleb128 .Ltmp1455-.Ltmp1454            #   Call between .Ltmp1454 and .Ltmp1455
	.uleb128 .Ltmp1456-.Lfunc_begin67       #     jumps to .Ltmp1456
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1472-.Lfunc_begin67       # >> Call Site 5 <<
	.uleb128 .Ltmp1475-.Ltmp1472            #   Call between .Ltmp1472 and .Ltmp1475
	.uleb128 .Ltmp1476-.Lfunc_begin67       #     jumps to .Ltmp1476
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1475-.Lfunc_begin67       # >> Call Site 6 <<
	.uleb128 .Ltmp1457-.Ltmp1475            #   Call between .Ltmp1475 and .Ltmp1457
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1457-.Lfunc_begin67       # >> Call Site 7 <<
	.uleb128 .Ltmp1470-.Ltmp1457            #   Call between .Ltmp1457 and .Ltmp1470
	.uleb128 .Ltmp1471-.Lfunc_begin67       #     jumps to .Ltmp1471
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1470-.Lfunc_begin67       # >> Call Site 8 <<
	.uleb128 .Lfunc_end67-.Ltmp1470         #   Call between .Ltmp1470 and .Lfunc_end67
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end67:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z54benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint64_t_RN9benchmark5StateE # -- Begin function _Z54benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint64_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z54benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint64_t_RN9benchmark5StateE,@function
_Z54benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint64_t_RN9benchmark5StateE: # @_Z54benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint64_t_RN9benchmark5StateE
.Lfunc_begin68:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception68
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$s1, $a0
	lu12i.w	$a0, 9
	ori	$s4, $a0, 3136
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp1477:
	lu12i.w	$a0, 19
	ori	$s3, $a0, 2176
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1478:
# %bb.1:
	move	$s2, $a0
	st.d	$a0, $sp, 8
.Ltmp1480:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1481:
# %bb.2:
	move	$s0, $a0
	move	$s6, $zero
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s5, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB68_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp1483:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s5
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1484:
# %bb.4:                                # %.noexc8
                                        #   in Loop: Header=BB68_3 Depth=1
	stx.w	$a0, $fp, $s6
	addi.d	$s6, $s6, 4
	bne	$s6, $s4, .LBB68_3
# %bb.5:                                # %vector.ph
	move	$a0, $zero
	vrepli.b	$vr0, 0
	move	$a1, $s0
	.p2align	4, , 16
.LBB68_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ldx.d	$a2, $fp, $a0
	vinsgr2vr.d	$vr1, $a2, 0
	vilvl.w	$vr1, $vr0, $vr1
	vst	$vr1, $a1, 0
	addi.d	$a0, $a0, 8
	addi.d	$a1, $a1, 16
	bne	$a0, $s4, .LBB68_6
# %bb.7:                                # %vector.body83.preheader
	move	$a0, $zero
	addi.d	$a1, $s2, 32
	.p2align	4, , 16
.LBB68_8:                               # %vector.body83
                                        # =>This Inner Loop Header: Depth=1
	vldx	$vr0, $fp, $a0
	add.d	$a2, $fp, $a0
	vld	$vr1, $a2, 16
	vpickve2gr.w	$a2, $vr0, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr2, $a2, 0
	vpickve2gr.w	$a2, $vr0, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr2, $a2, 1
	vpickve2gr.w	$a2, $vr0, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr2, $a2, 2
	vpickve2gr.w	$a2, $vr0, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr2, $a2, 3
	vpickve2gr.w	$a2, $vr1, 0
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr0, $a2, 0
	vpickve2gr.w	$a2, $vr1, 1
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr0, $a2, 1
	vpickve2gr.w	$a2, $vr1, 2
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr0, $a2, 2
	vpickve2gr.w	$a2, $vr1, 3
	bstrpick.d	$a2, $a2, 31, 0
	xvinsgr2vr.d	$xr0, $a2, 3
	xvst	$xr2, $a1, -32
	xvst	$xr0, $a1, 0
	addi.d	$a0, $a0, 32
	addi.d	$a1, $a1, 64
	bne	$a0, $s4, .LBB68_8
# %bb.9:                                # %_ZL20truncOrZextVecInLoopIjmEvPKT_PT0_i.exit.preheader.preheader
	move	$s4, $zero
	move	$s5, $fp
	.p2align	4, , 16
.LBB68_10:                              # %_ZL20truncOrZextVecInLoopIjmEvPKT_PT0_i.exit.preheader
                                        # =>This Inner Loop Header: Depth=1
	ldx.d	$a0, $s2, $s4
	ldx.d	$a1, $s0, $s4
	bne	$a0, $a1, .LBB68_23
# %bb.11:                               # %_ZL20truncOrZextVecInLoopIjmEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB68_10 Depth=1
	addi.d	$s4, $s4, 8
	addi.d	$s5, $s5, 4
	bne	$s4, $s3, .LBB68_10
# %bb.12:
	ld.w	$s3, $s1, 28
	ld.d	$s2, $s1, 16
.Ltmp1501:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1502:
# %bb.13:                               # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s3, .LBB68_19
# %bb.14:                               # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s2, .LBB68_19
# %bb.15:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 16
	addi.d	$a1, $sp, 8
	lu12i.w	$a2, 2
	ori	$a2, $a2, 1808
	.p2align	4, , 16
.LBB68_16:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_17 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a3, $sp, 8
	addi.d	$a3, $a3, 32
	move	$a4, $a0
	move	$a5, $a2
	.p2align	4, , 16
.LBB68_17:                              # %vector.body91
                                        #   Parent Loop BB68_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr0, $a4, -16
	vld	$vr1, $a4, 0
	vpickve2gr.w	$a6, $vr0, 0
	bstrpick.d	$a6, $a6, 31, 0
	xvinsgr2vr.d	$xr2, $a6, 0
	vpickve2gr.w	$a6, $vr0, 1
	bstrpick.d	$a6, $a6, 31, 0
	xvinsgr2vr.d	$xr2, $a6, 1
	vpickve2gr.w	$a6, $vr0, 2
	bstrpick.d	$a6, $a6, 31, 0
	xvinsgr2vr.d	$xr2, $a6, 2
	vpickve2gr.w	$a6, $vr0, 3
	bstrpick.d	$a6, $a6, 31, 0
	xvinsgr2vr.d	$xr2, $a6, 3
	vpickve2gr.w	$a6, $vr1, 0
	bstrpick.d	$a6, $a6, 31, 0
	xvinsgr2vr.d	$xr0, $a6, 0
	vpickve2gr.w	$a6, $vr1, 1
	bstrpick.d	$a6, $a6, 31, 0
	xvinsgr2vr.d	$xr0, $a6, 1
	vpickve2gr.w	$a6, $vr1, 2
	bstrpick.d	$a6, $a6, 31, 0
	xvinsgr2vr.d	$xr0, $a6, 2
	vpickve2gr.w	$a6, $vr1, 3
	bstrpick.d	$a6, $a6, 31, 0
	xvinsgr2vr.d	$xr0, $a6, 3
	xvst	$xr2, $a3, -32
	xvst	$xr0, $a3, 0
	addi.d	$a5, $a5, -8
	addi.d	$a3, $a3, 64
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB68_17
# %bb.18:                               # %_ZL20truncOrZextVecInLoopIjmEvPKT_PT0_i.exit28
                                        #   in Loop: Header=BB68_16 Depth=1
	addi.d	$s2, $s2, -1
	bnez	$s2, .LBB68_16
.LBB68_19:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1503:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1504:
# %bb.20:                               # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit36
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 8
	beqz	$a0, .LBB68_22
# %bb.21:                               # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i38
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB68_22:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit42
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.LBB68_23:
.Ltmp1486:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcalau12i	$a1, %pc_hi20(.L.str.146)
	addi.d	$a1, $a1, %pc_lo12(.L.str.146)
	ori	$a2, $zero, 34
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1487:
# %bb.24:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	ld.wu	$a1, $s5, 0
.Ltmp1488:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cerr)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cerr)
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1489:
# %bb.25:                               # %_ZNSolsEj.exit
.Ltmp1490:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a1, $a0, %pc_lo12(.L.str.147)
	ori	$a2, $zero, 19
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1491:
# %bb.26:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	ldx.d	$a1, $s2, $s4
.Ltmp1492:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1493:
# %bb.27:                               # %_ZNSolsEm.exit
.Ltmp1494:
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a1, $a0, %pc_lo12(.L.str.148)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.Ltmp1495:
# %bb.28:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit21
	ldx.d	$a1, $s0, $s4
.Ltmp1496:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
.Ltmp1497:
# %bb.29:                               # %_ZNSolsEm.exit23
.Ltmp1498:
	pcalau12i	$a1, %pc_hi20(.L.str.149)
	addi.d	$a1, $a1, %pc_lo12(.L.str.149)
	pcaddu18i	$ra, %call36(_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
	jirl	$ra, $ra, 0
.Ltmp1499:
# %bb.30:
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB68_31:                              # %.thread
.Ltmp1482:
	move	$s1, $a0
	b	.LBB68_37
.LBB68_32:
.Ltmp1479:
	move	$s1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB68_33:
.Ltmp1505:
	b	.LBB68_36
.LBB68_34:
.Ltmp1500:
	b	.LBB68_36
.LBB68_35:
.Ltmp1485:
.LBB68_36:
	move	$s1, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s2, $sp, 8
	beqz	$s2, .LBB68_38
.LBB68_37:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i31
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB68_38:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end68:
	.size	_Z54benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint64_t_RN9benchmark5StateE, .Lfunc_end68-_Z54benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint64_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table68:
.Lexception68:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end68-.Lcst_begin68
.Lcst_begin68:
	.uleb128 .Lfunc_begin68-.Lfunc_begin68  # >> Call Site 1 <<
	.uleb128 .Ltmp1477-.Lfunc_begin68       #   Call between .Lfunc_begin68 and .Ltmp1477
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1477-.Lfunc_begin68       # >> Call Site 2 <<
	.uleb128 .Ltmp1478-.Ltmp1477            #   Call between .Ltmp1477 and .Ltmp1478
	.uleb128 .Ltmp1479-.Lfunc_begin68       #     jumps to .Ltmp1479
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1480-.Lfunc_begin68       # >> Call Site 3 <<
	.uleb128 .Ltmp1481-.Ltmp1480            #   Call between .Ltmp1480 and .Ltmp1481
	.uleb128 .Ltmp1482-.Lfunc_begin68       #     jumps to .Ltmp1482
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1483-.Lfunc_begin68       # >> Call Site 4 <<
	.uleb128 .Ltmp1484-.Ltmp1483            #   Call between .Ltmp1483 and .Ltmp1484
	.uleb128 .Ltmp1485-.Lfunc_begin68       #     jumps to .Ltmp1485
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1501-.Lfunc_begin68       # >> Call Site 5 <<
	.uleb128 .Ltmp1504-.Ltmp1501            #   Call between .Ltmp1501 and .Ltmp1504
	.uleb128 .Ltmp1505-.Lfunc_begin68       #     jumps to .Ltmp1505
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1504-.Lfunc_begin68       # >> Call Site 6 <<
	.uleb128 .Ltmp1486-.Ltmp1504            #   Call between .Ltmp1504 and .Ltmp1486
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1486-.Lfunc_begin68       # >> Call Site 7 <<
	.uleb128 .Ltmp1499-.Ltmp1486            #   Call between .Ltmp1486 and .Ltmp1499
	.uleb128 .Ltmp1500-.Lfunc_begin68       #     jumps to .Ltmp1500
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1499-.Lfunc_begin68       # >> Call Site 8 <<
	.uleb128 .Lfunc_end68-.Ltmp1499         #   Call between .Ltmp1499 and .Lfunc_end68
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end68:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint64_t_RN9benchmark5StateE
.LCPI69_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint64_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint64_t_RN9benchmark5StateE,@function
_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint64_t_RN9benchmark5StateE: # @_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint64_t_RN9benchmark5StateE
.Lfunc_begin69:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception69
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$s0, $a0
	lu12i.w	$s4, 9
	ori	$s3, $s4, 3136
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp1506:
	lu12i.w	$s6, 19
	ori	$s2, $s6, 2176
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1507:
# %bb.1:
	move	$s1, $a0
	move	$s7, $zero
	ori	$a0, $s4, 3072
	add.d	$s5, $fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB69_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp1509:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1510:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB69_2 Depth=1
	stx.w	$a0, $fp, $s7
	addi.d	$s7, $s7, 4
	bne	$s7, $s3, .LBB69_2
# %bb.4:
	pcalau12i	$a0, %pc_hi20(.LCPI69_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI69_0)
	move	$s4, $zero
	vst	$vr0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s3, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB69_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp1512:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s3
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1513:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB69_5 Depth=1
	stx.d	$a0, $s1, $s4
	addi.d	$s4, $s4, 8
	bne	$s4, $s2, .LBB69_5
# %bb.7:
	ld.w	$s2, $s0, 28
	ld.d	$s1, $s0, 16
.Ltmp1515:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1516:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s2, .LBB69_14
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s1, .LBB69_14
# %bb.10:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 64
	addi.d	$a1, $sp, 8
	ori	$a2, $s6, 2048
	lu12i.w	$a3, 2
	ori	$a3, $a3, 1792
	.p2align	4, , 16
.LBB69_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_12 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a5, $sp, 8
	add.d	$a4, $a5, $a2
	addi.d	$a5, $a5, 128
	move	$a6, $a0
	move	$a7, $a3
	.p2align	4, , 16
.LBB69_12:                              # %vector.body
                                        #   Parent Loop BB69_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr3, $a6, -64
	xvld	$xr6, $a6, -32
	xvld	$xr4, $a6, 0
	xvld	$xr1, $a6, 32
	xvpermi.q	$xr2, $xr3, 1
	vpickve2gr.w	$t0, $vr2, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr0, $t0, 0
	vpickve2gr.w	$t0, $vr2, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr0, $t0, 1
	vpickve2gr.w	$t0, $vr2, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr0, $t0, 2
	vpickve2gr.w	$t0, $vr2, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr0, $t0, 3
	vpickve2gr.w	$t0, $vr3, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr2, $t0, 0
	vpickve2gr.w	$t0, $vr3, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr2, $t0, 1
	vpickve2gr.w	$t0, $vr3, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr2, $t0, 2
	vpickve2gr.w	$t0, $vr3, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr2, $t0, 3
	xvpermi.q	$xr5, $xr6, 1
	vpickve2gr.w	$t0, $vr5, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr3, $t0, 0
	vpickve2gr.w	$t0, $vr5, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr3, $t0, 1
	vpickve2gr.w	$t0, $vr5, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr3, $t0, 2
	vpickve2gr.w	$t0, $vr5, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr3, $t0, 3
	vpickve2gr.w	$t0, $vr6, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr5, $t0, 0
	vpickve2gr.w	$t0, $vr6, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr5, $t0, 1
	vpickve2gr.w	$t0, $vr6, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr5, $t0, 2
	vpickve2gr.w	$t0, $vr6, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr5, $t0, 3
	xvpermi.q	$xr7, $xr4, 1
	vpickve2gr.w	$t0, $vr7, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr6, $t0, 0
	vpickve2gr.w	$t0, $vr7, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr6, $t0, 1
	vpickve2gr.w	$t0, $vr7, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr6, $t0, 2
	vpickve2gr.w	$t0, $vr7, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr6, $t0, 3
	vpickve2gr.w	$t0, $vr4, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr7, $t0, 0
	vpickve2gr.w	$t0, $vr4, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr7, $t0, 1
	vpickve2gr.w	$t0, $vr4, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr7, $t0, 2
	vpickve2gr.w	$t0, $vr4, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr7, $t0, 3
	xvpermi.q	$xr4, $xr1, 1
	vpickve2gr.w	$t0, $vr4, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr8, $t0, 0
	vpickve2gr.w	$t0, $vr4, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr8, $t0, 1
	vpickve2gr.w	$t0, $vr4, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr8, $t0, 2
	vpickve2gr.w	$t0, $vr4, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr8, $t0, 3
	vpickve2gr.w	$t0, $vr1, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr4, $t0, 0
	vpickve2gr.w	$t0, $vr1, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr4, $t0, 1
	vpickve2gr.w	$t0, $vr1, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr4, $t0, 2
	vpickve2gr.w	$t0, $vr1, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr4, $t0, 3
	xvld	$xr1, $a5, -128
	xvld	$xr9, $a5, -96
	xvld	$xr10, $a5, -64
	xvld	$xr11, $a5, -32
	xvld	$xr12, $a5, 0
	xvld	$xr13, $a5, 32
	xvld	$xr14, $a5, 64
	xvld	$xr15, $a5, 96
	xvadd.d	$xr0, $xr9, $xr0
	xvadd.d	$xr1, $xr1, $xr2
	xvadd.d	$xr2, $xr11, $xr3
	xvadd.d	$xr3, $xr10, $xr5
	xvadd.d	$xr5, $xr13, $xr6
	xvadd.d	$xr6, $xr12, $xr7
	xvadd.d	$xr7, $xr15, $xr8
	xvadd.d	$xr4, $xr14, $xr4
	xvst	$xr1, $a5, -128
	xvst	$xr0, $a5, -96
	xvst	$xr3, $a5, -64
	xvst	$xr2, $a5, -32
	xvst	$xr6, $a5, 0
	xvst	$xr5, $a5, 32
	xvst	$xr4, $a5, 64
	xvst	$xr7, $a5, 96
	addi.d	$a7, $a7, -32
	addi.d	$a6, $a6, 128
	addi.d	$a5, $a5, 256
	bnez	$a7, .LBB69_12
# %bb.13:                               # %.lr.ph.i
                                        #   in Loop: Header=BB69_11 Depth=1
	ld.wu	$a5, $s5, 0
	ld.d	$a6, $a4, 0
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 0
	ld.wu	$a5, $s5, 4
	ld.d	$a6, $a4, 8
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 8
	ld.wu	$a5, $s5, 8
	ld.d	$a6, $a4, 16
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 16
	ld.wu	$a5, $s5, 12
	ld.d	$a6, $a4, 24
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 24
	ld.wu	$a5, $s5, 16
	ld.d	$a6, $a4, 32
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 32
	ld.wu	$a5, $s5, 20
	ld.d	$a6, $a4, 40
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 40
	ld.wu	$a5, $s5, 24
	ld.d	$a6, $a4, 48
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 48
	ld.wu	$a5, $s5, 28
	ld.d	$a6, $a4, 56
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 56
	ld.wu	$a5, $s5, 32
	ld.d	$a6, $a4, 64
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 64
	ld.wu	$a5, $s5, 36
	ld.d	$a6, $a4, 72
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 72
	ld.wu	$a5, $s5, 40
	ld.d	$a6, $a4, 80
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 80
	ld.wu	$a5, $s5, 44
	ld.d	$a6, $a4, 88
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 88
	ld.wu	$a5, $s5, 48
	ld.d	$a6, $a4, 96
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 96
	ld.wu	$a5, $s5, 52
	ld.d	$a6, $a4, 104
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 104
	ld.wu	$a5, $s5, 56
	ld.d	$a6, $a4, 112
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 112
	ld.wu	$a5, $s5, 60
	ld.d	$a6, $a4, 120
	add.d	$a5, $a6, $a5
	addi.d	$s1, $s1, -1
	st.d	$a5, $a4, 120
	bnez	$s1, .LBB69_11
.LBB69_14:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1517:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1518:
# %bb.15:                               # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 8
	beqz	$a0, .LBB69_17
# %bb.16:                               # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB69_17:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB69_18:
.Ltmp1508:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB69_19:
.Ltmp1519:
	ld.d	$s1, $sp, 8
	move	$s0, $a0
	bnez	$s1, .LBB69_23
	b	.LBB69_24
.LBB69_20:                              # %.loopexit
.Ltmp1514:
	b	.LBB69_22
.LBB69_21:                              # %.loopexit.split-lp
.Ltmp1511:
.LBB69_22:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB69_23:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB69_24:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end69:
	.size	_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint64_t_RN9benchmark5StateE, .Lfunc_end69-_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint64_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table69:
.Lexception69:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end69-.Lcst_begin69
.Lcst_begin69:
	.uleb128 .Lfunc_begin69-.Lfunc_begin69  # >> Call Site 1 <<
	.uleb128 .Ltmp1506-.Lfunc_begin69       #   Call between .Lfunc_begin69 and .Ltmp1506
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1506-.Lfunc_begin69       # >> Call Site 2 <<
	.uleb128 .Ltmp1507-.Ltmp1506            #   Call between .Ltmp1506 and .Ltmp1507
	.uleb128 .Ltmp1508-.Lfunc_begin69       #     jumps to .Ltmp1508
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1509-.Lfunc_begin69       # >> Call Site 3 <<
	.uleb128 .Ltmp1510-.Ltmp1509            #   Call between .Ltmp1509 and .Ltmp1510
	.uleb128 .Ltmp1511-.Lfunc_begin69       #     jumps to .Ltmp1511
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1512-.Lfunc_begin69       # >> Call Site 4 <<
	.uleb128 .Ltmp1513-.Ltmp1512            #   Call between .Ltmp1512 and .Ltmp1513
	.uleb128 .Ltmp1514-.Lfunc_begin69       #     jumps to .Ltmp1514
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1515-.Lfunc_begin69       # >> Call Site 5 <<
	.uleb128 .Ltmp1518-.Ltmp1515            #   Call between .Ltmp1515 and .Ltmp1518
	.uleb128 .Ltmp1519-.Lfunc_begin69       #     jumps to .Ltmp1519
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1518-.Lfunc_begin69       # >> Call Site 6 <<
	.uleb128 .Lfunc_end69-.Ltmp1518         #   Call between .Ltmp1518 and .Lfunc_end69
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end69:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint64_t_RN9benchmark5StateE
.LCPI70_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint64_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint64_t_RN9benchmark5StateE,@function
_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint64_t_RN9benchmark5StateE: # @_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint64_t_RN9benchmark5StateE
.Lfunc_begin70:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception70
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs6, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs7, $sp, 32                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	.cfi_offset 61, -128
	.cfi_offset 62, -136
	.cfi_offset 63, -144
	move	$s0, $a0
	lu12i.w	$s4, 9
	ori	$s3, $s4, 3136
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp1520:
	lu12i.w	$s6, 19
	ori	$s2, $s6, 2176
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1521:
# %bb.1:
	move	$s1, $a0
	move	$s7, $zero
	ori	$a0, $s4, 3072
	add.d	$s5, $fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB70_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp1523:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1524:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB70_2 Depth=1
	stx.w	$a0, $fp, $s7
	addi.d	$s7, $s7, 4
	bne	$s7, $s3, .LBB70_2
# %bb.4:
	pcalau12i	$a0, %pc_hi20(.LCPI70_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI70_0)
	move	$s4, $zero
	vst	$vr0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s3, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB70_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp1526:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s3
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1527:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB70_5 Depth=1
	stx.d	$a0, $s1, $s4
	addi.d	$s4, $s4, 8
	bne	$s4, $s2, .LBB70_5
# %bb.7:
	ld.w	$s2, $s0, 28
	ld.d	$s1, $s0, 16
.Ltmp1529:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1530:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s2, .LBB70_14
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s1, .LBB70_14
# %bb.10:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 128
	addi.d	$a1, $sp, 8
	ori	$a2, $s6, 2048
	lu12i.w	$a3, 2
	ori	$a3, $a3, 1792
	.p2align	4, , 16
.LBB70_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_12 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a5, $sp, 8
	add.d	$a4, $a5, $a2
	addi.d	$a5, $a5, 256
	move	$a6, $a0
	move	$a7, $a3
	.p2align	4, , 16
.LBB70_12:                              # %vector.body
                                        #   Parent Loop BB70_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xvld	$xr6, $a6, -128
	xvld	$xr5, $a6, -96
	xvld	$xr12, $a6, -64
	xvld	$xr11, $a6, -32
	xvld	$xr7, $a6, 0
	xvld	$xr10, $a6, 32
	xvld	$xr1, $a6, 64
	xvld	$xr4, $a6, 96
	xvpermi.q	$xr2, $xr5, 1
	vpickve2gr.w	$t0, $vr2, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr0, $t0, 0
	vpickve2gr.w	$t0, $vr2, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr0, $t0, 1
	vpickve2gr.w	$t0, $vr2, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr0, $t0, 2
	vpickve2gr.w	$t0, $vr2, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr0, $t0, 3
	xvpermi.q	$xr3, $xr6, 1
	vpickve2gr.w	$t0, $vr3, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr2, $t0, 0
	vpickve2gr.w	$t0, $vr3, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr2, $t0, 1
	vpickve2gr.w	$t0, $vr3, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr2, $t0, 2
	vpickve2gr.w	$t0, $vr3, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr2, $t0, 3
	vpickve2gr.w	$t0, $vr5, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr3, $t0, 0
	vpickve2gr.w	$t0, $vr5, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr3, $t0, 1
	vpickve2gr.w	$t0, $vr5, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr3, $t0, 2
	vpickve2gr.w	$t0, $vr5, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr3, $t0, 3
	vpickve2gr.w	$t0, $vr6, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr5, $t0, 0
	vpickve2gr.w	$t0, $vr6, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr5, $t0, 1
	vpickve2gr.w	$t0, $vr6, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr5, $t0, 2
	vpickve2gr.w	$t0, $vr6, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr5, $t0, 3
	xvpermi.q	$xr8, $xr11, 1
	vpickve2gr.w	$t0, $vr8, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr6, $t0, 0
	vpickve2gr.w	$t0, $vr8, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr6, $t0, 1
	vpickve2gr.w	$t0, $vr8, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr6, $t0, 2
	vpickve2gr.w	$t0, $vr8, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr6, $t0, 3
	xvpermi.q	$xr9, $xr12, 1
	vpickve2gr.w	$t0, $vr9, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr8, $t0, 0
	vpickve2gr.w	$t0, $vr9, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr8, $t0, 1
	vpickve2gr.w	$t0, $vr9, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr8, $t0, 2
	vpickve2gr.w	$t0, $vr9, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr8, $t0, 3
	vpickve2gr.w	$t0, $vr11, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr9, $t0, 0
	vpickve2gr.w	$t0, $vr11, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr9, $t0, 1
	vpickve2gr.w	$t0, $vr11, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr9, $t0, 2
	vpickve2gr.w	$t0, $vr11, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr9, $t0, 3
	vpickve2gr.w	$t0, $vr12, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr11, $t0, 0
	vpickve2gr.w	$t0, $vr12, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr11, $t0, 1
	vpickve2gr.w	$t0, $vr12, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr11, $t0, 2
	vpickve2gr.w	$t0, $vr12, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr11, $t0, 3
	xvpermi.q	$xr13, $xr10, 1
	vpickve2gr.w	$t0, $vr13, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr12, $t0, 0
	vpickve2gr.w	$t0, $vr13, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr12, $t0, 1
	vpickve2gr.w	$t0, $vr13, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr12, $t0, 2
	vpickve2gr.w	$t0, $vr13, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr12, $t0, 3
	xvpermi.q	$xr14, $xr7, 1
	vpickve2gr.w	$t0, $vr14, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr13, $t0, 0
	vpickve2gr.w	$t0, $vr14, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr13, $t0, 1
	vpickve2gr.w	$t0, $vr14, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr13, $t0, 2
	vpickve2gr.w	$t0, $vr14, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr13, $t0, 3
	vpickve2gr.w	$t0, $vr10, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr14, $t0, 0
	vpickve2gr.w	$t0, $vr10, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr14, $t0, 1
	vpickve2gr.w	$t0, $vr10, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr14, $t0, 2
	vpickve2gr.w	$t0, $vr10, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr14, $t0, 3
	vpickve2gr.w	$t0, $vr7, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr10, $t0, 0
	vpickve2gr.w	$t0, $vr7, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr10, $t0, 1
	vpickve2gr.w	$t0, $vr7, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr10, $t0, 2
	vpickve2gr.w	$t0, $vr7, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr10, $t0, 3
	xvpermi.q	$xr15, $xr4, 1
	vpickve2gr.w	$t0, $vr15, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr7, $t0, 0
	vpickve2gr.w	$t0, $vr15, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr7, $t0, 1
	vpickve2gr.w	$t0, $vr15, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr7, $t0, 2
	vpickve2gr.w	$t0, $vr15, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr7, $t0, 3
	xvpermi.q	$xr16, $xr1, 1
	vpickve2gr.w	$t0, $vr16, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr15, $t0, 0
	vpickve2gr.w	$t0, $vr16, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr15, $t0, 1
	vpickve2gr.w	$t0, $vr16, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr15, $t0, 2
	vpickve2gr.w	$t0, $vr16, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr15, $t0, 3
	vpickve2gr.w	$t0, $vr4, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr16, $t0, 0
	vpickve2gr.w	$t0, $vr4, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr16, $t0, 1
	vpickve2gr.w	$t0, $vr4, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr16, $t0, 2
	vpickve2gr.w	$t0, $vr4, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr16, $t0, 3
	vpickve2gr.w	$t0, $vr1, 0
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr4, $t0, 0
	vpickve2gr.w	$t0, $vr1, 1
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr4, $t0, 1
	vpickve2gr.w	$t0, $vr1, 2
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr4, $t0, 2
	vpickve2gr.w	$t0, $vr1, 3
	bstrpick.d	$t0, $t0, 31, 0
	xvinsgr2vr.d	$xr4, $t0, 3
	xvld	$xr1, $a5, -192
	xvld	$xr17, $a5, -256
	xvld	$xr18, $a5, -160
	xvld	$xr19, $a5, -224
	xvld	$xr20, $a5, -64
	xvld	$xr21, $a5, -128
	xvld	$xr22, $a5, -32
	xvld	$xr23, $a5, -96
	xvld	$xr24, $a5, 64
	xvld	$xr25, $a5, 0
	xvld	$xr26, $a5, 96
	xvld	$xr27, $a5, 32
	xvld	$xr28, $a5, 192
	xvld	$xr29, $a5, 128
	xvld	$xr30, $a5, 224
	xvld	$xr31, $a5, 160
	xvadd.d	$xr2, $xr19, $xr2
	xvadd.d	$xr0, $xr18, $xr0
	xvadd.d	$xr5, $xr17, $xr5
	xvadd.d	$xr1, $xr1, $xr3
	xvadd.d	$xr3, $xr23, $xr8
	xvadd.d	$xr6, $xr22, $xr6
	xvadd.d	$xr8, $xr21, $xr11
	xvadd.d	$xr9, $xr20, $xr9
	xvadd.d	$xr11, $xr27, $xr13
	xvadd.d	$xr12, $xr26, $xr12
	xvadd.d	$xr10, $xr25, $xr10
	xvadd.d	$xr13, $xr24, $xr14
	xvadd.d	$xr14, $xr31, $xr15
	xvadd.d	$xr7, $xr30, $xr7
	xvadd.d	$xr4, $xr29, $xr4
	xvadd.d	$xr15, $xr28, $xr16
	xvst	$xr1, $a5, -192
	xvst	$xr5, $a5, -256
	xvst	$xr0, $a5, -160
	xvst	$xr2, $a5, -224
	xvst	$xr9, $a5, -64
	xvst	$xr8, $a5, -128
	xvst	$xr6, $a5, -32
	xvst	$xr3, $a5, -96
	xvst	$xr13, $a5, 64
	xvst	$xr10, $a5, 0
	xvst	$xr12, $a5, 96
	xvst	$xr11, $a5, 32
	xvst	$xr15, $a5, 192
	xvst	$xr4, $a5, 128
	xvst	$xr7, $a5, 224
	xvst	$xr14, $a5, 160
	addi.d	$a7, $a7, -64
	addi.d	$a6, $a6, 256
	addi.d	$a5, $a5, 512
	bnez	$a7, .LBB70_12
# %bb.13:                               # %.lr.ph.i
                                        #   in Loop: Header=BB70_11 Depth=1
	ld.wu	$a5, $s5, 0
	ld.d	$a6, $a4, 0
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 0
	ld.wu	$a5, $s5, 4
	ld.d	$a6, $a4, 8
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 8
	ld.wu	$a5, $s5, 8
	ld.d	$a6, $a4, 16
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 16
	ld.wu	$a5, $s5, 12
	ld.d	$a6, $a4, 24
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 24
	ld.wu	$a5, $s5, 16
	ld.d	$a6, $a4, 32
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 32
	ld.wu	$a5, $s5, 20
	ld.d	$a6, $a4, 40
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 40
	ld.wu	$a5, $s5, 24
	ld.d	$a6, $a4, 48
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 48
	ld.wu	$a5, $s5, 28
	ld.d	$a6, $a4, 56
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 56
	ld.wu	$a5, $s5, 32
	ld.d	$a6, $a4, 64
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 64
	ld.wu	$a5, $s5, 36
	ld.d	$a6, $a4, 72
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 72
	ld.wu	$a5, $s5, 40
	ld.d	$a6, $a4, 80
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 80
	ld.wu	$a5, $s5, 44
	ld.d	$a6, $a4, 88
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 88
	ld.wu	$a5, $s5, 48
	ld.d	$a6, $a4, 96
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 96
	ld.wu	$a5, $s5, 52
	ld.d	$a6, $a4, 104
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 104
	ld.wu	$a5, $s5, 56
	ld.d	$a6, $a4, 112
	add.d	$a5, $a6, $a5
	st.d	$a5, $a4, 112
	ld.wu	$a5, $s5, 60
	ld.d	$a6, $a4, 120
	add.d	$a5, $a6, $a5
	addi.d	$s1, $s1, -1
	st.d	$a5, $a4, 120
	bnez	$s1, .LBB70_11
.LBB70_14:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1531:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1532:
# %bb.15:                               # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 8
	beqz	$a0, .LBB70_17
# %bb.16:                               # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB70_17:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	fld.d	$fs7, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs6, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs5, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 88                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB70_18:
.Ltmp1522:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB70_19:
.Ltmp1533:
	ld.d	$s1, $sp, 8
	move	$s0, $a0
	bnez	$s1, .LBB70_23
	b	.LBB70_24
.LBB70_20:                              # %.loopexit
.Ltmp1528:
	b	.LBB70_22
.LBB70_21:                              # %.loopexit.split-lp
.Ltmp1525:
.LBB70_22:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB70_23:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB70_24:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end70:
	.size	_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint64_t_RN9benchmark5StateE, .Lfunc_end70-_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint64_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table70:
.Lexception70:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end70-.Lcst_begin70
.Lcst_begin70:
	.uleb128 .Lfunc_begin70-.Lfunc_begin70  # >> Call Site 1 <<
	.uleb128 .Ltmp1520-.Lfunc_begin70       #   Call between .Lfunc_begin70 and .Ltmp1520
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1520-.Lfunc_begin70       # >> Call Site 2 <<
	.uleb128 .Ltmp1521-.Ltmp1520            #   Call between .Ltmp1520 and .Ltmp1521
	.uleb128 .Ltmp1522-.Lfunc_begin70       #     jumps to .Ltmp1522
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1523-.Lfunc_begin70       # >> Call Site 3 <<
	.uleb128 .Ltmp1524-.Ltmp1523            #   Call between .Ltmp1523 and .Ltmp1524
	.uleb128 .Ltmp1525-.Lfunc_begin70       #     jumps to .Ltmp1525
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1526-.Lfunc_begin70       # >> Call Site 4 <<
	.uleb128 .Ltmp1527-.Ltmp1526            #   Call between .Ltmp1526 and .Ltmp1527
	.uleb128 .Ltmp1528-.Lfunc_begin70       #     jumps to .Ltmp1528
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1529-.Lfunc_begin70       # >> Call Site 5 <<
	.uleb128 .Ltmp1532-.Ltmp1529            #   Call between .Ltmp1529 and .Ltmp1532
	.uleb128 .Ltmp1533-.Lfunc_begin70       #     jumps to .Ltmp1533
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1532-.Lfunc_begin70       # >> Call Site 6 <<
	.uleb128 .Lfunc_end70-.Ltmp1532         #   Call between .Ltmp1532 and .Lfunc_end70
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end70:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z61benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint64_t_RN9benchmark5StateE
.LCPI71_0:
	.dword	0                               # 0x0
	.dword	-1                              # 0xffffffffffffffff
	.text
	.globl	_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint64_t_RN9benchmark5StateE
	.p2align	5
	.type	_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint64_t_RN9benchmark5StateE,@function
_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint64_t_RN9benchmark5StateE: # @_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint64_t_RN9benchmark5StateE
.Lfunc_begin71:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception71
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	move	$s0, $a0
	lu12i.w	$a0, 9
	ori	$s3, $a0, 3136
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$fp, $a0
.Ltmp1534:
	lu12i.w	$a0, 19
	ori	$s2, $a0, 2176
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp1535:
# %bb.1:
	move	$s1, $a0
	move	$s5, $zero
	st.d	$a0, $sp, 8
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s4, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB71_2:                               # =>This Inner Loop Header: Depth=1
.Ltmp1537:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1538:
# %bb.3:                                # %.noexc7
                                        #   in Loop: Header=BB71_2 Depth=1
	stx.w	$a0, $fp, $s5
	addi.d	$s5, $s5, 4
	bne	$s5, $s3, .LBB71_2
# %bb.4:
	pcalau12i	$a0, %pc_hi20(.LCPI71_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI71_0)
	move	$s4, $zero
	vst	$vr0, $sp, 16
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$s3, $a0, %pc_lo12(_ZL3rng)
	.p2align	4, , 16
.LBB71_5:                               # =>This Inner Loop Header: Depth=1
.Ltmp1540:
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $s3
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
.Ltmp1541:
# %bb.6:                                # %.noexc11
                                        #   in Loop: Header=BB71_5 Depth=1
	stx.d	$a0, $s1, $s4
	addi.d	$s4, $s4, 8
	bne	$s4, $s2, .LBB71_5
# %bb.7:
	ld.w	$s2, $s0, 28
	ld.d	$s1, $s0, 16
.Ltmp1543:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1544:
# %bb.8:                                # %_ZN9benchmark5State3endEv.exit.preheader
	bnez	$s2, .LBB71_14
# %bb.9:                                # %_ZN9benchmark5State3endEv.exit.preheader
	beqz	$s1, .LBB71_14
# %bb.10:                               # %.lr.ph.preheader
	addi.d	$a0, $fp, 16
	addi.d	$a1, $sp, 8
	lu12i.w	$a2, 2
	ori	$a2, $a2, 1808
	.p2align	4, , 16
.LBB71_11:                              # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_12 Depth 2
	#APP
	#NO_APP
	#MEMBARRIER
	ld.d	$a3, $sp, 8
	addi.d	$a3, $a3, 32
	move	$a4, $a0
	move	$a5, $a2
	.p2align	4, , 16
.LBB71_12:                              # %vector.body
                                        #   Parent Loop BB71_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr0, $a4, -16
	vld	$vr1, $a4, 0
	vpickve2gr.w	$a6, $vr0, 0
	bstrpick.d	$a6, $a6, 31, 0
	xvinsgr2vr.d	$xr2, $a6, 0
	vpickve2gr.w	$a6, $vr0, 1
	bstrpick.d	$a6, $a6, 31, 0
	xvinsgr2vr.d	$xr2, $a6, 1
	vpickve2gr.w	$a6, $vr0, 2
	bstrpick.d	$a6, $a6, 31, 0
	xvinsgr2vr.d	$xr2, $a6, 2
	vpickve2gr.w	$a6, $vr0, 3
	bstrpick.d	$a6, $a6, 31, 0
	xvinsgr2vr.d	$xr2, $a6, 3
	vpickve2gr.w	$a6, $vr1, 0
	bstrpick.d	$a6, $a6, 31, 0
	xvinsgr2vr.d	$xr0, $a6, 0
	vpickve2gr.w	$a6, $vr1, 1
	bstrpick.d	$a6, $a6, 31, 0
	xvinsgr2vr.d	$xr0, $a6, 1
	vpickve2gr.w	$a6, $vr1, 2
	bstrpick.d	$a6, $a6, 31, 0
	xvinsgr2vr.d	$xr0, $a6, 2
	vpickve2gr.w	$a6, $vr1, 3
	xvld	$xr1, $a3, -32
	xvld	$xr3, $a3, 0
	bstrpick.d	$a6, $a6, 31, 0
	xvinsgr2vr.d	$xr0, $a6, 3
	xvadd.d	$xr1, $xr1, $xr2
	xvadd.d	$xr0, $xr3, $xr0
	xvst	$xr1, $a3, -32
	xvst	$xr0, $a3, 0
	addi.d	$a5, $a5, -8
	addi.d	$a3, $a3, 64
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB71_12
# %bb.13:                               # %_ZL27truncOrZextVecWithAddInLoopIjmEvPKT_PT0_i.exit
                                        #   in Loop: Header=BB71_11 Depth=1
	addi.d	$s1, $s1, -1
	bnez	$s1, .LBB71_11
.LBB71_14:                              # %_ZN9benchmark5State3endEv.exit._crit_edge
.Ltmp1545:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jirl	$ra, $ra, 0
.Ltmp1546:
# %bb.15:                               # %_ZNSt10unique_ptrIA_mSt14default_deleteIS0_EED2Ev.exit22
	ld.d	$a0, $sp, 8
	beqz	$a0, .LBB71_17
# %bb.16:                               # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i24
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB71_17:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit28
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.LBB71_18:
.Ltmp1536:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB71_19:
.Ltmp1547:
	ld.d	$s1, $sp, 8
	move	$s0, $a0
	bnez	$s1, .LBB71_23
	b	.LBB71_24
.LBB71_20:                              # %.loopexit
.Ltmp1542:
	b	.LBB71_22
.LBB71_21:                              # %.loopexit.split-lp
.Ltmp1539:
.LBB71_22:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$s0, $a0
.LBB71_23:                              # %_ZNKSt14default_deleteIA_mEclImEENSt9enable_ifIXsr14is_convertibleIPA_T_PS0_EE5valueEvE4typeEPS4_.exit.i17
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB71_24:                              # %_ZNSt10unique_ptrIA_jSt14default_deleteIS0_EED2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end71:
	.size	_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint64_t_RN9benchmark5StateE, .Lfunc_end71-_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint64_t_RN9benchmark5StateE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table71:
.Lexception71:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end71-.Lcst_begin71
.Lcst_begin71:
	.uleb128 .Lfunc_begin71-.Lfunc_begin71  # >> Call Site 1 <<
	.uleb128 .Ltmp1534-.Lfunc_begin71       #   Call between .Lfunc_begin71 and .Ltmp1534
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1534-.Lfunc_begin71       # >> Call Site 2 <<
	.uleb128 .Ltmp1535-.Ltmp1534            #   Call between .Ltmp1534 and .Ltmp1535
	.uleb128 .Ltmp1536-.Lfunc_begin71       #     jumps to .Ltmp1536
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1537-.Lfunc_begin71       # >> Call Site 3 <<
	.uleb128 .Ltmp1538-.Ltmp1537            #   Call between .Ltmp1537 and .Ltmp1538
	.uleb128 .Ltmp1539-.Lfunc_begin71       #     jumps to .Ltmp1539
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1540-.Lfunc_begin71       # >> Call Site 4 <<
	.uleb128 .Ltmp1541-.Ltmp1540            #   Call between .Ltmp1540 and .Ltmp1541
	.uleb128 .Ltmp1542-.Lfunc_begin71       #     jumps to .Ltmp1542
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1543-.Lfunc_begin71       # >> Call Site 5 <<
	.uleb128 .Ltmp1546-.Ltmp1543            #   Call between .Ltmp1543 and .Ltmp1546
	.uleb128 .Ltmp1547-.Lfunc_begin71       #     jumps to .Ltmp1547
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1546-.Lfunc_begin71       # >> Call Site 6 <<
	.uleb128 .Lfunc_end71-.Ltmp1546         #   Call between .Ltmp1546 and .Lfunc_end71
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end71:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE,"axG",@progbits,_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE,comdat
	.weak	_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE # -- Begin function _ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE
	.p2align	5
	.type	_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE,@function
_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE: # @_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	ld.hu	$a2, $a2, 2
	ld.hu	$a3, $fp, 0
	sub.d	$s2, $a2, $a3
	addi.w	$a2, $zero, -1
	lu32i.d	$a2, 0
	move	$s0, $a1
	bgeu	$s2, $a2, .LBB72_5
# %bb.1:
	addi.d	$s1, $s2, 1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv)
	jirl	$ra, $ra, 0
	mul.d	$a0, $a0, $s1
	addi.w	$a1, $a0, 0
	bltu	$s2, $a1, .LBB72_4
# %bb.2:
	nor	$a2, $s2, $zero
	mod.wu	$s2, $a2, $s1
	bgeu	$a1, $s2, .LBB72_4
	.p2align	4, , 16
.LBB72_3:                               # %.lr.ph.i
                                        # =>This Inner Loop Header: Depth=1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv)
	jirl	$ra, $ra, 0
	mul.d	$a0, $a0, $s1
	addi.w	$a1, $a0, 0
	bltu	$a1, $s2, .LBB72_3
.LBB72_4:                               # %_ZNSt24uniform_int_distributionItE5_S_ndImSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEjEET1_RT0_S4_.exit
	srli.d	$a0, $a0, 32
	b	.LBB72_8
.LBB72_5:
	move	$s1, $a0
	lu12i.w	$s3, -16
	lu32i.d	$s3, 0
	.p2align	4, , 16
.LBB72_6:                               # =>This Inner Loop Header: Depth=1
	st.w	$s3, $sp, 4
	addi.d	$a2, $sp, 4
	move	$a0, $s1
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
	slli.d	$s4, $a0, 32
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv)
	jirl	$ra, $ra, 0
	add.d	$a0, $s4, $a0
	bltu	$s2, $a0, .LBB72_6
# %bb.7:                                #   in Loop: Header=BB72_6 Depth=1
	sltu	$a1, $a0, $s4
	bnez	$a1, .LBB72_6
.LBB72_8:                               # %.loopexit
	ld.h	$a1, $fp, 0
	add.d	$a0, $a1, $a0
	bstrpick.d	$a0, $a0, 15, 0
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.Lfunc_end72:
	.size	_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE, .Lfunc_end72-_ZNSt24uniform_int_distributionItEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEtRT_RKNS0_10param_typeE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv,"axG",@progbits,_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv,comdat
	.weak	_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv # -- Begin function _ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv
	.p2align	5
	.type	_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv,@function
_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv: # @_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv
	.cfi_startproc
# %bb.0:
	ldptr.d	$a2, $a0, 4992
	ori	$a1, $zero, 624
	bltu	$a2, $a1, .LBB73_6
# %bb.1:                                # %vector.ph
	ld.d	$a1, $a0, 0
	move	$a4, $zero
	xvinsgr2vr.d	$xr0, $a1, 0
	xvpermi.d	$xr0, $xr0, 68
	xvpackev.d	$xr0, $xr0, $xr0
	lu12i.w	$a2, -524288
	xvreplgr2vr.d	$xr1, $a2
	lu12i.w	$a1, 524287
	ori	$a3, $a1, 4094
	xvreplgr2vr.d	$xr2, $a3
	ori	$a5, $zero, 3176
	xvrepli.d	$xr3, 1
	xvrepli.b	$xr4, 0
	lu12i.w	$a1, -421749
	ori	$a1, $a1, 223
	lu32i.d	$a1, 0
	xvreplgr2vr.d	$xr5, $a1
	ori	$a6, $zero, 1792
	.p2align	4, , 16
.LBB73_2:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	xvori.b	$xr6, $xr0, 0
	add.d	$a7, $a0, $a4
	xvld	$xr0, $a7, 8
	xvpickve2gr.d	$t0, $xr6, 3
	xvinsgr2vr.d	$xr6, $t0, 0
	xvpickve2gr.d	$t0, $xr0, 0
	xvinsgr2vr.d	$xr6, $t0, 1
	xvpickve2gr.d	$t0, $xr0, 1
	xvinsgr2vr.d	$xr6, $t0, 2
	xvpickve2gr.d	$t0, $xr0, 2
	xvinsgr2vr.d	$xr6, $t0, 3
	xvand.v	$xr6, $xr6, $xr1
	xvldx	$xr7, $a7, $a5
	xvand.v	$xr8, $xr0, $xr2
	xvor.v	$xr6, $xr8, $xr6
	xvsrli.d	$xr6, $xr6, 1
	xvxor.v	$xr6, $xr6, $xr7
	xvand.v	$xr7, $xr0, $xr3
	xvseqi.d	$xr7, $xr7, 0
	xvbitsel.v	$xr7, $xr5, $xr4, $xr7
	xvxor.v	$xr6, $xr6, $xr7
	xvstx	$xr6, $a0, $a4
	addi.d	$a4, $a4, 32
	bne	$a4, $a6, .LBB73_2
# %bb.3:                                # %vector.ph11
	ld.d	$a4, $a0, 1800
	xvpickve2gr.d	$a5, $xr0, 3
	ldptr.d	$a6, $a0, 4968
	and	$a7, $a4, $a3
	bstrins.d	$a5, $a7, 30, 0
	srli.d	$a5, $a5, 1
	xor	$a5, $a5, $a6
	andi	$a6, $a4, 1
	sub.d	$a6, $zero, $a6
	and	$a6, $a6, $a1
	ld.d	$a7, $a0, 1808
	xor	$a5, $a5, $a6
	st.d	$a5, $a0, 1792
	ldptr.d	$a5, $a0, 4976
	and	$a6, $a7, $a3
	bstrins.d	$a4, $a6, 30, 0
	srli.d	$a4, $a4, 1
	xor	$a4, $a4, $a5
	andi	$a5, $a7, 1
	sub.d	$a5, $zero, $a5
	and	$a5, $a5, $a1
	ld.d	$a6, $a0, 1816
	xor	$a4, $a4, $a5
	st.d	$a4, $a0, 1800
	ldptr.d	$a4, $a0, 4984
	and	$a5, $a6, $a3
	bstrins.d	$a7, $a5, 30, 0
	srli.d	$a5, $a7, 1
	xor	$a4, $a5, $a4
	andi	$a5, $a6, 1
	sub.d	$a5, $zero, $a5
	and	$a5, $a5, $a1
	xor	$a4, $a4, $a5
	st.d	$a4, $a0, 1808
	vinsgr2vr.d	$vr0, $a6, 0
	vreplvei.d	$vr5, $vr0, 0
	lu12i.w	$a4, -1
	ori	$a4, $a4, 928
	lu12i.w	$a6, 1
	ori	$a5, $a6, 896
	vreplgr2vr.d	$vr0, $a2
	vreplgr2vr.d	$vr1, $a3
	ori	$a2, $zero, 3168
	vrepli.d	$vr2, 1
	vrepli.b	$vr3, 0
	vreplgr2vr.d	$vr4, $a1
	ori	$a3, $a6, 888
	.p2align	4, , 16
.LBB73_4:                               # %vector.body12
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a6, $a0, $a4
	vldx	$vr6, $a6, $a5
	vshuf4i.d	$vr5, $vr6, 9
	vand.v	$vr5, $vr5, $vr0
	vldx	$vr7, $a6, $a2
	vand.v	$vr8, $vr6, $vr1
	vor.v	$vr5, $vr8, $vr5
	vsrli.d	$vr5, $vr5, 1
	vxor.v	$vr5, $vr5, $vr7
	vand.v	$vr7, $vr6, $vr2
	vseqi.d	$vr7, $vr7, 0
	vbitsel.v	$vr7, $vr4, $vr3, $vr7
	vxor.v	$vr5, $vr5, $vr7
	addi.d	$a4, $a4, 16
	vstx	$vr5, $a6, $a3
	vori.b	$vr5, $vr6, 0
	bnez	$a4, .LBB73_4
# %bb.5:                                # %_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv.exit
	ld.d	$a3, $a0, 0
	move	$a2, $zero
	ldptr.d	$a4, $a0, 4984
	bstrpick.d	$a5, $a3, 30, 1
	ldptr.d	$a6, $a0, 3168
	slli.d	$a5, $a5, 1
	bstrins.d	$a4, $a5, 30, 0
	srli.d	$a4, $a4, 1
	xor	$a4, $a4, $a6
	andi	$a3, $a3, 1
	sub.d	$a3, $zero, $a3
	and	$a1, $a3, $a1
	xor	$a1, $a4, $a1
	stptr.d	$a1, $a0, 4984
.LBB73_6:
	addi.d	$a1, $a2, 1
	stptr.d	$a1, $a0, 4992
	slli.d	$a1, $a2, 3
	ldx.d	$a0, $a0, $a1
	bstrpick.d	$a1, $a0, 42, 11
	xor	$a0, $a1, $a0
	slli.d	$a1, $a0, 7
	lu12i.w	$a2, -404795
	ori	$a2, $a2, 1664
	lu32i.d	$a2, 0
	and	$a1, $a1, $a2
	xor	$a0, $a1, $a0
	slli.d	$a1, $a0, 15
	lu12i.w	$a2, -66464
	lu32i.d	$a2, 0
	and	$a1, $a1, $a2
	xor	$a0, $a1, $a0
	srli.d	$a1, $a0, 18
	xor	$a0, $a1, $a0
	ret
.Lfunc_end73:
	.size	_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv, .Lfunc_end73-_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE,"axG",@progbits,_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE,comdat
	.weak	_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE # -- Begin function _ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE
	.p2align	5
	.type	_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE,@function
_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE: # @_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	ld.bu	$a2, $a2, 1
	ld.bu	$a3, $fp, 0
	sub.d	$s2, $a2, $a3
	addi.w	$a2, $zero, -1
	lu32i.d	$a2, 0
	move	$s0, $a1
	bgeu	$s2, $a2, .LBB74_5
# %bb.1:
	addi.d	$s1, $s2, 1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv)
	jirl	$ra, $ra, 0
	mul.d	$a0, $a0, $s1
	addi.w	$a1, $a0, 0
	bltu	$s2, $a1, .LBB74_4
# %bb.2:
	nor	$a2, $s2, $zero
	mod.wu	$s2, $a2, $s1
	bgeu	$a1, $s2, .LBB74_4
	.p2align	4, , 16
.LBB74_3:                               # %.lr.ph.i
                                        # =>This Inner Loop Header: Depth=1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv)
	jirl	$ra, $ra, 0
	mul.d	$a0, $a0, $s1
	addi.w	$a1, $a0, 0
	bltu	$a1, $s2, .LBB74_3
.LBB74_4:                               # %_ZNSt24uniform_int_distributionIhE5_S_ndImSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEjEET1_RT0_S4_.exit
	srli.d	$a0, $a0, 32
	b	.LBB74_8
.LBB74_5:
	move	$s1, $a0
	lu12i.w	$a0, 15
	ori	$s3, $a0, 3840
	.p2align	4, , 16
.LBB74_6:                               # =>This Inner Loop Header: Depth=1
	st.h	$s3, $sp, 6
	addi.d	$a2, $sp, 6
	move	$a0, $s1
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
	slli.d	$s4, $a0, 32
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv)
	jirl	$ra, $ra, 0
	add.d	$a0, $s4, $a0
	bltu	$s2, $a0, .LBB74_6
# %bb.7:                                #   in Loop: Header=BB74_6 Depth=1
	sltu	$a1, $a0, $s4
	bnez	$a1, .LBB74_6
.LBB74_8:                               # %.loopexit
	ld.b	$a1, $fp, 0
	add.d	$a0, $a1, $a0
	andi	$a0, $a0, 255
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.Lfunc_end74:
	.size	_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE, .Lfunc_end74-_ZNSt24uniform_int_distributionIhEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEhRT_RKNS0_10param_typeE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE,"axG",@progbits,_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE,comdat
	.weak	_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE # -- Begin function _ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE
	.p2align	5
	.type	_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE,@function
_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE: # @_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	ld.wu	$a2, $a2, 4
	ld.wu	$a3, $fp, 0
	sub.d	$s2, $a2, $a3
	addi.w	$a2, $zero, -2
	lu32i.d	$a2, 0
	move	$s0, $a1
	bltu	$a2, $s2, .LBB75_5
# %bb.1:
	addi.w	$s4, $s2, 0
	addi.w	$s3, $s2, 1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv)
	jirl	$ra, $ra, 0
	bstrpick.d	$s1, $s3, 31, 0
	mul.d	$a0, $a0, $s1
	addi.w	$a1, $a0, 0
	bltu	$s4, $a1, .LBB75_4
# %bb.2:
	nor	$a2, $s2, $zero
	addi.w	$a2, $a2, 0
	mod.wu	$s2, $a2, $s3
	bgeu	$a1, $s2, .LBB75_4
	.p2align	4, , 16
.LBB75_3:                               # %.lr.ph.i
                                        # =>This Inner Loop Header: Depth=1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv)
	jirl	$ra, $ra, 0
	mul.d	$a0, $a0, $s1
	addi.w	$a1, $a0, 0
	bltu	$a1, $s2, .LBB75_3
.LBB75_4:                               # %_ZNSt24uniform_int_distributionIjE5_S_ndImSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEjEET1_RT0_S4_.exit
	srli.d	$a0, $a0, 32
	b	.LBB75_10
.LBB75_5:
	move	$s1, $a0
	addi.w	$a0, $zero, -1
	lu32i.d	$a0, 0
	bne	$s2, $a0, .LBB75_7
# %bb.6:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv)
	jirl	$ra, $ra, 0
	b	.LBB75_10
.LBB75_7:                               # %.preheader
	ori	$s3, $zero, 0
	lu32i.d	$s3, -1
	.p2align	4, , 16
.LBB75_8:                               # =>This Inner Loop Header: Depth=1
	st.d	$s3, $sp, 0
	addi.d	$a2, $sp, 0
	move	$a0, $s1
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
	slli.d	$s4, $a0, 32
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv)
	jirl	$ra, $ra, 0
	add.d	$a0, $s4, $a0
	bltu	$s2, $a0, .LBB75_8
# %bb.9:                                #   in Loop: Header=BB75_8 Depth=1
	sltu	$a1, $a0, $s4
	bnez	$a1, .LBB75_8
.LBB75_10:                              # %.loopexit
	ld.w	$a1, $fp, 0
	add.w	$a0, $a1, $a0
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.Lfunc_end75:
	.size	_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE, .Lfunc_end75-_ZNSt24uniform_int_distributionIjEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEjRT_RKNS0_10param_typeE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE,"axG",@progbits,_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE,comdat
	.weak	_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE # -- Begin function _ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE
	.p2align	5
	.type	_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE,@function
_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE: # @_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	ld.d	$a2, $a2, 8
	ld.d	$a3, $fp, 0
	sub.d	$s2, $a2, $a3
	addi.w	$a2, $zero, -2
	lu32i.d	$a2, 0
	move	$s0, $a1
	bltu	$a2, $s2, .LBB76_5
# %bb.1:
	addi.w	$s4, $s2, 0
	addi.w	$s3, $s2, 1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv)
	jirl	$ra, $ra, 0
	bstrpick.d	$s1, $s3, 31, 0
	mul.d	$a0, $a0, $s1
	addi.w	$a1, $a0, 0
	bltu	$s4, $a1, .LBB76_4
# %bb.2:
	nor	$a2, $s2, $zero
	addi.w	$a2, $a2, 0
	mod.wu	$s2, $a2, $s3
	bgeu	$a1, $s2, .LBB76_4
	.p2align	4, , 16
.LBB76_3:                               # %.lr.ph.i
                                        # =>This Inner Loop Header: Depth=1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv)
	jirl	$ra, $ra, 0
	mul.d	$a0, $a0, $s1
	addi.w	$a1, $a0, 0
	bltu	$a1, $s2, .LBB76_3
.LBB76_4:                               # %_ZNSt24uniform_int_distributionImE5_S_ndImSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEjEET1_RT0_S4_.exit
	srli.d	$a0, $a0, 32
	b	.LBB76_10
.LBB76_5:
	move	$s1, $a0
	addi.w	$a0, $zero, -1
	lu32i.d	$a0, 0
	bne	$s2, $a0, .LBB76_7
# %bb.6:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv)
	jirl	$ra, $ra, 0
	b	.LBB76_10
.LBB76_7:                               # %.preheader
	srli.d	$s3, $s2, 32
	.p2align	4, , 16
.LBB76_8:                               # =>This Inner Loop Header: Depth=1
	st.d	$zero, $sp, 8
	st.d	$s3, $sp, 16
	addi.d	$a2, $sp, 8
	move	$a0, $s1
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
	slli.d	$s4, $a0, 32
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv)
	jirl	$ra, $ra, 0
	move	$a1, $a0
	add.d	$a0, $a0, $s4
	bltu	$s2, $a0, .LBB76_8
# %bb.9:                                #   in Loop: Header=BB76_8 Depth=1
	sltu	$a1, $a0, $a1
	bnez	$a1, .LBB76_8
.LBB76_10:                              # %.loopexit
	ld.d	$a1, $fp, 0
	add.d	$a0, $a1, $a0
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.Lfunc_end76:
	.size	_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE, .Lfunc_end76-_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE
	.cfi_endproc
                                        # -- End function
	.section	.text.startup,"ax",@progbits
	.p2align	5                               # -- Begin function _GLOBAL__sub_I_VectorOperations.cpp
	.type	_GLOBAL__sub_I_VectorOperations.cpp,@function
_GLOBAL__sub_I_VectorOperations.cpp:    # @_GLOBAL__sub_I_VectorOperations.cpp
.Lfunc_begin72:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception72
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal17InitializeStreamsEv)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$a0, $a0, %pc_lo12(_ZL3rng)
	lu12i.w	$a1, 1
	ori	$a2, $a1, 1393
	st.d	$a2, $a0, 0
	addi.d	$a1, $a0, 8
	ori	$a3, $zero, 1
	lu12i.w	$a4, 442488
	ori	$a4, $a4, 2405
	ori	$a5, $zero, 624
	.p2align	4, , 16
.LBB77_1:                               # =>This Inner Loop Header: Depth=1
	srli.d	$a6, $a2, 30
	xor	$a2, $a6, $a2
	mul.d	$a2, $a2, $a4
	add.d	$a2, $a3, $a2
	bstrpick.d	$a2, $a2, 31, 0
	st.d	$a2, $a1, 0
	addi.d	$a3, $a3, 1
	addi.d	$a1, $a1, 8
	bne	$a3, $a5, .LBB77_1
# %bb.2:                                # %__cxx_global_var_init.1.exit
	ori	$a1, $zero, 624
	stptr.d	$a1, $a0, 4992
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	addi.d	$s1, $sp, 24
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 60
	st.d	$a0, $sp, 40
.Ltmp1548:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1549:
# %bb.3:                                # %.noexc.i
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str)
	addi.d	$a2, $a2, %pc_lo12(.L.str)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.w	$a2, $a2, 56
	vst	$vr0, $a0, 40
	st.w	$a2, $a0, 56
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1551:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1552:
# %bb.4:
	pcalau12i	$a0, %got_pc_hi20(_ZTVN9benchmark8internal17FunctionBenchmarkE)
	ld.d	$a0, $a0, %got_pc_lo12(_ZTVN9benchmark8internal17FunctionBenchmarkE)
	move	$s3, $zero
	addi.d	$s2, $a0, 16
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z60benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint8_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z60benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint8_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1553:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1554:
# %bb.5:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_7
# %bb.6:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_7:                               # %__cxx_global_var_init.2.exit
	pcalau12i	$a0, %pc_hi20(_ZL27benchmark_uniq_2_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL27benchmark_uniq_2_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 61
	st.d	$a0, $sp, 40
.Ltmp1556:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1557:
# %bb.8:                                # %.noexc.i4
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.4)
	addi.d	$a2, $a2, %pc_lo12(.L.str.4)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 53
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 53
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1559:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1560:
# %bb.9:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z61benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint8_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z61benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint8_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1561:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1562:
# %bb.10:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_12
# %bb.11:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i8
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_12:                              # %__cxx_global_var_init.3.exit
	pcalau12i	$a0, %pc_hi20(_ZL27benchmark_uniq_3_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL27benchmark_uniq_3_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 53
	st.d	$a0, $sp, 40
.Ltmp1564:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1565:
# %bb.13:                               # %.noexc.i13
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.6)
	addi.d	$a2, $a2, %pc_lo12(.L.str.6)
	xvld	$xr0, $a2, 0
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	vld	$vr0, $a2, 32
	ld.d	$a2, $a2, 45
	vst	$vr0, $a0, 32
	st.d	$a2, $a0, 45
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1567:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1568:
# %bb.14:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z53benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint8_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z53benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint8_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1569:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1570:
# %bb.15:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_17
# %bb.16:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i17
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_17:                              # %__cxx_global_var_init.5.exit
	pcalau12i	$a0, %pc_hi20(_ZL27benchmark_uniq_4_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL27benchmark_uniq_4_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 67
	st.d	$a0, $sp, 40
.Ltmp1572:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1573:
# %bb.18:                               # %.noexc.i22
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.8)
	addi.d	$a1, $a0, %pc_lo12(.L.str.8)
	ori	$a2, $zero, 67
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp1575:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1576:
# %bb.19:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint8_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint8_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1577:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1578:
# %bb.20:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_22
# %bb.21:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i26
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_22:                              # %__cxx_global_var_init.7.exit
	pcalau12i	$a0, %pc_hi20(_ZL27benchmark_uniq_5_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL27benchmark_uniq_5_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 68
	st.d	$a0, $sp, 40
.Ltmp1580:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1581:
# %bb.23:                               # %.noexc.i31
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.10)
	addi.d	$a1, $a0, %pc_lo12(.L.str.10)
	ori	$a2, $zero, 68
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp1583:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1584:
# %bb.24:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint8_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint8_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1585:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1586:
# %bb.25:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_27
# %bb.26:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i35
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_27:                              # %__cxx_global_var_init.9.exit
	pcalau12i	$a0, %pc_hi20(_ZL27benchmark_uniq_6_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL27benchmark_uniq_6_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 60
	st.d	$a0, $sp, 40
.Ltmp1588:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1589:
# %bb.28:                               # %.noexc.i40
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.12)
	addi.d	$a2, $a2, %pc_lo12(.L.str.12)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.w	$a2, $a2, 56
	vst	$vr0, $a0, 40
	st.w	$a2, $a0, 56
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1591:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1592:
# %bb.29:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint8_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint8_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1593:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1594:
# %bb.30:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_32
# %bb.31:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i44
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_32:                              # %__cxx_global_var_init.11.exit
	pcalau12i	$a0, %pc_hi20(_ZL27benchmark_uniq_7_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL27benchmark_uniq_7_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 60
	st.d	$a0, $sp, 40
.Ltmp1596:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1597:
# %bb.33:                               # %.noexc.i49
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.14)
	addi.d	$a2, $a2, %pc_lo12(.L.str.14)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.w	$a2, $a2, 56
	vst	$vr0, $a0, 40
	st.w	$a2, $a0, 56
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1599:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1600:
# %bb.34:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z60benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint8_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z60benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint8_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1601:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1602:
# %bb.35:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_37
# %bb.36:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i53
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_37:                              # %__cxx_global_var_init.13.exit
	pcalau12i	$a0, %pc_hi20(_ZL27benchmark_uniq_8_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL27benchmark_uniq_8_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 61
	st.d	$a0, $sp, 40
.Ltmp1604:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1605:
# %bb.38:                               # %.noexc.i58
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.16)
	addi.d	$a2, $a2, %pc_lo12(.L.str.16)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 53
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 53
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1607:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1608:
# %bb.39:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z61benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint8_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z61benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint8_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1609:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1610:
# %bb.40:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_42
# %bb.41:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i62
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_42:                              # %__cxx_global_var_init.15.exit
	pcalau12i	$a0, %pc_hi20(_ZL27benchmark_uniq_9_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL27benchmark_uniq_9_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 53
	st.d	$a0, $sp, 40
.Ltmp1612:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1613:
# %bb.43:                               # %.noexc.i67
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.18)
	addi.d	$a2, $a2, %pc_lo12(.L.str.18)
	xvld	$xr0, $a2, 0
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	vld	$vr0, $a2, 32
	ld.d	$a2, $a2, 45
	vst	$vr0, $a0, 32
	st.d	$a2, $a0, 45
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1615:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1616:
# %bb.44:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z53benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint8_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z53benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint8_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1617:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1618:
# %bb.45:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_47
# %bb.46:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i71
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_47:                              # %__cxx_global_var_init.17.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_10_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_10_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 67
	st.d	$a0, $sp, 40
.Ltmp1620:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1621:
# %bb.48:                               # %.noexc.i76
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.20)
	addi.d	$a1, $a0, %pc_lo12(.L.str.20)
	ori	$a2, $zero, 67
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp1623:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1624:
# %bb.49:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint8_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint8_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1625:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1626:
# %bb.50:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_52
# %bb.51:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i80
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_52:                              # %__cxx_global_var_init.19.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_11_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_11_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 68
	st.d	$a0, $sp, 40
.Ltmp1628:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1629:
# %bb.53:                               # %.noexc.i85
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.22)
	addi.d	$a1, $a0, %pc_lo12(.L.str.22)
	ori	$a2, $zero, 68
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp1631:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1632:
# %bb.54:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint8_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint8_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1633:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1634:
# %bb.55:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_57
# %bb.56:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i89
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_57:                              # %__cxx_global_var_init.21.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_12_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_12_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 60
	st.d	$a0, $sp, 40
.Ltmp1636:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1637:
# %bb.58:                               # %.noexc.i94
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.24)
	addi.d	$a2, $a2, %pc_lo12(.L.str.24)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.w	$a2, $a2, 56
	vst	$vr0, $a0, 40
	st.w	$a2, $a0, 56
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1639:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1640:
# %bb.59:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint8_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint8_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1641:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1642:
# %bb.60:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_62
# %bb.61:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i98
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_62:                              # %__cxx_global_var_init.23.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_13_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_13_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 60
	st.d	$a0, $sp, 40
.Ltmp1644:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1645:
# %bb.63:                               # %.noexc.i103
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.26)
	addi.d	$a2, $a2, %pc_lo12(.L.str.26)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.w	$a2, $a2, 56
	vst	$vr0, $a0, 40
	st.w	$a2, $a0, 56
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1647:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1648:
# %bb.64:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z60benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint8_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z60benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint8_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1649:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1650:
# %bb.65:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_67
# %bb.66:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i107
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_67:                              # %__cxx_global_var_init.25.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_14_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_14_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 61
	st.d	$a0, $sp, 40
.Ltmp1652:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1653:
# %bb.68:                               # %.noexc.i112
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.28)
	addi.d	$a2, $a2, %pc_lo12(.L.str.28)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 53
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 53
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1655:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1656:
# %bb.69:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z61benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint8_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z61benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint8_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1657:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1658:
# %bb.70:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_72
# %bb.71:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i116
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_72:                              # %__cxx_global_var_init.27.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_15_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_15_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 53
	st.d	$a0, $sp, 40
.Ltmp1660:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1661:
# %bb.73:                               # %.noexc.i121
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.30)
	addi.d	$a2, $a2, %pc_lo12(.L.str.30)
	xvld	$xr0, $a2, 0
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	vld	$vr0, $a2, 32
	ld.d	$a2, $a2, 45
	vst	$vr0, $a0, 32
	st.d	$a2, $a0, 45
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1663:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1664:
# %bb.74:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z53benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint8_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z53benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint8_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1665:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1666:
# %bb.75:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_77
# %bb.76:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i125
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_77:                              # %__cxx_global_var_init.29.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_16_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_16_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 67
	st.d	$a0, $sp, 40
.Ltmp1668:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1669:
# %bb.78:                               # %.noexc.i130
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.32)
	addi.d	$a1, $a0, %pc_lo12(.L.str.32)
	ori	$a2, $zero, 67
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp1671:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1672:
# %bb.79:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint8_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint8_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1673:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1674:
# %bb.80:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_82
# %bb.81:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i134
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_82:                              # %__cxx_global_var_init.31.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_17_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_17_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 68
	st.d	$a0, $sp, 40
.Ltmp1676:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1677:
# %bb.83:                               # %.noexc.i139
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.34)
	addi.d	$a1, $a0, %pc_lo12(.L.str.34)
	ori	$a2, $zero, 68
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp1679:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1680:
# %bb.84:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint8_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint8_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1681:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1682:
# %bb.85:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_87
# %bb.86:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i143
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_87:                              # %__cxx_global_var_init.33.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_18_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_18_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 60
	st.d	$a0, $sp, 40
.Ltmp1684:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1685:
# %bb.88:                               # %.noexc.i148
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.36)
	addi.d	$a2, $a2, %pc_lo12(.L.str.36)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.w	$a2, $a2, 56
	vst	$vr0, $a0, 40
	st.w	$a2, $a0, 56
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1687:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1688:
# %bb.89:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint8_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint8_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1689:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1690:
# %bb.90:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_92
# %bb.91:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i152
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_92:                              # %__cxx_global_var_init.35.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_19_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_19_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 61
	st.d	$a0, $sp, 40
.Ltmp1692:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1693:
# %bb.93:                               # %.noexc.i157
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.38)
	addi.d	$a2, $a2, %pc_lo12(.L.str.38)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 53
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 53
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1695:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1696:
# %bb.94:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z61benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint16_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z61benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint16_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1697:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1698:
# %bb.95:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_97
# %bb.96:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i161
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_97:                              # %__cxx_global_var_init.37.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_20_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_20_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 62
	st.d	$a0, $sp, 40
.Ltmp1700:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1701:
# %bb.98:                               # %.noexc.i166
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.40)
	addi.d	$a2, $a2, %pc_lo12(.L.str.40)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 54
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 54
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1703:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1704:
# %bb.99:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z62benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint16_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z62benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint16_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1705:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1706:
# %bb.100:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_102
# %bb.101:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i170
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_102:                             # %__cxx_global_var_init.39.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_21_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_21_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 54
	st.d	$a0, $sp, 40
.Ltmp1708:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1709:
# %bb.103:                              # %.noexc.i175
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.42)
	addi.d	$a2, $a2, %pc_lo12(.L.str.42)
	xvld	$xr0, $a2, 0
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	vld	$vr0, $a2, 32
	ld.d	$a2, $a2, 46
	vst	$vr0, $a0, 32
	st.d	$a2, $a0, 46
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1711:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1712:
# %bb.104:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z54benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint16_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z54benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint16_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1713:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1714:
# %bb.105:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_107
# %bb.106:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i179
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_107:                             # %__cxx_global_var_init.41.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_22_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_22_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 68
	st.d	$a0, $sp, 40
.Ltmp1716:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1717:
# %bb.108:                              # %.noexc.i184
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.44)
	addi.d	$a1, $a0, %pc_lo12(.L.str.44)
	ori	$a2, $zero, 68
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp1719:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1720:
# %bb.109:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint16_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint16_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1721:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1722:
# %bb.110:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_112
# %bb.111:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i188
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_112:                             # %__cxx_global_var_init.43.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_23_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_23_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 69
	st.d	$a0, $sp, 40
.Ltmp1724:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1725:
# %bb.113:                              # %.noexc.i193
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.46)
	addi.d	$a1, $a0, %pc_lo12(.L.str.46)
	ori	$a2, $zero, 69
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp1727:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1728:
# %bb.114:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint16_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint16_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1729:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1730:
# %bb.115:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_117
# %bb.116:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i197
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_117:                             # %__cxx_global_var_init.45.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_24_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_24_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 61
	st.d	$a0, $sp, 40
.Ltmp1732:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1733:
# %bb.118:                              # %.noexc.i202
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.48)
	addi.d	$a2, $a2, %pc_lo12(.L.str.48)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 53
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 53
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1735:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1736:
# %bb.119:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint16_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint16_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1737:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1738:
# %bb.120:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_122
# %bb.121:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i206
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_122:                             # %__cxx_global_var_init.47.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_25_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_25_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 61
	st.d	$a0, $sp, 40
.Ltmp1740:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1741:
# %bb.123:                              # %.noexc.i211
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.50)
	addi.d	$a2, $a2, %pc_lo12(.L.str.50)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 53
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 53
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1743:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1744:
# %bb.124:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z61benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint16_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z61benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint16_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1745:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1746:
# %bb.125:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_127
# %bb.126:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i215
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_127:                             # %__cxx_global_var_init.49.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_26_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_26_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 62
	st.d	$a0, $sp, 40
.Ltmp1748:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1749:
# %bb.128:                              # %.noexc.i220
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.52)
	addi.d	$a2, $a2, %pc_lo12(.L.str.52)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 54
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 54
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1751:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1752:
# %bb.129:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z62benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint16_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z62benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint16_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1753:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1754:
# %bb.130:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_132
# %bb.131:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i224
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_132:                             # %__cxx_global_var_init.51.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_27_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_27_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 54
	st.d	$a0, $sp, 40
.Ltmp1756:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1757:
# %bb.133:                              # %.noexc.i229
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.54)
	addi.d	$a2, $a2, %pc_lo12(.L.str.54)
	xvld	$xr0, $a2, 0
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	vld	$vr0, $a2, 32
	ld.d	$a2, $a2, 46
	vst	$vr0, $a0, 32
	st.d	$a2, $a0, 46
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1759:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1760:
# %bb.134:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z54benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint16_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z54benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint16_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1761:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1762:
# %bb.135:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_137
# %bb.136:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i233
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_137:                             # %__cxx_global_var_init.53.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_28_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_28_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 68
	st.d	$a0, $sp, 40
.Ltmp1764:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1765:
# %bb.138:                              # %.noexc.i238
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.56)
	addi.d	$a1, $a0, %pc_lo12(.L.str.56)
	ori	$a2, $zero, 68
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp1767:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1768:
# %bb.139:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint16_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint16_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1769:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1770:
# %bb.140:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_142
# %bb.141:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i242
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_142:                             # %__cxx_global_var_init.55.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_29_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_29_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 69
	st.d	$a0, $sp, 40
.Ltmp1772:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1773:
# %bb.143:                              # %.noexc.i247
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.58)
	addi.d	$a1, $a0, %pc_lo12(.L.str.58)
	ori	$a2, $zero, 69
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp1775:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1776:
# %bb.144:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint16_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint16_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1777:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1778:
# %bb.145:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_147
# %bb.146:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i251
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_147:                             # %__cxx_global_var_init.57.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_30_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_30_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 61
	st.d	$a0, $sp, 40
.Ltmp1780:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1781:
# %bb.148:                              # %.noexc.i256
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.60)
	addi.d	$a2, $a2, %pc_lo12(.L.str.60)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 53
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 53
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1783:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1784:
# %bb.149:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint16_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint16_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1785:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1786:
# %bb.150:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_152
# %bb.151:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i260
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_152:                             # %__cxx_global_var_init.59.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_31_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_31_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 61
	st.d	$a0, $sp, 40
.Ltmp1788:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1789:
# %bb.153:                              # %.noexc.i265
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.62)
	addi.d	$a2, $a2, %pc_lo12(.L.str.62)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 53
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 53
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1791:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1792:
# %bb.154:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z61benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint32_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z61benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint32_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1793:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1794:
# %bb.155:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_157
# %bb.156:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i269
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_157:                             # %__cxx_global_var_init.61.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_32_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_32_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 62
	st.d	$a0, $sp, 40
.Ltmp1796:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1797:
# %bb.158:                              # %.noexc.i274
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.64)
	addi.d	$a2, $a2, %pc_lo12(.L.str.64)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 54
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 54
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1799:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1800:
# %bb.159:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z62benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint32_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z62benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint32_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1801:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1802:
# %bb.160:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_162
# %bb.161:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i278
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_162:                             # %__cxx_global_var_init.63.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_33_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_33_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 54
	st.d	$a0, $sp, 40
.Ltmp1804:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1805:
# %bb.163:                              # %.noexc.i283
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.66)
	addi.d	$a2, $a2, %pc_lo12(.L.str.66)
	xvld	$xr0, $a2, 0
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	vld	$vr0, $a2, 32
	ld.d	$a2, $a2, 46
	vst	$vr0, $a0, 32
	st.d	$a2, $a0, 46
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1807:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1808:
# %bb.164:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z54benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint32_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z54benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint32_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1809:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1810:
# %bb.165:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_167
# %bb.166:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i287
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_167:                             # %__cxx_global_var_init.65.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_34_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_34_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 68
	st.d	$a0, $sp, 40
.Ltmp1812:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1813:
# %bb.168:                              # %.noexc.i292
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.68)
	addi.d	$a1, $a0, %pc_lo12(.L.str.68)
	ori	$a2, $zero, 68
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp1815:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1816:
# %bb.169:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint32_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint32_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1817:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1818:
# %bb.170:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_172
# %bb.171:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i296
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_172:                             # %__cxx_global_var_init.67.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_35_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_35_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 69
	st.d	$a0, $sp, 40
.Ltmp1820:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1821:
# %bb.173:                              # %.noexc.i301
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.70)
	addi.d	$a1, $a0, %pc_lo12(.L.str.70)
	ori	$a2, $zero, 69
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp1823:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1824:
# %bb.174:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint32_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint32_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1825:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1826:
# %bb.175:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_177
# %bb.176:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i305
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_177:                             # %__cxx_global_var_init.69.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_36_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_36_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 61
	st.d	$a0, $sp, 40
.Ltmp1828:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1829:
# %bb.178:                              # %.noexc.i310
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.72)
	addi.d	$a2, $a2, %pc_lo12(.L.str.72)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 53
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 53
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1831:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1832:
# %bb.179:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint32_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint32_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1833:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1834:
# %bb.180:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_182
# %bb.181:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i314
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_182:                             # %__cxx_global_var_init.71.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_37_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_37_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 60
	st.d	$a0, $sp, 40
.Ltmp1836:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1837:
# %bb.183:                              # %.noexc.i319
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.74)
	addi.d	$a2, $a2, %pc_lo12(.L.str.74)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.w	$a2, $a2, 56
	vst	$vr0, $a0, 40
	st.w	$a2, $a0, 56
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1839:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1840:
# %bb.184:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint16_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint16_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1841:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1842:
# %bb.185:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_187
# %bb.186:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i323
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_187:                             # %__cxx_global_var_init.73.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_38_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_38_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 61
	st.d	$a0, $sp, 40
.Ltmp1844:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1845:
# %bb.188:                              # %.noexc.i328
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.76)
	addi.d	$a2, $a2, %pc_lo12(.L.str.76)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 53
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 53
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1847:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1848:
# %bb.189:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint16_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint16_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1849:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1850:
# %bb.190:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_192
# %bb.191:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i332
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_192:                             # %__cxx_global_var_init.75.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_39_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_39_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 53
	st.d	$a0, $sp, 40
.Ltmp1852:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1853:
# %bb.193:                              # %.noexc.i337
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.78)
	addi.d	$a2, $a2, %pc_lo12(.L.str.78)
	xvld	$xr0, $a2, 0
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	vld	$vr0, $a2, 32
	ld.d	$a2, $a2, 45
	vst	$vr0, $a0, 32
	st.d	$a2, $a0, 45
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1855:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1856:
# %bb.194:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint16_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint16_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1857:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1858:
# %bb.195:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_197
# %bb.196:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i341
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_197:                             # %__cxx_global_var_init.77.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_40_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_40_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 67
	st.d	$a0, $sp, 40
.Ltmp1860:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1861:
# %bb.198:                              # %.noexc.i346
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.80)
	addi.d	$a1, $a0, %pc_lo12(.L.str.80)
	ori	$a2, $zero, 67
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp1863:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1864:
# %bb.199:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint16_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint16_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1865:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1866:
# %bb.200:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_202
# %bb.201:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i350
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_202:                             # %__cxx_global_var_init.79.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_41_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_41_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 68
	st.d	$a0, $sp, 40
.Ltmp1868:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1869:
# %bb.203:                              # %.noexc.i355
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.82)
	addi.d	$a1, $a0, %pc_lo12(.L.str.82)
	ori	$a2, $zero, 68
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp1871:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1872:
# %bb.204:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint16_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint16_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1873:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1874:
# %bb.205:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_207
# %bb.206:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i359
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_207:                             # %__cxx_global_var_init.81.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_42_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_42_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 60
	st.d	$a0, $sp, 40
.Ltmp1876:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1877:
# %bb.208:                              # %.noexc.i364
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.84)
	addi.d	$a2, $a2, %pc_lo12(.L.str.84)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.w	$a2, $a2, 56
	vst	$vr0, $a0, 40
	st.w	$a2, $a0, 56
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1879:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1880:
# %bb.209:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint16_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint16_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1881:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1882:
# %bb.210:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_212
# %bb.211:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i368
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_212:                             # %__cxx_global_var_init.83.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_43_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_43_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 60
	st.d	$a0, $sp, 40
.Ltmp1884:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1885:
# %bb.213:                              # %.noexc.i373
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.86)
	addi.d	$a2, $a2, %pc_lo12(.L.str.86)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.w	$a2, $a2, 56
	vst	$vr0, $a0, 40
	st.w	$a2, $a0, 56
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1887:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1888:
# %bb.214:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint32_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint32_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1889:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1890:
# %bb.215:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_217
# %bb.216:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i377
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_217:                             # %__cxx_global_var_init.85.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_44_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_44_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 61
	st.d	$a0, $sp, 40
.Ltmp1892:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1893:
# %bb.218:                              # %.noexc.i382
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.88)
	addi.d	$a2, $a2, %pc_lo12(.L.str.88)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 53
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 53
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1895:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1896:
# %bb.219:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint32_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint32_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1897:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1898:
# %bb.220:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_222
# %bb.221:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i386
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_222:                             # %__cxx_global_var_init.87.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_45_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_45_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 53
	st.d	$a0, $sp, 40
.Ltmp1900:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1901:
# %bb.223:                              # %.noexc.i391
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.90)
	addi.d	$a2, $a2, %pc_lo12(.L.str.90)
	xvld	$xr0, $a2, 0
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	vld	$vr0, $a2, 32
	ld.d	$a2, $a2, 45
	vst	$vr0, $a0, 32
	st.d	$a2, $a0, 45
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1903:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1904:
# %bb.224:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint32_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint32_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1905:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1906:
# %bb.225:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_227
# %bb.226:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i395
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_227:                             # %__cxx_global_var_init.89.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_46_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_46_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 67
	st.d	$a0, $sp, 40
.Ltmp1908:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1909:
# %bb.228:                              # %.noexc.i400
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.92)
	addi.d	$a1, $a0, %pc_lo12(.L.str.92)
	ori	$a2, $zero, 67
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp1911:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1912:
# %bb.229:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint32_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint32_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1913:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1914:
# %bb.230:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_232
# %bb.231:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i404
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_232:                             # %__cxx_global_var_init.91.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_47_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_47_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 68
	st.d	$a0, $sp, 40
.Ltmp1916:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1917:
# %bb.233:                              # %.noexc.i409
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.94)
	addi.d	$a1, $a0, %pc_lo12(.L.str.94)
	ori	$a2, $zero, 68
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp1919:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1920:
# %bb.234:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint32_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint32_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1921:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1922:
# %bb.235:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_237
# %bb.236:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i413
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_237:                             # %__cxx_global_var_init.93.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_48_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_48_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 60
	st.d	$a0, $sp, 40
.Ltmp1924:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1925:
# %bb.238:                              # %.noexc.i418
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.96)
	addi.d	$a2, $a2, %pc_lo12(.L.str.96)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.w	$a2, $a2, 56
	vst	$vr0, $a0, 40
	st.w	$a2, $a0, 56
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1927:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1928:
# %bb.239:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint32_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint32_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1929:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1930:
# %bb.240:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_242
# %bb.241:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i422
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_242:                             # %__cxx_global_var_init.95.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_49_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_49_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 60
	st.d	$a0, $sp, 40
.Ltmp1932:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1933:
# %bb.243:                              # %.noexc.i427
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.98)
	addi.d	$a2, $a2, %pc_lo12(.L.str.98)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.w	$a2, $a2, 56
	vst	$vr0, $a0, 40
	st.w	$a2, $a0, 56
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1935:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1936:
# %bb.244:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint64_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint64_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1937:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1938:
# %bb.245:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_247
# %bb.246:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i431
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_247:                             # %__cxx_global_var_init.97.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_50_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_50_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 61
	st.d	$a0, $sp, 40
.Ltmp1940:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1941:
# %bb.248:                              # %.noexc.i436
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.100)
	addi.d	$a2, $a2, %pc_lo12(.L.str.100)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 53
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 53
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1943:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1944:
# %bb.249:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint64_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint64_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1945:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1946:
# %bb.250:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_252
# %bb.251:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i440
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_252:                             # %__cxx_global_var_init.99.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_51_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_51_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 53
	st.d	$a0, $sp, 40
.Ltmp1948:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1949:
# %bb.253:                              # %.noexc.i445
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.102)
	addi.d	$a2, $a2, %pc_lo12(.L.str.102)
	xvld	$xr0, $a2, 0
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	vld	$vr0, $a2, 32
	ld.d	$a2, $a2, 45
	vst	$vr0, $a0, 32
	st.d	$a2, $a0, 45
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1951:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1952:
# %bb.254:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint64_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint64_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1953:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1954:
# %bb.255:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_257
# %bb.256:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i449
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_257:                             # %__cxx_global_var_init.101.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_52_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_52_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 67
	st.d	$a0, $sp, 40
.Ltmp1956:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1957:
# %bb.258:                              # %.noexc.i454
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.104)
	addi.d	$a1, $a0, %pc_lo12(.L.str.104)
	ori	$a2, $zero, 67
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp1959:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1960:
# %bb.259:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint64_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint64_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1961:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1962:
# %bb.260:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_262
# %bb.261:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i458
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_262:                             # %__cxx_global_var_init.103.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_53_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_53_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 68
	st.d	$a0, $sp, 40
.Ltmp1964:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1965:
# %bb.263:                              # %.noexc.i463
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.106)
	addi.d	$a1, $a0, %pc_lo12(.L.str.106)
	ori	$a2, $zero, 68
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp1967:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1968:
# %bb.264:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint64_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint64_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1969:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1970:
# %bb.265:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_267
# %bb.266:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i467
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_267:                             # %__cxx_global_var_init.105.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_54_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_54_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 60
	st.d	$a0, $sp, 40
.Ltmp1972:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1973:
# %bb.268:                              # %.noexc.i472
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.108)
	addi.d	$a2, $a2, %pc_lo12(.L.str.108)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.w	$a2, $a2, 56
	vst	$vr0, $a0, 40
	st.w	$a2, $a0, 56
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1975:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1976:
# %bb.269:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint64_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint64_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1977:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1978:
# %bb.270:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_272
# %bb.271:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i476
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_272:                             # %__cxx_global_var_init.107.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_55_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_55_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 61
	st.d	$a0, $sp, 40
.Ltmp1980:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1981:
# %bb.273:                              # %.noexc.i481
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.110)
	addi.d	$a2, $a2, %pc_lo12(.L.str.110)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 53
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 53
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1983:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1984:
# %bb.274:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z61benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint32_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z61benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint32_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1985:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1986:
# %bb.275:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_277
# %bb.276:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i485
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_277:                             # %__cxx_global_var_init.109.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_56_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_56_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 62
	st.d	$a0, $sp, 40
.Ltmp1988:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1989:
# %bb.278:                              # %.noexc.i490
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.112)
	addi.d	$a2, $a2, %pc_lo12(.L.str.112)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 54
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 54
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1991:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1992:
# %bb.279:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z62benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint32_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z62benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint32_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1993:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1994:
# %bb.280:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_282
# %bb.281:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i494
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_282:                             # %__cxx_global_var_init.111.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_57_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_57_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 54
	st.d	$a0, $sp, 40
.Ltmp1996:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1997:
# %bb.283:                              # %.noexc.i499
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.114)
	addi.d	$a2, $a2, %pc_lo12(.L.str.114)
	xvld	$xr0, $a2, 0
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	vld	$vr0, $a2, 32
	ld.d	$a2, $a2, 46
	vst	$vr0, $a0, 32
	st.d	$a2, $a0, 46
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1999:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2000:
# %bb.284:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z54benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint32_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z54benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint32_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2001:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2002:
# %bb.285:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_287
# %bb.286:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i503
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_287:                             # %__cxx_global_var_init.113.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_58_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_58_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 68
	st.d	$a0, $sp, 40
.Ltmp2004:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2005:
# %bb.288:                              # %.noexc.i508
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.116)
	addi.d	$a1, $a0, %pc_lo12(.L.str.116)
	ori	$a2, $zero, 68
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp2007:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2008:
# %bb.289:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint32_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint32_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2009:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2010:
# %bb.290:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_292
# %bb.291:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i512
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_292:                             # %__cxx_global_var_init.115.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_59_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_59_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 69
	st.d	$a0, $sp, 40
.Ltmp2012:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2013:
# %bb.293:                              # %.noexc.i517
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.118)
	addi.d	$a1, $a0, %pc_lo12(.L.str.118)
	ori	$a2, $zero, 69
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp2015:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2016:
# %bb.294:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint32_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint32_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2017:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2018:
# %bb.295:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_297
# %bb.296:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i521
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_297:                             # %__cxx_global_var_init.117.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_60_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_60_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 61
	st.d	$a0, $sp, 40
.Ltmp2020:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2021:
# %bb.298:                              # %.noexc.i526
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.120)
	addi.d	$a2, $a2, %pc_lo12(.L.str.120)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 53
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 53
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2023:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2024:
# %bb.299:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint32_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint32_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2025:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2026:
# %bb.300:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_302
# %bb.301:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i530
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_302:                             # %__cxx_global_var_init.119.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_61_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_61_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 61
	st.d	$a0, $sp, 40
.Ltmp2028:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2029:
# %bb.303:                              # %.noexc.i535
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.122)
	addi.d	$a2, $a2, %pc_lo12(.L.str.122)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 53
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 53
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2031:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2032:
# %bb.304:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z61benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint64_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z61benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint64_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2033:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2034:
# %bb.305:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_307
# %bb.306:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i539
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_307:                             # %__cxx_global_var_init.121.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_62_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_62_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 62
	st.d	$a0, $sp, 40
.Ltmp2036:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2037:
# %bb.308:                              # %.noexc.i544
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.124)
	addi.d	$a2, $a2, %pc_lo12(.L.str.124)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 54
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 54
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2039:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2040:
# %bb.309:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z62benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint64_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z62benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint64_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2041:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2042:
# %bb.310:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_312
# %bb.311:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i548
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_312:                             # %__cxx_global_var_init.123.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_63_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_63_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 54
	st.d	$a0, $sp, 40
.Ltmp2044:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2045:
# %bb.313:                              # %.noexc.i553
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.126)
	addi.d	$a2, $a2, %pc_lo12(.L.str.126)
	xvld	$xr0, $a2, 0
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	vld	$vr0, $a2, 32
	ld.d	$a2, $a2, 46
	vst	$vr0, $a0, 32
	st.d	$a2, $a0, 46
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2047:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2048:
# %bb.314:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z54benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint64_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z54benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint64_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2049:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2050:
# %bb.315:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_317
# %bb.316:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i557
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_317:                             # %__cxx_global_var_init.125.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_64_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_64_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 68
	st.d	$a0, $sp, 40
.Ltmp2052:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2053:
# %bb.318:                              # %.noexc.i562
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.128)
	addi.d	$a1, $a0, %pc_lo12(.L.str.128)
	ori	$a2, $zero, 68
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp2055:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2056:
# %bb.319:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint64_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint64_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2057:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2058:
# %bb.320:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_322
# %bb.321:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i566
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_322:                             # %__cxx_global_var_init.127.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_65_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_65_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 69
	st.d	$a0, $sp, 40
.Ltmp2060:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2061:
# %bb.323:                              # %.noexc.i571
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.130)
	addi.d	$a1, $a0, %pc_lo12(.L.str.130)
	ori	$a2, $zero, 69
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp2063:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2064:
# %bb.324:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint64_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint64_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2065:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2066:
# %bb.325:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_327
# %bb.326:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i575
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_327:                             # %__cxx_global_var_init.129.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_66_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_66_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 61
	st.d	$a0, $sp, 40
.Ltmp2068:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2069:
# %bb.328:                              # %.noexc.i580
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.132)
	addi.d	$a2, $a2, %pc_lo12(.L.str.132)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 53
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 53
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2071:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2072:
# %bb.329:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint64_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint64_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2073:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2074:
# %bb.330:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_332
# %bb.331:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i584
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_332:                             # %__cxx_global_var_init.131.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_67_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_67_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 61
	st.d	$a0, $sp, 40
.Ltmp2076:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2077:
# %bb.333:                              # %.noexc.i589
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.134)
	addi.d	$a2, $a2, %pc_lo12(.L.str.134)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 53
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 53
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2079:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2080:
# %bb.334:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z61benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint64_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z61benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint64_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2081:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2082:
# %bb.335:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_337
# %bb.336:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i593
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_337:                             # %__cxx_global_var_init.133.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_68_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_68_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 62
	st.d	$a0, $sp, 40
.Ltmp2084:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2085:
# %bb.338:                              # %.noexc.i598
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.136)
	addi.d	$a2, $a2, %pc_lo12(.L.str.136)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 54
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 54
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2087:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2088:
# %bb.339:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z62benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint64_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z62benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint64_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2089:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2090:
# %bb.340:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_342
# %bb.341:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i602
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_342:                             # %__cxx_global_var_init.135.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_69_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_69_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 54
	st.d	$a0, $sp, 40
.Ltmp2092:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2093:
# %bb.343:                              # %.noexc.i607
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.138)
	addi.d	$a2, $a2, %pc_lo12(.L.str.138)
	xvld	$xr0, $a2, 0
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	vld	$vr0, $a2, 32
	ld.d	$a2, $a2, 46
	vst	$vr0, $a0, 32
	st.d	$a2, $a0, 46
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2095:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2096:
# %bb.344:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z54benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint64_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z54benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint64_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2097:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2098:
# %bb.345:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_347
# %bb.346:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i611
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_347:                             # %__cxx_global_var_init.137.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_70_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_70_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 68
	st.d	$a0, $sp, 40
.Ltmp2100:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2101:
# %bb.348:                              # %.noexc.i616
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.140)
	addi.d	$a1, $a0, %pc_lo12(.L.str.140)
	ori	$a2, $zero, 68
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp2103:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2104:
# %bb.349:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint64_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint64_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2105:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2106:
# %bb.350:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_352
# %bb.351:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i620
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_352:                             # %__cxx_global_var_init.139.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_71_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_71_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 69
	st.d	$a0, $sp, 40
.Ltmp2108:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2109:
# %bb.353:                              # %.noexc.i625
	move	$s0, $a0
	ld.d	$s3, $sp, 40
	st.d	$a0, $sp, 8
	st.d	$s3, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.142)
	addi.d	$a1, $a0, %pc_lo12(.L.str.142)
	ori	$a2, $zero, 69
	move	$a0, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s3, $sp, 16
	stx.b	$zero, $s0, $s3
	ori	$s3, $zero, 1
.Ltmp2111:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2112:
# %bb.354:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint64_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint64_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2113:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2114:
# %bb.355:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_357
# %bb.356:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i629
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_357:                             # %__cxx_global_var_init.141.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_72_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_72_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 61
	st.d	$a0, $sp, 40
.Ltmp2116:
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2117:
# %bb.358:                              # %.noexc.i634
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.144)
	addi.d	$a2, $a2, %pc_lo12(.L.str.144)
	xvld	$xr0, $a2, 0
	ld.d	$a3, $a2, 32
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	xvst	$xr0, $a0, 0
	st.d	$a3, $a0, 32
	vld	$vr0, $a2, 40
	ld.d	$a2, $a2, 53
	vst	$vr0, $a0, 40
	st.d	$a2, $a0, 53
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2119:
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2120:
# %bb.359:
	move	$s3, $zero
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint64_t_RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z61benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint64_t_RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2121:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2122:
# %bb.360:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB77_362
# %bb.361:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i638
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_362:                             # %__cxx_global_var_init.143.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_73_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_73_benchmark_)
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.LBB77_363:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i631
.Ltmp2118:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_364:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i622
.Ltmp2110:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_365:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i613
.Ltmp2102:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_366:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i604
.Ltmp2094:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_367:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i595
.Ltmp2086:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_368:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i586
.Ltmp2078:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_369:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i577
.Ltmp2070:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_370:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i568
.Ltmp2062:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_371:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i559
.Ltmp2054:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_372:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i550
.Ltmp2046:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_373:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i541
.Ltmp2038:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_374:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i532
.Ltmp2030:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_375:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i523
.Ltmp2022:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_376:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i514
.Ltmp2014:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_377:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i505
.Ltmp2006:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_378:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i496
.Ltmp1998:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_379:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i487
.Ltmp1990:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_380:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i478
.Ltmp1982:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_381:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i469
.Ltmp1974:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_382:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i460
.Ltmp1966:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_383:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i451
.Ltmp1958:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_384:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i442
.Ltmp1950:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_385:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i433
.Ltmp1942:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_386:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i424
.Ltmp1934:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_387:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i415
.Ltmp1926:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_388:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i406
.Ltmp1918:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_389:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i397
.Ltmp1910:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_390:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i388
.Ltmp1902:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_391:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i379
.Ltmp1894:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_392:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i370
.Ltmp1886:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_393:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i361
.Ltmp1878:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_394:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i352
.Ltmp1870:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_395:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i343
.Ltmp1862:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_396:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i334
.Ltmp1854:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_397:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i325
.Ltmp1846:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_398:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i316
.Ltmp1838:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_399:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i307
.Ltmp1830:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_400:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i298
.Ltmp1822:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_401:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i289
.Ltmp1814:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_402:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i280
.Ltmp1806:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_403:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i271
.Ltmp1798:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_404:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i262
.Ltmp1790:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_405:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i253
.Ltmp1782:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_406:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i244
.Ltmp1774:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_407:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i235
.Ltmp1766:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_408:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i226
.Ltmp1758:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_409:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i217
.Ltmp1750:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_410:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i208
.Ltmp1742:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_411:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i199
.Ltmp1734:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_412:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i190
.Ltmp1726:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_413:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i181
.Ltmp1718:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_414:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i172
.Ltmp1710:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_415:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i163
.Ltmp1702:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_416:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i154
.Ltmp1694:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_417:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i145
.Ltmp1686:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_418:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i136
.Ltmp1678:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_419:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i127
.Ltmp1670:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_420:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i118
.Ltmp1662:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_421:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i109
.Ltmp1654:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_422:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i100
.Ltmp1646:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_423:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i91
.Ltmp1638:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_424:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i82
.Ltmp1630:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_425:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i73
.Ltmp1622:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_426:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i64
.Ltmp1614:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_427:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i55
.Ltmp1606:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_428:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i46
.Ltmp1598:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_429:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i37
.Ltmp1590:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_430:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i28
.Ltmp1582:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_431:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i19
.Ltmp1574:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_432:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i10
.Ltmp1566:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_433:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1
.Ltmp1558:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_434:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i
.Ltmp1550:
	move	$s0, $a0
	b	.LBB77_507
.LBB77_435:
.Ltmp2123:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_436:
.Ltmp2115:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_437:
.Ltmp2107:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_438:
.Ltmp2099:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_439:
.Ltmp2091:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_440:
.Ltmp2083:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_441:
.Ltmp2075:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_442:
.Ltmp2067:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_443:
.Ltmp2059:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_444:
.Ltmp2051:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_445:
.Ltmp2043:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_446:
.Ltmp2035:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_447:
.Ltmp2027:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_448:
.Ltmp2019:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_449:
.Ltmp2011:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_450:
.Ltmp2003:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_451:
.Ltmp1995:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_452:
.Ltmp1987:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_453:
.Ltmp1979:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_454:
.Ltmp1971:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_455:
.Ltmp1963:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_456:
.Ltmp1955:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_457:
.Ltmp1947:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_458:
.Ltmp1939:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_459:
.Ltmp1931:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_460:
.Ltmp1923:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_461:
.Ltmp1915:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_462:
.Ltmp1907:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_463:
.Ltmp1899:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_464:
.Ltmp1891:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_465:
.Ltmp1883:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_466:
.Ltmp1875:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_467:
.Ltmp1867:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_468:
.Ltmp1859:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_469:
.Ltmp1851:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_470:
.Ltmp1843:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_471:
.Ltmp1835:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_472:
.Ltmp1827:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_473:
.Ltmp1819:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_474:
.Ltmp1811:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_475:
.Ltmp1803:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_476:
.Ltmp1795:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_477:
.Ltmp1787:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_478:
.Ltmp1779:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_479:
.Ltmp1771:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_480:
.Ltmp1763:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_481:
.Ltmp1755:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_482:
.Ltmp1747:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_483:
.Ltmp1739:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_484:
.Ltmp1731:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_485:
.Ltmp1723:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_486:
.Ltmp1715:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_487:
.Ltmp1707:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_488:
.Ltmp1699:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_489:
.Ltmp1691:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_490:
.Ltmp1683:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_491:
.Ltmp1675:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_492:
.Ltmp1667:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_493:
.Ltmp1659:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_494:
.Ltmp1651:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_495:
.Ltmp1643:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_496:
.Ltmp1635:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_497:
.Ltmp1627:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_498:
.Ltmp1619:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_499:
.Ltmp1611:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_500:
.Ltmp1603:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_501:
.Ltmp1595:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_502:
.Ltmp1587:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_503:
.Ltmp1579:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_504:
.Ltmp1571:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
	b	.LBB77_510
.LBB77_505:
.Ltmp1563:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB77_510
.LBB77_506:                             # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.i
	ld.d	$a0, $sp, 24
	addi.d	$a1, $a0, 1
	move	$a0, $a2
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
	beqz	$s3, .LBB77_508
.LBB77_507:                             # %common.resume.sink.split
	ori	$a1, $zero, 232
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB77_508:                             # %common.resume
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB77_509:
.Ltmp1555:
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB77_506
.LBB77_510:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.thread.i.i7.i
	beqz	$s3, .LBB77_508
	b	.LBB77_507
.Lfunc_end77:
	.size	_GLOBAL__sub_I_VectorOperations.cpp, .Lfunc_end77-_GLOBAL__sub_I_VectorOperations.cpp
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table77:
.Lexception72:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end72-.Lcst_begin72
.Lcst_begin72:
	.uleb128 .Lfunc_begin72-.Lfunc_begin72  # >> Call Site 1 <<
	.uleb128 .Ltmp1548-.Lfunc_begin72       #   Call between .Lfunc_begin72 and .Ltmp1548
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1548-.Lfunc_begin72       # >> Call Site 2 <<
	.uleb128 .Ltmp1549-.Ltmp1548            #   Call between .Ltmp1548 and .Ltmp1549
	.uleb128 .Ltmp1550-.Lfunc_begin72       #     jumps to .Ltmp1550
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1551-.Lfunc_begin72       # >> Call Site 3 <<
	.uleb128 .Ltmp1554-.Ltmp1551            #   Call between .Ltmp1551 and .Ltmp1554
	.uleb128 .Ltmp1555-.Lfunc_begin72       #     jumps to .Ltmp1555
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1554-.Lfunc_begin72       # >> Call Site 4 <<
	.uleb128 .Ltmp1556-.Ltmp1554            #   Call between .Ltmp1554 and .Ltmp1556
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1556-.Lfunc_begin72       # >> Call Site 5 <<
	.uleb128 .Ltmp1557-.Ltmp1556            #   Call between .Ltmp1556 and .Ltmp1557
	.uleb128 .Ltmp1558-.Lfunc_begin72       #     jumps to .Ltmp1558
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1559-.Lfunc_begin72       # >> Call Site 6 <<
	.uleb128 .Ltmp1562-.Ltmp1559            #   Call between .Ltmp1559 and .Ltmp1562
	.uleb128 .Ltmp1563-.Lfunc_begin72       #     jumps to .Ltmp1563
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1562-.Lfunc_begin72       # >> Call Site 7 <<
	.uleb128 .Ltmp1564-.Ltmp1562            #   Call between .Ltmp1562 and .Ltmp1564
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1564-.Lfunc_begin72       # >> Call Site 8 <<
	.uleb128 .Ltmp1565-.Ltmp1564            #   Call between .Ltmp1564 and .Ltmp1565
	.uleb128 .Ltmp1566-.Lfunc_begin72       #     jumps to .Ltmp1566
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1567-.Lfunc_begin72       # >> Call Site 9 <<
	.uleb128 .Ltmp1570-.Ltmp1567            #   Call between .Ltmp1567 and .Ltmp1570
	.uleb128 .Ltmp1571-.Lfunc_begin72       #     jumps to .Ltmp1571
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1570-.Lfunc_begin72       # >> Call Site 10 <<
	.uleb128 .Ltmp1572-.Ltmp1570            #   Call between .Ltmp1570 and .Ltmp1572
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1572-.Lfunc_begin72       # >> Call Site 11 <<
	.uleb128 .Ltmp1573-.Ltmp1572            #   Call between .Ltmp1572 and .Ltmp1573
	.uleb128 .Ltmp1574-.Lfunc_begin72       #     jumps to .Ltmp1574
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1573-.Lfunc_begin72       # >> Call Site 12 <<
	.uleb128 .Ltmp1575-.Ltmp1573            #   Call between .Ltmp1573 and .Ltmp1575
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1575-.Lfunc_begin72       # >> Call Site 13 <<
	.uleb128 .Ltmp1578-.Ltmp1575            #   Call between .Ltmp1575 and .Ltmp1578
	.uleb128 .Ltmp1579-.Lfunc_begin72       #     jumps to .Ltmp1579
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1578-.Lfunc_begin72       # >> Call Site 14 <<
	.uleb128 .Ltmp1580-.Ltmp1578            #   Call between .Ltmp1578 and .Ltmp1580
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1580-.Lfunc_begin72       # >> Call Site 15 <<
	.uleb128 .Ltmp1581-.Ltmp1580            #   Call between .Ltmp1580 and .Ltmp1581
	.uleb128 .Ltmp1582-.Lfunc_begin72       #     jumps to .Ltmp1582
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1581-.Lfunc_begin72       # >> Call Site 16 <<
	.uleb128 .Ltmp1583-.Ltmp1581            #   Call between .Ltmp1581 and .Ltmp1583
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1583-.Lfunc_begin72       # >> Call Site 17 <<
	.uleb128 .Ltmp1586-.Ltmp1583            #   Call between .Ltmp1583 and .Ltmp1586
	.uleb128 .Ltmp1587-.Lfunc_begin72       #     jumps to .Ltmp1587
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1586-.Lfunc_begin72       # >> Call Site 18 <<
	.uleb128 .Ltmp1588-.Ltmp1586            #   Call between .Ltmp1586 and .Ltmp1588
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1588-.Lfunc_begin72       # >> Call Site 19 <<
	.uleb128 .Ltmp1589-.Ltmp1588            #   Call between .Ltmp1588 and .Ltmp1589
	.uleb128 .Ltmp1590-.Lfunc_begin72       #     jumps to .Ltmp1590
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1591-.Lfunc_begin72       # >> Call Site 20 <<
	.uleb128 .Ltmp1594-.Ltmp1591            #   Call between .Ltmp1591 and .Ltmp1594
	.uleb128 .Ltmp1595-.Lfunc_begin72       #     jumps to .Ltmp1595
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1594-.Lfunc_begin72       # >> Call Site 21 <<
	.uleb128 .Ltmp1596-.Ltmp1594            #   Call between .Ltmp1594 and .Ltmp1596
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1596-.Lfunc_begin72       # >> Call Site 22 <<
	.uleb128 .Ltmp1597-.Ltmp1596            #   Call between .Ltmp1596 and .Ltmp1597
	.uleb128 .Ltmp1598-.Lfunc_begin72       #     jumps to .Ltmp1598
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1599-.Lfunc_begin72       # >> Call Site 23 <<
	.uleb128 .Ltmp1602-.Ltmp1599            #   Call between .Ltmp1599 and .Ltmp1602
	.uleb128 .Ltmp1603-.Lfunc_begin72       #     jumps to .Ltmp1603
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1602-.Lfunc_begin72       # >> Call Site 24 <<
	.uleb128 .Ltmp1604-.Ltmp1602            #   Call between .Ltmp1602 and .Ltmp1604
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1604-.Lfunc_begin72       # >> Call Site 25 <<
	.uleb128 .Ltmp1605-.Ltmp1604            #   Call between .Ltmp1604 and .Ltmp1605
	.uleb128 .Ltmp1606-.Lfunc_begin72       #     jumps to .Ltmp1606
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1607-.Lfunc_begin72       # >> Call Site 26 <<
	.uleb128 .Ltmp1610-.Ltmp1607            #   Call between .Ltmp1607 and .Ltmp1610
	.uleb128 .Ltmp1611-.Lfunc_begin72       #     jumps to .Ltmp1611
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1610-.Lfunc_begin72       # >> Call Site 27 <<
	.uleb128 .Ltmp1612-.Ltmp1610            #   Call between .Ltmp1610 and .Ltmp1612
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1612-.Lfunc_begin72       # >> Call Site 28 <<
	.uleb128 .Ltmp1613-.Ltmp1612            #   Call between .Ltmp1612 and .Ltmp1613
	.uleb128 .Ltmp1614-.Lfunc_begin72       #     jumps to .Ltmp1614
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1615-.Lfunc_begin72       # >> Call Site 29 <<
	.uleb128 .Ltmp1618-.Ltmp1615            #   Call between .Ltmp1615 and .Ltmp1618
	.uleb128 .Ltmp1619-.Lfunc_begin72       #     jumps to .Ltmp1619
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1618-.Lfunc_begin72       # >> Call Site 30 <<
	.uleb128 .Ltmp1620-.Ltmp1618            #   Call between .Ltmp1618 and .Ltmp1620
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1620-.Lfunc_begin72       # >> Call Site 31 <<
	.uleb128 .Ltmp1621-.Ltmp1620            #   Call between .Ltmp1620 and .Ltmp1621
	.uleb128 .Ltmp1622-.Lfunc_begin72       #     jumps to .Ltmp1622
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1621-.Lfunc_begin72       # >> Call Site 32 <<
	.uleb128 .Ltmp1623-.Ltmp1621            #   Call between .Ltmp1621 and .Ltmp1623
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1623-.Lfunc_begin72       # >> Call Site 33 <<
	.uleb128 .Ltmp1626-.Ltmp1623            #   Call between .Ltmp1623 and .Ltmp1626
	.uleb128 .Ltmp1627-.Lfunc_begin72       #     jumps to .Ltmp1627
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1626-.Lfunc_begin72       # >> Call Site 34 <<
	.uleb128 .Ltmp1628-.Ltmp1626            #   Call between .Ltmp1626 and .Ltmp1628
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1628-.Lfunc_begin72       # >> Call Site 35 <<
	.uleb128 .Ltmp1629-.Ltmp1628            #   Call between .Ltmp1628 and .Ltmp1629
	.uleb128 .Ltmp1630-.Lfunc_begin72       #     jumps to .Ltmp1630
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1629-.Lfunc_begin72       # >> Call Site 36 <<
	.uleb128 .Ltmp1631-.Ltmp1629            #   Call between .Ltmp1629 and .Ltmp1631
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1631-.Lfunc_begin72       # >> Call Site 37 <<
	.uleb128 .Ltmp1634-.Ltmp1631            #   Call between .Ltmp1631 and .Ltmp1634
	.uleb128 .Ltmp1635-.Lfunc_begin72       #     jumps to .Ltmp1635
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1634-.Lfunc_begin72       # >> Call Site 38 <<
	.uleb128 .Ltmp1636-.Ltmp1634            #   Call between .Ltmp1634 and .Ltmp1636
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1636-.Lfunc_begin72       # >> Call Site 39 <<
	.uleb128 .Ltmp1637-.Ltmp1636            #   Call between .Ltmp1636 and .Ltmp1637
	.uleb128 .Ltmp1638-.Lfunc_begin72       #     jumps to .Ltmp1638
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1639-.Lfunc_begin72       # >> Call Site 40 <<
	.uleb128 .Ltmp1642-.Ltmp1639            #   Call between .Ltmp1639 and .Ltmp1642
	.uleb128 .Ltmp1643-.Lfunc_begin72       #     jumps to .Ltmp1643
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1642-.Lfunc_begin72       # >> Call Site 41 <<
	.uleb128 .Ltmp1644-.Ltmp1642            #   Call between .Ltmp1642 and .Ltmp1644
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1644-.Lfunc_begin72       # >> Call Site 42 <<
	.uleb128 .Ltmp1645-.Ltmp1644            #   Call between .Ltmp1644 and .Ltmp1645
	.uleb128 .Ltmp1646-.Lfunc_begin72       #     jumps to .Ltmp1646
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1647-.Lfunc_begin72       # >> Call Site 43 <<
	.uleb128 .Ltmp1650-.Ltmp1647            #   Call between .Ltmp1647 and .Ltmp1650
	.uleb128 .Ltmp1651-.Lfunc_begin72       #     jumps to .Ltmp1651
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1650-.Lfunc_begin72       # >> Call Site 44 <<
	.uleb128 .Ltmp1652-.Ltmp1650            #   Call between .Ltmp1650 and .Ltmp1652
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1652-.Lfunc_begin72       # >> Call Site 45 <<
	.uleb128 .Ltmp1653-.Ltmp1652            #   Call between .Ltmp1652 and .Ltmp1653
	.uleb128 .Ltmp1654-.Lfunc_begin72       #     jumps to .Ltmp1654
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1655-.Lfunc_begin72       # >> Call Site 46 <<
	.uleb128 .Ltmp1658-.Ltmp1655            #   Call between .Ltmp1655 and .Ltmp1658
	.uleb128 .Ltmp1659-.Lfunc_begin72       #     jumps to .Ltmp1659
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1658-.Lfunc_begin72       # >> Call Site 47 <<
	.uleb128 .Ltmp1660-.Ltmp1658            #   Call between .Ltmp1658 and .Ltmp1660
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1660-.Lfunc_begin72       # >> Call Site 48 <<
	.uleb128 .Ltmp1661-.Ltmp1660            #   Call between .Ltmp1660 and .Ltmp1661
	.uleb128 .Ltmp1662-.Lfunc_begin72       #     jumps to .Ltmp1662
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1663-.Lfunc_begin72       # >> Call Site 49 <<
	.uleb128 .Ltmp1666-.Ltmp1663            #   Call between .Ltmp1663 and .Ltmp1666
	.uleb128 .Ltmp1667-.Lfunc_begin72       #     jumps to .Ltmp1667
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1666-.Lfunc_begin72       # >> Call Site 50 <<
	.uleb128 .Ltmp1668-.Ltmp1666            #   Call between .Ltmp1666 and .Ltmp1668
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1668-.Lfunc_begin72       # >> Call Site 51 <<
	.uleb128 .Ltmp1669-.Ltmp1668            #   Call between .Ltmp1668 and .Ltmp1669
	.uleb128 .Ltmp1670-.Lfunc_begin72       #     jumps to .Ltmp1670
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1669-.Lfunc_begin72       # >> Call Site 52 <<
	.uleb128 .Ltmp1671-.Ltmp1669            #   Call between .Ltmp1669 and .Ltmp1671
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1671-.Lfunc_begin72       # >> Call Site 53 <<
	.uleb128 .Ltmp1674-.Ltmp1671            #   Call between .Ltmp1671 and .Ltmp1674
	.uleb128 .Ltmp1675-.Lfunc_begin72       #     jumps to .Ltmp1675
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1674-.Lfunc_begin72       # >> Call Site 54 <<
	.uleb128 .Ltmp1676-.Ltmp1674            #   Call between .Ltmp1674 and .Ltmp1676
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1676-.Lfunc_begin72       # >> Call Site 55 <<
	.uleb128 .Ltmp1677-.Ltmp1676            #   Call between .Ltmp1676 and .Ltmp1677
	.uleb128 .Ltmp1678-.Lfunc_begin72       #     jumps to .Ltmp1678
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1677-.Lfunc_begin72       # >> Call Site 56 <<
	.uleb128 .Ltmp1679-.Ltmp1677            #   Call between .Ltmp1677 and .Ltmp1679
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1679-.Lfunc_begin72       # >> Call Site 57 <<
	.uleb128 .Ltmp1682-.Ltmp1679            #   Call between .Ltmp1679 and .Ltmp1682
	.uleb128 .Ltmp1683-.Lfunc_begin72       #     jumps to .Ltmp1683
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1682-.Lfunc_begin72       # >> Call Site 58 <<
	.uleb128 .Ltmp1684-.Ltmp1682            #   Call between .Ltmp1682 and .Ltmp1684
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1684-.Lfunc_begin72       # >> Call Site 59 <<
	.uleb128 .Ltmp1685-.Ltmp1684            #   Call between .Ltmp1684 and .Ltmp1685
	.uleb128 .Ltmp1686-.Lfunc_begin72       #     jumps to .Ltmp1686
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1687-.Lfunc_begin72       # >> Call Site 60 <<
	.uleb128 .Ltmp1690-.Ltmp1687            #   Call between .Ltmp1687 and .Ltmp1690
	.uleb128 .Ltmp1691-.Lfunc_begin72       #     jumps to .Ltmp1691
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1690-.Lfunc_begin72       # >> Call Site 61 <<
	.uleb128 .Ltmp1692-.Ltmp1690            #   Call between .Ltmp1690 and .Ltmp1692
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1692-.Lfunc_begin72       # >> Call Site 62 <<
	.uleb128 .Ltmp1693-.Ltmp1692            #   Call between .Ltmp1692 and .Ltmp1693
	.uleb128 .Ltmp1694-.Lfunc_begin72       #     jumps to .Ltmp1694
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1695-.Lfunc_begin72       # >> Call Site 63 <<
	.uleb128 .Ltmp1698-.Ltmp1695            #   Call between .Ltmp1695 and .Ltmp1698
	.uleb128 .Ltmp1699-.Lfunc_begin72       #     jumps to .Ltmp1699
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1698-.Lfunc_begin72       # >> Call Site 64 <<
	.uleb128 .Ltmp1700-.Ltmp1698            #   Call between .Ltmp1698 and .Ltmp1700
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1700-.Lfunc_begin72       # >> Call Site 65 <<
	.uleb128 .Ltmp1701-.Ltmp1700            #   Call between .Ltmp1700 and .Ltmp1701
	.uleb128 .Ltmp1702-.Lfunc_begin72       #     jumps to .Ltmp1702
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1703-.Lfunc_begin72       # >> Call Site 66 <<
	.uleb128 .Ltmp1706-.Ltmp1703            #   Call between .Ltmp1703 and .Ltmp1706
	.uleb128 .Ltmp1707-.Lfunc_begin72       #     jumps to .Ltmp1707
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1706-.Lfunc_begin72       # >> Call Site 67 <<
	.uleb128 .Ltmp1708-.Ltmp1706            #   Call between .Ltmp1706 and .Ltmp1708
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1708-.Lfunc_begin72       # >> Call Site 68 <<
	.uleb128 .Ltmp1709-.Ltmp1708            #   Call between .Ltmp1708 and .Ltmp1709
	.uleb128 .Ltmp1710-.Lfunc_begin72       #     jumps to .Ltmp1710
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1711-.Lfunc_begin72       # >> Call Site 69 <<
	.uleb128 .Ltmp1714-.Ltmp1711            #   Call between .Ltmp1711 and .Ltmp1714
	.uleb128 .Ltmp1715-.Lfunc_begin72       #     jumps to .Ltmp1715
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1714-.Lfunc_begin72       # >> Call Site 70 <<
	.uleb128 .Ltmp1716-.Ltmp1714            #   Call between .Ltmp1714 and .Ltmp1716
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1716-.Lfunc_begin72       # >> Call Site 71 <<
	.uleb128 .Ltmp1717-.Ltmp1716            #   Call between .Ltmp1716 and .Ltmp1717
	.uleb128 .Ltmp1718-.Lfunc_begin72       #     jumps to .Ltmp1718
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1717-.Lfunc_begin72       # >> Call Site 72 <<
	.uleb128 .Ltmp1719-.Ltmp1717            #   Call between .Ltmp1717 and .Ltmp1719
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1719-.Lfunc_begin72       # >> Call Site 73 <<
	.uleb128 .Ltmp1722-.Ltmp1719            #   Call between .Ltmp1719 and .Ltmp1722
	.uleb128 .Ltmp1723-.Lfunc_begin72       #     jumps to .Ltmp1723
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1722-.Lfunc_begin72       # >> Call Site 74 <<
	.uleb128 .Ltmp1724-.Ltmp1722            #   Call between .Ltmp1722 and .Ltmp1724
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1724-.Lfunc_begin72       # >> Call Site 75 <<
	.uleb128 .Ltmp1725-.Ltmp1724            #   Call between .Ltmp1724 and .Ltmp1725
	.uleb128 .Ltmp1726-.Lfunc_begin72       #     jumps to .Ltmp1726
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1725-.Lfunc_begin72       # >> Call Site 76 <<
	.uleb128 .Ltmp1727-.Ltmp1725            #   Call between .Ltmp1725 and .Ltmp1727
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1727-.Lfunc_begin72       # >> Call Site 77 <<
	.uleb128 .Ltmp1730-.Ltmp1727            #   Call between .Ltmp1727 and .Ltmp1730
	.uleb128 .Ltmp1731-.Lfunc_begin72       #     jumps to .Ltmp1731
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1730-.Lfunc_begin72       # >> Call Site 78 <<
	.uleb128 .Ltmp1732-.Ltmp1730            #   Call between .Ltmp1730 and .Ltmp1732
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1732-.Lfunc_begin72       # >> Call Site 79 <<
	.uleb128 .Ltmp1733-.Ltmp1732            #   Call between .Ltmp1732 and .Ltmp1733
	.uleb128 .Ltmp1734-.Lfunc_begin72       #     jumps to .Ltmp1734
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1735-.Lfunc_begin72       # >> Call Site 80 <<
	.uleb128 .Ltmp1738-.Ltmp1735            #   Call between .Ltmp1735 and .Ltmp1738
	.uleb128 .Ltmp1739-.Lfunc_begin72       #     jumps to .Ltmp1739
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1738-.Lfunc_begin72       # >> Call Site 81 <<
	.uleb128 .Ltmp1740-.Ltmp1738            #   Call between .Ltmp1738 and .Ltmp1740
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1740-.Lfunc_begin72       # >> Call Site 82 <<
	.uleb128 .Ltmp1741-.Ltmp1740            #   Call between .Ltmp1740 and .Ltmp1741
	.uleb128 .Ltmp1742-.Lfunc_begin72       #     jumps to .Ltmp1742
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1743-.Lfunc_begin72       # >> Call Site 83 <<
	.uleb128 .Ltmp1746-.Ltmp1743            #   Call between .Ltmp1743 and .Ltmp1746
	.uleb128 .Ltmp1747-.Lfunc_begin72       #     jumps to .Ltmp1747
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1746-.Lfunc_begin72       # >> Call Site 84 <<
	.uleb128 .Ltmp1748-.Ltmp1746            #   Call between .Ltmp1746 and .Ltmp1748
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1748-.Lfunc_begin72       # >> Call Site 85 <<
	.uleb128 .Ltmp1749-.Ltmp1748            #   Call between .Ltmp1748 and .Ltmp1749
	.uleb128 .Ltmp1750-.Lfunc_begin72       #     jumps to .Ltmp1750
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1751-.Lfunc_begin72       # >> Call Site 86 <<
	.uleb128 .Ltmp1754-.Ltmp1751            #   Call between .Ltmp1751 and .Ltmp1754
	.uleb128 .Ltmp1755-.Lfunc_begin72       #     jumps to .Ltmp1755
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1754-.Lfunc_begin72       # >> Call Site 87 <<
	.uleb128 .Ltmp1756-.Ltmp1754            #   Call between .Ltmp1754 and .Ltmp1756
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1756-.Lfunc_begin72       # >> Call Site 88 <<
	.uleb128 .Ltmp1757-.Ltmp1756            #   Call between .Ltmp1756 and .Ltmp1757
	.uleb128 .Ltmp1758-.Lfunc_begin72       #     jumps to .Ltmp1758
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1759-.Lfunc_begin72       # >> Call Site 89 <<
	.uleb128 .Ltmp1762-.Ltmp1759            #   Call between .Ltmp1759 and .Ltmp1762
	.uleb128 .Ltmp1763-.Lfunc_begin72       #     jumps to .Ltmp1763
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1762-.Lfunc_begin72       # >> Call Site 90 <<
	.uleb128 .Ltmp1764-.Ltmp1762            #   Call between .Ltmp1762 and .Ltmp1764
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1764-.Lfunc_begin72       # >> Call Site 91 <<
	.uleb128 .Ltmp1765-.Ltmp1764            #   Call between .Ltmp1764 and .Ltmp1765
	.uleb128 .Ltmp1766-.Lfunc_begin72       #     jumps to .Ltmp1766
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1765-.Lfunc_begin72       # >> Call Site 92 <<
	.uleb128 .Ltmp1767-.Ltmp1765            #   Call between .Ltmp1765 and .Ltmp1767
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1767-.Lfunc_begin72       # >> Call Site 93 <<
	.uleb128 .Ltmp1770-.Ltmp1767            #   Call between .Ltmp1767 and .Ltmp1770
	.uleb128 .Ltmp1771-.Lfunc_begin72       #     jumps to .Ltmp1771
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1770-.Lfunc_begin72       # >> Call Site 94 <<
	.uleb128 .Ltmp1772-.Ltmp1770            #   Call between .Ltmp1770 and .Ltmp1772
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1772-.Lfunc_begin72       # >> Call Site 95 <<
	.uleb128 .Ltmp1773-.Ltmp1772            #   Call between .Ltmp1772 and .Ltmp1773
	.uleb128 .Ltmp1774-.Lfunc_begin72       #     jumps to .Ltmp1774
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1773-.Lfunc_begin72       # >> Call Site 96 <<
	.uleb128 .Ltmp1775-.Ltmp1773            #   Call between .Ltmp1773 and .Ltmp1775
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1775-.Lfunc_begin72       # >> Call Site 97 <<
	.uleb128 .Ltmp1778-.Ltmp1775            #   Call between .Ltmp1775 and .Ltmp1778
	.uleb128 .Ltmp1779-.Lfunc_begin72       #     jumps to .Ltmp1779
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1778-.Lfunc_begin72       # >> Call Site 98 <<
	.uleb128 .Ltmp1780-.Ltmp1778            #   Call between .Ltmp1778 and .Ltmp1780
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1780-.Lfunc_begin72       # >> Call Site 99 <<
	.uleb128 .Ltmp1781-.Ltmp1780            #   Call between .Ltmp1780 and .Ltmp1781
	.uleb128 .Ltmp1782-.Lfunc_begin72       #     jumps to .Ltmp1782
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1783-.Lfunc_begin72       # >> Call Site 100 <<
	.uleb128 .Ltmp1786-.Ltmp1783            #   Call between .Ltmp1783 and .Ltmp1786
	.uleb128 .Ltmp1787-.Lfunc_begin72       #     jumps to .Ltmp1787
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1786-.Lfunc_begin72       # >> Call Site 101 <<
	.uleb128 .Ltmp1788-.Ltmp1786            #   Call between .Ltmp1786 and .Ltmp1788
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1788-.Lfunc_begin72       # >> Call Site 102 <<
	.uleb128 .Ltmp1789-.Ltmp1788            #   Call between .Ltmp1788 and .Ltmp1789
	.uleb128 .Ltmp1790-.Lfunc_begin72       #     jumps to .Ltmp1790
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1791-.Lfunc_begin72       # >> Call Site 103 <<
	.uleb128 .Ltmp1794-.Ltmp1791            #   Call between .Ltmp1791 and .Ltmp1794
	.uleb128 .Ltmp1795-.Lfunc_begin72       #     jumps to .Ltmp1795
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1794-.Lfunc_begin72       # >> Call Site 104 <<
	.uleb128 .Ltmp1796-.Ltmp1794            #   Call between .Ltmp1794 and .Ltmp1796
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1796-.Lfunc_begin72       # >> Call Site 105 <<
	.uleb128 .Ltmp1797-.Ltmp1796            #   Call between .Ltmp1796 and .Ltmp1797
	.uleb128 .Ltmp1798-.Lfunc_begin72       #     jumps to .Ltmp1798
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1799-.Lfunc_begin72       # >> Call Site 106 <<
	.uleb128 .Ltmp1802-.Ltmp1799            #   Call between .Ltmp1799 and .Ltmp1802
	.uleb128 .Ltmp1803-.Lfunc_begin72       #     jumps to .Ltmp1803
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1802-.Lfunc_begin72       # >> Call Site 107 <<
	.uleb128 .Ltmp1804-.Ltmp1802            #   Call between .Ltmp1802 and .Ltmp1804
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1804-.Lfunc_begin72       # >> Call Site 108 <<
	.uleb128 .Ltmp1805-.Ltmp1804            #   Call between .Ltmp1804 and .Ltmp1805
	.uleb128 .Ltmp1806-.Lfunc_begin72       #     jumps to .Ltmp1806
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1807-.Lfunc_begin72       # >> Call Site 109 <<
	.uleb128 .Ltmp1810-.Ltmp1807            #   Call between .Ltmp1807 and .Ltmp1810
	.uleb128 .Ltmp1811-.Lfunc_begin72       #     jumps to .Ltmp1811
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1810-.Lfunc_begin72       # >> Call Site 110 <<
	.uleb128 .Ltmp1812-.Ltmp1810            #   Call between .Ltmp1810 and .Ltmp1812
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1812-.Lfunc_begin72       # >> Call Site 111 <<
	.uleb128 .Ltmp1813-.Ltmp1812            #   Call between .Ltmp1812 and .Ltmp1813
	.uleb128 .Ltmp1814-.Lfunc_begin72       #     jumps to .Ltmp1814
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1813-.Lfunc_begin72       # >> Call Site 112 <<
	.uleb128 .Ltmp1815-.Ltmp1813            #   Call between .Ltmp1813 and .Ltmp1815
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1815-.Lfunc_begin72       # >> Call Site 113 <<
	.uleb128 .Ltmp1818-.Ltmp1815            #   Call between .Ltmp1815 and .Ltmp1818
	.uleb128 .Ltmp1819-.Lfunc_begin72       #     jumps to .Ltmp1819
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1818-.Lfunc_begin72       # >> Call Site 114 <<
	.uleb128 .Ltmp1820-.Ltmp1818            #   Call between .Ltmp1818 and .Ltmp1820
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1820-.Lfunc_begin72       # >> Call Site 115 <<
	.uleb128 .Ltmp1821-.Ltmp1820            #   Call between .Ltmp1820 and .Ltmp1821
	.uleb128 .Ltmp1822-.Lfunc_begin72       #     jumps to .Ltmp1822
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1821-.Lfunc_begin72       # >> Call Site 116 <<
	.uleb128 .Ltmp1823-.Ltmp1821            #   Call between .Ltmp1821 and .Ltmp1823
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1823-.Lfunc_begin72       # >> Call Site 117 <<
	.uleb128 .Ltmp1826-.Ltmp1823            #   Call between .Ltmp1823 and .Ltmp1826
	.uleb128 .Ltmp1827-.Lfunc_begin72       #     jumps to .Ltmp1827
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1826-.Lfunc_begin72       # >> Call Site 118 <<
	.uleb128 .Ltmp1828-.Ltmp1826            #   Call between .Ltmp1826 and .Ltmp1828
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1828-.Lfunc_begin72       # >> Call Site 119 <<
	.uleb128 .Ltmp1829-.Ltmp1828            #   Call between .Ltmp1828 and .Ltmp1829
	.uleb128 .Ltmp1830-.Lfunc_begin72       #     jumps to .Ltmp1830
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1831-.Lfunc_begin72       # >> Call Site 120 <<
	.uleb128 .Ltmp1834-.Ltmp1831            #   Call between .Ltmp1831 and .Ltmp1834
	.uleb128 .Ltmp1835-.Lfunc_begin72       #     jumps to .Ltmp1835
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1834-.Lfunc_begin72       # >> Call Site 121 <<
	.uleb128 .Ltmp1836-.Ltmp1834            #   Call between .Ltmp1834 and .Ltmp1836
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1836-.Lfunc_begin72       # >> Call Site 122 <<
	.uleb128 .Ltmp1837-.Ltmp1836            #   Call between .Ltmp1836 and .Ltmp1837
	.uleb128 .Ltmp1838-.Lfunc_begin72       #     jumps to .Ltmp1838
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1839-.Lfunc_begin72       # >> Call Site 123 <<
	.uleb128 .Ltmp1842-.Ltmp1839            #   Call between .Ltmp1839 and .Ltmp1842
	.uleb128 .Ltmp1843-.Lfunc_begin72       #     jumps to .Ltmp1843
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1842-.Lfunc_begin72       # >> Call Site 124 <<
	.uleb128 .Ltmp1844-.Ltmp1842            #   Call between .Ltmp1842 and .Ltmp1844
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1844-.Lfunc_begin72       # >> Call Site 125 <<
	.uleb128 .Ltmp1845-.Ltmp1844            #   Call between .Ltmp1844 and .Ltmp1845
	.uleb128 .Ltmp1846-.Lfunc_begin72       #     jumps to .Ltmp1846
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1847-.Lfunc_begin72       # >> Call Site 126 <<
	.uleb128 .Ltmp1850-.Ltmp1847            #   Call between .Ltmp1847 and .Ltmp1850
	.uleb128 .Ltmp1851-.Lfunc_begin72       #     jumps to .Ltmp1851
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1850-.Lfunc_begin72       # >> Call Site 127 <<
	.uleb128 .Ltmp1852-.Ltmp1850            #   Call between .Ltmp1850 and .Ltmp1852
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1852-.Lfunc_begin72       # >> Call Site 128 <<
	.uleb128 .Ltmp1853-.Ltmp1852            #   Call between .Ltmp1852 and .Ltmp1853
	.uleb128 .Ltmp1854-.Lfunc_begin72       #     jumps to .Ltmp1854
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1855-.Lfunc_begin72       # >> Call Site 129 <<
	.uleb128 .Ltmp1858-.Ltmp1855            #   Call between .Ltmp1855 and .Ltmp1858
	.uleb128 .Ltmp1859-.Lfunc_begin72       #     jumps to .Ltmp1859
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1858-.Lfunc_begin72       # >> Call Site 130 <<
	.uleb128 .Ltmp1860-.Ltmp1858            #   Call between .Ltmp1858 and .Ltmp1860
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1860-.Lfunc_begin72       # >> Call Site 131 <<
	.uleb128 .Ltmp1861-.Ltmp1860            #   Call between .Ltmp1860 and .Ltmp1861
	.uleb128 .Ltmp1862-.Lfunc_begin72       #     jumps to .Ltmp1862
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1861-.Lfunc_begin72       # >> Call Site 132 <<
	.uleb128 .Ltmp1863-.Ltmp1861            #   Call between .Ltmp1861 and .Ltmp1863
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1863-.Lfunc_begin72       # >> Call Site 133 <<
	.uleb128 .Ltmp1866-.Ltmp1863            #   Call between .Ltmp1863 and .Ltmp1866
	.uleb128 .Ltmp1867-.Lfunc_begin72       #     jumps to .Ltmp1867
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1866-.Lfunc_begin72       # >> Call Site 134 <<
	.uleb128 .Ltmp1868-.Ltmp1866            #   Call between .Ltmp1866 and .Ltmp1868
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1868-.Lfunc_begin72       # >> Call Site 135 <<
	.uleb128 .Ltmp1869-.Ltmp1868            #   Call between .Ltmp1868 and .Ltmp1869
	.uleb128 .Ltmp1870-.Lfunc_begin72       #     jumps to .Ltmp1870
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1869-.Lfunc_begin72       # >> Call Site 136 <<
	.uleb128 .Ltmp1871-.Ltmp1869            #   Call between .Ltmp1869 and .Ltmp1871
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1871-.Lfunc_begin72       # >> Call Site 137 <<
	.uleb128 .Ltmp1874-.Ltmp1871            #   Call between .Ltmp1871 and .Ltmp1874
	.uleb128 .Ltmp1875-.Lfunc_begin72       #     jumps to .Ltmp1875
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1874-.Lfunc_begin72       # >> Call Site 138 <<
	.uleb128 .Ltmp1876-.Ltmp1874            #   Call between .Ltmp1874 and .Ltmp1876
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1876-.Lfunc_begin72       # >> Call Site 139 <<
	.uleb128 .Ltmp1877-.Ltmp1876            #   Call between .Ltmp1876 and .Ltmp1877
	.uleb128 .Ltmp1878-.Lfunc_begin72       #     jumps to .Ltmp1878
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1879-.Lfunc_begin72       # >> Call Site 140 <<
	.uleb128 .Ltmp1882-.Ltmp1879            #   Call between .Ltmp1879 and .Ltmp1882
	.uleb128 .Ltmp1883-.Lfunc_begin72       #     jumps to .Ltmp1883
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1882-.Lfunc_begin72       # >> Call Site 141 <<
	.uleb128 .Ltmp1884-.Ltmp1882            #   Call between .Ltmp1882 and .Ltmp1884
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1884-.Lfunc_begin72       # >> Call Site 142 <<
	.uleb128 .Ltmp1885-.Ltmp1884            #   Call between .Ltmp1884 and .Ltmp1885
	.uleb128 .Ltmp1886-.Lfunc_begin72       #     jumps to .Ltmp1886
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1887-.Lfunc_begin72       # >> Call Site 143 <<
	.uleb128 .Ltmp1890-.Ltmp1887            #   Call between .Ltmp1887 and .Ltmp1890
	.uleb128 .Ltmp1891-.Lfunc_begin72       #     jumps to .Ltmp1891
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1890-.Lfunc_begin72       # >> Call Site 144 <<
	.uleb128 .Ltmp1892-.Ltmp1890            #   Call between .Ltmp1890 and .Ltmp1892
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1892-.Lfunc_begin72       # >> Call Site 145 <<
	.uleb128 .Ltmp1893-.Ltmp1892            #   Call between .Ltmp1892 and .Ltmp1893
	.uleb128 .Ltmp1894-.Lfunc_begin72       #     jumps to .Ltmp1894
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1895-.Lfunc_begin72       # >> Call Site 146 <<
	.uleb128 .Ltmp1898-.Ltmp1895            #   Call between .Ltmp1895 and .Ltmp1898
	.uleb128 .Ltmp1899-.Lfunc_begin72       #     jumps to .Ltmp1899
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1898-.Lfunc_begin72       # >> Call Site 147 <<
	.uleb128 .Ltmp1900-.Ltmp1898            #   Call between .Ltmp1898 and .Ltmp1900
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1900-.Lfunc_begin72       # >> Call Site 148 <<
	.uleb128 .Ltmp1901-.Ltmp1900            #   Call between .Ltmp1900 and .Ltmp1901
	.uleb128 .Ltmp1902-.Lfunc_begin72       #     jumps to .Ltmp1902
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1903-.Lfunc_begin72       # >> Call Site 149 <<
	.uleb128 .Ltmp1906-.Ltmp1903            #   Call between .Ltmp1903 and .Ltmp1906
	.uleb128 .Ltmp1907-.Lfunc_begin72       #     jumps to .Ltmp1907
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1906-.Lfunc_begin72       # >> Call Site 150 <<
	.uleb128 .Ltmp1908-.Ltmp1906            #   Call between .Ltmp1906 and .Ltmp1908
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1908-.Lfunc_begin72       # >> Call Site 151 <<
	.uleb128 .Ltmp1909-.Ltmp1908            #   Call between .Ltmp1908 and .Ltmp1909
	.uleb128 .Ltmp1910-.Lfunc_begin72       #     jumps to .Ltmp1910
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1909-.Lfunc_begin72       # >> Call Site 152 <<
	.uleb128 .Ltmp1911-.Ltmp1909            #   Call between .Ltmp1909 and .Ltmp1911
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1911-.Lfunc_begin72       # >> Call Site 153 <<
	.uleb128 .Ltmp1914-.Ltmp1911            #   Call between .Ltmp1911 and .Ltmp1914
	.uleb128 .Ltmp1915-.Lfunc_begin72       #     jumps to .Ltmp1915
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1914-.Lfunc_begin72       # >> Call Site 154 <<
	.uleb128 .Ltmp1916-.Ltmp1914            #   Call between .Ltmp1914 and .Ltmp1916
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1916-.Lfunc_begin72       # >> Call Site 155 <<
	.uleb128 .Ltmp1917-.Ltmp1916            #   Call between .Ltmp1916 and .Ltmp1917
	.uleb128 .Ltmp1918-.Lfunc_begin72       #     jumps to .Ltmp1918
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1917-.Lfunc_begin72       # >> Call Site 156 <<
	.uleb128 .Ltmp1919-.Ltmp1917            #   Call between .Ltmp1917 and .Ltmp1919
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1919-.Lfunc_begin72       # >> Call Site 157 <<
	.uleb128 .Ltmp1922-.Ltmp1919            #   Call between .Ltmp1919 and .Ltmp1922
	.uleb128 .Ltmp1923-.Lfunc_begin72       #     jumps to .Ltmp1923
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1922-.Lfunc_begin72       # >> Call Site 158 <<
	.uleb128 .Ltmp1924-.Ltmp1922            #   Call between .Ltmp1922 and .Ltmp1924
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1924-.Lfunc_begin72       # >> Call Site 159 <<
	.uleb128 .Ltmp1925-.Ltmp1924            #   Call between .Ltmp1924 and .Ltmp1925
	.uleb128 .Ltmp1926-.Lfunc_begin72       #     jumps to .Ltmp1926
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1927-.Lfunc_begin72       # >> Call Site 160 <<
	.uleb128 .Ltmp1930-.Ltmp1927            #   Call between .Ltmp1927 and .Ltmp1930
	.uleb128 .Ltmp1931-.Lfunc_begin72       #     jumps to .Ltmp1931
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1930-.Lfunc_begin72       # >> Call Site 161 <<
	.uleb128 .Ltmp1932-.Ltmp1930            #   Call between .Ltmp1930 and .Ltmp1932
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1932-.Lfunc_begin72       # >> Call Site 162 <<
	.uleb128 .Ltmp1933-.Ltmp1932            #   Call between .Ltmp1932 and .Ltmp1933
	.uleb128 .Ltmp1934-.Lfunc_begin72       #     jumps to .Ltmp1934
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1935-.Lfunc_begin72       # >> Call Site 163 <<
	.uleb128 .Ltmp1938-.Ltmp1935            #   Call between .Ltmp1935 and .Ltmp1938
	.uleb128 .Ltmp1939-.Lfunc_begin72       #     jumps to .Ltmp1939
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1938-.Lfunc_begin72       # >> Call Site 164 <<
	.uleb128 .Ltmp1940-.Ltmp1938            #   Call between .Ltmp1938 and .Ltmp1940
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1940-.Lfunc_begin72       # >> Call Site 165 <<
	.uleb128 .Ltmp1941-.Ltmp1940            #   Call between .Ltmp1940 and .Ltmp1941
	.uleb128 .Ltmp1942-.Lfunc_begin72       #     jumps to .Ltmp1942
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1943-.Lfunc_begin72       # >> Call Site 166 <<
	.uleb128 .Ltmp1946-.Ltmp1943            #   Call between .Ltmp1943 and .Ltmp1946
	.uleb128 .Ltmp1947-.Lfunc_begin72       #     jumps to .Ltmp1947
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1946-.Lfunc_begin72       # >> Call Site 167 <<
	.uleb128 .Ltmp1948-.Ltmp1946            #   Call between .Ltmp1946 and .Ltmp1948
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1948-.Lfunc_begin72       # >> Call Site 168 <<
	.uleb128 .Ltmp1949-.Ltmp1948            #   Call between .Ltmp1948 and .Ltmp1949
	.uleb128 .Ltmp1950-.Lfunc_begin72       #     jumps to .Ltmp1950
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1951-.Lfunc_begin72       # >> Call Site 169 <<
	.uleb128 .Ltmp1954-.Ltmp1951            #   Call between .Ltmp1951 and .Ltmp1954
	.uleb128 .Ltmp1955-.Lfunc_begin72       #     jumps to .Ltmp1955
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1954-.Lfunc_begin72       # >> Call Site 170 <<
	.uleb128 .Ltmp1956-.Ltmp1954            #   Call between .Ltmp1954 and .Ltmp1956
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1956-.Lfunc_begin72       # >> Call Site 171 <<
	.uleb128 .Ltmp1957-.Ltmp1956            #   Call between .Ltmp1956 and .Ltmp1957
	.uleb128 .Ltmp1958-.Lfunc_begin72       #     jumps to .Ltmp1958
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1957-.Lfunc_begin72       # >> Call Site 172 <<
	.uleb128 .Ltmp1959-.Ltmp1957            #   Call between .Ltmp1957 and .Ltmp1959
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1959-.Lfunc_begin72       # >> Call Site 173 <<
	.uleb128 .Ltmp1962-.Ltmp1959            #   Call between .Ltmp1959 and .Ltmp1962
	.uleb128 .Ltmp1963-.Lfunc_begin72       #     jumps to .Ltmp1963
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1962-.Lfunc_begin72       # >> Call Site 174 <<
	.uleb128 .Ltmp1964-.Ltmp1962            #   Call between .Ltmp1962 and .Ltmp1964
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1964-.Lfunc_begin72       # >> Call Site 175 <<
	.uleb128 .Ltmp1965-.Ltmp1964            #   Call between .Ltmp1964 and .Ltmp1965
	.uleb128 .Ltmp1966-.Lfunc_begin72       #     jumps to .Ltmp1966
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1965-.Lfunc_begin72       # >> Call Site 176 <<
	.uleb128 .Ltmp1967-.Ltmp1965            #   Call between .Ltmp1965 and .Ltmp1967
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1967-.Lfunc_begin72       # >> Call Site 177 <<
	.uleb128 .Ltmp1970-.Ltmp1967            #   Call between .Ltmp1967 and .Ltmp1970
	.uleb128 .Ltmp1971-.Lfunc_begin72       #     jumps to .Ltmp1971
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1970-.Lfunc_begin72       # >> Call Site 178 <<
	.uleb128 .Ltmp1972-.Ltmp1970            #   Call between .Ltmp1970 and .Ltmp1972
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1972-.Lfunc_begin72       # >> Call Site 179 <<
	.uleb128 .Ltmp1973-.Ltmp1972            #   Call between .Ltmp1972 and .Ltmp1973
	.uleb128 .Ltmp1974-.Lfunc_begin72       #     jumps to .Ltmp1974
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1975-.Lfunc_begin72       # >> Call Site 180 <<
	.uleb128 .Ltmp1978-.Ltmp1975            #   Call between .Ltmp1975 and .Ltmp1978
	.uleb128 .Ltmp1979-.Lfunc_begin72       #     jumps to .Ltmp1979
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1978-.Lfunc_begin72       # >> Call Site 181 <<
	.uleb128 .Ltmp1980-.Ltmp1978            #   Call between .Ltmp1978 and .Ltmp1980
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1980-.Lfunc_begin72       # >> Call Site 182 <<
	.uleb128 .Ltmp1981-.Ltmp1980            #   Call between .Ltmp1980 and .Ltmp1981
	.uleb128 .Ltmp1982-.Lfunc_begin72       #     jumps to .Ltmp1982
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1983-.Lfunc_begin72       # >> Call Site 183 <<
	.uleb128 .Ltmp1986-.Ltmp1983            #   Call between .Ltmp1983 and .Ltmp1986
	.uleb128 .Ltmp1987-.Lfunc_begin72       #     jumps to .Ltmp1987
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1986-.Lfunc_begin72       # >> Call Site 184 <<
	.uleb128 .Ltmp1988-.Ltmp1986            #   Call between .Ltmp1986 and .Ltmp1988
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1988-.Lfunc_begin72       # >> Call Site 185 <<
	.uleb128 .Ltmp1989-.Ltmp1988            #   Call between .Ltmp1988 and .Ltmp1989
	.uleb128 .Ltmp1990-.Lfunc_begin72       #     jumps to .Ltmp1990
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1991-.Lfunc_begin72       # >> Call Site 186 <<
	.uleb128 .Ltmp1994-.Ltmp1991            #   Call between .Ltmp1991 and .Ltmp1994
	.uleb128 .Ltmp1995-.Lfunc_begin72       #     jumps to .Ltmp1995
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1994-.Lfunc_begin72       # >> Call Site 187 <<
	.uleb128 .Ltmp1996-.Ltmp1994            #   Call between .Ltmp1994 and .Ltmp1996
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1996-.Lfunc_begin72       # >> Call Site 188 <<
	.uleb128 .Ltmp1997-.Ltmp1996            #   Call between .Ltmp1996 and .Ltmp1997
	.uleb128 .Ltmp1998-.Lfunc_begin72       #     jumps to .Ltmp1998
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1999-.Lfunc_begin72       # >> Call Site 189 <<
	.uleb128 .Ltmp2002-.Ltmp1999            #   Call between .Ltmp1999 and .Ltmp2002
	.uleb128 .Ltmp2003-.Lfunc_begin72       #     jumps to .Ltmp2003
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2002-.Lfunc_begin72       # >> Call Site 190 <<
	.uleb128 .Ltmp2004-.Ltmp2002            #   Call between .Ltmp2002 and .Ltmp2004
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2004-.Lfunc_begin72       # >> Call Site 191 <<
	.uleb128 .Ltmp2005-.Ltmp2004            #   Call between .Ltmp2004 and .Ltmp2005
	.uleb128 .Ltmp2006-.Lfunc_begin72       #     jumps to .Ltmp2006
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2005-.Lfunc_begin72       # >> Call Site 192 <<
	.uleb128 .Ltmp2007-.Ltmp2005            #   Call between .Ltmp2005 and .Ltmp2007
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2007-.Lfunc_begin72       # >> Call Site 193 <<
	.uleb128 .Ltmp2010-.Ltmp2007            #   Call between .Ltmp2007 and .Ltmp2010
	.uleb128 .Ltmp2011-.Lfunc_begin72       #     jumps to .Ltmp2011
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2010-.Lfunc_begin72       # >> Call Site 194 <<
	.uleb128 .Ltmp2012-.Ltmp2010            #   Call between .Ltmp2010 and .Ltmp2012
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2012-.Lfunc_begin72       # >> Call Site 195 <<
	.uleb128 .Ltmp2013-.Ltmp2012            #   Call between .Ltmp2012 and .Ltmp2013
	.uleb128 .Ltmp2014-.Lfunc_begin72       #     jumps to .Ltmp2014
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2013-.Lfunc_begin72       # >> Call Site 196 <<
	.uleb128 .Ltmp2015-.Ltmp2013            #   Call between .Ltmp2013 and .Ltmp2015
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2015-.Lfunc_begin72       # >> Call Site 197 <<
	.uleb128 .Ltmp2018-.Ltmp2015            #   Call between .Ltmp2015 and .Ltmp2018
	.uleb128 .Ltmp2019-.Lfunc_begin72       #     jumps to .Ltmp2019
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2018-.Lfunc_begin72       # >> Call Site 198 <<
	.uleb128 .Ltmp2020-.Ltmp2018            #   Call between .Ltmp2018 and .Ltmp2020
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2020-.Lfunc_begin72       # >> Call Site 199 <<
	.uleb128 .Ltmp2021-.Ltmp2020            #   Call between .Ltmp2020 and .Ltmp2021
	.uleb128 .Ltmp2022-.Lfunc_begin72       #     jumps to .Ltmp2022
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2023-.Lfunc_begin72       # >> Call Site 200 <<
	.uleb128 .Ltmp2026-.Ltmp2023            #   Call between .Ltmp2023 and .Ltmp2026
	.uleb128 .Ltmp2027-.Lfunc_begin72       #     jumps to .Ltmp2027
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2026-.Lfunc_begin72       # >> Call Site 201 <<
	.uleb128 .Ltmp2028-.Ltmp2026            #   Call between .Ltmp2026 and .Ltmp2028
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2028-.Lfunc_begin72       # >> Call Site 202 <<
	.uleb128 .Ltmp2029-.Ltmp2028            #   Call between .Ltmp2028 and .Ltmp2029
	.uleb128 .Ltmp2030-.Lfunc_begin72       #     jumps to .Ltmp2030
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2031-.Lfunc_begin72       # >> Call Site 203 <<
	.uleb128 .Ltmp2034-.Ltmp2031            #   Call between .Ltmp2031 and .Ltmp2034
	.uleb128 .Ltmp2035-.Lfunc_begin72       #     jumps to .Ltmp2035
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2034-.Lfunc_begin72       # >> Call Site 204 <<
	.uleb128 .Ltmp2036-.Ltmp2034            #   Call between .Ltmp2034 and .Ltmp2036
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2036-.Lfunc_begin72       # >> Call Site 205 <<
	.uleb128 .Ltmp2037-.Ltmp2036            #   Call between .Ltmp2036 and .Ltmp2037
	.uleb128 .Ltmp2038-.Lfunc_begin72       #     jumps to .Ltmp2038
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2039-.Lfunc_begin72       # >> Call Site 206 <<
	.uleb128 .Ltmp2042-.Ltmp2039            #   Call between .Ltmp2039 and .Ltmp2042
	.uleb128 .Ltmp2043-.Lfunc_begin72       #     jumps to .Ltmp2043
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2042-.Lfunc_begin72       # >> Call Site 207 <<
	.uleb128 .Ltmp2044-.Ltmp2042            #   Call between .Ltmp2042 and .Ltmp2044
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2044-.Lfunc_begin72       # >> Call Site 208 <<
	.uleb128 .Ltmp2045-.Ltmp2044            #   Call between .Ltmp2044 and .Ltmp2045
	.uleb128 .Ltmp2046-.Lfunc_begin72       #     jumps to .Ltmp2046
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2047-.Lfunc_begin72       # >> Call Site 209 <<
	.uleb128 .Ltmp2050-.Ltmp2047            #   Call between .Ltmp2047 and .Ltmp2050
	.uleb128 .Ltmp2051-.Lfunc_begin72       #     jumps to .Ltmp2051
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2050-.Lfunc_begin72       # >> Call Site 210 <<
	.uleb128 .Ltmp2052-.Ltmp2050            #   Call between .Ltmp2050 and .Ltmp2052
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2052-.Lfunc_begin72       # >> Call Site 211 <<
	.uleb128 .Ltmp2053-.Ltmp2052            #   Call between .Ltmp2052 and .Ltmp2053
	.uleb128 .Ltmp2054-.Lfunc_begin72       #     jumps to .Ltmp2054
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2053-.Lfunc_begin72       # >> Call Site 212 <<
	.uleb128 .Ltmp2055-.Ltmp2053            #   Call between .Ltmp2053 and .Ltmp2055
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2055-.Lfunc_begin72       # >> Call Site 213 <<
	.uleb128 .Ltmp2058-.Ltmp2055            #   Call between .Ltmp2055 and .Ltmp2058
	.uleb128 .Ltmp2059-.Lfunc_begin72       #     jumps to .Ltmp2059
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2058-.Lfunc_begin72       # >> Call Site 214 <<
	.uleb128 .Ltmp2060-.Ltmp2058            #   Call between .Ltmp2058 and .Ltmp2060
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2060-.Lfunc_begin72       # >> Call Site 215 <<
	.uleb128 .Ltmp2061-.Ltmp2060            #   Call between .Ltmp2060 and .Ltmp2061
	.uleb128 .Ltmp2062-.Lfunc_begin72       #     jumps to .Ltmp2062
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2061-.Lfunc_begin72       # >> Call Site 216 <<
	.uleb128 .Ltmp2063-.Ltmp2061            #   Call between .Ltmp2061 and .Ltmp2063
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2063-.Lfunc_begin72       # >> Call Site 217 <<
	.uleb128 .Ltmp2066-.Ltmp2063            #   Call between .Ltmp2063 and .Ltmp2066
	.uleb128 .Ltmp2067-.Lfunc_begin72       #     jumps to .Ltmp2067
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2066-.Lfunc_begin72       # >> Call Site 218 <<
	.uleb128 .Ltmp2068-.Ltmp2066            #   Call between .Ltmp2066 and .Ltmp2068
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2068-.Lfunc_begin72       # >> Call Site 219 <<
	.uleb128 .Ltmp2069-.Ltmp2068            #   Call between .Ltmp2068 and .Ltmp2069
	.uleb128 .Ltmp2070-.Lfunc_begin72       #     jumps to .Ltmp2070
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2071-.Lfunc_begin72       # >> Call Site 220 <<
	.uleb128 .Ltmp2074-.Ltmp2071            #   Call between .Ltmp2071 and .Ltmp2074
	.uleb128 .Ltmp2075-.Lfunc_begin72       #     jumps to .Ltmp2075
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2074-.Lfunc_begin72       # >> Call Site 221 <<
	.uleb128 .Ltmp2076-.Ltmp2074            #   Call between .Ltmp2074 and .Ltmp2076
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2076-.Lfunc_begin72       # >> Call Site 222 <<
	.uleb128 .Ltmp2077-.Ltmp2076            #   Call between .Ltmp2076 and .Ltmp2077
	.uleb128 .Ltmp2078-.Lfunc_begin72       #     jumps to .Ltmp2078
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2079-.Lfunc_begin72       # >> Call Site 223 <<
	.uleb128 .Ltmp2082-.Ltmp2079            #   Call between .Ltmp2079 and .Ltmp2082
	.uleb128 .Ltmp2083-.Lfunc_begin72       #     jumps to .Ltmp2083
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2082-.Lfunc_begin72       # >> Call Site 224 <<
	.uleb128 .Ltmp2084-.Ltmp2082            #   Call between .Ltmp2082 and .Ltmp2084
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2084-.Lfunc_begin72       # >> Call Site 225 <<
	.uleb128 .Ltmp2085-.Ltmp2084            #   Call between .Ltmp2084 and .Ltmp2085
	.uleb128 .Ltmp2086-.Lfunc_begin72       #     jumps to .Ltmp2086
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2087-.Lfunc_begin72       # >> Call Site 226 <<
	.uleb128 .Ltmp2090-.Ltmp2087            #   Call between .Ltmp2087 and .Ltmp2090
	.uleb128 .Ltmp2091-.Lfunc_begin72       #     jumps to .Ltmp2091
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2090-.Lfunc_begin72       # >> Call Site 227 <<
	.uleb128 .Ltmp2092-.Ltmp2090            #   Call between .Ltmp2090 and .Ltmp2092
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2092-.Lfunc_begin72       # >> Call Site 228 <<
	.uleb128 .Ltmp2093-.Ltmp2092            #   Call between .Ltmp2092 and .Ltmp2093
	.uleb128 .Ltmp2094-.Lfunc_begin72       #     jumps to .Ltmp2094
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2095-.Lfunc_begin72       # >> Call Site 229 <<
	.uleb128 .Ltmp2098-.Ltmp2095            #   Call between .Ltmp2095 and .Ltmp2098
	.uleb128 .Ltmp2099-.Lfunc_begin72       #     jumps to .Ltmp2099
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2098-.Lfunc_begin72       # >> Call Site 230 <<
	.uleb128 .Ltmp2100-.Ltmp2098            #   Call between .Ltmp2098 and .Ltmp2100
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2100-.Lfunc_begin72       # >> Call Site 231 <<
	.uleb128 .Ltmp2101-.Ltmp2100            #   Call between .Ltmp2100 and .Ltmp2101
	.uleb128 .Ltmp2102-.Lfunc_begin72       #     jumps to .Ltmp2102
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2101-.Lfunc_begin72       # >> Call Site 232 <<
	.uleb128 .Ltmp2103-.Ltmp2101            #   Call between .Ltmp2101 and .Ltmp2103
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2103-.Lfunc_begin72       # >> Call Site 233 <<
	.uleb128 .Ltmp2106-.Ltmp2103            #   Call between .Ltmp2103 and .Ltmp2106
	.uleb128 .Ltmp2107-.Lfunc_begin72       #     jumps to .Ltmp2107
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2106-.Lfunc_begin72       # >> Call Site 234 <<
	.uleb128 .Ltmp2108-.Ltmp2106            #   Call between .Ltmp2106 and .Ltmp2108
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2108-.Lfunc_begin72       # >> Call Site 235 <<
	.uleb128 .Ltmp2109-.Ltmp2108            #   Call between .Ltmp2108 and .Ltmp2109
	.uleb128 .Ltmp2110-.Lfunc_begin72       #     jumps to .Ltmp2110
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2109-.Lfunc_begin72       # >> Call Site 236 <<
	.uleb128 .Ltmp2111-.Ltmp2109            #   Call between .Ltmp2109 and .Ltmp2111
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2111-.Lfunc_begin72       # >> Call Site 237 <<
	.uleb128 .Ltmp2114-.Ltmp2111            #   Call between .Ltmp2111 and .Ltmp2114
	.uleb128 .Ltmp2115-.Lfunc_begin72       #     jumps to .Ltmp2115
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2114-.Lfunc_begin72       # >> Call Site 238 <<
	.uleb128 .Ltmp2116-.Ltmp2114            #   Call between .Ltmp2114 and .Ltmp2116
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2116-.Lfunc_begin72       # >> Call Site 239 <<
	.uleb128 .Ltmp2117-.Ltmp2116            #   Call between .Ltmp2116 and .Ltmp2117
	.uleb128 .Ltmp2118-.Lfunc_begin72       #     jumps to .Ltmp2118
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2119-.Lfunc_begin72       # >> Call Site 240 <<
	.uleb128 .Ltmp2122-.Ltmp2119            #   Call between .Ltmp2119 and .Ltmp2122
	.uleb128 .Ltmp2123-.Lfunc_begin72       #     jumps to .Ltmp2123
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2122-.Lfunc_begin72       # >> Call Site 241 <<
	.uleb128 .Lfunc_end77-.Ltmp2122         #   Call between .Ltmp2122 and .Lfunc_end77
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end72:
	.p2align	2, 0x0
                                        # -- End function
	.type	_ZL3rng,@object                 # @_ZL3rng
	.local	_ZL3rng
	.comm	_ZL3rng,5000,8
	.type	_ZL27benchmark_uniq_2_benchmark_,@object # @_ZL27benchmark_uniq_2_benchmark_
	.local	_ZL27benchmark_uniq_2_benchmark_
	.comm	_ZL27benchmark_uniq_2_benchmark_,8,8
	.type	.L.str,@object                  # @.str
	.section	.rodata.str1.8,"aMS",@progbits,1
	.p2align	3, 0x0
.L.str:
	.asciz	"benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint8_t_"
	.size	.L.str, 61

	.type	_ZL27benchmark_uniq_3_benchmark_,@object # @_ZL27benchmark_uniq_3_benchmark_
	.local	_ZL27benchmark_uniq_3_benchmark_
	.comm	_ZL27benchmark_uniq_3_benchmark_,8,8
	.type	.L.str.4,@object                # @.str.4
	.p2align	3, 0x0
.L.str.4:
	.asciz	"benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint8_t_"
	.size	.L.str.4, 62

	.type	_ZL27benchmark_uniq_4_benchmark_,@object # @_ZL27benchmark_uniq_4_benchmark_
	.local	_ZL27benchmark_uniq_4_benchmark_
	.comm	_ZL27benchmark_uniq_4_benchmark_,8,8
	.type	.L.str.6,@object                # @.str.6
	.p2align	3, 0x0
.L.str.6:
	.asciz	"benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint8_t_"
	.size	.L.str.6, 54

	.type	_ZL27benchmark_uniq_5_benchmark_,@object # @_ZL27benchmark_uniq_5_benchmark_
	.local	_ZL27benchmark_uniq_5_benchmark_
	.comm	_ZL27benchmark_uniq_5_benchmark_,8,8
	.type	.L.str.8,@object                # @.str.8
	.p2align	3, 0x0
.L.str.8:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint8_t_"
	.size	.L.str.8, 68

	.type	_ZL27benchmark_uniq_6_benchmark_,@object # @_ZL27benchmark_uniq_6_benchmark_
	.local	_ZL27benchmark_uniq_6_benchmark_
	.comm	_ZL27benchmark_uniq_6_benchmark_,8,8
	.type	.L.str.10,@object               # @.str.10
	.p2align	3, 0x0
.L.str.10:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint8_t_"
	.size	.L.str.10, 69

	.type	_ZL27benchmark_uniq_7_benchmark_,@object # @_ZL27benchmark_uniq_7_benchmark_
	.local	_ZL27benchmark_uniq_7_benchmark_
	.comm	_ZL27benchmark_uniq_7_benchmark_,8,8
	.type	.L.str.12,@object               # @.str.12
	.p2align	3, 0x0
.L.str.12:
	.asciz	"benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint8_t_"
	.size	.L.str.12, 61

	.type	_ZL27benchmark_uniq_8_benchmark_,@object # @_ZL27benchmark_uniq_8_benchmark_
	.local	_ZL27benchmark_uniq_8_benchmark_
	.comm	_ZL27benchmark_uniq_8_benchmark_,8,8
	.type	.L.str.14,@object               # @.str.14
	.p2align	3, 0x0
.L.str.14:
	.asciz	"benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint8_t_"
	.size	.L.str.14, 61

	.type	_ZL27benchmark_uniq_9_benchmark_,@object # @_ZL27benchmark_uniq_9_benchmark_
	.local	_ZL27benchmark_uniq_9_benchmark_
	.comm	_ZL27benchmark_uniq_9_benchmark_,8,8
	.type	.L.str.16,@object               # @.str.16
	.p2align	3, 0x0
.L.str.16:
	.asciz	"benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint8_t_"
	.size	.L.str.16, 62

	.type	_ZL28benchmark_uniq_10_benchmark_,@object # @_ZL28benchmark_uniq_10_benchmark_
	.local	_ZL28benchmark_uniq_10_benchmark_
	.comm	_ZL28benchmark_uniq_10_benchmark_,8,8
	.type	.L.str.18,@object               # @.str.18
	.p2align	3, 0x0
.L.str.18:
	.asciz	"benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint8_t_"
	.size	.L.str.18, 54

	.type	_ZL28benchmark_uniq_11_benchmark_,@object # @_ZL28benchmark_uniq_11_benchmark_
	.local	_ZL28benchmark_uniq_11_benchmark_
	.comm	_ZL28benchmark_uniq_11_benchmark_,8,8
	.type	.L.str.20,@object               # @.str.20
	.p2align	3, 0x0
.L.str.20:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint8_t_"
	.size	.L.str.20, 68

	.type	_ZL28benchmark_uniq_12_benchmark_,@object # @_ZL28benchmark_uniq_12_benchmark_
	.local	_ZL28benchmark_uniq_12_benchmark_
	.comm	_ZL28benchmark_uniq_12_benchmark_,8,8
	.type	.L.str.22,@object               # @.str.22
	.p2align	3, 0x0
.L.str.22:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint8_t_"
	.size	.L.str.22, 69

	.type	_ZL28benchmark_uniq_13_benchmark_,@object # @_ZL28benchmark_uniq_13_benchmark_
	.local	_ZL28benchmark_uniq_13_benchmark_
	.comm	_ZL28benchmark_uniq_13_benchmark_,8,8
	.type	.L.str.24,@object               # @.str.24
	.p2align	3, 0x0
.L.str.24:
	.asciz	"benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint8_t_"
	.size	.L.str.24, 61

	.type	_ZL28benchmark_uniq_14_benchmark_,@object # @_ZL28benchmark_uniq_14_benchmark_
	.local	_ZL28benchmark_uniq_14_benchmark_
	.comm	_ZL28benchmark_uniq_14_benchmark_,8,8
	.type	.L.str.26,@object               # @.str.26
	.p2align	3, 0x0
.L.str.26:
	.asciz	"benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint8_t_"
	.size	.L.str.26, 61

	.type	_ZL28benchmark_uniq_15_benchmark_,@object # @_ZL28benchmark_uniq_15_benchmark_
	.local	_ZL28benchmark_uniq_15_benchmark_
	.comm	_ZL28benchmark_uniq_15_benchmark_,8,8
	.type	.L.str.28,@object               # @.str.28
	.p2align	3, 0x0
.L.str.28:
	.asciz	"benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint8_t_"
	.size	.L.str.28, 62

	.type	_ZL28benchmark_uniq_16_benchmark_,@object # @_ZL28benchmark_uniq_16_benchmark_
	.local	_ZL28benchmark_uniq_16_benchmark_
	.comm	_ZL28benchmark_uniq_16_benchmark_,8,8
	.type	.L.str.30,@object               # @.str.30
	.p2align	3, 0x0
.L.str.30:
	.asciz	"benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint8_t_"
	.size	.L.str.30, 54

	.type	_ZL28benchmark_uniq_17_benchmark_,@object # @_ZL28benchmark_uniq_17_benchmark_
	.local	_ZL28benchmark_uniq_17_benchmark_
	.comm	_ZL28benchmark_uniq_17_benchmark_,8,8
	.type	.L.str.32,@object               # @.str.32
	.p2align	3, 0x0
.L.str.32:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint8_t_"
	.size	.L.str.32, 68

	.type	_ZL28benchmark_uniq_18_benchmark_,@object # @_ZL28benchmark_uniq_18_benchmark_
	.local	_ZL28benchmark_uniq_18_benchmark_
	.comm	_ZL28benchmark_uniq_18_benchmark_,8,8
	.type	.L.str.34,@object               # @.str.34
	.p2align	3, 0x0
.L.str.34:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint8_t_"
	.size	.L.str.34, 69

	.type	_ZL28benchmark_uniq_19_benchmark_,@object # @_ZL28benchmark_uniq_19_benchmark_
	.local	_ZL28benchmark_uniq_19_benchmark_
	.comm	_ZL28benchmark_uniq_19_benchmark_,8,8
	.type	.L.str.36,@object               # @.str.36
	.p2align	3, 0x0
.L.str.36:
	.asciz	"benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint8_t_"
	.size	.L.str.36, 61

	.type	_ZL28benchmark_uniq_20_benchmark_,@object # @_ZL28benchmark_uniq_20_benchmark_
	.local	_ZL28benchmark_uniq_20_benchmark_
	.comm	_ZL28benchmark_uniq_20_benchmark_,8,8
	.type	.L.str.38,@object               # @.str.38
	.p2align	3, 0x0
.L.str.38:
	.asciz	"benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint16_t_"
	.size	.L.str.38, 62

	.type	_ZL28benchmark_uniq_21_benchmark_,@object # @_ZL28benchmark_uniq_21_benchmark_
	.local	_ZL28benchmark_uniq_21_benchmark_
	.comm	_ZL28benchmark_uniq_21_benchmark_,8,8
	.type	.L.str.40,@object               # @.str.40
	.p2align	3, 0x0
.L.str.40:
	.asciz	"benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint16_t_"
	.size	.L.str.40, 63

	.type	_ZL28benchmark_uniq_22_benchmark_,@object # @_ZL28benchmark_uniq_22_benchmark_
	.local	_ZL28benchmark_uniq_22_benchmark_
	.comm	_ZL28benchmark_uniq_22_benchmark_,8,8
	.type	.L.str.42,@object               # @.str.42
	.p2align	3, 0x0
.L.str.42:
	.asciz	"benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint16_t_"
	.size	.L.str.42, 55

	.type	_ZL28benchmark_uniq_23_benchmark_,@object # @_ZL28benchmark_uniq_23_benchmark_
	.local	_ZL28benchmark_uniq_23_benchmark_
	.comm	_ZL28benchmark_uniq_23_benchmark_,8,8
	.type	.L.str.44,@object               # @.str.44
	.p2align	3, 0x0
.L.str.44:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint16_t_"
	.size	.L.str.44, 69

	.type	_ZL28benchmark_uniq_24_benchmark_,@object # @_ZL28benchmark_uniq_24_benchmark_
	.local	_ZL28benchmark_uniq_24_benchmark_
	.comm	_ZL28benchmark_uniq_24_benchmark_,8,8
	.type	.L.str.46,@object               # @.str.46
	.p2align	3, 0x0
.L.str.46:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint16_t_"
	.size	.L.str.46, 70

	.type	_ZL28benchmark_uniq_25_benchmark_,@object # @_ZL28benchmark_uniq_25_benchmark_
	.local	_ZL28benchmark_uniq_25_benchmark_
	.comm	_ZL28benchmark_uniq_25_benchmark_,8,8
	.type	.L.str.48,@object               # @.str.48
	.p2align	3, 0x0
.L.str.48:
	.asciz	"benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint16_t_"
	.size	.L.str.48, 62

	.type	_ZL28benchmark_uniq_26_benchmark_,@object # @_ZL28benchmark_uniq_26_benchmark_
	.local	_ZL28benchmark_uniq_26_benchmark_
	.comm	_ZL28benchmark_uniq_26_benchmark_,8,8
	.type	.L.str.50,@object               # @.str.50
	.p2align	3, 0x0
.L.str.50:
	.asciz	"benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint16_t_"
	.size	.L.str.50, 62

	.type	_ZL28benchmark_uniq_27_benchmark_,@object # @_ZL28benchmark_uniq_27_benchmark_
	.local	_ZL28benchmark_uniq_27_benchmark_
	.comm	_ZL28benchmark_uniq_27_benchmark_,8,8
	.type	.L.str.52,@object               # @.str.52
	.p2align	3, 0x0
.L.str.52:
	.asciz	"benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint16_t_"
	.size	.L.str.52, 63

	.type	_ZL28benchmark_uniq_28_benchmark_,@object # @_ZL28benchmark_uniq_28_benchmark_
	.local	_ZL28benchmark_uniq_28_benchmark_
	.comm	_ZL28benchmark_uniq_28_benchmark_,8,8
	.type	.L.str.54,@object               # @.str.54
	.p2align	3, 0x0
.L.str.54:
	.asciz	"benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint16_t_"
	.size	.L.str.54, 55

	.type	_ZL28benchmark_uniq_29_benchmark_,@object # @_ZL28benchmark_uniq_29_benchmark_
	.local	_ZL28benchmark_uniq_29_benchmark_
	.comm	_ZL28benchmark_uniq_29_benchmark_,8,8
	.type	.L.str.56,@object               # @.str.56
	.p2align	3, 0x0
.L.str.56:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint16_t_"
	.size	.L.str.56, 69

	.type	_ZL28benchmark_uniq_30_benchmark_,@object # @_ZL28benchmark_uniq_30_benchmark_
	.local	_ZL28benchmark_uniq_30_benchmark_
	.comm	_ZL28benchmark_uniq_30_benchmark_,8,8
	.type	.L.str.58,@object               # @.str.58
	.p2align	3, 0x0
.L.str.58:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint16_t_"
	.size	.L.str.58, 70

	.type	_ZL28benchmark_uniq_31_benchmark_,@object # @_ZL28benchmark_uniq_31_benchmark_
	.local	_ZL28benchmark_uniq_31_benchmark_
	.comm	_ZL28benchmark_uniq_31_benchmark_,8,8
	.type	.L.str.60,@object               # @.str.60
	.p2align	3, 0x0
.L.str.60:
	.asciz	"benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint16_t_"
	.size	.L.str.60, 62

	.type	_ZL28benchmark_uniq_32_benchmark_,@object # @_ZL28benchmark_uniq_32_benchmark_
	.local	_ZL28benchmark_uniq_32_benchmark_
	.comm	_ZL28benchmark_uniq_32_benchmark_,8,8
	.type	.L.str.62,@object               # @.str.62
	.p2align	3, 0x0
.L.str.62:
	.asciz	"benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint32_t_"
	.size	.L.str.62, 62

	.type	_ZL28benchmark_uniq_33_benchmark_,@object # @_ZL28benchmark_uniq_33_benchmark_
	.local	_ZL28benchmark_uniq_33_benchmark_
	.comm	_ZL28benchmark_uniq_33_benchmark_,8,8
	.type	.L.str.64,@object               # @.str.64
	.p2align	3, 0x0
.L.str.64:
	.asciz	"benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint32_t_"
	.size	.L.str.64, 63

	.type	_ZL28benchmark_uniq_34_benchmark_,@object # @_ZL28benchmark_uniq_34_benchmark_
	.local	_ZL28benchmark_uniq_34_benchmark_
	.comm	_ZL28benchmark_uniq_34_benchmark_,8,8
	.type	.L.str.66,@object               # @.str.66
	.p2align	3, 0x0
.L.str.66:
	.asciz	"benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint32_t_"
	.size	.L.str.66, 55

	.type	_ZL28benchmark_uniq_35_benchmark_,@object # @_ZL28benchmark_uniq_35_benchmark_
	.local	_ZL28benchmark_uniq_35_benchmark_
	.comm	_ZL28benchmark_uniq_35_benchmark_,8,8
	.type	.L.str.68,@object               # @.str.68
	.p2align	3, 0x0
.L.str.68:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint32_t_"
	.size	.L.str.68, 69

	.type	_ZL28benchmark_uniq_36_benchmark_,@object # @_ZL28benchmark_uniq_36_benchmark_
	.local	_ZL28benchmark_uniq_36_benchmark_
	.comm	_ZL28benchmark_uniq_36_benchmark_,8,8
	.type	.L.str.70,@object               # @.str.70
	.p2align	3, 0x0
.L.str.70:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint32_t_"
	.size	.L.str.70, 70

	.type	_ZL28benchmark_uniq_37_benchmark_,@object # @_ZL28benchmark_uniq_37_benchmark_
	.local	_ZL28benchmark_uniq_37_benchmark_
	.comm	_ZL28benchmark_uniq_37_benchmark_,8,8
	.type	.L.str.72,@object               # @.str.72
	.p2align	3, 0x0
.L.str.72:
	.asciz	"benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint32_t_"
	.size	.L.str.72, 62

	.type	_ZL28benchmark_uniq_38_benchmark_,@object # @_ZL28benchmark_uniq_38_benchmark_
	.local	_ZL28benchmark_uniq_38_benchmark_
	.comm	_ZL28benchmark_uniq_38_benchmark_,8,8
	.type	.L.str.74,@object               # @.str.74
	.p2align	3, 0x0
.L.str.74:
	.asciz	"benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint16_t_"
	.size	.L.str.74, 61

	.type	_ZL28benchmark_uniq_39_benchmark_,@object # @_ZL28benchmark_uniq_39_benchmark_
	.local	_ZL28benchmark_uniq_39_benchmark_
	.comm	_ZL28benchmark_uniq_39_benchmark_,8,8
	.type	.L.str.76,@object               # @.str.76
	.p2align	3, 0x0
.L.str.76:
	.asciz	"benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint16_t_"
	.size	.L.str.76, 62

	.type	_ZL28benchmark_uniq_40_benchmark_,@object # @_ZL28benchmark_uniq_40_benchmark_
	.local	_ZL28benchmark_uniq_40_benchmark_
	.comm	_ZL28benchmark_uniq_40_benchmark_,8,8
	.type	.L.str.78,@object               # @.str.78
	.p2align	3, 0x0
.L.str.78:
	.asciz	"benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint16_t_"
	.size	.L.str.78, 54

	.type	_ZL28benchmark_uniq_41_benchmark_,@object # @_ZL28benchmark_uniq_41_benchmark_
	.local	_ZL28benchmark_uniq_41_benchmark_
	.comm	_ZL28benchmark_uniq_41_benchmark_,8,8
	.type	.L.str.80,@object               # @.str.80
	.p2align	3, 0x0
.L.str.80:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint16_t_"
	.size	.L.str.80, 68

	.type	_ZL28benchmark_uniq_42_benchmark_,@object # @_ZL28benchmark_uniq_42_benchmark_
	.local	_ZL28benchmark_uniq_42_benchmark_
	.comm	_ZL28benchmark_uniq_42_benchmark_,8,8
	.type	.L.str.82,@object               # @.str.82
	.p2align	3, 0x0
.L.str.82:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint16_t_"
	.size	.L.str.82, 69

	.type	_ZL28benchmark_uniq_43_benchmark_,@object # @_ZL28benchmark_uniq_43_benchmark_
	.local	_ZL28benchmark_uniq_43_benchmark_
	.comm	_ZL28benchmark_uniq_43_benchmark_,8,8
	.type	.L.str.84,@object               # @.str.84
	.p2align	3, 0x0
.L.str.84:
	.asciz	"benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint16_t_"
	.size	.L.str.84, 61

	.type	_ZL28benchmark_uniq_44_benchmark_,@object # @_ZL28benchmark_uniq_44_benchmark_
	.local	_ZL28benchmark_uniq_44_benchmark_
	.comm	_ZL28benchmark_uniq_44_benchmark_,8,8
	.type	.L.str.86,@object               # @.str.86
	.p2align	3, 0x0
.L.str.86:
	.asciz	"benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint32_t_"
	.size	.L.str.86, 61

	.type	_ZL28benchmark_uniq_45_benchmark_,@object # @_ZL28benchmark_uniq_45_benchmark_
	.local	_ZL28benchmark_uniq_45_benchmark_
	.comm	_ZL28benchmark_uniq_45_benchmark_,8,8
	.type	.L.str.88,@object               # @.str.88
	.p2align	3, 0x0
.L.str.88:
	.asciz	"benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint32_t_"
	.size	.L.str.88, 62

	.type	_ZL28benchmark_uniq_46_benchmark_,@object # @_ZL28benchmark_uniq_46_benchmark_
	.local	_ZL28benchmark_uniq_46_benchmark_
	.comm	_ZL28benchmark_uniq_46_benchmark_,8,8
	.type	.L.str.90,@object               # @.str.90
	.p2align	3, 0x0
.L.str.90:
	.asciz	"benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint32_t_"
	.size	.L.str.90, 54

	.type	_ZL28benchmark_uniq_47_benchmark_,@object # @_ZL28benchmark_uniq_47_benchmark_
	.local	_ZL28benchmark_uniq_47_benchmark_
	.comm	_ZL28benchmark_uniq_47_benchmark_,8,8
	.type	.L.str.92,@object               # @.str.92
	.p2align	3, 0x0
.L.str.92:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint32_t_"
	.size	.L.str.92, 68

	.type	_ZL28benchmark_uniq_48_benchmark_,@object # @_ZL28benchmark_uniq_48_benchmark_
	.local	_ZL28benchmark_uniq_48_benchmark_
	.comm	_ZL28benchmark_uniq_48_benchmark_,8,8
	.type	.L.str.94,@object               # @.str.94
	.p2align	3, 0x0
.L.str.94:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint32_t_"
	.size	.L.str.94, 69

	.type	_ZL28benchmark_uniq_49_benchmark_,@object # @_ZL28benchmark_uniq_49_benchmark_
	.local	_ZL28benchmark_uniq_49_benchmark_
	.comm	_ZL28benchmark_uniq_49_benchmark_,8,8
	.type	.L.str.96,@object               # @.str.96
	.p2align	3, 0x0
.L.str.96:
	.asciz	"benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint32_t_"
	.size	.L.str.96, 61

	.type	_ZL28benchmark_uniq_50_benchmark_,@object # @_ZL28benchmark_uniq_50_benchmark_
	.local	_ZL28benchmark_uniq_50_benchmark_
	.comm	_ZL28benchmark_uniq_50_benchmark_,8,8
	.type	.L.str.98,@object               # @.str.98
	.p2align	3, 0x0
.L.str.98:
	.asciz	"benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint64_t_"
	.size	.L.str.98, 61

	.type	_ZL28benchmark_uniq_51_benchmark_,@object # @_ZL28benchmark_uniq_51_benchmark_
	.local	_ZL28benchmark_uniq_51_benchmark_
	.comm	_ZL28benchmark_uniq_51_benchmark_,8,8
	.type	.L.str.100,@object              # @.str.100
	.p2align	3, 0x0
.L.str.100:
	.asciz	"benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint64_t_"
	.size	.L.str.100, 62

	.type	_ZL28benchmark_uniq_52_benchmark_,@object # @_ZL28benchmark_uniq_52_benchmark_
	.local	_ZL28benchmark_uniq_52_benchmark_
	.comm	_ZL28benchmark_uniq_52_benchmark_,8,8
	.type	.L.str.102,@object              # @.str.102
	.p2align	3, 0x0
.L.str.102:
	.asciz	"benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint64_t_"
	.size	.L.str.102, 54

	.type	_ZL28benchmark_uniq_53_benchmark_,@object # @_ZL28benchmark_uniq_53_benchmark_
	.local	_ZL28benchmark_uniq_53_benchmark_
	.comm	_ZL28benchmark_uniq_53_benchmark_,8,8
	.type	.L.str.104,@object              # @.str.104
	.p2align	3, 0x0
.L.str.104:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint64_t_"
	.size	.L.str.104, 68

	.type	_ZL28benchmark_uniq_54_benchmark_,@object # @_ZL28benchmark_uniq_54_benchmark_
	.local	_ZL28benchmark_uniq_54_benchmark_
	.comm	_ZL28benchmark_uniq_54_benchmark_,8,8
	.type	.L.str.106,@object              # @.str.106
	.p2align	3, 0x0
.L.str.106:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint64_t_"
	.size	.L.str.106, 69

	.type	_ZL28benchmark_uniq_55_benchmark_,@object # @_ZL28benchmark_uniq_55_benchmark_
	.local	_ZL28benchmark_uniq_55_benchmark_
	.comm	_ZL28benchmark_uniq_55_benchmark_,8,8
	.type	.L.str.108,@object              # @.str.108
	.p2align	3, 0x0
.L.str.108:
	.asciz	"benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint64_t_"
	.size	.L.str.108, 61

	.type	_ZL28benchmark_uniq_56_benchmark_,@object # @_ZL28benchmark_uniq_56_benchmark_
	.local	_ZL28benchmark_uniq_56_benchmark_
	.comm	_ZL28benchmark_uniq_56_benchmark_,8,8
	.type	.L.str.110,@object              # @.str.110
	.p2align	3, 0x0
.L.str.110:
	.asciz	"benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint32_t_"
	.size	.L.str.110, 62

	.type	_ZL28benchmark_uniq_57_benchmark_,@object # @_ZL28benchmark_uniq_57_benchmark_
	.local	_ZL28benchmark_uniq_57_benchmark_
	.comm	_ZL28benchmark_uniq_57_benchmark_,8,8
	.type	.L.str.112,@object              # @.str.112
	.p2align	3, 0x0
.L.str.112:
	.asciz	"benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint32_t_"
	.size	.L.str.112, 63

	.type	_ZL28benchmark_uniq_58_benchmark_,@object # @_ZL28benchmark_uniq_58_benchmark_
	.local	_ZL28benchmark_uniq_58_benchmark_
	.comm	_ZL28benchmark_uniq_58_benchmark_,8,8
	.type	.L.str.114,@object              # @.str.114
	.p2align	3, 0x0
.L.str.114:
	.asciz	"benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint32_t_"
	.size	.L.str.114, 55

	.type	_ZL28benchmark_uniq_59_benchmark_,@object # @_ZL28benchmark_uniq_59_benchmark_
	.local	_ZL28benchmark_uniq_59_benchmark_
	.comm	_ZL28benchmark_uniq_59_benchmark_,8,8
	.type	.L.str.116,@object              # @.str.116
	.p2align	3, 0x0
.L.str.116:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint32_t_"
	.size	.L.str.116, 69

	.type	_ZL28benchmark_uniq_60_benchmark_,@object # @_ZL28benchmark_uniq_60_benchmark_
	.local	_ZL28benchmark_uniq_60_benchmark_
	.comm	_ZL28benchmark_uniq_60_benchmark_,8,8
	.type	.L.str.118,@object              # @.str.118
	.p2align	3, 0x0
.L.str.118:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint32_t_"
	.size	.L.str.118, 70

	.type	_ZL28benchmark_uniq_61_benchmark_,@object # @_ZL28benchmark_uniq_61_benchmark_
	.local	_ZL28benchmark_uniq_61_benchmark_
	.comm	_ZL28benchmark_uniq_61_benchmark_,8,8
	.type	.L.str.120,@object              # @.str.120
	.p2align	3, 0x0
.L.str.120:
	.asciz	"benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint32_t_"
	.size	.L.str.120, 62

	.type	_ZL28benchmark_uniq_62_benchmark_,@object # @_ZL28benchmark_uniq_62_benchmark_
	.local	_ZL28benchmark_uniq_62_benchmark_
	.comm	_ZL28benchmark_uniq_62_benchmark_,8,8
	.type	.L.str.122,@object              # @.str.122
	.p2align	3, 0x0
.L.str.122:
	.asciz	"benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint64_t_"
	.size	.L.str.122, 62

	.type	_ZL28benchmark_uniq_63_benchmark_,@object # @_ZL28benchmark_uniq_63_benchmark_
	.local	_ZL28benchmark_uniq_63_benchmark_
	.comm	_ZL28benchmark_uniq_63_benchmark_,8,8
	.type	.L.str.124,@object              # @.str.124
	.p2align	3, 0x0
.L.str.124:
	.asciz	"benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint64_t_"
	.size	.L.str.124, 63

	.type	_ZL28benchmark_uniq_64_benchmark_,@object # @_ZL28benchmark_uniq_64_benchmark_
	.local	_ZL28benchmark_uniq_64_benchmark_
	.comm	_ZL28benchmark_uniq_64_benchmark_,8,8
	.type	.L.str.126,@object              # @.str.126
	.p2align	3, 0x0
.L.str.126:
	.asciz	"benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint64_t_"
	.size	.L.str.126, 55

	.type	_ZL28benchmark_uniq_65_benchmark_,@object # @_ZL28benchmark_uniq_65_benchmark_
	.local	_ZL28benchmark_uniq_65_benchmark_
	.comm	_ZL28benchmark_uniq_65_benchmark_,8,8
	.type	.L.str.128,@object              # @.str.128
	.p2align	3, 0x0
.L.str.128:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint64_t_"
	.size	.L.str.128, 69

	.type	_ZL28benchmark_uniq_66_benchmark_,@object # @_ZL28benchmark_uniq_66_benchmark_
	.local	_ZL28benchmark_uniq_66_benchmark_
	.comm	_ZL28benchmark_uniq_66_benchmark_,8,8
	.type	.L.str.130,@object              # @.str.130
	.p2align	3, 0x0
.L.str.130:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint64_t_"
	.size	.L.str.130, 70

	.type	_ZL28benchmark_uniq_67_benchmark_,@object # @_ZL28benchmark_uniq_67_benchmark_
	.local	_ZL28benchmark_uniq_67_benchmark_
	.comm	_ZL28benchmark_uniq_67_benchmark_,8,8
	.type	.L.str.132,@object              # @.str.132
	.p2align	3, 0x0
.L.str.132:
	.asciz	"benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint64_t_"
	.size	.L.str.132, 62

	.type	_ZL28benchmark_uniq_68_benchmark_,@object # @_ZL28benchmark_uniq_68_benchmark_
	.local	_ZL28benchmark_uniq_68_benchmark_
	.comm	_ZL28benchmark_uniq_68_benchmark_,8,8
	.type	.L.str.134,@object              # @.str.134
	.p2align	3, 0x0
.L.str.134:
	.asciz	"benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint64_t_"
	.size	.L.str.134, 62

	.type	_ZL28benchmark_uniq_69_benchmark_,@object # @_ZL28benchmark_uniq_69_benchmark_
	.local	_ZL28benchmark_uniq_69_benchmark_
	.comm	_ZL28benchmark_uniq_69_benchmark_,8,8
	.type	.L.str.136,@object              # @.str.136
	.p2align	3, 0x0
.L.str.136:
	.asciz	"benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint64_t_"
	.size	.L.str.136, 63

	.type	_ZL28benchmark_uniq_70_benchmark_,@object # @_ZL28benchmark_uniq_70_benchmark_
	.local	_ZL28benchmark_uniq_70_benchmark_
	.comm	_ZL28benchmark_uniq_70_benchmark_,8,8
	.type	.L.str.138,@object              # @.str.138
	.p2align	3, 0x0
.L.str.138:
	.asciz	"benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint64_t_"
	.size	.L.str.138, 55

	.type	_ZL28benchmark_uniq_71_benchmark_,@object # @_ZL28benchmark_uniq_71_benchmark_
	.local	_ZL28benchmark_uniq_71_benchmark_
	.comm	_ZL28benchmark_uniq_71_benchmark_,8,8
	.type	.L.str.140,@object              # @.str.140
	.p2align	3, 0x0
.L.str.140:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint64_t_"
	.size	.L.str.140, 69

	.type	_ZL28benchmark_uniq_72_benchmark_,@object # @_ZL28benchmark_uniq_72_benchmark_
	.local	_ZL28benchmark_uniq_72_benchmark_
	.comm	_ZL28benchmark_uniq_72_benchmark_,8,8
	.type	.L.str.142,@object              # @.str.142
	.p2align	3, 0x0
.L.str.142:
	.asciz	"benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint64_t_"
	.size	.L.str.142, 70

	.type	_ZL28benchmark_uniq_73_benchmark_,@object # @_ZL28benchmark_uniq_73_benchmark_
	.local	_ZL28benchmark_uniq_73_benchmark_
	.comm	_ZL28benchmark_uniq_73_benchmark_,8,8
	.type	.L.str.144,@object              # @.str.144
	.p2align	3, 0x0
.L.str.144:
	.asciz	"benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint64_t_"
	.size	.L.str.144, 62

	.type	.L.str.146,@object              # @.str.146
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.146:
	.asciz	"ERROR: Trunc or ZExt operation on "
	.size	.L.str.146, 35

	.type	.L.str.147,@object              # @.str.147
.L.str.147:
	.asciz	" is showing result "
	.size	.L.str.147, 20

	.type	.L.str.148,@object              # @.str.148
.L.str.148:
	.asciz	" instead of "
	.size	.L.str.148, 13

	.type	.L.str.149,@object              # @.str.149
.L.str.149:
	.asciz	"\n"
	.size	.L.str.149, 2

	.section	.init_array,"aw",@init_array
	.p2align	3, 0x0
	.dword	_GLOBAL__sub_I_VectorOperations.cpp
	.hidden	DW.ref.__gxx_personality_v0
	.weak	DW.ref.__gxx_personality_v0
	.section	.data.DW.ref.__gxx_personality_v0,"awG",@progbits,DW.ref.__gxx_personality_v0,comdat
	.p2align	3, 0x0
	.type	DW.ref.__gxx_personality_v0,@object
	.size	DW.ref.__gxx_personality_v0, 8
DW.ref.__gxx_personality_v0:
	.dword	__gxx_personality_v0
	.section	".note.GNU-stack","",@progbits
	.addrsig
	.addrsig_sym _Z60benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint8_t_RN9benchmark5StateE
	.addrsig_sym __gxx_personality_v0
	.addrsig_sym _Z61benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint8_t_RN9benchmark5StateE
	.addrsig_sym _Z53benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint8_t_RN9benchmark5StateE
	.addrsig_sym _Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint8_t_RN9benchmark5StateE
	.addrsig_sym _Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint8_t_RN9benchmark5StateE
	.addrsig_sym _Z60benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint8_t_RN9benchmark5StateE
	.addrsig_sym _Z60benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint8_t_RN9benchmark5StateE
	.addrsig_sym _Z61benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint8_t_RN9benchmark5StateE
	.addrsig_sym _Z53benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint8_t_RN9benchmark5StateE
	.addrsig_sym _Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint8_t_RN9benchmark5StateE
	.addrsig_sym _Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint8_t_RN9benchmark5StateE
	.addrsig_sym _Z60benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint8_t_RN9benchmark5StateE
	.addrsig_sym _Z60benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint8_t_RN9benchmark5StateE
	.addrsig_sym _Z61benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint8_t_RN9benchmark5StateE
	.addrsig_sym _Z53benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint8_t_RN9benchmark5StateE
	.addrsig_sym _Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint8_t_RN9benchmark5StateE
	.addrsig_sym _Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint8_t_RN9benchmark5StateE
	.addrsig_sym _Z60benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint8_t_RN9benchmark5StateE
	.addrsig_sym _Z61benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint16_t_RN9benchmark5StateE
	.addrsig_sym _Z62benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint16_t_RN9benchmark5StateE
	.addrsig_sym _Z54benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint16_t_RN9benchmark5StateE
	.addrsig_sym _Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint16_t_RN9benchmark5StateE
	.addrsig_sym _Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint16_t_RN9benchmark5StateE
	.addrsig_sym _Z61benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint16_t_RN9benchmark5StateE
	.addrsig_sym _Z61benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint16_t_RN9benchmark5StateE
	.addrsig_sym _Z62benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint16_t_RN9benchmark5StateE
	.addrsig_sym _Z54benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint16_t_RN9benchmark5StateE
	.addrsig_sym _Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint16_t_RN9benchmark5StateE
	.addrsig_sym _Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint16_t_RN9benchmark5StateE
	.addrsig_sym _Z61benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint16_t_RN9benchmark5StateE
	.addrsig_sym _Z61benchForTruncOrZextVecInLoopWithVW8From_uint64_t_To_uint32_t_RN9benchmark5StateE
	.addrsig_sym _Z62benchForTruncOrZextVecInLoopWithVW16From_uint64_t_To_uint32_t_RN9benchmark5StateE
	.addrsig_sym _Z54benchForTruncOrZextVecInLoopFrom_uint64_t_To_uint32_t_RN9benchmark5StateE
	.addrsig_sym _Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint64_t_To_uint32_t_RN9benchmark5StateE
	.addrsig_sym _Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint64_t_To_uint32_t_RN9benchmark5StateE
	.addrsig_sym _Z61benchForTruncOrZextVecWithAddInLoopFrom_uint64_t_To_uint32_t_RN9benchmark5StateE
	.addrsig_sym _Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint16_t_RN9benchmark5StateE
	.addrsig_sym _Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint16_t_RN9benchmark5StateE
	.addrsig_sym _Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint16_t_RN9benchmark5StateE
	.addrsig_sym _Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint16_t_RN9benchmark5StateE
	.addrsig_sym _Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint16_t_RN9benchmark5StateE
	.addrsig_sym _Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint16_t_RN9benchmark5StateE
	.addrsig_sym _Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint32_t_RN9benchmark5StateE
	.addrsig_sym _Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint32_t_RN9benchmark5StateE
	.addrsig_sym _Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint32_t_RN9benchmark5StateE
	.addrsig_sym _Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint32_t_RN9benchmark5StateE
	.addrsig_sym _Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint32_t_RN9benchmark5StateE
	.addrsig_sym _Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint32_t_RN9benchmark5StateE
	.addrsig_sym _Z60benchForTruncOrZextVecInLoopWithVW8From_uint8_t_To_uint64_t_RN9benchmark5StateE
	.addrsig_sym _Z61benchForTruncOrZextVecInLoopWithVW16From_uint8_t_To_uint64_t_RN9benchmark5StateE
	.addrsig_sym _Z53benchForTruncOrZextVecInLoopFrom_uint8_t_To_uint64_t_RN9benchmark5StateE
	.addrsig_sym _Z67benchForTruncOrZextVecWithAddInLoopWithVW8From_uint8_t_To_uint64_t_RN9benchmark5StateE
	.addrsig_sym _Z68benchForTruncOrZextVecWithAddInLoopWithVW16From_uint8_t_To_uint64_t_RN9benchmark5StateE
	.addrsig_sym _Z60benchForTruncOrZextVecWithAddInLoopFrom_uint8_t_To_uint64_t_RN9benchmark5StateE
	.addrsig_sym _Z61benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint32_t_RN9benchmark5StateE
	.addrsig_sym _Z62benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint32_t_RN9benchmark5StateE
	.addrsig_sym _Z54benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint32_t_RN9benchmark5StateE
	.addrsig_sym _Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint32_t_RN9benchmark5StateE
	.addrsig_sym _Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint32_t_RN9benchmark5StateE
	.addrsig_sym _Z61benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint32_t_RN9benchmark5StateE
	.addrsig_sym _Z61benchForTruncOrZextVecInLoopWithVW8From_uint16_t_To_uint64_t_RN9benchmark5StateE
	.addrsig_sym _Z62benchForTruncOrZextVecInLoopWithVW16From_uint16_t_To_uint64_t_RN9benchmark5StateE
	.addrsig_sym _Z54benchForTruncOrZextVecInLoopFrom_uint16_t_To_uint64_t_RN9benchmark5StateE
	.addrsig_sym _Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint16_t_To_uint64_t_RN9benchmark5StateE
	.addrsig_sym _Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint16_t_To_uint64_t_RN9benchmark5StateE
	.addrsig_sym _Z61benchForTruncOrZextVecWithAddInLoopFrom_uint16_t_To_uint64_t_RN9benchmark5StateE
	.addrsig_sym _Z61benchForTruncOrZextVecInLoopWithVW8From_uint32_t_To_uint64_t_RN9benchmark5StateE
	.addrsig_sym _Z62benchForTruncOrZextVecInLoopWithVW16From_uint32_t_To_uint64_t_RN9benchmark5StateE
	.addrsig_sym _Z54benchForTruncOrZextVecInLoopFrom_uint32_t_To_uint64_t_RN9benchmark5StateE
	.addrsig_sym _Z68benchForTruncOrZextVecWithAddInLoopWithVW8From_uint32_t_To_uint64_t_RN9benchmark5StateE
	.addrsig_sym _Z69benchForTruncOrZextVecWithAddInLoopWithVW16From_uint32_t_To_uint64_t_RN9benchmark5StateE
	.addrsig_sym _Z61benchForTruncOrZextVecWithAddInLoopFrom_uint32_t_To_uint64_t_RN9benchmark5StateE
	.addrsig_sym _GLOBAL__sub_I_VectorOperations.cpp
	.addrsig_sym _Unwind_Resume
	.addrsig_sym _ZL3rng
	.addrsig_sym _ZSt4cerr
