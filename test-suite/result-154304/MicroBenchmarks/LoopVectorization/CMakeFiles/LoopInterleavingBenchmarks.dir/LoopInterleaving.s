	.file	"LoopInterleaving.cpp"
                                        # Start of file scope inline assembly
	.globl	_ZSt21ios_base_library_initv

                                        # End of file scope inline assembly
	.text
	.globl	_Z22benchAutoVecForLoopTC1RN9benchmark5StateE # -- Begin function _Z22benchAutoVecForLoopTC1RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchAutoVecForLoopTC1RN9benchmark5StateE,@function
_Z22benchAutoVecForLoopTC1RN9benchmark5StateE: # @_Z22benchAutoVecForLoopTC1RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB0_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB0_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB0_3:                                # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB0_3
.LBB0_4:                                # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end0:
	.size	_Z22benchAutoVecForLoopTC1RN9benchmark5StateE, .Lfunc_end0-_Z22benchAutoVecForLoopTC1RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL22loopNoReductionAutoVeci
	.type	_ZL22loopNoReductionAutoVeci,@function
_ZL22loopNoReductionAutoVeci:           # @_ZL22loopNoReductionAutoVeci
# %bb.0:
	ori	$a1, $zero, 1
	blt	$a0, $a1, .LBB1_8
# %bb.1:                                # %.lr.ph.preheader
	ori	$a1, $zero, 4
	bgeu	$a0, $a1, .LBB1_3
# %bb.2:
	move	$a1, $zero
	b	.LBB1_6
.LBB1_3:                                # %vector.ph
	pcalau12i	$a1, %pc_hi20(A)
	addi.d	$a2, $a1, %pc_lo12(A)
	pcalau12i	$a1, %pc_hi20(C)
	addi.d	$a3, $a1, %pc_lo12(C)
	pcalau12i	$a4, %pc_hi20(B)
	bstrpick.d	$a1, $a0, 30, 2
	slli.d	$a1, $a1, 2
	addi.d	$a4, $a4, %pc_lo12(B)
	move	$a5, $a1
	.p2align	4, , 16
.LBB1_4:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a4, 0
	vld	$vr1, $a3, 0
	vadd.w	$vr0, $vr1, $vr0
	vst	$vr0, $a2, 0
	addi.d	$a5, $a5, -4
	addi.d	$a2, $a2, 16
	addi.d	$a3, $a3, 16
	addi.d	$a4, $a4, 16
	bnez	$a5, .LBB1_4
# %bb.5:                                # %middle.block
	beq	$a1, $a0, .LBB1_8
.LBB1_6:                                # %.lr.ph.preheader8
	pcalau12i	$a2, %pc_hi20(A)
	addi.d	$a2, $a2, %pc_lo12(A)
	alsl.d	$a2, $a1, $a2, 2
	pcalau12i	$a3, %pc_hi20(C)
	addi.d	$a3, $a3, %pc_lo12(C)
	alsl.d	$a3, $a1, $a3, 2
	pcalau12i	$a4, %pc_hi20(B)
	addi.d	$a4, $a4, %pc_lo12(B)
	alsl.d	$a4, $a1, $a4, 2
	sub.d	$a0, $a0, $a1
	.p2align	4, , 16
.LBB1_7:                                # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $a4, 0
	ld.w	$a5, $a3, 0
	add.d	$a1, $a5, $a1
	st.w	$a1, $a2, 0
	addi.d	$a2, $a2, 4
	addi.d	$a3, $a3, 4
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 4
	bnez	$a0, .LBB1_7
.LBB1_8:                                # %._crit_edge
	move	$a0, $zero
	ret
.Lfunc_end1:
	.size	_ZL22loopNoReductionAutoVeci, .Lfunc_end1-_ZL22loopNoReductionAutoVeci
                                        # -- End function
	.globl	_Z21benchForIC1VW4LoopTC1RN9benchmark5StateE # -- Begin function _Z21benchForIC1VW4LoopTC1RN9benchmark5StateE
	.p2align	5
	.type	_Z21benchForIC1VW4LoopTC1RN9benchmark5StateE,@function
_Z21benchForIC1VW4LoopTC1RN9benchmark5StateE: # @_Z21benchForIC1VW4LoopTC1RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB2_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB2_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB2_3:                                # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB2_3
.LBB2_4:                                # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end2:
	.size	_Z21benchForIC1VW4LoopTC1RN9benchmark5StateE, .Lfunc_end2-_Z21benchForIC1VW4LoopTC1RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL14loopWithVW4IC1i
	.type	_ZL14loopWithVW4IC1i,@function
_ZL14loopWithVW4IC1i:                   # @_ZL14loopWithVW4IC1i
# %bb.0:
	ori	$a1, $zero, 1
	blt	$a0, $a1, .LBB3_8
# %bb.1:                                # %.lr.ph.preheader
	ori	$a1, $zero, 4
	bgeu	$a0, $a1, .LBB3_3
# %bb.2:
	move	$a1, $zero
	b	.LBB3_6
.LBB3_3:                                # %vector.ph
	pcalau12i	$a1, %pc_hi20(A)
	addi.d	$a2, $a1, %pc_lo12(A)
	pcalau12i	$a1, %pc_hi20(C)
	addi.d	$a3, $a1, %pc_lo12(C)
	pcalau12i	$a4, %pc_hi20(B)
	bstrpick.d	$a1, $a0, 30, 2
	slli.d	$a1, $a1, 2
	addi.d	$a4, $a4, %pc_lo12(B)
	move	$a5, $a1
	.p2align	4, , 16
.LBB3_4:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a4, 0
	vld	$vr1, $a3, 0
	vadd.w	$vr0, $vr1, $vr0
	vst	$vr0, $a2, 0
	addi.d	$a5, $a5, -4
	addi.d	$a2, $a2, 16
	addi.d	$a3, $a3, 16
	addi.d	$a4, $a4, 16
	bnez	$a5, .LBB3_4
# %bb.5:                                # %middle.block
	beq	$a1, $a0, .LBB3_8
.LBB3_6:                                # %.lr.ph.preheader8
	pcalau12i	$a2, %pc_hi20(A)
	addi.d	$a2, $a2, %pc_lo12(A)
	alsl.d	$a2, $a1, $a2, 2
	pcalau12i	$a3, %pc_hi20(C)
	addi.d	$a3, $a3, %pc_lo12(C)
	alsl.d	$a3, $a1, $a3, 2
	pcalau12i	$a4, %pc_hi20(B)
	addi.d	$a4, $a4, %pc_lo12(B)
	alsl.d	$a4, $a1, $a4, 2
	sub.d	$a0, $a0, $a1
	.p2align	4, , 16
.LBB3_7:                                # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $a4, 0
	ld.w	$a5, $a3, 0
	add.d	$a1, $a5, $a1
	st.w	$a1, $a2, 0
	addi.d	$a2, $a2, 4
	addi.d	$a3, $a3, 4
	addi.d	$a0, $a0, -1
	addi.d	$a4, $a4, 4
	bnez	$a0, .LBB3_7
.LBB3_8:                                # %._crit_edge
	move	$a0, $zero
	ret
.Lfunc_end3:
	.size	_ZL14loopWithVW4IC1i, .Lfunc_end3-_ZL14loopWithVW4IC1i
                                        # -- End function
	.globl	_Z21benchForIC2VW4LoopTC1RN9benchmark5StateE # -- Begin function _Z21benchForIC2VW4LoopTC1RN9benchmark5StateE
	.p2align	5
	.type	_Z21benchForIC2VW4LoopTC1RN9benchmark5StateE,@function
_Z21benchForIC2VW4LoopTC1RN9benchmark5StateE: # @_Z21benchForIC2VW4LoopTC1RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB4_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB4_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB4_3:                                # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB4_3
.LBB4_4:                                # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end4:
	.size	_Z21benchForIC2VW4LoopTC1RN9benchmark5StateE, .Lfunc_end4-_Z21benchForIC2VW4LoopTC1RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL14loopWithVW4IC2i
	.type	_ZL14loopWithVW4IC2i,@function
_ZL14loopWithVW4IC2i:                   # @_ZL14loopWithVW4IC2i
# %bb.0:
	ori	$a1, $zero, 1
	blt	$a0, $a1, .LBB5_8
# %bb.1:                                # %.lr.ph.preheader
	ori	$a4, $zero, 8
	pcalau12i	$a1, %pc_hi20(A)
	addi.d	$a1, $a1, %pc_lo12(A)
	pcalau12i	$a2, %pc_hi20(C)
	addi.d	$a2, $a2, %pc_lo12(C)
	pcalau12i	$a3, %pc_hi20(B)
	addi.d	$a3, $a3, %pc_lo12(B)
	bgeu	$a0, $a4, .LBB5_3
# %bb.2:
	move	$a4, $zero
	b	.LBB5_6
.LBB5_3:                                # %vector.ph
	addi.d	$a5, $a1, 16
	addi.d	$a6, $a2, 16
	bstrpick.d	$a4, $a0, 30, 3
	slli.d	$a4, $a4, 3
	addi.d	$a7, $a3, 16
	move	$t0, $a4
	.p2align	4, , 16
.LBB5_4:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a7, -16
	vld	$vr1, $a7, 0
	vld	$vr2, $a6, -16
	vld	$vr3, $a6, 0
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	vst	$vr0, $a5, -16
	vst	$vr1, $a5, 0
	addi.d	$t0, $t0, -8
	addi.d	$a5, $a5, 32
	addi.d	$a6, $a6, 32
	addi.d	$a7, $a7, 32
	bnez	$t0, .LBB5_4
# %bb.5:                                # %middle.block
	beq	$a4, $a0, .LBB5_8
.LBB5_6:                                # %.lr.ph.preheader10
	alsl.d	$a1, $a4, $a1, 2
	alsl.d	$a2, $a4, $a2, 2
	alsl.d	$a3, $a4, $a3, 2
	sub.d	$a0, $a0, $a4
	.p2align	4, , 16
.LBB5_7:                                # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a4, $a3, 0
	ld.w	$a5, $a2, 0
	add.d	$a4, $a5, $a4
	st.w	$a4, $a1, 0
	addi.d	$a1, $a1, 4
	addi.d	$a2, $a2, 4
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB5_7
.LBB5_8:                                # %._crit_edge
	move	$a0, $zero
	ret
.Lfunc_end5:
	.size	_ZL14loopWithVW4IC2i, .Lfunc_end5-_ZL14loopWithVW4IC2i
                                        # -- End function
	.globl	_Z21benchForIC4VW4LoopTC1RN9benchmark5StateE # -- Begin function _Z21benchForIC4VW4LoopTC1RN9benchmark5StateE
	.p2align	5
	.type	_Z21benchForIC4VW4LoopTC1RN9benchmark5StateE,@function
_Z21benchForIC4VW4LoopTC1RN9benchmark5StateE: # @_Z21benchForIC4VW4LoopTC1RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB6_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB6_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB6_3:                                # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB6_3
.LBB6_4:                                # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end6:
	.size	_Z21benchForIC4VW4LoopTC1RN9benchmark5StateE, .Lfunc_end6-_Z21benchForIC4VW4LoopTC1RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL14loopWithVW4IC4i
	.type	_ZL14loopWithVW4IC4i,@function
_ZL14loopWithVW4IC4i:                   # @_ZL14loopWithVW4IC4i
# %bb.0:
	ori	$a1, $zero, 1
	blt	$a0, $a1, .LBB7_8
# %bb.1:                                # %.lr.ph.preheader
	ori	$a4, $zero, 16
	pcalau12i	$a1, %pc_hi20(A)
	addi.d	$a1, $a1, %pc_lo12(A)
	pcalau12i	$a2, %pc_hi20(C)
	addi.d	$a2, $a2, %pc_lo12(C)
	pcalau12i	$a3, %pc_hi20(B)
	addi.d	$a3, $a3, %pc_lo12(B)
	bgeu	$a0, $a4, .LBB7_3
# %bb.2:
	move	$a4, $zero
	b	.LBB7_6
.LBB7_3:                                # %vector.ph
	addi.d	$a5, $a3, 32
	addi.d	$a6, $a2, 32
	bstrpick.d	$a4, $a0, 30, 4
	slli.d	$a4, $a4, 4
	addi.d	$a7, $a1, 32
	move	$t0, $a4
	.p2align	4, , 16
.LBB7_4:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a5, -32
	vld	$vr1, $a5, -16
	vld	$vr2, $a5, 0
	vld	$vr3, $a5, 16
	vld	$vr4, $a6, -32
	vld	$vr5, $a6, -16
	vld	$vr6, $a6, 0
	vld	$vr7, $a6, 16
	vadd.w	$vr0, $vr4, $vr0
	vadd.w	$vr1, $vr5, $vr1
	vadd.w	$vr2, $vr6, $vr2
	vadd.w	$vr3, $vr7, $vr3
	vst	$vr0, $a7, -32
	vst	$vr1, $a7, -16
	vst	$vr2, $a7, 0
	vst	$vr3, $a7, 16
	addi.d	$t0, $t0, -16
	addi.d	$a5, $a5, 64
	addi.d	$a6, $a6, 64
	addi.d	$a7, $a7, 64
	bnez	$t0, .LBB7_4
# %bb.5:                                # %middle.block
	beq	$a4, $a0, .LBB7_8
.LBB7_6:                                # %.lr.ph.preheader14
	alsl.d	$a1, $a4, $a1, 2
	alsl.d	$a2, $a4, $a2, 2
	alsl.d	$a3, $a4, $a3, 2
	sub.d	$a0, $a0, $a4
	.p2align	4, , 16
.LBB7_7:                                # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a4, $a3, 0
	ld.w	$a5, $a2, 0
	add.d	$a4, $a5, $a4
	st.w	$a4, $a1, 0
	addi.d	$a1, $a1, 4
	addi.d	$a2, $a2, 4
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB7_7
.LBB7_8:                                # %._crit_edge
	move	$a0, $zero
	ret
.Lfunc_end7:
	.size	_ZL14loopWithVW4IC4i, .Lfunc_end7-_ZL14loopWithVW4IC4i
                                        # -- End function
	.globl	_Z35benchForLoopWithReductionAutoVecTC1RN9benchmark5StateE # -- Begin function _Z35benchForLoopWithReductionAutoVecTC1RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForLoopWithReductionAutoVecTC1RN9benchmark5StateE,@function
_Z35benchForLoopWithReductionAutoVecTC1RN9benchmark5StateE: # @_Z35benchForLoopWithReductionAutoVecTC1RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB8_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB8_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB8_3:                                # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(_ZL24loopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB8_3
.LBB8_4:                                # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end8:
	.size	_Z35benchForLoopWithReductionAutoVecTC1RN9benchmark5StateE, .Lfunc_end8-_Z35benchForLoopWithReductionAutoVecTC1RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL24loopWithReductionAutoVeci
	.type	_ZL24loopWithReductionAutoVeci,@function
_ZL24loopWithReductionAutoVeci:         # @_ZL24loopWithReductionAutoVeci
# %bb.0:
	ori	$a1, $zero, 1
	blt	$a0, $a1, .LBB9_3
# %bb.1:                                # %.lr.ph.preheader
	ori	$a1, $zero, 4
	bgeu	$a0, $a1, .LBB9_4
# %bb.2:
	move	$a2, $zero
	move	$a1, $zero
	b	.LBB9_7
.LBB9_3:
	move	$a1, $zero
	move	$a0, $a1
	ret
.LBB9_4:                                # %vector.ph
	pcalau12i	$a1, %pc_hi20(A)
	addi.d	$a1, $a1, %pc_lo12(A)
	bstrpick.d	$a2, $a0, 30, 2
	slli.d	$a2, $a2, 2
	vrepli.b	$vr0, 0
	move	$a3, $a2
	.p2align	4, , 16
.LBB9_5:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr1, $a1, 0
	vadd.w	$vr0, $vr1, $vr0
	addi.d	$a3, $a3, -4
	addi.d	$a1, $a1, 16
	bnez	$a3, .LBB9_5
# %bb.6:                                # %middle.block
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a1, $vr0, 0
	beq	$a2, $a0, .LBB9_9
.LBB9_7:                                # %.lr.ph.preheader9
	pcalau12i	$a3, %pc_hi20(A)
	addi.d	$a3, $a3, %pc_lo12(A)
	alsl.d	$a3, $a2, $a3, 2
	sub.d	$a0, $a0, $a2
	.p2align	4, , 16
.LBB9_8:                                # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a2, $a3, 0
	add.w	$a1, $a2, $a1
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB9_8
.LBB9_9:                                # %._crit_edge
	move	$a0, $a1
	ret
.Lfunc_end9:
	.size	_ZL24loopWithReductionAutoVeci, .Lfunc_end9-_ZL24loopWithReductionAutoVeci
                                        # -- End function
	.globl	_Z34benchForIC1VW4LoopWithReductionTC1RN9benchmark5StateE # -- Begin function _Z34benchForIC1VW4LoopWithReductionTC1RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC1VW4LoopWithReductionTC1RN9benchmark5StateE,@function
_Z34benchForIC1VW4LoopWithReductionTC1RN9benchmark5StateE: # @_Z34benchForIC1VW4LoopWithReductionTC1RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB10_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB10_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB10_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB10_3
.LBB10_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end10:
	.size	_Z34benchForIC1VW4LoopWithReductionTC1RN9benchmark5StateE, .Lfunc_end10-_Z34benchForIC1VW4LoopWithReductionTC1RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL27loopWithReductionWithVW4IC1i
	.type	_ZL27loopWithReductionWithVW4IC1i,@function
_ZL27loopWithReductionWithVW4IC1i:      # @_ZL27loopWithReductionWithVW4IC1i
# %bb.0:
	ori	$a1, $zero, 1
	blt	$a0, $a1, .LBB11_3
# %bb.1:                                # %.lr.ph.preheader
	ori	$a1, $zero, 4
	bgeu	$a0, $a1, .LBB11_4
# %bb.2:
	move	$a2, $zero
	move	$a1, $zero
	b	.LBB11_7
.LBB11_3:
	move	$a1, $zero
	move	$a0, $a1
	ret
.LBB11_4:                               # %vector.ph
	pcalau12i	$a1, %pc_hi20(A)
	addi.d	$a1, $a1, %pc_lo12(A)
	bstrpick.d	$a2, $a0, 30, 2
	slli.d	$a2, $a2, 2
	vrepli.b	$vr0, 0
	move	$a3, $a2
	.p2align	4, , 16
.LBB11_5:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr1, $a1, 0
	vadd.w	$vr0, $vr1, $vr0
	addi.d	$a3, $a3, -4
	addi.d	$a1, $a1, 16
	bnez	$a3, .LBB11_5
# %bb.6:                                # %middle.block
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a1, $vr0, 0
	beq	$a2, $a0, .LBB11_9
.LBB11_7:                               # %.lr.ph.preheader9
	pcalau12i	$a3, %pc_hi20(A)
	addi.d	$a3, $a3, %pc_lo12(A)
	alsl.d	$a3, $a2, $a3, 2
	sub.d	$a0, $a0, $a2
	.p2align	4, , 16
.LBB11_8:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a2, $a3, 0
	add.w	$a1, $a2, $a1
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB11_8
.LBB11_9:                               # %._crit_edge
	move	$a0, $a1
	ret
.Lfunc_end11:
	.size	_ZL27loopWithReductionWithVW4IC1i, .Lfunc_end11-_ZL27loopWithReductionWithVW4IC1i
                                        # -- End function
	.globl	_Z34benchForIC2VW4LoopWithReductionTC1RN9benchmark5StateE # -- Begin function _Z34benchForIC2VW4LoopWithReductionTC1RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC2VW4LoopWithReductionTC1RN9benchmark5StateE,@function
_Z34benchForIC2VW4LoopWithReductionTC1RN9benchmark5StateE: # @_Z34benchForIC2VW4LoopWithReductionTC1RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB12_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB12_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB12_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB12_3
.LBB12_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end12:
	.size	_Z34benchForIC2VW4LoopWithReductionTC1RN9benchmark5StateE, .Lfunc_end12-_Z34benchForIC2VW4LoopWithReductionTC1RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL27loopWithReductionWithVW4IC2i
	.type	_ZL27loopWithReductionWithVW4IC2i,@function
_ZL27loopWithReductionWithVW4IC2i:      # @_ZL27loopWithReductionWithVW4IC2i
# %bb.0:
	ori	$a1, $zero, 1
	blt	$a0, $a1, .LBB13_3
# %bb.1:                                # %.lr.ph.preheader
	ori	$a1, $zero, 8
	pcalau12i	$a2, %pc_hi20(A)
	addi.d	$a2, $a2, %pc_lo12(A)
	bgeu	$a0, $a1, .LBB13_4
# %bb.2:
	move	$a3, $zero
	move	$a1, $zero
	b	.LBB13_7
.LBB13_3:
	move	$a1, $zero
	move	$a0, $a1
	ret
.LBB13_4:                               # %vector.ph
	bstrpick.d	$a1, $a0, 30, 3
	slli.d	$a3, $a1, 3
	vrepli.b	$vr0, 0
	addi.d	$a1, $a2, 16
	move	$a4, $a3
	vori.b	$vr1, $vr0, 0
	.p2align	4, , 16
.LBB13_5:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr2, $a1, -16
	vld	$vr3, $a1, 0
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a4, $a4, -8
	addi.d	$a1, $a1, 32
	bnez	$a4, .LBB13_5
# %bb.6:                                # %middle.block
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a1, $vr0, 0
	beq	$a3, $a0, .LBB13_9
.LBB13_7:                               # %.lr.ph.preheader11
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a0, $a0, $a3
	.p2align	4, , 16
.LBB13_8:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a3, $a2, 0
	add.w	$a1, $a3, $a1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB13_8
.LBB13_9:                               # %._crit_edge
	move	$a0, $a1
	ret
.Lfunc_end13:
	.size	_ZL27loopWithReductionWithVW4IC2i, .Lfunc_end13-_ZL27loopWithReductionWithVW4IC2i
                                        # -- End function
	.globl	_Z34benchForIC4VW4LoopWithReductionTC1RN9benchmark5StateE # -- Begin function _Z34benchForIC4VW4LoopWithReductionTC1RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC4VW4LoopWithReductionTC1RN9benchmark5StateE,@function
_Z34benchForIC4VW4LoopWithReductionTC1RN9benchmark5StateE: # @_Z34benchForIC4VW4LoopWithReductionTC1RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB14_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB14_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB14_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB14_3
.LBB14_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end14:
	.size	_Z34benchForIC4VW4LoopWithReductionTC1RN9benchmark5StateE, .Lfunc_end14-_Z34benchForIC4VW4LoopWithReductionTC1RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL27loopWithReductionWithVW4IC4i
	.type	_ZL27loopWithReductionWithVW4IC4i,@function
_ZL27loopWithReductionWithVW4IC4i:      # @_ZL27loopWithReductionWithVW4IC4i
# %bb.0:
	ori	$a1, $zero, 1
	blt	$a0, $a1, .LBB15_3
# %bb.1:                                # %.lr.ph.preheader
	ori	$a1, $zero, 16
	pcalau12i	$a2, %pc_hi20(A)
	addi.d	$a2, $a2, %pc_lo12(A)
	bgeu	$a0, $a1, .LBB15_4
# %bb.2:
	move	$a3, $zero
	move	$a1, $zero
	b	.LBB15_7
.LBB15_3:
	move	$a1, $zero
	move	$a0, $a1
	ret
.LBB15_4:                               # %vector.ph
	bstrpick.d	$a1, $a0, 30, 4
	slli.d	$a3, $a1, 4
	vrepli.b	$vr0, 0
	addi.d	$a1, $a2, 32
	move	$a4, $a3
	vori.b	$vr1, $vr0, 0
	vori.b	$vr2, $vr0, 0
	vori.b	$vr3, $vr0, 0
	.p2align	4, , 16
.LBB15_5:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr4, $a1, -32
	vld	$vr5, $a1, -16
	vld	$vr6, $a1, 0
	vld	$vr7, $a1, 16
	vadd.w	$vr0, $vr4, $vr0
	vadd.w	$vr1, $vr5, $vr1
	vadd.w	$vr2, $vr6, $vr2
	vadd.w	$vr3, $vr7, $vr3
	addi.d	$a4, $a4, -16
	addi.d	$a1, $a1, 64
	bnez	$a4, .LBB15_5
# %bb.6:                                # %middle.block
	vadd.w	$vr0, $vr1, $vr0
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr0, $vr3, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a1, $vr0, 0
	beq	$a3, $a0, .LBB15_9
.LBB15_7:                               # %.lr.ph.preheader17
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a0, $a0, $a3
	.p2align	4, , 16
.LBB15_8:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a3, $a2, 0
	add.w	$a1, $a3, $a1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB15_8
.LBB15_9:                               # %._crit_edge
	move	$a0, $a1
	ret
.Lfunc_end15:
	.size	_ZL27loopWithReductionWithVW4IC4i, .Lfunc_end15-_ZL27loopWithReductionWithVW4IC4i
                                        # -- End function
	.globl	_Z34benchForIC1VW1LoopWithReductionTC1RN9benchmark5StateE # -- Begin function _Z34benchForIC1VW1LoopWithReductionTC1RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC1VW1LoopWithReductionTC1RN9benchmark5StateE,@function
_Z34benchForIC1VW1LoopWithReductionTC1RN9benchmark5StateE: # @_Z34benchForIC1VW1LoopWithReductionTC1RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB16_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB16_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB16_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB16_3
.LBB16_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end16:
	.size	_Z34benchForIC1VW1LoopWithReductionTC1RN9benchmark5StateE, .Lfunc_end16-_Z34benchForIC1VW1LoopWithReductionTC1RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL27loopWithReductionWithVW1IC1i
	.type	_ZL27loopWithReductionWithVW1IC1i,@function
_ZL27loopWithReductionWithVW1IC1i:      # @_ZL27loopWithReductionWithVW1IC1i
# %bb.0:
	ori	$a1, $zero, 1
	blt	$a0, $a1, .LBB17_4
# %bb.1:                                # %.lr.ph.preheader
	move	$a1, $zero
	pcalau12i	$a2, %pc_hi20(A)
	addi.d	$a2, $a2, %pc_lo12(A)
	.p2align	4, , 16
.LBB17_2:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a3, $a2, 0
	add.w	$a1, $a3, $a1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB17_2
# %bb.3:                                # %._crit_edge
	move	$a0, $a1
	ret
.LBB17_4:
	move	$a1, $zero
	move	$a0, $a1
	ret
.Lfunc_end17:
	.size	_ZL27loopWithReductionWithVW1IC1i, .Lfunc_end17-_ZL27loopWithReductionWithVW1IC1i
                                        # -- End function
	.globl	_Z34benchForIC2VW1LoopWithReductionTC1RN9benchmark5StateE # -- Begin function _Z34benchForIC2VW1LoopWithReductionTC1RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC2VW1LoopWithReductionTC1RN9benchmark5StateE,@function
_Z34benchForIC2VW1LoopWithReductionTC1RN9benchmark5StateE: # @_Z34benchForIC2VW1LoopWithReductionTC1RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB18_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB18_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB18_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB18_3
.LBB18_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end18:
	.size	_Z34benchForIC2VW1LoopWithReductionTC1RN9benchmark5StateE, .Lfunc_end18-_Z34benchForIC2VW1LoopWithReductionTC1RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL27loopWithReductionWithVW1IC2i
	.type	_ZL27loopWithReductionWithVW1IC2i,@function
_ZL27loopWithReductionWithVW1IC2i:      # @_ZL27loopWithReductionWithVW1IC2i
# %bb.0:
	ori	$a1, $zero, 1
	blt	$a0, $a1, .LBB19_3
# %bb.1:                                # %.lr.ph.preheader
	pcalau12i	$a2, %pc_hi20(A)
	addi.d	$a2, $a2, %pc_lo12(A)
	bne	$a0, $a1, .LBB19_4
# %bb.2:
	move	$a3, $zero
	move	$a1, $zero
	b	.LBB19_7
.LBB19_3:
	move	$a1, $zero
	move	$a0, $a1
	ret
.LBB19_4:                               # %vector.ph
	move	$a1, $zero
	move	$a4, $zero
	bstrpick.d	$a3, $a0, 30, 1
	slli.d	$a3, $a3, 1
	addi.d	$a5, $a2, 4
	move	$a6, $a3
	.p2align	4, , 16
.LBB19_5:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a7, $a5, -4
	ld.w	$t0, $a5, 0
	add.d	$a1, $a7, $a1
	add.d	$a4, $t0, $a4
	addi.d	$a6, $a6, -2
	addi.d	$a5, $a5, 8
	bnez	$a6, .LBB19_5
# %bb.6:                                # %middle.block
	add.w	$a1, $a4, $a1
	beq	$a3, $a0, .LBB19_9
.LBB19_7:                               # %.lr.ph.preheader10
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a0, $a0, $a3
	.p2align	4, , 16
.LBB19_8:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a3, $a2, 0
	add.w	$a1, $a3, $a1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB19_8
.LBB19_9:                               # %._crit_edge
	move	$a0, $a1
	ret
.Lfunc_end19:
	.size	_ZL27loopWithReductionWithVW1IC2i, .Lfunc_end19-_ZL27loopWithReductionWithVW1IC2i
                                        # -- End function
	.globl	_Z34benchForIC4VW1LoopWithReductionTC1RN9benchmark5StateE # -- Begin function _Z34benchForIC4VW1LoopWithReductionTC1RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC4VW1LoopWithReductionTC1RN9benchmark5StateE,@function
_Z34benchForIC4VW1LoopWithReductionTC1RN9benchmark5StateE: # @_Z34benchForIC4VW1LoopWithReductionTC1RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB20_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB20_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB20_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB20_3
.LBB20_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end20:
	.size	_Z34benchForIC4VW1LoopWithReductionTC1RN9benchmark5StateE, .Lfunc_end20-_Z34benchForIC4VW1LoopWithReductionTC1RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL27loopWithReductionWithVW1IC4i
	.type	_ZL27loopWithReductionWithVW1IC4i,@function
_ZL27loopWithReductionWithVW1IC4i:      # @_ZL27loopWithReductionWithVW1IC4i
# %bb.0:
	ori	$a1, $zero, 1
	blt	$a0, $a1, .LBB21_3
# %bb.1:                                # %.lr.ph.preheader
	ori	$a1, $zero, 4
	bgeu	$a0, $a1, .LBB21_4
# %bb.2:
	move	$a2, $zero
	move	$a1, $zero
	b	.LBB21_7
.LBB21_3:
	move	$a1, $zero
	move	$a0, $a1
	ret
.LBB21_4:                               # %vector.ph
	pcalau12i	$a1, %pc_hi20(A)
	addi.d	$a1, $a1, %pc_lo12(A)
	bstrpick.d	$a2, $a0, 30, 2
	slli.d	$a2, $a2, 2
	vrepli.b	$vr0, 0
	move	$a3, $a2
	.p2align	4, , 16
.LBB21_5:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr1, $a1, 0
	vadd.w	$vr0, $vr1, $vr0
	addi.d	$a3, $a3, -4
	addi.d	$a1, $a1, 16
	bnez	$a3, .LBB21_5
# %bb.6:                                # %middle.block
	vpickve2gr.w	$a1, $vr0, 0
	vpickve2gr.w	$a3, $vr0, 1
	add.d	$a1, $a3, $a1
	vpickve2gr.w	$a3, $vr0, 2
	add.d	$a1, $a3, $a1
	vpickve2gr.w	$a3, $vr0, 3
	add.w	$a1, $a3, $a1
	beq	$a2, $a0, .LBB21_9
.LBB21_7:                               # %.lr.ph.preheader14
	pcalau12i	$a3, %pc_hi20(A)
	addi.d	$a3, $a3, %pc_lo12(A)
	alsl.d	$a3, $a2, $a3, 2
	sub.d	$a0, $a0, $a2
	.p2align	4, , 16
.LBB21_8:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a2, $a3, 0
	add.w	$a1, $a2, $a1
	addi.d	$a0, $a0, -1
	addi.d	$a3, $a3, 4
	bnez	$a0, .LBB21_8
.LBB21_9:                               # %._crit_edge
	move	$a0, $a1
	ret
.Lfunc_end21:
	.size	_ZL27loopWithReductionWithVW1IC4i, .Lfunc_end21-_ZL27loopWithReductionWithVW1IC4i
                                        # -- End function
	.globl	_Z25benchAutoVecForBigLoopTC1RN9benchmark5StateE # -- Begin function _Z25benchAutoVecForBigLoopTC1RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchAutoVecForBigLoopTC1RN9benchmark5StateE,@function
_Z25benchAutoVecForBigLoopTC1RN9benchmark5StateE: # @_Z25benchAutoVecForBigLoopTC1RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB22_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB22_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB22_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB22_3
.LBB22_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end22:
	.size	_Z25benchAutoVecForBigLoopTC1RN9benchmark5StateE, .Lfunc_end22-_Z25benchAutoVecForBigLoopTC1RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z24benchForIC1VW4BigLoopTC1RN9benchmark5StateE # -- Begin function _Z24benchForIC1VW4BigLoopTC1RN9benchmark5StateE
	.p2align	5
	.type	_Z24benchForIC1VW4BigLoopTC1RN9benchmark5StateE,@function
_Z24benchForIC1VW4BigLoopTC1RN9benchmark5StateE: # @_Z24benchForIC1VW4BigLoopTC1RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB23_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB23_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB23_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB23_3
.LBB23_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end23:
	.size	_Z24benchForIC1VW4BigLoopTC1RN9benchmark5StateE, .Lfunc_end23-_Z24benchForIC1VW4BigLoopTC1RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL17bigLoopWithVW4IC1i
	.type	_ZL17bigLoopWithVW4IC1i,@function
_ZL17bigLoopWithVW4IC1i:                # @_ZL17bigLoopWithVW4IC1i
# %bb.0:
	ori	$a1, $zero, 1
	blt	$a0, $a1, .LBB24_8
# %bb.1:                                # %.lr.ph.preheader
	ori	$a2, $zero, 4
	lu12i.w	$a1, 419430
	bgeu	$a0, $a2, .LBB24_3
# %bb.2:
	move	$a2, $zero
	b	.LBB24_6
.LBB24_3:                               # %vector.ph
	pcalau12i	$a2, %pc_hi20(F)
	addi.d	$a3, $a2, %pc_lo12(F)
	pcalau12i	$a2, %pc_hi20(E)
	addi.d	$a4, $a2, %pc_lo12(E)
	pcalau12i	$a2, %pc_hi20(D)
	addi.d	$a5, $a2, %pc_lo12(D)
	pcalau12i	$a2, %pc_hi20(A)
	addi.d	$a6, $a2, %pc_lo12(A)
	pcalau12i	$a2, %pc_hi20(C)
	addi.d	$a7, $a2, %pc_lo12(C)
	pcalau12i	$a2, %pc_hi20(B)
	addi.d	$t0, $a2, %pc_lo12(B)
	bstrpick.d	$a2, $a0, 30, 2
	slli.d	$a2, $a2, 2
	ori	$t1, $a1, 1639
	vreplgr2vr.w	$vr0, $t1
	move	$t1, $a2
	.p2align	4, , 16
.LBB24_4:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr1, $t0, 0
	vld	$vr2, $a7, 0
	vld	$vr3, $a5, 0
	vadd.w	$vr1, $vr2, $vr1
	vst	$vr1, $a6, 0
	vld	$vr1, $a4, 0
	vaddi.wu	$vr2, $vr3, 1
	vld	$vr3, $a3, 0
	vst	$vr2, $a5, 0
	vslli.w	$vr1, $vr1, 1
	vst	$vr1, $a4, 0
	vmuh.w	$vr1, $vr3, $vr0
	vsrai.w	$vr1, $vr1, 1
	vsrli.w	$vr2, $vr1, 31
	vadd.w	$vr1, $vr1, $vr2
	vst	$vr1, $a3, 0
	addi.d	$t1, $t1, -4
	addi.d	$a3, $a3, 16
	addi.d	$a4, $a4, 16
	addi.d	$a5, $a5, 16
	addi.d	$a6, $a6, 16
	addi.d	$a7, $a7, 16
	addi.d	$t0, $t0, 16
	bnez	$t1, .LBB24_4
# %bb.5:                                # %middle.block
	beq	$a2, $a0, .LBB24_8
.LBB24_6:                               # %.lr.ph.preheader14
	pcalau12i	$a3, %pc_hi20(F)
	addi.d	$a3, $a3, %pc_lo12(F)
	alsl.d	$a3, $a2, $a3, 2
	pcalau12i	$a4, %pc_hi20(E)
	addi.d	$a4, $a4, %pc_lo12(E)
	alsl.d	$a4, $a2, $a4, 2
	pcalau12i	$a5, %pc_hi20(D)
	addi.d	$a5, $a5, %pc_lo12(D)
	alsl.d	$a5, $a2, $a5, 2
	pcalau12i	$a6, %pc_hi20(A)
	addi.d	$a6, $a6, %pc_lo12(A)
	alsl.d	$a6, $a2, $a6, 2
	pcalau12i	$a7, %pc_hi20(C)
	addi.d	$a7, $a7, %pc_lo12(C)
	alsl.d	$a7, $a2, $a7, 2
	pcalau12i	$t0, %pc_hi20(B)
	addi.d	$t0, $t0, %pc_lo12(B)
	alsl.d	$t0, $a2, $t0, 2
	sub.d	$a0, $a0, $a2
	ori	$a1, $a1, 1639
	.p2align	4, , 16
.LBB24_7:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a2, $t0, 0
	ld.w	$t1, $a7, 0
	ld.w	$t2, $a5, 0
	add.d	$a2, $t1, $a2
	st.w	$a2, $a6, 0
	ld.w	$a2, $a4, 0
	addi.d	$t1, $t2, 1
	ld.w	$t2, $a3, 0
	st.w	$t1, $a5, 0
	slli.d	$a2, $a2, 1
	st.w	$a2, $a4, 0
	mul.d	$a2, $t2, $a1
	srli.d	$t1, $a2, 63
	srai.d	$a2, $a2, 33
	add.d	$a2, $a2, $t1
	st.w	$a2, $a3, 0
	addi.d	$a3, $a3, 4
	addi.d	$a4, $a4, 4
	addi.d	$a5, $a5, 4
	addi.d	$a6, $a6, 4
	addi.d	$a7, $a7, 4
	addi.d	$a0, $a0, -1
	addi.d	$t0, $t0, 4
	bnez	$a0, .LBB24_7
.LBB24_8:                               # %._crit_edge
	move	$a0, $zero
	ret
.Lfunc_end24:
	.size	_ZL17bigLoopWithVW4IC1i, .Lfunc_end24-_ZL17bigLoopWithVW4IC1i
                                        # -- End function
	.globl	_Z24benchForIC2VW4BigLoopTC1RN9benchmark5StateE # -- Begin function _Z24benchForIC2VW4BigLoopTC1RN9benchmark5StateE
	.p2align	5
	.type	_Z24benchForIC2VW4BigLoopTC1RN9benchmark5StateE,@function
_Z24benchForIC2VW4BigLoopTC1RN9benchmark5StateE: # @_Z24benchForIC2VW4BigLoopTC1RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB25_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB25_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB25_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB25_3
.LBB25_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end25:
	.size	_Z24benchForIC2VW4BigLoopTC1RN9benchmark5StateE, .Lfunc_end25-_Z24benchForIC2VW4BigLoopTC1RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL17bigLoopWithVW4IC2i
	.type	_ZL17bigLoopWithVW4IC2i,@function
_ZL17bigLoopWithVW4IC2i:                # @_ZL17bigLoopWithVW4IC2i
# %bb.0:
	ori	$a1, $zero, 1
	blt	$a0, $a1, .LBB26_8
# %bb.1:                                # %.lr.ph.preheader
	ori	$t0, $zero, 8
	pcalau12i	$a1, %pc_hi20(F)
	addi.d	$a1, $a1, %pc_lo12(F)
	pcalau12i	$a2, %pc_hi20(E)
	addi.d	$a2, $a2, %pc_lo12(E)
	pcalau12i	$a3, %pc_hi20(D)
	addi.d	$a3, $a3, %pc_lo12(D)
	pcalau12i	$a4, %pc_hi20(A)
	addi.d	$a4, $a4, %pc_lo12(A)
	pcalau12i	$a5, %pc_hi20(C)
	addi.d	$a5, $a5, %pc_lo12(C)
	pcalau12i	$a6, %pc_hi20(B)
	addi.d	$a7, $a6, %pc_lo12(B)
	lu12i.w	$a6, 419430
	bgeu	$a0, $t0, .LBB26_3
# %bb.2:
	move	$t0, $zero
	b	.LBB26_6
.LBB26_3:                               # %vector.ph
	addi.d	$t1, $a7, 16
	addi.d	$t2, $a1, 16
	addi.d	$t3, $a5, 16
	addi.d	$t4, $a2, 16
	addi.d	$t5, $a4, 16
	addi.d	$t6, $a3, 16
	bstrpick.d	$t0, $a0, 30, 3
	slli.d	$t0, $t0, 3
	ori	$t7, $a6, 1639
	vreplgr2vr.w	$vr0, $t7
	move	$t7, $t0
	.p2align	4, , 16
.LBB26_4:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr1, $t1, -16
	vld	$vr2, $t1, 0
	vld	$vr3, $t3, -16
	vld	$vr4, $t3, 0
	vadd.w	$vr1, $vr3, $vr1
	vadd.w	$vr2, $vr4, $vr2
	vld	$vr3, $t6, -16
	vld	$vr4, $t6, 0
	vst	$vr1, $t5, -16
	vst	$vr2, $t5, 0
	vaddi.wu	$vr1, $vr3, 1
	vaddi.wu	$vr2, $vr4, 1
	vld	$vr3, $t4, -16
	vld	$vr4, $t4, 0
	vst	$vr1, $t6, -16
	vst	$vr2, $t6, 0
	vslli.w	$vr1, $vr3, 1
	vslli.w	$vr2, $vr4, 1
	vld	$vr3, $t2, -16
	vst	$vr1, $t4, -16
	vst	$vr2, $t4, 0
	vld	$vr1, $t2, 0
	vmuh.w	$vr2, $vr3, $vr0
	vsrai.w	$vr2, $vr2, 1
	vsrli.w	$vr3, $vr2, 31
	vadd.w	$vr2, $vr2, $vr3
	vmuh.w	$vr1, $vr1, $vr0
	vsrai.w	$vr1, $vr1, 1
	vsrli.w	$vr3, $vr1, 31
	vadd.w	$vr1, $vr1, $vr3
	vst	$vr2, $t2, -16
	vst	$vr1, $t2, 0
	addi.d	$t7, $t7, -8
	addi.d	$t1, $t1, 32
	addi.d	$t2, $t2, 32
	addi.d	$t3, $t3, 32
	addi.d	$t4, $t4, 32
	addi.d	$t5, $t5, 32
	addi.d	$t6, $t6, 32
	bnez	$t7, .LBB26_4
# %bb.5:                                # %middle.block
	beq	$t0, $a0, .LBB26_8
.LBB26_6:                               # %.lr.ph.preheader19
	alsl.d	$a1, $t0, $a1, 2
	alsl.d	$a2, $t0, $a2, 2
	alsl.d	$a3, $t0, $a3, 2
	alsl.d	$a4, $t0, $a4, 2
	alsl.d	$a5, $t0, $a5, 2
	alsl.d	$a7, $t0, $a7, 2
	sub.d	$a0, $a0, $t0
	ori	$a6, $a6, 1639
	.p2align	4, , 16
.LBB26_7:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$t0, $a7, 0
	ld.w	$t1, $a5, 0
	ld.w	$t2, $a3, 0
	add.d	$t0, $t1, $t0
	st.w	$t0, $a4, 0
	ld.w	$t0, $a2, 0
	addi.d	$t1, $t2, 1
	ld.w	$t2, $a1, 0
	st.w	$t1, $a3, 0
	slli.d	$t0, $t0, 1
	st.w	$t0, $a2, 0
	mul.d	$t0, $t2, $a6
	srli.d	$t1, $t0, 63
	srai.d	$t0, $t0, 33
	add.d	$t0, $t0, $t1
	st.w	$t0, $a1, 0
	addi.d	$a1, $a1, 4
	addi.d	$a2, $a2, 4
	addi.d	$a3, $a3, 4
	addi.d	$a4, $a4, 4
	addi.d	$a5, $a5, 4
	addi.d	$a0, $a0, -1
	addi.d	$a7, $a7, 4
	bnez	$a0, .LBB26_7
.LBB26_8:                               # %._crit_edge
	move	$a0, $zero
	ret
.Lfunc_end26:
	.size	_ZL17bigLoopWithVW4IC2i, .Lfunc_end26-_ZL17bigLoopWithVW4IC2i
                                        # -- End function
	.globl	_Z24benchForIC4VW4BigLoopTC1RN9benchmark5StateE # -- Begin function _Z24benchForIC4VW4BigLoopTC1RN9benchmark5StateE
	.p2align	5
	.type	_Z24benchForIC4VW4BigLoopTC1RN9benchmark5StateE,@function
_Z24benchForIC4VW4BigLoopTC1RN9benchmark5StateE: # @_Z24benchForIC4VW4BigLoopTC1RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB27_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB27_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB27_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB27_3
.LBB27_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end27:
	.size	_Z24benchForIC4VW4BigLoopTC1RN9benchmark5StateE, .Lfunc_end27-_Z24benchForIC4VW4BigLoopTC1RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL17bigLoopWithVW4IC4i
	.type	_ZL17bigLoopWithVW4IC4i,@function
_ZL17bigLoopWithVW4IC4i:                # @_ZL17bigLoopWithVW4IC4i
# %bb.0:
	ori	$a1, $zero, 1
	blt	$a0, $a1, .LBB28_8
# %bb.1:                                # %.lr.ph.preheader
	ori	$t0, $zero, 16
	pcalau12i	$a1, %pc_hi20(F)
	addi.d	$a1, $a1, %pc_lo12(F)
	pcalau12i	$a2, %pc_hi20(E)
	addi.d	$a2, $a2, %pc_lo12(E)
	pcalau12i	$a3, %pc_hi20(D)
	addi.d	$a3, $a3, %pc_lo12(D)
	pcalau12i	$a4, %pc_hi20(A)
	addi.d	$a4, $a4, %pc_lo12(A)
	pcalau12i	$a5, %pc_hi20(C)
	addi.d	$a5, $a5, %pc_lo12(C)
	pcalau12i	$a6, %pc_hi20(B)
	addi.d	$a7, $a6, %pc_lo12(B)
	lu12i.w	$a6, 419430
	bgeu	$a0, $t0, .LBB28_3
# %bb.2:
	move	$t0, $zero
	b	.LBB28_6
.LBB28_3:                               # %vector.ph
	addi.d	$t1, $a7, 32
	addi.d	$t2, $a5, 32
	addi.d	$t3, $a4, 32
	addi.d	$t4, $a1, 32
	addi.d	$t5, $a3, 32
	addi.d	$t6, $a2, 32
	bstrpick.d	$t0, $a0, 30, 4
	slli.d	$t0, $t0, 4
	ori	$t7, $a6, 1639
	vreplgr2vr.w	$vr0, $t7
	move	$t7, $t0
	.p2align	4, , 16
.LBB28_4:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr1, $t1, -32
	vld	$vr2, $t1, -16
	vld	$vr3, $t1, 0
	vld	$vr4, $t1, 16
	vld	$vr5, $t2, -32
	vld	$vr6, $t2, -16
	vld	$vr7, $t2, 0
	vld	$vr8, $t2, 16
	vadd.w	$vr1, $vr5, $vr1
	vadd.w	$vr2, $vr6, $vr2
	vadd.w	$vr3, $vr7, $vr3
	vadd.w	$vr4, $vr8, $vr4
	vst	$vr1, $t3, -32
	vst	$vr2, $t3, -16
	vst	$vr3, $t3, 0
	vst	$vr4, $t3, 16
	vld	$vr1, $t5, -32
	vld	$vr2, $t5, -16
	vld	$vr3, $t5, 0
	vld	$vr4, $t5, 16
	vaddi.wu	$vr1, $vr1, 1
	vaddi.wu	$vr2, $vr2, 1
	vaddi.wu	$vr3, $vr3, 1
	vaddi.wu	$vr4, $vr4, 1
	vst	$vr1, $t5, -32
	vst	$vr2, $t5, -16
	vst	$vr3, $t5, 0
	vst	$vr4, $t5, 16
	vld	$vr1, $t6, -32
	vld	$vr2, $t6, -16
	vld	$vr3, $t6, 0
	vld	$vr4, $t6, 16
	vslli.w	$vr1, $vr1, 1
	vslli.w	$vr2, $vr2, 1
	vslli.w	$vr3, $vr3, 1
	vslli.w	$vr4, $vr4, 1
	vst	$vr1, $t6, -32
	vst	$vr2, $t6, -16
	vst	$vr3, $t6, 0
	vst	$vr4, $t6, 16
	vld	$vr1, $t4, -32
	vld	$vr2, $t4, -16
	vld	$vr3, $t4, 0
	vld	$vr4, $t4, 16
	vmuh.w	$vr1, $vr1, $vr0
	vsrai.w	$vr1, $vr1, 1
	vsrli.w	$vr5, $vr1, 31
	vadd.w	$vr1, $vr1, $vr5
	vmuh.w	$vr2, $vr2, $vr0
	vsrai.w	$vr2, $vr2, 1
	vsrli.w	$vr5, $vr2, 31
	vadd.w	$vr2, $vr2, $vr5
	vmuh.w	$vr3, $vr3, $vr0
	vsrai.w	$vr3, $vr3, 1
	vsrli.w	$vr5, $vr3, 31
	vadd.w	$vr3, $vr3, $vr5
	vmuh.w	$vr4, $vr4, $vr0
	vsrai.w	$vr4, $vr4, 1
	vsrli.w	$vr5, $vr4, 31
	vadd.w	$vr4, $vr4, $vr5
	vst	$vr1, $t4, -32
	vst	$vr2, $t4, -16
	vst	$vr3, $t4, 0
	vst	$vr4, $t4, 16
	addi.d	$t7, $t7, -16
	addi.d	$t1, $t1, 64
	addi.d	$t2, $t2, 64
	addi.d	$t3, $t3, 64
	addi.d	$t4, $t4, 64
	addi.d	$t5, $t5, 64
	addi.d	$t6, $t6, 64
	bnez	$t7, .LBB28_4
# %bb.5:                                # %middle.block
	beq	$t0, $a0, .LBB28_8
.LBB28_6:                               # %.lr.ph.preheader29
	alsl.d	$a1, $t0, $a1, 2
	alsl.d	$a2, $t0, $a2, 2
	alsl.d	$a3, $t0, $a3, 2
	alsl.d	$a4, $t0, $a4, 2
	alsl.d	$a5, $t0, $a5, 2
	alsl.d	$a7, $t0, $a7, 2
	sub.d	$a0, $a0, $t0
	ori	$a6, $a6, 1639
	.p2align	4, , 16
.LBB28_7:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$t0, $a7, 0
	ld.w	$t1, $a5, 0
	ld.w	$t2, $a3, 0
	add.d	$t0, $t1, $t0
	st.w	$t0, $a4, 0
	ld.w	$t0, $a2, 0
	addi.d	$t1, $t2, 1
	ld.w	$t2, $a1, 0
	st.w	$t1, $a3, 0
	slli.d	$t0, $t0, 1
	st.w	$t0, $a2, 0
	mul.d	$t0, $t2, $a6
	srli.d	$t1, $t0, 63
	srai.d	$t0, $t0, 33
	add.d	$t0, $t0, $t1
	st.w	$t0, $a1, 0
	addi.d	$a1, $a1, 4
	addi.d	$a2, $a2, 4
	addi.d	$a3, $a3, 4
	addi.d	$a4, $a4, 4
	addi.d	$a5, $a5, 4
	addi.d	$a0, $a0, -1
	addi.d	$a7, $a7, 4
	bnez	$a0, .LBB28_7
.LBB28_8:                               # %._crit_edge
	move	$a0, $zero
	ret
.Lfunc_end28:
	.size	_ZL17bigLoopWithVW4IC4i, .Lfunc_end28-_ZL17bigLoopWithVW4IC4i
                                        # -- End function
	.globl	_Z38benchForBigLoopWithReductionAutoVecTC1RN9benchmark5StateE # -- Begin function _Z38benchForBigLoopWithReductionAutoVecTC1RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForBigLoopWithReductionAutoVecTC1RN9benchmark5StateE,@function
_Z38benchForBigLoopWithReductionAutoVecTC1RN9benchmark5StateE: # @_Z38benchForBigLoopWithReductionAutoVecTC1RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB29_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB29_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB29_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(_ZL27bigLoopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB29_3
.LBB29_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end29:
	.size	_Z38benchForBigLoopWithReductionAutoVecTC1RN9benchmark5StateE, .Lfunc_end29-_Z38benchForBigLoopWithReductionAutoVecTC1RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL27bigLoopWithReductionAutoVeci
	.type	_ZL27bigLoopWithReductionAutoVeci,@function
_ZL27bigLoopWithReductionAutoVeci:      # @_ZL27bigLoopWithReductionAutoVeci
# %bb.0:
	ori	$a1, $zero, 1
	blt	$a0, $a1, .LBB30_3
# %bb.1:                                # %.lr.ph.preheader
	ori	$a1, $zero, 4
	lu12i.w	$a2, 419430
	bgeu	$a0, $a1, .LBB30_4
# %bb.2:
	move	$a3, $zero
	move	$a1, $zero
	b	.LBB30_7
.LBB30_3:
	move	$a1, $zero
	move	$a0, $a1
	ret
.LBB30_4:                               # %vector.ph
	pcalau12i	$a1, %pc_hi20(F)
	addi.d	$a1, $a1, %pc_lo12(F)
	pcalau12i	$a3, %pc_hi20(E)
	addi.d	$a4, $a3, %pc_lo12(E)
	pcalau12i	$a3, %pc_hi20(D)
	addi.d	$a5, $a3, %pc_lo12(D)
	pcalau12i	$a3, %pc_hi20(A)
	addi.d	$a6, $a3, %pc_lo12(A)
	bstrpick.d	$a3, $a0, 30, 2
	slli.d	$a3, $a3, 2
	vrepli.b	$vr0, 0
	ori	$a7, $a2, 1639
	vreplgr2vr.w	$vr1, $a7
	move	$a7, $a3
	.p2align	4, , 16
.LBB30_5:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr2, $a6, 0
	vld	$vr3, $a5, 0
	vadd.w	$vr0, $vr2, $vr0
	vld	$vr2, $a4, 0
	vaddi.wu	$vr3, $vr3, 1
	vld	$vr4, $a1, 0
	vst	$vr3, $a5, 0
	vslli.w	$vr2, $vr2, 1
	vst	$vr2, $a4, 0
	vmuh.w	$vr2, $vr4, $vr1
	vsrai.w	$vr2, $vr2, 1
	vsrli.w	$vr3, $vr2, 31
	vadd.w	$vr2, $vr2, $vr3
	vst	$vr2, $a1, 0
	addi.d	$a7, $a7, -4
	addi.d	$a1, $a1, 16
	addi.d	$a4, $a4, 16
	addi.d	$a5, $a5, 16
	addi.d	$a6, $a6, 16
	bnez	$a7, .LBB30_5
# %bb.6:                                # %middle.block
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a1, $vr0, 0
	beq	$a3, $a0, .LBB30_9
.LBB30_7:                               # %.lr.ph.preheader15
	pcalau12i	$a4, %pc_hi20(F)
	addi.d	$a4, $a4, %pc_lo12(F)
	alsl.d	$a4, $a3, $a4, 2
	pcalau12i	$a5, %pc_hi20(E)
	addi.d	$a5, $a5, %pc_lo12(E)
	alsl.d	$a5, $a3, $a5, 2
	pcalau12i	$a6, %pc_hi20(D)
	addi.d	$a6, $a6, %pc_lo12(D)
	alsl.d	$a6, $a3, $a6, 2
	pcalau12i	$a7, %pc_hi20(A)
	addi.d	$a7, $a7, %pc_lo12(A)
	alsl.d	$a7, $a3, $a7, 2
	sub.d	$a0, $a0, $a3
	ori	$a2, $a2, 1639
	.p2align	4, , 16
.LBB30_8:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a3, $a7, 0
	ld.w	$t0, $a6, 0
	add.w	$a1, $a3, $a1
	ld.w	$a3, $a5, 0
	addi.d	$t0, $t0, 1
	ld.w	$t1, $a4, 0
	st.w	$t0, $a6, 0
	slli.d	$a3, $a3, 1
	st.w	$a3, $a5, 0
	mul.d	$a3, $t1, $a2
	srli.d	$t0, $a3, 63
	srai.d	$a3, $a3, 33
	add.d	$a3, $a3, $t0
	st.w	$a3, $a4, 0
	addi.d	$a4, $a4, 4
	addi.d	$a5, $a5, 4
	addi.d	$a6, $a6, 4
	addi.d	$a0, $a0, -1
	addi.d	$a7, $a7, 4
	bnez	$a0, .LBB30_8
.LBB30_9:                               # %._crit_edge
	move	$a0, $a1
	ret
.Lfunc_end30:
	.size	_ZL27bigLoopWithReductionAutoVeci, .Lfunc_end30-_ZL27bigLoopWithReductionAutoVeci
                                        # -- End function
	.globl	_Z37benchForIC1VW4BigLoopWithReductionTC1RN9benchmark5StateE # -- Begin function _Z37benchForIC1VW4BigLoopWithReductionTC1RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC1VW4BigLoopWithReductionTC1RN9benchmark5StateE,@function
_Z37benchForIC1VW4BigLoopWithReductionTC1RN9benchmark5StateE: # @_Z37benchForIC1VW4BigLoopWithReductionTC1RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB31_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB31_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB31_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB31_3
.LBB31_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end31:
	.size	_Z37benchForIC1VW4BigLoopWithReductionTC1RN9benchmark5StateE, .Lfunc_end31-_Z37benchForIC1VW4BigLoopWithReductionTC1RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL30bigLoopWithReductionWithVW4IC1i
	.type	_ZL30bigLoopWithReductionWithVW4IC1i,@function
_ZL30bigLoopWithReductionWithVW4IC1i:   # @_ZL30bigLoopWithReductionWithVW4IC1i
# %bb.0:
	ori	$a1, $zero, 1
	blt	$a0, $a1, .LBB32_3
# %bb.1:                                # %.lr.ph.preheader
	ori	$a1, $zero, 4
	lu12i.w	$a2, 419430
	bgeu	$a0, $a1, .LBB32_4
# %bb.2:
	move	$a3, $zero
	move	$a1, $zero
	b	.LBB32_7
.LBB32_3:
	move	$a1, $zero
	move	$a0, $a1
	ret
.LBB32_4:                               # %vector.ph
	pcalau12i	$a1, %pc_hi20(F)
	addi.d	$a1, $a1, %pc_lo12(F)
	pcalau12i	$a3, %pc_hi20(E)
	addi.d	$a4, $a3, %pc_lo12(E)
	pcalau12i	$a3, %pc_hi20(D)
	addi.d	$a5, $a3, %pc_lo12(D)
	pcalau12i	$a3, %pc_hi20(A)
	addi.d	$a6, $a3, %pc_lo12(A)
	bstrpick.d	$a3, $a0, 30, 2
	slli.d	$a3, $a3, 2
	vrepli.b	$vr0, 0
	ori	$a7, $a2, 1639
	vreplgr2vr.w	$vr1, $a7
	move	$a7, $a3
	.p2align	4, , 16
.LBB32_5:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr2, $a6, 0
	vld	$vr3, $a5, 0
	vadd.w	$vr0, $vr2, $vr0
	vld	$vr2, $a4, 0
	vaddi.wu	$vr3, $vr3, 1
	vld	$vr4, $a1, 0
	vst	$vr3, $a5, 0
	vslli.w	$vr2, $vr2, 1
	vst	$vr2, $a4, 0
	vmuh.w	$vr2, $vr4, $vr1
	vsrai.w	$vr2, $vr2, 1
	vsrli.w	$vr3, $vr2, 31
	vadd.w	$vr2, $vr2, $vr3
	vst	$vr2, $a1, 0
	addi.d	$a7, $a7, -4
	addi.d	$a1, $a1, 16
	addi.d	$a4, $a4, 16
	addi.d	$a5, $a5, 16
	addi.d	$a6, $a6, 16
	bnez	$a7, .LBB32_5
# %bb.6:                                # %middle.block
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a1, $vr0, 0
	beq	$a3, $a0, .LBB32_9
.LBB32_7:                               # %.lr.ph.preheader15
	pcalau12i	$a4, %pc_hi20(F)
	addi.d	$a4, $a4, %pc_lo12(F)
	alsl.d	$a4, $a3, $a4, 2
	pcalau12i	$a5, %pc_hi20(E)
	addi.d	$a5, $a5, %pc_lo12(E)
	alsl.d	$a5, $a3, $a5, 2
	pcalau12i	$a6, %pc_hi20(D)
	addi.d	$a6, $a6, %pc_lo12(D)
	alsl.d	$a6, $a3, $a6, 2
	pcalau12i	$a7, %pc_hi20(A)
	addi.d	$a7, $a7, %pc_lo12(A)
	alsl.d	$a7, $a3, $a7, 2
	sub.d	$a0, $a0, $a3
	ori	$a2, $a2, 1639
	.p2align	4, , 16
.LBB32_8:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a3, $a7, 0
	ld.w	$t0, $a6, 0
	add.w	$a1, $a3, $a1
	ld.w	$a3, $a5, 0
	addi.d	$t0, $t0, 1
	ld.w	$t1, $a4, 0
	st.w	$t0, $a6, 0
	slli.d	$a3, $a3, 1
	st.w	$a3, $a5, 0
	mul.d	$a3, $t1, $a2
	srli.d	$t0, $a3, 63
	srai.d	$a3, $a3, 33
	add.d	$a3, $a3, $t0
	st.w	$a3, $a4, 0
	addi.d	$a4, $a4, 4
	addi.d	$a5, $a5, 4
	addi.d	$a6, $a6, 4
	addi.d	$a0, $a0, -1
	addi.d	$a7, $a7, 4
	bnez	$a0, .LBB32_8
.LBB32_9:                               # %._crit_edge
	move	$a0, $a1
	ret
.Lfunc_end32:
	.size	_ZL30bigLoopWithReductionWithVW4IC1i, .Lfunc_end32-_ZL30bigLoopWithReductionWithVW4IC1i
                                        # -- End function
	.globl	_Z37benchForIC2VW4BigLoopWithReductionTC1RN9benchmark5StateE # -- Begin function _Z37benchForIC2VW4BigLoopWithReductionTC1RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC2VW4BigLoopWithReductionTC1RN9benchmark5StateE,@function
_Z37benchForIC2VW4BigLoopWithReductionTC1RN9benchmark5StateE: # @_Z37benchForIC2VW4BigLoopWithReductionTC1RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB33_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB33_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB33_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB33_3
.LBB33_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end33:
	.size	_Z37benchForIC2VW4BigLoopWithReductionTC1RN9benchmark5StateE, .Lfunc_end33-_Z37benchForIC2VW4BigLoopWithReductionTC1RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL30bigLoopWithReductionWithVW4IC2i
	.type	_ZL30bigLoopWithReductionWithVW4IC2i,@function
_ZL30bigLoopWithReductionWithVW4IC2i:   # @_ZL30bigLoopWithReductionWithVW4IC2i
# %bb.0:
	ori	$a1, $zero, 1
	blt	$a0, $a1, .LBB34_3
# %bb.1:                                # %.lr.ph.preheader
	ori	$a1, $zero, 8
	pcalau12i	$a2, %pc_hi20(F)
	addi.d	$a2, $a2, %pc_lo12(F)
	pcalau12i	$a3, %pc_hi20(E)
	addi.d	$a3, $a3, %pc_lo12(E)
	pcalau12i	$a4, %pc_hi20(D)
	addi.d	$a4, $a4, %pc_lo12(D)
	pcalau12i	$a5, %pc_hi20(A)
	addi.d	$a6, $a5, %pc_lo12(A)
	lu12i.w	$a5, 419430
	bgeu	$a0, $a1, .LBB34_4
# %bb.2:
	move	$a7, $zero
	move	$a1, $zero
	b	.LBB34_7
.LBB34_3:
	move	$a1, $zero
	move	$a0, $a1
	ret
.LBB34_4:                               # %vector.ph
	addi.d	$a1, $a6, 16
	addi.d	$t0, $a2, 16
	addi.d	$t1, $a4, 16
	addi.d	$t2, $a3, 16
	bstrpick.d	$a7, $a0, 30, 3
	slli.d	$a7, $a7, 3
	vrepli.b	$vr0, 0
	ori	$t3, $a5, 1639
	vreplgr2vr.w	$vr1, $t3
	move	$t3, $a7
	vori.b	$vr2, $vr0, 0
	.p2align	4, , 16
.LBB34_5:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr3, $a1, -16
	vld	$vr4, $a1, 0
	vld	$vr5, $t1, -16
	vadd.w	$vr0, $vr3, $vr0
	vadd.w	$vr2, $vr4, $vr2
	vld	$vr3, $t1, 0
	vaddi.wu	$vr4, $vr5, 1
	vst	$vr4, $t1, -16
	vld	$vr4, $t2, -16
	vld	$vr5, $t2, 0
	vaddi.wu	$vr3, $vr3, 1
	vst	$vr3, $t1, 0
	vslli.w	$vr3, $vr4, 1
	vslli.w	$vr4, $vr5, 1
	vld	$vr5, $t0, -16
	vst	$vr3, $t2, -16
	vst	$vr4, $t2, 0
	vld	$vr3, $t0, 0
	vmuh.w	$vr4, $vr5, $vr1
	vsrai.w	$vr4, $vr4, 1
	vsrli.w	$vr5, $vr4, 31
	vadd.w	$vr4, $vr4, $vr5
	vmuh.w	$vr3, $vr3, $vr1
	vsrai.w	$vr3, $vr3, 1
	vsrli.w	$vr5, $vr3, 31
	vadd.w	$vr3, $vr3, $vr5
	vst	$vr4, $t0, -16
	vst	$vr3, $t0, 0
	addi.d	$t3, $t3, -8
	addi.d	$a1, $a1, 32
	addi.d	$t0, $t0, 32
	addi.d	$t1, $t1, 32
	addi.d	$t2, $t2, 32
	bnez	$t3, .LBB34_5
# %bb.6:                                # %middle.block
	vadd.w	$vr0, $vr2, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a1, $vr0, 0
	beq	$a7, $a0, .LBB34_9
.LBB34_7:                               # %.lr.ph.preheader20
	alsl.d	$a2, $a7, $a2, 2
	alsl.d	$a3, $a7, $a3, 2
	alsl.d	$a4, $a7, $a4, 2
	alsl.d	$a6, $a7, $a6, 2
	sub.d	$a0, $a0, $a7
	ori	$a5, $a5, 1639
	.p2align	4, , 16
.LBB34_8:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a7, $a6, 0
	ld.w	$t0, $a4, 0
	add.w	$a1, $a7, $a1
	ld.w	$a7, $a3, 0
	addi.d	$t0, $t0, 1
	ld.w	$t1, $a2, 0
	st.w	$t0, $a4, 0
	slli.d	$a7, $a7, 1
	st.w	$a7, $a3, 0
	mul.d	$a7, $t1, $a5
	srli.d	$t0, $a7, 63
	srai.d	$a7, $a7, 33
	add.d	$a7, $a7, $t0
	st.w	$a7, $a2, 0
	addi.d	$a2, $a2, 4
	addi.d	$a3, $a3, 4
	addi.d	$a4, $a4, 4
	addi.d	$a0, $a0, -1
	addi.d	$a6, $a6, 4
	bnez	$a0, .LBB34_8
.LBB34_9:                               # %._crit_edge
	move	$a0, $a1
	ret
.Lfunc_end34:
	.size	_ZL30bigLoopWithReductionWithVW4IC2i, .Lfunc_end34-_ZL30bigLoopWithReductionWithVW4IC2i
                                        # -- End function
	.globl	_Z37benchForIC4VW4BigLoopWithReductionTC1RN9benchmark5StateE # -- Begin function _Z37benchForIC4VW4BigLoopWithReductionTC1RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC4VW4BigLoopWithReductionTC1RN9benchmark5StateE,@function
_Z37benchForIC4VW4BigLoopWithReductionTC1RN9benchmark5StateE: # @_Z37benchForIC4VW4BigLoopWithReductionTC1RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB35_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB35_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB35_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB35_3
.LBB35_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end35:
	.size	_Z37benchForIC4VW4BigLoopWithReductionTC1RN9benchmark5StateE, .Lfunc_end35-_Z37benchForIC4VW4BigLoopWithReductionTC1RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL30bigLoopWithReductionWithVW4IC4i
	.type	_ZL30bigLoopWithReductionWithVW4IC4i,@function
_ZL30bigLoopWithReductionWithVW4IC4i:   # @_ZL30bigLoopWithReductionWithVW4IC4i
# %bb.0:
	ori	$a1, $zero, 1
	blt	$a0, $a1, .LBB36_3
# %bb.1:                                # %.lr.ph.preheader
	ori	$a1, $zero, 16
	pcalau12i	$a2, %pc_hi20(F)
	addi.d	$a2, $a2, %pc_lo12(F)
	pcalau12i	$a3, %pc_hi20(E)
	addi.d	$a3, $a3, %pc_lo12(E)
	pcalau12i	$a4, %pc_hi20(D)
	addi.d	$a4, $a4, %pc_lo12(D)
	pcalau12i	$a5, %pc_hi20(A)
	addi.d	$a6, $a5, %pc_lo12(A)
	lu12i.w	$a5, 419430
	bgeu	$a0, $a1, .LBB36_4
# %bb.2:
	move	$a7, $zero
	move	$a1, $zero
	b	.LBB36_7
.LBB36_3:
	move	$a1, $zero
	move	$a0, $a1
	ret
.LBB36_4:                               # %vector.ph
	addi.d	$a1, $a6, 32
	addi.d	$t0, $a4, 32
	addi.d	$t1, $a3, 32
	addi.d	$t2, $a2, 32
	bstrpick.d	$a7, $a0, 30, 4
	slli.d	$a7, $a7, 4
	vrepli.b	$vr0, 0
	ori	$t3, $a5, 1639
	vreplgr2vr.w	$vr1, $t3
	move	$t3, $a7
	vori.b	$vr2, $vr0, 0
	vori.b	$vr3, $vr0, 0
	vori.b	$vr4, $vr0, 0
	.p2align	4, , 16
.LBB36_5:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr5, $a1, -32
	vld	$vr6, $a1, -16
	vld	$vr7, $a1, 0
	vld	$vr8, $a1, 16
	vadd.w	$vr0, $vr5, $vr0
	vadd.w	$vr2, $vr6, $vr2
	vadd.w	$vr3, $vr7, $vr3
	vadd.w	$vr4, $vr8, $vr4
	vld	$vr5, $t0, -32
	vld	$vr6, $t0, -16
	vld	$vr7, $t0, 0
	vld	$vr8, $t0, 16
	vaddi.wu	$vr5, $vr5, 1
	vaddi.wu	$vr6, $vr6, 1
	vaddi.wu	$vr7, $vr7, 1
	vaddi.wu	$vr8, $vr8, 1
	vst	$vr5, $t0, -32
	vst	$vr6, $t0, -16
	vst	$vr7, $t0, 0
	vst	$vr8, $t0, 16
	vld	$vr5, $t1, -32
	vld	$vr6, $t1, -16
	vld	$vr7, $t1, 0
	vld	$vr8, $t1, 16
	vslli.w	$vr5, $vr5, 1
	vslli.w	$vr6, $vr6, 1
	vslli.w	$vr7, $vr7, 1
	vslli.w	$vr8, $vr8, 1
	vst	$vr5, $t1, -32
	vst	$vr6, $t1, -16
	vst	$vr7, $t1, 0
	vst	$vr8, $t1, 16
	vld	$vr5, $t2, -32
	vld	$vr6, $t2, -16
	vld	$vr7, $t2, 0
	vld	$vr8, $t2, 16
	vmuh.w	$vr5, $vr5, $vr1
	vsrai.w	$vr5, $vr5, 1
	vsrli.w	$vr9, $vr5, 31
	vadd.w	$vr5, $vr5, $vr9
	vmuh.w	$vr6, $vr6, $vr1
	vsrai.w	$vr6, $vr6, 1
	vsrli.w	$vr9, $vr6, 31
	vadd.w	$vr6, $vr6, $vr9
	vmuh.w	$vr7, $vr7, $vr1
	vsrai.w	$vr7, $vr7, 1
	vsrli.w	$vr9, $vr7, 31
	vadd.w	$vr7, $vr7, $vr9
	vmuh.w	$vr8, $vr8, $vr1
	vsrai.w	$vr8, $vr8, 1
	vsrli.w	$vr9, $vr8, 31
	vadd.w	$vr8, $vr8, $vr9
	vst	$vr5, $t2, -32
	vst	$vr6, $t2, -16
	vst	$vr7, $t2, 0
	vst	$vr8, $t2, 16
	addi.d	$t3, $t3, -16
	addi.d	$a1, $a1, 64
	addi.d	$t0, $t0, 64
	addi.d	$t1, $t1, 64
	addi.d	$t2, $t2, 64
	bnez	$t3, .LBB36_5
# %bb.6:                                # %middle.block
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr0, $vr3, $vr0
	vadd.w	$vr0, $vr4, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a1, $vr0, 0
	beq	$a7, $a0, .LBB36_9
.LBB36_7:                               # %.lr.ph.preheader32
	alsl.d	$a2, $a7, $a2, 2
	alsl.d	$a3, $a7, $a3, 2
	alsl.d	$a4, $a7, $a4, 2
	alsl.d	$a6, $a7, $a6, 2
	sub.d	$a0, $a0, $a7
	ori	$a5, $a5, 1639
	.p2align	4, , 16
.LBB36_8:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a7, $a6, 0
	ld.w	$t0, $a4, 0
	add.w	$a1, $a7, $a1
	ld.w	$a7, $a3, 0
	addi.d	$t0, $t0, 1
	ld.w	$t1, $a2, 0
	st.w	$t0, $a4, 0
	slli.d	$a7, $a7, 1
	st.w	$a7, $a3, 0
	mul.d	$a7, $t1, $a5
	srli.d	$t0, $a7, 63
	srai.d	$a7, $a7, 33
	add.d	$a7, $a7, $t0
	st.w	$a7, $a2, 0
	addi.d	$a2, $a2, 4
	addi.d	$a3, $a3, 4
	addi.d	$a4, $a4, 4
	addi.d	$a0, $a0, -1
	addi.d	$a6, $a6, 4
	bnez	$a0, .LBB36_8
.LBB36_9:                               # %._crit_edge
	move	$a0, $a1
	ret
.Lfunc_end36:
	.size	_ZL30bigLoopWithReductionWithVW4IC4i, .Lfunc_end36-_ZL30bigLoopWithReductionWithVW4IC4i
                                        # -- End function
	.globl	_Z37benchForIC1VW1BigLoopWithReductionTC1RN9benchmark5StateE # -- Begin function _Z37benchForIC1VW1BigLoopWithReductionTC1RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC1VW1BigLoopWithReductionTC1RN9benchmark5StateE,@function
_Z37benchForIC1VW1BigLoopWithReductionTC1RN9benchmark5StateE: # @_Z37benchForIC1VW1BigLoopWithReductionTC1RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB37_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB37_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB37_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB37_3
.LBB37_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end37:
	.size	_Z37benchForIC1VW1BigLoopWithReductionTC1RN9benchmark5StateE, .Lfunc_end37-_Z37benchForIC1VW1BigLoopWithReductionTC1RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL30bigLoopWithReductionWithVW1IC1i
	.type	_ZL30bigLoopWithReductionWithVW1IC1i,@function
_ZL30bigLoopWithReductionWithVW1IC1i:   # @_ZL30bigLoopWithReductionWithVW1IC1i
# %bb.0:
	ori	$a1, $zero, 1
	blt	$a0, $a1, .LBB38_4
# %bb.1:                                # %.lr.ph.preheader
	move	$a1, $zero
	pcalau12i	$a2, %pc_hi20(F)
	addi.d	$a2, $a2, %pc_lo12(F)
	pcalau12i	$a3, %pc_hi20(E)
	addi.d	$a3, $a3, %pc_lo12(E)
	pcalau12i	$a4, %pc_hi20(D)
	addi.d	$a4, $a4, %pc_lo12(D)
	pcalau12i	$a5, %pc_hi20(A)
	addi.d	$a5, $a5, %pc_lo12(A)
	lu12i.w	$a6, 419430
	ori	$a6, $a6, 1639
	.p2align	4, , 16
.LBB38_2:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a7, $a5, 0
	ld.w	$t0, $a4, 0
	add.w	$a1, $a7, $a1
	ld.w	$a7, $a3, 0
	addi.d	$t0, $t0, 1
	ld.w	$t1, $a2, 0
	st.w	$t0, $a4, 0
	slli.d	$a7, $a7, 1
	st.w	$a7, $a3, 0
	mul.d	$a7, $t1, $a6
	srli.d	$t0, $a7, 63
	srai.d	$a7, $a7, 33
	add.d	$a7, $a7, $t0
	st.w	$a7, $a2, 0
	addi.d	$a2, $a2, 4
	addi.d	$a3, $a3, 4
	addi.d	$a4, $a4, 4
	addi.d	$a0, $a0, -1
	addi.d	$a5, $a5, 4
	bnez	$a0, .LBB38_2
# %bb.3:                                # %._crit_edge
	move	$a0, $a1
	ret
.LBB38_4:
	move	$a1, $zero
	move	$a0, $a1
	ret
.Lfunc_end38:
	.size	_ZL30bigLoopWithReductionWithVW1IC1i, .Lfunc_end38-_ZL30bigLoopWithReductionWithVW1IC1i
                                        # -- End function
	.globl	_Z37benchForIC2VW1BigLoopWithReductionTC1RN9benchmark5StateE # -- Begin function _Z37benchForIC2VW1BigLoopWithReductionTC1RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC2VW1BigLoopWithReductionTC1RN9benchmark5StateE,@function
_Z37benchForIC2VW1BigLoopWithReductionTC1RN9benchmark5StateE: # @_Z37benchForIC2VW1BigLoopWithReductionTC1RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB39_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB39_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB39_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB39_3
.LBB39_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end39:
	.size	_Z37benchForIC2VW1BigLoopWithReductionTC1RN9benchmark5StateE, .Lfunc_end39-_Z37benchForIC2VW1BigLoopWithReductionTC1RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL30bigLoopWithReductionWithVW1IC2i
	.type	_ZL30bigLoopWithReductionWithVW1IC2i,@function
_ZL30bigLoopWithReductionWithVW1IC2i:   # @_ZL30bigLoopWithReductionWithVW1IC2i
# %bb.0:
	ori	$a1, $zero, 1
	blt	$a0, $a1, .LBB40_3
# %bb.1:                                # %.lr.ph.preheader
	addi.d	$sp, $sp, -16
	st.d	$fp, $sp, 8                     # 8-byte Folded Spill
	pcalau12i	$a2, %pc_hi20(F)
	addi.d	$a2, $a2, %pc_lo12(F)
	pcalau12i	$a3, %pc_hi20(E)
	addi.d	$a3, $a3, %pc_lo12(E)
	pcalau12i	$a4, %pc_hi20(D)
	addi.d	$a4, $a4, %pc_lo12(D)
	pcalau12i	$a5, %pc_hi20(A)
	addi.d	$a6, $a5, %pc_lo12(A)
	lu12i.w	$a5, 419430
	bne	$a0, $a1, .LBB40_4
# %bb.2:
	move	$a7, $zero
	move	$a1, $zero
	b	.LBB40_7
.LBB40_3:
	move	$a0, $zero
	ret
.LBB40_4:                               # %vector.ph
	move	$a1, $zero
	move	$t0, $zero
	addi.d	$t1, $a6, 4
	addi.d	$t2, $a4, 4
	addi.d	$t3, $a3, 4
	addi.d	$t4, $a2, 4
	bstrpick.d	$a7, $a0, 30, 1
	slli.d	$a7, $a7, 1
	ori	$t5, $a5, 1639
	move	$t6, $a7
	.p2align	4, , 16
.LBB40_5:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$t7, $t1, -4
	ld.w	$t8, $t1, 0
	ld.w	$fp, $t2, -4
	add.d	$a1, $t7, $a1
	add.d	$t0, $t8, $t0
	ld.w	$t7, $t2, 0
	addi.d	$t8, $fp, 1
	st.w	$t8, $t2, -4
	ld.w	$t8, $t3, -4
	ld.w	$fp, $t3, 0
	addi.d	$t7, $t7, 1
	st.w	$t7, $t2, 0
	slli.d	$t7, $t8, 1
	slli.d	$t8, $fp, 1
	ld.w	$fp, $t4, -4
	st.w	$t7, $t3, -4
	st.w	$t8, $t3, 0
	ld.w	$t7, $t4, 0
	mul.d	$t8, $fp, $t5
	srli.d	$fp, $t8, 63
	srai.d	$t8, $t8, 33
	add.d	$t8, $t8, $fp
	mul.d	$t7, $t7, $t5
	srli.d	$fp, $t7, 63
	srai.d	$t7, $t7, 33
	add.d	$t7, $t7, $fp
	st.w	$t8, $t4, -4
	st.w	$t7, $t4, 0
	addi.d	$t1, $t1, 8
	addi.d	$t2, $t2, 8
	addi.d	$t3, $t3, 8
	addi.d	$t6, $t6, -2
	addi.d	$t4, $t4, 8
	bnez	$t6, .LBB40_5
# %bb.6:                                # %middle.block
	add.w	$a1, $t0, $a1
	beq	$a7, $a0, .LBB40_9
.LBB40_7:                               # %.lr.ph.preheader13
	alsl.d	$a2, $a7, $a2, 2
	alsl.d	$a3, $a7, $a3, 2
	alsl.d	$a4, $a7, $a4, 2
	alsl.d	$a6, $a7, $a6, 2
	sub.d	$a0, $a0, $a7
	ori	$a5, $a5, 1639
	.p2align	4, , 16
.LBB40_8:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a7, $a6, 0
	ld.w	$t0, $a4, 0
	add.w	$a1, $a7, $a1
	ld.w	$a7, $a3, 0
	addi.d	$t0, $t0, 1
	ld.w	$t1, $a2, 0
	st.w	$t0, $a4, 0
	slli.d	$a7, $a7, 1
	st.w	$a7, $a3, 0
	mul.d	$a7, $t1, $a5
	srli.d	$t0, $a7, 63
	srai.d	$a7, $a7, 33
	add.d	$a7, $a7, $t0
	st.w	$a7, $a2, 0
	addi.d	$a2, $a2, 4
	addi.d	$a3, $a3, 4
	addi.d	$a4, $a4, 4
	addi.d	$a0, $a0, -1
	addi.d	$a6, $a6, 4
	bnez	$a0, .LBB40_8
.LBB40_9:
	ld.d	$fp, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	move	$a0, $a1
	ret
.Lfunc_end40:
	.size	_ZL30bigLoopWithReductionWithVW1IC2i, .Lfunc_end40-_ZL30bigLoopWithReductionWithVW1IC2i
                                        # -- End function
	.globl	_Z37benchForIC4VW1BigLoopWithReductionTC1RN9benchmark5StateE # -- Begin function _Z37benchForIC4VW1BigLoopWithReductionTC1RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC4VW1BigLoopWithReductionTC1RN9benchmark5StateE,@function
_Z37benchForIC4VW1BigLoopWithReductionTC1RN9benchmark5StateE: # @_Z37benchForIC4VW1BigLoopWithReductionTC1RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB41_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB41_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB41_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB41_3
.LBB41_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end41:
	.size	_Z37benchForIC4VW1BigLoopWithReductionTC1RN9benchmark5StateE, .Lfunc_end41-_Z37benchForIC4VW1BigLoopWithReductionTC1RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL30bigLoopWithReductionWithVW1IC4i
	.type	_ZL30bigLoopWithReductionWithVW1IC4i,@function
_ZL30bigLoopWithReductionWithVW1IC4i:   # @_ZL30bigLoopWithReductionWithVW1IC4i
# %bb.0:
	ori	$a1, $zero, 1
	blt	$a0, $a1, .LBB42_3
# %bb.1:                                # %.lr.ph.preheader
	ori	$a1, $zero, 4
	lu12i.w	$a2, 419430
	bgeu	$a0, $a1, .LBB42_4
# %bb.2:
	move	$a3, $zero
	move	$a1, $zero
	b	.LBB42_7
.LBB42_3:
	move	$a1, $zero
	move	$a0, $a1
	ret
.LBB42_4:                               # %vector.ph
	pcalau12i	$a1, %pc_hi20(F)
	addi.d	$a1, $a1, %pc_lo12(F)
	pcalau12i	$a3, %pc_hi20(E)
	addi.d	$a4, $a3, %pc_lo12(E)
	pcalau12i	$a3, %pc_hi20(D)
	addi.d	$a5, $a3, %pc_lo12(D)
	pcalau12i	$a3, %pc_hi20(A)
	addi.d	$a6, $a3, %pc_lo12(A)
	bstrpick.d	$a3, $a0, 30, 2
	slli.d	$a3, $a3, 2
	vrepli.b	$vr0, 0
	ori	$a7, $a2, 1639
	vreplgr2vr.w	$vr1, $a7
	move	$a7, $a3
	.p2align	4, , 16
.LBB42_5:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr2, $a6, 0
	vld	$vr3, $a5, 0
	vadd.w	$vr0, $vr2, $vr0
	vld	$vr2, $a4, 0
	vaddi.wu	$vr3, $vr3, 1
	vld	$vr4, $a1, 0
	vst	$vr3, $a5, 0
	vslli.w	$vr2, $vr2, 1
	vst	$vr2, $a4, 0
	vmuh.w	$vr2, $vr4, $vr1
	vsrai.w	$vr2, $vr2, 1
	vsrli.w	$vr3, $vr2, 31
	vadd.w	$vr2, $vr2, $vr3
	vst	$vr2, $a1, 0
	addi.d	$a7, $a7, -4
	addi.d	$a1, $a1, 16
	addi.d	$a4, $a4, 16
	addi.d	$a5, $a5, 16
	addi.d	$a6, $a6, 16
	bnez	$a7, .LBB42_5
# %bb.6:                                # %middle.block
	vpickve2gr.w	$a1, $vr0, 0
	vpickve2gr.w	$a4, $vr0, 1
	add.d	$a1, $a4, $a1
	vpickve2gr.w	$a4, $vr0, 2
	add.d	$a1, $a4, $a1
	vpickve2gr.w	$a4, $vr0, 3
	add.w	$a1, $a4, $a1
	beq	$a3, $a0, .LBB42_9
.LBB42_7:                               # %.lr.ph.preheader17
	pcalau12i	$a4, %pc_hi20(F)
	addi.d	$a4, $a4, %pc_lo12(F)
	alsl.d	$a4, $a3, $a4, 2
	pcalau12i	$a5, %pc_hi20(E)
	addi.d	$a5, $a5, %pc_lo12(E)
	alsl.d	$a5, $a3, $a5, 2
	pcalau12i	$a6, %pc_hi20(D)
	addi.d	$a6, $a6, %pc_lo12(D)
	alsl.d	$a6, $a3, $a6, 2
	pcalau12i	$a7, %pc_hi20(A)
	addi.d	$a7, $a7, %pc_lo12(A)
	alsl.d	$a7, $a3, $a7, 2
	sub.d	$a0, $a0, $a3
	ori	$a2, $a2, 1639
	.p2align	4, , 16
.LBB42_8:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a3, $a7, 0
	ld.w	$t0, $a6, 0
	add.w	$a1, $a3, $a1
	ld.w	$a3, $a5, 0
	addi.d	$t0, $t0, 1
	ld.w	$t1, $a4, 0
	st.w	$t0, $a6, 0
	slli.d	$a3, $a3, 1
	st.w	$a3, $a5, 0
	mul.d	$a3, $t1, $a2
	srli.d	$t0, $a3, 63
	srai.d	$a3, $a3, 33
	add.d	$a3, $a3, $t0
	st.w	$a3, $a4, 0
	addi.d	$a4, $a4, 4
	addi.d	$a5, $a5, 4
	addi.d	$a6, $a6, 4
	addi.d	$a0, $a0, -1
	addi.d	$a7, $a7, 4
	bnez	$a0, .LBB42_8
.LBB42_9:                               # %._crit_edge
	move	$a0, $a1
	ret
.Lfunc_end42:
	.size	_ZL30bigLoopWithReductionWithVW1IC4i, .Lfunc_end42-_ZL30bigLoopWithReductionWithVW1IC4i
                                        # -- End function
	.globl	_Z22benchAutoVecForLoopTC2RN9benchmark5StateE # -- Begin function _Z22benchAutoVecForLoopTC2RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchAutoVecForLoopTC2RN9benchmark5StateE,@function
_Z22benchAutoVecForLoopTC2RN9benchmark5StateE: # @_Z22benchAutoVecForLoopTC2RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB43_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB43_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB43_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 2
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB43_3
.LBB43_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end43:
	.size	_Z22benchAutoVecForLoopTC2RN9benchmark5StateE, .Lfunc_end43-_Z22benchAutoVecForLoopTC2RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z21benchForIC1VW4LoopTC2RN9benchmark5StateE # -- Begin function _Z21benchForIC1VW4LoopTC2RN9benchmark5StateE
	.p2align	5
	.type	_Z21benchForIC1VW4LoopTC2RN9benchmark5StateE,@function
_Z21benchForIC1VW4LoopTC2RN9benchmark5StateE: # @_Z21benchForIC1VW4LoopTC2RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB44_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB44_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB44_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 2
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB44_3
.LBB44_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end44:
	.size	_Z21benchForIC1VW4LoopTC2RN9benchmark5StateE, .Lfunc_end44-_Z21benchForIC1VW4LoopTC2RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z21benchForIC2VW4LoopTC2RN9benchmark5StateE # -- Begin function _Z21benchForIC2VW4LoopTC2RN9benchmark5StateE
	.p2align	5
	.type	_Z21benchForIC2VW4LoopTC2RN9benchmark5StateE,@function
_Z21benchForIC2VW4LoopTC2RN9benchmark5StateE: # @_Z21benchForIC2VW4LoopTC2RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB45_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB45_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB45_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 2
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB45_3
.LBB45_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end45:
	.size	_Z21benchForIC2VW4LoopTC2RN9benchmark5StateE, .Lfunc_end45-_Z21benchForIC2VW4LoopTC2RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z21benchForIC4VW4LoopTC2RN9benchmark5StateE # -- Begin function _Z21benchForIC4VW4LoopTC2RN9benchmark5StateE
	.p2align	5
	.type	_Z21benchForIC4VW4LoopTC2RN9benchmark5StateE,@function
_Z21benchForIC4VW4LoopTC2RN9benchmark5StateE: # @_Z21benchForIC4VW4LoopTC2RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB46_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB46_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB46_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 2
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB46_3
.LBB46_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end46:
	.size	_Z21benchForIC4VW4LoopTC2RN9benchmark5StateE, .Lfunc_end46-_Z21benchForIC4VW4LoopTC2RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForLoopWithReductionAutoVecTC2RN9benchmark5StateE # -- Begin function _Z35benchForLoopWithReductionAutoVecTC2RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForLoopWithReductionAutoVecTC2RN9benchmark5StateE,@function
_Z35benchForLoopWithReductionAutoVecTC2RN9benchmark5StateE: # @_Z35benchForLoopWithReductionAutoVecTC2RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB47_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB47_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB47_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 2
	pcaddu18i	$ra, %call36(_ZL24loopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB47_3
.LBB47_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end47:
	.size	_Z35benchForLoopWithReductionAutoVecTC2RN9benchmark5StateE, .Lfunc_end47-_Z35benchForLoopWithReductionAutoVecTC2RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC1VW4LoopWithReductionTC2RN9benchmark5StateE # -- Begin function _Z34benchForIC1VW4LoopWithReductionTC2RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC1VW4LoopWithReductionTC2RN9benchmark5StateE,@function
_Z34benchForIC1VW4LoopWithReductionTC2RN9benchmark5StateE: # @_Z34benchForIC1VW4LoopWithReductionTC2RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB48_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB48_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB48_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 2
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB48_3
.LBB48_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end48:
	.size	_Z34benchForIC1VW4LoopWithReductionTC2RN9benchmark5StateE, .Lfunc_end48-_Z34benchForIC1VW4LoopWithReductionTC2RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC2VW4LoopWithReductionTC2RN9benchmark5StateE # -- Begin function _Z34benchForIC2VW4LoopWithReductionTC2RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC2VW4LoopWithReductionTC2RN9benchmark5StateE,@function
_Z34benchForIC2VW4LoopWithReductionTC2RN9benchmark5StateE: # @_Z34benchForIC2VW4LoopWithReductionTC2RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB49_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB49_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB49_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 2
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB49_3
.LBB49_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end49:
	.size	_Z34benchForIC2VW4LoopWithReductionTC2RN9benchmark5StateE, .Lfunc_end49-_Z34benchForIC2VW4LoopWithReductionTC2RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC4VW4LoopWithReductionTC2RN9benchmark5StateE # -- Begin function _Z34benchForIC4VW4LoopWithReductionTC2RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC4VW4LoopWithReductionTC2RN9benchmark5StateE,@function
_Z34benchForIC4VW4LoopWithReductionTC2RN9benchmark5StateE: # @_Z34benchForIC4VW4LoopWithReductionTC2RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB50_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB50_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB50_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 2
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB50_3
.LBB50_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end50:
	.size	_Z34benchForIC4VW4LoopWithReductionTC2RN9benchmark5StateE, .Lfunc_end50-_Z34benchForIC4VW4LoopWithReductionTC2RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC1VW1LoopWithReductionTC2RN9benchmark5StateE # -- Begin function _Z34benchForIC1VW1LoopWithReductionTC2RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC1VW1LoopWithReductionTC2RN9benchmark5StateE,@function
_Z34benchForIC1VW1LoopWithReductionTC2RN9benchmark5StateE: # @_Z34benchForIC1VW1LoopWithReductionTC2RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB51_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB51_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB51_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 2
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB51_3
.LBB51_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end51:
	.size	_Z34benchForIC1VW1LoopWithReductionTC2RN9benchmark5StateE, .Lfunc_end51-_Z34benchForIC1VW1LoopWithReductionTC2RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC2VW1LoopWithReductionTC2RN9benchmark5StateE # -- Begin function _Z34benchForIC2VW1LoopWithReductionTC2RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC2VW1LoopWithReductionTC2RN9benchmark5StateE,@function
_Z34benchForIC2VW1LoopWithReductionTC2RN9benchmark5StateE: # @_Z34benchForIC2VW1LoopWithReductionTC2RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB52_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB52_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB52_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 2
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB52_3
.LBB52_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end52:
	.size	_Z34benchForIC2VW1LoopWithReductionTC2RN9benchmark5StateE, .Lfunc_end52-_Z34benchForIC2VW1LoopWithReductionTC2RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC4VW1LoopWithReductionTC2RN9benchmark5StateE # -- Begin function _Z34benchForIC4VW1LoopWithReductionTC2RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC4VW1LoopWithReductionTC2RN9benchmark5StateE,@function
_Z34benchForIC4VW1LoopWithReductionTC2RN9benchmark5StateE: # @_Z34benchForIC4VW1LoopWithReductionTC2RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB53_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB53_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB53_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 2
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB53_3
.LBB53_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end53:
	.size	_Z34benchForIC4VW1LoopWithReductionTC2RN9benchmark5StateE, .Lfunc_end53-_Z34benchForIC4VW1LoopWithReductionTC2RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchAutoVecForBigLoopTC2RN9benchmark5StateE # -- Begin function _Z25benchAutoVecForBigLoopTC2RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchAutoVecForBigLoopTC2RN9benchmark5StateE,@function
_Z25benchAutoVecForBigLoopTC2RN9benchmark5StateE: # @_Z25benchAutoVecForBigLoopTC2RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB54_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB54_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB54_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 2
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB54_3
.LBB54_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end54:
	.size	_Z25benchAutoVecForBigLoopTC2RN9benchmark5StateE, .Lfunc_end54-_Z25benchAutoVecForBigLoopTC2RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z24benchForIC1VW4BigLoopTC2RN9benchmark5StateE # -- Begin function _Z24benchForIC1VW4BigLoopTC2RN9benchmark5StateE
	.p2align	5
	.type	_Z24benchForIC1VW4BigLoopTC2RN9benchmark5StateE,@function
_Z24benchForIC1VW4BigLoopTC2RN9benchmark5StateE: # @_Z24benchForIC1VW4BigLoopTC2RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB55_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB55_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB55_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 2
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB55_3
.LBB55_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end55:
	.size	_Z24benchForIC1VW4BigLoopTC2RN9benchmark5StateE, .Lfunc_end55-_Z24benchForIC1VW4BigLoopTC2RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z24benchForIC2VW4BigLoopTC2RN9benchmark5StateE # -- Begin function _Z24benchForIC2VW4BigLoopTC2RN9benchmark5StateE
	.p2align	5
	.type	_Z24benchForIC2VW4BigLoopTC2RN9benchmark5StateE,@function
_Z24benchForIC2VW4BigLoopTC2RN9benchmark5StateE: # @_Z24benchForIC2VW4BigLoopTC2RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB56_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB56_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB56_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 2
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB56_3
.LBB56_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end56:
	.size	_Z24benchForIC2VW4BigLoopTC2RN9benchmark5StateE, .Lfunc_end56-_Z24benchForIC2VW4BigLoopTC2RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z24benchForIC4VW4BigLoopTC2RN9benchmark5StateE # -- Begin function _Z24benchForIC4VW4BigLoopTC2RN9benchmark5StateE
	.p2align	5
	.type	_Z24benchForIC4VW4BigLoopTC2RN9benchmark5StateE,@function
_Z24benchForIC4VW4BigLoopTC2RN9benchmark5StateE: # @_Z24benchForIC4VW4BigLoopTC2RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB57_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB57_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB57_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 2
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB57_3
.LBB57_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end57:
	.size	_Z24benchForIC4VW4BigLoopTC2RN9benchmark5StateE, .Lfunc_end57-_Z24benchForIC4VW4BigLoopTC2RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForBigLoopWithReductionAutoVecTC2RN9benchmark5StateE # -- Begin function _Z38benchForBigLoopWithReductionAutoVecTC2RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForBigLoopWithReductionAutoVecTC2RN9benchmark5StateE,@function
_Z38benchForBigLoopWithReductionAutoVecTC2RN9benchmark5StateE: # @_Z38benchForBigLoopWithReductionAutoVecTC2RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB58_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB58_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB58_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 2
	pcaddu18i	$ra, %call36(_ZL27bigLoopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB58_3
.LBB58_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end58:
	.size	_Z38benchForBigLoopWithReductionAutoVecTC2RN9benchmark5StateE, .Lfunc_end58-_Z38benchForBigLoopWithReductionAutoVecTC2RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC1VW4BigLoopWithReductionTC2RN9benchmark5StateE # -- Begin function _Z37benchForIC1VW4BigLoopWithReductionTC2RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC1VW4BigLoopWithReductionTC2RN9benchmark5StateE,@function
_Z37benchForIC1VW4BigLoopWithReductionTC2RN9benchmark5StateE: # @_Z37benchForIC1VW4BigLoopWithReductionTC2RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB59_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB59_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB59_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 2
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB59_3
.LBB59_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end59:
	.size	_Z37benchForIC1VW4BigLoopWithReductionTC2RN9benchmark5StateE, .Lfunc_end59-_Z37benchForIC1VW4BigLoopWithReductionTC2RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC2VW4BigLoopWithReductionTC2RN9benchmark5StateE # -- Begin function _Z37benchForIC2VW4BigLoopWithReductionTC2RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC2VW4BigLoopWithReductionTC2RN9benchmark5StateE,@function
_Z37benchForIC2VW4BigLoopWithReductionTC2RN9benchmark5StateE: # @_Z37benchForIC2VW4BigLoopWithReductionTC2RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB60_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB60_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB60_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 2
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB60_3
.LBB60_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end60:
	.size	_Z37benchForIC2VW4BigLoopWithReductionTC2RN9benchmark5StateE, .Lfunc_end60-_Z37benchForIC2VW4BigLoopWithReductionTC2RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC4VW4BigLoopWithReductionTC2RN9benchmark5StateE # -- Begin function _Z37benchForIC4VW4BigLoopWithReductionTC2RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC4VW4BigLoopWithReductionTC2RN9benchmark5StateE,@function
_Z37benchForIC4VW4BigLoopWithReductionTC2RN9benchmark5StateE: # @_Z37benchForIC4VW4BigLoopWithReductionTC2RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB61_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB61_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB61_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 2
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB61_3
.LBB61_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end61:
	.size	_Z37benchForIC4VW4BigLoopWithReductionTC2RN9benchmark5StateE, .Lfunc_end61-_Z37benchForIC4VW4BigLoopWithReductionTC2RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC1VW1BigLoopWithReductionTC2RN9benchmark5StateE # -- Begin function _Z37benchForIC1VW1BigLoopWithReductionTC2RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC1VW1BigLoopWithReductionTC2RN9benchmark5StateE,@function
_Z37benchForIC1VW1BigLoopWithReductionTC2RN9benchmark5StateE: # @_Z37benchForIC1VW1BigLoopWithReductionTC2RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB62_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB62_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB62_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 2
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB62_3
.LBB62_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end62:
	.size	_Z37benchForIC1VW1BigLoopWithReductionTC2RN9benchmark5StateE, .Lfunc_end62-_Z37benchForIC1VW1BigLoopWithReductionTC2RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC2VW1BigLoopWithReductionTC2RN9benchmark5StateE # -- Begin function _Z37benchForIC2VW1BigLoopWithReductionTC2RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC2VW1BigLoopWithReductionTC2RN9benchmark5StateE,@function
_Z37benchForIC2VW1BigLoopWithReductionTC2RN9benchmark5StateE: # @_Z37benchForIC2VW1BigLoopWithReductionTC2RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB63_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB63_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB63_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 2
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB63_3
.LBB63_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end63:
	.size	_Z37benchForIC2VW1BigLoopWithReductionTC2RN9benchmark5StateE, .Lfunc_end63-_Z37benchForIC2VW1BigLoopWithReductionTC2RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC4VW1BigLoopWithReductionTC2RN9benchmark5StateE # -- Begin function _Z37benchForIC4VW1BigLoopWithReductionTC2RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC4VW1BigLoopWithReductionTC2RN9benchmark5StateE,@function
_Z37benchForIC4VW1BigLoopWithReductionTC2RN9benchmark5StateE: # @_Z37benchForIC4VW1BigLoopWithReductionTC2RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB64_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB64_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB64_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 2
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB64_3
.LBB64_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end64:
	.size	_Z37benchForIC4VW1BigLoopWithReductionTC2RN9benchmark5StateE, .Lfunc_end64-_Z37benchForIC4VW1BigLoopWithReductionTC2RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z22benchAutoVecForLoopTC3RN9benchmark5StateE # -- Begin function _Z22benchAutoVecForLoopTC3RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchAutoVecForLoopTC3RN9benchmark5StateE,@function
_Z22benchAutoVecForLoopTC3RN9benchmark5StateE: # @_Z22benchAutoVecForLoopTC3RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB65_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB65_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB65_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 3
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB65_3
.LBB65_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end65:
	.size	_Z22benchAutoVecForLoopTC3RN9benchmark5StateE, .Lfunc_end65-_Z22benchAutoVecForLoopTC3RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z21benchForIC1VW4LoopTC3RN9benchmark5StateE # -- Begin function _Z21benchForIC1VW4LoopTC3RN9benchmark5StateE
	.p2align	5
	.type	_Z21benchForIC1VW4LoopTC3RN9benchmark5StateE,@function
_Z21benchForIC1VW4LoopTC3RN9benchmark5StateE: # @_Z21benchForIC1VW4LoopTC3RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB66_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB66_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB66_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 3
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB66_3
.LBB66_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end66:
	.size	_Z21benchForIC1VW4LoopTC3RN9benchmark5StateE, .Lfunc_end66-_Z21benchForIC1VW4LoopTC3RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z21benchForIC2VW4LoopTC3RN9benchmark5StateE # -- Begin function _Z21benchForIC2VW4LoopTC3RN9benchmark5StateE
	.p2align	5
	.type	_Z21benchForIC2VW4LoopTC3RN9benchmark5StateE,@function
_Z21benchForIC2VW4LoopTC3RN9benchmark5StateE: # @_Z21benchForIC2VW4LoopTC3RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB67_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB67_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB67_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 3
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB67_3
.LBB67_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end67:
	.size	_Z21benchForIC2VW4LoopTC3RN9benchmark5StateE, .Lfunc_end67-_Z21benchForIC2VW4LoopTC3RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z21benchForIC4VW4LoopTC3RN9benchmark5StateE # -- Begin function _Z21benchForIC4VW4LoopTC3RN9benchmark5StateE
	.p2align	5
	.type	_Z21benchForIC4VW4LoopTC3RN9benchmark5StateE,@function
_Z21benchForIC4VW4LoopTC3RN9benchmark5StateE: # @_Z21benchForIC4VW4LoopTC3RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB68_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB68_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB68_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 3
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB68_3
.LBB68_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end68:
	.size	_Z21benchForIC4VW4LoopTC3RN9benchmark5StateE, .Lfunc_end68-_Z21benchForIC4VW4LoopTC3RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForLoopWithReductionAutoVecTC3RN9benchmark5StateE # -- Begin function _Z35benchForLoopWithReductionAutoVecTC3RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForLoopWithReductionAutoVecTC3RN9benchmark5StateE,@function
_Z35benchForLoopWithReductionAutoVecTC3RN9benchmark5StateE: # @_Z35benchForLoopWithReductionAutoVecTC3RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB69_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB69_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB69_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 3
	pcaddu18i	$ra, %call36(_ZL24loopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB69_3
.LBB69_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end69:
	.size	_Z35benchForLoopWithReductionAutoVecTC3RN9benchmark5StateE, .Lfunc_end69-_Z35benchForLoopWithReductionAutoVecTC3RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC1VW4LoopWithReductionTC3RN9benchmark5StateE # -- Begin function _Z34benchForIC1VW4LoopWithReductionTC3RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC1VW4LoopWithReductionTC3RN9benchmark5StateE,@function
_Z34benchForIC1VW4LoopWithReductionTC3RN9benchmark5StateE: # @_Z34benchForIC1VW4LoopWithReductionTC3RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB70_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB70_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB70_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 3
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB70_3
.LBB70_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end70:
	.size	_Z34benchForIC1VW4LoopWithReductionTC3RN9benchmark5StateE, .Lfunc_end70-_Z34benchForIC1VW4LoopWithReductionTC3RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC2VW4LoopWithReductionTC3RN9benchmark5StateE # -- Begin function _Z34benchForIC2VW4LoopWithReductionTC3RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC2VW4LoopWithReductionTC3RN9benchmark5StateE,@function
_Z34benchForIC2VW4LoopWithReductionTC3RN9benchmark5StateE: # @_Z34benchForIC2VW4LoopWithReductionTC3RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB71_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB71_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB71_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 3
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB71_3
.LBB71_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end71:
	.size	_Z34benchForIC2VW4LoopWithReductionTC3RN9benchmark5StateE, .Lfunc_end71-_Z34benchForIC2VW4LoopWithReductionTC3RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC4VW4LoopWithReductionTC3RN9benchmark5StateE # -- Begin function _Z34benchForIC4VW4LoopWithReductionTC3RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC4VW4LoopWithReductionTC3RN9benchmark5StateE,@function
_Z34benchForIC4VW4LoopWithReductionTC3RN9benchmark5StateE: # @_Z34benchForIC4VW4LoopWithReductionTC3RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB72_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB72_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB72_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 3
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB72_3
.LBB72_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end72:
	.size	_Z34benchForIC4VW4LoopWithReductionTC3RN9benchmark5StateE, .Lfunc_end72-_Z34benchForIC4VW4LoopWithReductionTC3RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC1VW1LoopWithReductionTC3RN9benchmark5StateE # -- Begin function _Z34benchForIC1VW1LoopWithReductionTC3RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC1VW1LoopWithReductionTC3RN9benchmark5StateE,@function
_Z34benchForIC1VW1LoopWithReductionTC3RN9benchmark5StateE: # @_Z34benchForIC1VW1LoopWithReductionTC3RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB73_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB73_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB73_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 3
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB73_3
.LBB73_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end73:
	.size	_Z34benchForIC1VW1LoopWithReductionTC3RN9benchmark5StateE, .Lfunc_end73-_Z34benchForIC1VW1LoopWithReductionTC3RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC2VW1LoopWithReductionTC3RN9benchmark5StateE # -- Begin function _Z34benchForIC2VW1LoopWithReductionTC3RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC2VW1LoopWithReductionTC3RN9benchmark5StateE,@function
_Z34benchForIC2VW1LoopWithReductionTC3RN9benchmark5StateE: # @_Z34benchForIC2VW1LoopWithReductionTC3RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB74_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB74_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB74_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 3
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB74_3
.LBB74_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end74:
	.size	_Z34benchForIC2VW1LoopWithReductionTC3RN9benchmark5StateE, .Lfunc_end74-_Z34benchForIC2VW1LoopWithReductionTC3RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC4VW1LoopWithReductionTC3RN9benchmark5StateE # -- Begin function _Z34benchForIC4VW1LoopWithReductionTC3RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC4VW1LoopWithReductionTC3RN9benchmark5StateE,@function
_Z34benchForIC4VW1LoopWithReductionTC3RN9benchmark5StateE: # @_Z34benchForIC4VW1LoopWithReductionTC3RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB75_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB75_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB75_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 3
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB75_3
.LBB75_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end75:
	.size	_Z34benchForIC4VW1LoopWithReductionTC3RN9benchmark5StateE, .Lfunc_end75-_Z34benchForIC4VW1LoopWithReductionTC3RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchAutoVecForBigLoopTC3RN9benchmark5StateE # -- Begin function _Z25benchAutoVecForBigLoopTC3RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchAutoVecForBigLoopTC3RN9benchmark5StateE,@function
_Z25benchAutoVecForBigLoopTC3RN9benchmark5StateE: # @_Z25benchAutoVecForBigLoopTC3RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB76_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB76_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB76_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 3
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB76_3
.LBB76_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end76:
	.size	_Z25benchAutoVecForBigLoopTC3RN9benchmark5StateE, .Lfunc_end76-_Z25benchAutoVecForBigLoopTC3RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z24benchForIC1VW4BigLoopTC3RN9benchmark5StateE # -- Begin function _Z24benchForIC1VW4BigLoopTC3RN9benchmark5StateE
	.p2align	5
	.type	_Z24benchForIC1VW4BigLoopTC3RN9benchmark5StateE,@function
_Z24benchForIC1VW4BigLoopTC3RN9benchmark5StateE: # @_Z24benchForIC1VW4BigLoopTC3RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB77_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB77_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB77_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 3
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB77_3
.LBB77_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end77:
	.size	_Z24benchForIC1VW4BigLoopTC3RN9benchmark5StateE, .Lfunc_end77-_Z24benchForIC1VW4BigLoopTC3RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z24benchForIC2VW4BigLoopTC3RN9benchmark5StateE # -- Begin function _Z24benchForIC2VW4BigLoopTC3RN9benchmark5StateE
	.p2align	5
	.type	_Z24benchForIC2VW4BigLoopTC3RN9benchmark5StateE,@function
_Z24benchForIC2VW4BigLoopTC3RN9benchmark5StateE: # @_Z24benchForIC2VW4BigLoopTC3RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB78_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB78_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB78_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 3
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB78_3
.LBB78_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end78:
	.size	_Z24benchForIC2VW4BigLoopTC3RN9benchmark5StateE, .Lfunc_end78-_Z24benchForIC2VW4BigLoopTC3RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z24benchForIC4VW4BigLoopTC3RN9benchmark5StateE # -- Begin function _Z24benchForIC4VW4BigLoopTC3RN9benchmark5StateE
	.p2align	5
	.type	_Z24benchForIC4VW4BigLoopTC3RN9benchmark5StateE,@function
_Z24benchForIC4VW4BigLoopTC3RN9benchmark5StateE: # @_Z24benchForIC4VW4BigLoopTC3RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB79_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB79_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB79_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 3
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB79_3
.LBB79_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end79:
	.size	_Z24benchForIC4VW4BigLoopTC3RN9benchmark5StateE, .Lfunc_end79-_Z24benchForIC4VW4BigLoopTC3RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForBigLoopWithReductionAutoVecTC3RN9benchmark5StateE # -- Begin function _Z38benchForBigLoopWithReductionAutoVecTC3RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForBigLoopWithReductionAutoVecTC3RN9benchmark5StateE,@function
_Z38benchForBigLoopWithReductionAutoVecTC3RN9benchmark5StateE: # @_Z38benchForBigLoopWithReductionAutoVecTC3RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB80_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB80_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB80_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 3
	pcaddu18i	$ra, %call36(_ZL27bigLoopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB80_3
.LBB80_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end80:
	.size	_Z38benchForBigLoopWithReductionAutoVecTC3RN9benchmark5StateE, .Lfunc_end80-_Z38benchForBigLoopWithReductionAutoVecTC3RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC1VW4BigLoopWithReductionTC3RN9benchmark5StateE # -- Begin function _Z37benchForIC1VW4BigLoopWithReductionTC3RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC1VW4BigLoopWithReductionTC3RN9benchmark5StateE,@function
_Z37benchForIC1VW4BigLoopWithReductionTC3RN9benchmark5StateE: # @_Z37benchForIC1VW4BigLoopWithReductionTC3RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB81_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB81_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB81_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 3
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB81_3
.LBB81_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end81:
	.size	_Z37benchForIC1VW4BigLoopWithReductionTC3RN9benchmark5StateE, .Lfunc_end81-_Z37benchForIC1VW4BigLoopWithReductionTC3RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC2VW4BigLoopWithReductionTC3RN9benchmark5StateE # -- Begin function _Z37benchForIC2VW4BigLoopWithReductionTC3RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC2VW4BigLoopWithReductionTC3RN9benchmark5StateE,@function
_Z37benchForIC2VW4BigLoopWithReductionTC3RN9benchmark5StateE: # @_Z37benchForIC2VW4BigLoopWithReductionTC3RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB82_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB82_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB82_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 3
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB82_3
.LBB82_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end82:
	.size	_Z37benchForIC2VW4BigLoopWithReductionTC3RN9benchmark5StateE, .Lfunc_end82-_Z37benchForIC2VW4BigLoopWithReductionTC3RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC4VW4BigLoopWithReductionTC3RN9benchmark5StateE # -- Begin function _Z37benchForIC4VW4BigLoopWithReductionTC3RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC4VW4BigLoopWithReductionTC3RN9benchmark5StateE,@function
_Z37benchForIC4VW4BigLoopWithReductionTC3RN9benchmark5StateE: # @_Z37benchForIC4VW4BigLoopWithReductionTC3RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB83_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB83_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB83_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 3
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB83_3
.LBB83_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end83:
	.size	_Z37benchForIC4VW4BigLoopWithReductionTC3RN9benchmark5StateE, .Lfunc_end83-_Z37benchForIC4VW4BigLoopWithReductionTC3RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC1VW1BigLoopWithReductionTC3RN9benchmark5StateE # -- Begin function _Z37benchForIC1VW1BigLoopWithReductionTC3RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC1VW1BigLoopWithReductionTC3RN9benchmark5StateE,@function
_Z37benchForIC1VW1BigLoopWithReductionTC3RN9benchmark5StateE: # @_Z37benchForIC1VW1BigLoopWithReductionTC3RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB84_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB84_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB84_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 3
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB84_3
.LBB84_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end84:
	.size	_Z37benchForIC1VW1BigLoopWithReductionTC3RN9benchmark5StateE, .Lfunc_end84-_Z37benchForIC1VW1BigLoopWithReductionTC3RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC2VW1BigLoopWithReductionTC3RN9benchmark5StateE # -- Begin function _Z37benchForIC2VW1BigLoopWithReductionTC3RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC2VW1BigLoopWithReductionTC3RN9benchmark5StateE,@function
_Z37benchForIC2VW1BigLoopWithReductionTC3RN9benchmark5StateE: # @_Z37benchForIC2VW1BigLoopWithReductionTC3RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB85_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB85_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB85_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 3
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB85_3
.LBB85_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end85:
	.size	_Z37benchForIC2VW1BigLoopWithReductionTC3RN9benchmark5StateE, .Lfunc_end85-_Z37benchForIC2VW1BigLoopWithReductionTC3RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC4VW1BigLoopWithReductionTC3RN9benchmark5StateE # -- Begin function _Z37benchForIC4VW1BigLoopWithReductionTC3RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC4VW1BigLoopWithReductionTC3RN9benchmark5StateE,@function
_Z37benchForIC4VW1BigLoopWithReductionTC3RN9benchmark5StateE: # @_Z37benchForIC4VW1BigLoopWithReductionTC3RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB86_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB86_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB86_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 3
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB86_3
.LBB86_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end86:
	.size	_Z37benchForIC4VW1BigLoopWithReductionTC3RN9benchmark5StateE, .Lfunc_end86-_Z37benchForIC4VW1BigLoopWithReductionTC3RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z22benchAutoVecForLoopTC4RN9benchmark5StateE # -- Begin function _Z22benchAutoVecForLoopTC4RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchAutoVecForLoopTC4RN9benchmark5StateE,@function
_Z22benchAutoVecForLoopTC4RN9benchmark5StateE: # @_Z22benchAutoVecForLoopTC4RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB87_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB87_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB87_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 4
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB87_3
.LBB87_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end87:
	.size	_Z22benchAutoVecForLoopTC4RN9benchmark5StateE, .Lfunc_end87-_Z22benchAutoVecForLoopTC4RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z21benchForIC1VW4LoopTC4RN9benchmark5StateE # -- Begin function _Z21benchForIC1VW4LoopTC4RN9benchmark5StateE
	.p2align	5
	.type	_Z21benchForIC1VW4LoopTC4RN9benchmark5StateE,@function
_Z21benchForIC1VW4LoopTC4RN9benchmark5StateE: # @_Z21benchForIC1VW4LoopTC4RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB88_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB88_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB88_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 4
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB88_3
.LBB88_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end88:
	.size	_Z21benchForIC1VW4LoopTC4RN9benchmark5StateE, .Lfunc_end88-_Z21benchForIC1VW4LoopTC4RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z21benchForIC2VW4LoopTC4RN9benchmark5StateE # -- Begin function _Z21benchForIC2VW4LoopTC4RN9benchmark5StateE
	.p2align	5
	.type	_Z21benchForIC2VW4LoopTC4RN9benchmark5StateE,@function
_Z21benchForIC2VW4LoopTC4RN9benchmark5StateE: # @_Z21benchForIC2VW4LoopTC4RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB89_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB89_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB89_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 4
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB89_3
.LBB89_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end89:
	.size	_Z21benchForIC2VW4LoopTC4RN9benchmark5StateE, .Lfunc_end89-_Z21benchForIC2VW4LoopTC4RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z21benchForIC4VW4LoopTC4RN9benchmark5StateE # -- Begin function _Z21benchForIC4VW4LoopTC4RN9benchmark5StateE
	.p2align	5
	.type	_Z21benchForIC4VW4LoopTC4RN9benchmark5StateE,@function
_Z21benchForIC4VW4LoopTC4RN9benchmark5StateE: # @_Z21benchForIC4VW4LoopTC4RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB90_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB90_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB90_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 4
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB90_3
.LBB90_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end90:
	.size	_Z21benchForIC4VW4LoopTC4RN9benchmark5StateE, .Lfunc_end90-_Z21benchForIC4VW4LoopTC4RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForLoopWithReductionAutoVecTC4RN9benchmark5StateE # -- Begin function _Z35benchForLoopWithReductionAutoVecTC4RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForLoopWithReductionAutoVecTC4RN9benchmark5StateE,@function
_Z35benchForLoopWithReductionAutoVecTC4RN9benchmark5StateE: # @_Z35benchForLoopWithReductionAutoVecTC4RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB91_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB91_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB91_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 4
	pcaddu18i	$ra, %call36(_ZL24loopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB91_3
.LBB91_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end91:
	.size	_Z35benchForLoopWithReductionAutoVecTC4RN9benchmark5StateE, .Lfunc_end91-_Z35benchForLoopWithReductionAutoVecTC4RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC1VW4LoopWithReductionTC4RN9benchmark5StateE # -- Begin function _Z34benchForIC1VW4LoopWithReductionTC4RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC1VW4LoopWithReductionTC4RN9benchmark5StateE,@function
_Z34benchForIC1VW4LoopWithReductionTC4RN9benchmark5StateE: # @_Z34benchForIC1VW4LoopWithReductionTC4RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB92_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB92_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB92_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 4
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB92_3
.LBB92_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end92:
	.size	_Z34benchForIC1VW4LoopWithReductionTC4RN9benchmark5StateE, .Lfunc_end92-_Z34benchForIC1VW4LoopWithReductionTC4RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC2VW4LoopWithReductionTC4RN9benchmark5StateE # -- Begin function _Z34benchForIC2VW4LoopWithReductionTC4RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC2VW4LoopWithReductionTC4RN9benchmark5StateE,@function
_Z34benchForIC2VW4LoopWithReductionTC4RN9benchmark5StateE: # @_Z34benchForIC2VW4LoopWithReductionTC4RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB93_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB93_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB93_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 4
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB93_3
.LBB93_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end93:
	.size	_Z34benchForIC2VW4LoopWithReductionTC4RN9benchmark5StateE, .Lfunc_end93-_Z34benchForIC2VW4LoopWithReductionTC4RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC4VW4LoopWithReductionTC4RN9benchmark5StateE # -- Begin function _Z34benchForIC4VW4LoopWithReductionTC4RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC4VW4LoopWithReductionTC4RN9benchmark5StateE,@function
_Z34benchForIC4VW4LoopWithReductionTC4RN9benchmark5StateE: # @_Z34benchForIC4VW4LoopWithReductionTC4RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB94_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB94_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB94_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 4
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB94_3
.LBB94_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end94:
	.size	_Z34benchForIC4VW4LoopWithReductionTC4RN9benchmark5StateE, .Lfunc_end94-_Z34benchForIC4VW4LoopWithReductionTC4RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC1VW1LoopWithReductionTC4RN9benchmark5StateE # -- Begin function _Z34benchForIC1VW1LoopWithReductionTC4RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC1VW1LoopWithReductionTC4RN9benchmark5StateE,@function
_Z34benchForIC1VW1LoopWithReductionTC4RN9benchmark5StateE: # @_Z34benchForIC1VW1LoopWithReductionTC4RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB95_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB95_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB95_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 4
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB95_3
.LBB95_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end95:
	.size	_Z34benchForIC1VW1LoopWithReductionTC4RN9benchmark5StateE, .Lfunc_end95-_Z34benchForIC1VW1LoopWithReductionTC4RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC2VW1LoopWithReductionTC4RN9benchmark5StateE # -- Begin function _Z34benchForIC2VW1LoopWithReductionTC4RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC2VW1LoopWithReductionTC4RN9benchmark5StateE,@function
_Z34benchForIC2VW1LoopWithReductionTC4RN9benchmark5StateE: # @_Z34benchForIC2VW1LoopWithReductionTC4RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB96_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB96_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB96_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 4
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB96_3
.LBB96_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end96:
	.size	_Z34benchForIC2VW1LoopWithReductionTC4RN9benchmark5StateE, .Lfunc_end96-_Z34benchForIC2VW1LoopWithReductionTC4RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC4VW1LoopWithReductionTC4RN9benchmark5StateE # -- Begin function _Z34benchForIC4VW1LoopWithReductionTC4RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC4VW1LoopWithReductionTC4RN9benchmark5StateE,@function
_Z34benchForIC4VW1LoopWithReductionTC4RN9benchmark5StateE: # @_Z34benchForIC4VW1LoopWithReductionTC4RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB97_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB97_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB97_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 4
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB97_3
.LBB97_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end97:
	.size	_Z34benchForIC4VW1LoopWithReductionTC4RN9benchmark5StateE, .Lfunc_end97-_Z34benchForIC4VW1LoopWithReductionTC4RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchAutoVecForBigLoopTC4RN9benchmark5StateE # -- Begin function _Z25benchAutoVecForBigLoopTC4RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchAutoVecForBigLoopTC4RN9benchmark5StateE,@function
_Z25benchAutoVecForBigLoopTC4RN9benchmark5StateE: # @_Z25benchAutoVecForBigLoopTC4RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB98_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB98_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB98_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 4
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB98_3
.LBB98_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end98:
	.size	_Z25benchAutoVecForBigLoopTC4RN9benchmark5StateE, .Lfunc_end98-_Z25benchAutoVecForBigLoopTC4RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z24benchForIC1VW4BigLoopTC4RN9benchmark5StateE # -- Begin function _Z24benchForIC1VW4BigLoopTC4RN9benchmark5StateE
	.p2align	5
	.type	_Z24benchForIC1VW4BigLoopTC4RN9benchmark5StateE,@function
_Z24benchForIC1VW4BigLoopTC4RN9benchmark5StateE: # @_Z24benchForIC1VW4BigLoopTC4RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB99_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB99_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB99_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 4
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB99_3
.LBB99_4:                               # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end99:
	.size	_Z24benchForIC1VW4BigLoopTC4RN9benchmark5StateE, .Lfunc_end99-_Z24benchForIC1VW4BigLoopTC4RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z24benchForIC2VW4BigLoopTC4RN9benchmark5StateE # -- Begin function _Z24benchForIC2VW4BigLoopTC4RN9benchmark5StateE
	.p2align	5
	.type	_Z24benchForIC2VW4BigLoopTC4RN9benchmark5StateE,@function
_Z24benchForIC2VW4BigLoopTC4RN9benchmark5StateE: # @_Z24benchForIC2VW4BigLoopTC4RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB100_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB100_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB100_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 4
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB100_3
.LBB100_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end100:
	.size	_Z24benchForIC2VW4BigLoopTC4RN9benchmark5StateE, .Lfunc_end100-_Z24benchForIC2VW4BigLoopTC4RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z24benchForIC4VW4BigLoopTC4RN9benchmark5StateE # -- Begin function _Z24benchForIC4VW4BigLoopTC4RN9benchmark5StateE
	.p2align	5
	.type	_Z24benchForIC4VW4BigLoopTC4RN9benchmark5StateE,@function
_Z24benchForIC4VW4BigLoopTC4RN9benchmark5StateE: # @_Z24benchForIC4VW4BigLoopTC4RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB101_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB101_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB101_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 4
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB101_3
.LBB101_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end101:
	.size	_Z24benchForIC4VW4BigLoopTC4RN9benchmark5StateE, .Lfunc_end101-_Z24benchForIC4VW4BigLoopTC4RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForBigLoopWithReductionAutoVecTC4RN9benchmark5StateE # -- Begin function _Z38benchForBigLoopWithReductionAutoVecTC4RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForBigLoopWithReductionAutoVecTC4RN9benchmark5StateE,@function
_Z38benchForBigLoopWithReductionAutoVecTC4RN9benchmark5StateE: # @_Z38benchForBigLoopWithReductionAutoVecTC4RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB102_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB102_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB102_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 4
	pcaddu18i	$ra, %call36(_ZL27bigLoopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB102_3
.LBB102_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end102:
	.size	_Z38benchForBigLoopWithReductionAutoVecTC4RN9benchmark5StateE, .Lfunc_end102-_Z38benchForBigLoopWithReductionAutoVecTC4RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC1VW4BigLoopWithReductionTC4RN9benchmark5StateE # -- Begin function _Z37benchForIC1VW4BigLoopWithReductionTC4RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC1VW4BigLoopWithReductionTC4RN9benchmark5StateE,@function
_Z37benchForIC1VW4BigLoopWithReductionTC4RN9benchmark5StateE: # @_Z37benchForIC1VW4BigLoopWithReductionTC4RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB103_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB103_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB103_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 4
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB103_3
.LBB103_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end103:
	.size	_Z37benchForIC1VW4BigLoopWithReductionTC4RN9benchmark5StateE, .Lfunc_end103-_Z37benchForIC1VW4BigLoopWithReductionTC4RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC2VW4BigLoopWithReductionTC4RN9benchmark5StateE # -- Begin function _Z37benchForIC2VW4BigLoopWithReductionTC4RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC2VW4BigLoopWithReductionTC4RN9benchmark5StateE,@function
_Z37benchForIC2VW4BigLoopWithReductionTC4RN9benchmark5StateE: # @_Z37benchForIC2VW4BigLoopWithReductionTC4RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB104_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB104_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB104_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 4
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB104_3
.LBB104_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end104:
	.size	_Z37benchForIC2VW4BigLoopWithReductionTC4RN9benchmark5StateE, .Lfunc_end104-_Z37benchForIC2VW4BigLoopWithReductionTC4RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC4VW4BigLoopWithReductionTC4RN9benchmark5StateE # -- Begin function _Z37benchForIC4VW4BigLoopWithReductionTC4RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC4VW4BigLoopWithReductionTC4RN9benchmark5StateE,@function
_Z37benchForIC4VW4BigLoopWithReductionTC4RN9benchmark5StateE: # @_Z37benchForIC4VW4BigLoopWithReductionTC4RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB105_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB105_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB105_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 4
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB105_3
.LBB105_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end105:
	.size	_Z37benchForIC4VW4BigLoopWithReductionTC4RN9benchmark5StateE, .Lfunc_end105-_Z37benchForIC4VW4BigLoopWithReductionTC4RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC1VW1BigLoopWithReductionTC4RN9benchmark5StateE # -- Begin function _Z37benchForIC1VW1BigLoopWithReductionTC4RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC1VW1BigLoopWithReductionTC4RN9benchmark5StateE,@function
_Z37benchForIC1VW1BigLoopWithReductionTC4RN9benchmark5StateE: # @_Z37benchForIC1VW1BigLoopWithReductionTC4RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB106_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB106_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB106_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 4
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB106_3
.LBB106_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end106:
	.size	_Z37benchForIC1VW1BigLoopWithReductionTC4RN9benchmark5StateE, .Lfunc_end106-_Z37benchForIC1VW1BigLoopWithReductionTC4RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC2VW1BigLoopWithReductionTC4RN9benchmark5StateE # -- Begin function _Z37benchForIC2VW1BigLoopWithReductionTC4RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC2VW1BigLoopWithReductionTC4RN9benchmark5StateE,@function
_Z37benchForIC2VW1BigLoopWithReductionTC4RN9benchmark5StateE: # @_Z37benchForIC2VW1BigLoopWithReductionTC4RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB107_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB107_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB107_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 4
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB107_3
.LBB107_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end107:
	.size	_Z37benchForIC2VW1BigLoopWithReductionTC4RN9benchmark5StateE, .Lfunc_end107-_Z37benchForIC2VW1BigLoopWithReductionTC4RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC4VW1BigLoopWithReductionTC4RN9benchmark5StateE # -- Begin function _Z37benchForIC4VW1BigLoopWithReductionTC4RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC4VW1BigLoopWithReductionTC4RN9benchmark5StateE,@function
_Z37benchForIC4VW1BigLoopWithReductionTC4RN9benchmark5StateE: # @_Z37benchForIC4VW1BigLoopWithReductionTC4RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB108_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB108_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB108_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 4
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB108_3
.LBB108_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end108:
	.size	_Z37benchForIC4VW1BigLoopWithReductionTC4RN9benchmark5StateE, .Lfunc_end108-_Z37benchForIC4VW1BigLoopWithReductionTC4RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z22benchAutoVecForLoopTC7RN9benchmark5StateE # -- Begin function _Z22benchAutoVecForLoopTC7RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchAutoVecForLoopTC7RN9benchmark5StateE,@function
_Z22benchAutoVecForLoopTC7RN9benchmark5StateE: # @_Z22benchAutoVecForLoopTC7RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB109_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB109_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB109_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 7
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB109_3
.LBB109_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end109:
	.size	_Z22benchAutoVecForLoopTC7RN9benchmark5StateE, .Lfunc_end109-_Z22benchAutoVecForLoopTC7RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z21benchForIC1VW4LoopTC7RN9benchmark5StateE # -- Begin function _Z21benchForIC1VW4LoopTC7RN9benchmark5StateE
	.p2align	5
	.type	_Z21benchForIC1VW4LoopTC7RN9benchmark5StateE,@function
_Z21benchForIC1VW4LoopTC7RN9benchmark5StateE: # @_Z21benchForIC1VW4LoopTC7RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB110_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB110_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB110_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 7
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB110_3
.LBB110_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end110:
	.size	_Z21benchForIC1VW4LoopTC7RN9benchmark5StateE, .Lfunc_end110-_Z21benchForIC1VW4LoopTC7RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z21benchForIC2VW4LoopTC7RN9benchmark5StateE # -- Begin function _Z21benchForIC2VW4LoopTC7RN9benchmark5StateE
	.p2align	5
	.type	_Z21benchForIC2VW4LoopTC7RN9benchmark5StateE,@function
_Z21benchForIC2VW4LoopTC7RN9benchmark5StateE: # @_Z21benchForIC2VW4LoopTC7RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB111_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB111_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB111_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 7
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB111_3
.LBB111_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end111:
	.size	_Z21benchForIC2VW4LoopTC7RN9benchmark5StateE, .Lfunc_end111-_Z21benchForIC2VW4LoopTC7RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z21benchForIC4VW4LoopTC7RN9benchmark5StateE # -- Begin function _Z21benchForIC4VW4LoopTC7RN9benchmark5StateE
	.p2align	5
	.type	_Z21benchForIC4VW4LoopTC7RN9benchmark5StateE,@function
_Z21benchForIC4VW4LoopTC7RN9benchmark5StateE: # @_Z21benchForIC4VW4LoopTC7RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB112_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB112_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB112_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 7
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB112_3
.LBB112_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end112:
	.size	_Z21benchForIC4VW4LoopTC7RN9benchmark5StateE, .Lfunc_end112-_Z21benchForIC4VW4LoopTC7RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForLoopWithReductionAutoVecTC7RN9benchmark5StateE # -- Begin function _Z35benchForLoopWithReductionAutoVecTC7RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForLoopWithReductionAutoVecTC7RN9benchmark5StateE,@function
_Z35benchForLoopWithReductionAutoVecTC7RN9benchmark5StateE: # @_Z35benchForLoopWithReductionAutoVecTC7RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB113_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB113_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB113_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 7
	pcaddu18i	$ra, %call36(_ZL24loopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB113_3
.LBB113_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end113:
	.size	_Z35benchForLoopWithReductionAutoVecTC7RN9benchmark5StateE, .Lfunc_end113-_Z35benchForLoopWithReductionAutoVecTC7RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC1VW4LoopWithReductionTC7RN9benchmark5StateE # -- Begin function _Z34benchForIC1VW4LoopWithReductionTC7RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC1VW4LoopWithReductionTC7RN9benchmark5StateE,@function
_Z34benchForIC1VW4LoopWithReductionTC7RN9benchmark5StateE: # @_Z34benchForIC1VW4LoopWithReductionTC7RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB114_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB114_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB114_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 7
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB114_3
.LBB114_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end114:
	.size	_Z34benchForIC1VW4LoopWithReductionTC7RN9benchmark5StateE, .Lfunc_end114-_Z34benchForIC1VW4LoopWithReductionTC7RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC2VW4LoopWithReductionTC7RN9benchmark5StateE # -- Begin function _Z34benchForIC2VW4LoopWithReductionTC7RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC2VW4LoopWithReductionTC7RN9benchmark5StateE,@function
_Z34benchForIC2VW4LoopWithReductionTC7RN9benchmark5StateE: # @_Z34benchForIC2VW4LoopWithReductionTC7RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB115_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB115_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB115_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 7
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB115_3
.LBB115_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end115:
	.size	_Z34benchForIC2VW4LoopWithReductionTC7RN9benchmark5StateE, .Lfunc_end115-_Z34benchForIC2VW4LoopWithReductionTC7RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC4VW4LoopWithReductionTC7RN9benchmark5StateE # -- Begin function _Z34benchForIC4VW4LoopWithReductionTC7RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC4VW4LoopWithReductionTC7RN9benchmark5StateE,@function
_Z34benchForIC4VW4LoopWithReductionTC7RN9benchmark5StateE: # @_Z34benchForIC4VW4LoopWithReductionTC7RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB116_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB116_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB116_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 7
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB116_3
.LBB116_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end116:
	.size	_Z34benchForIC4VW4LoopWithReductionTC7RN9benchmark5StateE, .Lfunc_end116-_Z34benchForIC4VW4LoopWithReductionTC7RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC1VW1LoopWithReductionTC7RN9benchmark5StateE # -- Begin function _Z34benchForIC1VW1LoopWithReductionTC7RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC1VW1LoopWithReductionTC7RN9benchmark5StateE,@function
_Z34benchForIC1VW1LoopWithReductionTC7RN9benchmark5StateE: # @_Z34benchForIC1VW1LoopWithReductionTC7RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB117_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB117_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB117_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 7
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB117_3
.LBB117_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end117:
	.size	_Z34benchForIC1VW1LoopWithReductionTC7RN9benchmark5StateE, .Lfunc_end117-_Z34benchForIC1VW1LoopWithReductionTC7RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC2VW1LoopWithReductionTC7RN9benchmark5StateE # -- Begin function _Z34benchForIC2VW1LoopWithReductionTC7RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC2VW1LoopWithReductionTC7RN9benchmark5StateE,@function
_Z34benchForIC2VW1LoopWithReductionTC7RN9benchmark5StateE: # @_Z34benchForIC2VW1LoopWithReductionTC7RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB118_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB118_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB118_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 7
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB118_3
.LBB118_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end118:
	.size	_Z34benchForIC2VW1LoopWithReductionTC7RN9benchmark5StateE, .Lfunc_end118-_Z34benchForIC2VW1LoopWithReductionTC7RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC4VW1LoopWithReductionTC7RN9benchmark5StateE # -- Begin function _Z34benchForIC4VW1LoopWithReductionTC7RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC4VW1LoopWithReductionTC7RN9benchmark5StateE,@function
_Z34benchForIC4VW1LoopWithReductionTC7RN9benchmark5StateE: # @_Z34benchForIC4VW1LoopWithReductionTC7RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB119_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB119_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB119_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 7
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB119_3
.LBB119_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end119:
	.size	_Z34benchForIC4VW1LoopWithReductionTC7RN9benchmark5StateE, .Lfunc_end119-_Z34benchForIC4VW1LoopWithReductionTC7RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchAutoVecForBigLoopTC7RN9benchmark5StateE # -- Begin function _Z25benchAutoVecForBigLoopTC7RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchAutoVecForBigLoopTC7RN9benchmark5StateE,@function
_Z25benchAutoVecForBigLoopTC7RN9benchmark5StateE: # @_Z25benchAutoVecForBigLoopTC7RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB120_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB120_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB120_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 7
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB120_3
.LBB120_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end120:
	.size	_Z25benchAutoVecForBigLoopTC7RN9benchmark5StateE, .Lfunc_end120-_Z25benchAutoVecForBigLoopTC7RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z24benchForIC1VW4BigLoopTC7RN9benchmark5StateE # -- Begin function _Z24benchForIC1VW4BigLoopTC7RN9benchmark5StateE
	.p2align	5
	.type	_Z24benchForIC1VW4BigLoopTC7RN9benchmark5StateE,@function
_Z24benchForIC1VW4BigLoopTC7RN9benchmark5StateE: # @_Z24benchForIC1VW4BigLoopTC7RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB121_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB121_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB121_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 7
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB121_3
.LBB121_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end121:
	.size	_Z24benchForIC1VW4BigLoopTC7RN9benchmark5StateE, .Lfunc_end121-_Z24benchForIC1VW4BigLoopTC7RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z24benchForIC2VW4BigLoopTC7RN9benchmark5StateE # -- Begin function _Z24benchForIC2VW4BigLoopTC7RN9benchmark5StateE
	.p2align	5
	.type	_Z24benchForIC2VW4BigLoopTC7RN9benchmark5StateE,@function
_Z24benchForIC2VW4BigLoopTC7RN9benchmark5StateE: # @_Z24benchForIC2VW4BigLoopTC7RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB122_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB122_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB122_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 7
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB122_3
.LBB122_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end122:
	.size	_Z24benchForIC2VW4BigLoopTC7RN9benchmark5StateE, .Lfunc_end122-_Z24benchForIC2VW4BigLoopTC7RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z24benchForIC4VW4BigLoopTC7RN9benchmark5StateE # -- Begin function _Z24benchForIC4VW4BigLoopTC7RN9benchmark5StateE
	.p2align	5
	.type	_Z24benchForIC4VW4BigLoopTC7RN9benchmark5StateE,@function
_Z24benchForIC4VW4BigLoopTC7RN9benchmark5StateE: # @_Z24benchForIC4VW4BigLoopTC7RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB123_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB123_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB123_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 7
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB123_3
.LBB123_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end123:
	.size	_Z24benchForIC4VW4BigLoopTC7RN9benchmark5StateE, .Lfunc_end123-_Z24benchForIC4VW4BigLoopTC7RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForBigLoopWithReductionAutoVecTC7RN9benchmark5StateE # -- Begin function _Z38benchForBigLoopWithReductionAutoVecTC7RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForBigLoopWithReductionAutoVecTC7RN9benchmark5StateE,@function
_Z38benchForBigLoopWithReductionAutoVecTC7RN9benchmark5StateE: # @_Z38benchForBigLoopWithReductionAutoVecTC7RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB124_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB124_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB124_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 7
	pcaddu18i	$ra, %call36(_ZL27bigLoopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB124_3
.LBB124_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end124:
	.size	_Z38benchForBigLoopWithReductionAutoVecTC7RN9benchmark5StateE, .Lfunc_end124-_Z38benchForBigLoopWithReductionAutoVecTC7RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC1VW4BigLoopWithReductionTC7RN9benchmark5StateE # -- Begin function _Z37benchForIC1VW4BigLoopWithReductionTC7RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC1VW4BigLoopWithReductionTC7RN9benchmark5StateE,@function
_Z37benchForIC1VW4BigLoopWithReductionTC7RN9benchmark5StateE: # @_Z37benchForIC1VW4BigLoopWithReductionTC7RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB125_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB125_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB125_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 7
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB125_3
.LBB125_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end125:
	.size	_Z37benchForIC1VW4BigLoopWithReductionTC7RN9benchmark5StateE, .Lfunc_end125-_Z37benchForIC1VW4BigLoopWithReductionTC7RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC2VW4BigLoopWithReductionTC7RN9benchmark5StateE # -- Begin function _Z37benchForIC2VW4BigLoopWithReductionTC7RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC2VW4BigLoopWithReductionTC7RN9benchmark5StateE,@function
_Z37benchForIC2VW4BigLoopWithReductionTC7RN9benchmark5StateE: # @_Z37benchForIC2VW4BigLoopWithReductionTC7RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB126_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB126_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB126_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 7
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB126_3
.LBB126_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end126:
	.size	_Z37benchForIC2VW4BigLoopWithReductionTC7RN9benchmark5StateE, .Lfunc_end126-_Z37benchForIC2VW4BigLoopWithReductionTC7RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC4VW4BigLoopWithReductionTC7RN9benchmark5StateE # -- Begin function _Z37benchForIC4VW4BigLoopWithReductionTC7RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC4VW4BigLoopWithReductionTC7RN9benchmark5StateE,@function
_Z37benchForIC4VW4BigLoopWithReductionTC7RN9benchmark5StateE: # @_Z37benchForIC4VW4BigLoopWithReductionTC7RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB127_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB127_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB127_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 7
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB127_3
.LBB127_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end127:
	.size	_Z37benchForIC4VW4BigLoopWithReductionTC7RN9benchmark5StateE, .Lfunc_end127-_Z37benchForIC4VW4BigLoopWithReductionTC7RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC1VW1BigLoopWithReductionTC7RN9benchmark5StateE # -- Begin function _Z37benchForIC1VW1BigLoopWithReductionTC7RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC1VW1BigLoopWithReductionTC7RN9benchmark5StateE,@function
_Z37benchForIC1VW1BigLoopWithReductionTC7RN9benchmark5StateE: # @_Z37benchForIC1VW1BigLoopWithReductionTC7RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB128_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB128_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB128_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 7
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB128_3
.LBB128_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end128:
	.size	_Z37benchForIC1VW1BigLoopWithReductionTC7RN9benchmark5StateE, .Lfunc_end128-_Z37benchForIC1VW1BigLoopWithReductionTC7RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC2VW1BigLoopWithReductionTC7RN9benchmark5StateE # -- Begin function _Z37benchForIC2VW1BigLoopWithReductionTC7RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC2VW1BigLoopWithReductionTC7RN9benchmark5StateE,@function
_Z37benchForIC2VW1BigLoopWithReductionTC7RN9benchmark5StateE: # @_Z37benchForIC2VW1BigLoopWithReductionTC7RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB129_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB129_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB129_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 7
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB129_3
.LBB129_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end129:
	.size	_Z37benchForIC2VW1BigLoopWithReductionTC7RN9benchmark5StateE, .Lfunc_end129-_Z37benchForIC2VW1BigLoopWithReductionTC7RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC4VW1BigLoopWithReductionTC7RN9benchmark5StateE # -- Begin function _Z37benchForIC4VW1BigLoopWithReductionTC7RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC4VW1BigLoopWithReductionTC7RN9benchmark5StateE,@function
_Z37benchForIC4VW1BigLoopWithReductionTC7RN9benchmark5StateE: # @_Z37benchForIC4VW1BigLoopWithReductionTC7RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB130_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB130_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB130_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 7
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB130_3
.LBB130_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end130:
	.size	_Z37benchForIC4VW1BigLoopWithReductionTC7RN9benchmark5StateE, .Lfunc_end130-_Z37benchForIC4VW1BigLoopWithReductionTC7RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z22benchAutoVecForLoopTC8RN9benchmark5StateE # -- Begin function _Z22benchAutoVecForLoopTC8RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchAutoVecForLoopTC8RN9benchmark5StateE,@function
_Z22benchAutoVecForLoopTC8RN9benchmark5StateE: # @_Z22benchAutoVecForLoopTC8RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB131_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB131_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB131_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB131_3
.LBB131_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end131:
	.size	_Z22benchAutoVecForLoopTC8RN9benchmark5StateE, .Lfunc_end131-_Z22benchAutoVecForLoopTC8RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z21benchForIC1VW4LoopTC8RN9benchmark5StateE # -- Begin function _Z21benchForIC1VW4LoopTC8RN9benchmark5StateE
	.p2align	5
	.type	_Z21benchForIC1VW4LoopTC8RN9benchmark5StateE,@function
_Z21benchForIC1VW4LoopTC8RN9benchmark5StateE: # @_Z21benchForIC1VW4LoopTC8RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB132_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB132_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB132_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB132_3
.LBB132_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end132:
	.size	_Z21benchForIC1VW4LoopTC8RN9benchmark5StateE, .Lfunc_end132-_Z21benchForIC1VW4LoopTC8RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z21benchForIC2VW4LoopTC8RN9benchmark5StateE # -- Begin function _Z21benchForIC2VW4LoopTC8RN9benchmark5StateE
	.p2align	5
	.type	_Z21benchForIC2VW4LoopTC8RN9benchmark5StateE,@function
_Z21benchForIC2VW4LoopTC8RN9benchmark5StateE: # @_Z21benchForIC2VW4LoopTC8RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB133_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB133_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB133_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB133_3
.LBB133_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end133:
	.size	_Z21benchForIC2VW4LoopTC8RN9benchmark5StateE, .Lfunc_end133-_Z21benchForIC2VW4LoopTC8RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z21benchForIC4VW4LoopTC8RN9benchmark5StateE # -- Begin function _Z21benchForIC4VW4LoopTC8RN9benchmark5StateE
	.p2align	5
	.type	_Z21benchForIC4VW4LoopTC8RN9benchmark5StateE,@function
_Z21benchForIC4VW4LoopTC8RN9benchmark5StateE: # @_Z21benchForIC4VW4LoopTC8RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB134_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB134_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB134_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB134_3
.LBB134_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end134:
	.size	_Z21benchForIC4VW4LoopTC8RN9benchmark5StateE, .Lfunc_end134-_Z21benchForIC4VW4LoopTC8RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForLoopWithReductionAutoVecTC8RN9benchmark5StateE # -- Begin function _Z35benchForLoopWithReductionAutoVecTC8RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForLoopWithReductionAutoVecTC8RN9benchmark5StateE,@function
_Z35benchForLoopWithReductionAutoVecTC8RN9benchmark5StateE: # @_Z35benchForLoopWithReductionAutoVecTC8RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB135_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB135_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB135_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(_ZL24loopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB135_3
.LBB135_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end135:
	.size	_Z35benchForLoopWithReductionAutoVecTC8RN9benchmark5StateE, .Lfunc_end135-_Z35benchForLoopWithReductionAutoVecTC8RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC1VW4LoopWithReductionTC8RN9benchmark5StateE # -- Begin function _Z34benchForIC1VW4LoopWithReductionTC8RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC1VW4LoopWithReductionTC8RN9benchmark5StateE,@function
_Z34benchForIC1VW4LoopWithReductionTC8RN9benchmark5StateE: # @_Z34benchForIC1VW4LoopWithReductionTC8RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB136_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB136_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB136_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB136_3
.LBB136_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end136:
	.size	_Z34benchForIC1VW4LoopWithReductionTC8RN9benchmark5StateE, .Lfunc_end136-_Z34benchForIC1VW4LoopWithReductionTC8RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC2VW4LoopWithReductionTC8RN9benchmark5StateE # -- Begin function _Z34benchForIC2VW4LoopWithReductionTC8RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC2VW4LoopWithReductionTC8RN9benchmark5StateE,@function
_Z34benchForIC2VW4LoopWithReductionTC8RN9benchmark5StateE: # @_Z34benchForIC2VW4LoopWithReductionTC8RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB137_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB137_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB137_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB137_3
.LBB137_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end137:
	.size	_Z34benchForIC2VW4LoopWithReductionTC8RN9benchmark5StateE, .Lfunc_end137-_Z34benchForIC2VW4LoopWithReductionTC8RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC4VW4LoopWithReductionTC8RN9benchmark5StateE # -- Begin function _Z34benchForIC4VW4LoopWithReductionTC8RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC4VW4LoopWithReductionTC8RN9benchmark5StateE,@function
_Z34benchForIC4VW4LoopWithReductionTC8RN9benchmark5StateE: # @_Z34benchForIC4VW4LoopWithReductionTC8RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB138_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB138_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB138_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB138_3
.LBB138_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end138:
	.size	_Z34benchForIC4VW4LoopWithReductionTC8RN9benchmark5StateE, .Lfunc_end138-_Z34benchForIC4VW4LoopWithReductionTC8RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC1VW1LoopWithReductionTC8RN9benchmark5StateE # -- Begin function _Z34benchForIC1VW1LoopWithReductionTC8RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC1VW1LoopWithReductionTC8RN9benchmark5StateE,@function
_Z34benchForIC1VW1LoopWithReductionTC8RN9benchmark5StateE: # @_Z34benchForIC1VW1LoopWithReductionTC8RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB139_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB139_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB139_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB139_3
.LBB139_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end139:
	.size	_Z34benchForIC1VW1LoopWithReductionTC8RN9benchmark5StateE, .Lfunc_end139-_Z34benchForIC1VW1LoopWithReductionTC8RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC2VW1LoopWithReductionTC8RN9benchmark5StateE # -- Begin function _Z34benchForIC2VW1LoopWithReductionTC8RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC2VW1LoopWithReductionTC8RN9benchmark5StateE,@function
_Z34benchForIC2VW1LoopWithReductionTC8RN9benchmark5StateE: # @_Z34benchForIC2VW1LoopWithReductionTC8RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB140_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB140_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB140_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB140_3
.LBB140_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end140:
	.size	_Z34benchForIC2VW1LoopWithReductionTC8RN9benchmark5StateE, .Lfunc_end140-_Z34benchForIC2VW1LoopWithReductionTC8RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z34benchForIC4VW1LoopWithReductionTC8RN9benchmark5StateE # -- Begin function _Z34benchForIC4VW1LoopWithReductionTC8RN9benchmark5StateE
	.p2align	5
	.type	_Z34benchForIC4VW1LoopWithReductionTC8RN9benchmark5StateE,@function
_Z34benchForIC4VW1LoopWithReductionTC8RN9benchmark5StateE: # @_Z34benchForIC4VW1LoopWithReductionTC8RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB141_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB141_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB141_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB141_3
.LBB141_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end141:
	.size	_Z34benchForIC4VW1LoopWithReductionTC8RN9benchmark5StateE, .Lfunc_end141-_Z34benchForIC4VW1LoopWithReductionTC8RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchAutoVecForBigLoopTC8RN9benchmark5StateE # -- Begin function _Z25benchAutoVecForBigLoopTC8RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchAutoVecForBigLoopTC8RN9benchmark5StateE,@function
_Z25benchAutoVecForBigLoopTC8RN9benchmark5StateE: # @_Z25benchAutoVecForBigLoopTC8RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB142_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB142_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB142_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB142_3
.LBB142_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end142:
	.size	_Z25benchAutoVecForBigLoopTC8RN9benchmark5StateE, .Lfunc_end142-_Z25benchAutoVecForBigLoopTC8RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z24benchForIC1VW4BigLoopTC8RN9benchmark5StateE # -- Begin function _Z24benchForIC1VW4BigLoopTC8RN9benchmark5StateE
	.p2align	5
	.type	_Z24benchForIC1VW4BigLoopTC8RN9benchmark5StateE,@function
_Z24benchForIC1VW4BigLoopTC8RN9benchmark5StateE: # @_Z24benchForIC1VW4BigLoopTC8RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB143_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB143_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB143_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB143_3
.LBB143_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end143:
	.size	_Z24benchForIC1VW4BigLoopTC8RN9benchmark5StateE, .Lfunc_end143-_Z24benchForIC1VW4BigLoopTC8RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z24benchForIC2VW4BigLoopTC8RN9benchmark5StateE # -- Begin function _Z24benchForIC2VW4BigLoopTC8RN9benchmark5StateE
	.p2align	5
	.type	_Z24benchForIC2VW4BigLoopTC8RN9benchmark5StateE,@function
_Z24benchForIC2VW4BigLoopTC8RN9benchmark5StateE: # @_Z24benchForIC2VW4BigLoopTC8RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB144_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB144_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB144_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB144_3
.LBB144_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end144:
	.size	_Z24benchForIC2VW4BigLoopTC8RN9benchmark5StateE, .Lfunc_end144-_Z24benchForIC2VW4BigLoopTC8RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z24benchForIC4VW4BigLoopTC8RN9benchmark5StateE # -- Begin function _Z24benchForIC4VW4BigLoopTC8RN9benchmark5StateE
	.p2align	5
	.type	_Z24benchForIC4VW4BigLoopTC8RN9benchmark5StateE,@function
_Z24benchForIC4VW4BigLoopTC8RN9benchmark5StateE: # @_Z24benchForIC4VW4BigLoopTC8RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB145_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB145_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB145_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB145_3
.LBB145_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end145:
	.size	_Z24benchForIC4VW4BigLoopTC8RN9benchmark5StateE, .Lfunc_end145-_Z24benchForIC4VW4BigLoopTC8RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForBigLoopWithReductionAutoVecTC8RN9benchmark5StateE # -- Begin function _Z38benchForBigLoopWithReductionAutoVecTC8RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForBigLoopWithReductionAutoVecTC8RN9benchmark5StateE,@function
_Z38benchForBigLoopWithReductionAutoVecTC8RN9benchmark5StateE: # @_Z38benchForBigLoopWithReductionAutoVecTC8RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB146_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB146_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB146_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(_ZL27bigLoopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB146_3
.LBB146_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end146:
	.size	_Z38benchForBigLoopWithReductionAutoVecTC8RN9benchmark5StateE, .Lfunc_end146-_Z38benchForBigLoopWithReductionAutoVecTC8RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC1VW4BigLoopWithReductionTC8RN9benchmark5StateE # -- Begin function _Z37benchForIC1VW4BigLoopWithReductionTC8RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC1VW4BigLoopWithReductionTC8RN9benchmark5StateE,@function
_Z37benchForIC1VW4BigLoopWithReductionTC8RN9benchmark5StateE: # @_Z37benchForIC1VW4BigLoopWithReductionTC8RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB147_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB147_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB147_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB147_3
.LBB147_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end147:
	.size	_Z37benchForIC1VW4BigLoopWithReductionTC8RN9benchmark5StateE, .Lfunc_end147-_Z37benchForIC1VW4BigLoopWithReductionTC8RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC2VW4BigLoopWithReductionTC8RN9benchmark5StateE # -- Begin function _Z37benchForIC2VW4BigLoopWithReductionTC8RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC2VW4BigLoopWithReductionTC8RN9benchmark5StateE,@function
_Z37benchForIC2VW4BigLoopWithReductionTC8RN9benchmark5StateE: # @_Z37benchForIC2VW4BigLoopWithReductionTC8RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB148_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB148_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB148_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB148_3
.LBB148_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end148:
	.size	_Z37benchForIC2VW4BigLoopWithReductionTC8RN9benchmark5StateE, .Lfunc_end148-_Z37benchForIC2VW4BigLoopWithReductionTC8RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC4VW4BigLoopWithReductionTC8RN9benchmark5StateE # -- Begin function _Z37benchForIC4VW4BigLoopWithReductionTC8RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC4VW4BigLoopWithReductionTC8RN9benchmark5StateE,@function
_Z37benchForIC4VW4BigLoopWithReductionTC8RN9benchmark5StateE: # @_Z37benchForIC4VW4BigLoopWithReductionTC8RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB149_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB149_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB149_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB149_3
.LBB149_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end149:
	.size	_Z37benchForIC4VW4BigLoopWithReductionTC8RN9benchmark5StateE, .Lfunc_end149-_Z37benchForIC4VW4BigLoopWithReductionTC8RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC1VW1BigLoopWithReductionTC8RN9benchmark5StateE # -- Begin function _Z37benchForIC1VW1BigLoopWithReductionTC8RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC1VW1BigLoopWithReductionTC8RN9benchmark5StateE,@function
_Z37benchForIC1VW1BigLoopWithReductionTC8RN9benchmark5StateE: # @_Z37benchForIC1VW1BigLoopWithReductionTC8RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB150_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB150_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB150_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB150_3
.LBB150_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end150:
	.size	_Z37benchForIC1VW1BigLoopWithReductionTC8RN9benchmark5StateE, .Lfunc_end150-_Z37benchForIC1VW1BigLoopWithReductionTC8RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC2VW1BigLoopWithReductionTC8RN9benchmark5StateE # -- Begin function _Z37benchForIC2VW1BigLoopWithReductionTC8RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC2VW1BigLoopWithReductionTC8RN9benchmark5StateE,@function
_Z37benchForIC2VW1BigLoopWithReductionTC8RN9benchmark5StateE: # @_Z37benchForIC2VW1BigLoopWithReductionTC8RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB151_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB151_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB151_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB151_3
.LBB151_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end151:
	.size	_Z37benchForIC2VW1BigLoopWithReductionTC8RN9benchmark5StateE, .Lfunc_end151-_Z37benchForIC2VW1BigLoopWithReductionTC8RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForIC4VW1BigLoopWithReductionTC8RN9benchmark5StateE # -- Begin function _Z37benchForIC4VW1BigLoopWithReductionTC8RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForIC4VW1BigLoopWithReductionTC8RN9benchmark5StateE,@function
_Z37benchForIC4VW1BigLoopWithReductionTC8RN9benchmark5StateE: # @_Z37benchForIC4VW1BigLoopWithReductionTC8RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB152_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB152_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB152_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB152_3
.LBB152_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end152:
	.size	_Z37benchForIC4VW1BigLoopWithReductionTC8RN9benchmark5StateE, .Lfunc_end152-_Z37benchForIC4VW1BigLoopWithReductionTC8RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z23benchAutoVecForLoopTC15RN9benchmark5StateE # -- Begin function _Z23benchAutoVecForLoopTC15RN9benchmark5StateE
	.p2align	5
	.type	_Z23benchAutoVecForLoopTC15RN9benchmark5StateE,@function
_Z23benchAutoVecForLoopTC15RN9benchmark5StateE: # @_Z23benchAutoVecForLoopTC15RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB153_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB153_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB153_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 15
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB153_3
.LBB153_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end153:
	.size	_Z23benchAutoVecForLoopTC15RN9benchmark5StateE, .Lfunc_end153-_Z23benchAutoVecForLoopTC15RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z22benchForIC1VW4LoopTC15RN9benchmark5StateE # -- Begin function _Z22benchForIC1VW4LoopTC15RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchForIC1VW4LoopTC15RN9benchmark5StateE,@function
_Z22benchForIC1VW4LoopTC15RN9benchmark5StateE: # @_Z22benchForIC1VW4LoopTC15RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB154_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB154_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB154_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 15
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB154_3
.LBB154_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end154:
	.size	_Z22benchForIC1VW4LoopTC15RN9benchmark5StateE, .Lfunc_end154-_Z22benchForIC1VW4LoopTC15RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z22benchForIC2VW4LoopTC15RN9benchmark5StateE # -- Begin function _Z22benchForIC2VW4LoopTC15RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchForIC2VW4LoopTC15RN9benchmark5StateE,@function
_Z22benchForIC2VW4LoopTC15RN9benchmark5StateE: # @_Z22benchForIC2VW4LoopTC15RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB155_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB155_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB155_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 15
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB155_3
.LBB155_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end155:
	.size	_Z22benchForIC2VW4LoopTC15RN9benchmark5StateE, .Lfunc_end155-_Z22benchForIC2VW4LoopTC15RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z22benchForIC4VW4LoopTC15RN9benchmark5StateE # -- Begin function _Z22benchForIC4VW4LoopTC15RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchForIC4VW4LoopTC15RN9benchmark5StateE,@function
_Z22benchForIC4VW4LoopTC15RN9benchmark5StateE: # @_Z22benchForIC4VW4LoopTC15RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB156_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB156_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB156_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 15
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB156_3
.LBB156_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end156:
	.size	_Z22benchForIC4VW4LoopTC15RN9benchmark5StateE, .Lfunc_end156-_Z22benchForIC4VW4LoopTC15RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z36benchForLoopWithReductionAutoVecTC15RN9benchmark5StateE # -- Begin function _Z36benchForLoopWithReductionAutoVecTC15RN9benchmark5StateE
	.p2align	5
	.type	_Z36benchForLoopWithReductionAutoVecTC15RN9benchmark5StateE,@function
_Z36benchForLoopWithReductionAutoVecTC15RN9benchmark5StateE: # @_Z36benchForLoopWithReductionAutoVecTC15RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB157_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB157_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB157_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 15
	pcaddu18i	$ra, %call36(_ZL24loopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB157_3
.LBB157_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end157:
	.size	_Z36benchForLoopWithReductionAutoVecTC15RN9benchmark5StateE, .Lfunc_end157-_Z36benchForLoopWithReductionAutoVecTC15RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC1VW4LoopWithReductionTC15RN9benchmark5StateE # -- Begin function _Z35benchForIC1VW4LoopWithReductionTC15RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC1VW4LoopWithReductionTC15RN9benchmark5StateE,@function
_Z35benchForIC1VW4LoopWithReductionTC15RN9benchmark5StateE: # @_Z35benchForIC1VW4LoopWithReductionTC15RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB158_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB158_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB158_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 15
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB158_3
.LBB158_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end158:
	.size	_Z35benchForIC1VW4LoopWithReductionTC15RN9benchmark5StateE, .Lfunc_end158-_Z35benchForIC1VW4LoopWithReductionTC15RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC2VW4LoopWithReductionTC15RN9benchmark5StateE # -- Begin function _Z35benchForIC2VW4LoopWithReductionTC15RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC2VW4LoopWithReductionTC15RN9benchmark5StateE,@function
_Z35benchForIC2VW4LoopWithReductionTC15RN9benchmark5StateE: # @_Z35benchForIC2VW4LoopWithReductionTC15RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB159_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB159_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB159_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 15
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB159_3
.LBB159_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end159:
	.size	_Z35benchForIC2VW4LoopWithReductionTC15RN9benchmark5StateE, .Lfunc_end159-_Z35benchForIC2VW4LoopWithReductionTC15RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC4VW4LoopWithReductionTC15RN9benchmark5StateE # -- Begin function _Z35benchForIC4VW4LoopWithReductionTC15RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC4VW4LoopWithReductionTC15RN9benchmark5StateE,@function
_Z35benchForIC4VW4LoopWithReductionTC15RN9benchmark5StateE: # @_Z35benchForIC4VW4LoopWithReductionTC15RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB160_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB160_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB160_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 15
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB160_3
.LBB160_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end160:
	.size	_Z35benchForIC4VW4LoopWithReductionTC15RN9benchmark5StateE, .Lfunc_end160-_Z35benchForIC4VW4LoopWithReductionTC15RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC1VW1LoopWithReductionTC15RN9benchmark5StateE # -- Begin function _Z35benchForIC1VW1LoopWithReductionTC15RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC1VW1LoopWithReductionTC15RN9benchmark5StateE,@function
_Z35benchForIC1VW1LoopWithReductionTC15RN9benchmark5StateE: # @_Z35benchForIC1VW1LoopWithReductionTC15RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB161_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB161_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB161_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 15
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB161_3
.LBB161_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end161:
	.size	_Z35benchForIC1VW1LoopWithReductionTC15RN9benchmark5StateE, .Lfunc_end161-_Z35benchForIC1VW1LoopWithReductionTC15RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC2VW1LoopWithReductionTC15RN9benchmark5StateE # -- Begin function _Z35benchForIC2VW1LoopWithReductionTC15RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC2VW1LoopWithReductionTC15RN9benchmark5StateE,@function
_Z35benchForIC2VW1LoopWithReductionTC15RN9benchmark5StateE: # @_Z35benchForIC2VW1LoopWithReductionTC15RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB162_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB162_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB162_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 15
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB162_3
.LBB162_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end162:
	.size	_Z35benchForIC2VW1LoopWithReductionTC15RN9benchmark5StateE, .Lfunc_end162-_Z35benchForIC2VW1LoopWithReductionTC15RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC4VW1LoopWithReductionTC15RN9benchmark5StateE # -- Begin function _Z35benchForIC4VW1LoopWithReductionTC15RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC4VW1LoopWithReductionTC15RN9benchmark5StateE,@function
_Z35benchForIC4VW1LoopWithReductionTC15RN9benchmark5StateE: # @_Z35benchForIC4VW1LoopWithReductionTC15RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB163_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB163_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB163_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 15
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB163_3
.LBB163_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end163:
	.size	_Z35benchForIC4VW1LoopWithReductionTC15RN9benchmark5StateE, .Lfunc_end163-_Z35benchForIC4VW1LoopWithReductionTC15RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z26benchAutoVecForBigLoopTC15RN9benchmark5StateE # -- Begin function _Z26benchAutoVecForBigLoopTC15RN9benchmark5StateE
	.p2align	5
	.type	_Z26benchAutoVecForBigLoopTC15RN9benchmark5StateE,@function
_Z26benchAutoVecForBigLoopTC15RN9benchmark5StateE: # @_Z26benchAutoVecForBigLoopTC15RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB164_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB164_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB164_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 15
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB164_3
.LBB164_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end164:
	.size	_Z26benchAutoVecForBigLoopTC15RN9benchmark5StateE, .Lfunc_end164-_Z26benchAutoVecForBigLoopTC15RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchForIC1VW4BigLoopTC15RN9benchmark5StateE # -- Begin function _Z25benchForIC1VW4BigLoopTC15RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchForIC1VW4BigLoopTC15RN9benchmark5StateE,@function
_Z25benchForIC1VW4BigLoopTC15RN9benchmark5StateE: # @_Z25benchForIC1VW4BigLoopTC15RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB165_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB165_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB165_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 15
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB165_3
.LBB165_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end165:
	.size	_Z25benchForIC1VW4BigLoopTC15RN9benchmark5StateE, .Lfunc_end165-_Z25benchForIC1VW4BigLoopTC15RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchForIC2VW4BigLoopTC15RN9benchmark5StateE # -- Begin function _Z25benchForIC2VW4BigLoopTC15RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchForIC2VW4BigLoopTC15RN9benchmark5StateE,@function
_Z25benchForIC2VW4BigLoopTC15RN9benchmark5StateE: # @_Z25benchForIC2VW4BigLoopTC15RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB166_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB166_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB166_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 15
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB166_3
.LBB166_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end166:
	.size	_Z25benchForIC2VW4BigLoopTC15RN9benchmark5StateE, .Lfunc_end166-_Z25benchForIC2VW4BigLoopTC15RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchForIC4VW4BigLoopTC15RN9benchmark5StateE # -- Begin function _Z25benchForIC4VW4BigLoopTC15RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchForIC4VW4BigLoopTC15RN9benchmark5StateE,@function
_Z25benchForIC4VW4BigLoopTC15RN9benchmark5StateE: # @_Z25benchForIC4VW4BigLoopTC15RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB167_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB167_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB167_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 15
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB167_3
.LBB167_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end167:
	.size	_Z25benchForIC4VW4BigLoopTC15RN9benchmark5StateE, .Lfunc_end167-_Z25benchForIC4VW4BigLoopTC15RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z39benchForBigLoopWithReductionAutoVecTC15RN9benchmark5StateE # -- Begin function _Z39benchForBigLoopWithReductionAutoVecTC15RN9benchmark5StateE
	.p2align	5
	.type	_Z39benchForBigLoopWithReductionAutoVecTC15RN9benchmark5StateE,@function
_Z39benchForBigLoopWithReductionAutoVecTC15RN9benchmark5StateE: # @_Z39benchForBigLoopWithReductionAutoVecTC15RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB168_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB168_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB168_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 15
	pcaddu18i	$ra, %call36(_ZL27bigLoopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB168_3
.LBB168_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end168:
	.size	_Z39benchForBigLoopWithReductionAutoVecTC15RN9benchmark5StateE, .Lfunc_end168-_Z39benchForBigLoopWithReductionAutoVecTC15RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC1VW4BigLoopWithReductionTC15RN9benchmark5StateE # -- Begin function _Z38benchForIC1VW4BigLoopWithReductionTC15RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC1VW4BigLoopWithReductionTC15RN9benchmark5StateE,@function
_Z38benchForIC1VW4BigLoopWithReductionTC15RN9benchmark5StateE: # @_Z38benchForIC1VW4BigLoopWithReductionTC15RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB169_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB169_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB169_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 15
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB169_3
.LBB169_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end169:
	.size	_Z38benchForIC1VW4BigLoopWithReductionTC15RN9benchmark5StateE, .Lfunc_end169-_Z38benchForIC1VW4BigLoopWithReductionTC15RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC2VW4BigLoopWithReductionTC15RN9benchmark5StateE # -- Begin function _Z38benchForIC2VW4BigLoopWithReductionTC15RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC2VW4BigLoopWithReductionTC15RN9benchmark5StateE,@function
_Z38benchForIC2VW4BigLoopWithReductionTC15RN9benchmark5StateE: # @_Z38benchForIC2VW4BigLoopWithReductionTC15RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB170_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB170_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB170_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 15
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB170_3
.LBB170_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end170:
	.size	_Z38benchForIC2VW4BigLoopWithReductionTC15RN9benchmark5StateE, .Lfunc_end170-_Z38benchForIC2VW4BigLoopWithReductionTC15RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC4VW4BigLoopWithReductionTC15RN9benchmark5StateE # -- Begin function _Z38benchForIC4VW4BigLoopWithReductionTC15RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC4VW4BigLoopWithReductionTC15RN9benchmark5StateE,@function
_Z38benchForIC4VW4BigLoopWithReductionTC15RN9benchmark5StateE: # @_Z38benchForIC4VW4BigLoopWithReductionTC15RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB171_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB171_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB171_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 15
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB171_3
.LBB171_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end171:
	.size	_Z38benchForIC4VW4BigLoopWithReductionTC15RN9benchmark5StateE, .Lfunc_end171-_Z38benchForIC4VW4BigLoopWithReductionTC15RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC1VW1BigLoopWithReductionTC15RN9benchmark5StateE # -- Begin function _Z38benchForIC1VW1BigLoopWithReductionTC15RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC1VW1BigLoopWithReductionTC15RN9benchmark5StateE,@function
_Z38benchForIC1VW1BigLoopWithReductionTC15RN9benchmark5StateE: # @_Z38benchForIC1VW1BigLoopWithReductionTC15RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB172_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB172_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB172_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 15
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB172_3
.LBB172_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end172:
	.size	_Z38benchForIC1VW1BigLoopWithReductionTC15RN9benchmark5StateE, .Lfunc_end172-_Z38benchForIC1VW1BigLoopWithReductionTC15RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC2VW1BigLoopWithReductionTC15RN9benchmark5StateE # -- Begin function _Z38benchForIC2VW1BigLoopWithReductionTC15RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC2VW1BigLoopWithReductionTC15RN9benchmark5StateE,@function
_Z38benchForIC2VW1BigLoopWithReductionTC15RN9benchmark5StateE: # @_Z38benchForIC2VW1BigLoopWithReductionTC15RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB173_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB173_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB173_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 15
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB173_3
.LBB173_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end173:
	.size	_Z38benchForIC2VW1BigLoopWithReductionTC15RN9benchmark5StateE, .Lfunc_end173-_Z38benchForIC2VW1BigLoopWithReductionTC15RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC4VW1BigLoopWithReductionTC15RN9benchmark5StateE # -- Begin function _Z38benchForIC4VW1BigLoopWithReductionTC15RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC4VW1BigLoopWithReductionTC15RN9benchmark5StateE,@function
_Z38benchForIC4VW1BigLoopWithReductionTC15RN9benchmark5StateE: # @_Z38benchForIC4VW1BigLoopWithReductionTC15RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB174_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB174_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB174_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 15
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB174_3
.LBB174_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end174:
	.size	_Z38benchForIC4VW1BigLoopWithReductionTC15RN9benchmark5StateE, .Lfunc_end174-_Z38benchForIC4VW1BigLoopWithReductionTC15RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z23benchAutoVecForLoopTC16RN9benchmark5StateE # -- Begin function _Z23benchAutoVecForLoopTC16RN9benchmark5StateE
	.p2align	5
	.type	_Z23benchAutoVecForLoopTC16RN9benchmark5StateE,@function
_Z23benchAutoVecForLoopTC16RN9benchmark5StateE: # @_Z23benchAutoVecForLoopTC16RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB175_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB175_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB175_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 16
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB175_3
.LBB175_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end175:
	.size	_Z23benchAutoVecForLoopTC16RN9benchmark5StateE, .Lfunc_end175-_Z23benchAutoVecForLoopTC16RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z22benchForIC1VW4LoopTC16RN9benchmark5StateE # -- Begin function _Z22benchForIC1VW4LoopTC16RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchForIC1VW4LoopTC16RN9benchmark5StateE,@function
_Z22benchForIC1VW4LoopTC16RN9benchmark5StateE: # @_Z22benchForIC1VW4LoopTC16RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB176_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB176_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB176_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 16
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB176_3
.LBB176_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end176:
	.size	_Z22benchForIC1VW4LoopTC16RN9benchmark5StateE, .Lfunc_end176-_Z22benchForIC1VW4LoopTC16RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z22benchForIC2VW4LoopTC16RN9benchmark5StateE # -- Begin function _Z22benchForIC2VW4LoopTC16RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchForIC2VW4LoopTC16RN9benchmark5StateE,@function
_Z22benchForIC2VW4LoopTC16RN9benchmark5StateE: # @_Z22benchForIC2VW4LoopTC16RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB177_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB177_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB177_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 16
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB177_3
.LBB177_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end177:
	.size	_Z22benchForIC2VW4LoopTC16RN9benchmark5StateE, .Lfunc_end177-_Z22benchForIC2VW4LoopTC16RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z22benchForIC4VW4LoopTC16RN9benchmark5StateE # -- Begin function _Z22benchForIC4VW4LoopTC16RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchForIC4VW4LoopTC16RN9benchmark5StateE,@function
_Z22benchForIC4VW4LoopTC16RN9benchmark5StateE: # @_Z22benchForIC4VW4LoopTC16RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB178_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB178_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB178_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 16
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB178_3
.LBB178_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end178:
	.size	_Z22benchForIC4VW4LoopTC16RN9benchmark5StateE, .Lfunc_end178-_Z22benchForIC4VW4LoopTC16RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z36benchForLoopWithReductionAutoVecTC16RN9benchmark5StateE # -- Begin function _Z36benchForLoopWithReductionAutoVecTC16RN9benchmark5StateE
	.p2align	5
	.type	_Z36benchForLoopWithReductionAutoVecTC16RN9benchmark5StateE,@function
_Z36benchForLoopWithReductionAutoVecTC16RN9benchmark5StateE: # @_Z36benchForLoopWithReductionAutoVecTC16RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB179_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB179_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB179_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 16
	pcaddu18i	$ra, %call36(_ZL24loopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB179_3
.LBB179_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end179:
	.size	_Z36benchForLoopWithReductionAutoVecTC16RN9benchmark5StateE, .Lfunc_end179-_Z36benchForLoopWithReductionAutoVecTC16RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC1VW4LoopWithReductionTC16RN9benchmark5StateE # -- Begin function _Z35benchForIC1VW4LoopWithReductionTC16RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC1VW4LoopWithReductionTC16RN9benchmark5StateE,@function
_Z35benchForIC1VW4LoopWithReductionTC16RN9benchmark5StateE: # @_Z35benchForIC1VW4LoopWithReductionTC16RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB180_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB180_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB180_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 16
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB180_3
.LBB180_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end180:
	.size	_Z35benchForIC1VW4LoopWithReductionTC16RN9benchmark5StateE, .Lfunc_end180-_Z35benchForIC1VW4LoopWithReductionTC16RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC2VW4LoopWithReductionTC16RN9benchmark5StateE # -- Begin function _Z35benchForIC2VW4LoopWithReductionTC16RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC2VW4LoopWithReductionTC16RN9benchmark5StateE,@function
_Z35benchForIC2VW4LoopWithReductionTC16RN9benchmark5StateE: # @_Z35benchForIC2VW4LoopWithReductionTC16RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB181_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB181_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB181_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 16
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB181_3
.LBB181_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end181:
	.size	_Z35benchForIC2VW4LoopWithReductionTC16RN9benchmark5StateE, .Lfunc_end181-_Z35benchForIC2VW4LoopWithReductionTC16RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC4VW4LoopWithReductionTC16RN9benchmark5StateE # -- Begin function _Z35benchForIC4VW4LoopWithReductionTC16RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC4VW4LoopWithReductionTC16RN9benchmark5StateE,@function
_Z35benchForIC4VW4LoopWithReductionTC16RN9benchmark5StateE: # @_Z35benchForIC4VW4LoopWithReductionTC16RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB182_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB182_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB182_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 16
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB182_3
.LBB182_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end182:
	.size	_Z35benchForIC4VW4LoopWithReductionTC16RN9benchmark5StateE, .Lfunc_end182-_Z35benchForIC4VW4LoopWithReductionTC16RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC1VW1LoopWithReductionTC16RN9benchmark5StateE # -- Begin function _Z35benchForIC1VW1LoopWithReductionTC16RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC1VW1LoopWithReductionTC16RN9benchmark5StateE,@function
_Z35benchForIC1VW1LoopWithReductionTC16RN9benchmark5StateE: # @_Z35benchForIC1VW1LoopWithReductionTC16RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB183_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB183_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB183_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 16
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB183_3
.LBB183_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end183:
	.size	_Z35benchForIC1VW1LoopWithReductionTC16RN9benchmark5StateE, .Lfunc_end183-_Z35benchForIC1VW1LoopWithReductionTC16RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC2VW1LoopWithReductionTC16RN9benchmark5StateE # -- Begin function _Z35benchForIC2VW1LoopWithReductionTC16RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC2VW1LoopWithReductionTC16RN9benchmark5StateE,@function
_Z35benchForIC2VW1LoopWithReductionTC16RN9benchmark5StateE: # @_Z35benchForIC2VW1LoopWithReductionTC16RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB184_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB184_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB184_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 16
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB184_3
.LBB184_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end184:
	.size	_Z35benchForIC2VW1LoopWithReductionTC16RN9benchmark5StateE, .Lfunc_end184-_Z35benchForIC2VW1LoopWithReductionTC16RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC4VW1LoopWithReductionTC16RN9benchmark5StateE # -- Begin function _Z35benchForIC4VW1LoopWithReductionTC16RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC4VW1LoopWithReductionTC16RN9benchmark5StateE,@function
_Z35benchForIC4VW1LoopWithReductionTC16RN9benchmark5StateE: # @_Z35benchForIC4VW1LoopWithReductionTC16RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB185_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB185_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB185_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 16
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB185_3
.LBB185_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end185:
	.size	_Z35benchForIC4VW1LoopWithReductionTC16RN9benchmark5StateE, .Lfunc_end185-_Z35benchForIC4VW1LoopWithReductionTC16RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z26benchAutoVecForBigLoopTC16RN9benchmark5StateE # -- Begin function _Z26benchAutoVecForBigLoopTC16RN9benchmark5StateE
	.p2align	5
	.type	_Z26benchAutoVecForBigLoopTC16RN9benchmark5StateE,@function
_Z26benchAutoVecForBigLoopTC16RN9benchmark5StateE: # @_Z26benchAutoVecForBigLoopTC16RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB186_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB186_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB186_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 16
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB186_3
.LBB186_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end186:
	.size	_Z26benchAutoVecForBigLoopTC16RN9benchmark5StateE, .Lfunc_end186-_Z26benchAutoVecForBigLoopTC16RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchForIC1VW4BigLoopTC16RN9benchmark5StateE # -- Begin function _Z25benchForIC1VW4BigLoopTC16RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchForIC1VW4BigLoopTC16RN9benchmark5StateE,@function
_Z25benchForIC1VW4BigLoopTC16RN9benchmark5StateE: # @_Z25benchForIC1VW4BigLoopTC16RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB187_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB187_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB187_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 16
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB187_3
.LBB187_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end187:
	.size	_Z25benchForIC1VW4BigLoopTC16RN9benchmark5StateE, .Lfunc_end187-_Z25benchForIC1VW4BigLoopTC16RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchForIC2VW4BigLoopTC16RN9benchmark5StateE # -- Begin function _Z25benchForIC2VW4BigLoopTC16RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchForIC2VW4BigLoopTC16RN9benchmark5StateE,@function
_Z25benchForIC2VW4BigLoopTC16RN9benchmark5StateE: # @_Z25benchForIC2VW4BigLoopTC16RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB188_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB188_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB188_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 16
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB188_3
.LBB188_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end188:
	.size	_Z25benchForIC2VW4BigLoopTC16RN9benchmark5StateE, .Lfunc_end188-_Z25benchForIC2VW4BigLoopTC16RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchForIC4VW4BigLoopTC16RN9benchmark5StateE # -- Begin function _Z25benchForIC4VW4BigLoopTC16RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchForIC4VW4BigLoopTC16RN9benchmark5StateE,@function
_Z25benchForIC4VW4BigLoopTC16RN9benchmark5StateE: # @_Z25benchForIC4VW4BigLoopTC16RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB189_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB189_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB189_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 16
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB189_3
.LBB189_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end189:
	.size	_Z25benchForIC4VW4BigLoopTC16RN9benchmark5StateE, .Lfunc_end189-_Z25benchForIC4VW4BigLoopTC16RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z39benchForBigLoopWithReductionAutoVecTC16RN9benchmark5StateE # -- Begin function _Z39benchForBigLoopWithReductionAutoVecTC16RN9benchmark5StateE
	.p2align	5
	.type	_Z39benchForBigLoopWithReductionAutoVecTC16RN9benchmark5StateE,@function
_Z39benchForBigLoopWithReductionAutoVecTC16RN9benchmark5StateE: # @_Z39benchForBigLoopWithReductionAutoVecTC16RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB190_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB190_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB190_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 16
	pcaddu18i	$ra, %call36(_ZL27bigLoopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB190_3
.LBB190_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end190:
	.size	_Z39benchForBigLoopWithReductionAutoVecTC16RN9benchmark5StateE, .Lfunc_end190-_Z39benchForBigLoopWithReductionAutoVecTC16RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC1VW4BigLoopWithReductionTC16RN9benchmark5StateE # -- Begin function _Z38benchForIC1VW4BigLoopWithReductionTC16RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC1VW4BigLoopWithReductionTC16RN9benchmark5StateE,@function
_Z38benchForIC1VW4BigLoopWithReductionTC16RN9benchmark5StateE: # @_Z38benchForIC1VW4BigLoopWithReductionTC16RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB191_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB191_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB191_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 16
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB191_3
.LBB191_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end191:
	.size	_Z38benchForIC1VW4BigLoopWithReductionTC16RN9benchmark5StateE, .Lfunc_end191-_Z38benchForIC1VW4BigLoopWithReductionTC16RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC2VW4BigLoopWithReductionTC16RN9benchmark5StateE # -- Begin function _Z38benchForIC2VW4BigLoopWithReductionTC16RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC2VW4BigLoopWithReductionTC16RN9benchmark5StateE,@function
_Z38benchForIC2VW4BigLoopWithReductionTC16RN9benchmark5StateE: # @_Z38benchForIC2VW4BigLoopWithReductionTC16RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB192_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB192_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB192_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 16
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB192_3
.LBB192_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end192:
	.size	_Z38benchForIC2VW4BigLoopWithReductionTC16RN9benchmark5StateE, .Lfunc_end192-_Z38benchForIC2VW4BigLoopWithReductionTC16RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC4VW4BigLoopWithReductionTC16RN9benchmark5StateE # -- Begin function _Z38benchForIC4VW4BigLoopWithReductionTC16RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC4VW4BigLoopWithReductionTC16RN9benchmark5StateE,@function
_Z38benchForIC4VW4BigLoopWithReductionTC16RN9benchmark5StateE: # @_Z38benchForIC4VW4BigLoopWithReductionTC16RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB193_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB193_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB193_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 16
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB193_3
.LBB193_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end193:
	.size	_Z38benchForIC4VW4BigLoopWithReductionTC16RN9benchmark5StateE, .Lfunc_end193-_Z38benchForIC4VW4BigLoopWithReductionTC16RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC1VW1BigLoopWithReductionTC16RN9benchmark5StateE # -- Begin function _Z38benchForIC1VW1BigLoopWithReductionTC16RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC1VW1BigLoopWithReductionTC16RN9benchmark5StateE,@function
_Z38benchForIC1VW1BigLoopWithReductionTC16RN9benchmark5StateE: # @_Z38benchForIC1VW1BigLoopWithReductionTC16RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB194_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB194_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB194_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 16
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB194_3
.LBB194_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end194:
	.size	_Z38benchForIC1VW1BigLoopWithReductionTC16RN9benchmark5StateE, .Lfunc_end194-_Z38benchForIC1VW1BigLoopWithReductionTC16RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC2VW1BigLoopWithReductionTC16RN9benchmark5StateE # -- Begin function _Z38benchForIC2VW1BigLoopWithReductionTC16RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC2VW1BigLoopWithReductionTC16RN9benchmark5StateE,@function
_Z38benchForIC2VW1BigLoopWithReductionTC16RN9benchmark5StateE: # @_Z38benchForIC2VW1BigLoopWithReductionTC16RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB195_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB195_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB195_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 16
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB195_3
.LBB195_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end195:
	.size	_Z38benchForIC2VW1BigLoopWithReductionTC16RN9benchmark5StateE, .Lfunc_end195-_Z38benchForIC2VW1BigLoopWithReductionTC16RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC4VW1BigLoopWithReductionTC16RN9benchmark5StateE # -- Begin function _Z38benchForIC4VW1BigLoopWithReductionTC16RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC4VW1BigLoopWithReductionTC16RN9benchmark5StateE,@function
_Z38benchForIC4VW1BigLoopWithReductionTC16RN9benchmark5StateE: # @_Z38benchForIC4VW1BigLoopWithReductionTC16RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB196_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB196_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB196_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 16
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB196_3
.LBB196_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end196:
	.size	_Z38benchForIC4VW1BigLoopWithReductionTC16RN9benchmark5StateE, .Lfunc_end196-_Z38benchForIC4VW1BigLoopWithReductionTC16RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z23benchAutoVecForLoopTC31RN9benchmark5StateE # -- Begin function _Z23benchAutoVecForLoopTC31RN9benchmark5StateE
	.p2align	5
	.type	_Z23benchAutoVecForLoopTC31RN9benchmark5StateE,@function
_Z23benchAutoVecForLoopTC31RN9benchmark5StateE: # @_Z23benchAutoVecForLoopTC31RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB197_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB197_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB197_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 31
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB197_3
.LBB197_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end197:
	.size	_Z23benchAutoVecForLoopTC31RN9benchmark5StateE, .Lfunc_end197-_Z23benchAutoVecForLoopTC31RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z22benchForIC1VW4LoopTC31RN9benchmark5StateE # -- Begin function _Z22benchForIC1VW4LoopTC31RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchForIC1VW4LoopTC31RN9benchmark5StateE,@function
_Z22benchForIC1VW4LoopTC31RN9benchmark5StateE: # @_Z22benchForIC1VW4LoopTC31RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB198_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB198_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB198_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 31
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB198_3
.LBB198_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end198:
	.size	_Z22benchForIC1VW4LoopTC31RN9benchmark5StateE, .Lfunc_end198-_Z22benchForIC1VW4LoopTC31RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z22benchForIC2VW4LoopTC31RN9benchmark5StateE # -- Begin function _Z22benchForIC2VW4LoopTC31RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchForIC2VW4LoopTC31RN9benchmark5StateE,@function
_Z22benchForIC2VW4LoopTC31RN9benchmark5StateE: # @_Z22benchForIC2VW4LoopTC31RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB199_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB199_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB199_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 31
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB199_3
.LBB199_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end199:
	.size	_Z22benchForIC2VW4LoopTC31RN9benchmark5StateE, .Lfunc_end199-_Z22benchForIC2VW4LoopTC31RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z22benchForIC4VW4LoopTC31RN9benchmark5StateE # -- Begin function _Z22benchForIC4VW4LoopTC31RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchForIC4VW4LoopTC31RN9benchmark5StateE,@function
_Z22benchForIC4VW4LoopTC31RN9benchmark5StateE: # @_Z22benchForIC4VW4LoopTC31RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB200_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB200_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB200_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 31
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB200_3
.LBB200_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end200:
	.size	_Z22benchForIC4VW4LoopTC31RN9benchmark5StateE, .Lfunc_end200-_Z22benchForIC4VW4LoopTC31RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z36benchForLoopWithReductionAutoVecTC31RN9benchmark5StateE # -- Begin function _Z36benchForLoopWithReductionAutoVecTC31RN9benchmark5StateE
	.p2align	5
	.type	_Z36benchForLoopWithReductionAutoVecTC31RN9benchmark5StateE,@function
_Z36benchForLoopWithReductionAutoVecTC31RN9benchmark5StateE: # @_Z36benchForLoopWithReductionAutoVecTC31RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB201_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB201_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB201_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 31
	pcaddu18i	$ra, %call36(_ZL24loopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB201_3
.LBB201_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end201:
	.size	_Z36benchForLoopWithReductionAutoVecTC31RN9benchmark5StateE, .Lfunc_end201-_Z36benchForLoopWithReductionAutoVecTC31RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC1VW4LoopWithReductionTC31RN9benchmark5StateE # -- Begin function _Z35benchForIC1VW4LoopWithReductionTC31RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC1VW4LoopWithReductionTC31RN9benchmark5StateE,@function
_Z35benchForIC1VW4LoopWithReductionTC31RN9benchmark5StateE: # @_Z35benchForIC1VW4LoopWithReductionTC31RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB202_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB202_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB202_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 31
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB202_3
.LBB202_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end202:
	.size	_Z35benchForIC1VW4LoopWithReductionTC31RN9benchmark5StateE, .Lfunc_end202-_Z35benchForIC1VW4LoopWithReductionTC31RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC2VW4LoopWithReductionTC31RN9benchmark5StateE # -- Begin function _Z35benchForIC2VW4LoopWithReductionTC31RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC2VW4LoopWithReductionTC31RN9benchmark5StateE,@function
_Z35benchForIC2VW4LoopWithReductionTC31RN9benchmark5StateE: # @_Z35benchForIC2VW4LoopWithReductionTC31RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB203_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB203_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB203_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 31
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB203_3
.LBB203_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end203:
	.size	_Z35benchForIC2VW4LoopWithReductionTC31RN9benchmark5StateE, .Lfunc_end203-_Z35benchForIC2VW4LoopWithReductionTC31RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC4VW4LoopWithReductionTC31RN9benchmark5StateE # -- Begin function _Z35benchForIC4VW4LoopWithReductionTC31RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC4VW4LoopWithReductionTC31RN9benchmark5StateE,@function
_Z35benchForIC4VW4LoopWithReductionTC31RN9benchmark5StateE: # @_Z35benchForIC4VW4LoopWithReductionTC31RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB204_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB204_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB204_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 31
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB204_3
.LBB204_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end204:
	.size	_Z35benchForIC4VW4LoopWithReductionTC31RN9benchmark5StateE, .Lfunc_end204-_Z35benchForIC4VW4LoopWithReductionTC31RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC1VW1LoopWithReductionTC31RN9benchmark5StateE # -- Begin function _Z35benchForIC1VW1LoopWithReductionTC31RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC1VW1LoopWithReductionTC31RN9benchmark5StateE,@function
_Z35benchForIC1VW1LoopWithReductionTC31RN9benchmark5StateE: # @_Z35benchForIC1VW1LoopWithReductionTC31RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB205_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB205_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB205_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 31
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB205_3
.LBB205_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end205:
	.size	_Z35benchForIC1VW1LoopWithReductionTC31RN9benchmark5StateE, .Lfunc_end205-_Z35benchForIC1VW1LoopWithReductionTC31RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC2VW1LoopWithReductionTC31RN9benchmark5StateE # -- Begin function _Z35benchForIC2VW1LoopWithReductionTC31RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC2VW1LoopWithReductionTC31RN9benchmark5StateE,@function
_Z35benchForIC2VW1LoopWithReductionTC31RN9benchmark5StateE: # @_Z35benchForIC2VW1LoopWithReductionTC31RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB206_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB206_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB206_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 31
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB206_3
.LBB206_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end206:
	.size	_Z35benchForIC2VW1LoopWithReductionTC31RN9benchmark5StateE, .Lfunc_end206-_Z35benchForIC2VW1LoopWithReductionTC31RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC4VW1LoopWithReductionTC31RN9benchmark5StateE # -- Begin function _Z35benchForIC4VW1LoopWithReductionTC31RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC4VW1LoopWithReductionTC31RN9benchmark5StateE,@function
_Z35benchForIC4VW1LoopWithReductionTC31RN9benchmark5StateE: # @_Z35benchForIC4VW1LoopWithReductionTC31RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB207_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB207_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB207_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 31
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB207_3
.LBB207_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end207:
	.size	_Z35benchForIC4VW1LoopWithReductionTC31RN9benchmark5StateE, .Lfunc_end207-_Z35benchForIC4VW1LoopWithReductionTC31RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z26benchAutoVecForBigLoopTC31RN9benchmark5StateE # -- Begin function _Z26benchAutoVecForBigLoopTC31RN9benchmark5StateE
	.p2align	5
	.type	_Z26benchAutoVecForBigLoopTC31RN9benchmark5StateE,@function
_Z26benchAutoVecForBigLoopTC31RN9benchmark5StateE: # @_Z26benchAutoVecForBigLoopTC31RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB208_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB208_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB208_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 31
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB208_3
.LBB208_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end208:
	.size	_Z26benchAutoVecForBigLoopTC31RN9benchmark5StateE, .Lfunc_end208-_Z26benchAutoVecForBigLoopTC31RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchForIC1VW4BigLoopTC31RN9benchmark5StateE # -- Begin function _Z25benchForIC1VW4BigLoopTC31RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchForIC1VW4BigLoopTC31RN9benchmark5StateE,@function
_Z25benchForIC1VW4BigLoopTC31RN9benchmark5StateE: # @_Z25benchForIC1VW4BigLoopTC31RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB209_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB209_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB209_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 31
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB209_3
.LBB209_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end209:
	.size	_Z25benchForIC1VW4BigLoopTC31RN9benchmark5StateE, .Lfunc_end209-_Z25benchForIC1VW4BigLoopTC31RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchForIC2VW4BigLoopTC31RN9benchmark5StateE # -- Begin function _Z25benchForIC2VW4BigLoopTC31RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchForIC2VW4BigLoopTC31RN9benchmark5StateE,@function
_Z25benchForIC2VW4BigLoopTC31RN9benchmark5StateE: # @_Z25benchForIC2VW4BigLoopTC31RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB210_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB210_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB210_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 31
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB210_3
.LBB210_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end210:
	.size	_Z25benchForIC2VW4BigLoopTC31RN9benchmark5StateE, .Lfunc_end210-_Z25benchForIC2VW4BigLoopTC31RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchForIC4VW4BigLoopTC31RN9benchmark5StateE # -- Begin function _Z25benchForIC4VW4BigLoopTC31RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchForIC4VW4BigLoopTC31RN9benchmark5StateE,@function
_Z25benchForIC4VW4BigLoopTC31RN9benchmark5StateE: # @_Z25benchForIC4VW4BigLoopTC31RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB211_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB211_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB211_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 31
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB211_3
.LBB211_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end211:
	.size	_Z25benchForIC4VW4BigLoopTC31RN9benchmark5StateE, .Lfunc_end211-_Z25benchForIC4VW4BigLoopTC31RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z39benchForBigLoopWithReductionAutoVecTC31RN9benchmark5StateE # -- Begin function _Z39benchForBigLoopWithReductionAutoVecTC31RN9benchmark5StateE
	.p2align	5
	.type	_Z39benchForBigLoopWithReductionAutoVecTC31RN9benchmark5StateE,@function
_Z39benchForBigLoopWithReductionAutoVecTC31RN9benchmark5StateE: # @_Z39benchForBigLoopWithReductionAutoVecTC31RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB212_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB212_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB212_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 31
	pcaddu18i	$ra, %call36(_ZL27bigLoopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB212_3
.LBB212_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end212:
	.size	_Z39benchForBigLoopWithReductionAutoVecTC31RN9benchmark5StateE, .Lfunc_end212-_Z39benchForBigLoopWithReductionAutoVecTC31RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC1VW4BigLoopWithReductionTC31RN9benchmark5StateE # -- Begin function _Z38benchForIC1VW4BigLoopWithReductionTC31RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC1VW4BigLoopWithReductionTC31RN9benchmark5StateE,@function
_Z38benchForIC1VW4BigLoopWithReductionTC31RN9benchmark5StateE: # @_Z38benchForIC1VW4BigLoopWithReductionTC31RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB213_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB213_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB213_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 31
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB213_3
.LBB213_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end213:
	.size	_Z38benchForIC1VW4BigLoopWithReductionTC31RN9benchmark5StateE, .Lfunc_end213-_Z38benchForIC1VW4BigLoopWithReductionTC31RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC2VW4BigLoopWithReductionTC31RN9benchmark5StateE # -- Begin function _Z38benchForIC2VW4BigLoopWithReductionTC31RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC2VW4BigLoopWithReductionTC31RN9benchmark5StateE,@function
_Z38benchForIC2VW4BigLoopWithReductionTC31RN9benchmark5StateE: # @_Z38benchForIC2VW4BigLoopWithReductionTC31RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB214_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB214_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB214_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 31
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB214_3
.LBB214_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end214:
	.size	_Z38benchForIC2VW4BigLoopWithReductionTC31RN9benchmark5StateE, .Lfunc_end214-_Z38benchForIC2VW4BigLoopWithReductionTC31RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC4VW4BigLoopWithReductionTC31RN9benchmark5StateE # -- Begin function _Z38benchForIC4VW4BigLoopWithReductionTC31RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC4VW4BigLoopWithReductionTC31RN9benchmark5StateE,@function
_Z38benchForIC4VW4BigLoopWithReductionTC31RN9benchmark5StateE: # @_Z38benchForIC4VW4BigLoopWithReductionTC31RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB215_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB215_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB215_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 31
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB215_3
.LBB215_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end215:
	.size	_Z38benchForIC4VW4BigLoopWithReductionTC31RN9benchmark5StateE, .Lfunc_end215-_Z38benchForIC4VW4BigLoopWithReductionTC31RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC1VW1BigLoopWithReductionTC31RN9benchmark5StateE # -- Begin function _Z38benchForIC1VW1BigLoopWithReductionTC31RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC1VW1BigLoopWithReductionTC31RN9benchmark5StateE,@function
_Z38benchForIC1VW1BigLoopWithReductionTC31RN9benchmark5StateE: # @_Z38benchForIC1VW1BigLoopWithReductionTC31RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB216_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB216_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB216_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 31
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB216_3
.LBB216_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end216:
	.size	_Z38benchForIC1VW1BigLoopWithReductionTC31RN9benchmark5StateE, .Lfunc_end216-_Z38benchForIC1VW1BigLoopWithReductionTC31RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC2VW1BigLoopWithReductionTC31RN9benchmark5StateE # -- Begin function _Z38benchForIC2VW1BigLoopWithReductionTC31RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC2VW1BigLoopWithReductionTC31RN9benchmark5StateE,@function
_Z38benchForIC2VW1BigLoopWithReductionTC31RN9benchmark5StateE: # @_Z38benchForIC2VW1BigLoopWithReductionTC31RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB217_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB217_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB217_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 31
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB217_3
.LBB217_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end217:
	.size	_Z38benchForIC2VW1BigLoopWithReductionTC31RN9benchmark5StateE, .Lfunc_end217-_Z38benchForIC2VW1BigLoopWithReductionTC31RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC4VW1BigLoopWithReductionTC31RN9benchmark5StateE # -- Begin function _Z38benchForIC4VW1BigLoopWithReductionTC31RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC4VW1BigLoopWithReductionTC31RN9benchmark5StateE,@function
_Z38benchForIC4VW1BigLoopWithReductionTC31RN9benchmark5StateE: # @_Z38benchForIC4VW1BigLoopWithReductionTC31RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB218_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB218_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB218_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 31
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB218_3
.LBB218_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end218:
	.size	_Z38benchForIC4VW1BigLoopWithReductionTC31RN9benchmark5StateE, .Lfunc_end218-_Z38benchForIC4VW1BigLoopWithReductionTC31RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z23benchAutoVecForLoopTC32RN9benchmark5StateE # -- Begin function _Z23benchAutoVecForLoopTC32RN9benchmark5StateE
	.p2align	5
	.type	_Z23benchAutoVecForLoopTC32RN9benchmark5StateE,@function
_Z23benchAutoVecForLoopTC32RN9benchmark5StateE: # @_Z23benchAutoVecForLoopTC32RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB219_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB219_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB219_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB219_3
.LBB219_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end219:
	.size	_Z23benchAutoVecForLoopTC32RN9benchmark5StateE, .Lfunc_end219-_Z23benchAutoVecForLoopTC32RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z22benchForIC1VW4LoopTC32RN9benchmark5StateE # -- Begin function _Z22benchForIC1VW4LoopTC32RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchForIC1VW4LoopTC32RN9benchmark5StateE,@function
_Z22benchForIC1VW4LoopTC32RN9benchmark5StateE: # @_Z22benchForIC1VW4LoopTC32RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB220_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB220_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB220_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB220_3
.LBB220_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end220:
	.size	_Z22benchForIC1VW4LoopTC32RN9benchmark5StateE, .Lfunc_end220-_Z22benchForIC1VW4LoopTC32RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z22benchForIC2VW4LoopTC32RN9benchmark5StateE # -- Begin function _Z22benchForIC2VW4LoopTC32RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchForIC2VW4LoopTC32RN9benchmark5StateE,@function
_Z22benchForIC2VW4LoopTC32RN9benchmark5StateE: # @_Z22benchForIC2VW4LoopTC32RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB221_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB221_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB221_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB221_3
.LBB221_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end221:
	.size	_Z22benchForIC2VW4LoopTC32RN9benchmark5StateE, .Lfunc_end221-_Z22benchForIC2VW4LoopTC32RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z22benchForIC4VW4LoopTC32RN9benchmark5StateE # -- Begin function _Z22benchForIC4VW4LoopTC32RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchForIC4VW4LoopTC32RN9benchmark5StateE,@function
_Z22benchForIC4VW4LoopTC32RN9benchmark5StateE: # @_Z22benchForIC4VW4LoopTC32RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB222_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB222_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB222_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB222_3
.LBB222_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end222:
	.size	_Z22benchForIC4VW4LoopTC32RN9benchmark5StateE, .Lfunc_end222-_Z22benchForIC4VW4LoopTC32RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z36benchForLoopWithReductionAutoVecTC32RN9benchmark5StateE # -- Begin function _Z36benchForLoopWithReductionAutoVecTC32RN9benchmark5StateE
	.p2align	5
	.type	_Z36benchForLoopWithReductionAutoVecTC32RN9benchmark5StateE,@function
_Z36benchForLoopWithReductionAutoVecTC32RN9benchmark5StateE: # @_Z36benchForLoopWithReductionAutoVecTC32RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB223_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB223_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB223_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_ZL24loopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB223_3
.LBB223_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end223:
	.size	_Z36benchForLoopWithReductionAutoVecTC32RN9benchmark5StateE, .Lfunc_end223-_Z36benchForLoopWithReductionAutoVecTC32RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC1VW4LoopWithReductionTC32RN9benchmark5StateE # -- Begin function _Z35benchForIC1VW4LoopWithReductionTC32RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC1VW4LoopWithReductionTC32RN9benchmark5StateE,@function
_Z35benchForIC1VW4LoopWithReductionTC32RN9benchmark5StateE: # @_Z35benchForIC1VW4LoopWithReductionTC32RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB224_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB224_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB224_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB224_3
.LBB224_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end224:
	.size	_Z35benchForIC1VW4LoopWithReductionTC32RN9benchmark5StateE, .Lfunc_end224-_Z35benchForIC1VW4LoopWithReductionTC32RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC2VW4LoopWithReductionTC32RN9benchmark5StateE # -- Begin function _Z35benchForIC2VW4LoopWithReductionTC32RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC2VW4LoopWithReductionTC32RN9benchmark5StateE,@function
_Z35benchForIC2VW4LoopWithReductionTC32RN9benchmark5StateE: # @_Z35benchForIC2VW4LoopWithReductionTC32RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB225_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB225_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB225_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB225_3
.LBB225_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end225:
	.size	_Z35benchForIC2VW4LoopWithReductionTC32RN9benchmark5StateE, .Lfunc_end225-_Z35benchForIC2VW4LoopWithReductionTC32RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC4VW4LoopWithReductionTC32RN9benchmark5StateE # -- Begin function _Z35benchForIC4VW4LoopWithReductionTC32RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC4VW4LoopWithReductionTC32RN9benchmark5StateE,@function
_Z35benchForIC4VW4LoopWithReductionTC32RN9benchmark5StateE: # @_Z35benchForIC4VW4LoopWithReductionTC32RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB226_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB226_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB226_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB226_3
.LBB226_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end226:
	.size	_Z35benchForIC4VW4LoopWithReductionTC32RN9benchmark5StateE, .Lfunc_end226-_Z35benchForIC4VW4LoopWithReductionTC32RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC1VW1LoopWithReductionTC32RN9benchmark5StateE # -- Begin function _Z35benchForIC1VW1LoopWithReductionTC32RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC1VW1LoopWithReductionTC32RN9benchmark5StateE,@function
_Z35benchForIC1VW1LoopWithReductionTC32RN9benchmark5StateE: # @_Z35benchForIC1VW1LoopWithReductionTC32RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB227_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB227_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB227_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB227_3
.LBB227_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end227:
	.size	_Z35benchForIC1VW1LoopWithReductionTC32RN9benchmark5StateE, .Lfunc_end227-_Z35benchForIC1VW1LoopWithReductionTC32RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC2VW1LoopWithReductionTC32RN9benchmark5StateE # -- Begin function _Z35benchForIC2VW1LoopWithReductionTC32RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC2VW1LoopWithReductionTC32RN9benchmark5StateE,@function
_Z35benchForIC2VW1LoopWithReductionTC32RN9benchmark5StateE: # @_Z35benchForIC2VW1LoopWithReductionTC32RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB228_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB228_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB228_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB228_3
.LBB228_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end228:
	.size	_Z35benchForIC2VW1LoopWithReductionTC32RN9benchmark5StateE, .Lfunc_end228-_Z35benchForIC2VW1LoopWithReductionTC32RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC4VW1LoopWithReductionTC32RN9benchmark5StateE # -- Begin function _Z35benchForIC4VW1LoopWithReductionTC32RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC4VW1LoopWithReductionTC32RN9benchmark5StateE,@function
_Z35benchForIC4VW1LoopWithReductionTC32RN9benchmark5StateE: # @_Z35benchForIC4VW1LoopWithReductionTC32RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB229_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB229_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB229_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB229_3
.LBB229_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end229:
	.size	_Z35benchForIC4VW1LoopWithReductionTC32RN9benchmark5StateE, .Lfunc_end229-_Z35benchForIC4VW1LoopWithReductionTC32RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z26benchAutoVecForBigLoopTC32RN9benchmark5StateE # -- Begin function _Z26benchAutoVecForBigLoopTC32RN9benchmark5StateE
	.p2align	5
	.type	_Z26benchAutoVecForBigLoopTC32RN9benchmark5StateE,@function
_Z26benchAutoVecForBigLoopTC32RN9benchmark5StateE: # @_Z26benchAutoVecForBigLoopTC32RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB230_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB230_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB230_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB230_3
.LBB230_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end230:
	.size	_Z26benchAutoVecForBigLoopTC32RN9benchmark5StateE, .Lfunc_end230-_Z26benchAutoVecForBigLoopTC32RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchForIC1VW4BigLoopTC32RN9benchmark5StateE # -- Begin function _Z25benchForIC1VW4BigLoopTC32RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchForIC1VW4BigLoopTC32RN9benchmark5StateE,@function
_Z25benchForIC1VW4BigLoopTC32RN9benchmark5StateE: # @_Z25benchForIC1VW4BigLoopTC32RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB231_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB231_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB231_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB231_3
.LBB231_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end231:
	.size	_Z25benchForIC1VW4BigLoopTC32RN9benchmark5StateE, .Lfunc_end231-_Z25benchForIC1VW4BigLoopTC32RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchForIC2VW4BigLoopTC32RN9benchmark5StateE # -- Begin function _Z25benchForIC2VW4BigLoopTC32RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchForIC2VW4BigLoopTC32RN9benchmark5StateE,@function
_Z25benchForIC2VW4BigLoopTC32RN9benchmark5StateE: # @_Z25benchForIC2VW4BigLoopTC32RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB232_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB232_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB232_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB232_3
.LBB232_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end232:
	.size	_Z25benchForIC2VW4BigLoopTC32RN9benchmark5StateE, .Lfunc_end232-_Z25benchForIC2VW4BigLoopTC32RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchForIC4VW4BigLoopTC32RN9benchmark5StateE # -- Begin function _Z25benchForIC4VW4BigLoopTC32RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchForIC4VW4BigLoopTC32RN9benchmark5StateE,@function
_Z25benchForIC4VW4BigLoopTC32RN9benchmark5StateE: # @_Z25benchForIC4VW4BigLoopTC32RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB233_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB233_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB233_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB233_3
.LBB233_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end233:
	.size	_Z25benchForIC4VW4BigLoopTC32RN9benchmark5StateE, .Lfunc_end233-_Z25benchForIC4VW4BigLoopTC32RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z39benchForBigLoopWithReductionAutoVecTC32RN9benchmark5StateE # -- Begin function _Z39benchForBigLoopWithReductionAutoVecTC32RN9benchmark5StateE
	.p2align	5
	.type	_Z39benchForBigLoopWithReductionAutoVecTC32RN9benchmark5StateE,@function
_Z39benchForBigLoopWithReductionAutoVecTC32RN9benchmark5StateE: # @_Z39benchForBigLoopWithReductionAutoVecTC32RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB234_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB234_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB234_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_ZL27bigLoopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB234_3
.LBB234_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end234:
	.size	_Z39benchForBigLoopWithReductionAutoVecTC32RN9benchmark5StateE, .Lfunc_end234-_Z39benchForBigLoopWithReductionAutoVecTC32RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC1VW4BigLoopWithReductionTC32RN9benchmark5StateE # -- Begin function _Z38benchForIC1VW4BigLoopWithReductionTC32RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC1VW4BigLoopWithReductionTC32RN9benchmark5StateE,@function
_Z38benchForIC1VW4BigLoopWithReductionTC32RN9benchmark5StateE: # @_Z38benchForIC1VW4BigLoopWithReductionTC32RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB235_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB235_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB235_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB235_3
.LBB235_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end235:
	.size	_Z38benchForIC1VW4BigLoopWithReductionTC32RN9benchmark5StateE, .Lfunc_end235-_Z38benchForIC1VW4BigLoopWithReductionTC32RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC2VW4BigLoopWithReductionTC32RN9benchmark5StateE # -- Begin function _Z38benchForIC2VW4BigLoopWithReductionTC32RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC2VW4BigLoopWithReductionTC32RN9benchmark5StateE,@function
_Z38benchForIC2VW4BigLoopWithReductionTC32RN9benchmark5StateE: # @_Z38benchForIC2VW4BigLoopWithReductionTC32RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB236_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB236_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB236_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB236_3
.LBB236_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end236:
	.size	_Z38benchForIC2VW4BigLoopWithReductionTC32RN9benchmark5StateE, .Lfunc_end236-_Z38benchForIC2VW4BigLoopWithReductionTC32RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC4VW4BigLoopWithReductionTC32RN9benchmark5StateE # -- Begin function _Z38benchForIC4VW4BigLoopWithReductionTC32RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC4VW4BigLoopWithReductionTC32RN9benchmark5StateE,@function
_Z38benchForIC4VW4BigLoopWithReductionTC32RN9benchmark5StateE: # @_Z38benchForIC4VW4BigLoopWithReductionTC32RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB237_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB237_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB237_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB237_3
.LBB237_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end237:
	.size	_Z38benchForIC4VW4BigLoopWithReductionTC32RN9benchmark5StateE, .Lfunc_end237-_Z38benchForIC4VW4BigLoopWithReductionTC32RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC1VW1BigLoopWithReductionTC32RN9benchmark5StateE # -- Begin function _Z38benchForIC1VW1BigLoopWithReductionTC32RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC1VW1BigLoopWithReductionTC32RN9benchmark5StateE,@function
_Z38benchForIC1VW1BigLoopWithReductionTC32RN9benchmark5StateE: # @_Z38benchForIC1VW1BigLoopWithReductionTC32RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB238_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB238_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB238_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB238_3
.LBB238_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end238:
	.size	_Z38benchForIC1VW1BigLoopWithReductionTC32RN9benchmark5StateE, .Lfunc_end238-_Z38benchForIC1VW1BigLoopWithReductionTC32RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC2VW1BigLoopWithReductionTC32RN9benchmark5StateE # -- Begin function _Z38benchForIC2VW1BigLoopWithReductionTC32RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC2VW1BigLoopWithReductionTC32RN9benchmark5StateE,@function
_Z38benchForIC2VW1BigLoopWithReductionTC32RN9benchmark5StateE: # @_Z38benchForIC2VW1BigLoopWithReductionTC32RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB239_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB239_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB239_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB239_3
.LBB239_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end239:
	.size	_Z38benchForIC2VW1BigLoopWithReductionTC32RN9benchmark5StateE, .Lfunc_end239-_Z38benchForIC2VW1BigLoopWithReductionTC32RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC4VW1BigLoopWithReductionTC32RN9benchmark5StateE # -- Begin function _Z38benchForIC4VW1BigLoopWithReductionTC32RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC4VW1BigLoopWithReductionTC32RN9benchmark5StateE,@function
_Z38benchForIC4VW1BigLoopWithReductionTC32RN9benchmark5StateE: # @_Z38benchForIC4VW1BigLoopWithReductionTC32RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB240_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB240_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB240_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB240_3
.LBB240_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end240:
	.size	_Z38benchForIC4VW1BigLoopWithReductionTC32RN9benchmark5StateE, .Lfunc_end240-_Z38benchForIC4VW1BigLoopWithReductionTC32RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z23benchAutoVecForLoopTC63RN9benchmark5StateE # -- Begin function _Z23benchAutoVecForLoopTC63RN9benchmark5StateE
	.p2align	5
	.type	_Z23benchAutoVecForLoopTC63RN9benchmark5StateE,@function
_Z23benchAutoVecForLoopTC63RN9benchmark5StateE: # @_Z23benchAutoVecForLoopTC63RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB241_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB241_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB241_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 63
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB241_3
.LBB241_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end241:
	.size	_Z23benchAutoVecForLoopTC63RN9benchmark5StateE, .Lfunc_end241-_Z23benchAutoVecForLoopTC63RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z22benchForIC1VW4LoopTC63RN9benchmark5StateE # -- Begin function _Z22benchForIC1VW4LoopTC63RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchForIC1VW4LoopTC63RN9benchmark5StateE,@function
_Z22benchForIC1VW4LoopTC63RN9benchmark5StateE: # @_Z22benchForIC1VW4LoopTC63RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB242_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB242_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB242_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 63
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB242_3
.LBB242_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end242:
	.size	_Z22benchForIC1VW4LoopTC63RN9benchmark5StateE, .Lfunc_end242-_Z22benchForIC1VW4LoopTC63RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z22benchForIC2VW4LoopTC63RN9benchmark5StateE # -- Begin function _Z22benchForIC2VW4LoopTC63RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchForIC2VW4LoopTC63RN9benchmark5StateE,@function
_Z22benchForIC2VW4LoopTC63RN9benchmark5StateE: # @_Z22benchForIC2VW4LoopTC63RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB243_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB243_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB243_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 63
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB243_3
.LBB243_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end243:
	.size	_Z22benchForIC2VW4LoopTC63RN9benchmark5StateE, .Lfunc_end243-_Z22benchForIC2VW4LoopTC63RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z22benchForIC4VW4LoopTC63RN9benchmark5StateE # -- Begin function _Z22benchForIC4VW4LoopTC63RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchForIC4VW4LoopTC63RN9benchmark5StateE,@function
_Z22benchForIC4VW4LoopTC63RN9benchmark5StateE: # @_Z22benchForIC4VW4LoopTC63RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB244_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB244_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB244_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 63
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB244_3
.LBB244_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end244:
	.size	_Z22benchForIC4VW4LoopTC63RN9benchmark5StateE, .Lfunc_end244-_Z22benchForIC4VW4LoopTC63RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z36benchForLoopWithReductionAutoVecTC63RN9benchmark5StateE # -- Begin function _Z36benchForLoopWithReductionAutoVecTC63RN9benchmark5StateE
	.p2align	5
	.type	_Z36benchForLoopWithReductionAutoVecTC63RN9benchmark5StateE,@function
_Z36benchForLoopWithReductionAutoVecTC63RN9benchmark5StateE: # @_Z36benchForLoopWithReductionAutoVecTC63RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB245_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB245_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB245_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 63
	pcaddu18i	$ra, %call36(_ZL24loopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB245_3
.LBB245_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end245:
	.size	_Z36benchForLoopWithReductionAutoVecTC63RN9benchmark5StateE, .Lfunc_end245-_Z36benchForLoopWithReductionAutoVecTC63RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC1VW4LoopWithReductionTC63RN9benchmark5StateE # -- Begin function _Z35benchForIC1VW4LoopWithReductionTC63RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC1VW4LoopWithReductionTC63RN9benchmark5StateE,@function
_Z35benchForIC1VW4LoopWithReductionTC63RN9benchmark5StateE: # @_Z35benchForIC1VW4LoopWithReductionTC63RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB246_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB246_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB246_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 63
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB246_3
.LBB246_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end246:
	.size	_Z35benchForIC1VW4LoopWithReductionTC63RN9benchmark5StateE, .Lfunc_end246-_Z35benchForIC1VW4LoopWithReductionTC63RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC2VW4LoopWithReductionTC63RN9benchmark5StateE # -- Begin function _Z35benchForIC2VW4LoopWithReductionTC63RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC2VW4LoopWithReductionTC63RN9benchmark5StateE,@function
_Z35benchForIC2VW4LoopWithReductionTC63RN9benchmark5StateE: # @_Z35benchForIC2VW4LoopWithReductionTC63RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB247_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB247_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB247_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 63
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB247_3
.LBB247_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end247:
	.size	_Z35benchForIC2VW4LoopWithReductionTC63RN9benchmark5StateE, .Lfunc_end247-_Z35benchForIC2VW4LoopWithReductionTC63RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC4VW4LoopWithReductionTC63RN9benchmark5StateE # -- Begin function _Z35benchForIC4VW4LoopWithReductionTC63RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC4VW4LoopWithReductionTC63RN9benchmark5StateE,@function
_Z35benchForIC4VW4LoopWithReductionTC63RN9benchmark5StateE: # @_Z35benchForIC4VW4LoopWithReductionTC63RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB248_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB248_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB248_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 63
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB248_3
.LBB248_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end248:
	.size	_Z35benchForIC4VW4LoopWithReductionTC63RN9benchmark5StateE, .Lfunc_end248-_Z35benchForIC4VW4LoopWithReductionTC63RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC1VW1LoopWithReductionTC63RN9benchmark5StateE # -- Begin function _Z35benchForIC1VW1LoopWithReductionTC63RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC1VW1LoopWithReductionTC63RN9benchmark5StateE,@function
_Z35benchForIC1VW1LoopWithReductionTC63RN9benchmark5StateE: # @_Z35benchForIC1VW1LoopWithReductionTC63RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB249_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB249_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB249_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 63
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB249_3
.LBB249_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end249:
	.size	_Z35benchForIC1VW1LoopWithReductionTC63RN9benchmark5StateE, .Lfunc_end249-_Z35benchForIC1VW1LoopWithReductionTC63RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC2VW1LoopWithReductionTC63RN9benchmark5StateE # -- Begin function _Z35benchForIC2VW1LoopWithReductionTC63RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC2VW1LoopWithReductionTC63RN9benchmark5StateE,@function
_Z35benchForIC2VW1LoopWithReductionTC63RN9benchmark5StateE: # @_Z35benchForIC2VW1LoopWithReductionTC63RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB250_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB250_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB250_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 63
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB250_3
.LBB250_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end250:
	.size	_Z35benchForIC2VW1LoopWithReductionTC63RN9benchmark5StateE, .Lfunc_end250-_Z35benchForIC2VW1LoopWithReductionTC63RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC4VW1LoopWithReductionTC63RN9benchmark5StateE # -- Begin function _Z35benchForIC4VW1LoopWithReductionTC63RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC4VW1LoopWithReductionTC63RN9benchmark5StateE,@function
_Z35benchForIC4VW1LoopWithReductionTC63RN9benchmark5StateE: # @_Z35benchForIC4VW1LoopWithReductionTC63RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB251_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB251_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB251_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 63
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB251_3
.LBB251_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end251:
	.size	_Z35benchForIC4VW1LoopWithReductionTC63RN9benchmark5StateE, .Lfunc_end251-_Z35benchForIC4VW1LoopWithReductionTC63RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z26benchAutoVecForBigLoopTC63RN9benchmark5StateE # -- Begin function _Z26benchAutoVecForBigLoopTC63RN9benchmark5StateE
	.p2align	5
	.type	_Z26benchAutoVecForBigLoopTC63RN9benchmark5StateE,@function
_Z26benchAutoVecForBigLoopTC63RN9benchmark5StateE: # @_Z26benchAutoVecForBigLoopTC63RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB252_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB252_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB252_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 63
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB252_3
.LBB252_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end252:
	.size	_Z26benchAutoVecForBigLoopTC63RN9benchmark5StateE, .Lfunc_end252-_Z26benchAutoVecForBigLoopTC63RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchForIC1VW4BigLoopTC63RN9benchmark5StateE # -- Begin function _Z25benchForIC1VW4BigLoopTC63RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchForIC1VW4BigLoopTC63RN9benchmark5StateE,@function
_Z25benchForIC1VW4BigLoopTC63RN9benchmark5StateE: # @_Z25benchForIC1VW4BigLoopTC63RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB253_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB253_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB253_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 63
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB253_3
.LBB253_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end253:
	.size	_Z25benchForIC1VW4BigLoopTC63RN9benchmark5StateE, .Lfunc_end253-_Z25benchForIC1VW4BigLoopTC63RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchForIC2VW4BigLoopTC63RN9benchmark5StateE # -- Begin function _Z25benchForIC2VW4BigLoopTC63RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchForIC2VW4BigLoopTC63RN9benchmark5StateE,@function
_Z25benchForIC2VW4BigLoopTC63RN9benchmark5StateE: # @_Z25benchForIC2VW4BigLoopTC63RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB254_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB254_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB254_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 63
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB254_3
.LBB254_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end254:
	.size	_Z25benchForIC2VW4BigLoopTC63RN9benchmark5StateE, .Lfunc_end254-_Z25benchForIC2VW4BigLoopTC63RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchForIC4VW4BigLoopTC63RN9benchmark5StateE # -- Begin function _Z25benchForIC4VW4BigLoopTC63RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchForIC4VW4BigLoopTC63RN9benchmark5StateE,@function
_Z25benchForIC4VW4BigLoopTC63RN9benchmark5StateE: # @_Z25benchForIC4VW4BigLoopTC63RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB255_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB255_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB255_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 63
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB255_3
.LBB255_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end255:
	.size	_Z25benchForIC4VW4BigLoopTC63RN9benchmark5StateE, .Lfunc_end255-_Z25benchForIC4VW4BigLoopTC63RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z39benchForBigLoopWithReductionAutoVecTC63RN9benchmark5StateE # -- Begin function _Z39benchForBigLoopWithReductionAutoVecTC63RN9benchmark5StateE
	.p2align	5
	.type	_Z39benchForBigLoopWithReductionAutoVecTC63RN9benchmark5StateE,@function
_Z39benchForBigLoopWithReductionAutoVecTC63RN9benchmark5StateE: # @_Z39benchForBigLoopWithReductionAutoVecTC63RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB256_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB256_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB256_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 63
	pcaddu18i	$ra, %call36(_ZL27bigLoopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB256_3
.LBB256_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end256:
	.size	_Z39benchForBigLoopWithReductionAutoVecTC63RN9benchmark5StateE, .Lfunc_end256-_Z39benchForBigLoopWithReductionAutoVecTC63RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC1VW4BigLoopWithReductionTC63RN9benchmark5StateE # -- Begin function _Z38benchForIC1VW4BigLoopWithReductionTC63RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC1VW4BigLoopWithReductionTC63RN9benchmark5StateE,@function
_Z38benchForIC1VW4BigLoopWithReductionTC63RN9benchmark5StateE: # @_Z38benchForIC1VW4BigLoopWithReductionTC63RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB257_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB257_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB257_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 63
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB257_3
.LBB257_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end257:
	.size	_Z38benchForIC1VW4BigLoopWithReductionTC63RN9benchmark5StateE, .Lfunc_end257-_Z38benchForIC1VW4BigLoopWithReductionTC63RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC2VW4BigLoopWithReductionTC63RN9benchmark5StateE # -- Begin function _Z38benchForIC2VW4BigLoopWithReductionTC63RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC2VW4BigLoopWithReductionTC63RN9benchmark5StateE,@function
_Z38benchForIC2VW4BigLoopWithReductionTC63RN9benchmark5StateE: # @_Z38benchForIC2VW4BigLoopWithReductionTC63RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB258_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB258_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB258_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 63
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB258_3
.LBB258_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end258:
	.size	_Z38benchForIC2VW4BigLoopWithReductionTC63RN9benchmark5StateE, .Lfunc_end258-_Z38benchForIC2VW4BigLoopWithReductionTC63RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC4VW4BigLoopWithReductionTC63RN9benchmark5StateE # -- Begin function _Z38benchForIC4VW4BigLoopWithReductionTC63RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC4VW4BigLoopWithReductionTC63RN9benchmark5StateE,@function
_Z38benchForIC4VW4BigLoopWithReductionTC63RN9benchmark5StateE: # @_Z38benchForIC4VW4BigLoopWithReductionTC63RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB259_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB259_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB259_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 63
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB259_3
.LBB259_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end259:
	.size	_Z38benchForIC4VW4BigLoopWithReductionTC63RN9benchmark5StateE, .Lfunc_end259-_Z38benchForIC4VW4BigLoopWithReductionTC63RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC1VW1BigLoopWithReductionTC63RN9benchmark5StateE # -- Begin function _Z38benchForIC1VW1BigLoopWithReductionTC63RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC1VW1BigLoopWithReductionTC63RN9benchmark5StateE,@function
_Z38benchForIC1VW1BigLoopWithReductionTC63RN9benchmark5StateE: # @_Z38benchForIC1VW1BigLoopWithReductionTC63RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB260_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB260_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB260_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 63
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB260_3
.LBB260_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end260:
	.size	_Z38benchForIC1VW1BigLoopWithReductionTC63RN9benchmark5StateE, .Lfunc_end260-_Z38benchForIC1VW1BigLoopWithReductionTC63RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC2VW1BigLoopWithReductionTC63RN9benchmark5StateE # -- Begin function _Z38benchForIC2VW1BigLoopWithReductionTC63RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC2VW1BigLoopWithReductionTC63RN9benchmark5StateE,@function
_Z38benchForIC2VW1BigLoopWithReductionTC63RN9benchmark5StateE: # @_Z38benchForIC2VW1BigLoopWithReductionTC63RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB261_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB261_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB261_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 63
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB261_3
.LBB261_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end261:
	.size	_Z38benchForIC2VW1BigLoopWithReductionTC63RN9benchmark5StateE, .Lfunc_end261-_Z38benchForIC2VW1BigLoopWithReductionTC63RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC4VW1BigLoopWithReductionTC63RN9benchmark5StateE # -- Begin function _Z38benchForIC4VW1BigLoopWithReductionTC63RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC4VW1BigLoopWithReductionTC63RN9benchmark5StateE,@function
_Z38benchForIC4VW1BigLoopWithReductionTC63RN9benchmark5StateE: # @_Z38benchForIC4VW1BigLoopWithReductionTC63RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB262_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB262_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB262_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 63
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB262_3
.LBB262_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end262:
	.size	_Z38benchForIC4VW1BigLoopWithReductionTC63RN9benchmark5StateE, .Lfunc_end262-_Z38benchForIC4VW1BigLoopWithReductionTC63RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z23benchAutoVecForLoopTC64RN9benchmark5StateE # -- Begin function _Z23benchAutoVecForLoopTC64RN9benchmark5StateE
	.p2align	5
	.type	_Z23benchAutoVecForLoopTC64RN9benchmark5StateE,@function
_Z23benchAutoVecForLoopTC64RN9benchmark5StateE: # @_Z23benchAutoVecForLoopTC64RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB263_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB263_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB263_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 64
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB263_3
.LBB263_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end263:
	.size	_Z23benchAutoVecForLoopTC64RN9benchmark5StateE, .Lfunc_end263-_Z23benchAutoVecForLoopTC64RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z22benchForIC1VW4LoopTC64RN9benchmark5StateE # -- Begin function _Z22benchForIC1VW4LoopTC64RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchForIC1VW4LoopTC64RN9benchmark5StateE,@function
_Z22benchForIC1VW4LoopTC64RN9benchmark5StateE: # @_Z22benchForIC1VW4LoopTC64RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB264_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB264_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB264_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 64
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB264_3
.LBB264_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end264:
	.size	_Z22benchForIC1VW4LoopTC64RN9benchmark5StateE, .Lfunc_end264-_Z22benchForIC1VW4LoopTC64RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z22benchForIC2VW4LoopTC64RN9benchmark5StateE # -- Begin function _Z22benchForIC2VW4LoopTC64RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchForIC2VW4LoopTC64RN9benchmark5StateE,@function
_Z22benchForIC2VW4LoopTC64RN9benchmark5StateE: # @_Z22benchForIC2VW4LoopTC64RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB265_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB265_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB265_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 64
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB265_3
.LBB265_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end265:
	.size	_Z22benchForIC2VW4LoopTC64RN9benchmark5StateE, .Lfunc_end265-_Z22benchForIC2VW4LoopTC64RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z22benchForIC4VW4LoopTC64RN9benchmark5StateE # -- Begin function _Z22benchForIC4VW4LoopTC64RN9benchmark5StateE
	.p2align	5
	.type	_Z22benchForIC4VW4LoopTC64RN9benchmark5StateE,@function
_Z22benchForIC4VW4LoopTC64RN9benchmark5StateE: # @_Z22benchForIC4VW4LoopTC64RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB266_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB266_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB266_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 64
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB266_3
.LBB266_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end266:
	.size	_Z22benchForIC4VW4LoopTC64RN9benchmark5StateE, .Lfunc_end266-_Z22benchForIC4VW4LoopTC64RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z36benchForLoopWithReductionAutoVecTC64RN9benchmark5StateE # -- Begin function _Z36benchForLoopWithReductionAutoVecTC64RN9benchmark5StateE
	.p2align	5
	.type	_Z36benchForLoopWithReductionAutoVecTC64RN9benchmark5StateE,@function
_Z36benchForLoopWithReductionAutoVecTC64RN9benchmark5StateE: # @_Z36benchForLoopWithReductionAutoVecTC64RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB267_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB267_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB267_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 64
	pcaddu18i	$ra, %call36(_ZL24loopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB267_3
.LBB267_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end267:
	.size	_Z36benchForLoopWithReductionAutoVecTC64RN9benchmark5StateE, .Lfunc_end267-_Z36benchForLoopWithReductionAutoVecTC64RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC1VW4LoopWithReductionTC64RN9benchmark5StateE # -- Begin function _Z35benchForIC1VW4LoopWithReductionTC64RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC1VW4LoopWithReductionTC64RN9benchmark5StateE,@function
_Z35benchForIC1VW4LoopWithReductionTC64RN9benchmark5StateE: # @_Z35benchForIC1VW4LoopWithReductionTC64RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB268_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB268_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB268_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 64
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB268_3
.LBB268_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end268:
	.size	_Z35benchForIC1VW4LoopWithReductionTC64RN9benchmark5StateE, .Lfunc_end268-_Z35benchForIC1VW4LoopWithReductionTC64RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC2VW4LoopWithReductionTC64RN9benchmark5StateE # -- Begin function _Z35benchForIC2VW4LoopWithReductionTC64RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC2VW4LoopWithReductionTC64RN9benchmark5StateE,@function
_Z35benchForIC2VW4LoopWithReductionTC64RN9benchmark5StateE: # @_Z35benchForIC2VW4LoopWithReductionTC64RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB269_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB269_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB269_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 64
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB269_3
.LBB269_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end269:
	.size	_Z35benchForIC2VW4LoopWithReductionTC64RN9benchmark5StateE, .Lfunc_end269-_Z35benchForIC2VW4LoopWithReductionTC64RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC4VW4LoopWithReductionTC64RN9benchmark5StateE # -- Begin function _Z35benchForIC4VW4LoopWithReductionTC64RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC4VW4LoopWithReductionTC64RN9benchmark5StateE,@function
_Z35benchForIC4VW4LoopWithReductionTC64RN9benchmark5StateE: # @_Z35benchForIC4VW4LoopWithReductionTC64RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB270_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB270_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB270_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 64
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB270_3
.LBB270_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end270:
	.size	_Z35benchForIC4VW4LoopWithReductionTC64RN9benchmark5StateE, .Lfunc_end270-_Z35benchForIC4VW4LoopWithReductionTC64RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC1VW1LoopWithReductionTC64RN9benchmark5StateE # -- Begin function _Z35benchForIC1VW1LoopWithReductionTC64RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC1VW1LoopWithReductionTC64RN9benchmark5StateE,@function
_Z35benchForIC1VW1LoopWithReductionTC64RN9benchmark5StateE: # @_Z35benchForIC1VW1LoopWithReductionTC64RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB271_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB271_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB271_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 64
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB271_3
.LBB271_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end271:
	.size	_Z35benchForIC1VW1LoopWithReductionTC64RN9benchmark5StateE, .Lfunc_end271-_Z35benchForIC1VW1LoopWithReductionTC64RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC2VW1LoopWithReductionTC64RN9benchmark5StateE # -- Begin function _Z35benchForIC2VW1LoopWithReductionTC64RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC2VW1LoopWithReductionTC64RN9benchmark5StateE,@function
_Z35benchForIC2VW1LoopWithReductionTC64RN9benchmark5StateE: # @_Z35benchForIC2VW1LoopWithReductionTC64RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB272_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB272_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB272_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 64
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB272_3
.LBB272_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end272:
	.size	_Z35benchForIC2VW1LoopWithReductionTC64RN9benchmark5StateE, .Lfunc_end272-_Z35benchForIC2VW1LoopWithReductionTC64RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z35benchForIC4VW1LoopWithReductionTC64RN9benchmark5StateE # -- Begin function _Z35benchForIC4VW1LoopWithReductionTC64RN9benchmark5StateE
	.p2align	5
	.type	_Z35benchForIC4VW1LoopWithReductionTC64RN9benchmark5StateE,@function
_Z35benchForIC4VW1LoopWithReductionTC64RN9benchmark5StateE: # @_Z35benchForIC4VW1LoopWithReductionTC64RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB273_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB273_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB273_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 64
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB273_3
.LBB273_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end273:
	.size	_Z35benchForIC4VW1LoopWithReductionTC64RN9benchmark5StateE, .Lfunc_end273-_Z35benchForIC4VW1LoopWithReductionTC64RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z26benchAutoVecForBigLoopTC64RN9benchmark5StateE # -- Begin function _Z26benchAutoVecForBigLoopTC64RN9benchmark5StateE
	.p2align	5
	.type	_Z26benchAutoVecForBigLoopTC64RN9benchmark5StateE,@function
_Z26benchAutoVecForBigLoopTC64RN9benchmark5StateE: # @_Z26benchAutoVecForBigLoopTC64RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB274_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB274_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB274_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 64
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB274_3
.LBB274_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end274:
	.size	_Z26benchAutoVecForBigLoopTC64RN9benchmark5StateE, .Lfunc_end274-_Z26benchAutoVecForBigLoopTC64RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchForIC1VW4BigLoopTC64RN9benchmark5StateE # -- Begin function _Z25benchForIC1VW4BigLoopTC64RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchForIC1VW4BigLoopTC64RN9benchmark5StateE,@function
_Z25benchForIC1VW4BigLoopTC64RN9benchmark5StateE: # @_Z25benchForIC1VW4BigLoopTC64RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB275_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB275_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB275_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 64
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB275_3
.LBB275_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end275:
	.size	_Z25benchForIC1VW4BigLoopTC64RN9benchmark5StateE, .Lfunc_end275-_Z25benchForIC1VW4BigLoopTC64RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchForIC2VW4BigLoopTC64RN9benchmark5StateE # -- Begin function _Z25benchForIC2VW4BigLoopTC64RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchForIC2VW4BigLoopTC64RN9benchmark5StateE,@function
_Z25benchForIC2VW4BigLoopTC64RN9benchmark5StateE: # @_Z25benchForIC2VW4BigLoopTC64RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB276_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB276_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB276_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 64
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB276_3
.LBB276_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end276:
	.size	_Z25benchForIC2VW4BigLoopTC64RN9benchmark5StateE, .Lfunc_end276-_Z25benchForIC2VW4BigLoopTC64RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z25benchForIC4VW4BigLoopTC64RN9benchmark5StateE # -- Begin function _Z25benchForIC4VW4BigLoopTC64RN9benchmark5StateE
	.p2align	5
	.type	_Z25benchForIC4VW4BigLoopTC64RN9benchmark5StateE,@function
_Z25benchForIC4VW4BigLoopTC64RN9benchmark5StateE: # @_Z25benchForIC4VW4BigLoopTC64RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB277_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB277_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB277_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 64
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB277_3
.LBB277_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end277:
	.size	_Z25benchForIC4VW4BigLoopTC64RN9benchmark5StateE, .Lfunc_end277-_Z25benchForIC4VW4BigLoopTC64RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z39benchForBigLoopWithReductionAutoVecTC64RN9benchmark5StateE # -- Begin function _Z39benchForBigLoopWithReductionAutoVecTC64RN9benchmark5StateE
	.p2align	5
	.type	_Z39benchForBigLoopWithReductionAutoVecTC64RN9benchmark5StateE,@function
_Z39benchForBigLoopWithReductionAutoVecTC64RN9benchmark5StateE: # @_Z39benchForBigLoopWithReductionAutoVecTC64RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB278_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB278_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB278_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 64
	pcaddu18i	$ra, %call36(_ZL27bigLoopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB278_3
.LBB278_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end278:
	.size	_Z39benchForBigLoopWithReductionAutoVecTC64RN9benchmark5StateE, .Lfunc_end278-_Z39benchForBigLoopWithReductionAutoVecTC64RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC1VW4BigLoopWithReductionTC64RN9benchmark5StateE # -- Begin function _Z38benchForIC1VW4BigLoopWithReductionTC64RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC1VW4BigLoopWithReductionTC64RN9benchmark5StateE,@function
_Z38benchForIC1VW4BigLoopWithReductionTC64RN9benchmark5StateE: # @_Z38benchForIC1VW4BigLoopWithReductionTC64RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB279_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB279_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB279_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 64
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB279_3
.LBB279_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end279:
	.size	_Z38benchForIC1VW4BigLoopWithReductionTC64RN9benchmark5StateE, .Lfunc_end279-_Z38benchForIC1VW4BigLoopWithReductionTC64RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC2VW4BigLoopWithReductionTC64RN9benchmark5StateE # -- Begin function _Z38benchForIC2VW4BigLoopWithReductionTC64RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC2VW4BigLoopWithReductionTC64RN9benchmark5StateE,@function
_Z38benchForIC2VW4BigLoopWithReductionTC64RN9benchmark5StateE: # @_Z38benchForIC2VW4BigLoopWithReductionTC64RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB280_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB280_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB280_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 64
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB280_3
.LBB280_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end280:
	.size	_Z38benchForIC2VW4BigLoopWithReductionTC64RN9benchmark5StateE, .Lfunc_end280-_Z38benchForIC2VW4BigLoopWithReductionTC64RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC4VW4BigLoopWithReductionTC64RN9benchmark5StateE # -- Begin function _Z38benchForIC4VW4BigLoopWithReductionTC64RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC4VW4BigLoopWithReductionTC64RN9benchmark5StateE,@function
_Z38benchForIC4VW4BigLoopWithReductionTC64RN9benchmark5StateE: # @_Z38benchForIC4VW4BigLoopWithReductionTC64RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB281_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB281_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB281_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 64
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB281_3
.LBB281_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end281:
	.size	_Z38benchForIC4VW4BigLoopWithReductionTC64RN9benchmark5StateE, .Lfunc_end281-_Z38benchForIC4VW4BigLoopWithReductionTC64RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC1VW1BigLoopWithReductionTC64RN9benchmark5StateE # -- Begin function _Z38benchForIC1VW1BigLoopWithReductionTC64RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC1VW1BigLoopWithReductionTC64RN9benchmark5StateE,@function
_Z38benchForIC1VW1BigLoopWithReductionTC64RN9benchmark5StateE: # @_Z38benchForIC1VW1BigLoopWithReductionTC64RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB282_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB282_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB282_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 64
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB282_3
.LBB282_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end282:
	.size	_Z38benchForIC1VW1BigLoopWithReductionTC64RN9benchmark5StateE, .Lfunc_end282-_Z38benchForIC1VW1BigLoopWithReductionTC64RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC2VW1BigLoopWithReductionTC64RN9benchmark5StateE # -- Begin function _Z38benchForIC2VW1BigLoopWithReductionTC64RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC2VW1BigLoopWithReductionTC64RN9benchmark5StateE,@function
_Z38benchForIC2VW1BigLoopWithReductionTC64RN9benchmark5StateE: # @_Z38benchForIC2VW1BigLoopWithReductionTC64RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB283_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB283_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB283_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 64
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB283_3
.LBB283_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end283:
	.size	_Z38benchForIC2VW1BigLoopWithReductionTC64RN9benchmark5StateE, .Lfunc_end283-_Z38benchForIC2VW1BigLoopWithReductionTC64RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z38benchForIC4VW1BigLoopWithReductionTC64RN9benchmark5StateE # -- Begin function _Z38benchForIC4VW1BigLoopWithReductionTC64RN9benchmark5StateE
	.p2align	5
	.type	_Z38benchForIC4VW1BigLoopWithReductionTC64RN9benchmark5StateE,@function
_Z38benchForIC4VW1BigLoopWithReductionTC64RN9benchmark5StateE: # @_Z38benchForIC4VW1BigLoopWithReductionTC64RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB284_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB284_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB284_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 64
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB284_3
.LBB284_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end284:
	.size	_Z38benchForIC4VW1BigLoopWithReductionTC64RN9benchmark5StateE, .Lfunc_end284-_Z38benchForIC4VW1BigLoopWithReductionTC64RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z24benchAutoVecForLoopTC127RN9benchmark5StateE # -- Begin function _Z24benchAutoVecForLoopTC127RN9benchmark5StateE
	.p2align	5
	.type	_Z24benchAutoVecForLoopTC127RN9benchmark5StateE,@function
_Z24benchAutoVecForLoopTC127RN9benchmark5StateE: # @_Z24benchAutoVecForLoopTC127RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB285_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB285_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB285_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 127
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB285_3
.LBB285_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end285:
	.size	_Z24benchAutoVecForLoopTC127RN9benchmark5StateE, .Lfunc_end285-_Z24benchAutoVecForLoopTC127RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z23benchForIC1VW4LoopTC127RN9benchmark5StateE # -- Begin function _Z23benchForIC1VW4LoopTC127RN9benchmark5StateE
	.p2align	5
	.type	_Z23benchForIC1VW4LoopTC127RN9benchmark5StateE,@function
_Z23benchForIC1VW4LoopTC127RN9benchmark5StateE: # @_Z23benchForIC1VW4LoopTC127RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB286_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB286_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB286_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 127
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB286_3
.LBB286_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end286:
	.size	_Z23benchForIC1VW4LoopTC127RN9benchmark5StateE, .Lfunc_end286-_Z23benchForIC1VW4LoopTC127RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z23benchForIC2VW4LoopTC127RN9benchmark5StateE # -- Begin function _Z23benchForIC2VW4LoopTC127RN9benchmark5StateE
	.p2align	5
	.type	_Z23benchForIC2VW4LoopTC127RN9benchmark5StateE,@function
_Z23benchForIC2VW4LoopTC127RN9benchmark5StateE: # @_Z23benchForIC2VW4LoopTC127RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB287_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB287_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB287_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 127
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB287_3
.LBB287_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end287:
	.size	_Z23benchForIC2VW4LoopTC127RN9benchmark5StateE, .Lfunc_end287-_Z23benchForIC2VW4LoopTC127RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z23benchForIC4VW4LoopTC127RN9benchmark5StateE # -- Begin function _Z23benchForIC4VW4LoopTC127RN9benchmark5StateE
	.p2align	5
	.type	_Z23benchForIC4VW4LoopTC127RN9benchmark5StateE,@function
_Z23benchForIC4VW4LoopTC127RN9benchmark5StateE: # @_Z23benchForIC4VW4LoopTC127RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB288_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB288_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB288_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 127
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB288_3
.LBB288_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end288:
	.size	_Z23benchForIC4VW4LoopTC127RN9benchmark5StateE, .Lfunc_end288-_Z23benchForIC4VW4LoopTC127RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForLoopWithReductionAutoVecTC127RN9benchmark5StateE # -- Begin function _Z37benchForLoopWithReductionAutoVecTC127RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForLoopWithReductionAutoVecTC127RN9benchmark5StateE,@function
_Z37benchForLoopWithReductionAutoVecTC127RN9benchmark5StateE: # @_Z37benchForLoopWithReductionAutoVecTC127RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB289_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB289_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB289_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 127
	pcaddu18i	$ra, %call36(_ZL24loopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB289_3
.LBB289_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end289:
	.size	_Z37benchForLoopWithReductionAutoVecTC127RN9benchmark5StateE, .Lfunc_end289-_Z37benchForLoopWithReductionAutoVecTC127RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z36benchForIC1VW4LoopWithReductionTC127RN9benchmark5StateE # -- Begin function _Z36benchForIC1VW4LoopWithReductionTC127RN9benchmark5StateE
	.p2align	5
	.type	_Z36benchForIC1VW4LoopWithReductionTC127RN9benchmark5StateE,@function
_Z36benchForIC1VW4LoopWithReductionTC127RN9benchmark5StateE: # @_Z36benchForIC1VW4LoopWithReductionTC127RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB290_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB290_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB290_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 127
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB290_3
.LBB290_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end290:
	.size	_Z36benchForIC1VW4LoopWithReductionTC127RN9benchmark5StateE, .Lfunc_end290-_Z36benchForIC1VW4LoopWithReductionTC127RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z36benchForIC2VW4LoopWithReductionTC127RN9benchmark5StateE # -- Begin function _Z36benchForIC2VW4LoopWithReductionTC127RN9benchmark5StateE
	.p2align	5
	.type	_Z36benchForIC2VW4LoopWithReductionTC127RN9benchmark5StateE,@function
_Z36benchForIC2VW4LoopWithReductionTC127RN9benchmark5StateE: # @_Z36benchForIC2VW4LoopWithReductionTC127RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB291_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB291_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB291_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 127
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB291_3
.LBB291_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end291:
	.size	_Z36benchForIC2VW4LoopWithReductionTC127RN9benchmark5StateE, .Lfunc_end291-_Z36benchForIC2VW4LoopWithReductionTC127RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z36benchForIC4VW4LoopWithReductionTC127RN9benchmark5StateE # -- Begin function _Z36benchForIC4VW4LoopWithReductionTC127RN9benchmark5StateE
	.p2align	5
	.type	_Z36benchForIC4VW4LoopWithReductionTC127RN9benchmark5StateE,@function
_Z36benchForIC4VW4LoopWithReductionTC127RN9benchmark5StateE: # @_Z36benchForIC4VW4LoopWithReductionTC127RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB292_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB292_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB292_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 127
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB292_3
.LBB292_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end292:
	.size	_Z36benchForIC4VW4LoopWithReductionTC127RN9benchmark5StateE, .Lfunc_end292-_Z36benchForIC4VW4LoopWithReductionTC127RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z36benchForIC1VW1LoopWithReductionTC127RN9benchmark5StateE # -- Begin function _Z36benchForIC1VW1LoopWithReductionTC127RN9benchmark5StateE
	.p2align	5
	.type	_Z36benchForIC1VW1LoopWithReductionTC127RN9benchmark5StateE,@function
_Z36benchForIC1VW1LoopWithReductionTC127RN9benchmark5StateE: # @_Z36benchForIC1VW1LoopWithReductionTC127RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB293_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB293_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB293_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 127
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB293_3
.LBB293_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end293:
	.size	_Z36benchForIC1VW1LoopWithReductionTC127RN9benchmark5StateE, .Lfunc_end293-_Z36benchForIC1VW1LoopWithReductionTC127RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z36benchForIC2VW1LoopWithReductionTC127RN9benchmark5StateE # -- Begin function _Z36benchForIC2VW1LoopWithReductionTC127RN9benchmark5StateE
	.p2align	5
	.type	_Z36benchForIC2VW1LoopWithReductionTC127RN9benchmark5StateE,@function
_Z36benchForIC2VW1LoopWithReductionTC127RN9benchmark5StateE: # @_Z36benchForIC2VW1LoopWithReductionTC127RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB294_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB294_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB294_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 127
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB294_3
.LBB294_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end294:
	.size	_Z36benchForIC2VW1LoopWithReductionTC127RN9benchmark5StateE, .Lfunc_end294-_Z36benchForIC2VW1LoopWithReductionTC127RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z36benchForIC4VW1LoopWithReductionTC127RN9benchmark5StateE # -- Begin function _Z36benchForIC4VW1LoopWithReductionTC127RN9benchmark5StateE
	.p2align	5
	.type	_Z36benchForIC4VW1LoopWithReductionTC127RN9benchmark5StateE,@function
_Z36benchForIC4VW1LoopWithReductionTC127RN9benchmark5StateE: # @_Z36benchForIC4VW1LoopWithReductionTC127RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB295_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB295_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB295_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 127
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB295_3
.LBB295_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end295:
	.size	_Z36benchForIC4VW1LoopWithReductionTC127RN9benchmark5StateE, .Lfunc_end295-_Z36benchForIC4VW1LoopWithReductionTC127RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z27benchAutoVecForBigLoopTC127RN9benchmark5StateE # -- Begin function _Z27benchAutoVecForBigLoopTC127RN9benchmark5StateE
	.p2align	5
	.type	_Z27benchAutoVecForBigLoopTC127RN9benchmark5StateE,@function
_Z27benchAutoVecForBigLoopTC127RN9benchmark5StateE: # @_Z27benchAutoVecForBigLoopTC127RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB296_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB296_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB296_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 127
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB296_3
.LBB296_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end296:
	.size	_Z27benchAutoVecForBigLoopTC127RN9benchmark5StateE, .Lfunc_end296-_Z27benchAutoVecForBigLoopTC127RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z26benchForIC1VW4BigLoopTC127RN9benchmark5StateE # -- Begin function _Z26benchForIC1VW4BigLoopTC127RN9benchmark5StateE
	.p2align	5
	.type	_Z26benchForIC1VW4BigLoopTC127RN9benchmark5StateE,@function
_Z26benchForIC1VW4BigLoopTC127RN9benchmark5StateE: # @_Z26benchForIC1VW4BigLoopTC127RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB297_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB297_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB297_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 127
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB297_3
.LBB297_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end297:
	.size	_Z26benchForIC1VW4BigLoopTC127RN9benchmark5StateE, .Lfunc_end297-_Z26benchForIC1VW4BigLoopTC127RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z26benchForIC2VW4BigLoopTC127RN9benchmark5StateE # -- Begin function _Z26benchForIC2VW4BigLoopTC127RN9benchmark5StateE
	.p2align	5
	.type	_Z26benchForIC2VW4BigLoopTC127RN9benchmark5StateE,@function
_Z26benchForIC2VW4BigLoopTC127RN9benchmark5StateE: # @_Z26benchForIC2VW4BigLoopTC127RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB298_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB298_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB298_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 127
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB298_3
.LBB298_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end298:
	.size	_Z26benchForIC2VW4BigLoopTC127RN9benchmark5StateE, .Lfunc_end298-_Z26benchForIC2VW4BigLoopTC127RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z26benchForIC4VW4BigLoopTC127RN9benchmark5StateE # -- Begin function _Z26benchForIC4VW4BigLoopTC127RN9benchmark5StateE
	.p2align	5
	.type	_Z26benchForIC4VW4BigLoopTC127RN9benchmark5StateE,@function
_Z26benchForIC4VW4BigLoopTC127RN9benchmark5StateE: # @_Z26benchForIC4VW4BigLoopTC127RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB299_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB299_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB299_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 127
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB299_3
.LBB299_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end299:
	.size	_Z26benchForIC4VW4BigLoopTC127RN9benchmark5StateE, .Lfunc_end299-_Z26benchForIC4VW4BigLoopTC127RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z40benchForBigLoopWithReductionAutoVecTC127RN9benchmark5StateE # -- Begin function _Z40benchForBigLoopWithReductionAutoVecTC127RN9benchmark5StateE
	.p2align	5
	.type	_Z40benchForBigLoopWithReductionAutoVecTC127RN9benchmark5StateE,@function
_Z40benchForBigLoopWithReductionAutoVecTC127RN9benchmark5StateE: # @_Z40benchForBigLoopWithReductionAutoVecTC127RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB300_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB300_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB300_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 127
	pcaddu18i	$ra, %call36(_ZL27bigLoopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB300_3
.LBB300_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end300:
	.size	_Z40benchForBigLoopWithReductionAutoVecTC127RN9benchmark5StateE, .Lfunc_end300-_Z40benchForBigLoopWithReductionAutoVecTC127RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z39benchForIC1VW4BigLoopWithReductionTC127RN9benchmark5StateE # -- Begin function _Z39benchForIC1VW4BigLoopWithReductionTC127RN9benchmark5StateE
	.p2align	5
	.type	_Z39benchForIC1VW4BigLoopWithReductionTC127RN9benchmark5StateE,@function
_Z39benchForIC1VW4BigLoopWithReductionTC127RN9benchmark5StateE: # @_Z39benchForIC1VW4BigLoopWithReductionTC127RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB301_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB301_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB301_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 127
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB301_3
.LBB301_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end301:
	.size	_Z39benchForIC1VW4BigLoopWithReductionTC127RN9benchmark5StateE, .Lfunc_end301-_Z39benchForIC1VW4BigLoopWithReductionTC127RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z39benchForIC2VW4BigLoopWithReductionTC127RN9benchmark5StateE # -- Begin function _Z39benchForIC2VW4BigLoopWithReductionTC127RN9benchmark5StateE
	.p2align	5
	.type	_Z39benchForIC2VW4BigLoopWithReductionTC127RN9benchmark5StateE,@function
_Z39benchForIC2VW4BigLoopWithReductionTC127RN9benchmark5StateE: # @_Z39benchForIC2VW4BigLoopWithReductionTC127RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB302_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB302_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB302_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 127
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB302_3
.LBB302_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end302:
	.size	_Z39benchForIC2VW4BigLoopWithReductionTC127RN9benchmark5StateE, .Lfunc_end302-_Z39benchForIC2VW4BigLoopWithReductionTC127RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z39benchForIC4VW4BigLoopWithReductionTC127RN9benchmark5StateE # -- Begin function _Z39benchForIC4VW4BigLoopWithReductionTC127RN9benchmark5StateE
	.p2align	5
	.type	_Z39benchForIC4VW4BigLoopWithReductionTC127RN9benchmark5StateE,@function
_Z39benchForIC4VW4BigLoopWithReductionTC127RN9benchmark5StateE: # @_Z39benchForIC4VW4BigLoopWithReductionTC127RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB303_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB303_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB303_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 127
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB303_3
.LBB303_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end303:
	.size	_Z39benchForIC4VW4BigLoopWithReductionTC127RN9benchmark5StateE, .Lfunc_end303-_Z39benchForIC4VW4BigLoopWithReductionTC127RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z39benchForIC1VW1BigLoopWithReductionTC127RN9benchmark5StateE # -- Begin function _Z39benchForIC1VW1BigLoopWithReductionTC127RN9benchmark5StateE
	.p2align	5
	.type	_Z39benchForIC1VW1BigLoopWithReductionTC127RN9benchmark5StateE,@function
_Z39benchForIC1VW1BigLoopWithReductionTC127RN9benchmark5StateE: # @_Z39benchForIC1VW1BigLoopWithReductionTC127RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB304_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB304_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB304_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 127
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB304_3
.LBB304_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end304:
	.size	_Z39benchForIC1VW1BigLoopWithReductionTC127RN9benchmark5StateE, .Lfunc_end304-_Z39benchForIC1VW1BigLoopWithReductionTC127RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z39benchForIC2VW1BigLoopWithReductionTC127RN9benchmark5StateE # -- Begin function _Z39benchForIC2VW1BigLoopWithReductionTC127RN9benchmark5StateE
	.p2align	5
	.type	_Z39benchForIC2VW1BigLoopWithReductionTC127RN9benchmark5StateE,@function
_Z39benchForIC2VW1BigLoopWithReductionTC127RN9benchmark5StateE: # @_Z39benchForIC2VW1BigLoopWithReductionTC127RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB305_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB305_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB305_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 127
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB305_3
.LBB305_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end305:
	.size	_Z39benchForIC2VW1BigLoopWithReductionTC127RN9benchmark5StateE, .Lfunc_end305-_Z39benchForIC2VW1BigLoopWithReductionTC127RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z39benchForIC4VW1BigLoopWithReductionTC127RN9benchmark5StateE # -- Begin function _Z39benchForIC4VW1BigLoopWithReductionTC127RN9benchmark5StateE
	.p2align	5
	.type	_Z39benchForIC4VW1BigLoopWithReductionTC127RN9benchmark5StateE,@function
_Z39benchForIC4VW1BigLoopWithReductionTC127RN9benchmark5StateE: # @_Z39benchForIC4VW1BigLoopWithReductionTC127RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB306_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB306_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB306_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 127
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB306_3
.LBB306_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end306:
	.size	_Z39benchForIC4VW1BigLoopWithReductionTC127RN9benchmark5StateE, .Lfunc_end306-_Z39benchForIC4VW1BigLoopWithReductionTC127RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z24benchAutoVecForLoopTC128RN9benchmark5StateE # -- Begin function _Z24benchAutoVecForLoopTC128RN9benchmark5StateE
	.p2align	5
	.type	_Z24benchAutoVecForLoopTC128RN9benchmark5StateE,@function
_Z24benchAutoVecForLoopTC128RN9benchmark5StateE: # @_Z24benchAutoVecForLoopTC128RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB307_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB307_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB307_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB307_3
.LBB307_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end307:
	.size	_Z24benchAutoVecForLoopTC128RN9benchmark5StateE, .Lfunc_end307-_Z24benchAutoVecForLoopTC128RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z23benchForIC1VW4LoopTC128RN9benchmark5StateE # -- Begin function _Z23benchForIC1VW4LoopTC128RN9benchmark5StateE
	.p2align	5
	.type	_Z23benchForIC1VW4LoopTC128RN9benchmark5StateE,@function
_Z23benchForIC1VW4LoopTC128RN9benchmark5StateE: # @_Z23benchForIC1VW4LoopTC128RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB308_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB308_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB308_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB308_3
.LBB308_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end308:
	.size	_Z23benchForIC1VW4LoopTC128RN9benchmark5StateE, .Lfunc_end308-_Z23benchForIC1VW4LoopTC128RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z23benchForIC2VW4LoopTC128RN9benchmark5StateE # -- Begin function _Z23benchForIC2VW4LoopTC128RN9benchmark5StateE
	.p2align	5
	.type	_Z23benchForIC2VW4LoopTC128RN9benchmark5StateE,@function
_Z23benchForIC2VW4LoopTC128RN9benchmark5StateE: # @_Z23benchForIC2VW4LoopTC128RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB309_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB309_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB309_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB309_3
.LBB309_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end309:
	.size	_Z23benchForIC2VW4LoopTC128RN9benchmark5StateE, .Lfunc_end309-_Z23benchForIC2VW4LoopTC128RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z23benchForIC4VW4LoopTC128RN9benchmark5StateE # -- Begin function _Z23benchForIC4VW4LoopTC128RN9benchmark5StateE
	.p2align	5
	.type	_Z23benchForIC4VW4LoopTC128RN9benchmark5StateE,@function
_Z23benchForIC4VW4LoopTC128RN9benchmark5StateE: # @_Z23benchForIC4VW4LoopTC128RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB310_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB310_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB310_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_ZL14loopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB310_3
.LBB310_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end310:
	.size	_Z23benchForIC4VW4LoopTC128RN9benchmark5StateE, .Lfunc_end310-_Z23benchForIC4VW4LoopTC128RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z37benchForLoopWithReductionAutoVecTC128RN9benchmark5StateE # -- Begin function _Z37benchForLoopWithReductionAutoVecTC128RN9benchmark5StateE
	.p2align	5
	.type	_Z37benchForLoopWithReductionAutoVecTC128RN9benchmark5StateE,@function
_Z37benchForLoopWithReductionAutoVecTC128RN9benchmark5StateE: # @_Z37benchForLoopWithReductionAutoVecTC128RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB311_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB311_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB311_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_ZL24loopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB311_3
.LBB311_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end311:
	.size	_Z37benchForLoopWithReductionAutoVecTC128RN9benchmark5StateE, .Lfunc_end311-_Z37benchForLoopWithReductionAutoVecTC128RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z36benchForIC1VW4LoopWithReductionTC128RN9benchmark5StateE # -- Begin function _Z36benchForIC1VW4LoopWithReductionTC128RN9benchmark5StateE
	.p2align	5
	.type	_Z36benchForIC1VW4LoopWithReductionTC128RN9benchmark5StateE,@function
_Z36benchForIC1VW4LoopWithReductionTC128RN9benchmark5StateE: # @_Z36benchForIC1VW4LoopWithReductionTC128RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB312_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB312_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB312_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB312_3
.LBB312_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end312:
	.size	_Z36benchForIC1VW4LoopWithReductionTC128RN9benchmark5StateE, .Lfunc_end312-_Z36benchForIC1VW4LoopWithReductionTC128RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z36benchForIC2VW4LoopWithReductionTC128RN9benchmark5StateE # -- Begin function _Z36benchForIC2VW4LoopWithReductionTC128RN9benchmark5StateE
	.p2align	5
	.type	_Z36benchForIC2VW4LoopWithReductionTC128RN9benchmark5StateE,@function
_Z36benchForIC2VW4LoopWithReductionTC128RN9benchmark5StateE: # @_Z36benchForIC2VW4LoopWithReductionTC128RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB313_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB313_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB313_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB313_3
.LBB313_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end313:
	.size	_Z36benchForIC2VW4LoopWithReductionTC128RN9benchmark5StateE, .Lfunc_end313-_Z36benchForIC2VW4LoopWithReductionTC128RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z36benchForIC4VW4LoopWithReductionTC128RN9benchmark5StateE # -- Begin function _Z36benchForIC4VW4LoopWithReductionTC128RN9benchmark5StateE
	.p2align	5
	.type	_Z36benchForIC4VW4LoopWithReductionTC128RN9benchmark5StateE,@function
_Z36benchForIC4VW4LoopWithReductionTC128RN9benchmark5StateE: # @_Z36benchForIC4VW4LoopWithReductionTC128RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB314_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB314_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB314_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB314_3
.LBB314_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end314:
	.size	_Z36benchForIC4VW4LoopWithReductionTC128RN9benchmark5StateE, .Lfunc_end314-_Z36benchForIC4VW4LoopWithReductionTC128RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z36benchForIC1VW1LoopWithReductionTC128RN9benchmark5StateE # -- Begin function _Z36benchForIC1VW1LoopWithReductionTC128RN9benchmark5StateE
	.p2align	5
	.type	_Z36benchForIC1VW1LoopWithReductionTC128RN9benchmark5StateE,@function
_Z36benchForIC1VW1LoopWithReductionTC128RN9benchmark5StateE: # @_Z36benchForIC1VW1LoopWithReductionTC128RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB315_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB315_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB315_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB315_3
.LBB315_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end315:
	.size	_Z36benchForIC1VW1LoopWithReductionTC128RN9benchmark5StateE, .Lfunc_end315-_Z36benchForIC1VW1LoopWithReductionTC128RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z36benchForIC2VW1LoopWithReductionTC128RN9benchmark5StateE # -- Begin function _Z36benchForIC2VW1LoopWithReductionTC128RN9benchmark5StateE
	.p2align	5
	.type	_Z36benchForIC2VW1LoopWithReductionTC128RN9benchmark5StateE,@function
_Z36benchForIC2VW1LoopWithReductionTC128RN9benchmark5StateE: # @_Z36benchForIC2VW1LoopWithReductionTC128RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB316_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB316_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB316_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB316_3
.LBB316_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end316:
	.size	_Z36benchForIC2VW1LoopWithReductionTC128RN9benchmark5StateE, .Lfunc_end316-_Z36benchForIC2VW1LoopWithReductionTC128RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z36benchForIC4VW1LoopWithReductionTC128RN9benchmark5StateE # -- Begin function _Z36benchForIC4VW1LoopWithReductionTC128RN9benchmark5StateE
	.p2align	5
	.type	_Z36benchForIC4VW1LoopWithReductionTC128RN9benchmark5StateE,@function
_Z36benchForIC4VW1LoopWithReductionTC128RN9benchmark5StateE: # @_Z36benchForIC4VW1LoopWithReductionTC128RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB317_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB317_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB317_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_ZL27loopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB317_3
.LBB317_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end317:
	.size	_Z36benchForIC4VW1LoopWithReductionTC128RN9benchmark5StateE, .Lfunc_end317-_Z36benchForIC4VW1LoopWithReductionTC128RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z27benchAutoVecForBigLoopTC128RN9benchmark5StateE # -- Begin function _Z27benchAutoVecForBigLoopTC128RN9benchmark5StateE
	.p2align	5
	.type	_Z27benchAutoVecForBigLoopTC128RN9benchmark5StateE,@function
_Z27benchAutoVecForBigLoopTC128RN9benchmark5StateE: # @_Z27benchAutoVecForBigLoopTC128RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB318_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB318_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB318_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_ZL22loopNoReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB318_3
.LBB318_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end318:
	.size	_Z27benchAutoVecForBigLoopTC128RN9benchmark5StateE, .Lfunc_end318-_Z27benchAutoVecForBigLoopTC128RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z26benchForIC1VW4BigLoopTC128RN9benchmark5StateE # -- Begin function _Z26benchForIC1VW4BigLoopTC128RN9benchmark5StateE
	.p2align	5
	.type	_Z26benchForIC1VW4BigLoopTC128RN9benchmark5StateE,@function
_Z26benchForIC1VW4BigLoopTC128RN9benchmark5StateE: # @_Z26benchForIC1VW4BigLoopTC128RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB319_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB319_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB319_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB319_3
.LBB319_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end319:
	.size	_Z26benchForIC1VW4BigLoopTC128RN9benchmark5StateE, .Lfunc_end319-_Z26benchForIC1VW4BigLoopTC128RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z26benchForIC2VW4BigLoopTC128RN9benchmark5StateE # -- Begin function _Z26benchForIC2VW4BigLoopTC128RN9benchmark5StateE
	.p2align	5
	.type	_Z26benchForIC2VW4BigLoopTC128RN9benchmark5StateE,@function
_Z26benchForIC2VW4BigLoopTC128RN9benchmark5StateE: # @_Z26benchForIC2VW4BigLoopTC128RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB320_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB320_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB320_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB320_3
.LBB320_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end320:
	.size	_Z26benchForIC2VW4BigLoopTC128RN9benchmark5StateE, .Lfunc_end320-_Z26benchForIC2VW4BigLoopTC128RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z26benchForIC4VW4BigLoopTC128RN9benchmark5StateE # -- Begin function _Z26benchForIC4VW4BigLoopTC128RN9benchmark5StateE
	.p2align	5
	.type	_Z26benchForIC4VW4BigLoopTC128RN9benchmark5StateE,@function
_Z26benchForIC4VW4BigLoopTC128RN9benchmark5StateE: # @_Z26benchForIC4VW4BigLoopTC128RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB321_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB321_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB321_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_ZL17bigLoopWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB321_3
.LBB321_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end321:
	.size	_Z26benchForIC4VW4BigLoopTC128RN9benchmark5StateE, .Lfunc_end321-_Z26benchForIC4VW4BigLoopTC128RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z40benchForBigLoopWithReductionAutoVecTC128RN9benchmark5StateE # -- Begin function _Z40benchForBigLoopWithReductionAutoVecTC128RN9benchmark5StateE
	.p2align	5
	.type	_Z40benchForBigLoopWithReductionAutoVecTC128RN9benchmark5StateE,@function
_Z40benchForBigLoopWithReductionAutoVecTC128RN9benchmark5StateE: # @_Z40benchForBigLoopWithReductionAutoVecTC128RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB322_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB322_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB322_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_ZL27bigLoopWithReductionAutoVeci)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB322_3
.LBB322_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end322:
	.size	_Z40benchForBigLoopWithReductionAutoVecTC128RN9benchmark5StateE, .Lfunc_end322-_Z40benchForBigLoopWithReductionAutoVecTC128RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z39benchForIC1VW4BigLoopWithReductionTC128RN9benchmark5StateE # -- Begin function _Z39benchForIC1VW4BigLoopWithReductionTC128RN9benchmark5StateE
	.p2align	5
	.type	_Z39benchForIC1VW4BigLoopWithReductionTC128RN9benchmark5StateE,@function
_Z39benchForIC1VW4BigLoopWithReductionTC128RN9benchmark5StateE: # @_Z39benchForIC1VW4BigLoopWithReductionTC128RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB323_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB323_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB323_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB323_3
.LBB323_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end323:
	.size	_Z39benchForIC1VW4BigLoopWithReductionTC128RN9benchmark5StateE, .Lfunc_end323-_Z39benchForIC1VW4BigLoopWithReductionTC128RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z39benchForIC2VW4BigLoopWithReductionTC128RN9benchmark5StateE # -- Begin function _Z39benchForIC2VW4BigLoopWithReductionTC128RN9benchmark5StateE
	.p2align	5
	.type	_Z39benchForIC2VW4BigLoopWithReductionTC128RN9benchmark5StateE,@function
_Z39benchForIC2VW4BigLoopWithReductionTC128RN9benchmark5StateE: # @_Z39benchForIC2VW4BigLoopWithReductionTC128RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB324_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB324_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB324_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB324_3
.LBB324_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end324:
	.size	_Z39benchForIC2VW4BigLoopWithReductionTC128RN9benchmark5StateE, .Lfunc_end324-_Z39benchForIC2VW4BigLoopWithReductionTC128RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z39benchForIC4VW4BigLoopWithReductionTC128RN9benchmark5StateE # -- Begin function _Z39benchForIC4VW4BigLoopWithReductionTC128RN9benchmark5StateE
	.p2align	5
	.type	_Z39benchForIC4VW4BigLoopWithReductionTC128RN9benchmark5StateE,@function
_Z39benchForIC4VW4BigLoopWithReductionTC128RN9benchmark5StateE: # @_Z39benchForIC4VW4BigLoopWithReductionTC128RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB325_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB325_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB325_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW4IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB325_3
.LBB325_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end325:
	.size	_Z39benchForIC4VW4BigLoopWithReductionTC128RN9benchmark5StateE, .Lfunc_end325-_Z39benchForIC4VW4BigLoopWithReductionTC128RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z39benchForIC1VW1BigLoopWithReductionTC128RN9benchmark5StateE # -- Begin function _Z39benchForIC1VW1BigLoopWithReductionTC128RN9benchmark5StateE
	.p2align	5
	.type	_Z39benchForIC1VW1BigLoopWithReductionTC128RN9benchmark5StateE,@function
_Z39benchForIC1VW1BigLoopWithReductionTC128RN9benchmark5StateE: # @_Z39benchForIC1VW1BigLoopWithReductionTC128RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB326_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB326_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB326_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC1i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB326_3
.LBB326_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end326:
	.size	_Z39benchForIC1VW1BigLoopWithReductionTC128RN9benchmark5StateE, .Lfunc_end326-_Z39benchForIC1VW1BigLoopWithReductionTC128RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z39benchForIC2VW1BigLoopWithReductionTC128RN9benchmark5StateE # -- Begin function _Z39benchForIC2VW1BigLoopWithReductionTC128RN9benchmark5StateE
	.p2align	5
	.type	_Z39benchForIC2VW1BigLoopWithReductionTC128RN9benchmark5StateE,@function
_Z39benchForIC2VW1BigLoopWithReductionTC128RN9benchmark5StateE: # @_Z39benchForIC2VW1BigLoopWithReductionTC128RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB327_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB327_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB327_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC2i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB327_3
.LBB327_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end327:
	.size	_Z39benchForIC2VW1BigLoopWithReductionTC128RN9benchmark5StateE, .Lfunc_end327-_Z39benchForIC2VW1BigLoopWithReductionTC128RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.globl	_Z39benchForIC4VW1BigLoopWithReductionTC128RN9benchmark5StateE # -- Begin function _Z39benchForIC4VW1BigLoopWithReductionTC128RN9benchmark5StateE
	.p2align	5
	.type	_Z39benchForIC4VW1BigLoopWithReductionTC128RN9benchmark5StateE,@function
_Z39benchForIC4VW1BigLoopWithReductionTC128RN9benchmark5StateE: # @_Z39benchForIC4VW1BigLoopWithReductionTC128RN9benchmark5StateE
	.cfi_startproc
# %bb.0:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZL9init_dataj)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 28
	ld.d	$s0, $fp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark5State16StartKeepRunningEv)
	jirl	$ra, $ra, 0
	bnez	$s1, .LBB328_4
# %bb.1:                                # %_ZN9benchmark5State13StateIteratorC2EPS0_.exit
	beqz	$s0, .LBB328_4
# %bb.2:                                # %.lr.ph.preheader
	pcalau12i	$s1, %pc_hi20(A)
	pcalau12i	$s2, %pc_hi20(B)
	pcalau12i	$s3, %pc_hi20(C)
	pcalau12i	$s4, %pc_hi20(D)
	pcalau12i	$s5, %pc_hi20(E)
	pcalau12i	$s6, %pc_hi20(F)
	pcalau12i	$s7, %pc_hi20(g_sum)
	.p2align	4, , 16
.LBB328_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#APP
	#NO_APP
	#MEMBARRIER
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_ZL30bigLoopWithReductionWithVW1IC4i)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, %pc_lo12(g_sum)
	add.d	$a0, $a1, $a0
	addi.d	$s0, $s0, -1
	st.w	$a0, $s7, %pc_lo12(g_sum)
	bnez	$s0, .LBB328_3
.LBB328_4:                              # %_ZL27runBenchForLoopInterleavingRN9benchmark5StateEPFiiEi.exit
	move	$a0, $fp
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN9benchmark5State17FinishKeepRunningEv)
	jr	$t8
.Lfunc_end328:
	.size	_Z39benchForIC4VW1BigLoopWithReductionTC128RN9benchmark5StateE, .Lfunc_end328-_Z39benchForIC4VW1BigLoopWithReductionTC128RN9benchmark5StateE
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL9init_dataj
	.type	_ZL9init_dataj,@function
_ZL9init_dataj:                         # @_ZL9init_dataj
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	lu12i.w	$a0, -524288
	lu52i.d	$a0, $a0, 2047
	st.d	$a0, $sp, 16
	lu12i.w	$s0, -2
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$fp, $a0, %pc_lo12(_ZL3rng)
	pcalau12i	$a0, %pc_hi20(A)
	addi.d	$s1, $a0, %pc_lo12(A)
	pcalau12i	$a0, %pc_hi20(B)
	addi.d	$s2, $a0, %pc_lo12(B)
	pcalau12i	$a0, %pc_hi20(C)
	addi.d	$s3, $a0, %pc_lo12(C)
	pcalau12i	$a0, %pc_hi20(D)
	addi.d	$s4, $a0, %pc_lo12(D)
	pcalau12i	$a0, %pc_hi20(E)
	addi.d	$s5, $a0, %pc_lo12(E)
	pcalau12i	$a0, %pc_hi20(F)
	addi.d	$s6, $a0, %pc_lo12(F)
	.p2align	4, , 16
.LBB329_1:                              # =>This Inner Loop Header: Depth=1
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEiRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
	add.d	$a1, $s1, $s0
	stptr.w	$a0, $a1, 8192
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEiRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
	add.d	$a1, $s2, $s0
	stptr.w	$a0, $a1, 8192
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEiRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
	add.d	$a1, $s3, $s0
	stptr.w	$a0, $a1, 8192
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEiRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
	add.d	$a1, $s4, $s0
	stptr.w	$a0, $a1, 8192
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEiRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
	add.d	$a1, $s5, $s0
	stptr.w	$a0, $a1, 8192
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEiRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
	add.d	$a1, $s6, $s0
	addi.d	$s0, $s0, 4
	stptr.w	$a0, $a1, 8192
	bnez	$s0, .LBB329_1
# %bb.2:
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.Lfunc_end329:
	.size	_ZL9init_dataj, .Lfunc_end329-_ZL9init_dataj
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEiRT_RKNS0_10param_typeE,"axG",@progbits,_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEiRT_RKNS0_10param_typeE,comdat
	.weak	_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEiRT_RKNS0_10param_typeE # -- Begin function _ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEiRT_RKNS0_10param_typeE
	.p2align	2
	.type	_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEiRT_RKNS0_10param_typeE,@function
_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEiRT_RKNS0_10param_typeE: # @_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEiRT_RKNS0_10param_typeE
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	ld.w	$a2, $a2, 4
	ld.w	$a3, $fp, 0
	sub.d	$s2, $a2, $a3
	addi.w	$a2, $zero, -2
	lu32i.d	$a2, 0
	move	$s0, $a1
	bltu	$a2, $s2, .LBB330_5
# %bb.1:
	addi.w	$s4, $s2, 0
	addi.w	$s3, $s2, 1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv)
	jirl	$ra, $ra, 0
	bstrpick.d	$s1, $s3, 31, 0
	mul.d	$a0, $a0, $s1
	addi.w	$a1, $a0, 0
	bltu	$s4, $a1, .LBB330_4
# %bb.2:
	nor	$a2, $s2, $zero
	addi.w	$a2, $a2, 0
	mod.wu	$s2, $a2, $s3
	bgeu	$a1, $s2, .LBB330_4
	.p2align	4, , 16
.LBB330_3:                              # %.lr.ph.i
                                        # =>This Inner Loop Header: Depth=1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv)
	jirl	$ra, $ra, 0
	mul.d	$a0, $a0, $s1
	addi.w	$a1, $a0, 0
	bltu	$a1, $s2, .LBB330_3
.LBB330_4:                              # %_ZNSt24uniform_int_distributionIiE5_S_ndImSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEjEET1_RT0_S4_.exit
	srli.d	$a0, $a0, 32
	b	.LBB330_10
.LBB330_5:
	move	$s1, $a0
	addi.w	$a0, $zero, -1
	lu32i.d	$a0, 0
	bne	$s2, $a0, .LBB330_7
# %bb.6:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv)
	jirl	$ra, $ra, 0
	b	.LBB330_10
.LBB330_7:                              # %.preheader
	ori	$s3, $zero, 0
	lu32i.d	$s3, -1
	.p2align	4, , 16
.LBB330_8:                              # =>This Inner Loop Header: Depth=1
	st.d	$s3, $sp, 16
	addi.d	$a2, $sp, 16
	move	$a0, $s1
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEiRT_RKNS0_10param_typeE)
	jirl	$ra, $ra, 0
	slli.d	$s4, $a0, 32
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv)
	jirl	$ra, $ra, 0
	add.d	$a0, $s4, $a0
	bltu	$s2, $a0, .LBB330_8
# %bb.9:                                #   in Loop: Header=BB330_8 Depth=1
	sltu	$a1, $a0, $s4
	bnez	$a1, .LBB330_8
.LBB330_10:                             # %.loopexit
	ld.w	$a1, $fp, 0
	add.w	$a0, $a1, $a0
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.Lfunc_end330:
	.size	_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEiRT_RKNS0_10param_typeE, .Lfunc_end330-_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEiRT_RKNS0_10param_typeE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv,"axG",@progbits,_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv,comdat
	.weak	_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv # -- Begin function _ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv
	.p2align	2
	.type	_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv,@function
_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv: # @_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv
	.cfi_startproc
# %bb.0:
	ldptr.d	$a2, $a0, 4992
	ori	$a1, $zero, 624
	bltu	$a2, $a1, .LBB331_6
# %bb.1:                                # %vector.ph
	ld.d	$a1, $a0, 0
	move	$a2, $zero
	vinsgr2vr.d	$vr5, $a1, 1
	lu12i.w	$a1, -524288
	vreplgr2vr.d	$vr0, $a1
	lu12i.w	$a1, 524287
	ori	$a1, $a1, 4094
	vreplgr2vr.d	$vr1, $a1
	ori	$a3, $zero, 3176
	vrepli.d	$vr2, 1
	vrepli.b	$vr3, -1
	lu12i.w	$a1, -421749
	ori	$a1, $a1, 223
	lu32i.d	$a1, 0
	vreplgr2vr.d	$vr4, $a1
	ori	$a4, $zero, 1808
	.p2align	4, , 16
.LBB331_2:                              # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vori.b	$vr6, $vr5, 0
	add.d	$a5, $a0, $a2
	vld	$vr5, $a5, 8
	vshuf4i.d	$vr6, $vr5, 9
	vand.v	$vr6, $vr6, $vr0
	vldx	$vr7, $a5, $a3
	vand.v	$vr8, $vr5, $vr1
	vor.v	$vr6, $vr8, $vr6
	vsrli.d	$vr6, $vr6, 1
	vxor.v	$vr6, $vr6, $vr7
	vand.v	$vr7, $vr5, $vr2
	vseqi.d	$vr7, $vr7, 0
	vxor.v	$vr7, $vr7, $vr3
	vand.v	$vr7, $vr7, $vr4
	vxor.v	$vr6, $vr6, $vr7
	vstx	$vr6, $a0, $a2
	addi.d	$a2, $a2, 16
	bne	$a2, $a4, .LBB331_2
# %bb.3:                                # %vector.ph11
	ld.d	$a2, $a0, 1816
	vpickve2gr.d	$a3, $vr5, 1
	bstrpick.d	$a4, $a2, 30, 1
	ldptr.d	$a5, $a0, 4984
	slli.d	$a4, $a4, 1
	bstrins.d	$a3, $a4, 30, 0
	srli.d	$a3, $a3, 1
	xor	$a3, $a3, $a5
	andi	$a4, $a2, 1
	sub.d	$a4, $zero, $a4
	and	$a4, $a4, $a1
	xor	$a3, $a3, $a4
	st.d	$a3, $a0, 1808
	vinsgr2vr.d	$vr5, $a2, 1
	lu12i.w	$a2, -1
	ori	$a2, $a2, 928
	lu12i.w	$a5, 1
	ori	$a3, $a5, 896
	ori	$a4, $zero, 3168
	ori	$a5, $a5, 888
	.p2align	4, , 16
.LBB331_4:                              # %vector.body12
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a6, $a0, $a2
	vldx	$vr6, $a6, $a3
	vshuf4i.d	$vr5, $vr6, 9
	vand.v	$vr5, $vr5, $vr0
	vldx	$vr7, $a6, $a4
	vand.v	$vr8, $vr6, $vr1
	vor.v	$vr5, $vr8, $vr5
	vsrli.d	$vr5, $vr5, 1
	vxor.v	$vr5, $vr5, $vr7
	vand.v	$vr7, $vr6, $vr2
	vseqi.d	$vr7, $vr7, 0
	vxor.v	$vr7, $vr7, $vr3
	vand.v	$vr7, $vr7, $vr4
	vxor.v	$vr5, $vr5, $vr7
	addi.d	$a2, $a2, 16
	vstx	$vr5, $a6, $a5
	vori.b	$vr5, $vr6, 0
	bnez	$a2, .LBB331_4
# %bb.5:                                # %_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv.exit
	ld.d	$a3, $a0, 0
	move	$a2, $zero
	ldptr.d	$a4, $a0, 4984
	bstrpick.d	$a5, $a3, 30, 1
	ldptr.d	$a6, $a0, 3168
	slli.d	$a5, $a5, 1
	bstrins.d	$a4, $a5, 30, 0
	srli.d	$a4, $a4, 1
	xor	$a4, $a4, $a6
	andi	$a3, $a3, 1
	sub.d	$a3, $zero, $a3
	and	$a1, $a3, $a1
	xor	$a1, $a4, $a1
	stptr.d	$a1, $a0, 4984
.LBB331_6:
	addi.d	$a1, $a2, 1
	stptr.d	$a1, $a0, 4992
	slli.d	$a1, $a2, 3
	ldx.d	$a0, $a0, $a1
	bstrpick.d	$a1, $a0, 42, 11
	xor	$a0, $a1, $a0
	slli.d	$a1, $a0, 7
	lu12i.w	$a2, -404795
	ori	$a2, $a2, 1664
	lu32i.d	$a2, 0
	and	$a1, $a1, $a2
	xor	$a0, $a1, $a0
	slli.d	$a1, $a0, 15
	lu12i.w	$a2, -66464
	lu32i.d	$a2, 0
	and	$a1, $a1, $a2
	xor	$a0, $a1, $a0
	srli.d	$a1, $a0, 18
	xor	$a0, $a1, $a0
	ret
.Lfunc_end331:
	.size	_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv, .Lfunc_end331-_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv
	.cfi_endproc
                                        # -- End function
	.section	.text.startup,"ax",@progbits
	.p2align	5                               # -- Begin function _GLOBAL__sub_I_LoopInterleaving.cpp
	.type	_GLOBAL__sub_I_LoopInterleaving.cpp,@function
_GLOBAL__sub_I_LoopInterleaving.cpp:    # @_GLOBAL__sub_I_LoopInterleaving.cpp
.Lfunc_begin0:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception0
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal17InitializeStreamsEv)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZL3rng)
	addi.d	$a0, $a0, %pc_lo12(_ZL3rng)
	lu12i.w	$a1, 1
	ori	$a2, $a1, 1393
	st.d	$a2, $a0, 0
	addi.d	$a1, $a0, 8
	ori	$a3, $zero, 1
	lu12i.w	$a4, 442488
	ori	$a4, $a4, 2405
	ori	$a5, $zero, 624
	.p2align	4, , 16
.LBB332_1:                              # =>This Inner Loop Header: Depth=1
	srli.d	$a6, $a2, 30
	xor	$a2, $a6, $a2
	mul.d	$a2, $a2, $a4
	add.d	$a2, $a3, $a2
	bstrpick.d	$a2, $a2, 31, 0
	st.d	$a2, $a1, 0
	addi.d	$a3, $a3, 1
	addi.d	$a1, $a1, 8
	bne	$a3, $a5, .LBB332_1
# %bb.2:                                # %__cxx_global_var_init.1.exit
	ori	$a1, $zero, 624
	stptr.d	$a1, $a0, 4992
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	addi.d	$s1, $sp, 24
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp0:                                 # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1:                                 # EH_LABEL
# %bb.3:                                # %.noexc.i
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str)
	addi.d	$a2, $a2, %pc_lo12(.L.str)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp3:                                 # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp4:                                 # EH_LABEL
# %bb.4:
	pcalau12i	$a0, %got_pc_hi20(_ZTVN9benchmark8internal17FunctionBenchmarkE)
	ld.d	$a0, $a0, %got_pc_lo12(_ZTVN9benchmark8internal17FunctionBenchmarkE)
	addi.d	$s2, $a0, 16
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchAutoVecForLoopTC1RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchAutoVecForLoopTC1RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp5:                                 # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp6:                                 # EH_LABEL
# %bb.5:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_7
# %bb.6:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_7:                              # %__cxx_global_var_init.2.exit
	pcalau12i	$a0, %pc_hi20(_ZL27benchmark_uniq_2_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL27benchmark_uniq_2_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 21
	st.d	$a0, $sp, 40
.Ltmp8:                                 # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp9:                                 # EH_LABEL
# %bb.8:                                # %.noexc.i4
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.4)
	addi.d	$a2, $a2, %pc_lo12(.L.str.4)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 13
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 13
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp11:                                # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp12:                                # EH_LABEL
# %bb.9:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z21benchForIC1VW4LoopTC1RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z21benchForIC1VW4LoopTC1RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp13:                                # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp14:                                # EH_LABEL
# %bb.10:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_12
# %bb.11:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i8
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_12:                             # %__cxx_global_var_init.3.exit
	pcalau12i	$a0, %pc_hi20(_ZL27benchmark_uniq_3_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL27benchmark_uniq_3_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 21
	st.d	$a0, $sp, 40
.Ltmp16:                                # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp17:                                # EH_LABEL
# %bb.13:                               # %.noexc.i13
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.6)
	addi.d	$a2, $a2, %pc_lo12(.L.str.6)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 13
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 13
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp19:                                # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp20:                                # EH_LABEL
# %bb.14:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z21benchForIC2VW4LoopTC1RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z21benchForIC2VW4LoopTC1RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp21:                                # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp22:                                # EH_LABEL
# %bb.15:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_17
# %bb.16:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i17
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_17:                             # %__cxx_global_var_init.5.exit
	pcalau12i	$a0, %pc_hi20(_ZL27benchmark_uniq_4_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL27benchmark_uniq_4_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 21
	st.d	$a0, $sp, 40
.Ltmp24:                                # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp25:                                # EH_LABEL
# %bb.18:                               # %.noexc.i22
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.8)
	addi.d	$a2, $a2, %pc_lo12(.L.str.8)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 13
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 13
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp27:                                # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp28:                                # EH_LABEL
# %bb.19:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z21benchForIC4VW4LoopTC1RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z21benchForIC4VW4LoopTC1RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp29:                                # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp30:                                # EH_LABEL
# %bb.20:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_22
# %bb.21:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i26
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_22:                             # %__cxx_global_var_init.7.exit
	pcalau12i	$a0, %pc_hi20(_ZL27benchmark_uniq_5_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL27benchmark_uniq_5_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp32:                                # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp33:                                # EH_LABEL
# %bb.23:                               # %.noexc.i31
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.10)
	addi.d	$a2, $a2, %pc_lo12(.L.str.10)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp35:                                # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp36:                                # EH_LABEL
# %bb.24:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForLoopWithReductionAutoVecTC1RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForLoopWithReductionAutoVecTC1RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp37:                                # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp38:                                # EH_LABEL
# %bb.25:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_27
# %bb.26:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i35
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_27:                             # %__cxx_global_var_init.9.exit
	pcalau12i	$a0, %pc_hi20(_ZL27benchmark_uniq_6_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL27benchmark_uniq_6_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp40:                                # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp41:                                # EH_LABEL
# %bb.28:                               # %.noexc.i40
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.12)
	addi.d	$a2, $a2, %pc_lo12(.L.str.12)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp43:                                # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp44:                                # EH_LABEL
# %bb.29:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC1VW4LoopWithReductionTC1RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC1VW4LoopWithReductionTC1RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp45:                                # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp46:                                # EH_LABEL
# %bb.30:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_32
# %bb.31:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i44
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_32:                             # %__cxx_global_var_init.11.exit
	pcalau12i	$a0, %pc_hi20(_ZL27benchmark_uniq_7_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL27benchmark_uniq_7_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp48:                                # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp49:                                # EH_LABEL
# %bb.33:                               # %.noexc.i49
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.14)
	addi.d	$a2, $a2, %pc_lo12(.L.str.14)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp51:                                # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp52:                                # EH_LABEL
# %bb.34:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC2VW4LoopWithReductionTC1RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC2VW4LoopWithReductionTC1RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp53:                                # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp54:                                # EH_LABEL
# %bb.35:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_37
# %bb.36:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i53
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_37:                             # %__cxx_global_var_init.13.exit
	pcalau12i	$a0, %pc_hi20(_ZL27benchmark_uniq_8_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL27benchmark_uniq_8_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp56:                                # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp57:                                # EH_LABEL
# %bb.38:                               # %.noexc.i58
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.16)
	addi.d	$a2, $a2, %pc_lo12(.L.str.16)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp59:                                # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp60:                                # EH_LABEL
# %bb.39:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC4VW4LoopWithReductionTC1RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC4VW4LoopWithReductionTC1RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp61:                                # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp62:                                # EH_LABEL
# %bb.40:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_42
# %bb.41:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i62
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_42:                             # %__cxx_global_var_init.15.exit
	pcalau12i	$a0, %pc_hi20(_ZL27benchmark_uniq_9_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL27benchmark_uniq_9_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp64:                                # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp65:                                # EH_LABEL
# %bb.43:                               # %.noexc.i67
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.18)
	addi.d	$a2, $a2, %pc_lo12(.L.str.18)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp67:                                # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp68:                                # EH_LABEL
# %bb.44:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC1VW1LoopWithReductionTC1RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC1VW1LoopWithReductionTC1RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp69:                                # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp70:                                # EH_LABEL
# %bb.45:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_47
# %bb.46:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i71
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_47:                             # %__cxx_global_var_init.17.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_10_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_10_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp72:                                # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp73:                                # EH_LABEL
# %bb.48:                               # %.noexc.i76
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.20)
	addi.d	$a2, $a2, %pc_lo12(.L.str.20)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp75:                                # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp76:                                # EH_LABEL
# %bb.49:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC2VW1LoopWithReductionTC1RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC2VW1LoopWithReductionTC1RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp77:                                # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp78:                                # EH_LABEL
# %bb.50:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_52
# %bb.51:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i80
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_52:                             # %__cxx_global_var_init.19.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_11_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_11_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp80:                                # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp81:                                # EH_LABEL
# %bb.53:                               # %.noexc.i85
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.22)
	addi.d	$a2, $a2, %pc_lo12(.L.str.22)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp83:                                # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp84:                                # EH_LABEL
# %bb.54:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC4VW1LoopWithReductionTC1RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC4VW1LoopWithReductionTC1RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp85:                                # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp86:                                # EH_LABEL
# %bb.55:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_57
# %bb.56:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i89
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_57:                             # %__cxx_global_var_init.21.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_12_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_12_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp88:                                # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp89:                                # EH_LABEL
# %bb.58:                               # %.noexc.i94
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.24)
	addi.d	$a2, $a2, %pc_lo12(.L.str.24)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp91:                                # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp92:                                # EH_LABEL
# %bb.59:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchAutoVecForBigLoopTC1RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchAutoVecForBigLoopTC1RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp93:                                # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp94:                                # EH_LABEL
# %bb.60:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_62
# %bb.61:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i98
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_62:                             # %__cxx_global_var_init.23.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_13_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_13_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 24
	st.d	$a0, $sp, 40
.Ltmp96:                                # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp97:                                # EH_LABEL
# %bb.63:                               # %.noexc.i103
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.26)
	addi.d	$a2, $a2, %pc_lo12(.L.str.26)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp99:                                # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp100:                               # EH_LABEL
# %bb.64:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z24benchForIC1VW4BigLoopTC1RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z24benchForIC1VW4BigLoopTC1RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp101:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp102:                               # EH_LABEL
# %bb.65:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_67
# %bb.66:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i107
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_67:                             # %__cxx_global_var_init.25.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_14_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_14_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 24
	st.d	$a0, $sp, 40
.Ltmp104:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp105:                               # EH_LABEL
# %bb.68:                               # %.noexc.i112
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.28)
	addi.d	$a2, $a2, %pc_lo12(.L.str.28)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp107:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp108:                               # EH_LABEL
# %bb.69:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z24benchForIC2VW4BigLoopTC1RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z24benchForIC2VW4BigLoopTC1RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp109:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp110:                               # EH_LABEL
# %bb.70:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_72
# %bb.71:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i116
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_72:                             # %__cxx_global_var_init.27.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_15_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_15_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 24
	st.d	$a0, $sp, 40
.Ltmp112:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp113:                               # EH_LABEL
# %bb.73:                               # %.noexc.i121
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.30)
	addi.d	$a2, $a2, %pc_lo12(.L.str.30)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp115:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp116:                               # EH_LABEL
# %bb.74:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z24benchForIC4VW4BigLoopTC1RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z24benchForIC4VW4BigLoopTC1RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp117:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp118:                               # EH_LABEL
# %bb.75:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_77
# %bb.76:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i125
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_77:                             # %__cxx_global_var_init.29.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_16_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_16_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp120:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp121:                               # EH_LABEL
# %bb.78:                               # %.noexc.i130
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.32)
	addi.d	$a2, $a2, %pc_lo12(.L.str.32)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp123:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp124:                               # EH_LABEL
# %bb.79:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForBigLoopWithReductionAutoVecTC1RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForBigLoopWithReductionAutoVecTC1RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp125:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp126:                               # EH_LABEL
# %bb.80:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_82
# %bb.81:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i134
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_82:                             # %__cxx_global_var_init.31.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_17_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_17_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp128:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp129:                               # EH_LABEL
# %bb.83:                               # %.noexc.i139
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.34)
	addi.d	$a2, $a2, %pc_lo12(.L.str.34)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp131:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp132:                               # EH_LABEL
# %bb.84:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC1VW4BigLoopWithReductionTC1RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC1VW4BigLoopWithReductionTC1RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp133:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp134:                               # EH_LABEL
# %bb.85:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_87
# %bb.86:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i143
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_87:                             # %__cxx_global_var_init.33.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_18_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_18_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp136:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp137:                               # EH_LABEL
# %bb.88:                               # %.noexc.i148
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.36)
	addi.d	$a2, $a2, %pc_lo12(.L.str.36)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp139:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp140:                               # EH_LABEL
# %bb.89:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC2VW4BigLoopWithReductionTC1RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC2VW4BigLoopWithReductionTC1RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp141:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp142:                               # EH_LABEL
# %bb.90:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_92
# %bb.91:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i152
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_92:                             # %__cxx_global_var_init.35.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_19_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_19_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp144:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp145:                               # EH_LABEL
# %bb.93:                               # %.noexc.i157
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.38)
	addi.d	$a2, $a2, %pc_lo12(.L.str.38)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp147:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp148:                               # EH_LABEL
# %bb.94:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC4VW4BigLoopWithReductionTC1RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC4VW4BigLoopWithReductionTC1RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp149:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp150:                               # EH_LABEL
# %bb.95:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_97
# %bb.96:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i161
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_97:                             # %__cxx_global_var_init.37.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_20_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_20_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp152:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp153:                               # EH_LABEL
# %bb.98:                               # %.noexc.i166
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.40)
	addi.d	$a2, $a2, %pc_lo12(.L.str.40)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp155:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp156:                               # EH_LABEL
# %bb.99:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC1VW1BigLoopWithReductionTC1RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC1VW1BigLoopWithReductionTC1RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp157:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp158:                               # EH_LABEL
# %bb.100:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_102
# %bb.101:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i170
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_102:                            # %__cxx_global_var_init.39.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_21_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_21_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp160:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp161:                               # EH_LABEL
# %bb.103:                              # %.noexc.i175
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.42)
	addi.d	$a2, $a2, %pc_lo12(.L.str.42)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp163:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp164:                               # EH_LABEL
# %bb.104:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC2VW1BigLoopWithReductionTC1RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC2VW1BigLoopWithReductionTC1RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp165:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp166:                               # EH_LABEL
# %bb.105:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_107
# %bb.106:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i179
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_107:                            # %__cxx_global_var_init.41.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_22_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_22_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp168:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp169:                               # EH_LABEL
# %bb.108:                              # %.noexc.i184
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.44)
	addi.d	$a2, $a2, %pc_lo12(.L.str.44)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp171:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp172:                               # EH_LABEL
# %bb.109:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC4VW1BigLoopWithReductionTC1RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC4VW1BigLoopWithReductionTC1RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp173:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp174:                               # EH_LABEL
# %bb.110:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_112
# %bb.111:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i188
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_112:                            # %__cxx_global_var_init.43.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_23_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_23_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp176:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp177:                               # EH_LABEL
# %bb.113:                              # %.noexc.i193
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.46)
	addi.d	$a2, $a2, %pc_lo12(.L.str.46)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp179:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp180:                               # EH_LABEL
# %bb.114:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchAutoVecForLoopTC2RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchAutoVecForLoopTC2RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp181:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp182:                               # EH_LABEL
# %bb.115:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_117
# %bb.116:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i197
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_117:                            # %__cxx_global_var_init.45.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_24_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_24_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 21
	st.d	$a0, $sp, 40
.Ltmp184:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp185:                               # EH_LABEL
# %bb.118:                              # %.noexc.i202
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.48)
	addi.d	$a2, $a2, %pc_lo12(.L.str.48)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 13
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 13
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp187:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp188:                               # EH_LABEL
# %bb.119:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z21benchForIC1VW4LoopTC2RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z21benchForIC1VW4LoopTC2RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp189:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp190:                               # EH_LABEL
# %bb.120:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_122
# %bb.121:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i206
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_122:                            # %__cxx_global_var_init.47.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_25_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_25_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 21
	st.d	$a0, $sp, 40
.Ltmp192:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp193:                               # EH_LABEL
# %bb.123:                              # %.noexc.i211
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.50)
	addi.d	$a2, $a2, %pc_lo12(.L.str.50)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 13
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 13
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp195:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp196:                               # EH_LABEL
# %bb.124:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z21benchForIC2VW4LoopTC2RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z21benchForIC2VW4LoopTC2RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp197:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp198:                               # EH_LABEL
# %bb.125:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_127
# %bb.126:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i215
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_127:                            # %__cxx_global_var_init.49.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_26_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_26_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 21
	st.d	$a0, $sp, 40
.Ltmp200:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp201:                               # EH_LABEL
# %bb.128:                              # %.noexc.i220
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.52)
	addi.d	$a2, $a2, %pc_lo12(.L.str.52)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 13
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 13
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp203:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp204:                               # EH_LABEL
# %bb.129:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z21benchForIC4VW4LoopTC2RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z21benchForIC4VW4LoopTC2RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp205:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp206:                               # EH_LABEL
# %bb.130:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_132
# %bb.131:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i224
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_132:                            # %__cxx_global_var_init.51.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_27_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_27_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp208:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp209:                               # EH_LABEL
# %bb.133:                              # %.noexc.i229
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.54)
	addi.d	$a2, $a2, %pc_lo12(.L.str.54)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp211:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp212:                               # EH_LABEL
# %bb.134:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForLoopWithReductionAutoVecTC2RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForLoopWithReductionAutoVecTC2RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp213:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp214:                               # EH_LABEL
# %bb.135:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_137
# %bb.136:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i233
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_137:                            # %__cxx_global_var_init.53.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_28_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_28_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp216:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp217:                               # EH_LABEL
# %bb.138:                              # %.noexc.i238
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.56)
	addi.d	$a2, $a2, %pc_lo12(.L.str.56)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp219:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp220:                               # EH_LABEL
# %bb.139:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC1VW4LoopWithReductionTC2RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC1VW4LoopWithReductionTC2RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp221:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp222:                               # EH_LABEL
# %bb.140:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_142
# %bb.141:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i242
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_142:                            # %__cxx_global_var_init.55.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_29_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_29_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp224:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp225:                               # EH_LABEL
# %bb.143:                              # %.noexc.i247
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.58)
	addi.d	$a2, $a2, %pc_lo12(.L.str.58)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp227:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp228:                               # EH_LABEL
# %bb.144:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC2VW4LoopWithReductionTC2RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC2VW4LoopWithReductionTC2RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp229:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp230:                               # EH_LABEL
# %bb.145:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_147
# %bb.146:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i251
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_147:                            # %__cxx_global_var_init.57.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_30_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_30_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp232:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp233:                               # EH_LABEL
# %bb.148:                              # %.noexc.i256
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.60)
	addi.d	$a2, $a2, %pc_lo12(.L.str.60)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp235:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp236:                               # EH_LABEL
# %bb.149:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC4VW4LoopWithReductionTC2RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC4VW4LoopWithReductionTC2RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp237:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp238:                               # EH_LABEL
# %bb.150:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_152
# %bb.151:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i260
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_152:                            # %__cxx_global_var_init.59.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_31_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_31_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp240:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp241:                               # EH_LABEL
# %bb.153:                              # %.noexc.i265
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.62)
	addi.d	$a2, $a2, %pc_lo12(.L.str.62)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp243:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp244:                               # EH_LABEL
# %bb.154:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC1VW1LoopWithReductionTC2RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC1VW1LoopWithReductionTC2RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp245:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp246:                               # EH_LABEL
# %bb.155:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_157
# %bb.156:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i269
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_157:                            # %__cxx_global_var_init.61.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_32_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_32_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp248:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp249:                               # EH_LABEL
# %bb.158:                              # %.noexc.i274
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.64)
	addi.d	$a2, $a2, %pc_lo12(.L.str.64)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp251:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp252:                               # EH_LABEL
# %bb.159:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC2VW1LoopWithReductionTC2RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC2VW1LoopWithReductionTC2RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp253:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp254:                               # EH_LABEL
# %bb.160:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_162
# %bb.161:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i278
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_162:                            # %__cxx_global_var_init.63.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_33_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_33_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp256:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp257:                               # EH_LABEL
# %bb.163:                              # %.noexc.i283
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.66)
	addi.d	$a2, $a2, %pc_lo12(.L.str.66)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp259:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp260:                               # EH_LABEL
# %bb.164:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC4VW1LoopWithReductionTC2RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC4VW1LoopWithReductionTC2RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp261:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp262:                               # EH_LABEL
# %bb.165:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_167
# %bb.166:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i287
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_167:                            # %__cxx_global_var_init.65.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_34_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_34_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp264:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp265:                               # EH_LABEL
# %bb.168:                              # %.noexc.i292
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.68)
	addi.d	$a2, $a2, %pc_lo12(.L.str.68)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp267:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp268:                               # EH_LABEL
# %bb.169:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchAutoVecForBigLoopTC2RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchAutoVecForBigLoopTC2RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp269:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp270:                               # EH_LABEL
# %bb.170:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_172
# %bb.171:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i296
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_172:                            # %__cxx_global_var_init.67.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_35_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_35_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 24
	st.d	$a0, $sp, 40
.Ltmp272:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp273:                               # EH_LABEL
# %bb.173:                              # %.noexc.i301
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.70)
	addi.d	$a2, $a2, %pc_lo12(.L.str.70)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp275:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp276:                               # EH_LABEL
# %bb.174:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z24benchForIC1VW4BigLoopTC2RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z24benchForIC1VW4BigLoopTC2RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp277:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp278:                               # EH_LABEL
# %bb.175:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_177
# %bb.176:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i305
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_177:                            # %__cxx_global_var_init.69.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_36_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_36_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 24
	st.d	$a0, $sp, 40
.Ltmp280:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp281:                               # EH_LABEL
# %bb.178:                              # %.noexc.i310
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.72)
	addi.d	$a2, $a2, %pc_lo12(.L.str.72)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp283:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp284:                               # EH_LABEL
# %bb.179:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z24benchForIC2VW4BigLoopTC2RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z24benchForIC2VW4BigLoopTC2RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp285:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp286:                               # EH_LABEL
# %bb.180:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_182
# %bb.181:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i314
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_182:                            # %__cxx_global_var_init.71.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_37_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_37_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 24
	st.d	$a0, $sp, 40
.Ltmp288:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp289:                               # EH_LABEL
# %bb.183:                              # %.noexc.i319
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.74)
	addi.d	$a2, $a2, %pc_lo12(.L.str.74)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp291:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp292:                               # EH_LABEL
# %bb.184:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z24benchForIC4VW4BigLoopTC2RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z24benchForIC4VW4BigLoopTC2RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp293:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp294:                               # EH_LABEL
# %bb.185:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_187
# %bb.186:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i323
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_187:                            # %__cxx_global_var_init.73.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_38_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_38_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp296:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp297:                               # EH_LABEL
# %bb.188:                              # %.noexc.i328
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.76)
	addi.d	$a2, $a2, %pc_lo12(.L.str.76)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp299:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp300:                               # EH_LABEL
# %bb.189:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForBigLoopWithReductionAutoVecTC2RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForBigLoopWithReductionAutoVecTC2RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp301:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp302:                               # EH_LABEL
# %bb.190:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_192
# %bb.191:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i332
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_192:                            # %__cxx_global_var_init.75.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_39_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_39_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp304:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp305:                               # EH_LABEL
# %bb.193:                              # %.noexc.i337
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.78)
	addi.d	$a2, $a2, %pc_lo12(.L.str.78)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp307:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp308:                               # EH_LABEL
# %bb.194:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC1VW4BigLoopWithReductionTC2RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC1VW4BigLoopWithReductionTC2RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp309:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp310:                               # EH_LABEL
# %bb.195:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_197
# %bb.196:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i341
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_197:                            # %__cxx_global_var_init.77.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_40_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_40_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp312:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp313:                               # EH_LABEL
# %bb.198:                              # %.noexc.i346
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.80)
	addi.d	$a2, $a2, %pc_lo12(.L.str.80)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp315:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp316:                               # EH_LABEL
# %bb.199:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC2VW4BigLoopWithReductionTC2RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC2VW4BigLoopWithReductionTC2RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp317:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp318:                               # EH_LABEL
# %bb.200:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_202
# %bb.201:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i350
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_202:                            # %__cxx_global_var_init.79.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_41_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_41_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp320:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp321:                               # EH_LABEL
# %bb.203:                              # %.noexc.i355
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.82)
	addi.d	$a2, $a2, %pc_lo12(.L.str.82)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp323:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp324:                               # EH_LABEL
# %bb.204:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC4VW4BigLoopWithReductionTC2RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC4VW4BigLoopWithReductionTC2RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp325:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp326:                               # EH_LABEL
# %bb.205:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_207
# %bb.206:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i359
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_207:                            # %__cxx_global_var_init.81.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_42_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_42_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp328:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp329:                               # EH_LABEL
# %bb.208:                              # %.noexc.i364
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.84)
	addi.d	$a2, $a2, %pc_lo12(.L.str.84)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp331:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp332:                               # EH_LABEL
# %bb.209:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC1VW1BigLoopWithReductionTC2RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC1VW1BigLoopWithReductionTC2RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp333:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp334:                               # EH_LABEL
# %bb.210:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_212
# %bb.211:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i368
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_212:                            # %__cxx_global_var_init.83.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_43_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_43_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp336:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp337:                               # EH_LABEL
# %bb.213:                              # %.noexc.i373
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.86)
	addi.d	$a2, $a2, %pc_lo12(.L.str.86)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp339:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp340:                               # EH_LABEL
# %bb.214:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC2VW1BigLoopWithReductionTC2RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC2VW1BigLoopWithReductionTC2RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp341:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp342:                               # EH_LABEL
# %bb.215:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_217
# %bb.216:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i377
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_217:                            # %__cxx_global_var_init.85.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_44_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_44_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp344:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp345:                               # EH_LABEL
# %bb.218:                              # %.noexc.i382
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.88)
	addi.d	$a2, $a2, %pc_lo12(.L.str.88)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp347:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp348:                               # EH_LABEL
# %bb.219:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC4VW1BigLoopWithReductionTC2RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC4VW1BigLoopWithReductionTC2RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp349:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp350:                               # EH_LABEL
# %bb.220:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_222
# %bb.221:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i386
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_222:                            # %__cxx_global_var_init.87.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_45_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_45_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp352:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp353:                               # EH_LABEL
# %bb.223:                              # %.noexc.i391
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.90)
	addi.d	$a2, $a2, %pc_lo12(.L.str.90)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp355:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp356:                               # EH_LABEL
# %bb.224:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchAutoVecForLoopTC3RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchAutoVecForLoopTC3RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp357:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp358:                               # EH_LABEL
# %bb.225:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_227
# %bb.226:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i395
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_227:                            # %__cxx_global_var_init.89.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_46_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_46_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 21
	st.d	$a0, $sp, 40
.Ltmp360:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp361:                               # EH_LABEL
# %bb.228:                              # %.noexc.i400
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.92)
	addi.d	$a2, $a2, %pc_lo12(.L.str.92)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 13
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 13
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp363:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp364:                               # EH_LABEL
# %bb.229:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z21benchForIC1VW4LoopTC3RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z21benchForIC1VW4LoopTC3RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp365:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp366:                               # EH_LABEL
# %bb.230:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_232
# %bb.231:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i404
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_232:                            # %__cxx_global_var_init.91.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_47_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_47_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 21
	st.d	$a0, $sp, 40
.Ltmp368:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp369:                               # EH_LABEL
# %bb.233:                              # %.noexc.i409
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.94)
	addi.d	$a2, $a2, %pc_lo12(.L.str.94)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 13
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 13
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp371:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp372:                               # EH_LABEL
# %bb.234:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z21benchForIC2VW4LoopTC3RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z21benchForIC2VW4LoopTC3RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp373:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp374:                               # EH_LABEL
# %bb.235:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_237
# %bb.236:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i413
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_237:                            # %__cxx_global_var_init.93.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_48_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_48_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 21
	st.d	$a0, $sp, 40
.Ltmp376:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp377:                               # EH_LABEL
# %bb.238:                              # %.noexc.i418
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.96)
	addi.d	$a2, $a2, %pc_lo12(.L.str.96)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 13
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 13
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp379:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp380:                               # EH_LABEL
# %bb.239:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z21benchForIC4VW4LoopTC3RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z21benchForIC4VW4LoopTC3RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp381:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp382:                               # EH_LABEL
# %bb.240:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_242
# %bb.241:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i422
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_242:                            # %__cxx_global_var_init.95.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_49_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_49_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp384:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp385:                               # EH_LABEL
# %bb.243:                              # %.noexc.i427
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.98)
	addi.d	$a2, $a2, %pc_lo12(.L.str.98)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp387:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp388:                               # EH_LABEL
# %bb.244:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForLoopWithReductionAutoVecTC3RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForLoopWithReductionAutoVecTC3RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp389:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp390:                               # EH_LABEL
# %bb.245:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_247
# %bb.246:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i431
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_247:                            # %__cxx_global_var_init.97.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_50_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_50_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp392:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp393:                               # EH_LABEL
# %bb.248:                              # %.noexc.i436
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.100)
	addi.d	$a2, $a2, %pc_lo12(.L.str.100)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp395:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp396:                               # EH_LABEL
# %bb.249:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC1VW4LoopWithReductionTC3RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC1VW4LoopWithReductionTC3RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp397:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp398:                               # EH_LABEL
# %bb.250:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_252
# %bb.251:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i440
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_252:                            # %__cxx_global_var_init.99.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_51_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_51_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp400:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp401:                               # EH_LABEL
# %bb.253:                              # %.noexc.i445
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.102)
	addi.d	$a2, $a2, %pc_lo12(.L.str.102)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp403:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp404:                               # EH_LABEL
# %bb.254:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC2VW4LoopWithReductionTC3RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC2VW4LoopWithReductionTC3RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp405:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp406:                               # EH_LABEL
# %bb.255:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_257
# %bb.256:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i449
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_257:                            # %__cxx_global_var_init.101.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_52_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_52_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp408:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp409:                               # EH_LABEL
# %bb.258:                              # %.noexc.i454
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.104)
	addi.d	$a2, $a2, %pc_lo12(.L.str.104)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp411:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp412:                               # EH_LABEL
# %bb.259:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC4VW4LoopWithReductionTC3RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC4VW4LoopWithReductionTC3RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp413:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp414:                               # EH_LABEL
# %bb.260:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_262
# %bb.261:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i458
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_262:                            # %__cxx_global_var_init.103.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_53_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_53_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp416:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp417:                               # EH_LABEL
# %bb.263:                              # %.noexc.i463
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.106)
	addi.d	$a2, $a2, %pc_lo12(.L.str.106)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp419:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp420:                               # EH_LABEL
# %bb.264:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC1VW1LoopWithReductionTC3RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC1VW1LoopWithReductionTC3RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp421:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp422:                               # EH_LABEL
# %bb.265:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_267
# %bb.266:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i467
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_267:                            # %__cxx_global_var_init.105.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_54_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_54_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp424:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp425:                               # EH_LABEL
# %bb.268:                              # %.noexc.i472
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.108)
	addi.d	$a2, $a2, %pc_lo12(.L.str.108)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp427:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp428:                               # EH_LABEL
# %bb.269:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC2VW1LoopWithReductionTC3RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC2VW1LoopWithReductionTC3RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp429:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp430:                               # EH_LABEL
# %bb.270:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_272
# %bb.271:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i476
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_272:                            # %__cxx_global_var_init.107.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_55_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_55_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp432:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp433:                               # EH_LABEL
# %bb.273:                              # %.noexc.i481
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.110)
	addi.d	$a2, $a2, %pc_lo12(.L.str.110)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp435:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp436:                               # EH_LABEL
# %bb.274:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC4VW1LoopWithReductionTC3RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC4VW1LoopWithReductionTC3RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp437:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp438:                               # EH_LABEL
# %bb.275:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_277
# %bb.276:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i485
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_277:                            # %__cxx_global_var_init.109.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_56_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_56_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp440:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp441:                               # EH_LABEL
# %bb.278:                              # %.noexc.i490
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.112)
	addi.d	$a2, $a2, %pc_lo12(.L.str.112)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp443:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp444:                               # EH_LABEL
# %bb.279:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchAutoVecForBigLoopTC3RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchAutoVecForBigLoopTC3RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp445:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp446:                               # EH_LABEL
# %bb.280:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_282
# %bb.281:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i494
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_282:                            # %__cxx_global_var_init.111.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_57_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_57_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 24
	st.d	$a0, $sp, 40
.Ltmp448:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp449:                               # EH_LABEL
# %bb.283:                              # %.noexc.i499
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.114)
	addi.d	$a2, $a2, %pc_lo12(.L.str.114)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp451:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp452:                               # EH_LABEL
# %bb.284:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z24benchForIC1VW4BigLoopTC3RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z24benchForIC1VW4BigLoopTC3RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp453:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp454:                               # EH_LABEL
# %bb.285:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_287
# %bb.286:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i503
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_287:                            # %__cxx_global_var_init.113.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_58_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_58_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 24
	st.d	$a0, $sp, 40
.Ltmp456:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp457:                               # EH_LABEL
# %bb.288:                              # %.noexc.i508
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.116)
	addi.d	$a2, $a2, %pc_lo12(.L.str.116)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp459:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp460:                               # EH_LABEL
# %bb.289:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z24benchForIC2VW4BigLoopTC3RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z24benchForIC2VW4BigLoopTC3RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp461:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp462:                               # EH_LABEL
# %bb.290:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_292
# %bb.291:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i512
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_292:                            # %__cxx_global_var_init.115.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_59_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_59_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 24
	st.d	$a0, $sp, 40
.Ltmp464:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp465:                               # EH_LABEL
# %bb.293:                              # %.noexc.i517
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.118)
	addi.d	$a2, $a2, %pc_lo12(.L.str.118)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp467:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp468:                               # EH_LABEL
# %bb.294:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z24benchForIC4VW4BigLoopTC3RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z24benchForIC4VW4BigLoopTC3RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp469:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp470:                               # EH_LABEL
# %bb.295:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_297
# %bb.296:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i521
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_297:                            # %__cxx_global_var_init.117.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_60_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_60_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp472:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp473:                               # EH_LABEL
# %bb.298:                              # %.noexc.i526
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.120)
	addi.d	$a2, $a2, %pc_lo12(.L.str.120)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp475:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp476:                               # EH_LABEL
# %bb.299:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForBigLoopWithReductionAutoVecTC3RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForBigLoopWithReductionAutoVecTC3RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp477:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp478:                               # EH_LABEL
# %bb.300:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_302
# %bb.301:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i530
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_302:                            # %__cxx_global_var_init.119.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_61_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_61_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp480:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp481:                               # EH_LABEL
# %bb.303:                              # %.noexc.i535
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.122)
	addi.d	$a2, $a2, %pc_lo12(.L.str.122)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp483:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp484:                               # EH_LABEL
# %bb.304:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC1VW4BigLoopWithReductionTC3RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC1VW4BigLoopWithReductionTC3RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp485:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp486:                               # EH_LABEL
# %bb.305:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_307
# %bb.306:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i539
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_307:                            # %__cxx_global_var_init.121.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_62_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_62_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp488:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp489:                               # EH_LABEL
# %bb.308:                              # %.noexc.i544
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.124)
	addi.d	$a2, $a2, %pc_lo12(.L.str.124)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp491:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp492:                               # EH_LABEL
# %bb.309:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC2VW4BigLoopWithReductionTC3RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC2VW4BigLoopWithReductionTC3RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp493:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp494:                               # EH_LABEL
# %bb.310:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_312
# %bb.311:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i548
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_312:                            # %__cxx_global_var_init.123.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_63_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_63_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp496:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp497:                               # EH_LABEL
# %bb.313:                              # %.noexc.i553
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.126)
	addi.d	$a2, $a2, %pc_lo12(.L.str.126)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp499:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp500:                               # EH_LABEL
# %bb.314:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC4VW4BigLoopWithReductionTC3RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC4VW4BigLoopWithReductionTC3RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp501:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp502:                               # EH_LABEL
# %bb.315:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_317
# %bb.316:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i557
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_317:                            # %__cxx_global_var_init.125.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_64_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_64_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp504:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp505:                               # EH_LABEL
# %bb.318:                              # %.noexc.i562
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.128)
	addi.d	$a2, $a2, %pc_lo12(.L.str.128)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp507:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp508:                               # EH_LABEL
# %bb.319:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC1VW1BigLoopWithReductionTC3RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC1VW1BigLoopWithReductionTC3RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp509:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp510:                               # EH_LABEL
# %bb.320:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_322
# %bb.321:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i566
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_322:                            # %__cxx_global_var_init.127.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_65_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_65_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp512:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp513:                               # EH_LABEL
# %bb.323:                              # %.noexc.i571
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.130)
	addi.d	$a2, $a2, %pc_lo12(.L.str.130)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp515:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp516:                               # EH_LABEL
# %bb.324:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC2VW1BigLoopWithReductionTC3RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC2VW1BigLoopWithReductionTC3RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp517:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp518:                               # EH_LABEL
# %bb.325:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_327
# %bb.326:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i575
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_327:                            # %__cxx_global_var_init.129.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_66_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_66_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp520:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp521:                               # EH_LABEL
# %bb.328:                              # %.noexc.i580
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.132)
	addi.d	$a2, $a2, %pc_lo12(.L.str.132)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp523:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp524:                               # EH_LABEL
# %bb.329:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC4VW1BigLoopWithReductionTC3RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC4VW1BigLoopWithReductionTC3RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp525:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp526:                               # EH_LABEL
# %bb.330:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_332
# %bb.331:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i584
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_332:                            # %__cxx_global_var_init.131.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_67_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_67_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp528:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp529:                               # EH_LABEL
# %bb.333:                              # %.noexc.i589
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.134)
	addi.d	$a2, $a2, %pc_lo12(.L.str.134)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp531:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp532:                               # EH_LABEL
# %bb.334:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchAutoVecForLoopTC4RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchAutoVecForLoopTC4RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp533:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp534:                               # EH_LABEL
# %bb.335:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_337
# %bb.336:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i593
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_337:                            # %__cxx_global_var_init.133.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_68_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_68_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 21
	st.d	$a0, $sp, 40
.Ltmp536:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp537:                               # EH_LABEL
# %bb.338:                              # %.noexc.i598
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.136)
	addi.d	$a2, $a2, %pc_lo12(.L.str.136)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 13
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 13
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp539:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp540:                               # EH_LABEL
# %bb.339:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z21benchForIC1VW4LoopTC4RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z21benchForIC1VW4LoopTC4RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp541:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp542:                               # EH_LABEL
# %bb.340:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_342
# %bb.341:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i602
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_342:                            # %__cxx_global_var_init.135.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_69_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_69_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 21
	st.d	$a0, $sp, 40
.Ltmp544:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp545:                               # EH_LABEL
# %bb.343:                              # %.noexc.i607
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.138)
	addi.d	$a2, $a2, %pc_lo12(.L.str.138)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 13
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 13
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp547:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp548:                               # EH_LABEL
# %bb.344:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z21benchForIC2VW4LoopTC4RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z21benchForIC2VW4LoopTC4RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp549:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp550:                               # EH_LABEL
# %bb.345:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_347
# %bb.346:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i611
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_347:                            # %__cxx_global_var_init.137.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_70_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_70_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 21
	st.d	$a0, $sp, 40
.Ltmp552:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp553:                               # EH_LABEL
# %bb.348:                              # %.noexc.i616
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.140)
	addi.d	$a2, $a2, %pc_lo12(.L.str.140)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 13
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 13
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp555:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp556:                               # EH_LABEL
# %bb.349:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z21benchForIC4VW4LoopTC4RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z21benchForIC4VW4LoopTC4RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp557:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp558:                               # EH_LABEL
# %bb.350:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_352
# %bb.351:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i620
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_352:                            # %__cxx_global_var_init.139.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_71_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_71_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp560:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp561:                               # EH_LABEL
# %bb.353:                              # %.noexc.i625
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.142)
	addi.d	$a2, $a2, %pc_lo12(.L.str.142)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp563:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp564:                               # EH_LABEL
# %bb.354:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForLoopWithReductionAutoVecTC4RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForLoopWithReductionAutoVecTC4RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp565:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp566:                               # EH_LABEL
# %bb.355:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_357
# %bb.356:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i629
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_357:                            # %__cxx_global_var_init.141.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_72_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_72_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp568:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp569:                               # EH_LABEL
# %bb.358:                              # %.noexc.i634
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.144)
	addi.d	$a2, $a2, %pc_lo12(.L.str.144)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp571:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp572:                               # EH_LABEL
# %bb.359:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC1VW4LoopWithReductionTC4RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC1VW4LoopWithReductionTC4RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp573:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp574:                               # EH_LABEL
# %bb.360:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_362
# %bb.361:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i638
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_362:                            # %__cxx_global_var_init.143.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_73_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_73_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp576:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp577:                               # EH_LABEL
# %bb.363:                              # %.noexc.i643
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.146)
	addi.d	$a2, $a2, %pc_lo12(.L.str.146)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp579:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp580:                               # EH_LABEL
# %bb.364:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC2VW4LoopWithReductionTC4RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC2VW4LoopWithReductionTC4RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp581:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp582:                               # EH_LABEL
# %bb.365:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_367
# %bb.366:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i647
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_367:                            # %__cxx_global_var_init.145.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_74_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_74_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp584:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp585:                               # EH_LABEL
# %bb.368:                              # %.noexc.i652
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.148)
	addi.d	$a2, $a2, %pc_lo12(.L.str.148)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp587:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp588:                               # EH_LABEL
# %bb.369:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC4VW4LoopWithReductionTC4RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC4VW4LoopWithReductionTC4RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp589:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp590:                               # EH_LABEL
# %bb.370:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_372
# %bb.371:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i656
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_372:                            # %__cxx_global_var_init.147.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_75_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_75_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp592:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp593:                               # EH_LABEL
# %bb.373:                              # %.noexc.i661
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.150)
	addi.d	$a2, $a2, %pc_lo12(.L.str.150)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp595:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp596:                               # EH_LABEL
# %bb.374:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC1VW1LoopWithReductionTC4RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC1VW1LoopWithReductionTC4RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp597:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp598:                               # EH_LABEL
# %bb.375:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_377
# %bb.376:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i665
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_377:                            # %__cxx_global_var_init.149.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_76_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_76_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp600:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp601:                               # EH_LABEL
# %bb.378:                              # %.noexc.i670
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.152)
	addi.d	$a2, $a2, %pc_lo12(.L.str.152)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp603:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp604:                               # EH_LABEL
# %bb.379:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC2VW1LoopWithReductionTC4RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC2VW1LoopWithReductionTC4RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp605:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp606:                               # EH_LABEL
# %bb.380:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_382
# %bb.381:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i674
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_382:                            # %__cxx_global_var_init.151.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_77_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_77_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp608:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp609:                               # EH_LABEL
# %bb.383:                              # %.noexc.i679
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.154)
	addi.d	$a2, $a2, %pc_lo12(.L.str.154)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp611:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp612:                               # EH_LABEL
# %bb.384:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC4VW1LoopWithReductionTC4RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC4VW1LoopWithReductionTC4RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp613:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp614:                               # EH_LABEL
# %bb.385:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_387
# %bb.386:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i683
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_387:                            # %__cxx_global_var_init.153.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_78_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_78_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp616:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp617:                               # EH_LABEL
# %bb.388:                              # %.noexc.i688
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.156)
	addi.d	$a2, $a2, %pc_lo12(.L.str.156)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp619:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp620:                               # EH_LABEL
# %bb.389:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchAutoVecForBigLoopTC4RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchAutoVecForBigLoopTC4RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp621:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp622:                               # EH_LABEL
# %bb.390:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_392
# %bb.391:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i692
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_392:                            # %__cxx_global_var_init.155.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_79_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_79_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 24
	st.d	$a0, $sp, 40
.Ltmp624:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp625:                               # EH_LABEL
# %bb.393:                              # %.noexc.i697
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.158)
	addi.d	$a2, $a2, %pc_lo12(.L.str.158)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp627:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp628:                               # EH_LABEL
# %bb.394:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z24benchForIC1VW4BigLoopTC4RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z24benchForIC1VW4BigLoopTC4RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp629:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp630:                               # EH_LABEL
# %bb.395:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_397
# %bb.396:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i701
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_397:                            # %__cxx_global_var_init.157.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_80_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_80_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 24
	st.d	$a0, $sp, 40
.Ltmp632:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp633:                               # EH_LABEL
# %bb.398:                              # %.noexc.i706
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.160)
	addi.d	$a2, $a2, %pc_lo12(.L.str.160)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp635:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp636:                               # EH_LABEL
# %bb.399:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z24benchForIC2VW4BigLoopTC4RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z24benchForIC2VW4BigLoopTC4RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp637:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp638:                               # EH_LABEL
# %bb.400:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_402
# %bb.401:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i710
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_402:                            # %__cxx_global_var_init.159.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_81_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_81_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 24
	st.d	$a0, $sp, 40
.Ltmp640:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp641:                               # EH_LABEL
# %bb.403:                              # %.noexc.i715
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.162)
	addi.d	$a2, $a2, %pc_lo12(.L.str.162)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp643:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp644:                               # EH_LABEL
# %bb.404:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z24benchForIC4VW4BigLoopTC4RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z24benchForIC4VW4BigLoopTC4RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp645:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp646:                               # EH_LABEL
# %bb.405:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_407
# %bb.406:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i719
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_407:                            # %__cxx_global_var_init.161.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_82_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_82_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp648:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp649:                               # EH_LABEL
# %bb.408:                              # %.noexc.i724
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.164)
	addi.d	$a2, $a2, %pc_lo12(.L.str.164)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp651:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp652:                               # EH_LABEL
# %bb.409:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForBigLoopWithReductionAutoVecTC4RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForBigLoopWithReductionAutoVecTC4RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp653:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp654:                               # EH_LABEL
# %bb.410:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_412
# %bb.411:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i728
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_412:                            # %__cxx_global_var_init.163.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_83_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_83_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp656:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp657:                               # EH_LABEL
# %bb.413:                              # %.noexc.i733
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.166)
	addi.d	$a2, $a2, %pc_lo12(.L.str.166)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp659:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp660:                               # EH_LABEL
# %bb.414:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC1VW4BigLoopWithReductionTC4RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC1VW4BigLoopWithReductionTC4RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp661:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp662:                               # EH_LABEL
# %bb.415:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_417
# %bb.416:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i737
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_417:                            # %__cxx_global_var_init.165.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_84_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_84_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp664:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp665:                               # EH_LABEL
# %bb.418:                              # %.noexc.i742
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.168)
	addi.d	$a2, $a2, %pc_lo12(.L.str.168)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp667:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp668:                               # EH_LABEL
# %bb.419:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC2VW4BigLoopWithReductionTC4RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC2VW4BigLoopWithReductionTC4RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp669:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp670:                               # EH_LABEL
# %bb.420:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_422
# %bb.421:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i746
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_422:                            # %__cxx_global_var_init.167.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_85_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_85_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp672:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp673:                               # EH_LABEL
# %bb.423:                              # %.noexc.i751
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.170)
	addi.d	$a2, $a2, %pc_lo12(.L.str.170)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp675:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp676:                               # EH_LABEL
# %bb.424:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC4VW4BigLoopWithReductionTC4RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC4VW4BigLoopWithReductionTC4RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp677:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp678:                               # EH_LABEL
# %bb.425:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_427
# %bb.426:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i755
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_427:                            # %__cxx_global_var_init.169.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_86_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_86_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp680:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp681:                               # EH_LABEL
# %bb.428:                              # %.noexc.i760
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.172)
	addi.d	$a2, $a2, %pc_lo12(.L.str.172)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp683:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp684:                               # EH_LABEL
# %bb.429:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC1VW1BigLoopWithReductionTC4RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC1VW1BigLoopWithReductionTC4RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp685:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp686:                               # EH_LABEL
# %bb.430:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_432
# %bb.431:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i764
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_432:                            # %__cxx_global_var_init.171.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_87_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_87_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp688:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp689:                               # EH_LABEL
# %bb.433:                              # %.noexc.i769
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.174)
	addi.d	$a2, $a2, %pc_lo12(.L.str.174)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp691:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp692:                               # EH_LABEL
# %bb.434:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC2VW1BigLoopWithReductionTC4RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC2VW1BigLoopWithReductionTC4RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp693:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp694:                               # EH_LABEL
# %bb.435:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_437
# %bb.436:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i773
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_437:                            # %__cxx_global_var_init.173.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_88_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_88_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp696:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp697:                               # EH_LABEL
# %bb.438:                              # %.noexc.i778
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.176)
	addi.d	$a2, $a2, %pc_lo12(.L.str.176)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp699:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp700:                               # EH_LABEL
# %bb.439:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC4VW1BigLoopWithReductionTC4RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC4VW1BigLoopWithReductionTC4RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp701:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp702:                               # EH_LABEL
# %bb.440:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_442
# %bb.441:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i782
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_442:                            # %__cxx_global_var_init.175.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_89_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_89_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp704:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp705:                               # EH_LABEL
# %bb.443:                              # %.noexc.i787
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.178)
	addi.d	$a2, $a2, %pc_lo12(.L.str.178)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp707:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp708:                               # EH_LABEL
# %bb.444:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchAutoVecForLoopTC7RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchAutoVecForLoopTC7RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp709:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp710:                               # EH_LABEL
# %bb.445:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_447
# %bb.446:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i791
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_447:                            # %__cxx_global_var_init.177.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_90_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_90_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 21
	st.d	$a0, $sp, 40
.Ltmp712:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp713:                               # EH_LABEL
# %bb.448:                              # %.noexc.i796
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.180)
	addi.d	$a2, $a2, %pc_lo12(.L.str.180)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 13
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 13
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp715:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp716:                               # EH_LABEL
# %bb.449:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z21benchForIC1VW4LoopTC7RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z21benchForIC1VW4LoopTC7RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp717:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp718:                               # EH_LABEL
# %bb.450:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_452
# %bb.451:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i800
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_452:                            # %__cxx_global_var_init.179.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_91_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_91_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 21
	st.d	$a0, $sp, 40
.Ltmp720:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp721:                               # EH_LABEL
# %bb.453:                              # %.noexc.i805
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.182)
	addi.d	$a2, $a2, %pc_lo12(.L.str.182)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 13
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 13
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp723:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp724:                               # EH_LABEL
# %bb.454:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z21benchForIC2VW4LoopTC7RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z21benchForIC2VW4LoopTC7RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp725:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp726:                               # EH_LABEL
# %bb.455:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_457
# %bb.456:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i809
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_457:                            # %__cxx_global_var_init.181.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_92_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_92_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 21
	st.d	$a0, $sp, 40
.Ltmp728:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp729:                               # EH_LABEL
# %bb.458:                              # %.noexc.i814
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.184)
	addi.d	$a2, $a2, %pc_lo12(.L.str.184)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 13
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 13
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp731:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp732:                               # EH_LABEL
# %bb.459:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z21benchForIC4VW4LoopTC7RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z21benchForIC4VW4LoopTC7RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp733:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp734:                               # EH_LABEL
# %bb.460:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_462
# %bb.461:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i818
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_462:                            # %__cxx_global_var_init.183.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_93_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_93_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp736:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp737:                               # EH_LABEL
# %bb.463:                              # %.noexc.i823
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.186)
	addi.d	$a2, $a2, %pc_lo12(.L.str.186)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp739:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp740:                               # EH_LABEL
# %bb.464:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForLoopWithReductionAutoVecTC7RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForLoopWithReductionAutoVecTC7RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp741:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp742:                               # EH_LABEL
# %bb.465:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_467
# %bb.466:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i827
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_467:                            # %__cxx_global_var_init.185.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_94_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_94_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp744:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp745:                               # EH_LABEL
# %bb.468:                              # %.noexc.i832
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.188)
	addi.d	$a2, $a2, %pc_lo12(.L.str.188)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp747:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp748:                               # EH_LABEL
# %bb.469:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC1VW4LoopWithReductionTC7RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC1VW4LoopWithReductionTC7RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp749:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp750:                               # EH_LABEL
# %bb.470:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_472
# %bb.471:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i836
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_472:                            # %__cxx_global_var_init.187.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_95_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_95_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp752:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp753:                               # EH_LABEL
# %bb.473:                              # %.noexc.i841
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.190)
	addi.d	$a2, $a2, %pc_lo12(.L.str.190)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp755:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp756:                               # EH_LABEL
# %bb.474:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC2VW4LoopWithReductionTC7RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC2VW4LoopWithReductionTC7RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp757:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp758:                               # EH_LABEL
# %bb.475:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_477
# %bb.476:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i845
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_477:                            # %__cxx_global_var_init.189.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_96_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_96_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp760:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp761:                               # EH_LABEL
# %bb.478:                              # %.noexc.i850
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.192)
	addi.d	$a2, $a2, %pc_lo12(.L.str.192)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp763:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp764:                               # EH_LABEL
# %bb.479:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC4VW4LoopWithReductionTC7RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC4VW4LoopWithReductionTC7RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp765:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp766:                               # EH_LABEL
# %bb.480:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_482
# %bb.481:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i854
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_482:                            # %__cxx_global_var_init.191.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_97_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_97_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp768:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp769:                               # EH_LABEL
# %bb.483:                              # %.noexc.i859
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.194)
	addi.d	$a2, $a2, %pc_lo12(.L.str.194)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp771:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp772:                               # EH_LABEL
# %bb.484:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC1VW1LoopWithReductionTC7RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC1VW1LoopWithReductionTC7RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp773:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp774:                               # EH_LABEL
# %bb.485:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_487
# %bb.486:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i863
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_487:                            # %__cxx_global_var_init.193.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_98_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_98_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp776:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp777:                               # EH_LABEL
# %bb.488:                              # %.noexc.i868
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.196)
	addi.d	$a2, $a2, %pc_lo12(.L.str.196)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp779:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp780:                               # EH_LABEL
# %bb.489:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC2VW1LoopWithReductionTC7RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC2VW1LoopWithReductionTC7RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp781:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp782:                               # EH_LABEL
# %bb.490:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_492
# %bb.491:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i872
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_492:                            # %__cxx_global_var_init.195.exit
	pcalau12i	$a0, %pc_hi20(_ZL28benchmark_uniq_99_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL28benchmark_uniq_99_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp784:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp785:                               # EH_LABEL
# %bb.493:                              # %.noexc.i877
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.198)
	addi.d	$a2, $a2, %pc_lo12(.L.str.198)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp787:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp788:                               # EH_LABEL
# %bb.494:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC4VW1LoopWithReductionTC7RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC4VW1LoopWithReductionTC7RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp789:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp790:                               # EH_LABEL
# %bb.495:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_497
# %bb.496:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i881
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_497:                            # %__cxx_global_var_init.197.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_100_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_100_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp792:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp793:                               # EH_LABEL
# %bb.498:                              # %.noexc.i886
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.200)
	addi.d	$a2, $a2, %pc_lo12(.L.str.200)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp795:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp796:                               # EH_LABEL
# %bb.499:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchAutoVecForBigLoopTC7RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchAutoVecForBigLoopTC7RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp797:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp798:                               # EH_LABEL
# %bb.500:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_502
# %bb.501:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i890
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_502:                            # %__cxx_global_var_init.199.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_101_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_101_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 24
	st.d	$a0, $sp, 40
.Ltmp800:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp801:                               # EH_LABEL
# %bb.503:                              # %.noexc.i895
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.202)
	addi.d	$a2, $a2, %pc_lo12(.L.str.202)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp803:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp804:                               # EH_LABEL
# %bb.504:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z24benchForIC1VW4BigLoopTC7RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z24benchForIC1VW4BigLoopTC7RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp805:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp806:                               # EH_LABEL
# %bb.505:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_507
# %bb.506:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i899
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_507:                            # %__cxx_global_var_init.201.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_102_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_102_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 24
	st.d	$a0, $sp, 40
.Ltmp808:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp809:                               # EH_LABEL
# %bb.508:                              # %.noexc.i904
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.204)
	addi.d	$a2, $a2, %pc_lo12(.L.str.204)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp811:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp812:                               # EH_LABEL
# %bb.509:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z24benchForIC2VW4BigLoopTC7RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z24benchForIC2VW4BigLoopTC7RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp813:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp814:                               # EH_LABEL
# %bb.510:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_512
# %bb.511:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i908
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_512:                            # %__cxx_global_var_init.203.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_103_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_103_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 24
	st.d	$a0, $sp, 40
.Ltmp816:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp817:                               # EH_LABEL
# %bb.513:                              # %.noexc.i913
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.206)
	addi.d	$a2, $a2, %pc_lo12(.L.str.206)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp819:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp820:                               # EH_LABEL
# %bb.514:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z24benchForIC4VW4BigLoopTC7RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z24benchForIC4VW4BigLoopTC7RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp821:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp822:                               # EH_LABEL
# %bb.515:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_517
# %bb.516:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i917
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_517:                            # %__cxx_global_var_init.205.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_104_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_104_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp824:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp825:                               # EH_LABEL
# %bb.518:                              # %.noexc.i922
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.208)
	addi.d	$a2, $a2, %pc_lo12(.L.str.208)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp827:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp828:                               # EH_LABEL
# %bb.519:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForBigLoopWithReductionAutoVecTC7RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForBigLoopWithReductionAutoVecTC7RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp829:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp830:                               # EH_LABEL
# %bb.520:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_522
# %bb.521:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i926
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_522:                            # %__cxx_global_var_init.207.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_105_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_105_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp832:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp833:                               # EH_LABEL
# %bb.523:                              # %.noexc.i931
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.210)
	addi.d	$a2, $a2, %pc_lo12(.L.str.210)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp835:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp836:                               # EH_LABEL
# %bb.524:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC1VW4BigLoopWithReductionTC7RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC1VW4BigLoopWithReductionTC7RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp837:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp838:                               # EH_LABEL
# %bb.525:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_527
# %bb.526:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i935
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_527:                            # %__cxx_global_var_init.209.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_106_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_106_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp840:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp841:                               # EH_LABEL
# %bb.528:                              # %.noexc.i940
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.212)
	addi.d	$a2, $a2, %pc_lo12(.L.str.212)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp843:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp844:                               # EH_LABEL
# %bb.529:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC2VW4BigLoopWithReductionTC7RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC2VW4BigLoopWithReductionTC7RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp845:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp846:                               # EH_LABEL
# %bb.530:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_532
# %bb.531:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i944
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_532:                            # %__cxx_global_var_init.211.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_107_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_107_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp848:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp849:                               # EH_LABEL
# %bb.533:                              # %.noexc.i949
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.214)
	addi.d	$a2, $a2, %pc_lo12(.L.str.214)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp851:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp852:                               # EH_LABEL
# %bb.534:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC4VW4BigLoopWithReductionTC7RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC4VW4BigLoopWithReductionTC7RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp853:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp854:                               # EH_LABEL
# %bb.535:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_537
# %bb.536:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i953
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_537:                            # %__cxx_global_var_init.213.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_108_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_108_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp856:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp857:                               # EH_LABEL
# %bb.538:                              # %.noexc.i958
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.216)
	addi.d	$a2, $a2, %pc_lo12(.L.str.216)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp859:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp860:                               # EH_LABEL
# %bb.539:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC1VW1BigLoopWithReductionTC7RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC1VW1BigLoopWithReductionTC7RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp861:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp862:                               # EH_LABEL
# %bb.540:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_542
# %bb.541:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i962
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_542:                            # %__cxx_global_var_init.215.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_109_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_109_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp864:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp865:                               # EH_LABEL
# %bb.543:                              # %.noexc.i967
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.218)
	addi.d	$a2, $a2, %pc_lo12(.L.str.218)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp867:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp868:                               # EH_LABEL
# %bb.544:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC2VW1BigLoopWithReductionTC7RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC2VW1BigLoopWithReductionTC7RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp869:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp870:                               # EH_LABEL
# %bb.545:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_547
# %bb.546:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i971
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_547:                            # %__cxx_global_var_init.217.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_110_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_110_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp872:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp873:                               # EH_LABEL
# %bb.548:                              # %.noexc.i976
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.220)
	addi.d	$a2, $a2, %pc_lo12(.L.str.220)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp875:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp876:                               # EH_LABEL
# %bb.549:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC4VW1BigLoopWithReductionTC7RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC4VW1BigLoopWithReductionTC7RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp877:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp878:                               # EH_LABEL
# %bb.550:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_552
# %bb.551:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i980
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_552:                            # %__cxx_global_var_init.219.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_111_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_111_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp880:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp881:                               # EH_LABEL
# %bb.553:                              # %.noexc.i985
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.222)
	addi.d	$a2, $a2, %pc_lo12(.L.str.222)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp883:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp884:                               # EH_LABEL
# %bb.554:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchAutoVecForLoopTC8RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchAutoVecForLoopTC8RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp885:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp886:                               # EH_LABEL
# %bb.555:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_557
# %bb.556:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i989
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_557:                            # %__cxx_global_var_init.221.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_112_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_112_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 21
	st.d	$a0, $sp, 40
.Ltmp888:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp889:                               # EH_LABEL
# %bb.558:                              # %.noexc.i994
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.224)
	addi.d	$a2, $a2, %pc_lo12(.L.str.224)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 13
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 13
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp891:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp892:                               # EH_LABEL
# %bb.559:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z21benchForIC1VW4LoopTC8RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z21benchForIC1VW4LoopTC8RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp893:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp894:                               # EH_LABEL
# %bb.560:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_562
# %bb.561:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i998
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_562:                            # %__cxx_global_var_init.223.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_113_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_113_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 21
	st.d	$a0, $sp, 40
.Ltmp896:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp897:                               # EH_LABEL
# %bb.563:                              # %.noexc.i1003
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.226)
	addi.d	$a2, $a2, %pc_lo12(.L.str.226)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 13
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 13
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp899:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp900:                               # EH_LABEL
# %bb.564:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z21benchForIC2VW4LoopTC8RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z21benchForIC2VW4LoopTC8RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp901:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp902:                               # EH_LABEL
# %bb.565:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_567
# %bb.566:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1007
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_567:                            # %__cxx_global_var_init.225.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_114_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_114_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 21
	st.d	$a0, $sp, 40
.Ltmp904:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp905:                               # EH_LABEL
# %bb.568:                              # %.noexc.i1012
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.228)
	addi.d	$a2, $a2, %pc_lo12(.L.str.228)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 13
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 13
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp907:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp908:                               # EH_LABEL
# %bb.569:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z21benchForIC4VW4LoopTC8RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z21benchForIC4VW4LoopTC8RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp909:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp910:                               # EH_LABEL
# %bb.570:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_572
# %bb.571:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1016
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_572:                            # %__cxx_global_var_init.227.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_115_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_115_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp912:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp913:                               # EH_LABEL
# %bb.573:                              # %.noexc.i1021
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.230)
	addi.d	$a2, $a2, %pc_lo12(.L.str.230)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp915:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp916:                               # EH_LABEL
# %bb.574:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForLoopWithReductionAutoVecTC8RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForLoopWithReductionAutoVecTC8RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp917:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp918:                               # EH_LABEL
# %bb.575:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_577
# %bb.576:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1025
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_577:                            # %__cxx_global_var_init.229.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_116_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_116_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp920:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp921:                               # EH_LABEL
# %bb.578:                              # %.noexc.i1030
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.232)
	addi.d	$a2, $a2, %pc_lo12(.L.str.232)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp923:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp924:                               # EH_LABEL
# %bb.579:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC1VW4LoopWithReductionTC8RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC1VW4LoopWithReductionTC8RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp925:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp926:                               # EH_LABEL
# %bb.580:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_582
# %bb.581:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1034
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_582:                            # %__cxx_global_var_init.231.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_117_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_117_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp928:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp929:                               # EH_LABEL
# %bb.583:                              # %.noexc.i1039
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.234)
	addi.d	$a2, $a2, %pc_lo12(.L.str.234)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp931:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp932:                               # EH_LABEL
# %bb.584:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC2VW4LoopWithReductionTC8RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC2VW4LoopWithReductionTC8RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp933:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp934:                               # EH_LABEL
# %bb.585:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_587
# %bb.586:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1043
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_587:                            # %__cxx_global_var_init.233.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_118_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_118_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp936:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp937:                               # EH_LABEL
# %bb.588:                              # %.noexc.i1048
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.236)
	addi.d	$a2, $a2, %pc_lo12(.L.str.236)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp939:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp940:                               # EH_LABEL
# %bb.589:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC4VW4LoopWithReductionTC8RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC4VW4LoopWithReductionTC8RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp941:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp942:                               # EH_LABEL
# %bb.590:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_592
# %bb.591:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1052
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_592:                            # %__cxx_global_var_init.235.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_119_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_119_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp944:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp945:                               # EH_LABEL
# %bb.593:                              # %.noexc.i1057
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.238)
	addi.d	$a2, $a2, %pc_lo12(.L.str.238)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp947:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp948:                               # EH_LABEL
# %bb.594:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC1VW1LoopWithReductionTC8RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC1VW1LoopWithReductionTC8RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp949:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp950:                               # EH_LABEL
# %bb.595:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_597
# %bb.596:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1061
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_597:                            # %__cxx_global_var_init.237.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_120_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_120_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp952:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp953:                               # EH_LABEL
# %bb.598:                              # %.noexc.i1066
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.240)
	addi.d	$a2, $a2, %pc_lo12(.L.str.240)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp955:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp956:                               # EH_LABEL
# %bb.599:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC2VW1LoopWithReductionTC8RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC2VW1LoopWithReductionTC8RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp957:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp958:                               # EH_LABEL
# %bb.600:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_602
# %bb.601:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1070
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_602:                            # %__cxx_global_var_init.239.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_121_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_121_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 34
	st.d	$a0, $sp, 40
.Ltmp960:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp961:                               # EH_LABEL
# %bb.603:                              # %.noexc.i1075
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.242)
	addi.d	$a2, $a2, %pc_lo12(.L.str.242)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.h	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.h	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp963:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp964:                               # EH_LABEL
# %bb.604:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z34benchForIC4VW1LoopWithReductionTC8RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z34benchForIC4VW1LoopWithReductionTC8RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp965:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp966:                               # EH_LABEL
# %bb.605:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_607
# %bb.606:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1079
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_607:                            # %__cxx_global_var_init.241.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_122_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_122_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp968:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp969:                               # EH_LABEL
# %bb.608:                              # %.noexc.i1084
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.244)
	addi.d	$a2, $a2, %pc_lo12(.L.str.244)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp971:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp972:                               # EH_LABEL
# %bb.609:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchAutoVecForBigLoopTC8RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchAutoVecForBigLoopTC8RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp973:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp974:                               # EH_LABEL
# %bb.610:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_612
# %bb.611:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1088
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_612:                            # %__cxx_global_var_init.243.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_123_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_123_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 24
	st.d	$a0, $sp, 40
.Ltmp976:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp977:                               # EH_LABEL
# %bb.613:                              # %.noexc.i1093
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.246)
	addi.d	$a2, $a2, %pc_lo12(.L.str.246)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp979:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp980:                               # EH_LABEL
# %bb.614:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z24benchForIC1VW4BigLoopTC8RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z24benchForIC1VW4BigLoopTC8RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp981:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp982:                               # EH_LABEL
# %bb.615:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_617
# %bb.616:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1097
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_617:                            # %__cxx_global_var_init.245.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_124_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_124_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 24
	st.d	$a0, $sp, 40
.Ltmp984:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp985:                               # EH_LABEL
# %bb.618:                              # %.noexc.i1102
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.248)
	addi.d	$a2, $a2, %pc_lo12(.L.str.248)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp987:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp988:                               # EH_LABEL
# %bb.619:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z24benchForIC2VW4BigLoopTC8RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z24benchForIC2VW4BigLoopTC8RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp989:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp990:                               # EH_LABEL
# %bb.620:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_622
# %bb.621:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1106
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_622:                            # %__cxx_global_var_init.247.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_125_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_125_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 24
	st.d	$a0, $sp, 40
.Ltmp992:                               # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp993:                               # EH_LABEL
# %bb.623:                              # %.noexc.i1111
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.250)
	addi.d	$a2, $a2, %pc_lo12(.L.str.250)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp995:                               # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp996:                               # EH_LABEL
# %bb.624:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z24benchForIC4VW4BigLoopTC8RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z24benchForIC4VW4BigLoopTC8RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp997:                               # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp998:                               # EH_LABEL
# %bb.625:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_627
# %bb.626:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1115
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_627:                            # %__cxx_global_var_init.249.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_126_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_126_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1000:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1001:                              # EH_LABEL
# %bb.628:                              # %.noexc.i1120
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.252)
	addi.d	$a2, $a2, %pc_lo12(.L.str.252)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1003:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1004:                              # EH_LABEL
# %bb.629:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForBigLoopWithReductionAutoVecTC8RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForBigLoopWithReductionAutoVecTC8RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1005:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1006:                              # EH_LABEL
# %bb.630:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_632
# %bb.631:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1124
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_632:                            # %__cxx_global_var_init.251.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_127_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_127_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp1008:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1009:                              # EH_LABEL
# %bb.633:                              # %.noexc.i1129
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.254)
	addi.d	$a2, $a2, %pc_lo12(.L.str.254)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1011:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1012:                              # EH_LABEL
# %bb.634:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC1VW4BigLoopWithReductionTC8RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC1VW4BigLoopWithReductionTC8RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1013:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1014:                              # EH_LABEL
# %bb.635:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_637
# %bb.636:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1133
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_637:                            # %__cxx_global_var_init.253.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_128_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_128_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp1016:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1017:                              # EH_LABEL
# %bb.638:                              # %.noexc.i1138
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.256)
	addi.d	$a2, $a2, %pc_lo12(.L.str.256)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1019:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1020:                              # EH_LABEL
# %bb.639:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC2VW4BigLoopWithReductionTC8RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC2VW4BigLoopWithReductionTC8RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1021:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1022:                              # EH_LABEL
# %bb.640:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_642
# %bb.641:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1142
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_642:                            # %__cxx_global_var_init.255.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_129_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_129_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp1024:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1025:                              # EH_LABEL
# %bb.643:                              # %.noexc.i1147
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.258)
	addi.d	$a2, $a2, %pc_lo12(.L.str.258)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1027:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1028:                              # EH_LABEL
# %bb.644:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC4VW4BigLoopWithReductionTC8RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC4VW4BigLoopWithReductionTC8RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1029:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1030:                              # EH_LABEL
# %bb.645:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_647
# %bb.646:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1151
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_647:                            # %__cxx_global_var_init.257.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_130_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_130_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp1032:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1033:                              # EH_LABEL
# %bb.648:                              # %.noexc.i1156
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.260)
	addi.d	$a2, $a2, %pc_lo12(.L.str.260)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1035:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1036:                              # EH_LABEL
# %bb.649:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC1VW1BigLoopWithReductionTC8RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC1VW1BigLoopWithReductionTC8RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1037:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1038:                              # EH_LABEL
# %bb.650:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_652
# %bb.651:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1160
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_652:                            # %__cxx_global_var_init.259.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_131_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_131_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp1040:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1041:                              # EH_LABEL
# %bb.653:                              # %.noexc.i1165
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.262)
	addi.d	$a2, $a2, %pc_lo12(.L.str.262)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1043:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1044:                              # EH_LABEL
# %bb.654:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC2VW1BigLoopWithReductionTC8RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC2VW1BigLoopWithReductionTC8RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1045:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1046:                              # EH_LABEL
# %bb.655:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_657
# %bb.656:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1169
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_657:                            # %__cxx_global_var_init.261.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_132_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_132_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp1048:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1049:                              # EH_LABEL
# %bb.658:                              # %.noexc.i1174
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.264)
	addi.d	$a2, $a2, %pc_lo12(.L.str.264)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1051:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1052:                              # EH_LABEL
# %bb.659:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForIC4VW1BigLoopWithReductionTC8RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForIC4VW1BigLoopWithReductionTC8RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1053:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1054:                              # EH_LABEL
# %bb.660:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_662
# %bb.661:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1178
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_662:                            # %__cxx_global_var_init.263.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_133_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_133_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 23
	st.d	$a0, $sp, 40
.Ltmp1056:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1057:                              # EH_LABEL
# %bb.663:                              # %.noexc.i1183
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.266)
	addi.d	$a2, $a2, %pc_lo12(.L.str.266)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 15
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 15
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1059:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1060:                              # EH_LABEL
# %bb.664:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z23benchAutoVecForLoopTC15RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z23benchAutoVecForLoopTC15RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1061:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1062:                              # EH_LABEL
# %bb.665:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_667
# %bb.666:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1187
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_667:                            # %__cxx_global_var_init.265.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_134_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_134_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp1064:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1065:                              # EH_LABEL
# %bb.668:                              # %.noexc.i1192
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.268)
	addi.d	$a2, $a2, %pc_lo12(.L.str.268)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1067:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1068:                              # EH_LABEL
# %bb.669:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchForIC1VW4LoopTC15RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchForIC1VW4LoopTC15RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1069:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1070:                              # EH_LABEL
# %bb.670:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_672
# %bb.671:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1196
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_672:                            # %__cxx_global_var_init.267.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_135_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_135_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp1072:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1073:                              # EH_LABEL
# %bb.673:                              # %.noexc.i1201
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.270)
	addi.d	$a2, $a2, %pc_lo12(.L.str.270)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1075:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1076:                              # EH_LABEL
# %bb.674:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchForIC2VW4LoopTC15RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchForIC2VW4LoopTC15RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1077:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1078:                              # EH_LABEL
# %bb.675:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_677
# %bb.676:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1205
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_677:                            # %__cxx_global_var_init.269.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_136_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_136_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp1080:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1081:                              # EH_LABEL
# %bb.678:                              # %.noexc.i1210
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.272)
	addi.d	$a2, $a2, %pc_lo12(.L.str.272)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1083:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1084:                              # EH_LABEL
# %bb.679:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchForIC4VW4LoopTC15RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchForIC4VW4LoopTC15RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1085:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1086:                              # EH_LABEL
# %bb.680:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_682
# %bb.681:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1214
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_682:                            # %__cxx_global_var_init.271.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_137_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_137_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 36
	st.d	$a0, $sp, 40
.Ltmp1088:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1089:                              # EH_LABEL
# %bb.683:                              # %.noexc.i1219
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.274)
	addi.d	$a2, $a2, %pc_lo12(.L.str.274)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1091:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1092:                              # EH_LABEL
# %bb.684:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z36benchForLoopWithReductionAutoVecTC15RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z36benchForLoopWithReductionAutoVecTC15RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1093:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1094:                              # EH_LABEL
# %bb.685:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_687
# %bb.686:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1223
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_687:                            # %__cxx_global_var_init.273.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_138_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_138_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1096:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1097:                              # EH_LABEL
# %bb.688:                              # %.noexc.i1228
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.276)
	addi.d	$a2, $a2, %pc_lo12(.L.str.276)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1099:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1100:                              # EH_LABEL
# %bb.689:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC1VW4LoopWithReductionTC15RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC1VW4LoopWithReductionTC15RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1101:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1102:                              # EH_LABEL
# %bb.690:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_692
# %bb.691:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1232
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_692:                            # %__cxx_global_var_init.275.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_139_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_139_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1104:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1105:                              # EH_LABEL
# %bb.693:                              # %.noexc.i1237
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.278)
	addi.d	$a2, $a2, %pc_lo12(.L.str.278)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1107:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1108:                              # EH_LABEL
# %bb.694:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC2VW4LoopWithReductionTC15RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC2VW4LoopWithReductionTC15RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1109:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1110:                              # EH_LABEL
# %bb.695:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_697
# %bb.696:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1241
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_697:                            # %__cxx_global_var_init.277.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_140_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_140_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1112:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1113:                              # EH_LABEL
# %bb.698:                              # %.noexc.i1246
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.280)
	addi.d	$a2, $a2, %pc_lo12(.L.str.280)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1115:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1116:                              # EH_LABEL
# %bb.699:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC4VW4LoopWithReductionTC15RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC4VW4LoopWithReductionTC15RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1117:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1118:                              # EH_LABEL
# %bb.700:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_702
# %bb.701:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1250
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_702:                            # %__cxx_global_var_init.279.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_141_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_141_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1120:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1121:                              # EH_LABEL
# %bb.703:                              # %.noexc.i1255
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.282)
	addi.d	$a2, $a2, %pc_lo12(.L.str.282)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1123:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1124:                              # EH_LABEL
# %bb.704:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC1VW1LoopWithReductionTC15RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC1VW1LoopWithReductionTC15RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1125:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1126:                              # EH_LABEL
# %bb.705:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_707
# %bb.706:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1259
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_707:                            # %__cxx_global_var_init.281.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_142_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_142_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1128:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1129:                              # EH_LABEL
# %bb.708:                              # %.noexc.i1264
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.284)
	addi.d	$a2, $a2, %pc_lo12(.L.str.284)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1131:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1132:                              # EH_LABEL
# %bb.709:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC2VW1LoopWithReductionTC15RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC2VW1LoopWithReductionTC15RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1133:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1134:                              # EH_LABEL
# %bb.710:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_712
# %bb.711:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1268
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_712:                            # %__cxx_global_var_init.283.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_143_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_143_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1136:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1137:                              # EH_LABEL
# %bb.713:                              # %.noexc.i1273
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.286)
	addi.d	$a2, $a2, %pc_lo12(.L.str.286)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1139:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1140:                              # EH_LABEL
# %bb.714:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC4VW1LoopWithReductionTC15RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC4VW1LoopWithReductionTC15RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1141:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1142:                              # EH_LABEL
# %bb.715:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_717
# %bb.716:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1277
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_717:                            # %__cxx_global_var_init.285.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_144_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_144_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 26
	st.d	$a0, $sp, 40
.Ltmp1144:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1145:                              # EH_LABEL
# %bb.718:                              # %.noexc.i1282
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.288)
	addi.d	$a2, $a2, %pc_lo12(.L.str.288)
	vld	$vr0, $a2, 0
	ld.h	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.h	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1147:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1148:                              # EH_LABEL
# %bb.719:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z26benchAutoVecForBigLoopTC15RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z26benchAutoVecForBigLoopTC15RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1149:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1150:                              # EH_LABEL
# %bb.720:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_722
# %bb.721:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1286
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_722:                            # %__cxx_global_var_init.287.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_145_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_145_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp1152:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1153:                              # EH_LABEL
# %bb.723:                              # %.noexc.i1291
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.290)
	addi.d	$a2, $a2, %pc_lo12(.L.str.290)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1155:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1156:                              # EH_LABEL
# %bb.724:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchForIC1VW4BigLoopTC15RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchForIC1VW4BigLoopTC15RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1157:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1158:                              # EH_LABEL
# %bb.725:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_727
# %bb.726:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1295
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_727:                            # %__cxx_global_var_init.289.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_146_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_146_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp1160:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1161:                              # EH_LABEL
# %bb.728:                              # %.noexc.i1300
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.292)
	addi.d	$a2, $a2, %pc_lo12(.L.str.292)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1163:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1164:                              # EH_LABEL
# %bb.729:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchForIC2VW4BigLoopTC15RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchForIC2VW4BigLoopTC15RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1165:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1166:                              # EH_LABEL
# %bb.730:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_732
# %bb.731:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1304
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_732:                            # %__cxx_global_var_init.291.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_147_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_147_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp1168:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1169:                              # EH_LABEL
# %bb.733:                              # %.noexc.i1309
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.294)
	addi.d	$a2, $a2, %pc_lo12(.L.str.294)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1171:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1172:                              # EH_LABEL
# %bb.734:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchForIC4VW4BigLoopTC15RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchForIC4VW4BigLoopTC15RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1173:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1174:                              # EH_LABEL
# %bb.735:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_737
# %bb.736:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1313
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_737:                            # %__cxx_global_var_init.293.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_148_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_148_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 39
	st.d	$a0, $sp, 40
.Ltmp1176:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1177:                              # EH_LABEL
# %bb.738:                              # %.noexc.i1318
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.296)
	addi.d	$a2, $a2, %pc_lo12(.L.str.296)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1179:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1180:                              # EH_LABEL
# %bb.739:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z39benchForBigLoopWithReductionAutoVecTC15RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z39benchForBigLoopWithReductionAutoVecTC15RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1181:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1182:                              # EH_LABEL
# %bb.740:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_742
# %bb.741:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1322
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_742:                            # %__cxx_global_var_init.295.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_149_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_149_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1184:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1185:                              # EH_LABEL
# %bb.743:                              # %.noexc.i1327
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.298)
	addi.d	$a2, $a2, %pc_lo12(.L.str.298)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1187:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1188:                              # EH_LABEL
# %bb.744:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC1VW4BigLoopWithReductionTC15RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC1VW4BigLoopWithReductionTC15RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1189:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1190:                              # EH_LABEL
# %bb.745:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_747
# %bb.746:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1331
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_747:                            # %__cxx_global_var_init.297.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_150_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_150_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1192:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1193:                              # EH_LABEL
# %bb.748:                              # %.noexc.i1336
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.300)
	addi.d	$a2, $a2, %pc_lo12(.L.str.300)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1195:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1196:                              # EH_LABEL
# %bb.749:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC2VW4BigLoopWithReductionTC15RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC2VW4BigLoopWithReductionTC15RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1197:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1198:                              # EH_LABEL
# %bb.750:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_752
# %bb.751:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1340
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_752:                            # %__cxx_global_var_init.299.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_151_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_151_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1200:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1201:                              # EH_LABEL
# %bb.753:                              # %.noexc.i1345
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.302)
	addi.d	$a2, $a2, %pc_lo12(.L.str.302)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1203:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1204:                              # EH_LABEL
# %bb.754:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC4VW4BigLoopWithReductionTC15RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC4VW4BigLoopWithReductionTC15RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1205:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1206:                              # EH_LABEL
# %bb.755:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_757
# %bb.756:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1349
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_757:                            # %__cxx_global_var_init.301.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_152_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_152_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1208:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1209:                              # EH_LABEL
# %bb.758:                              # %.noexc.i1354
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.304)
	addi.d	$a2, $a2, %pc_lo12(.L.str.304)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1211:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1212:                              # EH_LABEL
# %bb.759:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC1VW1BigLoopWithReductionTC15RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC1VW1BigLoopWithReductionTC15RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1213:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1214:                              # EH_LABEL
# %bb.760:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_762
# %bb.761:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1358
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_762:                            # %__cxx_global_var_init.303.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_153_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_153_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1216:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1217:                              # EH_LABEL
# %bb.763:                              # %.noexc.i1363
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.306)
	addi.d	$a2, $a2, %pc_lo12(.L.str.306)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1219:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1220:                              # EH_LABEL
# %bb.764:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC2VW1BigLoopWithReductionTC15RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC2VW1BigLoopWithReductionTC15RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1221:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1222:                              # EH_LABEL
# %bb.765:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_767
# %bb.766:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1367
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_767:                            # %__cxx_global_var_init.305.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_154_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_154_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1224:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1225:                              # EH_LABEL
# %bb.768:                              # %.noexc.i1372
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.308)
	addi.d	$a2, $a2, %pc_lo12(.L.str.308)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1227:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1228:                              # EH_LABEL
# %bb.769:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC4VW1BigLoopWithReductionTC15RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC4VW1BigLoopWithReductionTC15RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1229:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1230:                              # EH_LABEL
# %bb.770:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_772
# %bb.771:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1376
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_772:                            # %__cxx_global_var_init.307.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_155_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_155_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 23
	st.d	$a0, $sp, 40
.Ltmp1232:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1233:                              # EH_LABEL
# %bb.773:                              # %.noexc.i1381
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.310)
	addi.d	$a2, $a2, %pc_lo12(.L.str.310)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 15
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 15
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1235:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1236:                              # EH_LABEL
# %bb.774:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z23benchAutoVecForLoopTC16RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z23benchAutoVecForLoopTC16RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1237:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1238:                              # EH_LABEL
# %bb.775:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_777
# %bb.776:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1385
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_777:                            # %__cxx_global_var_init.309.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_156_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_156_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp1240:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1241:                              # EH_LABEL
# %bb.778:                              # %.noexc.i1390
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.312)
	addi.d	$a2, $a2, %pc_lo12(.L.str.312)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1243:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1244:                              # EH_LABEL
# %bb.779:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchForIC1VW4LoopTC16RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchForIC1VW4LoopTC16RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1245:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1246:                              # EH_LABEL
# %bb.780:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_782
# %bb.781:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1394
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_782:                            # %__cxx_global_var_init.311.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_157_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_157_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp1248:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1249:                              # EH_LABEL
# %bb.783:                              # %.noexc.i1399
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.314)
	addi.d	$a2, $a2, %pc_lo12(.L.str.314)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1251:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1252:                              # EH_LABEL
# %bb.784:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchForIC2VW4LoopTC16RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchForIC2VW4LoopTC16RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1253:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1254:                              # EH_LABEL
# %bb.785:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_787
# %bb.786:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1403
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_787:                            # %__cxx_global_var_init.313.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_158_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_158_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp1256:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1257:                              # EH_LABEL
# %bb.788:                              # %.noexc.i1408
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.316)
	addi.d	$a2, $a2, %pc_lo12(.L.str.316)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1259:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1260:                              # EH_LABEL
# %bb.789:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchForIC4VW4LoopTC16RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchForIC4VW4LoopTC16RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1261:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1262:                              # EH_LABEL
# %bb.790:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_792
# %bb.791:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1412
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_792:                            # %__cxx_global_var_init.315.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_159_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_159_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 36
	st.d	$a0, $sp, 40
.Ltmp1264:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1265:                              # EH_LABEL
# %bb.793:                              # %.noexc.i1417
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.318)
	addi.d	$a2, $a2, %pc_lo12(.L.str.318)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1267:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1268:                              # EH_LABEL
# %bb.794:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z36benchForLoopWithReductionAutoVecTC16RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z36benchForLoopWithReductionAutoVecTC16RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1269:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1270:                              # EH_LABEL
# %bb.795:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_797
# %bb.796:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1421
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_797:                            # %__cxx_global_var_init.317.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_160_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_160_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1272:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1273:                              # EH_LABEL
# %bb.798:                              # %.noexc.i1426
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.320)
	addi.d	$a2, $a2, %pc_lo12(.L.str.320)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1275:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1276:                              # EH_LABEL
# %bb.799:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC1VW4LoopWithReductionTC16RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC1VW4LoopWithReductionTC16RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1277:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1278:                              # EH_LABEL
# %bb.800:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_802
# %bb.801:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1430
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_802:                            # %__cxx_global_var_init.319.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_161_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_161_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1280:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1281:                              # EH_LABEL
# %bb.803:                              # %.noexc.i1435
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.322)
	addi.d	$a2, $a2, %pc_lo12(.L.str.322)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1283:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1284:                              # EH_LABEL
# %bb.804:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC2VW4LoopWithReductionTC16RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC2VW4LoopWithReductionTC16RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1285:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1286:                              # EH_LABEL
# %bb.805:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_807
# %bb.806:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1439
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_807:                            # %__cxx_global_var_init.321.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_162_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_162_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1288:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1289:                              # EH_LABEL
# %bb.808:                              # %.noexc.i1444
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.324)
	addi.d	$a2, $a2, %pc_lo12(.L.str.324)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1291:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1292:                              # EH_LABEL
# %bb.809:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC4VW4LoopWithReductionTC16RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC4VW4LoopWithReductionTC16RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1293:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1294:                              # EH_LABEL
# %bb.810:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_812
# %bb.811:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1448
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_812:                            # %__cxx_global_var_init.323.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_163_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_163_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1296:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1297:                              # EH_LABEL
# %bb.813:                              # %.noexc.i1453
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.326)
	addi.d	$a2, $a2, %pc_lo12(.L.str.326)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1299:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1300:                              # EH_LABEL
# %bb.814:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC1VW1LoopWithReductionTC16RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC1VW1LoopWithReductionTC16RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1301:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1302:                              # EH_LABEL
# %bb.815:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_817
# %bb.816:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1457
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_817:                            # %__cxx_global_var_init.325.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_164_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_164_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1304:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1305:                              # EH_LABEL
# %bb.818:                              # %.noexc.i1462
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.328)
	addi.d	$a2, $a2, %pc_lo12(.L.str.328)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1307:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1308:                              # EH_LABEL
# %bb.819:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC2VW1LoopWithReductionTC16RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC2VW1LoopWithReductionTC16RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1309:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1310:                              # EH_LABEL
# %bb.820:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_822
# %bb.821:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1466
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_822:                            # %__cxx_global_var_init.327.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_165_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_165_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1312:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1313:                              # EH_LABEL
# %bb.823:                              # %.noexc.i1471
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.330)
	addi.d	$a2, $a2, %pc_lo12(.L.str.330)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1315:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1316:                              # EH_LABEL
# %bb.824:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC4VW1LoopWithReductionTC16RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC4VW1LoopWithReductionTC16RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1317:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1318:                              # EH_LABEL
# %bb.825:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_827
# %bb.826:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1475
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_827:                            # %__cxx_global_var_init.329.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_166_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_166_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 26
	st.d	$a0, $sp, 40
.Ltmp1320:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1321:                              # EH_LABEL
# %bb.828:                              # %.noexc.i1480
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.332)
	addi.d	$a2, $a2, %pc_lo12(.L.str.332)
	vld	$vr0, $a2, 0
	ld.h	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.h	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1323:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1324:                              # EH_LABEL
# %bb.829:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z26benchAutoVecForBigLoopTC16RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z26benchAutoVecForBigLoopTC16RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1325:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1326:                              # EH_LABEL
# %bb.830:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_832
# %bb.831:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1484
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_832:                            # %__cxx_global_var_init.331.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_167_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_167_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp1328:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1329:                              # EH_LABEL
# %bb.833:                              # %.noexc.i1489
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.334)
	addi.d	$a2, $a2, %pc_lo12(.L.str.334)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1331:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1332:                              # EH_LABEL
# %bb.834:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchForIC1VW4BigLoopTC16RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchForIC1VW4BigLoopTC16RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1333:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1334:                              # EH_LABEL
# %bb.835:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_837
# %bb.836:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1493
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_837:                            # %__cxx_global_var_init.333.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_168_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_168_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp1336:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1337:                              # EH_LABEL
# %bb.838:                              # %.noexc.i1498
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.336)
	addi.d	$a2, $a2, %pc_lo12(.L.str.336)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1339:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1340:                              # EH_LABEL
# %bb.839:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchForIC2VW4BigLoopTC16RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchForIC2VW4BigLoopTC16RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1341:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1342:                              # EH_LABEL
# %bb.840:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_842
# %bb.841:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1502
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_842:                            # %__cxx_global_var_init.335.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_169_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_169_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp1344:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1345:                              # EH_LABEL
# %bb.843:                              # %.noexc.i1507
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.338)
	addi.d	$a2, $a2, %pc_lo12(.L.str.338)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1347:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1348:                              # EH_LABEL
# %bb.844:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchForIC4VW4BigLoopTC16RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchForIC4VW4BigLoopTC16RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1349:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1350:                              # EH_LABEL
# %bb.845:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_847
# %bb.846:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1511
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_847:                            # %__cxx_global_var_init.337.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_170_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_170_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 39
	st.d	$a0, $sp, 40
.Ltmp1352:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1353:                              # EH_LABEL
# %bb.848:                              # %.noexc.i1516
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.340)
	addi.d	$a2, $a2, %pc_lo12(.L.str.340)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1355:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1356:                              # EH_LABEL
# %bb.849:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z39benchForBigLoopWithReductionAutoVecTC16RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z39benchForBigLoopWithReductionAutoVecTC16RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1357:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1358:                              # EH_LABEL
# %bb.850:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_852
# %bb.851:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1520
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_852:                            # %__cxx_global_var_init.339.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_171_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_171_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1360:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1361:                              # EH_LABEL
# %bb.853:                              # %.noexc.i1525
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.342)
	addi.d	$a2, $a2, %pc_lo12(.L.str.342)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1363:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1364:                              # EH_LABEL
# %bb.854:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC1VW4BigLoopWithReductionTC16RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC1VW4BigLoopWithReductionTC16RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1365:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1366:                              # EH_LABEL
# %bb.855:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_857
# %bb.856:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1529
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_857:                            # %__cxx_global_var_init.341.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_172_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_172_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1368:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1369:                              # EH_LABEL
# %bb.858:                              # %.noexc.i1534
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.344)
	addi.d	$a2, $a2, %pc_lo12(.L.str.344)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1371:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1372:                              # EH_LABEL
# %bb.859:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC2VW4BigLoopWithReductionTC16RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC2VW4BigLoopWithReductionTC16RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1373:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1374:                              # EH_LABEL
# %bb.860:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_862
# %bb.861:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1538
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_862:                            # %__cxx_global_var_init.343.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_173_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_173_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1376:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1377:                              # EH_LABEL
# %bb.863:                              # %.noexc.i1543
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.346)
	addi.d	$a2, $a2, %pc_lo12(.L.str.346)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1379:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1380:                              # EH_LABEL
# %bb.864:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC4VW4BigLoopWithReductionTC16RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC4VW4BigLoopWithReductionTC16RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1381:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1382:                              # EH_LABEL
# %bb.865:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_867
# %bb.866:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1547
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_867:                            # %__cxx_global_var_init.345.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_174_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_174_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1384:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1385:                              # EH_LABEL
# %bb.868:                              # %.noexc.i1552
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.348)
	addi.d	$a2, $a2, %pc_lo12(.L.str.348)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1387:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1388:                              # EH_LABEL
# %bb.869:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC1VW1BigLoopWithReductionTC16RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC1VW1BigLoopWithReductionTC16RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1389:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1390:                              # EH_LABEL
# %bb.870:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_872
# %bb.871:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1556
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_872:                            # %__cxx_global_var_init.347.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_175_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_175_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1392:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1393:                              # EH_LABEL
# %bb.873:                              # %.noexc.i1561
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.350)
	addi.d	$a2, $a2, %pc_lo12(.L.str.350)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1395:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1396:                              # EH_LABEL
# %bb.874:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC2VW1BigLoopWithReductionTC16RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC2VW1BigLoopWithReductionTC16RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1397:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1398:                              # EH_LABEL
# %bb.875:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_877
# %bb.876:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1565
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_877:                            # %__cxx_global_var_init.349.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_176_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_176_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1400:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1401:                              # EH_LABEL
# %bb.878:                              # %.noexc.i1570
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.352)
	addi.d	$a2, $a2, %pc_lo12(.L.str.352)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1403:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1404:                              # EH_LABEL
# %bb.879:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC4VW1BigLoopWithReductionTC16RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC4VW1BigLoopWithReductionTC16RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1405:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1406:                              # EH_LABEL
# %bb.880:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_882
# %bb.881:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1574
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_882:                            # %__cxx_global_var_init.351.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_177_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_177_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 23
	st.d	$a0, $sp, 40
.Ltmp1408:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1409:                              # EH_LABEL
# %bb.883:                              # %.noexc.i1579
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.354)
	addi.d	$a2, $a2, %pc_lo12(.L.str.354)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 15
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 15
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1411:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1412:                              # EH_LABEL
# %bb.884:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z23benchAutoVecForLoopTC31RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z23benchAutoVecForLoopTC31RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1413:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1414:                              # EH_LABEL
# %bb.885:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_887
# %bb.886:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1583
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_887:                            # %__cxx_global_var_init.353.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_178_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_178_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp1416:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1417:                              # EH_LABEL
# %bb.888:                              # %.noexc.i1588
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.356)
	addi.d	$a2, $a2, %pc_lo12(.L.str.356)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1419:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1420:                              # EH_LABEL
# %bb.889:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchForIC1VW4LoopTC31RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchForIC1VW4LoopTC31RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1421:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1422:                              # EH_LABEL
# %bb.890:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_892
# %bb.891:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1592
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_892:                            # %__cxx_global_var_init.355.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_179_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_179_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp1424:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1425:                              # EH_LABEL
# %bb.893:                              # %.noexc.i1597
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.358)
	addi.d	$a2, $a2, %pc_lo12(.L.str.358)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1427:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1428:                              # EH_LABEL
# %bb.894:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchForIC2VW4LoopTC31RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchForIC2VW4LoopTC31RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1429:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1430:                              # EH_LABEL
# %bb.895:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_897
# %bb.896:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1601
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_897:                            # %__cxx_global_var_init.357.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_180_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_180_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp1432:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1433:                              # EH_LABEL
# %bb.898:                              # %.noexc.i1606
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.360)
	addi.d	$a2, $a2, %pc_lo12(.L.str.360)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1435:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1436:                              # EH_LABEL
# %bb.899:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchForIC4VW4LoopTC31RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchForIC4VW4LoopTC31RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1437:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1438:                              # EH_LABEL
# %bb.900:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_902
# %bb.901:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1610
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_902:                            # %__cxx_global_var_init.359.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_181_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_181_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 36
	st.d	$a0, $sp, 40
.Ltmp1440:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1441:                              # EH_LABEL
# %bb.903:                              # %.noexc.i1615
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.362)
	addi.d	$a2, $a2, %pc_lo12(.L.str.362)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1443:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1444:                              # EH_LABEL
# %bb.904:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z36benchForLoopWithReductionAutoVecTC31RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z36benchForLoopWithReductionAutoVecTC31RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1445:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1446:                              # EH_LABEL
# %bb.905:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_907
# %bb.906:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1619
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_907:                            # %__cxx_global_var_init.361.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_182_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_182_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1448:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1449:                              # EH_LABEL
# %bb.908:                              # %.noexc.i1624
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.364)
	addi.d	$a2, $a2, %pc_lo12(.L.str.364)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1451:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1452:                              # EH_LABEL
# %bb.909:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC1VW4LoopWithReductionTC31RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC1VW4LoopWithReductionTC31RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1453:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1454:                              # EH_LABEL
# %bb.910:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_912
# %bb.911:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1628
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_912:                            # %__cxx_global_var_init.363.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_183_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_183_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1456:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1457:                              # EH_LABEL
# %bb.913:                              # %.noexc.i1633
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.366)
	addi.d	$a2, $a2, %pc_lo12(.L.str.366)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1459:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1460:                              # EH_LABEL
# %bb.914:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC2VW4LoopWithReductionTC31RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC2VW4LoopWithReductionTC31RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1461:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1462:                              # EH_LABEL
# %bb.915:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_917
# %bb.916:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1637
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_917:                            # %__cxx_global_var_init.365.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_184_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_184_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1464:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1465:                              # EH_LABEL
# %bb.918:                              # %.noexc.i1642
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.368)
	addi.d	$a2, $a2, %pc_lo12(.L.str.368)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1467:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1468:                              # EH_LABEL
# %bb.919:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC4VW4LoopWithReductionTC31RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC4VW4LoopWithReductionTC31RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1469:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1470:                              # EH_LABEL
# %bb.920:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_922
# %bb.921:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1646
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_922:                            # %__cxx_global_var_init.367.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_185_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_185_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1472:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1473:                              # EH_LABEL
# %bb.923:                              # %.noexc.i1651
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.370)
	addi.d	$a2, $a2, %pc_lo12(.L.str.370)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1475:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1476:                              # EH_LABEL
# %bb.924:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC1VW1LoopWithReductionTC31RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC1VW1LoopWithReductionTC31RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1477:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1478:                              # EH_LABEL
# %bb.925:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_927
# %bb.926:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1655
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_927:                            # %__cxx_global_var_init.369.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_186_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_186_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1480:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1481:                              # EH_LABEL
# %bb.928:                              # %.noexc.i1660
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.372)
	addi.d	$a2, $a2, %pc_lo12(.L.str.372)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1483:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1484:                              # EH_LABEL
# %bb.929:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC2VW1LoopWithReductionTC31RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC2VW1LoopWithReductionTC31RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1485:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1486:                              # EH_LABEL
# %bb.930:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_932
# %bb.931:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1664
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_932:                            # %__cxx_global_var_init.371.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_187_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_187_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1488:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1489:                              # EH_LABEL
# %bb.933:                              # %.noexc.i1669
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.374)
	addi.d	$a2, $a2, %pc_lo12(.L.str.374)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1491:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1492:                              # EH_LABEL
# %bb.934:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC4VW1LoopWithReductionTC31RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC4VW1LoopWithReductionTC31RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1493:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1494:                              # EH_LABEL
# %bb.935:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_937
# %bb.936:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1673
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_937:                            # %__cxx_global_var_init.373.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_188_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_188_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 26
	st.d	$a0, $sp, 40
.Ltmp1496:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1497:                              # EH_LABEL
# %bb.938:                              # %.noexc.i1678
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.376)
	addi.d	$a2, $a2, %pc_lo12(.L.str.376)
	vld	$vr0, $a2, 0
	ld.h	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.h	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1499:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1500:                              # EH_LABEL
# %bb.939:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z26benchAutoVecForBigLoopTC31RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z26benchAutoVecForBigLoopTC31RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1501:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1502:                              # EH_LABEL
# %bb.940:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_942
# %bb.941:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1682
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_942:                            # %__cxx_global_var_init.375.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_189_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_189_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp1504:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1505:                              # EH_LABEL
# %bb.943:                              # %.noexc.i1687
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.378)
	addi.d	$a2, $a2, %pc_lo12(.L.str.378)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1507:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1508:                              # EH_LABEL
# %bb.944:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchForIC1VW4BigLoopTC31RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchForIC1VW4BigLoopTC31RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1509:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1510:                              # EH_LABEL
# %bb.945:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_947
# %bb.946:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1691
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_947:                            # %__cxx_global_var_init.377.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_190_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_190_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp1512:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1513:                              # EH_LABEL
# %bb.948:                              # %.noexc.i1696
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.380)
	addi.d	$a2, $a2, %pc_lo12(.L.str.380)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1515:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1516:                              # EH_LABEL
# %bb.949:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchForIC2VW4BigLoopTC31RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchForIC2VW4BigLoopTC31RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1517:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1518:                              # EH_LABEL
# %bb.950:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_952
# %bb.951:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1700
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_952:                            # %__cxx_global_var_init.379.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_191_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_191_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp1520:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1521:                              # EH_LABEL
# %bb.953:                              # %.noexc.i1705
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.382)
	addi.d	$a2, $a2, %pc_lo12(.L.str.382)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1523:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1524:                              # EH_LABEL
# %bb.954:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchForIC4VW4BigLoopTC31RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchForIC4VW4BigLoopTC31RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1525:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1526:                              # EH_LABEL
# %bb.955:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_957
# %bb.956:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1709
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_957:                            # %__cxx_global_var_init.381.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_192_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_192_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 39
	st.d	$a0, $sp, 40
.Ltmp1528:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1529:                              # EH_LABEL
# %bb.958:                              # %.noexc.i1714
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.384)
	addi.d	$a2, $a2, %pc_lo12(.L.str.384)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1531:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1532:                              # EH_LABEL
# %bb.959:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z39benchForBigLoopWithReductionAutoVecTC31RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z39benchForBigLoopWithReductionAutoVecTC31RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1533:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1534:                              # EH_LABEL
# %bb.960:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_962
# %bb.961:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1718
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_962:                            # %__cxx_global_var_init.383.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_193_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_193_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1536:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1537:                              # EH_LABEL
# %bb.963:                              # %.noexc.i1723
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.386)
	addi.d	$a2, $a2, %pc_lo12(.L.str.386)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1539:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1540:                              # EH_LABEL
# %bb.964:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC1VW4BigLoopWithReductionTC31RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC1VW4BigLoopWithReductionTC31RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1541:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1542:                              # EH_LABEL
# %bb.965:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_967
# %bb.966:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1727
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_967:                            # %__cxx_global_var_init.385.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_194_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_194_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1544:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1545:                              # EH_LABEL
# %bb.968:                              # %.noexc.i1732
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.388)
	addi.d	$a2, $a2, %pc_lo12(.L.str.388)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1547:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1548:                              # EH_LABEL
# %bb.969:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC2VW4BigLoopWithReductionTC31RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC2VW4BigLoopWithReductionTC31RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1549:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1550:                              # EH_LABEL
# %bb.970:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_972
# %bb.971:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1736
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_972:                            # %__cxx_global_var_init.387.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_195_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_195_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1552:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1553:                              # EH_LABEL
# %bb.973:                              # %.noexc.i1741
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.390)
	addi.d	$a2, $a2, %pc_lo12(.L.str.390)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1555:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1556:                              # EH_LABEL
# %bb.974:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC4VW4BigLoopWithReductionTC31RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC4VW4BigLoopWithReductionTC31RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1557:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1558:                              # EH_LABEL
# %bb.975:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_977
# %bb.976:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1745
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_977:                            # %__cxx_global_var_init.389.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_196_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_196_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1560:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1561:                              # EH_LABEL
# %bb.978:                              # %.noexc.i1750
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.392)
	addi.d	$a2, $a2, %pc_lo12(.L.str.392)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1563:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1564:                              # EH_LABEL
# %bb.979:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC1VW1BigLoopWithReductionTC31RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC1VW1BigLoopWithReductionTC31RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1565:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1566:                              # EH_LABEL
# %bb.980:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_982
# %bb.981:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1754
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_982:                            # %__cxx_global_var_init.391.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_197_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_197_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1568:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1569:                              # EH_LABEL
# %bb.983:                              # %.noexc.i1759
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.394)
	addi.d	$a2, $a2, %pc_lo12(.L.str.394)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1571:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1572:                              # EH_LABEL
# %bb.984:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC2VW1BigLoopWithReductionTC31RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC2VW1BigLoopWithReductionTC31RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1573:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1574:                              # EH_LABEL
# %bb.985:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_987
# %bb.986:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1763
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_987:                            # %__cxx_global_var_init.393.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_198_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_198_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1576:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1577:                              # EH_LABEL
# %bb.988:                              # %.noexc.i1768
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.396)
	addi.d	$a2, $a2, %pc_lo12(.L.str.396)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1579:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1580:                              # EH_LABEL
# %bb.989:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC4VW1BigLoopWithReductionTC31RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC4VW1BigLoopWithReductionTC31RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1581:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1582:                              # EH_LABEL
# %bb.990:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_992
# %bb.991:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1772
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_992:                            # %__cxx_global_var_init.395.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_199_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_199_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 23
	st.d	$a0, $sp, 40
.Ltmp1584:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1585:                              # EH_LABEL
# %bb.993:                              # %.noexc.i1777
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.398)
	addi.d	$a2, $a2, %pc_lo12(.L.str.398)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 15
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 15
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1587:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1588:                              # EH_LABEL
# %bb.994:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z23benchAutoVecForLoopTC32RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z23benchAutoVecForLoopTC32RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1589:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1590:                              # EH_LABEL
# %bb.995:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_997
# %bb.996:                              # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1781
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_997:                            # %__cxx_global_var_init.397.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_200_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_200_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp1592:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1593:                              # EH_LABEL
# %bb.998:                              # %.noexc.i1786
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.400)
	addi.d	$a2, $a2, %pc_lo12(.L.str.400)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1595:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1596:                              # EH_LABEL
# %bb.999:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchForIC1VW4LoopTC32RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchForIC1VW4LoopTC32RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1597:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1598:                              # EH_LABEL
# %bb.1000:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1002
# %bb.1001:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1790
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1002:                           # %__cxx_global_var_init.399.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_201_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_201_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp1600:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1601:                              # EH_LABEL
# %bb.1003:                             # %.noexc.i1795
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.402)
	addi.d	$a2, $a2, %pc_lo12(.L.str.402)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1603:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1604:                              # EH_LABEL
# %bb.1004:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchForIC2VW4LoopTC32RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchForIC2VW4LoopTC32RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1605:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1606:                              # EH_LABEL
# %bb.1005:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1007
# %bb.1006:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1799
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1007:                           # %__cxx_global_var_init.401.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_202_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_202_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp1608:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1609:                              # EH_LABEL
# %bb.1008:                             # %.noexc.i1804
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.404)
	addi.d	$a2, $a2, %pc_lo12(.L.str.404)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1611:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1612:                              # EH_LABEL
# %bb.1009:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchForIC4VW4LoopTC32RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchForIC4VW4LoopTC32RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1613:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1614:                              # EH_LABEL
# %bb.1010:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1012
# %bb.1011:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1808
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1012:                           # %__cxx_global_var_init.403.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_203_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_203_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 36
	st.d	$a0, $sp, 40
.Ltmp1616:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1617:                              # EH_LABEL
# %bb.1013:                             # %.noexc.i1813
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.406)
	addi.d	$a2, $a2, %pc_lo12(.L.str.406)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1619:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1620:                              # EH_LABEL
# %bb.1014:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z36benchForLoopWithReductionAutoVecTC32RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z36benchForLoopWithReductionAutoVecTC32RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1621:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1622:                              # EH_LABEL
# %bb.1015:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1017
# %bb.1016:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1817
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1017:                           # %__cxx_global_var_init.405.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_204_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_204_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1624:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1625:                              # EH_LABEL
# %bb.1018:                             # %.noexc.i1822
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.408)
	addi.d	$a2, $a2, %pc_lo12(.L.str.408)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1627:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1628:                              # EH_LABEL
# %bb.1019:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC1VW4LoopWithReductionTC32RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC1VW4LoopWithReductionTC32RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1629:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1630:                              # EH_LABEL
# %bb.1020:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1022
# %bb.1021:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1826
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1022:                           # %__cxx_global_var_init.407.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_205_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_205_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1632:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1633:                              # EH_LABEL
# %bb.1023:                             # %.noexc.i1831
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.410)
	addi.d	$a2, $a2, %pc_lo12(.L.str.410)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1635:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1636:                              # EH_LABEL
# %bb.1024:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC2VW4LoopWithReductionTC32RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC2VW4LoopWithReductionTC32RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1637:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1638:                              # EH_LABEL
# %bb.1025:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1027
# %bb.1026:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1835
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1027:                           # %__cxx_global_var_init.409.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_206_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_206_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1640:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1641:                              # EH_LABEL
# %bb.1028:                             # %.noexc.i1840
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.412)
	addi.d	$a2, $a2, %pc_lo12(.L.str.412)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1643:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1644:                              # EH_LABEL
# %bb.1029:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC4VW4LoopWithReductionTC32RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC4VW4LoopWithReductionTC32RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1645:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1646:                              # EH_LABEL
# %bb.1030:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1032
# %bb.1031:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1844
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1032:                           # %__cxx_global_var_init.411.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_207_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_207_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1648:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1649:                              # EH_LABEL
# %bb.1033:                             # %.noexc.i1849
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.414)
	addi.d	$a2, $a2, %pc_lo12(.L.str.414)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1651:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1652:                              # EH_LABEL
# %bb.1034:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC1VW1LoopWithReductionTC32RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC1VW1LoopWithReductionTC32RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1653:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1654:                              # EH_LABEL
# %bb.1035:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1037
# %bb.1036:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1853
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1037:                           # %__cxx_global_var_init.413.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_208_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_208_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1656:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1657:                              # EH_LABEL
# %bb.1038:                             # %.noexc.i1858
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.416)
	addi.d	$a2, $a2, %pc_lo12(.L.str.416)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1659:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1660:                              # EH_LABEL
# %bb.1039:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC2VW1LoopWithReductionTC32RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC2VW1LoopWithReductionTC32RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1661:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1662:                              # EH_LABEL
# %bb.1040:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1042
# %bb.1041:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1862
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1042:                           # %__cxx_global_var_init.415.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_209_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_209_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1664:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1665:                              # EH_LABEL
# %bb.1043:                             # %.noexc.i1867
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.418)
	addi.d	$a2, $a2, %pc_lo12(.L.str.418)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1667:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1668:                              # EH_LABEL
# %bb.1044:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC4VW1LoopWithReductionTC32RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC4VW1LoopWithReductionTC32RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1669:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1670:                              # EH_LABEL
# %bb.1045:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1047
# %bb.1046:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1871
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1047:                           # %__cxx_global_var_init.417.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_210_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_210_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 26
	st.d	$a0, $sp, 40
.Ltmp1672:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1673:                              # EH_LABEL
# %bb.1048:                             # %.noexc.i1876
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.420)
	addi.d	$a2, $a2, %pc_lo12(.L.str.420)
	vld	$vr0, $a2, 0
	ld.h	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.h	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1675:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1676:                              # EH_LABEL
# %bb.1049:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z26benchAutoVecForBigLoopTC32RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z26benchAutoVecForBigLoopTC32RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1677:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1678:                              # EH_LABEL
# %bb.1050:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1052
# %bb.1051:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1880
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1052:                           # %__cxx_global_var_init.419.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_211_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_211_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp1680:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1681:                              # EH_LABEL
# %bb.1053:                             # %.noexc.i1885
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.422)
	addi.d	$a2, $a2, %pc_lo12(.L.str.422)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1683:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1684:                              # EH_LABEL
# %bb.1054:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchForIC1VW4BigLoopTC32RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchForIC1VW4BigLoopTC32RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1685:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1686:                              # EH_LABEL
# %bb.1055:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1057
# %bb.1056:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1889
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1057:                           # %__cxx_global_var_init.421.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_212_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_212_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp1688:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1689:                              # EH_LABEL
# %bb.1058:                             # %.noexc.i1894
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.424)
	addi.d	$a2, $a2, %pc_lo12(.L.str.424)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1691:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1692:                              # EH_LABEL
# %bb.1059:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchForIC2VW4BigLoopTC32RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchForIC2VW4BigLoopTC32RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1693:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1694:                              # EH_LABEL
# %bb.1060:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1062
# %bb.1061:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1898
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1062:                           # %__cxx_global_var_init.423.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_213_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_213_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp1696:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1697:                              # EH_LABEL
# %bb.1063:                             # %.noexc.i1903
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.426)
	addi.d	$a2, $a2, %pc_lo12(.L.str.426)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1699:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1700:                              # EH_LABEL
# %bb.1064:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchForIC4VW4BigLoopTC32RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchForIC4VW4BigLoopTC32RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1701:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1702:                              # EH_LABEL
# %bb.1065:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1067
# %bb.1066:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1907
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1067:                           # %__cxx_global_var_init.425.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_214_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_214_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 39
	st.d	$a0, $sp, 40
.Ltmp1704:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1705:                              # EH_LABEL
# %bb.1068:                             # %.noexc.i1912
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.428)
	addi.d	$a2, $a2, %pc_lo12(.L.str.428)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1707:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1708:                              # EH_LABEL
# %bb.1069:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z39benchForBigLoopWithReductionAutoVecTC32RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z39benchForBigLoopWithReductionAutoVecTC32RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1709:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1710:                              # EH_LABEL
# %bb.1070:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1072
# %bb.1071:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1916
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1072:                           # %__cxx_global_var_init.427.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_215_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_215_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1712:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1713:                              # EH_LABEL
# %bb.1073:                             # %.noexc.i1921
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.430)
	addi.d	$a2, $a2, %pc_lo12(.L.str.430)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1715:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1716:                              # EH_LABEL
# %bb.1074:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC1VW4BigLoopWithReductionTC32RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC1VW4BigLoopWithReductionTC32RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1717:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1718:                              # EH_LABEL
# %bb.1075:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1077
# %bb.1076:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1925
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1077:                           # %__cxx_global_var_init.429.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_216_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_216_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1720:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1721:                              # EH_LABEL
# %bb.1078:                             # %.noexc.i1930
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.432)
	addi.d	$a2, $a2, %pc_lo12(.L.str.432)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1723:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1724:                              # EH_LABEL
# %bb.1079:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC2VW4BigLoopWithReductionTC32RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC2VW4BigLoopWithReductionTC32RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1725:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1726:                              # EH_LABEL
# %bb.1080:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1082
# %bb.1081:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1934
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1082:                           # %__cxx_global_var_init.431.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_217_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_217_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1728:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1729:                              # EH_LABEL
# %bb.1083:                             # %.noexc.i1939
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.434)
	addi.d	$a2, $a2, %pc_lo12(.L.str.434)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1731:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1732:                              # EH_LABEL
# %bb.1084:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC4VW4BigLoopWithReductionTC32RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC4VW4BigLoopWithReductionTC32RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1733:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1734:                              # EH_LABEL
# %bb.1085:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1087
# %bb.1086:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1943
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1087:                           # %__cxx_global_var_init.433.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_218_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_218_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1736:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1737:                              # EH_LABEL
# %bb.1088:                             # %.noexc.i1948
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.436)
	addi.d	$a2, $a2, %pc_lo12(.L.str.436)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1739:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1740:                              # EH_LABEL
# %bb.1089:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC1VW1BigLoopWithReductionTC32RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC1VW1BigLoopWithReductionTC32RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1741:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1742:                              # EH_LABEL
# %bb.1090:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1092
# %bb.1091:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1952
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1092:                           # %__cxx_global_var_init.435.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_219_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_219_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1744:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1745:                              # EH_LABEL
# %bb.1093:                             # %.noexc.i1957
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.438)
	addi.d	$a2, $a2, %pc_lo12(.L.str.438)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1747:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1748:                              # EH_LABEL
# %bb.1094:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC2VW1BigLoopWithReductionTC32RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC2VW1BigLoopWithReductionTC32RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1749:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1750:                              # EH_LABEL
# %bb.1095:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1097
# %bb.1096:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1961
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1097:                           # %__cxx_global_var_init.437.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_220_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_220_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1752:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1753:                              # EH_LABEL
# %bb.1098:                             # %.noexc.i1966
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.440)
	addi.d	$a2, $a2, %pc_lo12(.L.str.440)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1755:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1756:                              # EH_LABEL
# %bb.1099:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC4VW1BigLoopWithReductionTC32RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC4VW1BigLoopWithReductionTC32RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1757:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1758:                              # EH_LABEL
# %bb.1100:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1102
# %bb.1101:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1970
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1102:                           # %__cxx_global_var_init.439.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_221_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_221_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 23
	st.d	$a0, $sp, 40
.Ltmp1760:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1761:                              # EH_LABEL
# %bb.1103:                             # %.noexc.i1975
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.442)
	addi.d	$a2, $a2, %pc_lo12(.L.str.442)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 15
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 15
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1763:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1764:                              # EH_LABEL
# %bb.1104:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z23benchAutoVecForLoopTC63RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z23benchAutoVecForLoopTC63RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1765:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1766:                              # EH_LABEL
# %bb.1105:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1107
# %bb.1106:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1979
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1107:                           # %__cxx_global_var_init.441.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_222_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_222_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp1768:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1769:                              # EH_LABEL
# %bb.1108:                             # %.noexc.i1984
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.444)
	addi.d	$a2, $a2, %pc_lo12(.L.str.444)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1771:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1772:                              # EH_LABEL
# %bb.1109:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchForIC1VW4LoopTC63RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchForIC1VW4LoopTC63RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1773:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1774:                              # EH_LABEL
# %bb.1110:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1112
# %bb.1111:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1988
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1112:                           # %__cxx_global_var_init.443.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_223_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_223_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp1776:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1777:                              # EH_LABEL
# %bb.1113:                             # %.noexc.i1993
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.446)
	addi.d	$a2, $a2, %pc_lo12(.L.str.446)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1779:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1780:                              # EH_LABEL
# %bb.1114:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchForIC2VW4LoopTC63RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchForIC2VW4LoopTC63RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1781:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1782:                              # EH_LABEL
# %bb.1115:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1117
# %bb.1116:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i1997
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1117:                           # %__cxx_global_var_init.445.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_224_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_224_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp1784:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1785:                              # EH_LABEL
# %bb.1118:                             # %.noexc.i2002
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.448)
	addi.d	$a2, $a2, %pc_lo12(.L.str.448)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1787:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1788:                              # EH_LABEL
# %bb.1119:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchForIC4VW4LoopTC63RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchForIC4VW4LoopTC63RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1789:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1790:                              # EH_LABEL
# %bb.1120:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1122
# %bb.1121:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2006
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1122:                           # %__cxx_global_var_init.447.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_225_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_225_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 36
	st.d	$a0, $sp, 40
.Ltmp1792:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1793:                              # EH_LABEL
# %bb.1123:                             # %.noexc.i2011
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.450)
	addi.d	$a2, $a2, %pc_lo12(.L.str.450)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1795:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1796:                              # EH_LABEL
# %bb.1124:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z36benchForLoopWithReductionAutoVecTC63RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z36benchForLoopWithReductionAutoVecTC63RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1797:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1798:                              # EH_LABEL
# %bb.1125:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1127
# %bb.1126:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2015
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1127:                           # %__cxx_global_var_init.449.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_226_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_226_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1800:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1801:                              # EH_LABEL
# %bb.1128:                             # %.noexc.i2020
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.452)
	addi.d	$a2, $a2, %pc_lo12(.L.str.452)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1803:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1804:                              # EH_LABEL
# %bb.1129:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC1VW4LoopWithReductionTC63RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC1VW4LoopWithReductionTC63RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1805:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1806:                              # EH_LABEL
# %bb.1130:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1132
# %bb.1131:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2024
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1132:                           # %__cxx_global_var_init.451.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_227_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_227_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1808:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1809:                              # EH_LABEL
# %bb.1133:                             # %.noexc.i2029
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.454)
	addi.d	$a2, $a2, %pc_lo12(.L.str.454)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1811:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1812:                              # EH_LABEL
# %bb.1134:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC2VW4LoopWithReductionTC63RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC2VW4LoopWithReductionTC63RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1813:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1814:                              # EH_LABEL
# %bb.1135:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1137
# %bb.1136:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2033
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1137:                           # %__cxx_global_var_init.453.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_228_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_228_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1816:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1817:                              # EH_LABEL
# %bb.1138:                             # %.noexc.i2038
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.456)
	addi.d	$a2, $a2, %pc_lo12(.L.str.456)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1819:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1820:                              # EH_LABEL
# %bb.1139:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC4VW4LoopWithReductionTC63RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC4VW4LoopWithReductionTC63RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1821:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1822:                              # EH_LABEL
# %bb.1140:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1142
# %bb.1141:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2042
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1142:                           # %__cxx_global_var_init.455.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_229_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_229_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1824:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1825:                              # EH_LABEL
# %bb.1143:                             # %.noexc.i2047
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.458)
	addi.d	$a2, $a2, %pc_lo12(.L.str.458)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1827:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1828:                              # EH_LABEL
# %bb.1144:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC1VW1LoopWithReductionTC63RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC1VW1LoopWithReductionTC63RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1829:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1830:                              # EH_LABEL
# %bb.1145:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1147
# %bb.1146:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2051
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1147:                           # %__cxx_global_var_init.457.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_230_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_230_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1832:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1833:                              # EH_LABEL
# %bb.1148:                             # %.noexc.i2056
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.460)
	addi.d	$a2, $a2, %pc_lo12(.L.str.460)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1835:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1836:                              # EH_LABEL
# %bb.1149:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC2VW1LoopWithReductionTC63RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC2VW1LoopWithReductionTC63RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1837:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1838:                              # EH_LABEL
# %bb.1150:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1152
# %bb.1151:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2060
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1152:                           # %__cxx_global_var_init.459.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_231_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_231_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1840:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1841:                              # EH_LABEL
# %bb.1153:                             # %.noexc.i2065
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.462)
	addi.d	$a2, $a2, %pc_lo12(.L.str.462)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1843:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1844:                              # EH_LABEL
# %bb.1154:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC4VW1LoopWithReductionTC63RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC4VW1LoopWithReductionTC63RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1845:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1846:                              # EH_LABEL
# %bb.1155:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1157
# %bb.1156:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2069
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1157:                           # %__cxx_global_var_init.461.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_232_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_232_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 26
	st.d	$a0, $sp, 40
.Ltmp1848:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1849:                              # EH_LABEL
# %bb.1158:                             # %.noexc.i2074
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.464)
	addi.d	$a2, $a2, %pc_lo12(.L.str.464)
	vld	$vr0, $a2, 0
	ld.h	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.h	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1851:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1852:                              # EH_LABEL
# %bb.1159:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z26benchAutoVecForBigLoopTC63RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z26benchAutoVecForBigLoopTC63RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1853:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1854:                              # EH_LABEL
# %bb.1160:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1162
# %bb.1161:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2078
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1162:                           # %__cxx_global_var_init.463.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_233_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_233_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp1856:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1857:                              # EH_LABEL
# %bb.1163:                             # %.noexc.i2083
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.466)
	addi.d	$a2, $a2, %pc_lo12(.L.str.466)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1859:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1860:                              # EH_LABEL
# %bb.1164:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchForIC1VW4BigLoopTC63RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchForIC1VW4BigLoopTC63RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1861:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1862:                              # EH_LABEL
# %bb.1165:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1167
# %bb.1166:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2087
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1167:                           # %__cxx_global_var_init.465.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_234_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_234_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp1864:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1865:                              # EH_LABEL
# %bb.1168:                             # %.noexc.i2092
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.468)
	addi.d	$a2, $a2, %pc_lo12(.L.str.468)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1867:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1868:                              # EH_LABEL
# %bb.1169:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchForIC2VW4BigLoopTC63RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchForIC2VW4BigLoopTC63RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1869:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1870:                              # EH_LABEL
# %bb.1170:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1172
# %bb.1171:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2096
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1172:                           # %__cxx_global_var_init.467.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_235_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_235_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp1872:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1873:                              # EH_LABEL
# %bb.1173:                             # %.noexc.i2101
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.470)
	addi.d	$a2, $a2, %pc_lo12(.L.str.470)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1875:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1876:                              # EH_LABEL
# %bb.1174:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchForIC4VW4BigLoopTC63RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchForIC4VW4BigLoopTC63RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1877:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1878:                              # EH_LABEL
# %bb.1175:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1177
# %bb.1176:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2105
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1177:                           # %__cxx_global_var_init.469.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_236_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_236_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 39
	st.d	$a0, $sp, 40
.Ltmp1880:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1881:                              # EH_LABEL
# %bb.1178:                             # %.noexc.i2110
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.472)
	addi.d	$a2, $a2, %pc_lo12(.L.str.472)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1883:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1884:                              # EH_LABEL
# %bb.1179:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z39benchForBigLoopWithReductionAutoVecTC63RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z39benchForBigLoopWithReductionAutoVecTC63RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1885:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1886:                              # EH_LABEL
# %bb.1180:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1182
# %bb.1181:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2114
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1182:                           # %__cxx_global_var_init.471.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_237_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_237_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1888:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1889:                              # EH_LABEL
# %bb.1183:                             # %.noexc.i2119
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.474)
	addi.d	$a2, $a2, %pc_lo12(.L.str.474)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1891:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1892:                              # EH_LABEL
# %bb.1184:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC1VW4BigLoopWithReductionTC63RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC1VW4BigLoopWithReductionTC63RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1893:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1894:                              # EH_LABEL
# %bb.1185:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1187
# %bb.1186:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2123
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1187:                           # %__cxx_global_var_init.473.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_238_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_238_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1896:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1897:                              # EH_LABEL
# %bb.1188:                             # %.noexc.i2128
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.476)
	addi.d	$a2, $a2, %pc_lo12(.L.str.476)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1899:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1900:                              # EH_LABEL
# %bb.1189:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC2VW4BigLoopWithReductionTC63RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC2VW4BigLoopWithReductionTC63RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1901:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1902:                              # EH_LABEL
# %bb.1190:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1192
# %bb.1191:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2132
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1192:                           # %__cxx_global_var_init.475.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_239_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_239_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1904:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1905:                              # EH_LABEL
# %bb.1193:                             # %.noexc.i2137
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.478)
	addi.d	$a2, $a2, %pc_lo12(.L.str.478)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1907:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1908:                              # EH_LABEL
# %bb.1194:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC4VW4BigLoopWithReductionTC63RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC4VW4BigLoopWithReductionTC63RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1909:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1910:                              # EH_LABEL
# %bb.1195:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1197
# %bb.1196:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2141
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1197:                           # %__cxx_global_var_init.477.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_240_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_240_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1912:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1913:                              # EH_LABEL
# %bb.1198:                             # %.noexc.i2146
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.480)
	addi.d	$a2, $a2, %pc_lo12(.L.str.480)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1915:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1916:                              # EH_LABEL
# %bb.1199:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC1VW1BigLoopWithReductionTC63RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC1VW1BigLoopWithReductionTC63RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1917:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1918:                              # EH_LABEL
# %bb.1200:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1202
# %bb.1201:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2150
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1202:                           # %__cxx_global_var_init.479.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_241_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_241_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1920:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1921:                              # EH_LABEL
# %bb.1203:                             # %.noexc.i2155
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.482)
	addi.d	$a2, $a2, %pc_lo12(.L.str.482)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1923:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1924:                              # EH_LABEL
# %bb.1204:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC2VW1BigLoopWithReductionTC63RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC2VW1BigLoopWithReductionTC63RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1925:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1926:                              # EH_LABEL
# %bb.1205:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1207
# %bb.1206:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2159
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1207:                           # %__cxx_global_var_init.481.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_242_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_242_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp1928:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1929:                              # EH_LABEL
# %bb.1208:                             # %.noexc.i2164
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.484)
	addi.d	$a2, $a2, %pc_lo12(.L.str.484)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1931:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1932:                              # EH_LABEL
# %bb.1209:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC4VW1BigLoopWithReductionTC63RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC4VW1BigLoopWithReductionTC63RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1933:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1934:                              # EH_LABEL
# %bb.1210:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1212
# %bb.1211:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2168
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1212:                           # %__cxx_global_var_init.483.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_243_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_243_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 23
	st.d	$a0, $sp, 40
.Ltmp1936:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1937:                              # EH_LABEL
# %bb.1213:                             # %.noexc.i2173
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.486)
	addi.d	$a2, $a2, %pc_lo12(.L.str.486)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 15
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 15
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1939:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1940:                              # EH_LABEL
# %bb.1214:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z23benchAutoVecForLoopTC64RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z23benchAutoVecForLoopTC64RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1941:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1942:                              # EH_LABEL
# %bb.1215:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1217
# %bb.1216:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2177
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1217:                           # %__cxx_global_var_init.485.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_244_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_244_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp1944:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1945:                              # EH_LABEL
# %bb.1218:                             # %.noexc.i2182
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.488)
	addi.d	$a2, $a2, %pc_lo12(.L.str.488)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1947:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1948:                              # EH_LABEL
# %bb.1219:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchForIC1VW4LoopTC64RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchForIC1VW4LoopTC64RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1949:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1950:                              # EH_LABEL
# %bb.1220:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1222
# %bb.1221:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2186
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1222:                           # %__cxx_global_var_init.487.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_245_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_245_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp1952:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1953:                              # EH_LABEL
# %bb.1223:                             # %.noexc.i2191
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.490)
	addi.d	$a2, $a2, %pc_lo12(.L.str.490)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1955:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1956:                              # EH_LABEL
# %bb.1224:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchForIC2VW4LoopTC64RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchForIC2VW4LoopTC64RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1957:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1958:                              # EH_LABEL
# %bb.1225:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1227
# %bb.1226:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2195
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1227:                           # %__cxx_global_var_init.489.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_246_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_246_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 22
	st.d	$a0, $sp, 40
.Ltmp1960:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1961:                              # EH_LABEL
# %bb.1228:                             # %.noexc.i2200
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.492)
	addi.d	$a2, $a2, %pc_lo12(.L.str.492)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 14
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 14
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1963:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1964:                              # EH_LABEL
# %bb.1229:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z22benchForIC4VW4LoopTC64RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z22benchForIC4VW4LoopTC64RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1965:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1966:                              # EH_LABEL
# %bb.1230:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1232
# %bb.1231:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2204
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1232:                           # %__cxx_global_var_init.491.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_247_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_247_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 36
	st.d	$a0, $sp, 40
.Ltmp1968:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1969:                              # EH_LABEL
# %bb.1233:                             # %.noexc.i2209
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.494)
	addi.d	$a2, $a2, %pc_lo12(.L.str.494)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1971:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1972:                              # EH_LABEL
# %bb.1234:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z36benchForLoopWithReductionAutoVecTC64RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z36benchForLoopWithReductionAutoVecTC64RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1973:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1974:                              # EH_LABEL
# %bb.1235:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1237
# %bb.1236:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2213
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1237:                           # %__cxx_global_var_init.493.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_248_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_248_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1976:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1977:                              # EH_LABEL
# %bb.1238:                             # %.noexc.i2218
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.496)
	addi.d	$a2, $a2, %pc_lo12(.L.str.496)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1979:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1980:                              # EH_LABEL
# %bb.1239:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC1VW4LoopWithReductionTC64RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC1VW4LoopWithReductionTC64RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1981:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1982:                              # EH_LABEL
# %bb.1240:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1242
# %bb.1241:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2222
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1242:                           # %__cxx_global_var_init.495.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_249_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_249_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1984:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1985:                              # EH_LABEL
# %bb.1243:                             # %.noexc.i2227
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.498)
	addi.d	$a2, $a2, %pc_lo12(.L.str.498)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1987:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1988:                              # EH_LABEL
# %bb.1244:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC2VW4LoopWithReductionTC64RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC2VW4LoopWithReductionTC64RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1989:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1990:                              # EH_LABEL
# %bb.1245:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1247
# %bb.1246:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2231
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1247:                           # %__cxx_global_var_init.497.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_250_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_250_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp1992:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp1993:                              # EH_LABEL
# %bb.1248:                             # %.noexc.i2236
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.500)
	addi.d	$a2, $a2, %pc_lo12(.L.str.500)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp1995:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp1996:                              # EH_LABEL
# %bb.1249:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC4VW4LoopWithReductionTC64RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC4VW4LoopWithReductionTC64RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp1997:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp1998:                              # EH_LABEL
# %bb.1250:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1252
# %bb.1251:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2240
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1252:                           # %__cxx_global_var_init.499.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_251_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_251_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp2000:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2001:                              # EH_LABEL
# %bb.1253:                             # %.noexc.i2245
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.502)
	addi.d	$a2, $a2, %pc_lo12(.L.str.502)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2003:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2004:                              # EH_LABEL
# %bb.1254:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC1VW1LoopWithReductionTC64RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC1VW1LoopWithReductionTC64RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2005:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2006:                              # EH_LABEL
# %bb.1255:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1257
# %bb.1256:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2249
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1257:                           # %__cxx_global_var_init.501.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_252_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_252_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp2008:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2009:                              # EH_LABEL
# %bb.1258:                             # %.noexc.i2254
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.504)
	addi.d	$a2, $a2, %pc_lo12(.L.str.504)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2011:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2012:                              # EH_LABEL
# %bb.1259:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC2VW1LoopWithReductionTC64RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC2VW1LoopWithReductionTC64RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2013:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2014:                              # EH_LABEL
# %bb.1260:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1262
# %bb.1261:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2258
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1262:                           # %__cxx_global_var_init.503.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_253_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_253_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 35
	st.d	$a0, $sp, 40
.Ltmp2016:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2017:                              # EH_LABEL
# %bb.1263:                             # %.noexc.i2263
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.506)
	addi.d	$a2, $a2, %pc_lo12(.L.str.506)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2019:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2020:                              # EH_LABEL
# %bb.1264:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z35benchForIC4VW1LoopWithReductionTC64RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z35benchForIC4VW1LoopWithReductionTC64RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2021:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2022:                              # EH_LABEL
# %bb.1265:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1267
# %bb.1266:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2267
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1267:                           # %__cxx_global_var_init.505.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_254_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_254_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 26
	st.d	$a0, $sp, 40
.Ltmp2024:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2025:                              # EH_LABEL
# %bb.1268:                             # %.noexc.i2272
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.508)
	addi.d	$a2, $a2, %pc_lo12(.L.str.508)
	vld	$vr0, $a2, 0
	ld.h	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.h	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2027:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2028:                              # EH_LABEL
# %bb.1269:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z26benchAutoVecForBigLoopTC64RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z26benchAutoVecForBigLoopTC64RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2029:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2030:                              # EH_LABEL
# %bb.1270:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1272
# %bb.1271:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2276
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1272:                           # %__cxx_global_var_init.507.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_255_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_255_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp2032:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2033:                              # EH_LABEL
# %bb.1273:                             # %.noexc.i2281
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.510)
	addi.d	$a2, $a2, %pc_lo12(.L.str.510)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2035:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2036:                              # EH_LABEL
# %bb.1274:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchForIC1VW4BigLoopTC64RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchForIC1VW4BigLoopTC64RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2037:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2038:                              # EH_LABEL
# %bb.1275:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1277
# %bb.1276:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2285
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1277:                           # %__cxx_global_var_init.509.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_256_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_256_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp2040:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2041:                              # EH_LABEL
# %bb.1278:                             # %.noexc.i2290
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.512)
	addi.d	$a2, $a2, %pc_lo12(.L.str.512)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2043:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2044:                              # EH_LABEL
# %bb.1279:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchForIC2VW4BigLoopTC64RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchForIC2VW4BigLoopTC64RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2045:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2046:                              # EH_LABEL
# %bb.1280:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1282
# %bb.1281:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2294
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1282:                           # %__cxx_global_var_init.511.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_257_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_257_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 25
	st.d	$a0, $sp, 40
.Ltmp2048:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2049:                              # EH_LABEL
# %bb.1283:                             # %.noexc.i2299
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.514)
	addi.d	$a2, $a2, %pc_lo12(.L.str.514)
	vld	$vr0, $a2, 0
	ld.b	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.b	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2051:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2052:                              # EH_LABEL
# %bb.1284:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z25benchForIC4VW4BigLoopTC64RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z25benchForIC4VW4BigLoopTC64RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2053:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2054:                              # EH_LABEL
# %bb.1285:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1287
# %bb.1286:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2303
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1287:                           # %__cxx_global_var_init.513.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_258_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_258_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 39
	st.d	$a0, $sp, 40
.Ltmp2056:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2057:                              # EH_LABEL
# %bb.1288:                             # %.noexc.i2308
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.516)
	addi.d	$a2, $a2, %pc_lo12(.L.str.516)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2059:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2060:                              # EH_LABEL
# %bb.1289:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z39benchForBigLoopWithReductionAutoVecTC64RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z39benchForBigLoopWithReductionAutoVecTC64RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2061:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2062:                              # EH_LABEL
# %bb.1290:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1292
# %bb.1291:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2312
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1292:                           # %__cxx_global_var_init.515.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_259_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_259_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp2064:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2065:                              # EH_LABEL
# %bb.1293:                             # %.noexc.i2317
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.518)
	addi.d	$a2, $a2, %pc_lo12(.L.str.518)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2067:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2068:                              # EH_LABEL
# %bb.1294:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC1VW4BigLoopWithReductionTC64RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC1VW4BigLoopWithReductionTC64RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2069:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2070:                              # EH_LABEL
# %bb.1295:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1297
# %bb.1296:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2321
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1297:                           # %__cxx_global_var_init.517.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_260_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_260_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp2072:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2073:                              # EH_LABEL
# %bb.1298:                             # %.noexc.i2326
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.520)
	addi.d	$a2, $a2, %pc_lo12(.L.str.520)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2075:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2076:                              # EH_LABEL
# %bb.1299:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC2VW4BigLoopWithReductionTC64RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC2VW4BigLoopWithReductionTC64RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2077:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2078:                              # EH_LABEL
# %bb.1300:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1302
# %bb.1301:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2330
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1302:                           # %__cxx_global_var_init.519.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_261_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_261_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp2080:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2081:                              # EH_LABEL
# %bb.1303:                             # %.noexc.i2335
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.522)
	addi.d	$a2, $a2, %pc_lo12(.L.str.522)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2083:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2084:                              # EH_LABEL
# %bb.1304:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC4VW4BigLoopWithReductionTC64RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC4VW4BigLoopWithReductionTC64RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2085:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2086:                              # EH_LABEL
# %bb.1305:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1307
# %bb.1306:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2339
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1307:                           # %__cxx_global_var_init.521.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_262_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_262_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp2088:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2089:                              # EH_LABEL
# %bb.1308:                             # %.noexc.i2344
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.524)
	addi.d	$a2, $a2, %pc_lo12(.L.str.524)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2091:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2092:                              # EH_LABEL
# %bb.1309:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC1VW1BigLoopWithReductionTC64RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC1VW1BigLoopWithReductionTC64RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2093:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2094:                              # EH_LABEL
# %bb.1310:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1312
# %bb.1311:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2348
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1312:                           # %__cxx_global_var_init.523.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_263_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_263_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp2096:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2097:                              # EH_LABEL
# %bb.1313:                             # %.noexc.i2353
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.526)
	addi.d	$a2, $a2, %pc_lo12(.L.str.526)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2099:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2100:                              # EH_LABEL
# %bb.1314:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC2VW1BigLoopWithReductionTC64RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC2VW1BigLoopWithReductionTC64RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2101:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2102:                              # EH_LABEL
# %bb.1315:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1317
# %bb.1316:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2357
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1317:                           # %__cxx_global_var_init.525.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_264_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_264_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 38
	st.d	$a0, $sp, 40
.Ltmp2104:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2105:                              # EH_LABEL
# %bb.1318:                             # %.noexc.i2362
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.528)
	addi.d	$a2, $a2, %pc_lo12(.L.str.528)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 30
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 30
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2107:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2108:                              # EH_LABEL
# %bb.1319:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z38benchForIC4VW1BigLoopWithReductionTC64RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z38benchForIC4VW1BigLoopWithReductionTC64RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2109:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2110:                              # EH_LABEL
# %bb.1320:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1322
# %bb.1321:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2366
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1322:                           # %__cxx_global_var_init.527.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_265_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_265_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 24
	st.d	$a0, $sp, 40
.Ltmp2112:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2113:                              # EH_LABEL
# %bb.1323:                             # %.noexc.i2371
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.530)
	addi.d	$a2, $a2, %pc_lo12(.L.str.530)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2115:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2116:                              # EH_LABEL
# %bb.1324:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z24benchAutoVecForLoopTC127RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z24benchAutoVecForLoopTC127RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2117:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2118:                              # EH_LABEL
# %bb.1325:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1327
# %bb.1326:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2375
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1327:                           # %__cxx_global_var_init.529.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_266_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_266_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 23
	st.d	$a0, $sp, 40
.Ltmp2120:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2121:                              # EH_LABEL
# %bb.1328:                             # %.noexc.i2380
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.532)
	addi.d	$a2, $a2, %pc_lo12(.L.str.532)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 15
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 15
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2123:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2124:                              # EH_LABEL
# %bb.1329:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z23benchForIC1VW4LoopTC127RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z23benchForIC1VW4LoopTC127RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2125:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2126:                              # EH_LABEL
# %bb.1330:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1332
# %bb.1331:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2384
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1332:                           # %__cxx_global_var_init.531.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_267_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_267_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 23
	st.d	$a0, $sp, 40
.Ltmp2128:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2129:                              # EH_LABEL
# %bb.1333:                             # %.noexc.i2389
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.534)
	addi.d	$a2, $a2, %pc_lo12(.L.str.534)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 15
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 15
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2131:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2132:                              # EH_LABEL
# %bb.1334:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z23benchForIC2VW4LoopTC127RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z23benchForIC2VW4LoopTC127RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2133:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2134:                              # EH_LABEL
# %bb.1335:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1337
# %bb.1336:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2393
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1337:                           # %__cxx_global_var_init.533.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_268_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_268_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 23
	st.d	$a0, $sp, 40
.Ltmp2136:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2137:                              # EH_LABEL
# %bb.1338:                             # %.noexc.i2398
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.536)
	addi.d	$a2, $a2, %pc_lo12(.L.str.536)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 15
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 15
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2139:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2140:                              # EH_LABEL
# %bb.1339:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z23benchForIC4VW4LoopTC127RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z23benchForIC4VW4LoopTC127RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2141:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2142:                              # EH_LABEL
# %bb.1340:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1342
# %bb.1341:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2402
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1342:                           # %__cxx_global_var_init.535.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_269_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_269_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp2144:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2145:                              # EH_LABEL
# %bb.1343:                             # %.noexc.i2407
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.538)
	addi.d	$a2, $a2, %pc_lo12(.L.str.538)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2147:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2148:                              # EH_LABEL
# %bb.1344:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForLoopWithReductionAutoVecTC127RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForLoopWithReductionAutoVecTC127RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2149:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2150:                              # EH_LABEL
# %bb.1345:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1347
# %bb.1346:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2411
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1347:                           # %__cxx_global_var_init.537.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_270_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_270_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 36
	st.d	$a0, $sp, 40
.Ltmp2152:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2153:                              # EH_LABEL
# %bb.1348:                             # %.noexc.i2416
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.540)
	addi.d	$a2, $a2, %pc_lo12(.L.str.540)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2155:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2156:                              # EH_LABEL
# %bb.1349:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z36benchForIC1VW4LoopWithReductionTC127RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z36benchForIC1VW4LoopWithReductionTC127RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2157:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2158:                              # EH_LABEL
# %bb.1350:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1352
# %bb.1351:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2420
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1352:                           # %__cxx_global_var_init.539.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_271_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_271_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 36
	st.d	$a0, $sp, 40
.Ltmp2160:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2161:                              # EH_LABEL
# %bb.1353:                             # %.noexc.i2425
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.542)
	addi.d	$a2, $a2, %pc_lo12(.L.str.542)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2163:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2164:                              # EH_LABEL
# %bb.1354:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z36benchForIC2VW4LoopWithReductionTC127RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z36benchForIC2VW4LoopWithReductionTC127RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2165:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2166:                              # EH_LABEL
# %bb.1355:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1357
# %bb.1356:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2429
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1357:                           # %__cxx_global_var_init.541.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_272_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_272_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 36
	st.d	$a0, $sp, 40
.Ltmp2168:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2169:                              # EH_LABEL
# %bb.1358:                             # %.noexc.i2434
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.544)
	addi.d	$a2, $a2, %pc_lo12(.L.str.544)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2171:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2172:                              # EH_LABEL
# %bb.1359:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z36benchForIC4VW4LoopWithReductionTC127RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z36benchForIC4VW4LoopWithReductionTC127RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2173:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2174:                              # EH_LABEL
# %bb.1360:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1362
# %bb.1361:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2438
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1362:                           # %__cxx_global_var_init.543.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_273_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_273_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 36
	st.d	$a0, $sp, 40
.Ltmp2176:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2177:                              # EH_LABEL
# %bb.1363:                             # %.noexc.i2443
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.546)
	addi.d	$a2, $a2, %pc_lo12(.L.str.546)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2179:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2180:                              # EH_LABEL
# %bb.1364:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z36benchForIC1VW1LoopWithReductionTC127RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z36benchForIC1VW1LoopWithReductionTC127RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2181:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2182:                              # EH_LABEL
# %bb.1365:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1367
# %bb.1366:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2447
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1367:                           # %__cxx_global_var_init.545.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_274_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_274_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 36
	st.d	$a0, $sp, 40
.Ltmp2184:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2185:                              # EH_LABEL
# %bb.1368:                             # %.noexc.i2452
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.548)
	addi.d	$a2, $a2, %pc_lo12(.L.str.548)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2187:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2188:                              # EH_LABEL
# %bb.1369:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z36benchForIC2VW1LoopWithReductionTC127RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z36benchForIC2VW1LoopWithReductionTC127RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2189:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2190:                              # EH_LABEL
# %bb.1370:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1372
# %bb.1371:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2456
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1372:                           # %__cxx_global_var_init.547.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_275_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_275_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 36
	st.d	$a0, $sp, 40
.Ltmp2192:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2193:                              # EH_LABEL
# %bb.1373:                             # %.noexc.i2461
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.550)
	addi.d	$a2, $a2, %pc_lo12(.L.str.550)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2195:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2196:                              # EH_LABEL
# %bb.1374:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z36benchForIC4VW1LoopWithReductionTC127RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z36benchForIC4VW1LoopWithReductionTC127RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2197:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2198:                              # EH_LABEL
# %bb.1375:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1377
# %bb.1376:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2465
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1377:                           # %__cxx_global_var_init.549.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_276_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_276_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 27
	st.d	$a0, $sp, 40
.Ltmp2200:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2201:                              # EH_LABEL
# %bb.1378:                             # %.noexc.i2470
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.552)
	addi.d	$a2, $a2, %pc_lo12(.L.str.552)
	vld	$vr0, $a2, 0
	ld.w	$a3, $a2, 23
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.w	$a3, $a0, 23
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2203:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2204:                              # EH_LABEL
# %bb.1379:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z27benchAutoVecForBigLoopTC127RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z27benchAutoVecForBigLoopTC127RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2205:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2206:                              # EH_LABEL
# %bb.1380:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1382
# %bb.1381:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2474
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1382:                           # %__cxx_global_var_init.551.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_277_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_277_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 26
	st.d	$a0, $sp, 40
.Ltmp2208:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2209:                              # EH_LABEL
# %bb.1383:                             # %.noexc.i2479
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.554)
	addi.d	$a2, $a2, %pc_lo12(.L.str.554)
	vld	$vr0, $a2, 0
	ld.h	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.h	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2211:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2212:                              # EH_LABEL
# %bb.1384:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z26benchForIC1VW4BigLoopTC127RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z26benchForIC1VW4BigLoopTC127RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2213:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2214:                              # EH_LABEL
# %bb.1385:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1387
# %bb.1386:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2483
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1387:                           # %__cxx_global_var_init.553.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_278_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_278_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 26
	st.d	$a0, $sp, 40
.Ltmp2216:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2217:                              # EH_LABEL
# %bb.1388:                             # %.noexc.i2488
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.556)
	addi.d	$a2, $a2, %pc_lo12(.L.str.556)
	vld	$vr0, $a2, 0
	ld.h	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.h	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2219:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2220:                              # EH_LABEL
# %bb.1389:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z26benchForIC2VW4BigLoopTC127RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z26benchForIC2VW4BigLoopTC127RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2221:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2222:                              # EH_LABEL
# %bb.1390:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1392
# %bb.1391:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2492
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1392:                           # %__cxx_global_var_init.555.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_279_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_279_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 26
	st.d	$a0, $sp, 40
.Ltmp2224:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2225:                              # EH_LABEL
# %bb.1393:                             # %.noexc.i2497
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.558)
	addi.d	$a2, $a2, %pc_lo12(.L.str.558)
	vld	$vr0, $a2, 0
	ld.h	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.h	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2227:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2228:                              # EH_LABEL
# %bb.1394:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z26benchForIC4VW4BigLoopTC127RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z26benchForIC4VW4BigLoopTC127RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2229:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2230:                              # EH_LABEL
# %bb.1395:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1397
# %bb.1396:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2501
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1397:                           # %__cxx_global_var_init.557.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_280_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_280_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 40
	st.d	$a0, $sp, 40
.Ltmp2232:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2233:                              # EH_LABEL
# %bb.1398:                             # %.noexc.i2506
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.560)
	addi.d	$a2, $a2, %pc_lo12(.L.str.560)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2235:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2236:                              # EH_LABEL
# %bb.1399:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z40benchForBigLoopWithReductionAutoVecTC127RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z40benchForBigLoopWithReductionAutoVecTC127RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2237:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2238:                              # EH_LABEL
# %bb.1400:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1402
# %bb.1401:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2510
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1402:                           # %__cxx_global_var_init.559.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_281_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_281_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 39
	st.d	$a0, $sp, 40
.Ltmp2240:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2241:                              # EH_LABEL
# %bb.1403:                             # %.noexc.i2515
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.562)
	addi.d	$a2, $a2, %pc_lo12(.L.str.562)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2243:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2244:                              # EH_LABEL
# %bb.1404:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z39benchForIC1VW4BigLoopWithReductionTC127RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z39benchForIC1VW4BigLoopWithReductionTC127RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2245:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2246:                              # EH_LABEL
# %bb.1405:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1407
# %bb.1406:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2519
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1407:                           # %__cxx_global_var_init.561.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_282_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_282_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 39
	st.d	$a0, $sp, 40
.Ltmp2248:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2249:                              # EH_LABEL
# %bb.1408:                             # %.noexc.i2524
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.564)
	addi.d	$a2, $a2, %pc_lo12(.L.str.564)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2251:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2252:                              # EH_LABEL
# %bb.1409:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z39benchForIC2VW4BigLoopWithReductionTC127RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z39benchForIC2VW4BigLoopWithReductionTC127RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2253:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2254:                              # EH_LABEL
# %bb.1410:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1412
# %bb.1411:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2528
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1412:                           # %__cxx_global_var_init.563.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_283_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_283_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 39
	st.d	$a0, $sp, 40
.Ltmp2256:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2257:                              # EH_LABEL
# %bb.1413:                             # %.noexc.i2533
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.566)
	addi.d	$a2, $a2, %pc_lo12(.L.str.566)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2259:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2260:                              # EH_LABEL
# %bb.1414:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z39benchForIC4VW4BigLoopWithReductionTC127RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z39benchForIC4VW4BigLoopWithReductionTC127RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2261:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2262:                              # EH_LABEL
# %bb.1415:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1417
# %bb.1416:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2537
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1417:                           # %__cxx_global_var_init.565.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_284_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_284_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 39
	st.d	$a0, $sp, 40
.Ltmp2264:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2265:                              # EH_LABEL
# %bb.1418:                             # %.noexc.i2542
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.568)
	addi.d	$a2, $a2, %pc_lo12(.L.str.568)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2267:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2268:                              # EH_LABEL
# %bb.1419:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z39benchForIC1VW1BigLoopWithReductionTC127RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z39benchForIC1VW1BigLoopWithReductionTC127RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2269:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2270:                              # EH_LABEL
# %bb.1420:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1422
# %bb.1421:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2546
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1422:                           # %__cxx_global_var_init.567.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_285_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_285_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 39
	st.d	$a0, $sp, 40
.Ltmp2272:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2273:                              # EH_LABEL
# %bb.1423:                             # %.noexc.i2551
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.570)
	addi.d	$a2, $a2, %pc_lo12(.L.str.570)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2275:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2276:                              # EH_LABEL
# %bb.1424:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z39benchForIC2VW1BigLoopWithReductionTC127RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z39benchForIC2VW1BigLoopWithReductionTC127RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2277:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2278:                              # EH_LABEL
# %bb.1425:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1427
# %bb.1426:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2555
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1427:                           # %__cxx_global_var_init.569.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_286_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_286_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 39
	st.d	$a0, $sp, 40
.Ltmp2280:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2281:                              # EH_LABEL
# %bb.1428:                             # %.noexc.i2560
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.572)
	addi.d	$a2, $a2, %pc_lo12(.L.str.572)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2283:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2284:                              # EH_LABEL
# %bb.1429:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z39benchForIC4VW1BigLoopWithReductionTC127RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z39benchForIC4VW1BigLoopWithReductionTC127RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2285:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2286:                              # EH_LABEL
# %bb.1430:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1432
# %bb.1431:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2564
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1432:                           # %__cxx_global_var_init.571.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_287_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_287_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 24
	st.d	$a0, $sp, 40
.Ltmp2288:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2289:                              # EH_LABEL
# %bb.1433:                             # %.noexc.i2569
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.574)
	addi.d	$a2, $a2, %pc_lo12(.L.str.574)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2291:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2292:                              # EH_LABEL
# %bb.1434:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z24benchAutoVecForLoopTC128RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z24benchAutoVecForLoopTC128RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2293:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2294:                              # EH_LABEL
# %bb.1435:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1437
# %bb.1436:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2573
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1437:                           # %__cxx_global_var_init.573.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_288_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_288_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 23
	st.d	$a0, $sp, 40
.Ltmp2296:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2297:                              # EH_LABEL
# %bb.1438:                             # %.noexc.i2578
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.576)
	addi.d	$a2, $a2, %pc_lo12(.L.str.576)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 15
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 15
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2299:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2300:                              # EH_LABEL
# %bb.1439:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z23benchForIC1VW4LoopTC128RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z23benchForIC1VW4LoopTC128RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2301:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2302:                              # EH_LABEL
# %bb.1440:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1442
# %bb.1441:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2582
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1442:                           # %__cxx_global_var_init.575.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_289_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_289_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 23
	st.d	$a0, $sp, 40
.Ltmp2304:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2305:                              # EH_LABEL
# %bb.1443:                             # %.noexc.i2587
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.578)
	addi.d	$a2, $a2, %pc_lo12(.L.str.578)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 15
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 15
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2307:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2308:                              # EH_LABEL
# %bb.1444:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z23benchForIC2VW4LoopTC128RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z23benchForIC2VW4LoopTC128RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2309:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2310:                              # EH_LABEL
# %bb.1445:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1447
# %bb.1446:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2591
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1447:                           # %__cxx_global_var_init.577.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_290_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_290_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 23
	st.d	$a0, $sp, 40
.Ltmp2312:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2313:                              # EH_LABEL
# %bb.1448:                             # %.noexc.i2596
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.580)
	addi.d	$a2, $a2, %pc_lo12(.L.str.580)
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 15
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 15
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2315:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2316:                              # EH_LABEL
# %bb.1449:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z23benchForIC4VW4LoopTC128RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z23benchForIC4VW4LoopTC128RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2317:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2318:                              # EH_LABEL
# %bb.1450:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1452
# %bb.1451:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2600
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1452:                           # %__cxx_global_var_init.579.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_291_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_291_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 37
	st.d	$a0, $sp, 40
.Ltmp2320:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2321:                              # EH_LABEL
# %bb.1453:                             # %.noexc.i2605
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.582)
	addi.d	$a2, $a2, %pc_lo12(.L.str.582)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 29
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 29
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2323:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2324:                              # EH_LABEL
# %bb.1454:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z37benchForLoopWithReductionAutoVecTC128RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z37benchForLoopWithReductionAutoVecTC128RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2325:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2326:                              # EH_LABEL
# %bb.1455:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1457
# %bb.1456:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2609
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1457:                           # %__cxx_global_var_init.581.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_292_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_292_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 36
	st.d	$a0, $sp, 40
.Ltmp2328:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2329:                              # EH_LABEL
# %bb.1458:                             # %.noexc.i2614
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.584)
	addi.d	$a2, $a2, %pc_lo12(.L.str.584)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2331:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2332:                              # EH_LABEL
# %bb.1459:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z36benchForIC1VW4LoopWithReductionTC128RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z36benchForIC1VW4LoopWithReductionTC128RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2333:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2334:                              # EH_LABEL
# %bb.1460:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1462
# %bb.1461:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2618
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1462:                           # %__cxx_global_var_init.583.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_293_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_293_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 36
	st.d	$a0, $sp, 40
.Ltmp2336:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2337:                              # EH_LABEL
# %bb.1463:                             # %.noexc.i2623
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.586)
	addi.d	$a2, $a2, %pc_lo12(.L.str.586)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2339:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2340:                              # EH_LABEL
# %bb.1464:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z36benchForIC2VW4LoopWithReductionTC128RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z36benchForIC2VW4LoopWithReductionTC128RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2341:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2342:                              # EH_LABEL
# %bb.1465:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1467
# %bb.1466:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2627
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1467:                           # %__cxx_global_var_init.585.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_294_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_294_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 36
	st.d	$a0, $sp, 40
.Ltmp2344:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2345:                              # EH_LABEL
# %bb.1468:                             # %.noexc.i2632
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.588)
	addi.d	$a2, $a2, %pc_lo12(.L.str.588)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2347:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2348:                              # EH_LABEL
# %bb.1469:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z36benchForIC4VW4LoopWithReductionTC128RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z36benchForIC4VW4LoopWithReductionTC128RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2349:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2350:                              # EH_LABEL
# %bb.1470:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1472
# %bb.1471:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2636
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1472:                           # %__cxx_global_var_init.587.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_295_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_295_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 36
	st.d	$a0, $sp, 40
.Ltmp2352:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2353:                              # EH_LABEL
# %bb.1473:                             # %.noexc.i2641
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.590)
	addi.d	$a2, $a2, %pc_lo12(.L.str.590)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2355:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2356:                              # EH_LABEL
# %bb.1474:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z36benchForIC1VW1LoopWithReductionTC128RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z36benchForIC1VW1LoopWithReductionTC128RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2357:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2358:                              # EH_LABEL
# %bb.1475:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1477
# %bb.1476:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2645
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1477:                           # %__cxx_global_var_init.589.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_296_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_296_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 36
	st.d	$a0, $sp, 40
.Ltmp2360:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2361:                              # EH_LABEL
# %bb.1478:                             # %.noexc.i2650
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.592)
	addi.d	$a2, $a2, %pc_lo12(.L.str.592)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2363:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2364:                              # EH_LABEL
# %bb.1479:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z36benchForIC2VW1LoopWithReductionTC128RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z36benchForIC2VW1LoopWithReductionTC128RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2365:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2366:                              # EH_LABEL
# %bb.1480:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1482
# %bb.1481:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2654
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1482:                           # %__cxx_global_var_init.591.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_297_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_297_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 36
	st.d	$a0, $sp, 40
.Ltmp2368:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2369:                              # EH_LABEL
# %bb.1483:                             # %.noexc.i2659
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.594)
	addi.d	$a2, $a2, %pc_lo12(.L.str.594)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.w	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.w	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2371:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2372:                              # EH_LABEL
# %bb.1484:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z36benchForIC4VW1LoopWithReductionTC128RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z36benchForIC4VW1LoopWithReductionTC128RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2373:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2374:                              # EH_LABEL
# %bb.1485:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1487
# %bb.1486:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2663
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1487:                           # %__cxx_global_var_init.593.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_298_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_298_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 27
	st.d	$a0, $sp, 40
.Ltmp2376:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2377:                              # EH_LABEL
# %bb.1488:                             # %.noexc.i2668
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.596)
	addi.d	$a2, $a2, %pc_lo12(.L.str.596)
	vld	$vr0, $a2, 0
	ld.w	$a3, $a2, 23
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.w	$a3, $a0, 23
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2379:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2380:                              # EH_LABEL
# %bb.1489:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z27benchAutoVecForBigLoopTC128RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z27benchAutoVecForBigLoopTC128RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2381:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2382:                              # EH_LABEL
# %bb.1490:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1492
# %bb.1491:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2672
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1492:                           # %__cxx_global_var_init.595.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_299_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_299_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 26
	st.d	$a0, $sp, 40
.Ltmp2384:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2385:                              # EH_LABEL
# %bb.1493:                             # %.noexc.i2677
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.598)
	addi.d	$a2, $a2, %pc_lo12(.L.str.598)
	vld	$vr0, $a2, 0
	ld.h	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.h	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2387:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2388:                              # EH_LABEL
# %bb.1494:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z26benchForIC1VW4BigLoopTC128RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z26benchForIC1VW4BigLoopTC128RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2389:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2390:                              # EH_LABEL
# %bb.1495:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1497
# %bb.1496:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2681
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1497:                           # %__cxx_global_var_init.597.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_300_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_300_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 26
	st.d	$a0, $sp, 40
.Ltmp2392:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2393:                              # EH_LABEL
# %bb.1498:                             # %.noexc.i2686
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.600)
	addi.d	$a2, $a2, %pc_lo12(.L.str.600)
	vld	$vr0, $a2, 0
	ld.h	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.h	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2395:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2396:                              # EH_LABEL
# %bb.1499:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z26benchForIC2VW4BigLoopTC128RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z26benchForIC2VW4BigLoopTC128RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2397:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2398:                              # EH_LABEL
# %bb.1500:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1502
# %bb.1501:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2690
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1502:                           # %__cxx_global_var_init.599.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_301_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_301_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 26
	st.d	$a0, $sp, 40
.Ltmp2400:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2401:                              # EH_LABEL
# %bb.1503:                             # %.noexc.i2695
	st.d	$a0, $sp, 8
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.602)
	addi.d	$a2, $a2, %pc_lo12(.L.str.602)
	vld	$vr0, $a2, 0
	ld.h	$a3, $a2, 24
	ld.d	$a2, $a2, 16
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 0
	st.h	$a3, $a0, 24
	st.d	$a2, $a0, 16
	ld.d	$a0, $sp, 8
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2403:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2404:                              # EH_LABEL
# %bb.1504:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z26benchForIC4VW4BigLoopTC128RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z26benchForIC4VW4BigLoopTC128RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2405:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2406:                              # EH_LABEL
# %bb.1505:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1507
# %bb.1506:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2699
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1507:                           # %__cxx_global_var_init.601.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_302_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_302_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 40
	st.d	$a0, $sp, 40
.Ltmp2408:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2409:                              # EH_LABEL
# %bb.1508:                             # %.noexc.i2704
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.604)
	addi.d	$a2, $a2, %pc_lo12(.L.str.604)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 32
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 32
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2411:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2412:                              # EH_LABEL
# %bb.1509:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z40benchForBigLoopWithReductionAutoVecTC128RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z40benchForBigLoopWithReductionAutoVecTC128RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2413:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2414:                              # EH_LABEL
# %bb.1510:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1512
# %bb.1511:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2708
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1512:                           # %__cxx_global_var_init.603.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_303_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_303_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 39
	st.d	$a0, $sp, 40
.Ltmp2416:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2417:                              # EH_LABEL
# %bb.1513:                             # %.noexc.i2713
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.606)
	addi.d	$a2, $a2, %pc_lo12(.L.str.606)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2419:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2420:                              # EH_LABEL
# %bb.1514:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z39benchForIC1VW4BigLoopWithReductionTC128RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z39benchForIC1VW4BigLoopWithReductionTC128RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2421:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2422:                              # EH_LABEL
# %bb.1515:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1517
# %bb.1516:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2717
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1517:                           # %__cxx_global_var_init.605.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_304_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_304_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 39
	st.d	$a0, $sp, 40
.Ltmp2424:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2425:                              # EH_LABEL
# %bb.1518:                             # %.noexc.i2722
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.608)
	addi.d	$a2, $a2, %pc_lo12(.L.str.608)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2427:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2428:                              # EH_LABEL
# %bb.1519:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z39benchForIC2VW4BigLoopWithReductionTC128RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z39benchForIC2VW4BigLoopWithReductionTC128RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2429:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2430:                              # EH_LABEL
# %bb.1520:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1522
# %bb.1521:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2726
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1522:                           # %__cxx_global_var_init.607.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_305_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_305_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 39
	st.d	$a0, $sp, 40
.Ltmp2432:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2433:                              # EH_LABEL
# %bb.1523:                             # %.noexc.i2731
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.610)
	addi.d	$a2, $a2, %pc_lo12(.L.str.610)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2435:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2436:                              # EH_LABEL
# %bb.1524:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z39benchForIC4VW4BigLoopWithReductionTC128RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z39benchForIC4VW4BigLoopWithReductionTC128RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2437:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2438:                              # EH_LABEL
# %bb.1525:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1527
# %bb.1526:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2735
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1527:                           # %__cxx_global_var_init.609.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_306_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_306_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 39
	st.d	$a0, $sp, 40
.Ltmp2440:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2441:                              # EH_LABEL
# %bb.1528:                             # %.noexc.i2740
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.612)
	addi.d	$a2, $a2, %pc_lo12(.L.str.612)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2443:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2444:                              # EH_LABEL
# %bb.1529:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z39benchForIC1VW1BigLoopWithReductionTC128RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z39benchForIC1VW1BigLoopWithReductionTC128RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2445:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2446:                              # EH_LABEL
# %bb.1530:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1532
# %bb.1531:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2744
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1532:                           # %__cxx_global_var_init.611.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_307_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_307_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 39
	st.d	$a0, $sp, 40
.Ltmp2448:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2449:                              # EH_LABEL
# %bb.1533:                             # %.noexc.i2749
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.614)
	addi.d	$a2, $a2, %pc_lo12(.L.str.614)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2451:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2452:                              # EH_LABEL
# %bb.1534:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z39benchForIC2VW1BigLoopWithReductionTC128RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z39benchForIC2VW1BigLoopWithReductionTC128RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2453:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2454:                              # EH_LABEL
# %bb.1535:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1537
# %bb.1536:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2753
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1537:                           # %__cxx_global_var_init.613.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_308_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_308_benchmark_)
	ori	$a0, $zero, 232
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$s1, $sp, 8
	ori	$a0, $zero, 39
	st.d	$a0, $sp, 40
.Ltmp2456:                              # EH_LABEL
	addi.d	$a0, $sp, 8
	addi.d	$a1, $sp, 40
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm)
	jirl	$ra, $ra, 0
.Ltmp2457:                              # EH_LABEL
# %bb.1538:                             # %.noexc.i2758
	ld.d	$a1, $sp, 40
	pcalau12i	$a2, %pc_hi20(.L.str.616)
	addi.d	$a2, $a2, %pc_lo12(.L.str.616)
	vld	$vr0, $a2, 16
	st.d	$a0, $sp, 8
	st.d	$a1, $sp, 24
	vst	$vr0, $a0, 16
	vld	$vr0, $a2, 0
	ld.d	$a2, $a2, 31
	vst	$vr0, $a0, 0
	st.d	$a2, $a0, 31
	st.d	$a1, $sp, 16
	stx.b	$zero, $a0, $a1
	ori	$s3, $zero, 1
.Ltmp2459:                              # EH_LABEL
	addi.d	$a1, $sp, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal9BenchmarkC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE)
	jirl	$ra, $ra, 0
.Ltmp2460:                              # EH_LABEL
# %bb.1539:
	st.d	$s2, $fp, 0
	pcalau12i	$a0, %pc_hi20(_Z39benchForIC4VW1BigLoopWithReductionTC128RN9benchmark5StateE)
	addi.d	$a0, $a0, %pc_lo12(_Z39benchForIC4VW1BigLoopWithReductionTC128RN9benchmark5StateE)
	st.d	$a0, $fp, 224
.Ltmp2461:                              # EH_LABEL
	move	$s3, $zero
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9benchmark8internal25RegisterBenchmarkInternalEPNS0_9BenchmarkE)
	jirl	$ra, $ra, 0
.Ltmp2462:                              # EH_LABEL
# %bb.1540:
	move	$s0, $a0
	ld.d	$a0, $sp, 8
	beq	$a0, $s1, .LBB332_1542
# %bb.1541:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i.i2762
	ld.d	$a1, $sp, 24
	addi.d	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_1542:                           # %__cxx_global_var_init.615.exit
	pcalau12i	$a0, %pc_hi20(_ZL29benchmark_uniq_309_benchmark_)
	st.d	$s0, $a0, %pc_lo12(_ZL29benchmark_uniq_309_benchmark_)
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.LBB332_1543:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2755
.Ltmp2458:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1544:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2746
.Ltmp2450:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1545:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2737
.Ltmp2442:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1546:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2728
.Ltmp2434:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1547:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2719
.Ltmp2426:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1548:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2710
.Ltmp2418:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1549:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2701
.Ltmp2410:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1550:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2692
.Ltmp2402:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1551:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2683
.Ltmp2394:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1552:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2674
.Ltmp2386:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1553:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2665
.Ltmp2378:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1554:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2656
.Ltmp2370:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1555:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2647
.Ltmp2362:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1556:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2638
.Ltmp2354:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1557:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2629
.Ltmp2346:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1558:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2620
.Ltmp2338:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1559:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2611
.Ltmp2330:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1560:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2602
.Ltmp2322:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1561:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2593
.Ltmp2314:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1562:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2584
.Ltmp2306:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1563:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2575
.Ltmp2298:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1564:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2566
.Ltmp2290:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1565:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2557
.Ltmp2282:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1566:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2548
.Ltmp2274:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1567:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2539
.Ltmp2266:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1568:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2530
.Ltmp2258:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1569:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2521
.Ltmp2250:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1570:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2512
.Ltmp2242:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1571:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2503
.Ltmp2234:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1572:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2494
.Ltmp2226:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1573:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2485
.Ltmp2218:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1574:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2476
.Ltmp2210:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1575:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2467
.Ltmp2202:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1576:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2458
.Ltmp2194:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1577:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2449
.Ltmp2186:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1578:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2440
.Ltmp2178:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1579:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2431
.Ltmp2170:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1580:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2422
.Ltmp2162:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1581:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2413
.Ltmp2154:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1582:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2404
.Ltmp2146:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1583:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2395
.Ltmp2138:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1584:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2386
.Ltmp2130:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1585:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2377
.Ltmp2122:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1586:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2368
.Ltmp2114:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1587:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2359
.Ltmp2106:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1588:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2350
.Ltmp2098:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1589:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2341
.Ltmp2090:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1590:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2332
.Ltmp2082:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1591:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2323
.Ltmp2074:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1592:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2314
.Ltmp2066:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1593:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2305
.Ltmp2058:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1594:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2296
.Ltmp2050:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1595:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2287
.Ltmp2042:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1596:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2278
.Ltmp2034:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1597:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2269
.Ltmp2026:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1598:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2260
.Ltmp2018:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1599:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2251
.Ltmp2010:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1600:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2242
.Ltmp2002:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1601:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2233
.Ltmp1994:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1602:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2224
.Ltmp1986:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1603:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2215
.Ltmp1978:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1604:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2206
.Ltmp1970:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1605:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2197
.Ltmp1962:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1606:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2188
.Ltmp1954:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1607:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2179
.Ltmp1946:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1608:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2170
.Ltmp1938:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1609:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2161
.Ltmp1930:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1610:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2152
.Ltmp1922:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1611:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2143
.Ltmp1914:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1612:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2134
.Ltmp1906:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1613:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2125
.Ltmp1898:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1614:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2116
.Ltmp1890:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1615:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2107
.Ltmp1882:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1616:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2098
.Ltmp1874:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1617:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2089
.Ltmp1866:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1618:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2080
.Ltmp1858:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1619:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2071
.Ltmp1850:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1620:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2062
.Ltmp1842:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1621:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2053
.Ltmp1834:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1622:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2044
.Ltmp1826:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1623:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2035
.Ltmp1818:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1624:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2026
.Ltmp1810:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1625:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2017
.Ltmp1802:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1626:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i2008
.Ltmp1794:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1627:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1999
.Ltmp1786:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1628:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1990
.Ltmp1778:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1629:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1981
.Ltmp1770:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1630:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1972
.Ltmp1762:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1631:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1963
.Ltmp1754:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1632:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1954
.Ltmp1746:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1633:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1945
.Ltmp1738:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1634:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1936
.Ltmp1730:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1635:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1927
.Ltmp1722:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1636:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1918
.Ltmp1714:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1637:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1909
.Ltmp1706:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1638:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1900
.Ltmp1698:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1639:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1891
.Ltmp1690:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1640:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1882
.Ltmp1682:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1641:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1873
.Ltmp1674:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1642:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1864
.Ltmp1666:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1643:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1855
.Ltmp1658:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1644:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1846
.Ltmp1650:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1645:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1837
.Ltmp1642:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1646:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1828
.Ltmp1634:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1647:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1819
.Ltmp1626:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1648:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1810
.Ltmp1618:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1649:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1801
.Ltmp1610:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1650:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1792
.Ltmp1602:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1651:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1783
.Ltmp1594:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1652:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1774
.Ltmp1586:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1653:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1765
.Ltmp1578:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1654:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1756
.Ltmp1570:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1655:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1747
.Ltmp1562:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1656:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1738
.Ltmp1554:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1657:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1729
.Ltmp1546:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1658:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1720
.Ltmp1538:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1659:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1711
.Ltmp1530:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1660:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1702
.Ltmp1522:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1661:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1693
.Ltmp1514:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1662:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1684
.Ltmp1506:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1663:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1675
.Ltmp1498:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1664:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1666
.Ltmp1490:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1665:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1657
.Ltmp1482:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1666:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1648
.Ltmp1474:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1667:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1639
.Ltmp1466:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1668:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1630
.Ltmp1458:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1669:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1621
.Ltmp1450:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1670:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1612
.Ltmp1442:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1671:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1603
.Ltmp1434:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1672:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1594
.Ltmp1426:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1673:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1585
.Ltmp1418:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1674:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1576
.Ltmp1410:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1675:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1567
.Ltmp1402:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1676:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1558
.Ltmp1394:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1677:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1549
.Ltmp1386:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1678:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1540
.Ltmp1378:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1679:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1531
.Ltmp1370:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1680:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1522
.Ltmp1362:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1681:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1513
.Ltmp1354:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1682:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1504
.Ltmp1346:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1683:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1495
.Ltmp1338:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1684:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1486
.Ltmp1330:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1685:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1477
.Ltmp1322:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1686:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1468
.Ltmp1314:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1687:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1459
.Ltmp1306:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1688:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1450
.Ltmp1298:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1689:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1441
.Ltmp1290:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1690:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1432
.Ltmp1282:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1691:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1423
.Ltmp1274:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1692:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1414
.Ltmp1266:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1693:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1405
.Ltmp1258:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1694:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1396
.Ltmp1250:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1695:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1387
.Ltmp1242:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1696:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1378
.Ltmp1234:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1697:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1369
.Ltmp1226:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1698:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1360
.Ltmp1218:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1699:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1351
.Ltmp1210:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1700:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1342
.Ltmp1202:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1701:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1333
.Ltmp1194:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1702:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1324
.Ltmp1186:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1703:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1315
.Ltmp1178:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1704:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1306
.Ltmp1170:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1705:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1297
.Ltmp1162:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1706:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1288
.Ltmp1154:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1707:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1279
.Ltmp1146:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1708:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1270
.Ltmp1138:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1709:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1261
.Ltmp1130:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1710:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1252
.Ltmp1122:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1711:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1243
.Ltmp1114:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1712:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1234
.Ltmp1106:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1713:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1225
.Ltmp1098:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1714:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1216
.Ltmp1090:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1715:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1207
.Ltmp1082:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1716:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1198
.Ltmp1074:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1717:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1189
.Ltmp1066:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1718:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1180
.Ltmp1058:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1719:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1171
.Ltmp1050:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1720:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1162
.Ltmp1042:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1721:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1153
.Ltmp1034:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1722:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1144
.Ltmp1026:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1723:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1135
.Ltmp1018:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1724:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1126
.Ltmp1010:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1725:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1117
.Ltmp1002:                              # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1726:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1108
.Ltmp994:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1727:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1099
.Ltmp986:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1728:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1090
.Ltmp978:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1729:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1081
.Ltmp970:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1730:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1072
.Ltmp962:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1731:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1063
.Ltmp954:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1732:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1054
.Ltmp946:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1733:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1045
.Ltmp938:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1734:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1036
.Ltmp930:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1735:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1027
.Ltmp922:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1736:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1018
.Ltmp914:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1737:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1009
.Ltmp906:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1738:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1000
.Ltmp898:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1739:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i991
.Ltmp890:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1740:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i982
.Ltmp882:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1741:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i973
.Ltmp874:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1742:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i964
.Ltmp866:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1743:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i955
.Ltmp858:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1744:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i946
.Ltmp850:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1745:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i937
.Ltmp842:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1746:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i928
.Ltmp834:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1747:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i919
.Ltmp826:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1748:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i910
.Ltmp818:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1749:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i901
.Ltmp810:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1750:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i892
.Ltmp802:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1751:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i883
.Ltmp794:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1752:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i874
.Ltmp786:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1753:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i865
.Ltmp778:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1754:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i856
.Ltmp770:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1755:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i847
.Ltmp762:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1756:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i838
.Ltmp754:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1757:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i829
.Ltmp746:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1758:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i820
.Ltmp738:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1759:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i811
.Ltmp730:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1760:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i802
.Ltmp722:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1761:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i793
.Ltmp714:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1762:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i784
.Ltmp706:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1763:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i775
.Ltmp698:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1764:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i766
.Ltmp690:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1765:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i757
.Ltmp682:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1766:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i748
.Ltmp674:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1767:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i739
.Ltmp666:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1768:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i730
.Ltmp658:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1769:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i721
.Ltmp650:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1770:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i712
.Ltmp642:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1771:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i703
.Ltmp634:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1772:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i694
.Ltmp626:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1773:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i685
.Ltmp618:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1774:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i676
.Ltmp610:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1775:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i667
.Ltmp602:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1776:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i658
.Ltmp594:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1777:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i649
.Ltmp586:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1778:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i640
.Ltmp578:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1779:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i631
.Ltmp570:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1780:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i622
.Ltmp562:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1781:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i613
.Ltmp554:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1782:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i604
.Ltmp546:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1783:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i595
.Ltmp538:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1784:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i586
.Ltmp530:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1785:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i577
.Ltmp522:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1786:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i568
.Ltmp514:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1787:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i559
.Ltmp506:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1788:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i550
.Ltmp498:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1789:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i541
.Ltmp490:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1790:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i532
.Ltmp482:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1791:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i523
.Ltmp474:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1792:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i514
.Ltmp466:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1793:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i505
.Ltmp458:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1794:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i496
.Ltmp450:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1795:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i487
.Ltmp442:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1796:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i478
.Ltmp434:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1797:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i469
.Ltmp426:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1798:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i460
.Ltmp418:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1799:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i451
.Ltmp410:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1800:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i442
.Ltmp402:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1801:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i433
.Ltmp394:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1802:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i424
.Ltmp386:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1803:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i415
.Ltmp378:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1804:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i406
.Ltmp370:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1805:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i397
.Ltmp362:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1806:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i388
.Ltmp354:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1807:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i379
.Ltmp346:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1808:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i370
.Ltmp338:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1809:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i361
.Ltmp330:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1810:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i352
.Ltmp322:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1811:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i343
.Ltmp314:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1812:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i334
.Ltmp306:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1813:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i325
.Ltmp298:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1814:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i316
.Ltmp290:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1815:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i307
.Ltmp282:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1816:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i298
.Ltmp274:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1817:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i289
.Ltmp266:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1818:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i280
.Ltmp258:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1819:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i271
.Ltmp250:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1820:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i262
.Ltmp242:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1821:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i253
.Ltmp234:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1822:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i244
.Ltmp226:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1823:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i235
.Ltmp218:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1824:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i226
.Ltmp210:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1825:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i217
.Ltmp202:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1826:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i208
.Ltmp194:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1827:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i199
.Ltmp186:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1828:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i190
.Ltmp178:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1829:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i181
.Ltmp170:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1830:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i172
.Ltmp162:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1831:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i163
.Ltmp154:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1832:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i154
.Ltmp146:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1833:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i145
.Ltmp138:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1834:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i136
.Ltmp130:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1835:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i127
.Ltmp122:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1836:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i118
.Ltmp114:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1837:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i109
.Ltmp106:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1838:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i100
.Ltmp98:                                # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1839:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i91
.Ltmp90:                                # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1840:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i82
.Ltmp82:                                # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1841:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i73
.Ltmp74:                                # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1842:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i64
.Ltmp66:                                # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1843:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i55
.Ltmp58:                                # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1844:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i46
.Ltmp50:                                # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1845:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i37
.Ltmp42:                                # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1846:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i28
.Ltmp34:                                # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1847:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i19
.Ltmp26:                                # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1848:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i10
.Ltmp18:                                # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1849:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i1
.Ltmp10:                                # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1850:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.thread.i
.Ltmp2:                                 # EH_LABEL
	move	$s0, $a0
	b	.LBB332_2090
.LBB332_1851:
.Ltmp2463:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_1934
	b	.LBB332_1937
.LBB332_1852:
.Ltmp2455:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1853:
.Ltmp2447:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1854:
.Ltmp2439:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1855:
.Ltmp2431:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1856:
.Ltmp2423:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1857:
.Ltmp2415:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1858:
.Ltmp2407:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1859:
.Ltmp2399:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1860:
.Ltmp2391:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1861:
.Ltmp2383:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1862:
.Ltmp2375:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1863:
.Ltmp2367:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1864:
.Ltmp2359:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1865:
.Ltmp2351:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1866:
.Ltmp2343:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1867:
.Ltmp2335:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1868:
.Ltmp2327:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1869:
.Ltmp2319:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1870:
.Ltmp2311:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1871:
.Ltmp2303:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1872:
.Ltmp2295:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1873:
.Ltmp2287:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1874:
.Ltmp2279:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1875:
.Ltmp2271:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1876:
.Ltmp2263:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1877:
.Ltmp2255:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1878:
.Ltmp2247:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1879:
.Ltmp2239:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1880:
.Ltmp2231:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1881:
.Ltmp2223:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1882:
.Ltmp2215:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1883:
.Ltmp2207:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1884:
.Ltmp2199:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1885:
.Ltmp2191:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1886:
.Ltmp2183:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1887:
.Ltmp2175:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1888:
.Ltmp2167:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1889:
.Ltmp2159:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1890:
.Ltmp2151:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1891:
.Ltmp2143:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1892:
.Ltmp2135:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1893:
.Ltmp2127:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1894:
.Ltmp2119:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1895:
.Ltmp2111:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1896:
.Ltmp2103:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1897:
.Ltmp2095:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1898:
.Ltmp2087:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1899:
.Ltmp2079:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1900:
.Ltmp2071:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1901:
.Ltmp2063:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1902:
.Ltmp2055:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1903:
.Ltmp2047:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1904:
.Ltmp2039:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1905:
.Ltmp2031:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1906:
.Ltmp2023:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1907:
.Ltmp2015:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1908:
.Ltmp2007:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1909:
.Ltmp1999:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1910:
.Ltmp1991:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1911:
.Ltmp1983:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1912:
.Ltmp1975:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1913:
.Ltmp1967:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1914:
.Ltmp1959:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1915:
.Ltmp1951:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1916:
.Ltmp1943:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1917:
.Ltmp1935:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1918:
.Ltmp1927:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1919:
.Ltmp1919:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1920:
.Ltmp1911:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1921:
.Ltmp1903:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1922:
.Ltmp1895:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1923:
.Ltmp1887:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1924:
.Ltmp1879:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1925:
.Ltmp1871:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1926:
.Ltmp1863:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1927:
.Ltmp1855:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1928:
.Ltmp1847:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1929:
.Ltmp1839:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1930:
.Ltmp1831:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1931:
.Ltmp1823:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1932:
.Ltmp1815:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_1934
.LBB332_1933:
.Ltmp1807:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
.LBB332_1934:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.i2247
	ld.d	$a0, $sp, 24
	addi.d	$a1, $a0, 1
	move	$a0, $a2
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
	bnez	$s3, .LBB332_2090
	b	.LBB332_2091
.LBB332_1935:
.Ltmp1799:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_1937
	b	.LBB332_2037
.LBB332_1936:
.Ltmp1791:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
.LBB332_1937:                           # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.thread.i.i7.i2761
	bnez	$s3, .LBB332_2090
	b	.LBB332_2091
.LBB332_1938:
.Ltmp1783:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
# %bb.1939:                             # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.thread.i.i7.i1996
	beqz	$s3, .LBB332_2091
	b	.LBB332_2090
.LBB332_1940:
.Ltmp1775:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1941:
.Ltmp1767:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1942:
.Ltmp1759:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1943:
.Ltmp1751:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1944:
.Ltmp1743:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1945:
.Ltmp1735:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1946:
.Ltmp1727:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1947:
.Ltmp1719:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1948:
.Ltmp1711:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1949:
.Ltmp1703:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1950:
.Ltmp1695:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1951:
.Ltmp1687:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1952:
.Ltmp1679:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1953:
.Ltmp1671:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1954:
.Ltmp1663:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1955:
.Ltmp1655:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1956:
.Ltmp1647:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1957:
.Ltmp1639:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1958:
.Ltmp1631:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1959:
.Ltmp1623:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1960:
.Ltmp1615:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1961:
.Ltmp1607:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1962:
.Ltmp1599:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1963:
.Ltmp1591:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1964:
.Ltmp1583:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1965:
.Ltmp1575:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1966:
.Ltmp1567:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1967:
.Ltmp1559:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1968:
.Ltmp1551:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1969:
.Ltmp1543:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1970:
.Ltmp1535:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1971:
.Ltmp1527:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1972:
.Ltmp1519:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1973:
.Ltmp1511:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1974:
.Ltmp1503:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1975:
.Ltmp1495:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1976:
.Ltmp1487:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1977:
.Ltmp1479:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1978:
.Ltmp1471:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1979:
.Ltmp1463:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1980:
.Ltmp1455:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1981:
.Ltmp1447:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1982:
.Ltmp1439:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1983:
.Ltmp1431:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1984:
.Ltmp1423:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1985:
.Ltmp1415:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1986:
.Ltmp1407:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1987:
.Ltmp1399:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1988:
.Ltmp1391:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1989:
.Ltmp1383:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1990:
.Ltmp1375:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1991:
.Ltmp1367:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1992:
.Ltmp1359:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1993:
.Ltmp1351:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1994:
.Ltmp1343:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1995:
.Ltmp1335:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1996:
.Ltmp1327:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1997:
.Ltmp1319:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1998:
.Ltmp1311:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_1999:
.Ltmp1303:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2000:
.Ltmp1295:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2001:
.Ltmp1287:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2002:
.Ltmp1279:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2003:
.Ltmp1271:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2004:
.Ltmp1263:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2005:
.Ltmp1255:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2006:
.Ltmp1247:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2007:
.Ltmp1239:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2008:
.Ltmp1231:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2009:
.Ltmp1223:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2010:
.Ltmp1215:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2011:
.Ltmp1207:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2012:
.Ltmp1199:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2013:
.Ltmp1191:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2014:
.Ltmp1183:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2015:
.Ltmp1175:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2016:
.Ltmp1167:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2017:
.Ltmp1159:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2018:
.Ltmp1151:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2019:
.Ltmp1143:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2020:
.Ltmp1135:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2021:
.Ltmp1127:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2022:
.Ltmp1119:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2023:
.Ltmp1111:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2024:
.Ltmp1103:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2025:
.Ltmp1095:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2026:
.Ltmp1087:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2027:
.Ltmp1079:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2028:
.Ltmp1071:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2029:
.Ltmp1063:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2030:
.Ltmp1055:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2031:
.Ltmp1047:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2032:
.Ltmp1039:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2033:
.Ltmp1031:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2034:
.Ltmp1023:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2035:
.Ltmp1015:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2037
	b	.LBB332_2089
.LBB332_2036:
.Ltmp1007:                              # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
.LBB332_2037:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.i1122
	ld.d	$a0, $sp, 24
	addi.d	$a1, $a0, 1
	move	$a0, $a2
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
	bnez	$s3, .LBB332_2090
	b	.LBB332_2091
.LBB332_2038:
.Ltmp999:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2039:
.Ltmp991:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2040:
.Ltmp983:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2041:
.Ltmp975:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2042:
.Ltmp967:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2043:
.Ltmp959:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2044:
.Ltmp951:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2045:
.Ltmp943:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2046:
.Ltmp935:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2047:
.Ltmp927:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2048:
.Ltmp919:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2049:
.Ltmp911:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2050:
.Ltmp903:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2051:
.Ltmp895:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2052:
.Ltmp887:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2053:
.Ltmp879:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2054:
.Ltmp871:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2055:
.Ltmp863:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2056:
.Ltmp855:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2057:
.Ltmp847:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2058:
.Ltmp839:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2059:
.Ltmp831:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2060:
.Ltmp823:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2061:
.Ltmp815:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2062:
.Ltmp807:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2063:
.Ltmp799:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2064:
.Ltmp791:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2065:
.Ltmp783:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2066:
.Ltmp775:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2067:
.Ltmp767:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2068:
.Ltmp759:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2069:
.Ltmp751:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2070:
.Ltmp743:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2071:
.Ltmp735:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2072:
.Ltmp727:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2073:
.Ltmp719:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2074:
.Ltmp711:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2075:
.Ltmp703:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2076:
.Ltmp695:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2077:
.Ltmp687:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2078:
.Ltmp679:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2079:
.Ltmp671:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2080:
.Ltmp663:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2081:
.Ltmp655:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2082:
.Ltmp647:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2083:
.Ltmp639:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2084:
.Ltmp631:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2085:
.Ltmp623:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2086:
.Ltmp615:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2087:
.Ltmp607:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2089
	b	.LBB332_2165
.LBB332_2088:
.Ltmp599:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
.LBB332_2089:                           # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.thread.i.i7.i664
	beqz	$s3, .LBB332_2091
.LBB332_2090:                           # %common.resume.sink.split
	ori	$a1, $zero, 232
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB332_2091:                           # %common.resume
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB332_2092:
.Ltmp591:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2093:
.Ltmp583:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2094:
.Ltmp575:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2095:
.Ltmp567:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2096:
.Ltmp559:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2097:
.Ltmp551:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2098:
.Ltmp543:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2099:
.Ltmp535:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2100:
.Ltmp527:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2101:
.Ltmp519:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2102:
.Ltmp511:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2103:
.Ltmp503:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2104:
.Ltmp495:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2105:
.Ltmp487:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2106:
.Ltmp479:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2107:
.Ltmp471:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2108:
.Ltmp463:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2109:
.Ltmp455:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2110:
.Ltmp447:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2111:
.Ltmp439:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2112:
.Ltmp431:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2113:
.Ltmp423:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2114:
.Ltmp415:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2115:
.Ltmp407:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2167
	b	.LBB332_2165
.LBB332_2116:
.Ltmp399:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2117:
.Ltmp391:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2118:
.Ltmp383:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2119:
.Ltmp375:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2120:
.Ltmp367:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2121:
.Ltmp359:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2122:
.Ltmp351:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2123:
.Ltmp343:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2124:
.Ltmp335:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2125:
.Ltmp327:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2126:
.Ltmp319:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2127:
.Ltmp311:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2128:
.Ltmp303:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2129:
.Ltmp295:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2130:
.Ltmp287:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2131:
.Ltmp279:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2132:
.Ltmp271:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2133:
.Ltmp263:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2134:
.Ltmp255:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2135:
.Ltmp247:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2136:
.Ltmp239:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2137:
.Ltmp231:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2138:
.Ltmp223:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2139:
.Ltmp215:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2140:
.Ltmp207:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2141:
.Ltmp199:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2142:
.Ltmp191:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2143:
.Ltmp183:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2144:
.Ltmp175:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2145:
.Ltmp167:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2146:
.Ltmp159:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2147:
.Ltmp151:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2148:
.Ltmp143:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2149:
.Ltmp135:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2150:
.Ltmp127:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2151:
.Ltmp119:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2152:
.Ltmp111:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2153:
.Ltmp103:                               # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2154:
.Ltmp95:                                # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2155:
.Ltmp87:                                # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2156:
.Ltmp79:                                # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2157:
.Ltmp71:                                # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2158:
.Ltmp63:                                # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2159:
.Ltmp55:                                # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2160:
.Ltmp47:                                # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2161:
.Ltmp39:                                # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2162:
.Ltmp31:                                # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2163:
.Ltmp23:                                # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
	b	.LBB332_2167
.LBB332_2164:
.Ltmp15:                                # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	beq	$a2, $s1, .LBB332_2167
.LBB332_2165:                           # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit8.i447
	ld.d	$a0, $sp, 24
	addi.d	$a1, $a0, 1
	move	$a0, $a2
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
	beqz	$s3, .LBB332_2091
	b	.LBB332_2090
.LBB332_2166:
.Ltmp7:                                 # EH_LABEL
	ld.d	$a2, $sp, 8
	move	$s0, $a0
	bne	$a2, $s1, .LBB332_2165
.LBB332_2167:                           # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.thread.i.i7.i
	beqz	$s3, .LBB332_2091
	b	.LBB332_2090
.Lfunc_end332:
	.size	_GLOBAL__sub_I_LoopInterleaving.cpp, .Lfunc_end332-_GLOBAL__sub_I_LoopInterleaving.cpp
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table332:
.Lexception0:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end0-.Lcst_begin0
.Lcst_begin0:
	.uleb128 .Lfunc_begin0-.Lfunc_begin0    # >> Call Site 1 <<
	.uleb128 .Ltmp0-.Lfunc_begin0           #   Call between .Lfunc_begin0 and .Ltmp0
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp0-.Lfunc_begin0           # >> Call Site 2 <<
	.uleb128 .Ltmp1-.Ltmp0                  #   Call between .Ltmp0 and .Ltmp1
	.uleb128 .Ltmp2-.Lfunc_begin0           #     jumps to .Ltmp2
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp3-.Lfunc_begin0           # >> Call Site 3 <<
	.uleb128 .Ltmp6-.Ltmp3                  #   Call between .Ltmp3 and .Ltmp6
	.uleb128 .Ltmp7-.Lfunc_begin0           #     jumps to .Ltmp7
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp6-.Lfunc_begin0           # >> Call Site 4 <<
	.uleb128 .Ltmp8-.Ltmp6                  #   Call between .Ltmp6 and .Ltmp8
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp8-.Lfunc_begin0           # >> Call Site 5 <<
	.uleb128 .Ltmp9-.Ltmp8                  #   Call between .Ltmp8 and .Ltmp9
	.uleb128 .Ltmp10-.Lfunc_begin0          #     jumps to .Ltmp10
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp11-.Lfunc_begin0          # >> Call Site 6 <<
	.uleb128 .Ltmp14-.Ltmp11                #   Call between .Ltmp11 and .Ltmp14
	.uleb128 .Ltmp15-.Lfunc_begin0          #     jumps to .Ltmp15
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp14-.Lfunc_begin0          # >> Call Site 7 <<
	.uleb128 .Ltmp16-.Ltmp14                #   Call between .Ltmp14 and .Ltmp16
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp16-.Lfunc_begin0          # >> Call Site 8 <<
	.uleb128 .Ltmp17-.Ltmp16                #   Call between .Ltmp16 and .Ltmp17
	.uleb128 .Ltmp18-.Lfunc_begin0          #     jumps to .Ltmp18
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp19-.Lfunc_begin0          # >> Call Site 9 <<
	.uleb128 .Ltmp22-.Ltmp19                #   Call between .Ltmp19 and .Ltmp22
	.uleb128 .Ltmp23-.Lfunc_begin0          #     jumps to .Ltmp23
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp22-.Lfunc_begin0          # >> Call Site 10 <<
	.uleb128 .Ltmp24-.Ltmp22                #   Call between .Ltmp22 and .Ltmp24
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp24-.Lfunc_begin0          # >> Call Site 11 <<
	.uleb128 .Ltmp25-.Ltmp24                #   Call between .Ltmp24 and .Ltmp25
	.uleb128 .Ltmp26-.Lfunc_begin0          #     jumps to .Ltmp26
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp27-.Lfunc_begin0          # >> Call Site 12 <<
	.uleb128 .Ltmp30-.Ltmp27                #   Call between .Ltmp27 and .Ltmp30
	.uleb128 .Ltmp31-.Lfunc_begin0          #     jumps to .Ltmp31
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp30-.Lfunc_begin0          # >> Call Site 13 <<
	.uleb128 .Ltmp32-.Ltmp30                #   Call between .Ltmp30 and .Ltmp32
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp32-.Lfunc_begin0          # >> Call Site 14 <<
	.uleb128 .Ltmp33-.Ltmp32                #   Call between .Ltmp32 and .Ltmp33
	.uleb128 .Ltmp34-.Lfunc_begin0          #     jumps to .Ltmp34
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp35-.Lfunc_begin0          # >> Call Site 15 <<
	.uleb128 .Ltmp38-.Ltmp35                #   Call between .Ltmp35 and .Ltmp38
	.uleb128 .Ltmp39-.Lfunc_begin0          #     jumps to .Ltmp39
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp38-.Lfunc_begin0          # >> Call Site 16 <<
	.uleb128 .Ltmp40-.Ltmp38                #   Call between .Ltmp38 and .Ltmp40
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp40-.Lfunc_begin0          # >> Call Site 17 <<
	.uleb128 .Ltmp41-.Ltmp40                #   Call between .Ltmp40 and .Ltmp41
	.uleb128 .Ltmp42-.Lfunc_begin0          #     jumps to .Ltmp42
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp43-.Lfunc_begin0          # >> Call Site 18 <<
	.uleb128 .Ltmp46-.Ltmp43                #   Call between .Ltmp43 and .Ltmp46
	.uleb128 .Ltmp47-.Lfunc_begin0          #     jumps to .Ltmp47
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp46-.Lfunc_begin0          # >> Call Site 19 <<
	.uleb128 .Ltmp48-.Ltmp46                #   Call between .Ltmp46 and .Ltmp48
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp48-.Lfunc_begin0          # >> Call Site 20 <<
	.uleb128 .Ltmp49-.Ltmp48                #   Call between .Ltmp48 and .Ltmp49
	.uleb128 .Ltmp50-.Lfunc_begin0          #     jumps to .Ltmp50
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp51-.Lfunc_begin0          # >> Call Site 21 <<
	.uleb128 .Ltmp54-.Ltmp51                #   Call between .Ltmp51 and .Ltmp54
	.uleb128 .Ltmp55-.Lfunc_begin0          #     jumps to .Ltmp55
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp54-.Lfunc_begin0          # >> Call Site 22 <<
	.uleb128 .Ltmp56-.Ltmp54                #   Call between .Ltmp54 and .Ltmp56
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp56-.Lfunc_begin0          # >> Call Site 23 <<
	.uleb128 .Ltmp57-.Ltmp56                #   Call between .Ltmp56 and .Ltmp57
	.uleb128 .Ltmp58-.Lfunc_begin0          #     jumps to .Ltmp58
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp59-.Lfunc_begin0          # >> Call Site 24 <<
	.uleb128 .Ltmp62-.Ltmp59                #   Call between .Ltmp59 and .Ltmp62
	.uleb128 .Ltmp63-.Lfunc_begin0          #     jumps to .Ltmp63
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp62-.Lfunc_begin0          # >> Call Site 25 <<
	.uleb128 .Ltmp64-.Ltmp62                #   Call between .Ltmp62 and .Ltmp64
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp64-.Lfunc_begin0          # >> Call Site 26 <<
	.uleb128 .Ltmp65-.Ltmp64                #   Call between .Ltmp64 and .Ltmp65
	.uleb128 .Ltmp66-.Lfunc_begin0          #     jumps to .Ltmp66
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp67-.Lfunc_begin0          # >> Call Site 27 <<
	.uleb128 .Ltmp70-.Ltmp67                #   Call between .Ltmp67 and .Ltmp70
	.uleb128 .Ltmp71-.Lfunc_begin0          #     jumps to .Ltmp71
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp70-.Lfunc_begin0          # >> Call Site 28 <<
	.uleb128 .Ltmp72-.Ltmp70                #   Call between .Ltmp70 and .Ltmp72
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp72-.Lfunc_begin0          # >> Call Site 29 <<
	.uleb128 .Ltmp73-.Ltmp72                #   Call between .Ltmp72 and .Ltmp73
	.uleb128 .Ltmp74-.Lfunc_begin0          #     jumps to .Ltmp74
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp75-.Lfunc_begin0          # >> Call Site 30 <<
	.uleb128 .Ltmp78-.Ltmp75                #   Call between .Ltmp75 and .Ltmp78
	.uleb128 .Ltmp79-.Lfunc_begin0          #     jumps to .Ltmp79
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp78-.Lfunc_begin0          # >> Call Site 31 <<
	.uleb128 .Ltmp80-.Ltmp78                #   Call between .Ltmp78 and .Ltmp80
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp80-.Lfunc_begin0          # >> Call Site 32 <<
	.uleb128 .Ltmp81-.Ltmp80                #   Call between .Ltmp80 and .Ltmp81
	.uleb128 .Ltmp82-.Lfunc_begin0          #     jumps to .Ltmp82
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp83-.Lfunc_begin0          # >> Call Site 33 <<
	.uleb128 .Ltmp86-.Ltmp83                #   Call between .Ltmp83 and .Ltmp86
	.uleb128 .Ltmp87-.Lfunc_begin0          #     jumps to .Ltmp87
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp86-.Lfunc_begin0          # >> Call Site 34 <<
	.uleb128 .Ltmp88-.Ltmp86                #   Call between .Ltmp86 and .Ltmp88
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp88-.Lfunc_begin0          # >> Call Site 35 <<
	.uleb128 .Ltmp89-.Ltmp88                #   Call between .Ltmp88 and .Ltmp89
	.uleb128 .Ltmp90-.Lfunc_begin0          #     jumps to .Ltmp90
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp91-.Lfunc_begin0          # >> Call Site 36 <<
	.uleb128 .Ltmp94-.Ltmp91                #   Call between .Ltmp91 and .Ltmp94
	.uleb128 .Ltmp95-.Lfunc_begin0          #     jumps to .Ltmp95
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp94-.Lfunc_begin0          # >> Call Site 37 <<
	.uleb128 .Ltmp96-.Ltmp94                #   Call between .Ltmp94 and .Ltmp96
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp96-.Lfunc_begin0          # >> Call Site 38 <<
	.uleb128 .Ltmp97-.Ltmp96                #   Call between .Ltmp96 and .Ltmp97
	.uleb128 .Ltmp98-.Lfunc_begin0          #     jumps to .Ltmp98
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp99-.Lfunc_begin0          # >> Call Site 39 <<
	.uleb128 .Ltmp102-.Ltmp99               #   Call between .Ltmp99 and .Ltmp102
	.uleb128 .Ltmp103-.Lfunc_begin0         #     jumps to .Ltmp103
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp102-.Lfunc_begin0         # >> Call Site 40 <<
	.uleb128 .Ltmp104-.Ltmp102              #   Call between .Ltmp102 and .Ltmp104
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp104-.Lfunc_begin0         # >> Call Site 41 <<
	.uleb128 .Ltmp105-.Ltmp104              #   Call between .Ltmp104 and .Ltmp105
	.uleb128 .Ltmp106-.Lfunc_begin0         #     jumps to .Ltmp106
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp107-.Lfunc_begin0         # >> Call Site 42 <<
	.uleb128 .Ltmp110-.Ltmp107              #   Call between .Ltmp107 and .Ltmp110
	.uleb128 .Ltmp111-.Lfunc_begin0         #     jumps to .Ltmp111
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp110-.Lfunc_begin0         # >> Call Site 43 <<
	.uleb128 .Ltmp112-.Ltmp110              #   Call between .Ltmp110 and .Ltmp112
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp112-.Lfunc_begin0         # >> Call Site 44 <<
	.uleb128 .Ltmp113-.Ltmp112              #   Call between .Ltmp112 and .Ltmp113
	.uleb128 .Ltmp114-.Lfunc_begin0         #     jumps to .Ltmp114
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp115-.Lfunc_begin0         # >> Call Site 45 <<
	.uleb128 .Ltmp118-.Ltmp115              #   Call between .Ltmp115 and .Ltmp118
	.uleb128 .Ltmp119-.Lfunc_begin0         #     jumps to .Ltmp119
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp118-.Lfunc_begin0         # >> Call Site 46 <<
	.uleb128 .Ltmp120-.Ltmp118              #   Call between .Ltmp118 and .Ltmp120
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp120-.Lfunc_begin0         # >> Call Site 47 <<
	.uleb128 .Ltmp121-.Ltmp120              #   Call between .Ltmp120 and .Ltmp121
	.uleb128 .Ltmp122-.Lfunc_begin0         #     jumps to .Ltmp122
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp123-.Lfunc_begin0         # >> Call Site 48 <<
	.uleb128 .Ltmp126-.Ltmp123              #   Call between .Ltmp123 and .Ltmp126
	.uleb128 .Ltmp127-.Lfunc_begin0         #     jumps to .Ltmp127
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp126-.Lfunc_begin0         # >> Call Site 49 <<
	.uleb128 .Ltmp128-.Ltmp126              #   Call between .Ltmp126 and .Ltmp128
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp128-.Lfunc_begin0         # >> Call Site 50 <<
	.uleb128 .Ltmp129-.Ltmp128              #   Call between .Ltmp128 and .Ltmp129
	.uleb128 .Ltmp130-.Lfunc_begin0         #     jumps to .Ltmp130
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp131-.Lfunc_begin0         # >> Call Site 51 <<
	.uleb128 .Ltmp134-.Ltmp131              #   Call between .Ltmp131 and .Ltmp134
	.uleb128 .Ltmp135-.Lfunc_begin0         #     jumps to .Ltmp135
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp134-.Lfunc_begin0         # >> Call Site 52 <<
	.uleb128 .Ltmp136-.Ltmp134              #   Call between .Ltmp134 and .Ltmp136
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp136-.Lfunc_begin0         # >> Call Site 53 <<
	.uleb128 .Ltmp137-.Ltmp136              #   Call between .Ltmp136 and .Ltmp137
	.uleb128 .Ltmp138-.Lfunc_begin0         #     jumps to .Ltmp138
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp139-.Lfunc_begin0         # >> Call Site 54 <<
	.uleb128 .Ltmp142-.Ltmp139              #   Call between .Ltmp139 and .Ltmp142
	.uleb128 .Ltmp143-.Lfunc_begin0         #     jumps to .Ltmp143
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp142-.Lfunc_begin0         # >> Call Site 55 <<
	.uleb128 .Ltmp144-.Ltmp142              #   Call between .Ltmp142 and .Ltmp144
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp144-.Lfunc_begin0         # >> Call Site 56 <<
	.uleb128 .Ltmp145-.Ltmp144              #   Call between .Ltmp144 and .Ltmp145
	.uleb128 .Ltmp146-.Lfunc_begin0         #     jumps to .Ltmp146
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp147-.Lfunc_begin0         # >> Call Site 57 <<
	.uleb128 .Ltmp150-.Ltmp147              #   Call between .Ltmp147 and .Ltmp150
	.uleb128 .Ltmp151-.Lfunc_begin0         #     jumps to .Ltmp151
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp150-.Lfunc_begin0         # >> Call Site 58 <<
	.uleb128 .Ltmp152-.Ltmp150              #   Call between .Ltmp150 and .Ltmp152
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp152-.Lfunc_begin0         # >> Call Site 59 <<
	.uleb128 .Ltmp153-.Ltmp152              #   Call between .Ltmp152 and .Ltmp153
	.uleb128 .Ltmp154-.Lfunc_begin0         #     jumps to .Ltmp154
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp155-.Lfunc_begin0         # >> Call Site 60 <<
	.uleb128 .Ltmp158-.Ltmp155              #   Call between .Ltmp155 and .Ltmp158
	.uleb128 .Ltmp159-.Lfunc_begin0         #     jumps to .Ltmp159
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp158-.Lfunc_begin0         # >> Call Site 61 <<
	.uleb128 .Ltmp160-.Ltmp158              #   Call between .Ltmp158 and .Ltmp160
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp160-.Lfunc_begin0         # >> Call Site 62 <<
	.uleb128 .Ltmp161-.Ltmp160              #   Call between .Ltmp160 and .Ltmp161
	.uleb128 .Ltmp162-.Lfunc_begin0         #     jumps to .Ltmp162
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp163-.Lfunc_begin0         # >> Call Site 63 <<
	.uleb128 .Ltmp166-.Ltmp163              #   Call between .Ltmp163 and .Ltmp166
	.uleb128 .Ltmp167-.Lfunc_begin0         #     jumps to .Ltmp167
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp166-.Lfunc_begin0         # >> Call Site 64 <<
	.uleb128 .Ltmp168-.Ltmp166              #   Call between .Ltmp166 and .Ltmp168
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp168-.Lfunc_begin0         # >> Call Site 65 <<
	.uleb128 .Ltmp169-.Ltmp168              #   Call between .Ltmp168 and .Ltmp169
	.uleb128 .Ltmp170-.Lfunc_begin0         #     jumps to .Ltmp170
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp171-.Lfunc_begin0         # >> Call Site 66 <<
	.uleb128 .Ltmp174-.Ltmp171              #   Call between .Ltmp171 and .Ltmp174
	.uleb128 .Ltmp175-.Lfunc_begin0         #     jumps to .Ltmp175
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp174-.Lfunc_begin0         # >> Call Site 67 <<
	.uleb128 .Ltmp176-.Ltmp174              #   Call between .Ltmp174 and .Ltmp176
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp176-.Lfunc_begin0         # >> Call Site 68 <<
	.uleb128 .Ltmp177-.Ltmp176              #   Call between .Ltmp176 and .Ltmp177
	.uleb128 .Ltmp178-.Lfunc_begin0         #     jumps to .Ltmp178
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp179-.Lfunc_begin0         # >> Call Site 69 <<
	.uleb128 .Ltmp182-.Ltmp179              #   Call between .Ltmp179 and .Ltmp182
	.uleb128 .Ltmp183-.Lfunc_begin0         #     jumps to .Ltmp183
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp182-.Lfunc_begin0         # >> Call Site 70 <<
	.uleb128 .Ltmp184-.Ltmp182              #   Call between .Ltmp182 and .Ltmp184
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp184-.Lfunc_begin0         # >> Call Site 71 <<
	.uleb128 .Ltmp185-.Ltmp184              #   Call between .Ltmp184 and .Ltmp185
	.uleb128 .Ltmp186-.Lfunc_begin0         #     jumps to .Ltmp186
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp187-.Lfunc_begin0         # >> Call Site 72 <<
	.uleb128 .Ltmp190-.Ltmp187              #   Call between .Ltmp187 and .Ltmp190
	.uleb128 .Ltmp191-.Lfunc_begin0         #     jumps to .Ltmp191
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp190-.Lfunc_begin0         # >> Call Site 73 <<
	.uleb128 .Ltmp192-.Ltmp190              #   Call between .Ltmp190 and .Ltmp192
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp192-.Lfunc_begin0         # >> Call Site 74 <<
	.uleb128 .Ltmp193-.Ltmp192              #   Call between .Ltmp192 and .Ltmp193
	.uleb128 .Ltmp194-.Lfunc_begin0         #     jumps to .Ltmp194
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp195-.Lfunc_begin0         # >> Call Site 75 <<
	.uleb128 .Ltmp198-.Ltmp195              #   Call between .Ltmp195 and .Ltmp198
	.uleb128 .Ltmp199-.Lfunc_begin0         #     jumps to .Ltmp199
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp198-.Lfunc_begin0         # >> Call Site 76 <<
	.uleb128 .Ltmp200-.Ltmp198              #   Call between .Ltmp198 and .Ltmp200
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp200-.Lfunc_begin0         # >> Call Site 77 <<
	.uleb128 .Ltmp201-.Ltmp200              #   Call between .Ltmp200 and .Ltmp201
	.uleb128 .Ltmp202-.Lfunc_begin0         #     jumps to .Ltmp202
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp203-.Lfunc_begin0         # >> Call Site 78 <<
	.uleb128 .Ltmp206-.Ltmp203              #   Call between .Ltmp203 and .Ltmp206
	.uleb128 .Ltmp207-.Lfunc_begin0         #     jumps to .Ltmp207
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp206-.Lfunc_begin0         # >> Call Site 79 <<
	.uleb128 .Ltmp208-.Ltmp206              #   Call between .Ltmp206 and .Ltmp208
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp208-.Lfunc_begin0         # >> Call Site 80 <<
	.uleb128 .Ltmp209-.Ltmp208              #   Call between .Ltmp208 and .Ltmp209
	.uleb128 .Ltmp210-.Lfunc_begin0         #     jumps to .Ltmp210
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp211-.Lfunc_begin0         # >> Call Site 81 <<
	.uleb128 .Ltmp214-.Ltmp211              #   Call between .Ltmp211 and .Ltmp214
	.uleb128 .Ltmp215-.Lfunc_begin0         #     jumps to .Ltmp215
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp214-.Lfunc_begin0         # >> Call Site 82 <<
	.uleb128 .Ltmp216-.Ltmp214              #   Call between .Ltmp214 and .Ltmp216
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp216-.Lfunc_begin0         # >> Call Site 83 <<
	.uleb128 .Ltmp217-.Ltmp216              #   Call between .Ltmp216 and .Ltmp217
	.uleb128 .Ltmp218-.Lfunc_begin0         #     jumps to .Ltmp218
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp219-.Lfunc_begin0         # >> Call Site 84 <<
	.uleb128 .Ltmp222-.Ltmp219              #   Call between .Ltmp219 and .Ltmp222
	.uleb128 .Ltmp223-.Lfunc_begin0         #     jumps to .Ltmp223
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp222-.Lfunc_begin0         # >> Call Site 85 <<
	.uleb128 .Ltmp224-.Ltmp222              #   Call between .Ltmp222 and .Ltmp224
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp224-.Lfunc_begin0         # >> Call Site 86 <<
	.uleb128 .Ltmp225-.Ltmp224              #   Call between .Ltmp224 and .Ltmp225
	.uleb128 .Ltmp226-.Lfunc_begin0         #     jumps to .Ltmp226
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp227-.Lfunc_begin0         # >> Call Site 87 <<
	.uleb128 .Ltmp230-.Ltmp227              #   Call between .Ltmp227 and .Ltmp230
	.uleb128 .Ltmp231-.Lfunc_begin0         #     jumps to .Ltmp231
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp230-.Lfunc_begin0         # >> Call Site 88 <<
	.uleb128 .Ltmp232-.Ltmp230              #   Call between .Ltmp230 and .Ltmp232
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp232-.Lfunc_begin0         # >> Call Site 89 <<
	.uleb128 .Ltmp233-.Ltmp232              #   Call between .Ltmp232 and .Ltmp233
	.uleb128 .Ltmp234-.Lfunc_begin0         #     jumps to .Ltmp234
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp235-.Lfunc_begin0         # >> Call Site 90 <<
	.uleb128 .Ltmp238-.Ltmp235              #   Call between .Ltmp235 and .Ltmp238
	.uleb128 .Ltmp239-.Lfunc_begin0         #     jumps to .Ltmp239
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp238-.Lfunc_begin0         # >> Call Site 91 <<
	.uleb128 .Ltmp240-.Ltmp238              #   Call between .Ltmp238 and .Ltmp240
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp240-.Lfunc_begin0         # >> Call Site 92 <<
	.uleb128 .Ltmp241-.Ltmp240              #   Call between .Ltmp240 and .Ltmp241
	.uleb128 .Ltmp242-.Lfunc_begin0         #     jumps to .Ltmp242
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp243-.Lfunc_begin0         # >> Call Site 93 <<
	.uleb128 .Ltmp246-.Ltmp243              #   Call between .Ltmp243 and .Ltmp246
	.uleb128 .Ltmp247-.Lfunc_begin0         #     jumps to .Ltmp247
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp246-.Lfunc_begin0         # >> Call Site 94 <<
	.uleb128 .Ltmp248-.Ltmp246              #   Call between .Ltmp246 and .Ltmp248
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp248-.Lfunc_begin0         # >> Call Site 95 <<
	.uleb128 .Ltmp249-.Ltmp248              #   Call between .Ltmp248 and .Ltmp249
	.uleb128 .Ltmp250-.Lfunc_begin0         #     jumps to .Ltmp250
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp251-.Lfunc_begin0         # >> Call Site 96 <<
	.uleb128 .Ltmp254-.Ltmp251              #   Call between .Ltmp251 and .Ltmp254
	.uleb128 .Ltmp255-.Lfunc_begin0         #     jumps to .Ltmp255
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp254-.Lfunc_begin0         # >> Call Site 97 <<
	.uleb128 .Ltmp256-.Ltmp254              #   Call between .Ltmp254 and .Ltmp256
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp256-.Lfunc_begin0         # >> Call Site 98 <<
	.uleb128 .Ltmp257-.Ltmp256              #   Call between .Ltmp256 and .Ltmp257
	.uleb128 .Ltmp258-.Lfunc_begin0         #     jumps to .Ltmp258
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp259-.Lfunc_begin0         # >> Call Site 99 <<
	.uleb128 .Ltmp262-.Ltmp259              #   Call between .Ltmp259 and .Ltmp262
	.uleb128 .Ltmp263-.Lfunc_begin0         #     jumps to .Ltmp263
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp262-.Lfunc_begin0         # >> Call Site 100 <<
	.uleb128 .Ltmp264-.Ltmp262              #   Call between .Ltmp262 and .Ltmp264
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp264-.Lfunc_begin0         # >> Call Site 101 <<
	.uleb128 .Ltmp265-.Ltmp264              #   Call between .Ltmp264 and .Ltmp265
	.uleb128 .Ltmp266-.Lfunc_begin0         #     jumps to .Ltmp266
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp267-.Lfunc_begin0         # >> Call Site 102 <<
	.uleb128 .Ltmp270-.Ltmp267              #   Call between .Ltmp267 and .Ltmp270
	.uleb128 .Ltmp271-.Lfunc_begin0         #     jumps to .Ltmp271
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp270-.Lfunc_begin0         # >> Call Site 103 <<
	.uleb128 .Ltmp272-.Ltmp270              #   Call between .Ltmp270 and .Ltmp272
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp272-.Lfunc_begin0         # >> Call Site 104 <<
	.uleb128 .Ltmp273-.Ltmp272              #   Call between .Ltmp272 and .Ltmp273
	.uleb128 .Ltmp274-.Lfunc_begin0         #     jumps to .Ltmp274
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp275-.Lfunc_begin0         # >> Call Site 105 <<
	.uleb128 .Ltmp278-.Ltmp275              #   Call between .Ltmp275 and .Ltmp278
	.uleb128 .Ltmp279-.Lfunc_begin0         #     jumps to .Ltmp279
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp278-.Lfunc_begin0         # >> Call Site 106 <<
	.uleb128 .Ltmp280-.Ltmp278              #   Call between .Ltmp278 and .Ltmp280
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp280-.Lfunc_begin0         # >> Call Site 107 <<
	.uleb128 .Ltmp281-.Ltmp280              #   Call between .Ltmp280 and .Ltmp281
	.uleb128 .Ltmp282-.Lfunc_begin0         #     jumps to .Ltmp282
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp283-.Lfunc_begin0         # >> Call Site 108 <<
	.uleb128 .Ltmp286-.Ltmp283              #   Call between .Ltmp283 and .Ltmp286
	.uleb128 .Ltmp287-.Lfunc_begin0         #     jumps to .Ltmp287
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp286-.Lfunc_begin0         # >> Call Site 109 <<
	.uleb128 .Ltmp288-.Ltmp286              #   Call between .Ltmp286 and .Ltmp288
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp288-.Lfunc_begin0         # >> Call Site 110 <<
	.uleb128 .Ltmp289-.Ltmp288              #   Call between .Ltmp288 and .Ltmp289
	.uleb128 .Ltmp290-.Lfunc_begin0         #     jumps to .Ltmp290
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp291-.Lfunc_begin0         # >> Call Site 111 <<
	.uleb128 .Ltmp294-.Ltmp291              #   Call between .Ltmp291 and .Ltmp294
	.uleb128 .Ltmp295-.Lfunc_begin0         #     jumps to .Ltmp295
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp294-.Lfunc_begin0         # >> Call Site 112 <<
	.uleb128 .Ltmp296-.Ltmp294              #   Call between .Ltmp294 and .Ltmp296
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp296-.Lfunc_begin0         # >> Call Site 113 <<
	.uleb128 .Ltmp297-.Ltmp296              #   Call between .Ltmp296 and .Ltmp297
	.uleb128 .Ltmp298-.Lfunc_begin0         #     jumps to .Ltmp298
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp299-.Lfunc_begin0         # >> Call Site 114 <<
	.uleb128 .Ltmp302-.Ltmp299              #   Call between .Ltmp299 and .Ltmp302
	.uleb128 .Ltmp303-.Lfunc_begin0         #     jumps to .Ltmp303
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp302-.Lfunc_begin0         # >> Call Site 115 <<
	.uleb128 .Ltmp304-.Ltmp302              #   Call between .Ltmp302 and .Ltmp304
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp304-.Lfunc_begin0         # >> Call Site 116 <<
	.uleb128 .Ltmp305-.Ltmp304              #   Call between .Ltmp304 and .Ltmp305
	.uleb128 .Ltmp306-.Lfunc_begin0         #     jumps to .Ltmp306
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp307-.Lfunc_begin0         # >> Call Site 117 <<
	.uleb128 .Ltmp310-.Ltmp307              #   Call between .Ltmp307 and .Ltmp310
	.uleb128 .Ltmp311-.Lfunc_begin0         #     jumps to .Ltmp311
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp310-.Lfunc_begin0         # >> Call Site 118 <<
	.uleb128 .Ltmp312-.Ltmp310              #   Call between .Ltmp310 and .Ltmp312
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp312-.Lfunc_begin0         # >> Call Site 119 <<
	.uleb128 .Ltmp313-.Ltmp312              #   Call between .Ltmp312 and .Ltmp313
	.uleb128 .Ltmp314-.Lfunc_begin0         #     jumps to .Ltmp314
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp315-.Lfunc_begin0         # >> Call Site 120 <<
	.uleb128 .Ltmp318-.Ltmp315              #   Call between .Ltmp315 and .Ltmp318
	.uleb128 .Ltmp319-.Lfunc_begin0         #     jumps to .Ltmp319
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp318-.Lfunc_begin0         # >> Call Site 121 <<
	.uleb128 .Ltmp320-.Ltmp318              #   Call between .Ltmp318 and .Ltmp320
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp320-.Lfunc_begin0         # >> Call Site 122 <<
	.uleb128 .Ltmp321-.Ltmp320              #   Call between .Ltmp320 and .Ltmp321
	.uleb128 .Ltmp322-.Lfunc_begin0         #     jumps to .Ltmp322
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp323-.Lfunc_begin0         # >> Call Site 123 <<
	.uleb128 .Ltmp326-.Ltmp323              #   Call between .Ltmp323 and .Ltmp326
	.uleb128 .Ltmp327-.Lfunc_begin0         #     jumps to .Ltmp327
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp326-.Lfunc_begin0         # >> Call Site 124 <<
	.uleb128 .Ltmp328-.Ltmp326              #   Call between .Ltmp326 and .Ltmp328
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp328-.Lfunc_begin0         # >> Call Site 125 <<
	.uleb128 .Ltmp329-.Ltmp328              #   Call between .Ltmp328 and .Ltmp329
	.uleb128 .Ltmp330-.Lfunc_begin0         #     jumps to .Ltmp330
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp331-.Lfunc_begin0         # >> Call Site 126 <<
	.uleb128 .Ltmp334-.Ltmp331              #   Call between .Ltmp331 and .Ltmp334
	.uleb128 .Ltmp335-.Lfunc_begin0         #     jumps to .Ltmp335
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp334-.Lfunc_begin0         # >> Call Site 127 <<
	.uleb128 .Ltmp336-.Ltmp334              #   Call between .Ltmp334 and .Ltmp336
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp336-.Lfunc_begin0         # >> Call Site 128 <<
	.uleb128 .Ltmp337-.Ltmp336              #   Call between .Ltmp336 and .Ltmp337
	.uleb128 .Ltmp338-.Lfunc_begin0         #     jumps to .Ltmp338
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp339-.Lfunc_begin0         # >> Call Site 129 <<
	.uleb128 .Ltmp342-.Ltmp339              #   Call between .Ltmp339 and .Ltmp342
	.uleb128 .Ltmp343-.Lfunc_begin0         #     jumps to .Ltmp343
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp342-.Lfunc_begin0         # >> Call Site 130 <<
	.uleb128 .Ltmp344-.Ltmp342              #   Call between .Ltmp342 and .Ltmp344
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp344-.Lfunc_begin0         # >> Call Site 131 <<
	.uleb128 .Ltmp345-.Ltmp344              #   Call between .Ltmp344 and .Ltmp345
	.uleb128 .Ltmp346-.Lfunc_begin0         #     jumps to .Ltmp346
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp347-.Lfunc_begin0         # >> Call Site 132 <<
	.uleb128 .Ltmp350-.Ltmp347              #   Call between .Ltmp347 and .Ltmp350
	.uleb128 .Ltmp351-.Lfunc_begin0         #     jumps to .Ltmp351
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp350-.Lfunc_begin0         # >> Call Site 133 <<
	.uleb128 .Ltmp352-.Ltmp350              #   Call between .Ltmp350 and .Ltmp352
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp352-.Lfunc_begin0         # >> Call Site 134 <<
	.uleb128 .Ltmp353-.Ltmp352              #   Call between .Ltmp352 and .Ltmp353
	.uleb128 .Ltmp354-.Lfunc_begin0         #     jumps to .Ltmp354
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp355-.Lfunc_begin0         # >> Call Site 135 <<
	.uleb128 .Ltmp358-.Ltmp355              #   Call between .Ltmp355 and .Ltmp358
	.uleb128 .Ltmp359-.Lfunc_begin0         #     jumps to .Ltmp359
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp358-.Lfunc_begin0         # >> Call Site 136 <<
	.uleb128 .Ltmp360-.Ltmp358              #   Call between .Ltmp358 and .Ltmp360
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp360-.Lfunc_begin0         # >> Call Site 137 <<
	.uleb128 .Ltmp361-.Ltmp360              #   Call between .Ltmp360 and .Ltmp361
	.uleb128 .Ltmp362-.Lfunc_begin0         #     jumps to .Ltmp362
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp363-.Lfunc_begin0         # >> Call Site 138 <<
	.uleb128 .Ltmp366-.Ltmp363              #   Call between .Ltmp363 and .Ltmp366
	.uleb128 .Ltmp367-.Lfunc_begin0         #     jumps to .Ltmp367
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp366-.Lfunc_begin0         # >> Call Site 139 <<
	.uleb128 .Ltmp368-.Ltmp366              #   Call between .Ltmp366 and .Ltmp368
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp368-.Lfunc_begin0         # >> Call Site 140 <<
	.uleb128 .Ltmp369-.Ltmp368              #   Call between .Ltmp368 and .Ltmp369
	.uleb128 .Ltmp370-.Lfunc_begin0         #     jumps to .Ltmp370
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp371-.Lfunc_begin0         # >> Call Site 141 <<
	.uleb128 .Ltmp374-.Ltmp371              #   Call between .Ltmp371 and .Ltmp374
	.uleb128 .Ltmp375-.Lfunc_begin0         #     jumps to .Ltmp375
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp374-.Lfunc_begin0         # >> Call Site 142 <<
	.uleb128 .Ltmp376-.Ltmp374              #   Call between .Ltmp374 and .Ltmp376
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp376-.Lfunc_begin0         # >> Call Site 143 <<
	.uleb128 .Ltmp377-.Ltmp376              #   Call between .Ltmp376 and .Ltmp377
	.uleb128 .Ltmp378-.Lfunc_begin0         #     jumps to .Ltmp378
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp379-.Lfunc_begin0         # >> Call Site 144 <<
	.uleb128 .Ltmp382-.Ltmp379              #   Call between .Ltmp379 and .Ltmp382
	.uleb128 .Ltmp383-.Lfunc_begin0         #     jumps to .Ltmp383
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp382-.Lfunc_begin0         # >> Call Site 145 <<
	.uleb128 .Ltmp384-.Ltmp382              #   Call between .Ltmp382 and .Ltmp384
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp384-.Lfunc_begin0         # >> Call Site 146 <<
	.uleb128 .Ltmp385-.Ltmp384              #   Call between .Ltmp384 and .Ltmp385
	.uleb128 .Ltmp386-.Lfunc_begin0         #     jumps to .Ltmp386
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp387-.Lfunc_begin0         # >> Call Site 147 <<
	.uleb128 .Ltmp390-.Ltmp387              #   Call between .Ltmp387 and .Ltmp390
	.uleb128 .Ltmp391-.Lfunc_begin0         #     jumps to .Ltmp391
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp390-.Lfunc_begin0         # >> Call Site 148 <<
	.uleb128 .Ltmp392-.Ltmp390              #   Call between .Ltmp390 and .Ltmp392
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp392-.Lfunc_begin0         # >> Call Site 149 <<
	.uleb128 .Ltmp393-.Ltmp392              #   Call between .Ltmp392 and .Ltmp393
	.uleb128 .Ltmp394-.Lfunc_begin0         #     jumps to .Ltmp394
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp395-.Lfunc_begin0         # >> Call Site 150 <<
	.uleb128 .Ltmp398-.Ltmp395              #   Call between .Ltmp395 and .Ltmp398
	.uleb128 .Ltmp399-.Lfunc_begin0         #     jumps to .Ltmp399
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp398-.Lfunc_begin0         # >> Call Site 151 <<
	.uleb128 .Ltmp400-.Ltmp398              #   Call between .Ltmp398 and .Ltmp400
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp400-.Lfunc_begin0         # >> Call Site 152 <<
	.uleb128 .Ltmp401-.Ltmp400              #   Call between .Ltmp400 and .Ltmp401
	.uleb128 .Ltmp402-.Lfunc_begin0         #     jumps to .Ltmp402
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp403-.Lfunc_begin0         # >> Call Site 153 <<
	.uleb128 .Ltmp406-.Ltmp403              #   Call between .Ltmp403 and .Ltmp406
	.uleb128 .Ltmp407-.Lfunc_begin0         #     jumps to .Ltmp407
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp406-.Lfunc_begin0         # >> Call Site 154 <<
	.uleb128 .Ltmp408-.Ltmp406              #   Call between .Ltmp406 and .Ltmp408
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp408-.Lfunc_begin0         # >> Call Site 155 <<
	.uleb128 .Ltmp409-.Ltmp408              #   Call between .Ltmp408 and .Ltmp409
	.uleb128 .Ltmp410-.Lfunc_begin0         #     jumps to .Ltmp410
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp411-.Lfunc_begin0         # >> Call Site 156 <<
	.uleb128 .Ltmp414-.Ltmp411              #   Call between .Ltmp411 and .Ltmp414
	.uleb128 .Ltmp415-.Lfunc_begin0         #     jumps to .Ltmp415
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp414-.Lfunc_begin0         # >> Call Site 157 <<
	.uleb128 .Ltmp416-.Ltmp414              #   Call between .Ltmp414 and .Ltmp416
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp416-.Lfunc_begin0         # >> Call Site 158 <<
	.uleb128 .Ltmp417-.Ltmp416              #   Call between .Ltmp416 and .Ltmp417
	.uleb128 .Ltmp418-.Lfunc_begin0         #     jumps to .Ltmp418
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp419-.Lfunc_begin0         # >> Call Site 159 <<
	.uleb128 .Ltmp422-.Ltmp419              #   Call between .Ltmp419 and .Ltmp422
	.uleb128 .Ltmp423-.Lfunc_begin0         #     jumps to .Ltmp423
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp422-.Lfunc_begin0         # >> Call Site 160 <<
	.uleb128 .Ltmp424-.Ltmp422              #   Call between .Ltmp422 and .Ltmp424
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp424-.Lfunc_begin0         # >> Call Site 161 <<
	.uleb128 .Ltmp425-.Ltmp424              #   Call between .Ltmp424 and .Ltmp425
	.uleb128 .Ltmp426-.Lfunc_begin0         #     jumps to .Ltmp426
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp427-.Lfunc_begin0         # >> Call Site 162 <<
	.uleb128 .Ltmp430-.Ltmp427              #   Call between .Ltmp427 and .Ltmp430
	.uleb128 .Ltmp431-.Lfunc_begin0         #     jumps to .Ltmp431
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp430-.Lfunc_begin0         # >> Call Site 163 <<
	.uleb128 .Ltmp432-.Ltmp430              #   Call between .Ltmp430 and .Ltmp432
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp432-.Lfunc_begin0         # >> Call Site 164 <<
	.uleb128 .Ltmp433-.Ltmp432              #   Call between .Ltmp432 and .Ltmp433
	.uleb128 .Ltmp434-.Lfunc_begin0         #     jumps to .Ltmp434
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp435-.Lfunc_begin0         # >> Call Site 165 <<
	.uleb128 .Ltmp438-.Ltmp435              #   Call between .Ltmp435 and .Ltmp438
	.uleb128 .Ltmp439-.Lfunc_begin0         #     jumps to .Ltmp439
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp438-.Lfunc_begin0         # >> Call Site 166 <<
	.uleb128 .Ltmp440-.Ltmp438              #   Call between .Ltmp438 and .Ltmp440
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp440-.Lfunc_begin0         # >> Call Site 167 <<
	.uleb128 .Ltmp441-.Ltmp440              #   Call between .Ltmp440 and .Ltmp441
	.uleb128 .Ltmp442-.Lfunc_begin0         #     jumps to .Ltmp442
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp443-.Lfunc_begin0         # >> Call Site 168 <<
	.uleb128 .Ltmp446-.Ltmp443              #   Call between .Ltmp443 and .Ltmp446
	.uleb128 .Ltmp447-.Lfunc_begin0         #     jumps to .Ltmp447
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp446-.Lfunc_begin0         # >> Call Site 169 <<
	.uleb128 .Ltmp448-.Ltmp446              #   Call between .Ltmp446 and .Ltmp448
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp448-.Lfunc_begin0         # >> Call Site 170 <<
	.uleb128 .Ltmp449-.Ltmp448              #   Call between .Ltmp448 and .Ltmp449
	.uleb128 .Ltmp450-.Lfunc_begin0         #     jumps to .Ltmp450
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp451-.Lfunc_begin0         # >> Call Site 171 <<
	.uleb128 .Ltmp454-.Ltmp451              #   Call between .Ltmp451 and .Ltmp454
	.uleb128 .Ltmp455-.Lfunc_begin0         #     jumps to .Ltmp455
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp454-.Lfunc_begin0         # >> Call Site 172 <<
	.uleb128 .Ltmp456-.Ltmp454              #   Call between .Ltmp454 and .Ltmp456
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp456-.Lfunc_begin0         # >> Call Site 173 <<
	.uleb128 .Ltmp457-.Ltmp456              #   Call between .Ltmp456 and .Ltmp457
	.uleb128 .Ltmp458-.Lfunc_begin0         #     jumps to .Ltmp458
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp459-.Lfunc_begin0         # >> Call Site 174 <<
	.uleb128 .Ltmp462-.Ltmp459              #   Call between .Ltmp459 and .Ltmp462
	.uleb128 .Ltmp463-.Lfunc_begin0         #     jumps to .Ltmp463
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp462-.Lfunc_begin0         # >> Call Site 175 <<
	.uleb128 .Ltmp464-.Ltmp462              #   Call between .Ltmp462 and .Ltmp464
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp464-.Lfunc_begin0         # >> Call Site 176 <<
	.uleb128 .Ltmp465-.Ltmp464              #   Call between .Ltmp464 and .Ltmp465
	.uleb128 .Ltmp466-.Lfunc_begin0         #     jumps to .Ltmp466
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp467-.Lfunc_begin0         # >> Call Site 177 <<
	.uleb128 .Ltmp470-.Ltmp467              #   Call between .Ltmp467 and .Ltmp470
	.uleb128 .Ltmp471-.Lfunc_begin0         #     jumps to .Ltmp471
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp470-.Lfunc_begin0         # >> Call Site 178 <<
	.uleb128 .Ltmp472-.Ltmp470              #   Call between .Ltmp470 and .Ltmp472
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp472-.Lfunc_begin0         # >> Call Site 179 <<
	.uleb128 .Ltmp473-.Ltmp472              #   Call between .Ltmp472 and .Ltmp473
	.uleb128 .Ltmp474-.Lfunc_begin0         #     jumps to .Ltmp474
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp475-.Lfunc_begin0         # >> Call Site 180 <<
	.uleb128 .Ltmp478-.Ltmp475              #   Call between .Ltmp475 and .Ltmp478
	.uleb128 .Ltmp479-.Lfunc_begin0         #     jumps to .Ltmp479
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp478-.Lfunc_begin0         # >> Call Site 181 <<
	.uleb128 .Ltmp480-.Ltmp478              #   Call between .Ltmp478 and .Ltmp480
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp480-.Lfunc_begin0         # >> Call Site 182 <<
	.uleb128 .Ltmp481-.Ltmp480              #   Call between .Ltmp480 and .Ltmp481
	.uleb128 .Ltmp482-.Lfunc_begin0         #     jumps to .Ltmp482
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp483-.Lfunc_begin0         # >> Call Site 183 <<
	.uleb128 .Ltmp486-.Ltmp483              #   Call between .Ltmp483 and .Ltmp486
	.uleb128 .Ltmp487-.Lfunc_begin0         #     jumps to .Ltmp487
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp486-.Lfunc_begin0         # >> Call Site 184 <<
	.uleb128 .Ltmp488-.Ltmp486              #   Call between .Ltmp486 and .Ltmp488
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp488-.Lfunc_begin0         # >> Call Site 185 <<
	.uleb128 .Ltmp489-.Ltmp488              #   Call between .Ltmp488 and .Ltmp489
	.uleb128 .Ltmp490-.Lfunc_begin0         #     jumps to .Ltmp490
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp491-.Lfunc_begin0         # >> Call Site 186 <<
	.uleb128 .Ltmp494-.Ltmp491              #   Call between .Ltmp491 and .Ltmp494
	.uleb128 .Ltmp495-.Lfunc_begin0         #     jumps to .Ltmp495
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp494-.Lfunc_begin0         # >> Call Site 187 <<
	.uleb128 .Ltmp496-.Ltmp494              #   Call between .Ltmp494 and .Ltmp496
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp496-.Lfunc_begin0         # >> Call Site 188 <<
	.uleb128 .Ltmp497-.Ltmp496              #   Call between .Ltmp496 and .Ltmp497
	.uleb128 .Ltmp498-.Lfunc_begin0         #     jumps to .Ltmp498
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp499-.Lfunc_begin0         # >> Call Site 189 <<
	.uleb128 .Ltmp502-.Ltmp499              #   Call between .Ltmp499 and .Ltmp502
	.uleb128 .Ltmp503-.Lfunc_begin0         #     jumps to .Ltmp503
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp502-.Lfunc_begin0         # >> Call Site 190 <<
	.uleb128 .Ltmp504-.Ltmp502              #   Call between .Ltmp502 and .Ltmp504
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp504-.Lfunc_begin0         # >> Call Site 191 <<
	.uleb128 .Ltmp505-.Ltmp504              #   Call between .Ltmp504 and .Ltmp505
	.uleb128 .Ltmp506-.Lfunc_begin0         #     jumps to .Ltmp506
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp507-.Lfunc_begin0         # >> Call Site 192 <<
	.uleb128 .Ltmp510-.Ltmp507              #   Call between .Ltmp507 and .Ltmp510
	.uleb128 .Ltmp511-.Lfunc_begin0         #     jumps to .Ltmp511
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp510-.Lfunc_begin0         # >> Call Site 193 <<
	.uleb128 .Ltmp512-.Ltmp510              #   Call between .Ltmp510 and .Ltmp512
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp512-.Lfunc_begin0         # >> Call Site 194 <<
	.uleb128 .Ltmp513-.Ltmp512              #   Call between .Ltmp512 and .Ltmp513
	.uleb128 .Ltmp514-.Lfunc_begin0         #     jumps to .Ltmp514
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp515-.Lfunc_begin0         # >> Call Site 195 <<
	.uleb128 .Ltmp518-.Ltmp515              #   Call between .Ltmp515 and .Ltmp518
	.uleb128 .Ltmp519-.Lfunc_begin0         #     jumps to .Ltmp519
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp518-.Lfunc_begin0         # >> Call Site 196 <<
	.uleb128 .Ltmp520-.Ltmp518              #   Call between .Ltmp518 and .Ltmp520
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp520-.Lfunc_begin0         # >> Call Site 197 <<
	.uleb128 .Ltmp521-.Ltmp520              #   Call between .Ltmp520 and .Ltmp521
	.uleb128 .Ltmp522-.Lfunc_begin0         #     jumps to .Ltmp522
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp523-.Lfunc_begin0         # >> Call Site 198 <<
	.uleb128 .Ltmp526-.Ltmp523              #   Call between .Ltmp523 and .Ltmp526
	.uleb128 .Ltmp527-.Lfunc_begin0         #     jumps to .Ltmp527
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp526-.Lfunc_begin0         # >> Call Site 199 <<
	.uleb128 .Ltmp528-.Ltmp526              #   Call between .Ltmp526 and .Ltmp528
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp528-.Lfunc_begin0         # >> Call Site 200 <<
	.uleb128 .Ltmp529-.Ltmp528              #   Call between .Ltmp528 and .Ltmp529
	.uleb128 .Ltmp530-.Lfunc_begin0         #     jumps to .Ltmp530
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp531-.Lfunc_begin0         # >> Call Site 201 <<
	.uleb128 .Ltmp534-.Ltmp531              #   Call between .Ltmp531 and .Ltmp534
	.uleb128 .Ltmp535-.Lfunc_begin0         #     jumps to .Ltmp535
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp534-.Lfunc_begin0         # >> Call Site 202 <<
	.uleb128 .Ltmp536-.Ltmp534              #   Call between .Ltmp534 and .Ltmp536
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp536-.Lfunc_begin0         # >> Call Site 203 <<
	.uleb128 .Ltmp537-.Ltmp536              #   Call between .Ltmp536 and .Ltmp537
	.uleb128 .Ltmp538-.Lfunc_begin0         #     jumps to .Ltmp538
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp539-.Lfunc_begin0         # >> Call Site 204 <<
	.uleb128 .Ltmp542-.Ltmp539              #   Call between .Ltmp539 and .Ltmp542
	.uleb128 .Ltmp543-.Lfunc_begin0         #     jumps to .Ltmp543
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp542-.Lfunc_begin0         # >> Call Site 205 <<
	.uleb128 .Ltmp544-.Ltmp542              #   Call between .Ltmp542 and .Ltmp544
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp544-.Lfunc_begin0         # >> Call Site 206 <<
	.uleb128 .Ltmp545-.Ltmp544              #   Call between .Ltmp544 and .Ltmp545
	.uleb128 .Ltmp546-.Lfunc_begin0         #     jumps to .Ltmp546
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp547-.Lfunc_begin0         # >> Call Site 207 <<
	.uleb128 .Ltmp550-.Ltmp547              #   Call between .Ltmp547 and .Ltmp550
	.uleb128 .Ltmp551-.Lfunc_begin0         #     jumps to .Ltmp551
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp550-.Lfunc_begin0         # >> Call Site 208 <<
	.uleb128 .Ltmp552-.Ltmp550              #   Call between .Ltmp550 and .Ltmp552
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp552-.Lfunc_begin0         # >> Call Site 209 <<
	.uleb128 .Ltmp553-.Ltmp552              #   Call between .Ltmp552 and .Ltmp553
	.uleb128 .Ltmp554-.Lfunc_begin0         #     jumps to .Ltmp554
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp555-.Lfunc_begin0         # >> Call Site 210 <<
	.uleb128 .Ltmp558-.Ltmp555              #   Call between .Ltmp555 and .Ltmp558
	.uleb128 .Ltmp559-.Lfunc_begin0         #     jumps to .Ltmp559
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp558-.Lfunc_begin0         # >> Call Site 211 <<
	.uleb128 .Ltmp560-.Ltmp558              #   Call between .Ltmp558 and .Ltmp560
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp560-.Lfunc_begin0         # >> Call Site 212 <<
	.uleb128 .Ltmp561-.Ltmp560              #   Call between .Ltmp560 and .Ltmp561
	.uleb128 .Ltmp562-.Lfunc_begin0         #     jumps to .Ltmp562
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp563-.Lfunc_begin0         # >> Call Site 213 <<
	.uleb128 .Ltmp566-.Ltmp563              #   Call between .Ltmp563 and .Ltmp566
	.uleb128 .Ltmp567-.Lfunc_begin0         #     jumps to .Ltmp567
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp566-.Lfunc_begin0         # >> Call Site 214 <<
	.uleb128 .Ltmp568-.Ltmp566              #   Call between .Ltmp566 and .Ltmp568
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp568-.Lfunc_begin0         # >> Call Site 215 <<
	.uleb128 .Ltmp569-.Ltmp568              #   Call between .Ltmp568 and .Ltmp569
	.uleb128 .Ltmp570-.Lfunc_begin0         #     jumps to .Ltmp570
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp571-.Lfunc_begin0         # >> Call Site 216 <<
	.uleb128 .Ltmp574-.Ltmp571              #   Call between .Ltmp571 and .Ltmp574
	.uleb128 .Ltmp575-.Lfunc_begin0         #     jumps to .Ltmp575
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp574-.Lfunc_begin0         # >> Call Site 217 <<
	.uleb128 .Ltmp576-.Ltmp574              #   Call between .Ltmp574 and .Ltmp576
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp576-.Lfunc_begin0         # >> Call Site 218 <<
	.uleb128 .Ltmp577-.Ltmp576              #   Call between .Ltmp576 and .Ltmp577
	.uleb128 .Ltmp578-.Lfunc_begin0         #     jumps to .Ltmp578
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp579-.Lfunc_begin0         # >> Call Site 219 <<
	.uleb128 .Ltmp582-.Ltmp579              #   Call between .Ltmp579 and .Ltmp582
	.uleb128 .Ltmp583-.Lfunc_begin0         #     jumps to .Ltmp583
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp582-.Lfunc_begin0         # >> Call Site 220 <<
	.uleb128 .Ltmp584-.Ltmp582              #   Call between .Ltmp582 and .Ltmp584
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp584-.Lfunc_begin0         # >> Call Site 221 <<
	.uleb128 .Ltmp585-.Ltmp584              #   Call between .Ltmp584 and .Ltmp585
	.uleb128 .Ltmp586-.Lfunc_begin0         #     jumps to .Ltmp586
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp587-.Lfunc_begin0         # >> Call Site 222 <<
	.uleb128 .Ltmp590-.Ltmp587              #   Call between .Ltmp587 and .Ltmp590
	.uleb128 .Ltmp591-.Lfunc_begin0         #     jumps to .Ltmp591
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp590-.Lfunc_begin0         # >> Call Site 223 <<
	.uleb128 .Ltmp592-.Ltmp590              #   Call between .Ltmp590 and .Ltmp592
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp592-.Lfunc_begin0         # >> Call Site 224 <<
	.uleb128 .Ltmp593-.Ltmp592              #   Call between .Ltmp592 and .Ltmp593
	.uleb128 .Ltmp594-.Lfunc_begin0         #     jumps to .Ltmp594
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp595-.Lfunc_begin0         # >> Call Site 225 <<
	.uleb128 .Ltmp598-.Ltmp595              #   Call between .Ltmp595 and .Ltmp598
	.uleb128 .Ltmp599-.Lfunc_begin0         #     jumps to .Ltmp599
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp598-.Lfunc_begin0         # >> Call Site 226 <<
	.uleb128 .Ltmp600-.Ltmp598              #   Call between .Ltmp598 and .Ltmp600
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp600-.Lfunc_begin0         # >> Call Site 227 <<
	.uleb128 .Ltmp601-.Ltmp600              #   Call between .Ltmp600 and .Ltmp601
	.uleb128 .Ltmp602-.Lfunc_begin0         #     jumps to .Ltmp602
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp603-.Lfunc_begin0         # >> Call Site 228 <<
	.uleb128 .Ltmp606-.Ltmp603              #   Call between .Ltmp603 and .Ltmp606
	.uleb128 .Ltmp607-.Lfunc_begin0         #     jumps to .Ltmp607
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp606-.Lfunc_begin0         # >> Call Site 229 <<
	.uleb128 .Ltmp608-.Ltmp606              #   Call between .Ltmp606 and .Ltmp608
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp608-.Lfunc_begin0         # >> Call Site 230 <<
	.uleb128 .Ltmp609-.Ltmp608              #   Call between .Ltmp608 and .Ltmp609
	.uleb128 .Ltmp610-.Lfunc_begin0         #     jumps to .Ltmp610
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp611-.Lfunc_begin0         # >> Call Site 231 <<
	.uleb128 .Ltmp614-.Ltmp611              #   Call between .Ltmp611 and .Ltmp614
	.uleb128 .Ltmp615-.Lfunc_begin0         #     jumps to .Ltmp615
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp614-.Lfunc_begin0         # >> Call Site 232 <<
	.uleb128 .Ltmp616-.Ltmp614              #   Call between .Ltmp614 and .Ltmp616
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp616-.Lfunc_begin0         # >> Call Site 233 <<
	.uleb128 .Ltmp617-.Ltmp616              #   Call between .Ltmp616 and .Ltmp617
	.uleb128 .Ltmp618-.Lfunc_begin0         #     jumps to .Ltmp618
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp619-.Lfunc_begin0         # >> Call Site 234 <<
	.uleb128 .Ltmp622-.Ltmp619              #   Call between .Ltmp619 and .Ltmp622
	.uleb128 .Ltmp623-.Lfunc_begin0         #     jumps to .Ltmp623
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp622-.Lfunc_begin0         # >> Call Site 235 <<
	.uleb128 .Ltmp624-.Ltmp622              #   Call between .Ltmp622 and .Ltmp624
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp624-.Lfunc_begin0         # >> Call Site 236 <<
	.uleb128 .Ltmp625-.Ltmp624              #   Call between .Ltmp624 and .Ltmp625
	.uleb128 .Ltmp626-.Lfunc_begin0         #     jumps to .Ltmp626
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp627-.Lfunc_begin0         # >> Call Site 237 <<
	.uleb128 .Ltmp630-.Ltmp627              #   Call between .Ltmp627 and .Ltmp630
	.uleb128 .Ltmp631-.Lfunc_begin0         #     jumps to .Ltmp631
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp630-.Lfunc_begin0         # >> Call Site 238 <<
	.uleb128 .Ltmp632-.Ltmp630              #   Call between .Ltmp630 and .Ltmp632
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp632-.Lfunc_begin0         # >> Call Site 239 <<
	.uleb128 .Ltmp633-.Ltmp632              #   Call between .Ltmp632 and .Ltmp633
	.uleb128 .Ltmp634-.Lfunc_begin0         #     jumps to .Ltmp634
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp635-.Lfunc_begin0         # >> Call Site 240 <<
	.uleb128 .Ltmp638-.Ltmp635              #   Call between .Ltmp635 and .Ltmp638
	.uleb128 .Ltmp639-.Lfunc_begin0         #     jumps to .Ltmp639
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp638-.Lfunc_begin0         # >> Call Site 241 <<
	.uleb128 .Ltmp640-.Ltmp638              #   Call between .Ltmp638 and .Ltmp640
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp640-.Lfunc_begin0         # >> Call Site 242 <<
	.uleb128 .Ltmp641-.Ltmp640              #   Call between .Ltmp640 and .Ltmp641
	.uleb128 .Ltmp642-.Lfunc_begin0         #     jumps to .Ltmp642
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp643-.Lfunc_begin0         # >> Call Site 243 <<
	.uleb128 .Ltmp646-.Ltmp643              #   Call between .Ltmp643 and .Ltmp646
	.uleb128 .Ltmp647-.Lfunc_begin0         #     jumps to .Ltmp647
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp646-.Lfunc_begin0         # >> Call Site 244 <<
	.uleb128 .Ltmp648-.Ltmp646              #   Call between .Ltmp646 and .Ltmp648
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp648-.Lfunc_begin0         # >> Call Site 245 <<
	.uleb128 .Ltmp649-.Ltmp648              #   Call between .Ltmp648 and .Ltmp649
	.uleb128 .Ltmp650-.Lfunc_begin0         #     jumps to .Ltmp650
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp651-.Lfunc_begin0         # >> Call Site 246 <<
	.uleb128 .Ltmp654-.Ltmp651              #   Call between .Ltmp651 and .Ltmp654
	.uleb128 .Ltmp655-.Lfunc_begin0         #     jumps to .Ltmp655
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp654-.Lfunc_begin0         # >> Call Site 247 <<
	.uleb128 .Ltmp656-.Ltmp654              #   Call between .Ltmp654 and .Ltmp656
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp656-.Lfunc_begin0         # >> Call Site 248 <<
	.uleb128 .Ltmp657-.Ltmp656              #   Call between .Ltmp656 and .Ltmp657
	.uleb128 .Ltmp658-.Lfunc_begin0         #     jumps to .Ltmp658
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp659-.Lfunc_begin0         # >> Call Site 249 <<
	.uleb128 .Ltmp662-.Ltmp659              #   Call between .Ltmp659 and .Ltmp662
	.uleb128 .Ltmp663-.Lfunc_begin0         #     jumps to .Ltmp663
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp662-.Lfunc_begin0         # >> Call Site 250 <<
	.uleb128 .Ltmp664-.Ltmp662              #   Call between .Ltmp662 and .Ltmp664
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp664-.Lfunc_begin0         # >> Call Site 251 <<
	.uleb128 .Ltmp665-.Ltmp664              #   Call between .Ltmp664 and .Ltmp665
	.uleb128 .Ltmp666-.Lfunc_begin0         #     jumps to .Ltmp666
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp667-.Lfunc_begin0         # >> Call Site 252 <<
	.uleb128 .Ltmp670-.Ltmp667              #   Call between .Ltmp667 and .Ltmp670
	.uleb128 .Ltmp671-.Lfunc_begin0         #     jumps to .Ltmp671
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp670-.Lfunc_begin0         # >> Call Site 253 <<
	.uleb128 .Ltmp672-.Ltmp670              #   Call between .Ltmp670 and .Ltmp672
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp672-.Lfunc_begin0         # >> Call Site 254 <<
	.uleb128 .Ltmp673-.Ltmp672              #   Call between .Ltmp672 and .Ltmp673
	.uleb128 .Ltmp674-.Lfunc_begin0         #     jumps to .Ltmp674
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp675-.Lfunc_begin0         # >> Call Site 255 <<
	.uleb128 .Ltmp678-.Ltmp675              #   Call between .Ltmp675 and .Ltmp678
	.uleb128 .Ltmp679-.Lfunc_begin0         #     jumps to .Ltmp679
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp678-.Lfunc_begin0         # >> Call Site 256 <<
	.uleb128 .Ltmp680-.Ltmp678              #   Call between .Ltmp678 and .Ltmp680
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp680-.Lfunc_begin0         # >> Call Site 257 <<
	.uleb128 .Ltmp681-.Ltmp680              #   Call between .Ltmp680 and .Ltmp681
	.uleb128 .Ltmp682-.Lfunc_begin0         #     jumps to .Ltmp682
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp683-.Lfunc_begin0         # >> Call Site 258 <<
	.uleb128 .Ltmp686-.Ltmp683              #   Call between .Ltmp683 and .Ltmp686
	.uleb128 .Ltmp687-.Lfunc_begin0         #     jumps to .Ltmp687
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp686-.Lfunc_begin0         # >> Call Site 259 <<
	.uleb128 .Ltmp688-.Ltmp686              #   Call between .Ltmp686 and .Ltmp688
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp688-.Lfunc_begin0         # >> Call Site 260 <<
	.uleb128 .Ltmp689-.Ltmp688              #   Call between .Ltmp688 and .Ltmp689
	.uleb128 .Ltmp690-.Lfunc_begin0         #     jumps to .Ltmp690
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp691-.Lfunc_begin0         # >> Call Site 261 <<
	.uleb128 .Ltmp694-.Ltmp691              #   Call between .Ltmp691 and .Ltmp694
	.uleb128 .Ltmp695-.Lfunc_begin0         #     jumps to .Ltmp695
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp694-.Lfunc_begin0         # >> Call Site 262 <<
	.uleb128 .Ltmp696-.Ltmp694              #   Call between .Ltmp694 and .Ltmp696
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp696-.Lfunc_begin0         # >> Call Site 263 <<
	.uleb128 .Ltmp697-.Ltmp696              #   Call between .Ltmp696 and .Ltmp697
	.uleb128 .Ltmp698-.Lfunc_begin0         #     jumps to .Ltmp698
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp699-.Lfunc_begin0         # >> Call Site 264 <<
	.uleb128 .Ltmp702-.Ltmp699              #   Call between .Ltmp699 and .Ltmp702
	.uleb128 .Ltmp703-.Lfunc_begin0         #     jumps to .Ltmp703
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp702-.Lfunc_begin0         # >> Call Site 265 <<
	.uleb128 .Ltmp704-.Ltmp702              #   Call between .Ltmp702 and .Ltmp704
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp704-.Lfunc_begin0         # >> Call Site 266 <<
	.uleb128 .Ltmp705-.Ltmp704              #   Call between .Ltmp704 and .Ltmp705
	.uleb128 .Ltmp706-.Lfunc_begin0         #     jumps to .Ltmp706
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp707-.Lfunc_begin0         # >> Call Site 267 <<
	.uleb128 .Ltmp710-.Ltmp707              #   Call between .Ltmp707 and .Ltmp710
	.uleb128 .Ltmp711-.Lfunc_begin0         #     jumps to .Ltmp711
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp710-.Lfunc_begin0         # >> Call Site 268 <<
	.uleb128 .Ltmp712-.Ltmp710              #   Call between .Ltmp710 and .Ltmp712
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp712-.Lfunc_begin0         # >> Call Site 269 <<
	.uleb128 .Ltmp713-.Ltmp712              #   Call between .Ltmp712 and .Ltmp713
	.uleb128 .Ltmp714-.Lfunc_begin0         #     jumps to .Ltmp714
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp715-.Lfunc_begin0         # >> Call Site 270 <<
	.uleb128 .Ltmp718-.Ltmp715              #   Call between .Ltmp715 and .Ltmp718
	.uleb128 .Ltmp719-.Lfunc_begin0         #     jumps to .Ltmp719
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp718-.Lfunc_begin0         # >> Call Site 271 <<
	.uleb128 .Ltmp720-.Ltmp718              #   Call between .Ltmp718 and .Ltmp720
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp720-.Lfunc_begin0         # >> Call Site 272 <<
	.uleb128 .Ltmp721-.Ltmp720              #   Call between .Ltmp720 and .Ltmp721
	.uleb128 .Ltmp722-.Lfunc_begin0         #     jumps to .Ltmp722
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp723-.Lfunc_begin0         # >> Call Site 273 <<
	.uleb128 .Ltmp726-.Ltmp723              #   Call between .Ltmp723 and .Ltmp726
	.uleb128 .Ltmp727-.Lfunc_begin0         #     jumps to .Ltmp727
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp726-.Lfunc_begin0         # >> Call Site 274 <<
	.uleb128 .Ltmp728-.Ltmp726              #   Call between .Ltmp726 and .Ltmp728
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp728-.Lfunc_begin0         # >> Call Site 275 <<
	.uleb128 .Ltmp729-.Ltmp728              #   Call between .Ltmp728 and .Ltmp729
	.uleb128 .Ltmp730-.Lfunc_begin0         #     jumps to .Ltmp730
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp731-.Lfunc_begin0         # >> Call Site 276 <<
	.uleb128 .Ltmp734-.Ltmp731              #   Call between .Ltmp731 and .Ltmp734
	.uleb128 .Ltmp735-.Lfunc_begin0         #     jumps to .Ltmp735
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp734-.Lfunc_begin0         # >> Call Site 277 <<
	.uleb128 .Ltmp736-.Ltmp734              #   Call between .Ltmp734 and .Ltmp736
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp736-.Lfunc_begin0         # >> Call Site 278 <<
	.uleb128 .Ltmp737-.Ltmp736              #   Call between .Ltmp736 and .Ltmp737
	.uleb128 .Ltmp738-.Lfunc_begin0         #     jumps to .Ltmp738
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp739-.Lfunc_begin0         # >> Call Site 279 <<
	.uleb128 .Ltmp742-.Ltmp739              #   Call between .Ltmp739 and .Ltmp742
	.uleb128 .Ltmp743-.Lfunc_begin0         #     jumps to .Ltmp743
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp742-.Lfunc_begin0         # >> Call Site 280 <<
	.uleb128 .Ltmp744-.Ltmp742              #   Call between .Ltmp742 and .Ltmp744
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp744-.Lfunc_begin0         # >> Call Site 281 <<
	.uleb128 .Ltmp745-.Ltmp744              #   Call between .Ltmp744 and .Ltmp745
	.uleb128 .Ltmp746-.Lfunc_begin0         #     jumps to .Ltmp746
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp747-.Lfunc_begin0         # >> Call Site 282 <<
	.uleb128 .Ltmp750-.Ltmp747              #   Call between .Ltmp747 and .Ltmp750
	.uleb128 .Ltmp751-.Lfunc_begin0         #     jumps to .Ltmp751
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp750-.Lfunc_begin0         # >> Call Site 283 <<
	.uleb128 .Ltmp752-.Ltmp750              #   Call between .Ltmp750 and .Ltmp752
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp752-.Lfunc_begin0         # >> Call Site 284 <<
	.uleb128 .Ltmp753-.Ltmp752              #   Call between .Ltmp752 and .Ltmp753
	.uleb128 .Ltmp754-.Lfunc_begin0         #     jumps to .Ltmp754
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp755-.Lfunc_begin0         # >> Call Site 285 <<
	.uleb128 .Ltmp758-.Ltmp755              #   Call between .Ltmp755 and .Ltmp758
	.uleb128 .Ltmp759-.Lfunc_begin0         #     jumps to .Ltmp759
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp758-.Lfunc_begin0         # >> Call Site 286 <<
	.uleb128 .Ltmp760-.Ltmp758              #   Call between .Ltmp758 and .Ltmp760
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp760-.Lfunc_begin0         # >> Call Site 287 <<
	.uleb128 .Ltmp761-.Ltmp760              #   Call between .Ltmp760 and .Ltmp761
	.uleb128 .Ltmp762-.Lfunc_begin0         #     jumps to .Ltmp762
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp763-.Lfunc_begin0         # >> Call Site 288 <<
	.uleb128 .Ltmp766-.Ltmp763              #   Call between .Ltmp763 and .Ltmp766
	.uleb128 .Ltmp767-.Lfunc_begin0         #     jumps to .Ltmp767
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp766-.Lfunc_begin0         # >> Call Site 289 <<
	.uleb128 .Ltmp768-.Ltmp766              #   Call between .Ltmp766 and .Ltmp768
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp768-.Lfunc_begin0         # >> Call Site 290 <<
	.uleb128 .Ltmp769-.Ltmp768              #   Call between .Ltmp768 and .Ltmp769
	.uleb128 .Ltmp770-.Lfunc_begin0         #     jumps to .Ltmp770
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp771-.Lfunc_begin0         # >> Call Site 291 <<
	.uleb128 .Ltmp774-.Ltmp771              #   Call between .Ltmp771 and .Ltmp774
	.uleb128 .Ltmp775-.Lfunc_begin0         #     jumps to .Ltmp775
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp774-.Lfunc_begin0         # >> Call Site 292 <<
	.uleb128 .Ltmp776-.Ltmp774              #   Call between .Ltmp774 and .Ltmp776
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp776-.Lfunc_begin0         # >> Call Site 293 <<
	.uleb128 .Ltmp777-.Ltmp776              #   Call between .Ltmp776 and .Ltmp777
	.uleb128 .Ltmp778-.Lfunc_begin0         #     jumps to .Ltmp778
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp779-.Lfunc_begin0         # >> Call Site 294 <<
	.uleb128 .Ltmp782-.Ltmp779              #   Call between .Ltmp779 and .Ltmp782
	.uleb128 .Ltmp783-.Lfunc_begin0         #     jumps to .Ltmp783
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp782-.Lfunc_begin0         # >> Call Site 295 <<
	.uleb128 .Ltmp784-.Ltmp782              #   Call between .Ltmp782 and .Ltmp784
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp784-.Lfunc_begin0         # >> Call Site 296 <<
	.uleb128 .Ltmp785-.Ltmp784              #   Call between .Ltmp784 and .Ltmp785
	.uleb128 .Ltmp786-.Lfunc_begin0         #     jumps to .Ltmp786
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp787-.Lfunc_begin0         # >> Call Site 297 <<
	.uleb128 .Ltmp790-.Ltmp787              #   Call between .Ltmp787 and .Ltmp790
	.uleb128 .Ltmp791-.Lfunc_begin0         #     jumps to .Ltmp791
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp790-.Lfunc_begin0         # >> Call Site 298 <<
	.uleb128 .Ltmp792-.Ltmp790              #   Call between .Ltmp790 and .Ltmp792
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp792-.Lfunc_begin0         # >> Call Site 299 <<
	.uleb128 .Ltmp793-.Ltmp792              #   Call between .Ltmp792 and .Ltmp793
	.uleb128 .Ltmp794-.Lfunc_begin0         #     jumps to .Ltmp794
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp795-.Lfunc_begin0         # >> Call Site 300 <<
	.uleb128 .Ltmp798-.Ltmp795              #   Call between .Ltmp795 and .Ltmp798
	.uleb128 .Ltmp799-.Lfunc_begin0         #     jumps to .Ltmp799
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp798-.Lfunc_begin0         # >> Call Site 301 <<
	.uleb128 .Ltmp800-.Ltmp798              #   Call between .Ltmp798 and .Ltmp800
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp800-.Lfunc_begin0         # >> Call Site 302 <<
	.uleb128 .Ltmp801-.Ltmp800              #   Call between .Ltmp800 and .Ltmp801
	.uleb128 .Ltmp802-.Lfunc_begin0         #     jumps to .Ltmp802
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp803-.Lfunc_begin0         # >> Call Site 303 <<
	.uleb128 .Ltmp806-.Ltmp803              #   Call between .Ltmp803 and .Ltmp806
	.uleb128 .Ltmp807-.Lfunc_begin0         #     jumps to .Ltmp807
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp806-.Lfunc_begin0         # >> Call Site 304 <<
	.uleb128 .Ltmp808-.Ltmp806              #   Call between .Ltmp806 and .Ltmp808
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp808-.Lfunc_begin0         # >> Call Site 305 <<
	.uleb128 .Ltmp809-.Ltmp808              #   Call between .Ltmp808 and .Ltmp809
	.uleb128 .Ltmp810-.Lfunc_begin0         #     jumps to .Ltmp810
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp811-.Lfunc_begin0         # >> Call Site 306 <<
	.uleb128 .Ltmp814-.Ltmp811              #   Call between .Ltmp811 and .Ltmp814
	.uleb128 .Ltmp815-.Lfunc_begin0         #     jumps to .Ltmp815
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp814-.Lfunc_begin0         # >> Call Site 307 <<
	.uleb128 .Ltmp816-.Ltmp814              #   Call between .Ltmp814 and .Ltmp816
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp816-.Lfunc_begin0         # >> Call Site 308 <<
	.uleb128 .Ltmp817-.Ltmp816              #   Call between .Ltmp816 and .Ltmp817
	.uleb128 .Ltmp818-.Lfunc_begin0         #     jumps to .Ltmp818
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp819-.Lfunc_begin0         # >> Call Site 309 <<
	.uleb128 .Ltmp822-.Ltmp819              #   Call between .Ltmp819 and .Ltmp822
	.uleb128 .Ltmp823-.Lfunc_begin0         #     jumps to .Ltmp823
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp822-.Lfunc_begin0         # >> Call Site 310 <<
	.uleb128 .Ltmp824-.Ltmp822              #   Call between .Ltmp822 and .Ltmp824
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp824-.Lfunc_begin0         # >> Call Site 311 <<
	.uleb128 .Ltmp825-.Ltmp824              #   Call between .Ltmp824 and .Ltmp825
	.uleb128 .Ltmp826-.Lfunc_begin0         #     jumps to .Ltmp826
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp827-.Lfunc_begin0         # >> Call Site 312 <<
	.uleb128 .Ltmp830-.Ltmp827              #   Call between .Ltmp827 and .Ltmp830
	.uleb128 .Ltmp831-.Lfunc_begin0         #     jumps to .Ltmp831
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp830-.Lfunc_begin0         # >> Call Site 313 <<
	.uleb128 .Ltmp832-.Ltmp830              #   Call between .Ltmp830 and .Ltmp832
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp832-.Lfunc_begin0         # >> Call Site 314 <<
	.uleb128 .Ltmp833-.Ltmp832              #   Call between .Ltmp832 and .Ltmp833
	.uleb128 .Ltmp834-.Lfunc_begin0         #     jumps to .Ltmp834
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp835-.Lfunc_begin0         # >> Call Site 315 <<
	.uleb128 .Ltmp838-.Ltmp835              #   Call between .Ltmp835 and .Ltmp838
	.uleb128 .Ltmp839-.Lfunc_begin0         #     jumps to .Ltmp839
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp838-.Lfunc_begin0         # >> Call Site 316 <<
	.uleb128 .Ltmp840-.Ltmp838              #   Call between .Ltmp838 and .Ltmp840
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp840-.Lfunc_begin0         # >> Call Site 317 <<
	.uleb128 .Ltmp841-.Ltmp840              #   Call between .Ltmp840 and .Ltmp841
	.uleb128 .Ltmp842-.Lfunc_begin0         #     jumps to .Ltmp842
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp843-.Lfunc_begin0         # >> Call Site 318 <<
	.uleb128 .Ltmp846-.Ltmp843              #   Call between .Ltmp843 and .Ltmp846
	.uleb128 .Ltmp847-.Lfunc_begin0         #     jumps to .Ltmp847
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp846-.Lfunc_begin0         # >> Call Site 319 <<
	.uleb128 .Ltmp848-.Ltmp846              #   Call between .Ltmp846 and .Ltmp848
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp848-.Lfunc_begin0         # >> Call Site 320 <<
	.uleb128 .Ltmp849-.Ltmp848              #   Call between .Ltmp848 and .Ltmp849
	.uleb128 .Ltmp850-.Lfunc_begin0         #     jumps to .Ltmp850
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp851-.Lfunc_begin0         # >> Call Site 321 <<
	.uleb128 .Ltmp854-.Ltmp851              #   Call between .Ltmp851 and .Ltmp854
	.uleb128 .Ltmp855-.Lfunc_begin0         #     jumps to .Ltmp855
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp854-.Lfunc_begin0         # >> Call Site 322 <<
	.uleb128 .Ltmp856-.Ltmp854              #   Call between .Ltmp854 and .Ltmp856
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp856-.Lfunc_begin0         # >> Call Site 323 <<
	.uleb128 .Ltmp857-.Ltmp856              #   Call between .Ltmp856 and .Ltmp857
	.uleb128 .Ltmp858-.Lfunc_begin0         #     jumps to .Ltmp858
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp859-.Lfunc_begin0         # >> Call Site 324 <<
	.uleb128 .Ltmp862-.Ltmp859              #   Call between .Ltmp859 and .Ltmp862
	.uleb128 .Ltmp863-.Lfunc_begin0         #     jumps to .Ltmp863
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp862-.Lfunc_begin0         # >> Call Site 325 <<
	.uleb128 .Ltmp864-.Ltmp862              #   Call between .Ltmp862 and .Ltmp864
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp864-.Lfunc_begin0         # >> Call Site 326 <<
	.uleb128 .Ltmp865-.Ltmp864              #   Call between .Ltmp864 and .Ltmp865
	.uleb128 .Ltmp866-.Lfunc_begin0         #     jumps to .Ltmp866
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp867-.Lfunc_begin0         # >> Call Site 327 <<
	.uleb128 .Ltmp870-.Ltmp867              #   Call between .Ltmp867 and .Ltmp870
	.uleb128 .Ltmp871-.Lfunc_begin0         #     jumps to .Ltmp871
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp870-.Lfunc_begin0         # >> Call Site 328 <<
	.uleb128 .Ltmp872-.Ltmp870              #   Call between .Ltmp870 and .Ltmp872
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp872-.Lfunc_begin0         # >> Call Site 329 <<
	.uleb128 .Ltmp873-.Ltmp872              #   Call between .Ltmp872 and .Ltmp873
	.uleb128 .Ltmp874-.Lfunc_begin0         #     jumps to .Ltmp874
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp875-.Lfunc_begin0         # >> Call Site 330 <<
	.uleb128 .Ltmp878-.Ltmp875              #   Call between .Ltmp875 and .Ltmp878
	.uleb128 .Ltmp879-.Lfunc_begin0         #     jumps to .Ltmp879
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp878-.Lfunc_begin0         # >> Call Site 331 <<
	.uleb128 .Ltmp880-.Ltmp878              #   Call between .Ltmp878 and .Ltmp880
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp880-.Lfunc_begin0         # >> Call Site 332 <<
	.uleb128 .Ltmp881-.Ltmp880              #   Call between .Ltmp880 and .Ltmp881
	.uleb128 .Ltmp882-.Lfunc_begin0         #     jumps to .Ltmp882
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp883-.Lfunc_begin0         # >> Call Site 333 <<
	.uleb128 .Ltmp886-.Ltmp883              #   Call between .Ltmp883 and .Ltmp886
	.uleb128 .Ltmp887-.Lfunc_begin0         #     jumps to .Ltmp887
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp886-.Lfunc_begin0         # >> Call Site 334 <<
	.uleb128 .Ltmp888-.Ltmp886              #   Call between .Ltmp886 and .Ltmp888
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp888-.Lfunc_begin0         # >> Call Site 335 <<
	.uleb128 .Ltmp889-.Ltmp888              #   Call between .Ltmp888 and .Ltmp889
	.uleb128 .Ltmp890-.Lfunc_begin0         #     jumps to .Ltmp890
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp891-.Lfunc_begin0         # >> Call Site 336 <<
	.uleb128 .Ltmp894-.Ltmp891              #   Call between .Ltmp891 and .Ltmp894
	.uleb128 .Ltmp895-.Lfunc_begin0         #     jumps to .Ltmp895
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp894-.Lfunc_begin0         # >> Call Site 337 <<
	.uleb128 .Ltmp896-.Ltmp894              #   Call between .Ltmp894 and .Ltmp896
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp896-.Lfunc_begin0         # >> Call Site 338 <<
	.uleb128 .Ltmp897-.Ltmp896              #   Call between .Ltmp896 and .Ltmp897
	.uleb128 .Ltmp898-.Lfunc_begin0         #     jumps to .Ltmp898
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp899-.Lfunc_begin0         # >> Call Site 339 <<
	.uleb128 .Ltmp902-.Ltmp899              #   Call between .Ltmp899 and .Ltmp902
	.uleb128 .Ltmp903-.Lfunc_begin0         #     jumps to .Ltmp903
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp902-.Lfunc_begin0         # >> Call Site 340 <<
	.uleb128 .Ltmp904-.Ltmp902              #   Call between .Ltmp902 and .Ltmp904
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp904-.Lfunc_begin0         # >> Call Site 341 <<
	.uleb128 .Ltmp905-.Ltmp904              #   Call between .Ltmp904 and .Ltmp905
	.uleb128 .Ltmp906-.Lfunc_begin0         #     jumps to .Ltmp906
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp907-.Lfunc_begin0         # >> Call Site 342 <<
	.uleb128 .Ltmp910-.Ltmp907              #   Call between .Ltmp907 and .Ltmp910
	.uleb128 .Ltmp911-.Lfunc_begin0         #     jumps to .Ltmp911
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp910-.Lfunc_begin0         # >> Call Site 343 <<
	.uleb128 .Ltmp912-.Ltmp910              #   Call between .Ltmp910 and .Ltmp912
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp912-.Lfunc_begin0         # >> Call Site 344 <<
	.uleb128 .Ltmp913-.Ltmp912              #   Call between .Ltmp912 and .Ltmp913
	.uleb128 .Ltmp914-.Lfunc_begin0         #     jumps to .Ltmp914
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp915-.Lfunc_begin0         # >> Call Site 345 <<
	.uleb128 .Ltmp918-.Ltmp915              #   Call between .Ltmp915 and .Ltmp918
	.uleb128 .Ltmp919-.Lfunc_begin0         #     jumps to .Ltmp919
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp918-.Lfunc_begin0         # >> Call Site 346 <<
	.uleb128 .Ltmp920-.Ltmp918              #   Call between .Ltmp918 and .Ltmp920
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp920-.Lfunc_begin0         # >> Call Site 347 <<
	.uleb128 .Ltmp921-.Ltmp920              #   Call between .Ltmp920 and .Ltmp921
	.uleb128 .Ltmp922-.Lfunc_begin0         #     jumps to .Ltmp922
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp923-.Lfunc_begin0         # >> Call Site 348 <<
	.uleb128 .Ltmp926-.Ltmp923              #   Call between .Ltmp923 and .Ltmp926
	.uleb128 .Ltmp927-.Lfunc_begin0         #     jumps to .Ltmp927
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp926-.Lfunc_begin0         # >> Call Site 349 <<
	.uleb128 .Ltmp928-.Ltmp926              #   Call between .Ltmp926 and .Ltmp928
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp928-.Lfunc_begin0         # >> Call Site 350 <<
	.uleb128 .Ltmp929-.Ltmp928              #   Call between .Ltmp928 and .Ltmp929
	.uleb128 .Ltmp930-.Lfunc_begin0         #     jumps to .Ltmp930
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp931-.Lfunc_begin0         # >> Call Site 351 <<
	.uleb128 .Ltmp934-.Ltmp931              #   Call between .Ltmp931 and .Ltmp934
	.uleb128 .Ltmp935-.Lfunc_begin0         #     jumps to .Ltmp935
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp934-.Lfunc_begin0         # >> Call Site 352 <<
	.uleb128 .Ltmp936-.Ltmp934              #   Call between .Ltmp934 and .Ltmp936
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp936-.Lfunc_begin0         # >> Call Site 353 <<
	.uleb128 .Ltmp937-.Ltmp936              #   Call between .Ltmp936 and .Ltmp937
	.uleb128 .Ltmp938-.Lfunc_begin0         #     jumps to .Ltmp938
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp939-.Lfunc_begin0         # >> Call Site 354 <<
	.uleb128 .Ltmp942-.Ltmp939              #   Call between .Ltmp939 and .Ltmp942
	.uleb128 .Ltmp943-.Lfunc_begin0         #     jumps to .Ltmp943
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp942-.Lfunc_begin0         # >> Call Site 355 <<
	.uleb128 .Ltmp944-.Ltmp942              #   Call between .Ltmp942 and .Ltmp944
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp944-.Lfunc_begin0         # >> Call Site 356 <<
	.uleb128 .Ltmp945-.Ltmp944              #   Call between .Ltmp944 and .Ltmp945
	.uleb128 .Ltmp946-.Lfunc_begin0         #     jumps to .Ltmp946
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp947-.Lfunc_begin0         # >> Call Site 357 <<
	.uleb128 .Ltmp950-.Ltmp947              #   Call between .Ltmp947 and .Ltmp950
	.uleb128 .Ltmp951-.Lfunc_begin0         #     jumps to .Ltmp951
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp950-.Lfunc_begin0         # >> Call Site 358 <<
	.uleb128 .Ltmp952-.Ltmp950              #   Call between .Ltmp950 and .Ltmp952
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp952-.Lfunc_begin0         # >> Call Site 359 <<
	.uleb128 .Ltmp953-.Ltmp952              #   Call between .Ltmp952 and .Ltmp953
	.uleb128 .Ltmp954-.Lfunc_begin0         #     jumps to .Ltmp954
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp955-.Lfunc_begin0         # >> Call Site 360 <<
	.uleb128 .Ltmp958-.Ltmp955              #   Call between .Ltmp955 and .Ltmp958
	.uleb128 .Ltmp959-.Lfunc_begin0         #     jumps to .Ltmp959
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp958-.Lfunc_begin0         # >> Call Site 361 <<
	.uleb128 .Ltmp960-.Ltmp958              #   Call between .Ltmp958 and .Ltmp960
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp960-.Lfunc_begin0         # >> Call Site 362 <<
	.uleb128 .Ltmp961-.Ltmp960              #   Call between .Ltmp960 and .Ltmp961
	.uleb128 .Ltmp962-.Lfunc_begin0         #     jumps to .Ltmp962
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp963-.Lfunc_begin0         # >> Call Site 363 <<
	.uleb128 .Ltmp966-.Ltmp963              #   Call between .Ltmp963 and .Ltmp966
	.uleb128 .Ltmp967-.Lfunc_begin0         #     jumps to .Ltmp967
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp966-.Lfunc_begin0         # >> Call Site 364 <<
	.uleb128 .Ltmp968-.Ltmp966              #   Call between .Ltmp966 and .Ltmp968
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp968-.Lfunc_begin0         # >> Call Site 365 <<
	.uleb128 .Ltmp969-.Ltmp968              #   Call between .Ltmp968 and .Ltmp969
	.uleb128 .Ltmp970-.Lfunc_begin0         #     jumps to .Ltmp970
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp971-.Lfunc_begin0         # >> Call Site 366 <<
	.uleb128 .Ltmp974-.Ltmp971              #   Call between .Ltmp971 and .Ltmp974
	.uleb128 .Ltmp975-.Lfunc_begin0         #     jumps to .Ltmp975
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp974-.Lfunc_begin0         # >> Call Site 367 <<
	.uleb128 .Ltmp976-.Ltmp974              #   Call between .Ltmp974 and .Ltmp976
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp976-.Lfunc_begin0         # >> Call Site 368 <<
	.uleb128 .Ltmp977-.Ltmp976              #   Call between .Ltmp976 and .Ltmp977
	.uleb128 .Ltmp978-.Lfunc_begin0         #     jumps to .Ltmp978
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp979-.Lfunc_begin0         # >> Call Site 369 <<
	.uleb128 .Ltmp982-.Ltmp979              #   Call between .Ltmp979 and .Ltmp982
	.uleb128 .Ltmp983-.Lfunc_begin0         #     jumps to .Ltmp983
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp982-.Lfunc_begin0         # >> Call Site 370 <<
	.uleb128 .Ltmp984-.Ltmp982              #   Call between .Ltmp982 and .Ltmp984
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp984-.Lfunc_begin0         # >> Call Site 371 <<
	.uleb128 .Ltmp985-.Ltmp984              #   Call between .Ltmp984 and .Ltmp985
	.uleb128 .Ltmp986-.Lfunc_begin0         #     jumps to .Ltmp986
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp987-.Lfunc_begin0         # >> Call Site 372 <<
	.uleb128 .Ltmp990-.Ltmp987              #   Call between .Ltmp987 and .Ltmp990
	.uleb128 .Ltmp991-.Lfunc_begin0         #     jumps to .Ltmp991
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp990-.Lfunc_begin0         # >> Call Site 373 <<
	.uleb128 .Ltmp992-.Ltmp990              #   Call between .Ltmp990 and .Ltmp992
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp992-.Lfunc_begin0         # >> Call Site 374 <<
	.uleb128 .Ltmp993-.Ltmp992              #   Call between .Ltmp992 and .Ltmp993
	.uleb128 .Ltmp994-.Lfunc_begin0         #     jumps to .Ltmp994
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp995-.Lfunc_begin0         # >> Call Site 375 <<
	.uleb128 .Ltmp998-.Ltmp995              #   Call between .Ltmp995 and .Ltmp998
	.uleb128 .Ltmp999-.Lfunc_begin0         #     jumps to .Ltmp999
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp998-.Lfunc_begin0         # >> Call Site 376 <<
	.uleb128 .Ltmp1000-.Ltmp998             #   Call between .Ltmp998 and .Ltmp1000
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1000-.Lfunc_begin0        # >> Call Site 377 <<
	.uleb128 .Ltmp1001-.Ltmp1000            #   Call between .Ltmp1000 and .Ltmp1001
	.uleb128 .Ltmp1002-.Lfunc_begin0        #     jumps to .Ltmp1002
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1003-.Lfunc_begin0        # >> Call Site 378 <<
	.uleb128 .Ltmp1006-.Ltmp1003            #   Call between .Ltmp1003 and .Ltmp1006
	.uleb128 .Ltmp1007-.Lfunc_begin0        #     jumps to .Ltmp1007
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1006-.Lfunc_begin0        # >> Call Site 379 <<
	.uleb128 .Ltmp1008-.Ltmp1006            #   Call between .Ltmp1006 and .Ltmp1008
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1008-.Lfunc_begin0        # >> Call Site 380 <<
	.uleb128 .Ltmp1009-.Ltmp1008            #   Call between .Ltmp1008 and .Ltmp1009
	.uleb128 .Ltmp1010-.Lfunc_begin0        #     jumps to .Ltmp1010
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1011-.Lfunc_begin0        # >> Call Site 381 <<
	.uleb128 .Ltmp1014-.Ltmp1011            #   Call between .Ltmp1011 and .Ltmp1014
	.uleb128 .Ltmp1015-.Lfunc_begin0        #     jumps to .Ltmp1015
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1014-.Lfunc_begin0        # >> Call Site 382 <<
	.uleb128 .Ltmp1016-.Ltmp1014            #   Call between .Ltmp1014 and .Ltmp1016
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1016-.Lfunc_begin0        # >> Call Site 383 <<
	.uleb128 .Ltmp1017-.Ltmp1016            #   Call between .Ltmp1016 and .Ltmp1017
	.uleb128 .Ltmp1018-.Lfunc_begin0        #     jumps to .Ltmp1018
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1019-.Lfunc_begin0        # >> Call Site 384 <<
	.uleb128 .Ltmp1022-.Ltmp1019            #   Call between .Ltmp1019 and .Ltmp1022
	.uleb128 .Ltmp1023-.Lfunc_begin0        #     jumps to .Ltmp1023
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1022-.Lfunc_begin0        # >> Call Site 385 <<
	.uleb128 .Ltmp1024-.Ltmp1022            #   Call between .Ltmp1022 and .Ltmp1024
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1024-.Lfunc_begin0        # >> Call Site 386 <<
	.uleb128 .Ltmp1025-.Ltmp1024            #   Call between .Ltmp1024 and .Ltmp1025
	.uleb128 .Ltmp1026-.Lfunc_begin0        #     jumps to .Ltmp1026
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1027-.Lfunc_begin0        # >> Call Site 387 <<
	.uleb128 .Ltmp1030-.Ltmp1027            #   Call between .Ltmp1027 and .Ltmp1030
	.uleb128 .Ltmp1031-.Lfunc_begin0        #     jumps to .Ltmp1031
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1030-.Lfunc_begin0        # >> Call Site 388 <<
	.uleb128 .Ltmp1032-.Ltmp1030            #   Call between .Ltmp1030 and .Ltmp1032
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1032-.Lfunc_begin0        # >> Call Site 389 <<
	.uleb128 .Ltmp1033-.Ltmp1032            #   Call between .Ltmp1032 and .Ltmp1033
	.uleb128 .Ltmp1034-.Lfunc_begin0        #     jumps to .Ltmp1034
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1035-.Lfunc_begin0        # >> Call Site 390 <<
	.uleb128 .Ltmp1038-.Ltmp1035            #   Call between .Ltmp1035 and .Ltmp1038
	.uleb128 .Ltmp1039-.Lfunc_begin0        #     jumps to .Ltmp1039
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1038-.Lfunc_begin0        # >> Call Site 391 <<
	.uleb128 .Ltmp1040-.Ltmp1038            #   Call between .Ltmp1038 and .Ltmp1040
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1040-.Lfunc_begin0        # >> Call Site 392 <<
	.uleb128 .Ltmp1041-.Ltmp1040            #   Call between .Ltmp1040 and .Ltmp1041
	.uleb128 .Ltmp1042-.Lfunc_begin0        #     jumps to .Ltmp1042
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1043-.Lfunc_begin0        # >> Call Site 393 <<
	.uleb128 .Ltmp1046-.Ltmp1043            #   Call between .Ltmp1043 and .Ltmp1046
	.uleb128 .Ltmp1047-.Lfunc_begin0        #     jumps to .Ltmp1047
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1046-.Lfunc_begin0        # >> Call Site 394 <<
	.uleb128 .Ltmp1048-.Ltmp1046            #   Call between .Ltmp1046 and .Ltmp1048
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1048-.Lfunc_begin0        # >> Call Site 395 <<
	.uleb128 .Ltmp1049-.Ltmp1048            #   Call between .Ltmp1048 and .Ltmp1049
	.uleb128 .Ltmp1050-.Lfunc_begin0        #     jumps to .Ltmp1050
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1051-.Lfunc_begin0        # >> Call Site 396 <<
	.uleb128 .Ltmp1054-.Ltmp1051            #   Call between .Ltmp1051 and .Ltmp1054
	.uleb128 .Ltmp1055-.Lfunc_begin0        #     jumps to .Ltmp1055
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1054-.Lfunc_begin0        # >> Call Site 397 <<
	.uleb128 .Ltmp1056-.Ltmp1054            #   Call between .Ltmp1054 and .Ltmp1056
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1056-.Lfunc_begin0        # >> Call Site 398 <<
	.uleb128 .Ltmp1057-.Ltmp1056            #   Call between .Ltmp1056 and .Ltmp1057
	.uleb128 .Ltmp1058-.Lfunc_begin0        #     jumps to .Ltmp1058
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1059-.Lfunc_begin0        # >> Call Site 399 <<
	.uleb128 .Ltmp1062-.Ltmp1059            #   Call between .Ltmp1059 and .Ltmp1062
	.uleb128 .Ltmp1063-.Lfunc_begin0        #     jumps to .Ltmp1063
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1062-.Lfunc_begin0        # >> Call Site 400 <<
	.uleb128 .Ltmp1064-.Ltmp1062            #   Call between .Ltmp1062 and .Ltmp1064
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1064-.Lfunc_begin0        # >> Call Site 401 <<
	.uleb128 .Ltmp1065-.Ltmp1064            #   Call between .Ltmp1064 and .Ltmp1065
	.uleb128 .Ltmp1066-.Lfunc_begin0        #     jumps to .Ltmp1066
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1067-.Lfunc_begin0        # >> Call Site 402 <<
	.uleb128 .Ltmp1070-.Ltmp1067            #   Call between .Ltmp1067 and .Ltmp1070
	.uleb128 .Ltmp1071-.Lfunc_begin0        #     jumps to .Ltmp1071
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1070-.Lfunc_begin0        # >> Call Site 403 <<
	.uleb128 .Ltmp1072-.Ltmp1070            #   Call between .Ltmp1070 and .Ltmp1072
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1072-.Lfunc_begin0        # >> Call Site 404 <<
	.uleb128 .Ltmp1073-.Ltmp1072            #   Call between .Ltmp1072 and .Ltmp1073
	.uleb128 .Ltmp1074-.Lfunc_begin0        #     jumps to .Ltmp1074
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1075-.Lfunc_begin0        # >> Call Site 405 <<
	.uleb128 .Ltmp1078-.Ltmp1075            #   Call between .Ltmp1075 and .Ltmp1078
	.uleb128 .Ltmp1079-.Lfunc_begin0        #     jumps to .Ltmp1079
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1078-.Lfunc_begin0        # >> Call Site 406 <<
	.uleb128 .Ltmp1080-.Ltmp1078            #   Call between .Ltmp1078 and .Ltmp1080
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1080-.Lfunc_begin0        # >> Call Site 407 <<
	.uleb128 .Ltmp1081-.Ltmp1080            #   Call between .Ltmp1080 and .Ltmp1081
	.uleb128 .Ltmp1082-.Lfunc_begin0        #     jumps to .Ltmp1082
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1083-.Lfunc_begin0        # >> Call Site 408 <<
	.uleb128 .Ltmp1086-.Ltmp1083            #   Call between .Ltmp1083 and .Ltmp1086
	.uleb128 .Ltmp1087-.Lfunc_begin0        #     jumps to .Ltmp1087
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1086-.Lfunc_begin0        # >> Call Site 409 <<
	.uleb128 .Ltmp1088-.Ltmp1086            #   Call between .Ltmp1086 and .Ltmp1088
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1088-.Lfunc_begin0        # >> Call Site 410 <<
	.uleb128 .Ltmp1089-.Ltmp1088            #   Call between .Ltmp1088 and .Ltmp1089
	.uleb128 .Ltmp1090-.Lfunc_begin0        #     jumps to .Ltmp1090
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1091-.Lfunc_begin0        # >> Call Site 411 <<
	.uleb128 .Ltmp1094-.Ltmp1091            #   Call between .Ltmp1091 and .Ltmp1094
	.uleb128 .Ltmp1095-.Lfunc_begin0        #     jumps to .Ltmp1095
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1094-.Lfunc_begin0        # >> Call Site 412 <<
	.uleb128 .Ltmp1096-.Ltmp1094            #   Call between .Ltmp1094 and .Ltmp1096
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1096-.Lfunc_begin0        # >> Call Site 413 <<
	.uleb128 .Ltmp1097-.Ltmp1096            #   Call between .Ltmp1096 and .Ltmp1097
	.uleb128 .Ltmp1098-.Lfunc_begin0        #     jumps to .Ltmp1098
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1099-.Lfunc_begin0        # >> Call Site 414 <<
	.uleb128 .Ltmp1102-.Ltmp1099            #   Call between .Ltmp1099 and .Ltmp1102
	.uleb128 .Ltmp1103-.Lfunc_begin0        #     jumps to .Ltmp1103
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1102-.Lfunc_begin0        # >> Call Site 415 <<
	.uleb128 .Ltmp1104-.Ltmp1102            #   Call between .Ltmp1102 and .Ltmp1104
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1104-.Lfunc_begin0        # >> Call Site 416 <<
	.uleb128 .Ltmp1105-.Ltmp1104            #   Call between .Ltmp1104 and .Ltmp1105
	.uleb128 .Ltmp1106-.Lfunc_begin0        #     jumps to .Ltmp1106
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1107-.Lfunc_begin0        # >> Call Site 417 <<
	.uleb128 .Ltmp1110-.Ltmp1107            #   Call between .Ltmp1107 and .Ltmp1110
	.uleb128 .Ltmp1111-.Lfunc_begin0        #     jumps to .Ltmp1111
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1110-.Lfunc_begin0        # >> Call Site 418 <<
	.uleb128 .Ltmp1112-.Ltmp1110            #   Call between .Ltmp1110 and .Ltmp1112
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1112-.Lfunc_begin0        # >> Call Site 419 <<
	.uleb128 .Ltmp1113-.Ltmp1112            #   Call between .Ltmp1112 and .Ltmp1113
	.uleb128 .Ltmp1114-.Lfunc_begin0        #     jumps to .Ltmp1114
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1115-.Lfunc_begin0        # >> Call Site 420 <<
	.uleb128 .Ltmp1118-.Ltmp1115            #   Call between .Ltmp1115 and .Ltmp1118
	.uleb128 .Ltmp1119-.Lfunc_begin0        #     jumps to .Ltmp1119
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1118-.Lfunc_begin0        # >> Call Site 421 <<
	.uleb128 .Ltmp1120-.Ltmp1118            #   Call between .Ltmp1118 and .Ltmp1120
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1120-.Lfunc_begin0        # >> Call Site 422 <<
	.uleb128 .Ltmp1121-.Ltmp1120            #   Call between .Ltmp1120 and .Ltmp1121
	.uleb128 .Ltmp1122-.Lfunc_begin0        #     jumps to .Ltmp1122
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1123-.Lfunc_begin0        # >> Call Site 423 <<
	.uleb128 .Ltmp1126-.Ltmp1123            #   Call between .Ltmp1123 and .Ltmp1126
	.uleb128 .Ltmp1127-.Lfunc_begin0        #     jumps to .Ltmp1127
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1126-.Lfunc_begin0        # >> Call Site 424 <<
	.uleb128 .Ltmp1128-.Ltmp1126            #   Call between .Ltmp1126 and .Ltmp1128
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1128-.Lfunc_begin0        # >> Call Site 425 <<
	.uleb128 .Ltmp1129-.Ltmp1128            #   Call between .Ltmp1128 and .Ltmp1129
	.uleb128 .Ltmp1130-.Lfunc_begin0        #     jumps to .Ltmp1130
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1131-.Lfunc_begin0        # >> Call Site 426 <<
	.uleb128 .Ltmp1134-.Ltmp1131            #   Call between .Ltmp1131 and .Ltmp1134
	.uleb128 .Ltmp1135-.Lfunc_begin0        #     jumps to .Ltmp1135
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1134-.Lfunc_begin0        # >> Call Site 427 <<
	.uleb128 .Ltmp1136-.Ltmp1134            #   Call between .Ltmp1134 and .Ltmp1136
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1136-.Lfunc_begin0        # >> Call Site 428 <<
	.uleb128 .Ltmp1137-.Ltmp1136            #   Call between .Ltmp1136 and .Ltmp1137
	.uleb128 .Ltmp1138-.Lfunc_begin0        #     jumps to .Ltmp1138
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1139-.Lfunc_begin0        # >> Call Site 429 <<
	.uleb128 .Ltmp1142-.Ltmp1139            #   Call between .Ltmp1139 and .Ltmp1142
	.uleb128 .Ltmp1143-.Lfunc_begin0        #     jumps to .Ltmp1143
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1142-.Lfunc_begin0        # >> Call Site 430 <<
	.uleb128 .Ltmp1144-.Ltmp1142            #   Call between .Ltmp1142 and .Ltmp1144
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1144-.Lfunc_begin0        # >> Call Site 431 <<
	.uleb128 .Ltmp1145-.Ltmp1144            #   Call between .Ltmp1144 and .Ltmp1145
	.uleb128 .Ltmp1146-.Lfunc_begin0        #     jumps to .Ltmp1146
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1147-.Lfunc_begin0        # >> Call Site 432 <<
	.uleb128 .Ltmp1150-.Ltmp1147            #   Call between .Ltmp1147 and .Ltmp1150
	.uleb128 .Ltmp1151-.Lfunc_begin0        #     jumps to .Ltmp1151
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1150-.Lfunc_begin0        # >> Call Site 433 <<
	.uleb128 .Ltmp1152-.Ltmp1150            #   Call between .Ltmp1150 and .Ltmp1152
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1152-.Lfunc_begin0        # >> Call Site 434 <<
	.uleb128 .Ltmp1153-.Ltmp1152            #   Call between .Ltmp1152 and .Ltmp1153
	.uleb128 .Ltmp1154-.Lfunc_begin0        #     jumps to .Ltmp1154
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1155-.Lfunc_begin0        # >> Call Site 435 <<
	.uleb128 .Ltmp1158-.Ltmp1155            #   Call between .Ltmp1155 and .Ltmp1158
	.uleb128 .Ltmp1159-.Lfunc_begin0        #     jumps to .Ltmp1159
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1158-.Lfunc_begin0        # >> Call Site 436 <<
	.uleb128 .Ltmp1160-.Ltmp1158            #   Call between .Ltmp1158 and .Ltmp1160
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1160-.Lfunc_begin0        # >> Call Site 437 <<
	.uleb128 .Ltmp1161-.Ltmp1160            #   Call between .Ltmp1160 and .Ltmp1161
	.uleb128 .Ltmp1162-.Lfunc_begin0        #     jumps to .Ltmp1162
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1163-.Lfunc_begin0        # >> Call Site 438 <<
	.uleb128 .Ltmp1166-.Ltmp1163            #   Call between .Ltmp1163 and .Ltmp1166
	.uleb128 .Ltmp1167-.Lfunc_begin0        #     jumps to .Ltmp1167
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1166-.Lfunc_begin0        # >> Call Site 439 <<
	.uleb128 .Ltmp1168-.Ltmp1166            #   Call between .Ltmp1166 and .Ltmp1168
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1168-.Lfunc_begin0        # >> Call Site 440 <<
	.uleb128 .Ltmp1169-.Ltmp1168            #   Call between .Ltmp1168 and .Ltmp1169
	.uleb128 .Ltmp1170-.Lfunc_begin0        #     jumps to .Ltmp1170
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1171-.Lfunc_begin0        # >> Call Site 441 <<
	.uleb128 .Ltmp1174-.Ltmp1171            #   Call between .Ltmp1171 and .Ltmp1174
	.uleb128 .Ltmp1175-.Lfunc_begin0        #     jumps to .Ltmp1175
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1174-.Lfunc_begin0        # >> Call Site 442 <<
	.uleb128 .Ltmp1176-.Ltmp1174            #   Call between .Ltmp1174 and .Ltmp1176
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1176-.Lfunc_begin0        # >> Call Site 443 <<
	.uleb128 .Ltmp1177-.Ltmp1176            #   Call between .Ltmp1176 and .Ltmp1177
	.uleb128 .Ltmp1178-.Lfunc_begin0        #     jumps to .Ltmp1178
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1179-.Lfunc_begin0        # >> Call Site 444 <<
	.uleb128 .Ltmp1182-.Ltmp1179            #   Call between .Ltmp1179 and .Ltmp1182
	.uleb128 .Ltmp1183-.Lfunc_begin0        #     jumps to .Ltmp1183
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1182-.Lfunc_begin0        # >> Call Site 445 <<
	.uleb128 .Ltmp1184-.Ltmp1182            #   Call between .Ltmp1182 and .Ltmp1184
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1184-.Lfunc_begin0        # >> Call Site 446 <<
	.uleb128 .Ltmp1185-.Ltmp1184            #   Call between .Ltmp1184 and .Ltmp1185
	.uleb128 .Ltmp1186-.Lfunc_begin0        #     jumps to .Ltmp1186
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1187-.Lfunc_begin0        # >> Call Site 447 <<
	.uleb128 .Ltmp1190-.Ltmp1187            #   Call between .Ltmp1187 and .Ltmp1190
	.uleb128 .Ltmp1191-.Lfunc_begin0        #     jumps to .Ltmp1191
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1190-.Lfunc_begin0        # >> Call Site 448 <<
	.uleb128 .Ltmp1192-.Ltmp1190            #   Call between .Ltmp1190 and .Ltmp1192
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1192-.Lfunc_begin0        # >> Call Site 449 <<
	.uleb128 .Ltmp1193-.Ltmp1192            #   Call between .Ltmp1192 and .Ltmp1193
	.uleb128 .Ltmp1194-.Lfunc_begin0        #     jumps to .Ltmp1194
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1195-.Lfunc_begin0        # >> Call Site 450 <<
	.uleb128 .Ltmp1198-.Ltmp1195            #   Call between .Ltmp1195 and .Ltmp1198
	.uleb128 .Ltmp1199-.Lfunc_begin0        #     jumps to .Ltmp1199
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1198-.Lfunc_begin0        # >> Call Site 451 <<
	.uleb128 .Ltmp1200-.Ltmp1198            #   Call between .Ltmp1198 and .Ltmp1200
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1200-.Lfunc_begin0        # >> Call Site 452 <<
	.uleb128 .Ltmp1201-.Ltmp1200            #   Call between .Ltmp1200 and .Ltmp1201
	.uleb128 .Ltmp1202-.Lfunc_begin0        #     jumps to .Ltmp1202
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1203-.Lfunc_begin0        # >> Call Site 453 <<
	.uleb128 .Ltmp1206-.Ltmp1203            #   Call between .Ltmp1203 and .Ltmp1206
	.uleb128 .Ltmp1207-.Lfunc_begin0        #     jumps to .Ltmp1207
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1206-.Lfunc_begin0        # >> Call Site 454 <<
	.uleb128 .Ltmp1208-.Ltmp1206            #   Call between .Ltmp1206 and .Ltmp1208
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1208-.Lfunc_begin0        # >> Call Site 455 <<
	.uleb128 .Ltmp1209-.Ltmp1208            #   Call between .Ltmp1208 and .Ltmp1209
	.uleb128 .Ltmp1210-.Lfunc_begin0        #     jumps to .Ltmp1210
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1211-.Lfunc_begin0        # >> Call Site 456 <<
	.uleb128 .Ltmp1214-.Ltmp1211            #   Call between .Ltmp1211 and .Ltmp1214
	.uleb128 .Ltmp1215-.Lfunc_begin0        #     jumps to .Ltmp1215
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1214-.Lfunc_begin0        # >> Call Site 457 <<
	.uleb128 .Ltmp1216-.Ltmp1214            #   Call between .Ltmp1214 and .Ltmp1216
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1216-.Lfunc_begin0        # >> Call Site 458 <<
	.uleb128 .Ltmp1217-.Ltmp1216            #   Call between .Ltmp1216 and .Ltmp1217
	.uleb128 .Ltmp1218-.Lfunc_begin0        #     jumps to .Ltmp1218
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1219-.Lfunc_begin0        # >> Call Site 459 <<
	.uleb128 .Ltmp1222-.Ltmp1219            #   Call between .Ltmp1219 and .Ltmp1222
	.uleb128 .Ltmp1223-.Lfunc_begin0        #     jumps to .Ltmp1223
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1222-.Lfunc_begin0        # >> Call Site 460 <<
	.uleb128 .Ltmp1224-.Ltmp1222            #   Call between .Ltmp1222 and .Ltmp1224
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1224-.Lfunc_begin0        # >> Call Site 461 <<
	.uleb128 .Ltmp1225-.Ltmp1224            #   Call between .Ltmp1224 and .Ltmp1225
	.uleb128 .Ltmp1226-.Lfunc_begin0        #     jumps to .Ltmp1226
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1227-.Lfunc_begin0        # >> Call Site 462 <<
	.uleb128 .Ltmp1230-.Ltmp1227            #   Call between .Ltmp1227 and .Ltmp1230
	.uleb128 .Ltmp1231-.Lfunc_begin0        #     jumps to .Ltmp1231
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1230-.Lfunc_begin0        # >> Call Site 463 <<
	.uleb128 .Ltmp1232-.Ltmp1230            #   Call between .Ltmp1230 and .Ltmp1232
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1232-.Lfunc_begin0        # >> Call Site 464 <<
	.uleb128 .Ltmp1233-.Ltmp1232            #   Call between .Ltmp1232 and .Ltmp1233
	.uleb128 .Ltmp1234-.Lfunc_begin0        #     jumps to .Ltmp1234
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1235-.Lfunc_begin0        # >> Call Site 465 <<
	.uleb128 .Ltmp1238-.Ltmp1235            #   Call between .Ltmp1235 and .Ltmp1238
	.uleb128 .Ltmp1239-.Lfunc_begin0        #     jumps to .Ltmp1239
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1238-.Lfunc_begin0        # >> Call Site 466 <<
	.uleb128 .Ltmp1240-.Ltmp1238            #   Call between .Ltmp1238 and .Ltmp1240
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1240-.Lfunc_begin0        # >> Call Site 467 <<
	.uleb128 .Ltmp1241-.Ltmp1240            #   Call between .Ltmp1240 and .Ltmp1241
	.uleb128 .Ltmp1242-.Lfunc_begin0        #     jumps to .Ltmp1242
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1243-.Lfunc_begin0        # >> Call Site 468 <<
	.uleb128 .Ltmp1246-.Ltmp1243            #   Call between .Ltmp1243 and .Ltmp1246
	.uleb128 .Ltmp1247-.Lfunc_begin0        #     jumps to .Ltmp1247
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1246-.Lfunc_begin0        # >> Call Site 469 <<
	.uleb128 .Ltmp1248-.Ltmp1246            #   Call between .Ltmp1246 and .Ltmp1248
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1248-.Lfunc_begin0        # >> Call Site 470 <<
	.uleb128 .Ltmp1249-.Ltmp1248            #   Call between .Ltmp1248 and .Ltmp1249
	.uleb128 .Ltmp1250-.Lfunc_begin0        #     jumps to .Ltmp1250
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1251-.Lfunc_begin0        # >> Call Site 471 <<
	.uleb128 .Ltmp1254-.Ltmp1251            #   Call between .Ltmp1251 and .Ltmp1254
	.uleb128 .Ltmp1255-.Lfunc_begin0        #     jumps to .Ltmp1255
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1254-.Lfunc_begin0        # >> Call Site 472 <<
	.uleb128 .Ltmp1256-.Ltmp1254            #   Call between .Ltmp1254 and .Ltmp1256
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1256-.Lfunc_begin0        # >> Call Site 473 <<
	.uleb128 .Ltmp1257-.Ltmp1256            #   Call between .Ltmp1256 and .Ltmp1257
	.uleb128 .Ltmp1258-.Lfunc_begin0        #     jumps to .Ltmp1258
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1259-.Lfunc_begin0        # >> Call Site 474 <<
	.uleb128 .Ltmp1262-.Ltmp1259            #   Call between .Ltmp1259 and .Ltmp1262
	.uleb128 .Ltmp1263-.Lfunc_begin0        #     jumps to .Ltmp1263
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1262-.Lfunc_begin0        # >> Call Site 475 <<
	.uleb128 .Ltmp1264-.Ltmp1262            #   Call between .Ltmp1262 and .Ltmp1264
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1264-.Lfunc_begin0        # >> Call Site 476 <<
	.uleb128 .Ltmp1265-.Ltmp1264            #   Call between .Ltmp1264 and .Ltmp1265
	.uleb128 .Ltmp1266-.Lfunc_begin0        #     jumps to .Ltmp1266
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1267-.Lfunc_begin0        # >> Call Site 477 <<
	.uleb128 .Ltmp1270-.Ltmp1267            #   Call between .Ltmp1267 and .Ltmp1270
	.uleb128 .Ltmp1271-.Lfunc_begin0        #     jumps to .Ltmp1271
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1270-.Lfunc_begin0        # >> Call Site 478 <<
	.uleb128 .Ltmp1272-.Ltmp1270            #   Call between .Ltmp1270 and .Ltmp1272
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1272-.Lfunc_begin0        # >> Call Site 479 <<
	.uleb128 .Ltmp1273-.Ltmp1272            #   Call between .Ltmp1272 and .Ltmp1273
	.uleb128 .Ltmp1274-.Lfunc_begin0        #     jumps to .Ltmp1274
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1275-.Lfunc_begin0        # >> Call Site 480 <<
	.uleb128 .Ltmp1278-.Ltmp1275            #   Call between .Ltmp1275 and .Ltmp1278
	.uleb128 .Ltmp1279-.Lfunc_begin0        #     jumps to .Ltmp1279
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1278-.Lfunc_begin0        # >> Call Site 481 <<
	.uleb128 .Ltmp1280-.Ltmp1278            #   Call between .Ltmp1278 and .Ltmp1280
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1280-.Lfunc_begin0        # >> Call Site 482 <<
	.uleb128 .Ltmp1281-.Ltmp1280            #   Call between .Ltmp1280 and .Ltmp1281
	.uleb128 .Ltmp1282-.Lfunc_begin0        #     jumps to .Ltmp1282
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1283-.Lfunc_begin0        # >> Call Site 483 <<
	.uleb128 .Ltmp1286-.Ltmp1283            #   Call between .Ltmp1283 and .Ltmp1286
	.uleb128 .Ltmp1287-.Lfunc_begin0        #     jumps to .Ltmp1287
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1286-.Lfunc_begin0        # >> Call Site 484 <<
	.uleb128 .Ltmp1288-.Ltmp1286            #   Call between .Ltmp1286 and .Ltmp1288
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1288-.Lfunc_begin0        # >> Call Site 485 <<
	.uleb128 .Ltmp1289-.Ltmp1288            #   Call between .Ltmp1288 and .Ltmp1289
	.uleb128 .Ltmp1290-.Lfunc_begin0        #     jumps to .Ltmp1290
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1291-.Lfunc_begin0        # >> Call Site 486 <<
	.uleb128 .Ltmp1294-.Ltmp1291            #   Call between .Ltmp1291 and .Ltmp1294
	.uleb128 .Ltmp1295-.Lfunc_begin0        #     jumps to .Ltmp1295
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1294-.Lfunc_begin0        # >> Call Site 487 <<
	.uleb128 .Ltmp1296-.Ltmp1294            #   Call between .Ltmp1294 and .Ltmp1296
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1296-.Lfunc_begin0        # >> Call Site 488 <<
	.uleb128 .Ltmp1297-.Ltmp1296            #   Call between .Ltmp1296 and .Ltmp1297
	.uleb128 .Ltmp1298-.Lfunc_begin0        #     jumps to .Ltmp1298
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1299-.Lfunc_begin0        # >> Call Site 489 <<
	.uleb128 .Ltmp1302-.Ltmp1299            #   Call between .Ltmp1299 and .Ltmp1302
	.uleb128 .Ltmp1303-.Lfunc_begin0        #     jumps to .Ltmp1303
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1302-.Lfunc_begin0        # >> Call Site 490 <<
	.uleb128 .Ltmp1304-.Ltmp1302            #   Call between .Ltmp1302 and .Ltmp1304
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1304-.Lfunc_begin0        # >> Call Site 491 <<
	.uleb128 .Ltmp1305-.Ltmp1304            #   Call between .Ltmp1304 and .Ltmp1305
	.uleb128 .Ltmp1306-.Lfunc_begin0        #     jumps to .Ltmp1306
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1307-.Lfunc_begin0        # >> Call Site 492 <<
	.uleb128 .Ltmp1310-.Ltmp1307            #   Call between .Ltmp1307 and .Ltmp1310
	.uleb128 .Ltmp1311-.Lfunc_begin0        #     jumps to .Ltmp1311
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1310-.Lfunc_begin0        # >> Call Site 493 <<
	.uleb128 .Ltmp1312-.Ltmp1310            #   Call between .Ltmp1310 and .Ltmp1312
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1312-.Lfunc_begin0        # >> Call Site 494 <<
	.uleb128 .Ltmp1313-.Ltmp1312            #   Call between .Ltmp1312 and .Ltmp1313
	.uleb128 .Ltmp1314-.Lfunc_begin0        #     jumps to .Ltmp1314
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1315-.Lfunc_begin0        # >> Call Site 495 <<
	.uleb128 .Ltmp1318-.Ltmp1315            #   Call between .Ltmp1315 and .Ltmp1318
	.uleb128 .Ltmp1319-.Lfunc_begin0        #     jumps to .Ltmp1319
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1318-.Lfunc_begin0        # >> Call Site 496 <<
	.uleb128 .Ltmp1320-.Ltmp1318            #   Call between .Ltmp1318 and .Ltmp1320
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1320-.Lfunc_begin0        # >> Call Site 497 <<
	.uleb128 .Ltmp1321-.Ltmp1320            #   Call between .Ltmp1320 and .Ltmp1321
	.uleb128 .Ltmp1322-.Lfunc_begin0        #     jumps to .Ltmp1322
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1323-.Lfunc_begin0        # >> Call Site 498 <<
	.uleb128 .Ltmp1326-.Ltmp1323            #   Call between .Ltmp1323 and .Ltmp1326
	.uleb128 .Ltmp1327-.Lfunc_begin0        #     jumps to .Ltmp1327
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1326-.Lfunc_begin0        # >> Call Site 499 <<
	.uleb128 .Ltmp1328-.Ltmp1326            #   Call between .Ltmp1326 and .Ltmp1328
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1328-.Lfunc_begin0        # >> Call Site 500 <<
	.uleb128 .Ltmp1329-.Ltmp1328            #   Call between .Ltmp1328 and .Ltmp1329
	.uleb128 .Ltmp1330-.Lfunc_begin0        #     jumps to .Ltmp1330
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1331-.Lfunc_begin0        # >> Call Site 501 <<
	.uleb128 .Ltmp1334-.Ltmp1331            #   Call between .Ltmp1331 and .Ltmp1334
	.uleb128 .Ltmp1335-.Lfunc_begin0        #     jumps to .Ltmp1335
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1334-.Lfunc_begin0        # >> Call Site 502 <<
	.uleb128 .Ltmp1336-.Ltmp1334            #   Call between .Ltmp1334 and .Ltmp1336
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1336-.Lfunc_begin0        # >> Call Site 503 <<
	.uleb128 .Ltmp1337-.Ltmp1336            #   Call between .Ltmp1336 and .Ltmp1337
	.uleb128 .Ltmp1338-.Lfunc_begin0        #     jumps to .Ltmp1338
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1339-.Lfunc_begin0        # >> Call Site 504 <<
	.uleb128 .Ltmp1342-.Ltmp1339            #   Call between .Ltmp1339 and .Ltmp1342
	.uleb128 .Ltmp1343-.Lfunc_begin0        #     jumps to .Ltmp1343
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1342-.Lfunc_begin0        # >> Call Site 505 <<
	.uleb128 .Ltmp1344-.Ltmp1342            #   Call between .Ltmp1342 and .Ltmp1344
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1344-.Lfunc_begin0        # >> Call Site 506 <<
	.uleb128 .Ltmp1345-.Ltmp1344            #   Call between .Ltmp1344 and .Ltmp1345
	.uleb128 .Ltmp1346-.Lfunc_begin0        #     jumps to .Ltmp1346
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1347-.Lfunc_begin0        # >> Call Site 507 <<
	.uleb128 .Ltmp1350-.Ltmp1347            #   Call between .Ltmp1347 and .Ltmp1350
	.uleb128 .Ltmp1351-.Lfunc_begin0        #     jumps to .Ltmp1351
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1350-.Lfunc_begin0        # >> Call Site 508 <<
	.uleb128 .Ltmp1352-.Ltmp1350            #   Call between .Ltmp1350 and .Ltmp1352
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1352-.Lfunc_begin0        # >> Call Site 509 <<
	.uleb128 .Ltmp1353-.Ltmp1352            #   Call between .Ltmp1352 and .Ltmp1353
	.uleb128 .Ltmp1354-.Lfunc_begin0        #     jumps to .Ltmp1354
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1355-.Lfunc_begin0        # >> Call Site 510 <<
	.uleb128 .Ltmp1358-.Ltmp1355            #   Call between .Ltmp1355 and .Ltmp1358
	.uleb128 .Ltmp1359-.Lfunc_begin0        #     jumps to .Ltmp1359
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1358-.Lfunc_begin0        # >> Call Site 511 <<
	.uleb128 .Ltmp1360-.Ltmp1358            #   Call between .Ltmp1358 and .Ltmp1360
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1360-.Lfunc_begin0        # >> Call Site 512 <<
	.uleb128 .Ltmp1361-.Ltmp1360            #   Call between .Ltmp1360 and .Ltmp1361
	.uleb128 .Ltmp1362-.Lfunc_begin0        #     jumps to .Ltmp1362
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1363-.Lfunc_begin0        # >> Call Site 513 <<
	.uleb128 .Ltmp1366-.Ltmp1363            #   Call between .Ltmp1363 and .Ltmp1366
	.uleb128 .Ltmp1367-.Lfunc_begin0        #     jumps to .Ltmp1367
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1366-.Lfunc_begin0        # >> Call Site 514 <<
	.uleb128 .Ltmp1368-.Ltmp1366            #   Call between .Ltmp1366 and .Ltmp1368
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1368-.Lfunc_begin0        # >> Call Site 515 <<
	.uleb128 .Ltmp1369-.Ltmp1368            #   Call between .Ltmp1368 and .Ltmp1369
	.uleb128 .Ltmp1370-.Lfunc_begin0        #     jumps to .Ltmp1370
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1371-.Lfunc_begin0        # >> Call Site 516 <<
	.uleb128 .Ltmp1374-.Ltmp1371            #   Call between .Ltmp1371 and .Ltmp1374
	.uleb128 .Ltmp1375-.Lfunc_begin0        #     jumps to .Ltmp1375
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1374-.Lfunc_begin0        # >> Call Site 517 <<
	.uleb128 .Ltmp1376-.Ltmp1374            #   Call between .Ltmp1374 and .Ltmp1376
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1376-.Lfunc_begin0        # >> Call Site 518 <<
	.uleb128 .Ltmp1377-.Ltmp1376            #   Call between .Ltmp1376 and .Ltmp1377
	.uleb128 .Ltmp1378-.Lfunc_begin0        #     jumps to .Ltmp1378
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1379-.Lfunc_begin0        # >> Call Site 519 <<
	.uleb128 .Ltmp1382-.Ltmp1379            #   Call between .Ltmp1379 and .Ltmp1382
	.uleb128 .Ltmp1383-.Lfunc_begin0        #     jumps to .Ltmp1383
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1382-.Lfunc_begin0        # >> Call Site 520 <<
	.uleb128 .Ltmp1384-.Ltmp1382            #   Call between .Ltmp1382 and .Ltmp1384
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1384-.Lfunc_begin0        # >> Call Site 521 <<
	.uleb128 .Ltmp1385-.Ltmp1384            #   Call between .Ltmp1384 and .Ltmp1385
	.uleb128 .Ltmp1386-.Lfunc_begin0        #     jumps to .Ltmp1386
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1387-.Lfunc_begin0        # >> Call Site 522 <<
	.uleb128 .Ltmp1390-.Ltmp1387            #   Call between .Ltmp1387 and .Ltmp1390
	.uleb128 .Ltmp1391-.Lfunc_begin0        #     jumps to .Ltmp1391
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1390-.Lfunc_begin0        # >> Call Site 523 <<
	.uleb128 .Ltmp1392-.Ltmp1390            #   Call between .Ltmp1390 and .Ltmp1392
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1392-.Lfunc_begin0        # >> Call Site 524 <<
	.uleb128 .Ltmp1393-.Ltmp1392            #   Call between .Ltmp1392 and .Ltmp1393
	.uleb128 .Ltmp1394-.Lfunc_begin0        #     jumps to .Ltmp1394
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1395-.Lfunc_begin0        # >> Call Site 525 <<
	.uleb128 .Ltmp1398-.Ltmp1395            #   Call between .Ltmp1395 and .Ltmp1398
	.uleb128 .Ltmp1399-.Lfunc_begin0        #     jumps to .Ltmp1399
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1398-.Lfunc_begin0        # >> Call Site 526 <<
	.uleb128 .Ltmp1400-.Ltmp1398            #   Call between .Ltmp1398 and .Ltmp1400
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1400-.Lfunc_begin0        # >> Call Site 527 <<
	.uleb128 .Ltmp1401-.Ltmp1400            #   Call between .Ltmp1400 and .Ltmp1401
	.uleb128 .Ltmp1402-.Lfunc_begin0        #     jumps to .Ltmp1402
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1403-.Lfunc_begin0        # >> Call Site 528 <<
	.uleb128 .Ltmp1406-.Ltmp1403            #   Call between .Ltmp1403 and .Ltmp1406
	.uleb128 .Ltmp1407-.Lfunc_begin0        #     jumps to .Ltmp1407
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1406-.Lfunc_begin0        # >> Call Site 529 <<
	.uleb128 .Ltmp1408-.Ltmp1406            #   Call between .Ltmp1406 and .Ltmp1408
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1408-.Lfunc_begin0        # >> Call Site 530 <<
	.uleb128 .Ltmp1409-.Ltmp1408            #   Call between .Ltmp1408 and .Ltmp1409
	.uleb128 .Ltmp1410-.Lfunc_begin0        #     jumps to .Ltmp1410
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1411-.Lfunc_begin0        # >> Call Site 531 <<
	.uleb128 .Ltmp1414-.Ltmp1411            #   Call between .Ltmp1411 and .Ltmp1414
	.uleb128 .Ltmp1415-.Lfunc_begin0        #     jumps to .Ltmp1415
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1414-.Lfunc_begin0        # >> Call Site 532 <<
	.uleb128 .Ltmp1416-.Ltmp1414            #   Call between .Ltmp1414 and .Ltmp1416
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1416-.Lfunc_begin0        # >> Call Site 533 <<
	.uleb128 .Ltmp1417-.Ltmp1416            #   Call between .Ltmp1416 and .Ltmp1417
	.uleb128 .Ltmp1418-.Lfunc_begin0        #     jumps to .Ltmp1418
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1419-.Lfunc_begin0        # >> Call Site 534 <<
	.uleb128 .Ltmp1422-.Ltmp1419            #   Call between .Ltmp1419 and .Ltmp1422
	.uleb128 .Ltmp1423-.Lfunc_begin0        #     jumps to .Ltmp1423
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1422-.Lfunc_begin0        # >> Call Site 535 <<
	.uleb128 .Ltmp1424-.Ltmp1422            #   Call between .Ltmp1422 and .Ltmp1424
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1424-.Lfunc_begin0        # >> Call Site 536 <<
	.uleb128 .Ltmp1425-.Ltmp1424            #   Call between .Ltmp1424 and .Ltmp1425
	.uleb128 .Ltmp1426-.Lfunc_begin0        #     jumps to .Ltmp1426
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1427-.Lfunc_begin0        # >> Call Site 537 <<
	.uleb128 .Ltmp1430-.Ltmp1427            #   Call between .Ltmp1427 and .Ltmp1430
	.uleb128 .Ltmp1431-.Lfunc_begin0        #     jumps to .Ltmp1431
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1430-.Lfunc_begin0        # >> Call Site 538 <<
	.uleb128 .Ltmp1432-.Ltmp1430            #   Call between .Ltmp1430 and .Ltmp1432
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1432-.Lfunc_begin0        # >> Call Site 539 <<
	.uleb128 .Ltmp1433-.Ltmp1432            #   Call between .Ltmp1432 and .Ltmp1433
	.uleb128 .Ltmp1434-.Lfunc_begin0        #     jumps to .Ltmp1434
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1435-.Lfunc_begin0        # >> Call Site 540 <<
	.uleb128 .Ltmp1438-.Ltmp1435            #   Call between .Ltmp1435 and .Ltmp1438
	.uleb128 .Ltmp1439-.Lfunc_begin0        #     jumps to .Ltmp1439
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1438-.Lfunc_begin0        # >> Call Site 541 <<
	.uleb128 .Ltmp1440-.Ltmp1438            #   Call between .Ltmp1438 and .Ltmp1440
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1440-.Lfunc_begin0        # >> Call Site 542 <<
	.uleb128 .Ltmp1441-.Ltmp1440            #   Call between .Ltmp1440 and .Ltmp1441
	.uleb128 .Ltmp1442-.Lfunc_begin0        #     jumps to .Ltmp1442
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1443-.Lfunc_begin0        # >> Call Site 543 <<
	.uleb128 .Ltmp1446-.Ltmp1443            #   Call between .Ltmp1443 and .Ltmp1446
	.uleb128 .Ltmp1447-.Lfunc_begin0        #     jumps to .Ltmp1447
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1446-.Lfunc_begin0        # >> Call Site 544 <<
	.uleb128 .Ltmp1448-.Ltmp1446            #   Call between .Ltmp1446 and .Ltmp1448
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1448-.Lfunc_begin0        # >> Call Site 545 <<
	.uleb128 .Ltmp1449-.Ltmp1448            #   Call between .Ltmp1448 and .Ltmp1449
	.uleb128 .Ltmp1450-.Lfunc_begin0        #     jumps to .Ltmp1450
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1451-.Lfunc_begin0        # >> Call Site 546 <<
	.uleb128 .Ltmp1454-.Ltmp1451            #   Call between .Ltmp1451 and .Ltmp1454
	.uleb128 .Ltmp1455-.Lfunc_begin0        #     jumps to .Ltmp1455
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1454-.Lfunc_begin0        # >> Call Site 547 <<
	.uleb128 .Ltmp1456-.Ltmp1454            #   Call between .Ltmp1454 and .Ltmp1456
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1456-.Lfunc_begin0        # >> Call Site 548 <<
	.uleb128 .Ltmp1457-.Ltmp1456            #   Call between .Ltmp1456 and .Ltmp1457
	.uleb128 .Ltmp1458-.Lfunc_begin0        #     jumps to .Ltmp1458
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1459-.Lfunc_begin0        # >> Call Site 549 <<
	.uleb128 .Ltmp1462-.Ltmp1459            #   Call between .Ltmp1459 and .Ltmp1462
	.uleb128 .Ltmp1463-.Lfunc_begin0        #     jumps to .Ltmp1463
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1462-.Lfunc_begin0        # >> Call Site 550 <<
	.uleb128 .Ltmp1464-.Ltmp1462            #   Call between .Ltmp1462 and .Ltmp1464
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1464-.Lfunc_begin0        # >> Call Site 551 <<
	.uleb128 .Ltmp1465-.Ltmp1464            #   Call between .Ltmp1464 and .Ltmp1465
	.uleb128 .Ltmp1466-.Lfunc_begin0        #     jumps to .Ltmp1466
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1467-.Lfunc_begin0        # >> Call Site 552 <<
	.uleb128 .Ltmp1470-.Ltmp1467            #   Call between .Ltmp1467 and .Ltmp1470
	.uleb128 .Ltmp1471-.Lfunc_begin0        #     jumps to .Ltmp1471
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1470-.Lfunc_begin0        # >> Call Site 553 <<
	.uleb128 .Ltmp1472-.Ltmp1470            #   Call between .Ltmp1470 and .Ltmp1472
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1472-.Lfunc_begin0        # >> Call Site 554 <<
	.uleb128 .Ltmp1473-.Ltmp1472            #   Call between .Ltmp1472 and .Ltmp1473
	.uleb128 .Ltmp1474-.Lfunc_begin0        #     jumps to .Ltmp1474
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1475-.Lfunc_begin0        # >> Call Site 555 <<
	.uleb128 .Ltmp1478-.Ltmp1475            #   Call between .Ltmp1475 and .Ltmp1478
	.uleb128 .Ltmp1479-.Lfunc_begin0        #     jumps to .Ltmp1479
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1478-.Lfunc_begin0        # >> Call Site 556 <<
	.uleb128 .Ltmp1480-.Ltmp1478            #   Call between .Ltmp1478 and .Ltmp1480
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1480-.Lfunc_begin0        # >> Call Site 557 <<
	.uleb128 .Ltmp1481-.Ltmp1480            #   Call between .Ltmp1480 and .Ltmp1481
	.uleb128 .Ltmp1482-.Lfunc_begin0        #     jumps to .Ltmp1482
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1483-.Lfunc_begin0        # >> Call Site 558 <<
	.uleb128 .Ltmp1486-.Ltmp1483            #   Call between .Ltmp1483 and .Ltmp1486
	.uleb128 .Ltmp1487-.Lfunc_begin0        #     jumps to .Ltmp1487
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1486-.Lfunc_begin0        # >> Call Site 559 <<
	.uleb128 .Ltmp1488-.Ltmp1486            #   Call between .Ltmp1486 and .Ltmp1488
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1488-.Lfunc_begin0        # >> Call Site 560 <<
	.uleb128 .Ltmp1489-.Ltmp1488            #   Call between .Ltmp1488 and .Ltmp1489
	.uleb128 .Ltmp1490-.Lfunc_begin0        #     jumps to .Ltmp1490
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1491-.Lfunc_begin0        # >> Call Site 561 <<
	.uleb128 .Ltmp1494-.Ltmp1491            #   Call between .Ltmp1491 and .Ltmp1494
	.uleb128 .Ltmp1495-.Lfunc_begin0        #     jumps to .Ltmp1495
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1494-.Lfunc_begin0        # >> Call Site 562 <<
	.uleb128 .Ltmp1496-.Ltmp1494            #   Call between .Ltmp1494 and .Ltmp1496
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1496-.Lfunc_begin0        # >> Call Site 563 <<
	.uleb128 .Ltmp1497-.Ltmp1496            #   Call between .Ltmp1496 and .Ltmp1497
	.uleb128 .Ltmp1498-.Lfunc_begin0        #     jumps to .Ltmp1498
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1499-.Lfunc_begin0        # >> Call Site 564 <<
	.uleb128 .Ltmp1502-.Ltmp1499            #   Call between .Ltmp1499 and .Ltmp1502
	.uleb128 .Ltmp1503-.Lfunc_begin0        #     jumps to .Ltmp1503
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1502-.Lfunc_begin0        # >> Call Site 565 <<
	.uleb128 .Ltmp1504-.Ltmp1502            #   Call between .Ltmp1502 and .Ltmp1504
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1504-.Lfunc_begin0        # >> Call Site 566 <<
	.uleb128 .Ltmp1505-.Ltmp1504            #   Call between .Ltmp1504 and .Ltmp1505
	.uleb128 .Ltmp1506-.Lfunc_begin0        #     jumps to .Ltmp1506
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1507-.Lfunc_begin0        # >> Call Site 567 <<
	.uleb128 .Ltmp1510-.Ltmp1507            #   Call between .Ltmp1507 and .Ltmp1510
	.uleb128 .Ltmp1511-.Lfunc_begin0        #     jumps to .Ltmp1511
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1510-.Lfunc_begin0        # >> Call Site 568 <<
	.uleb128 .Ltmp1512-.Ltmp1510            #   Call between .Ltmp1510 and .Ltmp1512
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1512-.Lfunc_begin0        # >> Call Site 569 <<
	.uleb128 .Ltmp1513-.Ltmp1512            #   Call between .Ltmp1512 and .Ltmp1513
	.uleb128 .Ltmp1514-.Lfunc_begin0        #     jumps to .Ltmp1514
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1515-.Lfunc_begin0        # >> Call Site 570 <<
	.uleb128 .Ltmp1518-.Ltmp1515            #   Call between .Ltmp1515 and .Ltmp1518
	.uleb128 .Ltmp1519-.Lfunc_begin0        #     jumps to .Ltmp1519
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1518-.Lfunc_begin0        # >> Call Site 571 <<
	.uleb128 .Ltmp1520-.Ltmp1518            #   Call between .Ltmp1518 and .Ltmp1520
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1520-.Lfunc_begin0        # >> Call Site 572 <<
	.uleb128 .Ltmp1521-.Ltmp1520            #   Call between .Ltmp1520 and .Ltmp1521
	.uleb128 .Ltmp1522-.Lfunc_begin0        #     jumps to .Ltmp1522
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1523-.Lfunc_begin0        # >> Call Site 573 <<
	.uleb128 .Ltmp1526-.Ltmp1523            #   Call between .Ltmp1523 and .Ltmp1526
	.uleb128 .Ltmp1527-.Lfunc_begin0        #     jumps to .Ltmp1527
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1526-.Lfunc_begin0        # >> Call Site 574 <<
	.uleb128 .Ltmp1528-.Ltmp1526            #   Call between .Ltmp1526 and .Ltmp1528
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1528-.Lfunc_begin0        # >> Call Site 575 <<
	.uleb128 .Ltmp1529-.Ltmp1528            #   Call between .Ltmp1528 and .Ltmp1529
	.uleb128 .Ltmp1530-.Lfunc_begin0        #     jumps to .Ltmp1530
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1531-.Lfunc_begin0        # >> Call Site 576 <<
	.uleb128 .Ltmp1534-.Ltmp1531            #   Call between .Ltmp1531 and .Ltmp1534
	.uleb128 .Ltmp1535-.Lfunc_begin0        #     jumps to .Ltmp1535
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1534-.Lfunc_begin0        # >> Call Site 577 <<
	.uleb128 .Ltmp1536-.Ltmp1534            #   Call between .Ltmp1534 and .Ltmp1536
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1536-.Lfunc_begin0        # >> Call Site 578 <<
	.uleb128 .Ltmp1537-.Ltmp1536            #   Call between .Ltmp1536 and .Ltmp1537
	.uleb128 .Ltmp1538-.Lfunc_begin0        #     jumps to .Ltmp1538
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1539-.Lfunc_begin0        # >> Call Site 579 <<
	.uleb128 .Ltmp1542-.Ltmp1539            #   Call between .Ltmp1539 and .Ltmp1542
	.uleb128 .Ltmp1543-.Lfunc_begin0        #     jumps to .Ltmp1543
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1542-.Lfunc_begin0        # >> Call Site 580 <<
	.uleb128 .Ltmp1544-.Ltmp1542            #   Call between .Ltmp1542 and .Ltmp1544
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1544-.Lfunc_begin0        # >> Call Site 581 <<
	.uleb128 .Ltmp1545-.Ltmp1544            #   Call between .Ltmp1544 and .Ltmp1545
	.uleb128 .Ltmp1546-.Lfunc_begin0        #     jumps to .Ltmp1546
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1547-.Lfunc_begin0        # >> Call Site 582 <<
	.uleb128 .Ltmp1550-.Ltmp1547            #   Call between .Ltmp1547 and .Ltmp1550
	.uleb128 .Ltmp1551-.Lfunc_begin0        #     jumps to .Ltmp1551
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1550-.Lfunc_begin0        # >> Call Site 583 <<
	.uleb128 .Ltmp1552-.Ltmp1550            #   Call between .Ltmp1550 and .Ltmp1552
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1552-.Lfunc_begin0        # >> Call Site 584 <<
	.uleb128 .Ltmp1553-.Ltmp1552            #   Call between .Ltmp1552 and .Ltmp1553
	.uleb128 .Ltmp1554-.Lfunc_begin0        #     jumps to .Ltmp1554
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1555-.Lfunc_begin0        # >> Call Site 585 <<
	.uleb128 .Ltmp1558-.Ltmp1555            #   Call between .Ltmp1555 and .Ltmp1558
	.uleb128 .Ltmp1559-.Lfunc_begin0        #     jumps to .Ltmp1559
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1558-.Lfunc_begin0        # >> Call Site 586 <<
	.uleb128 .Ltmp1560-.Ltmp1558            #   Call between .Ltmp1558 and .Ltmp1560
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1560-.Lfunc_begin0        # >> Call Site 587 <<
	.uleb128 .Ltmp1561-.Ltmp1560            #   Call between .Ltmp1560 and .Ltmp1561
	.uleb128 .Ltmp1562-.Lfunc_begin0        #     jumps to .Ltmp1562
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1563-.Lfunc_begin0        # >> Call Site 588 <<
	.uleb128 .Ltmp1566-.Ltmp1563            #   Call between .Ltmp1563 and .Ltmp1566
	.uleb128 .Ltmp1567-.Lfunc_begin0        #     jumps to .Ltmp1567
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1566-.Lfunc_begin0        # >> Call Site 589 <<
	.uleb128 .Ltmp1568-.Ltmp1566            #   Call between .Ltmp1566 and .Ltmp1568
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1568-.Lfunc_begin0        # >> Call Site 590 <<
	.uleb128 .Ltmp1569-.Ltmp1568            #   Call between .Ltmp1568 and .Ltmp1569
	.uleb128 .Ltmp1570-.Lfunc_begin0        #     jumps to .Ltmp1570
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1571-.Lfunc_begin0        # >> Call Site 591 <<
	.uleb128 .Ltmp1574-.Ltmp1571            #   Call between .Ltmp1571 and .Ltmp1574
	.uleb128 .Ltmp1575-.Lfunc_begin0        #     jumps to .Ltmp1575
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1574-.Lfunc_begin0        # >> Call Site 592 <<
	.uleb128 .Ltmp1576-.Ltmp1574            #   Call between .Ltmp1574 and .Ltmp1576
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1576-.Lfunc_begin0        # >> Call Site 593 <<
	.uleb128 .Ltmp1577-.Ltmp1576            #   Call between .Ltmp1576 and .Ltmp1577
	.uleb128 .Ltmp1578-.Lfunc_begin0        #     jumps to .Ltmp1578
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1579-.Lfunc_begin0        # >> Call Site 594 <<
	.uleb128 .Ltmp1582-.Ltmp1579            #   Call between .Ltmp1579 and .Ltmp1582
	.uleb128 .Ltmp1583-.Lfunc_begin0        #     jumps to .Ltmp1583
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1582-.Lfunc_begin0        # >> Call Site 595 <<
	.uleb128 .Ltmp1584-.Ltmp1582            #   Call between .Ltmp1582 and .Ltmp1584
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1584-.Lfunc_begin0        # >> Call Site 596 <<
	.uleb128 .Ltmp1585-.Ltmp1584            #   Call between .Ltmp1584 and .Ltmp1585
	.uleb128 .Ltmp1586-.Lfunc_begin0        #     jumps to .Ltmp1586
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1587-.Lfunc_begin0        # >> Call Site 597 <<
	.uleb128 .Ltmp1590-.Ltmp1587            #   Call between .Ltmp1587 and .Ltmp1590
	.uleb128 .Ltmp1591-.Lfunc_begin0        #     jumps to .Ltmp1591
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1590-.Lfunc_begin0        # >> Call Site 598 <<
	.uleb128 .Ltmp1592-.Ltmp1590            #   Call between .Ltmp1590 and .Ltmp1592
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1592-.Lfunc_begin0        # >> Call Site 599 <<
	.uleb128 .Ltmp1593-.Ltmp1592            #   Call between .Ltmp1592 and .Ltmp1593
	.uleb128 .Ltmp1594-.Lfunc_begin0        #     jumps to .Ltmp1594
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1595-.Lfunc_begin0        # >> Call Site 600 <<
	.uleb128 .Ltmp1598-.Ltmp1595            #   Call between .Ltmp1595 and .Ltmp1598
	.uleb128 .Ltmp1599-.Lfunc_begin0        #     jumps to .Ltmp1599
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1598-.Lfunc_begin0        # >> Call Site 601 <<
	.uleb128 .Ltmp1600-.Ltmp1598            #   Call between .Ltmp1598 and .Ltmp1600
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1600-.Lfunc_begin0        # >> Call Site 602 <<
	.uleb128 .Ltmp1601-.Ltmp1600            #   Call between .Ltmp1600 and .Ltmp1601
	.uleb128 .Ltmp1602-.Lfunc_begin0        #     jumps to .Ltmp1602
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1603-.Lfunc_begin0        # >> Call Site 603 <<
	.uleb128 .Ltmp1606-.Ltmp1603            #   Call between .Ltmp1603 and .Ltmp1606
	.uleb128 .Ltmp1607-.Lfunc_begin0        #     jumps to .Ltmp1607
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1606-.Lfunc_begin0        # >> Call Site 604 <<
	.uleb128 .Ltmp1608-.Ltmp1606            #   Call between .Ltmp1606 and .Ltmp1608
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1608-.Lfunc_begin0        # >> Call Site 605 <<
	.uleb128 .Ltmp1609-.Ltmp1608            #   Call between .Ltmp1608 and .Ltmp1609
	.uleb128 .Ltmp1610-.Lfunc_begin0        #     jumps to .Ltmp1610
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1611-.Lfunc_begin0        # >> Call Site 606 <<
	.uleb128 .Ltmp1614-.Ltmp1611            #   Call between .Ltmp1611 and .Ltmp1614
	.uleb128 .Ltmp1615-.Lfunc_begin0        #     jumps to .Ltmp1615
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1614-.Lfunc_begin0        # >> Call Site 607 <<
	.uleb128 .Ltmp1616-.Ltmp1614            #   Call between .Ltmp1614 and .Ltmp1616
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1616-.Lfunc_begin0        # >> Call Site 608 <<
	.uleb128 .Ltmp1617-.Ltmp1616            #   Call between .Ltmp1616 and .Ltmp1617
	.uleb128 .Ltmp1618-.Lfunc_begin0        #     jumps to .Ltmp1618
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1619-.Lfunc_begin0        # >> Call Site 609 <<
	.uleb128 .Ltmp1622-.Ltmp1619            #   Call between .Ltmp1619 and .Ltmp1622
	.uleb128 .Ltmp1623-.Lfunc_begin0        #     jumps to .Ltmp1623
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1622-.Lfunc_begin0        # >> Call Site 610 <<
	.uleb128 .Ltmp1624-.Ltmp1622            #   Call between .Ltmp1622 and .Ltmp1624
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1624-.Lfunc_begin0        # >> Call Site 611 <<
	.uleb128 .Ltmp1625-.Ltmp1624            #   Call between .Ltmp1624 and .Ltmp1625
	.uleb128 .Ltmp1626-.Lfunc_begin0        #     jumps to .Ltmp1626
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1627-.Lfunc_begin0        # >> Call Site 612 <<
	.uleb128 .Ltmp1630-.Ltmp1627            #   Call between .Ltmp1627 and .Ltmp1630
	.uleb128 .Ltmp1631-.Lfunc_begin0        #     jumps to .Ltmp1631
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1630-.Lfunc_begin0        # >> Call Site 613 <<
	.uleb128 .Ltmp1632-.Ltmp1630            #   Call between .Ltmp1630 and .Ltmp1632
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1632-.Lfunc_begin0        # >> Call Site 614 <<
	.uleb128 .Ltmp1633-.Ltmp1632            #   Call between .Ltmp1632 and .Ltmp1633
	.uleb128 .Ltmp1634-.Lfunc_begin0        #     jumps to .Ltmp1634
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1635-.Lfunc_begin0        # >> Call Site 615 <<
	.uleb128 .Ltmp1638-.Ltmp1635            #   Call between .Ltmp1635 and .Ltmp1638
	.uleb128 .Ltmp1639-.Lfunc_begin0        #     jumps to .Ltmp1639
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1638-.Lfunc_begin0        # >> Call Site 616 <<
	.uleb128 .Ltmp1640-.Ltmp1638            #   Call between .Ltmp1638 and .Ltmp1640
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1640-.Lfunc_begin0        # >> Call Site 617 <<
	.uleb128 .Ltmp1641-.Ltmp1640            #   Call between .Ltmp1640 and .Ltmp1641
	.uleb128 .Ltmp1642-.Lfunc_begin0        #     jumps to .Ltmp1642
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1643-.Lfunc_begin0        # >> Call Site 618 <<
	.uleb128 .Ltmp1646-.Ltmp1643            #   Call between .Ltmp1643 and .Ltmp1646
	.uleb128 .Ltmp1647-.Lfunc_begin0        #     jumps to .Ltmp1647
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1646-.Lfunc_begin0        # >> Call Site 619 <<
	.uleb128 .Ltmp1648-.Ltmp1646            #   Call between .Ltmp1646 and .Ltmp1648
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1648-.Lfunc_begin0        # >> Call Site 620 <<
	.uleb128 .Ltmp1649-.Ltmp1648            #   Call between .Ltmp1648 and .Ltmp1649
	.uleb128 .Ltmp1650-.Lfunc_begin0        #     jumps to .Ltmp1650
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1651-.Lfunc_begin0        # >> Call Site 621 <<
	.uleb128 .Ltmp1654-.Ltmp1651            #   Call between .Ltmp1651 and .Ltmp1654
	.uleb128 .Ltmp1655-.Lfunc_begin0        #     jumps to .Ltmp1655
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1654-.Lfunc_begin0        # >> Call Site 622 <<
	.uleb128 .Ltmp1656-.Ltmp1654            #   Call between .Ltmp1654 and .Ltmp1656
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1656-.Lfunc_begin0        # >> Call Site 623 <<
	.uleb128 .Ltmp1657-.Ltmp1656            #   Call between .Ltmp1656 and .Ltmp1657
	.uleb128 .Ltmp1658-.Lfunc_begin0        #     jumps to .Ltmp1658
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1659-.Lfunc_begin0        # >> Call Site 624 <<
	.uleb128 .Ltmp1662-.Ltmp1659            #   Call between .Ltmp1659 and .Ltmp1662
	.uleb128 .Ltmp1663-.Lfunc_begin0        #     jumps to .Ltmp1663
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1662-.Lfunc_begin0        # >> Call Site 625 <<
	.uleb128 .Ltmp1664-.Ltmp1662            #   Call between .Ltmp1662 and .Ltmp1664
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1664-.Lfunc_begin0        # >> Call Site 626 <<
	.uleb128 .Ltmp1665-.Ltmp1664            #   Call between .Ltmp1664 and .Ltmp1665
	.uleb128 .Ltmp1666-.Lfunc_begin0        #     jumps to .Ltmp1666
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1667-.Lfunc_begin0        # >> Call Site 627 <<
	.uleb128 .Ltmp1670-.Ltmp1667            #   Call between .Ltmp1667 and .Ltmp1670
	.uleb128 .Ltmp1671-.Lfunc_begin0        #     jumps to .Ltmp1671
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1670-.Lfunc_begin0        # >> Call Site 628 <<
	.uleb128 .Ltmp1672-.Ltmp1670            #   Call between .Ltmp1670 and .Ltmp1672
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1672-.Lfunc_begin0        # >> Call Site 629 <<
	.uleb128 .Ltmp1673-.Ltmp1672            #   Call between .Ltmp1672 and .Ltmp1673
	.uleb128 .Ltmp1674-.Lfunc_begin0        #     jumps to .Ltmp1674
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1675-.Lfunc_begin0        # >> Call Site 630 <<
	.uleb128 .Ltmp1678-.Ltmp1675            #   Call between .Ltmp1675 and .Ltmp1678
	.uleb128 .Ltmp1679-.Lfunc_begin0        #     jumps to .Ltmp1679
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1678-.Lfunc_begin0        # >> Call Site 631 <<
	.uleb128 .Ltmp1680-.Ltmp1678            #   Call between .Ltmp1678 and .Ltmp1680
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1680-.Lfunc_begin0        # >> Call Site 632 <<
	.uleb128 .Ltmp1681-.Ltmp1680            #   Call between .Ltmp1680 and .Ltmp1681
	.uleb128 .Ltmp1682-.Lfunc_begin0        #     jumps to .Ltmp1682
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1683-.Lfunc_begin0        # >> Call Site 633 <<
	.uleb128 .Ltmp1686-.Ltmp1683            #   Call between .Ltmp1683 and .Ltmp1686
	.uleb128 .Ltmp1687-.Lfunc_begin0        #     jumps to .Ltmp1687
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1686-.Lfunc_begin0        # >> Call Site 634 <<
	.uleb128 .Ltmp1688-.Ltmp1686            #   Call between .Ltmp1686 and .Ltmp1688
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1688-.Lfunc_begin0        # >> Call Site 635 <<
	.uleb128 .Ltmp1689-.Ltmp1688            #   Call between .Ltmp1688 and .Ltmp1689
	.uleb128 .Ltmp1690-.Lfunc_begin0        #     jumps to .Ltmp1690
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1691-.Lfunc_begin0        # >> Call Site 636 <<
	.uleb128 .Ltmp1694-.Ltmp1691            #   Call between .Ltmp1691 and .Ltmp1694
	.uleb128 .Ltmp1695-.Lfunc_begin0        #     jumps to .Ltmp1695
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1694-.Lfunc_begin0        # >> Call Site 637 <<
	.uleb128 .Ltmp1696-.Ltmp1694            #   Call between .Ltmp1694 and .Ltmp1696
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1696-.Lfunc_begin0        # >> Call Site 638 <<
	.uleb128 .Ltmp1697-.Ltmp1696            #   Call between .Ltmp1696 and .Ltmp1697
	.uleb128 .Ltmp1698-.Lfunc_begin0        #     jumps to .Ltmp1698
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1699-.Lfunc_begin0        # >> Call Site 639 <<
	.uleb128 .Ltmp1702-.Ltmp1699            #   Call between .Ltmp1699 and .Ltmp1702
	.uleb128 .Ltmp1703-.Lfunc_begin0        #     jumps to .Ltmp1703
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1702-.Lfunc_begin0        # >> Call Site 640 <<
	.uleb128 .Ltmp1704-.Ltmp1702            #   Call between .Ltmp1702 and .Ltmp1704
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1704-.Lfunc_begin0        # >> Call Site 641 <<
	.uleb128 .Ltmp1705-.Ltmp1704            #   Call between .Ltmp1704 and .Ltmp1705
	.uleb128 .Ltmp1706-.Lfunc_begin0        #     jumps to .Ltmp1706
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1707-.Lfunc_begin0        # >> Call Site 642 <<
	.uleb128 .Ltmp1710-.Ltmp1707            #   Call between .Ltmp1707 and .Ltmp1710
	.uleb128 .Ltmp1711-.Lfunc_begin0        #     jumps to .Ltmp1711
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1710-.Lfunc_begin0        # >> Call Site 643 <<
	.uleb128 .Ltmp1712-.Ltmp1710            #   Call between .Ltmp1710 and .Ltmp1712
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1712-.Lfunc_begin0        # >> Call Site 644 <<
	.uleb128 .Ltmp1713-.Ltmp1712            #   Call between .Ltmp1712 and .Ltmp1713
	.uleb128 .Ltmp1714-.Lfunc_begin0        #     jumps to .Ltmp1714
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1715-.Lfunc_begin0        # >> Call Site 645 <<
	.uleb128 .Ltmp1718-.Ltmp1715            #   Call between .Ltmp1715 and .Ltmp1718
	.uleb128 .Ltmp1719-.Lfunc_begin0        #     jumps to .Ltmp1719
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1718-.Lfunc_begin0        # >> Call Site 646 <<
	.uleb128 .Ltmp1720-.Ltmp1718            #   Call between .Ltmp1718 and .Ltmp1720
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1720-.Lfunc_begin0        # >> Call Site 647 <<
	.uleb128 .Ltmp1721-.Ltmp1720            #   Call between .Ltmp1720 and .Ltmp1721
	.uleb128 .Ltmp1722-.Lfunc_begin0        #     jumps to .Ltmp1722
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1723-.Lfunc_begin0        # >> Call Site 648 <<
	.uleb128 .Ltmp1726-.Ltmp1723            #   Call between .Ltmp1723 and .Ltmp1726
	.uleb128 .Ltmp1727-.Lfunc_begin0        #     jumps to .Ltmp1727
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1726-.Lfunc_begin0        # >> Call Site 649 <<
	.uleb128 .Ltmp1728-.Ltmp1726            #   Call between .Ltmp1726 and .Ltmp1728
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1728-.Lfunc_begin0        # >> Call Site 650 <<
	.uleb128 .Ltmp1729-.Ltmp1728            #   Call between .Ltmp1728 and .Ltmp1729
	.uleb128 .Ltmp1730-.Lfunc_begin0        #     jumps to .Ltmp1730
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1731-.Lfunc_begin0        # >> Call Site 651 <<
	.uleb128 .Ltmp1734-.Ltmp1731            #   Call between .Ltmp1731 and .Ltmp1734
	.uleb128 .Ltmp1735-.Lfunc_begin0        #     jumps to .Ltmp1735
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1734-.Lfunc_begin0        # >> Call Site 652 <<
	.uleb128 .Ltmp1736-.Ltmp1734            #   Call between .Ltmp1734 and .Ltmp1736
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1736-.Lfunc_begin0        # >> Call Site 653 <<
	.uleb128 .Ltmp1737-.Ltmp1736            #   Call between .Ltmp1736 and .Ltmp1737
	.uleb128 .Ltmp1738-.Lfunc_begin0        #     jumps to .Ltmp1738
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1739-.Lfunc_begin0        # >> Call Site 654 <<
	.uleb128 .Ltmp1742-.Ltmp1739            #   Call between .Ltmp1739 and .Ltmp1742
	.uleb128 .Ltmp1743-.Lfunc_begin0        #     jumps to .Ltmp1743
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1742-.Lfunc_begin0        # >> Call Site 655 <<
	.uleb128 .Ltmp1744-.Ltmp1742            #   Call between .Ltmp1742 and .Ltmp1744
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1744-.Lfunc_begin0        # >> Call Site 656 <<
	.uleb128 .Ltmp1745-.Ltmp1744            #   Call between .Ltmp1744 and .Ltmp1745
	.uleb128 .Ltmp1746-.Lfunc_begin0        #     jumps to .Ltmp1746
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1747-.Lfunc_begin0        # >> Call Site 657 <<
	.uleb128 .Ltmp1750-.Ltmp1747            #   Call between .Ltmp1747 and .Ltmp1750
	.uleb128 .Ltmp1751-.Lfunc_begin0        #     jumps to .Ltmp1751
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1750-.Lfunc_begin0        # >> Call Site 658 <<
	.uleb128 .Ltmp1752-.Ltmp1750            #   Call between .Ltmp1750 and .Ltmp1752
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1752-.Lfunc_begin0        # >> Call Site 659 <<
	.uleb128 .Ltmp1753-.Ltmp1752            #   Call between .Ltmp1752 and .Ltmp1753
	.uleb128 .Ltmp1754-.Lfunc_begin0        #     jumps to .Ltmp1754
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1755-.Lfunc_begin0        # >> Call Site 660 <<
	.uleb128 .Ltmp1758-.Ltmp1755            #   Call between .Ltmp1755 and .Ltmp1758
	.uleb128 .Ltmp1759-.Lfunc_begin0        #     jumps to .Ltmp1759
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1758-.Lfunc_begin0        # >> Call Site 661 <<
	.uleb128 .Ltmp1760-.Ltmp1758            #   Call between .Ltmp1758 and .Ltmp1760
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1760-.Lfunc_begin0        # >> Call Site 662 <<
	.uleb128 .Ltmp1761-.Ltmp1760            #   Call between .Ltmp1760 and .Ltmp1761
	.uleb128 .Ltmp1762-.Lfunc_begin0        #     jumps to .Ltmp1762
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1763-.Lfunc_begin0        # >> Call Site 663 <<
	.uleb128 .Ltmp1766-.Ltmp1763            #   Call between .Ltmp1763 and .Ltmp1766
	.uleb128 .Ltmp1767-.Lfunc_begin0        #     jumps to .Ltmp1767
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1766-.Lfunc_begin0        # >> Call Site 664 <<
	.uleb128 .Ltmp1768-.Ltmp1766            #   Call between .Ltmp1766 and .Ltmp1768
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1768-.Lfunc_begin0        # >> Call Site 665 <<
	.uleb128 .Ltmp1769-.Ltmp1768            #   Call between .Ltmp1768 and .Ltmp1769
	.uleb128 .Ltmp1770-.Lfunc_begin0        #     jumps to .Ltmp1770
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1771-.Lfunc_begin0        # >> Call Site 666 <<
	.uleb128 .Ltmp1774-.Ltmp1771            #   Call between .Ltmp1771 and .Ltmp1774
	.uleb128 .Ltmp1775-.Lfunc_begin0        #     jumps to .Ltmp1775
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1774-.Lfunc_begin0        # >> Call Site 667 <<
	.uleb128 .Ltmp1776-.Ltmp1774            #   Call between .Ltmp1774 and .Ltmp1776
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1776-.Lfunc_begin0        # >> Call Site 668 <<
	.uleb128 .Ltmp1777-.Ltmp1776            #   Call between .Ltmp1776 and .Ltmp1777
	.uleb128 .Ltmp1778-.Lfunc_begin0        #     jumps to .Ltmp1778
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1779-.Lfunc_begin0        # >> Call Site 669 <<
	.uleb128 .Ltmp1782-.Ltmp1779            #   Call between .Ltmp1779 and .Ltmp1782
	.uleb128 .Ltmp1783-.Lfunc_begin0        #     jumps to .Ltmp1783
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1782-.Lfunc_begin0        # >> Call Site 670 <<
	.uleb128 .Ltmp1784-.Ltmp1782            #   Call between .Ltmp1782 and .Ltmp1784
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1784-.Lfunc_begin0        # >> Call Site 671 <<
	.uleb128 .Ltmp1785-.Ltmp1784            #   Call between .Ltmp1784 and .Ltmp1785
	.uleb128 .Ltmp1786-.Lfunc_begin0        #     jumps to .Ltmp1786
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1787-.Lfunc_begin0        # >> Call Site 672 <<
	.uleb128 .Ltmp1790-.Ltmp1787            #   Call between .Ltmp1787 and .Ltmp1790
	.uleb128 .Ltmp1791-.Lfunc_begin0        #     jumps to .Ltmp1791
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1790-.Lfunc_begin0        # >> Call Site 673 <<
	.uleb128 .Ltmp1792-.Ltmp1790            #   Call between .Ltmp1790 and .Ltmp1792
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1792-.Lfunc_begin0        # >> Call Site 674 <<
	.uleb128 .Ltmp1793-.Ltmp1792            #   Call between .Ltmp1792 and .Ltmp1793
	.uleb128 .Ltmp1794-.Lfunc_begin0        #     jumps to .Ltmp1794
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1795-.Lfunc_begin0        # >> Call Site 675 <<
	.uleb128 .Ltmp1798-.Ltmp1795            #   Call between .Ltmp1795 and .Ltmp1798
	.uleb128 .Ltmp1799-.Lfunc_begin0        #     jumps to .Ltmp1799
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1798-.Lfunc_begin0        # >> Call Site 676 <<
	.uleb128 .Ltmp1800-.Ltmp1798            #   Call between .Ltmp1798 and .Ltmp1800
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1800-.Lfunc_begin0        # >> Call Site 677 <<
	.uleb128 .Ltmp1801-.Ltmp1800            #   Call between .Ltmp1800 and .Ltmp1801
	.uleb128 .Ltmp1802-.Lfunc_begin0        #     jumps to .Ltmp1802
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1803-.Lfunc_begin0        # >> Call Site 678 <<
	.uleb128 .Ltmp1806-.Ltmp1803            #   Call between .Ltmp1803 and .Ltmp1806
	.uleb128 .Ltmp1807-.Lfunc_begin0        #     jumps to .Ltmp1807
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1806-.Lfunc_begin0        # >> Call Site 679 <<
	.uleb128 .Ltmp1808-.Ltmp1806            #   Call between .Ltmp1806 and .Ltmp1808
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1808-.Lfunc_begin0        # >> Call Site 680 <<
	.uleb128 .Ltmp1809-.Ltmp1808            #   Call between .Ltmp1808 and .Ltmp1809
	.uleb128 .Ltmp1810-.Lfunc_begin0        #     jumps to .Ltmp1810
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1811-.Lfunc_begin0        # >> Call Site 681 <<
	.uleb128 .Ltmp1814-.Ltmp1811            #   Call between .Ltmp1811 and .Ltmp1814
	.uleb128 .Ltmp1815-.Lfunc_begin0        #     jumps to .Ltmp1815
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1814-.Lfunc_begin0        # >> Call Site 682 <<
	.uleb128 .Ltmp1816-.Ltmp1814            #   Call between .Ltmp1814 and .Ltmp1816
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1816-.Lfunc_begin0        # >> Call Site 683 <<
	.uleb128 .Ltmp1817-.Ltmp1816            #   Call between .Ltmp1816 and .Ltmp1817
	.uleb128 .Ltmp1818-.Lfunc_begin0        #     jumps to .Ltmp1818
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1819-.Lfunc_begin0        # >> Call Site 684 <<
	.uleb128 .Ltmp1822-.Ltmp1819            #   Call between .Ltmp1819 and .Ltmp1822
	.uleb128 .Ltmp1823-.Lfunc_begin0        #     jumps to .Ltmp1823
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1822-.Lfunc_begin0        # >> Call Site 685 <<
	.uleb128 .Ltmp1824-.Ltmp1822            #   Call between .Ltmp1822 and .Ltmp1824
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1824-.Lfunc_begin0        # >> Call Site 686 <<
	.uleb128 .Ltmp1825-.Ltmp1824            #   Call between .Ltmp1824 and .Ltmp1825
	.uleb128 .Ltmp1826-.Lfunc_begin0        #     jumps to .Ltmp1826
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1827-.Lfunc_begin0        # >> Call Site 687 <<
	.uleb128 .Ltmp1830-.Ltmp1827            #   Call between .Ltmp1827 and .Ltmp1830
	.uleb128 .Ltmp1831-.Lfunc_begin0        #     jumps to .Ltmp1831
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1830-.Lfunc_begin0        # >> Call Site 688 <<
	.uleb128 .Ltmp1832-.Ltmp1830            #   Call between .Ltmp1830 and .Ltmp1832
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1832-.Lfunc_begin0        # >> Call Site 689 <<
	.uleb128 .Ltmp1833-.Ltmp1832            #   Call between .Ltmp1832 and .Ltmp1833
	.uleb128 .Ltmp1834-.Lfunc_begin0        #     jumps to .Ltmp1834
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1835-.Lfunc_begin0        # >> Call Site 690 <<
	.uleb128 .Ltmp1838-.Ltmp1835            #   Call between .Ltmp1835 and .Ltmp1838
	.uleb128 .Ltmp1839-.Lfunc_begin0        #     jumps to .Ltmp1839
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1838-.Lfunc_begin0        # >> Call Site 691 <<
	.uleb128 .Ltmp1840-.Ltmp1838            #   Call between .Ltmp1838 and .Ltmp1840
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1840-.Lfunc_begin0        # >> Call Site 692 <<
	.uleb128 .Ltmp1841-.Ltmp1840            #   Call between .Ltmp1840 and .Ltmp1841
	.uleb128 .Ltmp1842-.Lfunc_begin0        #     jumps to .Ltmp1842
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1843-.Lfunc_begin0        # >> Call Site 693 <<
	.uleb128 .Ltmp1846-.Ltmp1843            #   Call between .Ltmp1843 and .Ltmp1846
	.uleb128 .Ltmp1847-.Lfunc_begin0        #     jumps to .Ltmp1847
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1846-.Lfunc_begin0        # >> Call Site 694 <<
	.uleb128 .Ltmp1848-.Ltmp1846            #   Call between .Ltmp1846 and .Ltmp1848
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1848-.Lfunc_begin0        # >> Call Site 695 <<
	.uleb128 .Ltmp1849-.Ltmp1848            #   Call between .Ltmp1848 and .Ltmp1849
	.uleb128 .Ltmp1850-.Lfunc_begin0        #     jumps to .Ltmp1850
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1851-.Lfunc_begin0        # >> Call Site 696 <<
	.uleb128 .Ltmp1854-.Ltmp1851            #   Call between .Ltmp1851 and .Ltmp1854
	.uleb128 .Ltmp1855-.Lfunc_begin0        #     jumps to .Ltmp1855
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1854-.Lfunc_begin0        # >> Call Site 697 <<
	.uleb128 .Ltmp1856-.Ltmp1854            #   Call between .Ltmp1854 and .Ltmp1856
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1856-.Lfunc_begin0        # >> Call Site 698 <<
	.uleb128 .Ltmp1857-.Ltmp1856            #   Call between .Ltmp1856 and .Ltmp1857
	.uleb128 .Ltmp1858-.Lfunc_begin0        #     jumps to .Ltmp1858
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1859-.Lfunc_begin0        # >> Call Site 699 <<
	.uleb128 .Ltmp1862-.Ltmp1859            #   Call between .Ltmp1859 and .Ltmp1862
	.uleb128 .Ltmp1863-.Lfunc_begin0        #     jumps to .Ltmp1863
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1862-.Lfunc_begin0        # >> Call Site 700 <<
	.uleb128 .Ltmp1864-.Ltmp1862            #   Call between .Ltmp1862 and .Ltmp1864
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1864-.Lfunc_begin0        # >> Call Site 701 <<
	.uleb128 .Ltmp1865-.Ltmp1864            #   Call between .Ltmp1864 and .Ltmp1865
	.uleb128 .Ltmp1866-.Lfunc_begin0        #     jumps to .Ltmp1866
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1867-.Lfunc_begin0        # >> Call Site 702 <<
	.uleb128 .Ltmp1870-.Ltmp1867            #   Call between .Ltmp1867 and .Ltmp1870
	.uleb128 .Ltmp1871-.Lfunc_begin0        #     jumps to .Ltmp1871
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1870-.Lfunc_begin0        # >> Call Site 703 <<
	.uleb128 .Ltmp1872-.Ltmp1870            #   Call between .Ltmp1870 and .Ltmp1872
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1872-.Lfunc_begin0        # >> Call Site 704 <<
	.uleb128 .Ltmp1873-.Ltmp1872            #   Call between .Ltmp1872 and .Ltmp1873
	.uleb128 .Ltmp1874-.Lfunc_begin0        #     jumps to .Ltmp1874
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1875-.Lfunc_begin0        # >> Call Site 705 <<
	.uleb128 .Ltmp1878-.Ltmp1875            #   Call between .Ltmp1875 and .Ltmp1878
	.uleb128 .Ltmp1879-.Lfunc_begin0        #     jumps to .Ltmp1879
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1878-.Lfunc_begin0        # >> Call Site 706 <<
	.uleb128 .Ltmp1880-.Ltmp1878            #   Call between .Ltmp1878 and .Ltmp1880
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1880-.Lfunc_begin0        # >> Call Site 707 <<
	.uleb128 .Ltmp1881-.Ltmp1880            #   Call between .Ltmp1880 and .Ltmp1881
	.uleb128 .Ltmp1882-.Lfunc_begin0        #     jumps to .Ltmp1882
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1883-.Lfunc_begin0        # >> Call Site 708 <<
	.uleb128 .Ltmp1886-.Ltmp1883            #   Call between .Ltmp1883 and .Ltmp1886
	.uleb128 .Ltmp1887-.Lfunc_begin0        #     jumps to .Ltmp1887
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1886-.Lfunc_begin0        # >> Call Site 709 <<
	.uleb128 .Ltmp1888-.Ltmp1886            #   Call between .Ltmp1886 and .Ltmp1888
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1888-.Lfunc_begin0        # >> Call Site 710 <<
	.uleb128 .Ltmp1889-.Ltmp1888            #   Call between .Ltmp1888 and .Ltmp1889
	.uleb128 .Ltmp1890-.Lfunc_begin0        #     jumps to .Ltmp1890
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1891-.Lfunc_begin0        # >> Call Site 711 <<
	.uleb128 .Ltmp1894-.Ltmp1891            #   Call between .Ltmp1891 and .Ltmp1894
	.uleb128 .Ltmp1895-.Lfunc_begin0        #     jumps to .Ltmp1895
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1894-.Lfunc_begin0        # >> Call Site 712 <<
	.uleb128 .Ltmp1896-.Ltmp1894            #   Call between .Ltmp1894 and .Ltmp1896
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1896-.Lfunc_begin0        # >> Call Site 713 <<
	.uleb128 .Ltmp1897-.Ltmp1896            #   Call between .Ltmp1896 and .Ltmp1897
	.uleb128 .Ltmp1898-.Lfunc_begin0        #     jumps to .Ltmp1898
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1899-.Lfunc_begin0        # >> Call Site 714 <<
	.uleb128 .Ltmp1902-.Ltmp1899            #   Call between .Ltmp1899 and .Ltmp1902
	.uleb128 .Ltmp1903-.Lfunc_begin0        #     jumps to .Ltmp1903
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1902-.Lfunc_begin0        # >> Call Site 715 <<
	.uleb128 .Ltmp1904-.Ltmp1902            #   Call between .Ltmp1902 and .Ltmp1904
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1904-.Lfunc_begin0        # >> Call Site 716 <<
	.uleb128 .Ltmp1905-.Ltmp1904            #   Call between .Ltmp1904 and .Ltmp1905
	.uleb128 .Ltmp1906-.Lfunc_begin0        #     jumps to .Ltmp1906
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1907-.Lfunc_begin0        # >> Call Site 717 <<
	.uleb128 .Ltmp1910-.Ltmp1907            #   Call between .Ltmp1907 and .Ltmp1910
	.uleb128 .Ltmp1911-.Lfunc_begin0        #     jumps to .Ltmp1911
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1910-.Lfunc_begin0        # >> Call Site 718 <<
	.uleb128 .Ltmp1912-.Ltmp1910            #   Call between .Ltmp1910 and .Ltmp1912
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1912-.Lfunc_begin0        # >> Call Site 719 <<
	.uleb128 .Ltmp1913-.Ltmp1912            #   Call between .Ltmp1912 and .Ltmp1913
	.uleb128 .Ltmp1914-.Lfunc_begin0        #     jumps to .Ltmp1914
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1915-.Lfunc_begin0        # >> Call Site 720 <<
	.uleb128 .Ltmp1918-.Ltmp1915            #   Call between .Ltmp1915 and .Ltmp1918
	.uleb128 .Ltmp1919-.Lfunc_begin0        #     jumps to .Ltmp1919
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1918-.Lfunc_begin0        # >> Call Site 721 <<
	.uleb128 .Ltmp1920-.Ltmp1918            #   Call between .Ltmp1918 and .Ltmp1920
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1920-.Lfunc_begin0        # >> Call Site 722 <<
	.uleb128 .Ltmp1921-.Ltmp1920            #   Call between .Ltmp1920 and .Ltmp1921
	.uleb128 .Ltmp1922-.Lfunc_begin0        #     jumps to .Ltmp1922
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1923-.Lfunc_begin0        # >> Call Site 723 <<
	.uleb128 .Ltmp1926-.Ltmp1923            #   Call between .Ltmp1923 and .Ltmp1926
	.uleb128 .Ltmp1927-.Lfunc_begin0        #     jumps to .Ltmp1927
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1926-.Lfunc_begin0        # >> Call Site 724 <<
	.uleb128 .Ltmp1928-.Ltmp1926            #   Call between .Ltmp1926 and .Ltmp1928
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1928-.Lfunc_begin0        # >> Call Site 725 <<
	.uleb128 .Ltmp1929-.Ltmp1928            #   Call between .Ltmp1928 and .Ltmp1929
	.uleb128 .Ltmp1930-.Lfunc_begin0        #     jumps to .Ltmp1930
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1931-.Lfunc_begin0        # >> Call Site 726 <<
	.uleb128 .Ltmp1934-.Ltmp1931            #   Call between .Ltmp1931 and .Ltmp1934
	.uleb128 .Ltmp1935-.Lfunc_begin0        #     jumps to .Ltmp1935
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1934-.Lfunc_begin0        # >> Call Site 727 <<
	.uleb128 .Ltmp1936-.Ltmp1934            #   Call between .Ltmp1934 and .Ltmp1936
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1936-.Lfunc_begin0        # >> Call Site 728 <<
	.uleb128 .Ltmp1937-.Ltmp1936            #   Call between .Ltmp1936 and .Ltmp1937
	.uleb128 .Ltmp1938-.Lfunc_begin0        #     jumps to .Ltmp1938
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1939-.Lfunc_begin0        # >> Call Site 729 <<
	.uleb128 .Ltmp1942-.Ltmp1939            #   Call between .Ltmp1939 and .Ltmp1942
	.uleb128 .Ltmp1943-.Lfunc_begin0        #     jumps to .Ltmp1943
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1942-.Lfunc_begin0        # >> Call Site 730 <<
	.uleb128 .Ltmp1944-.Ltmp1942            #   Call between .Ltmp1942 and .Ltmp1944
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1944-.Lfunc_begin0        # >> Call Site 731 <<
	.uleb128 .Ltmp1945-.Ltmp1944            #   Call between .Ltmp1944 and .Ltmp1945
	.uleb128 .Ltmp1946-.Lfunc_begin0        #     jumps to .Ltmp1946
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1947-.Lfunc_begin0        # >> Call Site 732 <<
	.uleb128 .Ltmp1950-.Ltmp1947            #   Call between .Ltmp1947 and .Ltmp1950
	.uleb128 .Ltmp1951-.Lfunc_begin0        #     jumps to .Ltmp1951
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1950-.Lfunc_begin0        # >> Call Site 733 <<
	.uleb128 .Ltmp1952-.Ltmp1950            #   Call between .Ltmp1950 and .Ltmp1952
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1952-.Lfunc_begin0        # >> Call Site 734 <<
	.uleb128 .Ltmp1953-.Ltmp1952            #   Call between .Ltmp1952 and .Ltmp1953
	.uleb128 .Ltmp1954-.Lfunc_begin0        #     jumps to .Ltmp1954
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1955-.Lfunc_begin0        # >> Call Site 735 <<
	.uleb128 .Ltmp1958-.Ltmp1955            #   Call between .Ltmp1955 and .Ltmp1958
	.uleb128 .Ltmp1959-.Lfunc_begin0        #     jumps to .Ltmp1959
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1958-.Lfunc_begin0        # >> Call Site 736 <<
	.uleb128 .Ltmp1960-.Ltmp1958            #   Call between .Ltmp1958 and .Ltmp1960
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1960-.Lfunc_begin0        # >> Call Site 737 <<
	.uleb128 .Ltmp1961-.Ltmp1960            #   Call between .Ltmp1960 and .Ltmp1961
	.uleb128 .Ltmp1962-.Lfunc_begin0        #     jumps to .Ltmp1962
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1963-.Lfunc_begin0        # >> Call Site 738 <<
	.uleb128 .Ltmp1966-.Ltmp1963            #   Call between .Ltmp1963 and .Ltmp1966
	.uleb128 .Ltmp1967-.Lfunc_begin0        #     jumps to .Ltmp1967
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1966-.Lfunc_begin0        # >> Call Site 739 <<
	.uleb128 .Ltmp1968-.Ltmp1966            #   Call between .Ltmp1966 and .Ltmp1968
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1968-.Lfunc_begin0        # >> Call Site 740 <<
	.uleb128 .Ltmp1969-.Ltmp1968            #   Call between .Ltmp1968 and .Ltmp1969
	.uleb128 .Ltmp1970-.Lfunc_begin0        #     jumps to .Ltmp1970
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1971-.Lfunc_begin0        # >> Call Site 741 <<
	.uleb128 .Ltmp1974-.Ltmp1971            #   Call between .Ltmp1971 and .Ltmp1974
	.uleb128 .Ltmp1975-.Lfunc_begin0        #     jumps to .Ltmp1975
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1974-.Lfunc_begin0        # >> Call Site 742 <<
	.uleb128 .Ltmp1976-.Ltmp1974            #   Call between .Ltmp1974 and .Ltmp1976
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1976-.Lfunc_begin0        # >> Call Site 743 <<
	.uleb128 .Ltmp1977-.Ltmp1976            #   Call between .Ltmp1976 and .Ltmp1977
	.uleb128 .Ltmp1978-.Lfunc_begin0        #     jumps to .Ltmp1978
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1979-.Lfunc_begin0        # >> Call Site 744 <<
	.uleb128 .Ltmp1982-.Ltmp1979            #   Call between .Ltmp1979 and .Ltmp1982
	.uleb128 .Ltmp1983-.Lfunc_begin0        #     jumps to .Ltmp1983
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1982-.Lfunc_begin0        # >> Call Site 745 <<
	.uleb128 .Ltmp1984-.Ltmp1982            #   Call between .Ltmp1982 and .Ltmp1984
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1984-.Lfunc_begin0        # >> Call Site 746 <<
	.uleb128 .Ltmp1985-.Ltmp1984            #   Call between .Ltmp1984 and .Ltmp1985
	.uleb128 .Ltmp1986-.Lfunc_begin0        #     jumps to .Ltmp1986
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1987-.Lfunc_begin0        # >> Call Site 747 <<
	.uleb128 .Ltmp1990-.Ltmp1987            #   Call between .Ltmp1987 and .Ltmp1990
	.uleb128 .Ltmp1991-.Lfunc_begin0        #     jumps to .Ltmp1991
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1990-.Lfunc_begin0        # >> Call Site 748 <<
	.uleb128 .Ltmp1992-.Ltmp1990            #   Call between .Ltmp1990 and .Ltmp1992
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1992-.Lfunc_begin0        # >> Call Site 749 <<
	.uleb128 .Ltmp1993-.Ltmp1992            #   Call between .Ltmp1992 and .Ltmp1993
	.uleb128 .Ltmp1994-.Lfunc_begin0        #     jumps to .Ltmp1994
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1995-.Lfunc_begin0        # >> Call Site 750 <<
	.uleb128 .Ltmp1998-.Ltmp1995            #   Call between .Ltmp1995 and .Ltmp1998
	.uleb128 .Ltmp1999-.Lfunc_begin0        #     jumps to .Ltmp1999
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1998-.Lfunc_begin0        # >> Call Site 751 <<
	.uleb128 .Ltmp2000-.Ltmp1998            #   Call between .Ltmp1998 and .Ltmp2000
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2000-.Lfunc_begin0        # >> Call Site 752 <<
	.uleb128 .Ltmp2001-.Ltmp2000            #   Call between .Ltmp2000 and .Ltmp2001
	.uleb128 .Ltmp2002-.Lfunc_begin0        #     jumps to .Ltmp2002
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2003-.Lfunc_begin0        # >> Call Site 753 <<
	.uleb128 .Ltmp2006-.Ltmp2003            #   Call between .Ltmp2003 and .Ltmp2006
	.uleb128 .Ltmp2007-.Lfunc_begin0        #     jumps to .Ltmp2007
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2006-.Lfunc_begin0        # >> Call Site 754 <<
	.uleb128 .Ltmp2008-.Ltmp2006            #   Call between .Ltmp2006 and .Ltmp2008
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2008-.Lfunc_begin0        # >> Call Site 755 <<
	.uleb128 .Ltmp2009-.Ltmp2008            #   Call between .Ltmp2008 and .Ltmp2009
	.uleb128 .Ltmp2010-.Lfunc_begin0        #     jumps to .Ltmp2010
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2011-.Lfunc_begin0        # >> Call Site 756 <<
	.uleb128 .Ltmp2014-.Ltmp2011            #   Call between .Ltmp2011 and .Ltmp2014
	.uleb128 .Ltmp2015-.Lfunc_begin0        #     jumps to .Ltmp2015
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2014-.Lfunc_begin0        # >> Call Site 757 <<
	.uleb128 .Ltmp2016-.Ltmp2014            #   Call between .Ltmp2014 and .Ltmp2016
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2016-.Lfunc_begin0        # >> Call Site 758 <<
	.uleb128 .Ltmp2017-.Ltmp2016            #   Call between .Ltmp2016 and .Ltmp2017
	.uleb128 .Ltmp2018-.Lfunc_begin0        #     jumps to .Ltmp2018
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2019-.Lfunc_begin0        # >> Call Site 759 <<
	.uleb128 .Ltmp2022-.Ltmp2019            #   Call between .Ltmp2019 and .Ltmp2022
	.uleb128 .Ltmp2023-.Lfunc_begin0        #     jumps to .Ltmp2023
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2022-.Lfunc_begin0        # >> Call Site 760 <<
	.uleb128 .Ltmp2024-.Ltmp2022            #   Call between .Ltmp2022 and .Ltmp2024
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2024-.Lfunc_begin0        # >> Call Site 761 <<
	.uleb128 .Ltmp2025-.Ltmp2024            #   Call between .Ltmp2024 and .Ltmp2025
	.uleb128 .Ltmp2026-.Lfunc_begin0        #     jumps to .Ltmp2026
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2027-.Lfunc_begin0        # >> Call Site 762 <<
	.uleb128 .Ltmp2030-.Ltmp2027            #   Call between .Ltmp2027 and .Ltmp2030
	.uleb128 .Ltmp2031-.Lfunc_begin0        #     jumps to .Ltmp2031
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2030-.Lfunc_begin0        # >> Call Site 763 <<
	.uleb128 .Ltmp2032-.Ltmp2030            #   Call between .Ltmp2030 and .Ltmp2032
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2032-.Lfunc_begin0        # >> Call Site 764 <<
	.uleb128 .Ltmp2033-.Ltmp2032            #   Call between .Ltmp2032 and .Ltmp2033
	.uleb128 .Ltmp2034-.Lfunc_begin0        #     jumps to .Ltmp2034
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2035-.Lfunc_begin0        # >> Call Site 765 <<
	.uleb128 .Ltmp2038-.Ltmp2035            #   Call between .Ltmp2035 and .Ltmp2038
	.uleb128 .Ltmp2039-.Lfunc_begin0        #     jumps to .Ltmp2039
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2038-.Lfunc_begin0        # >> Call Site 766 <<
	.uleb128 .Ltmp2040-.Ltmp2038            #   Call between .Ltmp2038 and .Ltmp2040
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2040-.Lfunc_begin0        # >> Call Site 767 <<
	.uleb128 .Ltmp2041-.Ltmp2040            #   Call between .Ltmp2040 and .Ltmp2041
	.uleb128 .Ltmp2042-.Lfunc_begin0        #     jumps to .Ltmp2042
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2043-.Lfunc_begin0        # >> Call Site 768 <<
	.uleb128 .Ltmp2046-.Ltmp2043            #   Call between .Ltmp2043 and .Ltmp2046
	.uleb128 .Ltmp2047-.Lfunc_begin0        #     jumps to .Ltmp2047
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2046-.Lfunc_begin0        # >> Call Site 769 <<
	.uleb128 .Ltmp2048-.Ltmp2046            #   Call between .Ltmp2046 and .Ltmp2048
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2048-.Lfunc_begin0        # >> Call Site 770 <<
	.uleb128 .Ltmp2049-.Ltmp2048            #   Call between .Ltmp2048 and .Ltmp2049
	.uleb128 .Ltmp2050-.Lfunc_begin0        #     jumps to .Ltmp2050
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2051-.Lfunc_begin0        # >> Call Site 771 <<
	.uleb128 .Ltmp2054-.Ltmp2051            #   Call between .Ltmp2051 and .Ltmp2054
	.uleb128 .Ltmp2055-.Lfunc_begin0        #     jumps to .Ltmp2055
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2054-.Lfunc_begin0        # >> Call Site 772 <<
	.uleb128 .Ltmp2056-.Ltmp2054            #   Call between .Ltmp2054 and .Ltmp2056
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2056-.Lfunc_begin0        # >> Call Site 773 <<
	.uleb128 .Ltmp2057-.Ltmp2056            #   Call between .Ltmp2056 and .Ltmp2057
	.uleb128 .Ltmp2058-.Lfunc_begin0        #     jumps to .Ltmp2058
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2059-.Lfunc_begin0        # >> Call Site 774 <<
	.uleb128 .Ltmp2062-.Ltmp2059            #   Call between .Ltmp2059 and .Ltmp2062
	.uleb128 .Ltmp2063-.Lfunc_begin0        #     jumps to .Ltmp2063
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2062-.Lfunc_begin0        # >> Call Site 775 <<
	.uleb128 .Ltmp2064-.Ltmp2062            #   Call between .Ltmp2062 and .Ltmp2064
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2064-.Lfunc_begin0        # >> Call Site 776 <<
	.uleb128 .Ltmp2065-.Ltmp2064            #   Call between .Ltmp2064 and .Ltmp2065
	.uleb128 .Ltmp2066-.Lfunc_begin0        #     jumps to .Ltmp2066
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2067-.Lfunc_begin0        # >> Call Site 777 <<
	.uleb128 .Ltmp2070-.Ltmp2067            #   Call between .Ltmp2067 and .Ltmp2070
	.uleb128 .Ltmp2071-.Lfunc_begin0        #     jumps to .Ltmp2071
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2070-.Lfunc_begin0        # >> Call Site 778 <<
	.uleb128 .Ltmp2072-.Ltmp2070            #   Call between .Ltmp2070 and .Ltmp2072
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2072-.Lfunc_begin0        # >> Call Site 779 <<
	.uleb128 .Ltmp2073-.Ltmp2072            #   Call between .Ltmp2072 and .Ltmp2073
	.uleb128 .Ltmp2074-.Lfunc_begin0        #     jumps to .Ltmp2074
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2075-.Lfunc_begin0        # >> Call Site 780 <<
	.uleb128 .Ltmp2078-.Ltmp2075            #   Call between .Ltmp2075 and .Ltmp2078
	.uleb128 .Ltmp2079-.Lfunc_begin0        #     jumps to .Ltmp2079
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2078-.Lfunc_begin0        # >> Call Site 781 <<
	.uleb128 .Ltmp2080-.Ltmp2078            #   Call between .Ltmp2078 and .Ltmp2080
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2080-.Lfunc_begin0        # >> Call Site 782 <<
	.uleb128 .Ltmp2081-.Ltmp2080            #   Call between .Ltmp2080 and .Ltmp2081
	.uleb128 .Ltmp2082-.Lfunc_begin0        #     jumps to .Ltmp2082
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2083-.Lfunc_begin0        # >> Call Site 783 <<
	.uleb128 .Ltmp2086-.Ltmp2083            #   Call between .Ltmp2083 and .Ltmp2086
	.uleb128 .Ltmp2087-.Lfunc_begin0        #     jumps to .Ltmp2087
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2086-.Lfunc_begin0        # >> Call Site 784 <<
	.uleb128 .Ltmp2088-.Ltmp2086            #   Call between .Ltmp2086 and .Ltmp2088
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2088-.Lfunc_begin0        # >> Call Site 785 <<
	.uleb128 .Ltmp2089-.Ltmp2088            #   Call between .Ltmp2088 and .Ltmp2089
	.uleb128 .Ltmp2090-.Lfunc_begin0        #     jumps to .Ltmp2090
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2091-.Lfunc_begin0        # >> Call Site 786 <<
	.uleb128 .Ltmp2094-.Ltmp2091            #   Call between .Ltmp2091 and .Ltmp2094
	.uleb128 .Ltmp2095-.Lfunc_begin0        #     jumps to .Ltmp2095
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2094-.Lfunc_begin0        # >> Call Site 787 <<
	.uleb128 .Ltmp2096-.Ltmp2094            #   Call between .Ltmp2094 and .Ltmp2096
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2096-.Lfunc_begin0        # >> Call Site 788 <<
	.uleb128 .Ltmp2097-.Ltmp2096            #   Call between .Ltmp2096 and .Ltmp2097
	.uleb128 .Ltmp2098-.Lfunc_begin0        #     jumps to .Ltmp2098
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2099-.Lfunc_begin0        # >> Call Site 789 <<
	.uleb128 .Ltmp2102-.Ltmp2099            #   Call between .Ltmp2099 and .Ltmp2102
	.uleb128 .Ltmp2103-.Lfunc_begin0        #     jumps to .Ltmp2103
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2102-.Lfunc_begin0        # >> Call Site 790 <<
	.uleb128 .Ltmp2104-.Ltmp2102            #   Call between .Ltmp2102 and .Ltmp2104
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2104-.Lfunc_begin0        # >> Call Site 791 <<
	.uleb128 .Ltmp2105-.Ltmp2104            #   Call between .Ltmp2104 and .Ltmp2105
	.uleb128 .Ltmp2106-.Lfunc_begin0        #     jumps to .Ltmp2106
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2107-.Lfunc_begin0        # >> Call Site 792 <<
	.uleb128 .Ltmp2110-.Ltmp2107            #   Call between .Ltmp2107 and .Ltmp2110
	.uleb128 .Ltmp2111-.Lfunc_begin0        #     jumps to .Ltmp2111
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2110-.Lfunc_begin0        # >> Call Site 793 <<
	.uleb128 .Ltmp2112-.Ltmp2110            #   Call between .Ltmp2110 and .Ltmp2112
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2112-.Lfunc_begin0        # >> Call Site 794 <<
	.uleb128 .Ltmp2113-.Ltmp2112            #   Call between .Ltmp2112 and .Ltmp2113
	.uleb128 .Ltmp2114-.Lfunc_begin0        #     jumps to .Ltmp2114
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2115-.Lfunc_begin0        # >> Call Site 795 <<
	.uleb128 .Ltmp2118-.Ltmp2115            #   Call between .Ltmp2115 and .Ltmp2118
	.uleb128 .Ltmp2119-.Lfunc_begin0        #     jumps to .Ltmp2119
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2118-.Lfunc_begin0        # >> Call Site 796 <<
	.uleb128 .Ltmp2120-.Ltmp2118            #   Call between .Ltmp2118 and .Ltmp2120
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2120-.Lfunc_begin0        # >> Call Site 797 <<
	.uleb128 .Ltmp2121-.Ltmp2120            #   Call between .Ltmp2120 and .Ltmp2121
	.uleb128 .Ltmp2122-.Lfunc_begin0        #     jumps to .Ltmp2122
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2123-.Lfunc_begin0        # >> Call Site 798 <<
	.uleb128 .Ltmp2126-.Ltmp2123            #   Call between .Ltmp2123 and .Ltmp2126
	.uleb128 .Ltmp2127-.Lfunc_begin0        #     jumps to .Ltmp2127
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2126-.Lfunc_begin0        # >> Call Site 799 <<
	.uleb128 .Ltmp2128-.Ltmp2126            #   Call between .Ltmp2126 and .Ltmp2128
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2128-.Lfunc_begin0        # >> Call Site 800 <<
	.uleb128 .Ltmp2129-.Ltmp2128            #   Call between .Ltmp2128 and .Ltmp2129
	.uleb128 .Ltmp2130-.Lfunc_begin0        #     jumps to .Ltmp2130
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2131-.Lfunc_begin0        # >> Call Site 801 <<
	.uleb128 .Ltmp2134-.Ltmp2131            #   Call between .Ltmp2131 and .Ltmp2134
	.uleb128 .Ltmp2135-.Lfunc_begin0        #     jumps to .Ltmp2135
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2134-.Lfunc_begin0        # >> Call Site 802 <<
	.uleb128 .Ltmp2136-.Ltmp2134            #   Call between .Ltmp2134 and .Ltmp2136
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2136-.Lfunc_begin0        # >> Call Site 803 <<
	.uleb128 .Ltmp2137-.Ltmp2136            #   Call between .Ltmp2136 and .Ltmp2137
	.uleb128 .Ltmp2138-.Lfunc_begin0        #     jumps to .Ltmp2138
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2139-.Lfunc_begin0        # >> Call Site 804 <<
	.uleb128 .Ltmp2142-.Ltmp2139            #   Call between .Ltmp2139 and .Ltmp2142
	.uleb128 .Ltmp2143-.Lfunc_begin0        #     jumps to .Ltmp2143
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2142-.Lfunc_begin0        # >> Call Site 805 <<
	.uleb128 .Ltmp2144-.Ltmp2142            #   Call between .Ltmp2142 and .Ltmp2144
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2144-.Lfunc_begin0        # >> Call Site 806 <<
	.uleb128 .Ltmp2145-.Ltmp2144            #   Call between .Ltmp2144 and .Ltmp2145
	.uleb128 .Ltmp2146-.Lfunc_begin0        #     jumps to .Ltmp2146
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2147-.Lfunc_begin0        # >> Call Site 807 <<
	.uleb128 .Ltmp2150-.Ltmp2147            #   Call between .Ltmp2147 and .Ltmp2150
	.uleb128 .Ltmp2151-.Lfunc_begin0        #     jumps to .Ltmp2151
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2150-.Lfunc_begin0        # >> Call Site 808 <<
	.uleb128 .Ltmp2152-.Ltmp2150            #   Call between .Ltmp2150 and .Ltmp2152
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2152-.Lfunc_begin0        # >> Call Site 809 <<
	.uleb128 .Ltmp2153-.Ltmp2152            #   Call between .Ltmp2152 and .Ltmp2153
	.uleb128 .Ltmp2154-.Lfunc_begin0        #     jumps to .Ltmp2154
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2155-.Lfunc_begin0        # >> Call Site 810 <<
	.uleb128 .Ltmp2158-.Ltmp2155            #   Call between .Ltmp2155 and .Ltmp2158
	.uleb128 .Ltmp2159-.Lfunc_begin0        #     jumps to .Ltmp2159
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2158-.Lfunc_begin0        # >> Call Site 811 <<
	.uleb128 .Ltmp2160-.Ltmp2158            #   Call between .Ltmp2158 and .Ltmp2160
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2160-.Lfunc_begin0        # >> Call Site 812 <<
	.uleb128 .Ltmp2161-.Ltmp2160            #   Call between .Ltmp2160 and .Ltmp2161
	.uleb128 .Ltmp2162-.Lfunc_begin0        #     jumps to .Ltmp2162
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2163-.Lfunc_begin0        # >> Call Site 813 <<
	.uleb128 .Ltmp2166-.Ltmp2163            #   Call between .Ltmp2163 and .Ltmp2166
	.uleb128 .Ltmp2167-.Lfunc_begin0        #     jumps to .Ltmp2167
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2166-.Lfunc_begin0        # >> Call Site 814 <<
	.uleb128 .Ltmp2168-.Ltmp2166            #   Call between .Ltmp2166 and .Ltmp2168
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2168-.Lfunc_begin0        # >> Call Site 815 <<
	.uleb128 .Ltmp2169-.Ltmp2168            #   Call between .Ltmp2168 and .Ltmp2169
	.uleb128 .Ltmp2170-.Lfunc_begin0        #     jumps to .Ltmp2170
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2171-.Lfunc_begin0        # >> Call Site 816 <<
	.uleb128 .Ltmp2174-.Ltmp2171            #   Call between .Ltmp2171 and .Ltmp2174
	.uleb128 .Ltmp2175-.Lfunc_begin0        #     jumps to .Ltmp2175
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2174-.Lfunc_begin0        # >> Call Site 817 <<
	.uleb128 .Ltmp2176-.Ltmp2174            #   Call between .Ltmp2174 and .Ltmp2176
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2176-.Lfunc_begin0        # >> Call Site 818 <<
	.uleb128 .Ltmp2177-.Ltmp2176            #   Call between .Ltmp2176 and .Ltmp2177
	.uleb128 .Ltmp2178-.Lfunc_begin0        #     jumps to .Ltmp2178
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2179-.Lfunc_begin0        # >> Call Site 819 <<
	.uleb128 .Ltmp2182-.Ltmp2179            #   Call between .Ltmp2179 and .Ltmp2182
	.uleb128 .Ltmp2183-.Lfunc_begin0        #     jumps to .Ltmp2183
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2182-.Lfunc_begin0        # >> Call Site 820 <<
	.uleb128 .Ltmp2184-.Ltmp2182            #   Call between .Ltmp2182 and .Ltmp2184
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2184-.Lfunc_begin0        # >> Call Site 821 <<
	.uleb128 .Ltmp2185-.Ltmp2184            #   Call between .Ltmp2184 and .Ltmp2185
	.uleb128 .Ltmp2186-.Lfunc_begin0        #     jumps to .Ltmp2186
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2187-.Lfunc_begin0        # >> Call Site 822 <<
	.uleb128 .Ltmp2190-.Ltmp2187            #   Call between .Ltmp2187 and .Ltmp2190
	.uleb128 .Ltmp2191-.Lfunc_begin0        #     jumps to .Ltmp2191
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2190-.Lfunc_begin0        # >> Call Site 823 <<
	.uleb128 .Ltmp2192-.Ltmp2190            #   Call between .Ltmp2190 and .Ltmp2192
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2192-.Lfunc_begin0        # >> Call Site 824 <<
	.uleb128 .Ltmp2193-.Ltmp2192            #   Call between .Ltmp2192 and .Ltmp2193
	.uleb128 .Ltmp2194-.Lfunc_begin0        #     jumps to .Ltmp2194
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2195-.Lfunc_begin0        # >> Call Site 825 <<
	.uleb128 .Ltmp2198-.Ltmp2195            #   Call between .Ltmp2195 and .Ltmp2198
	.uleb128 .Ltmp2199-.Lfunc_begin0        #     jumps to .Ltmp2199
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2198-.Lfunc_begin0        # >> Call Site 826 <<
	.uleb128 .Ltmp2200-.Ltmp2198            #   Call between .Ltmp2198 and .Ltmp2200
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2200-.Lfunc_begin0        # >> Call Site 827 <<
	.uleb128 .Ltmp2201-.Ltmp2200            #   Call between .Ltmp2200 and .Ltmp2201
	.uleb128 .Ltmp2202-.Lfunc_begin0        #     jumps to .Ltmp2202
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2203-.Lfunc_begin0        # >> Call Site 828 <<
	.uleb128 .Ltmp2206-.Ltmp2203            #   Call between .Ltmp2203 and .Ltmp2206
	.uleb128 .Ltmp2207-.Lfunc_begin0        #     jumps to .Ltmp2207
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2206-.Lfunc_begin0        # >> Call Site 829 <<
	.uleb128 .Ltmp2208-.Ltmp2206            #   Call between .Ltmp2206 and .Ltmp2208
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2208-.Lfunc_begin0        # >> Call Site 830 <<
	.uleb128 .Ltmp2209-.Ltmp2208            #   Call between .Ltmp2208 and .Ltmp2209
	.uleb128 .Ltmp2210-.Lfunc_begin0        #     jumps to .Ltmp2210
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2211-.Lfunc_begin0        # >> Call Site 831 <<
	.uleb128 .Ltmp2214-.Ltmp2211            #   Call between .Ltmp2211 and .Ltmp2214
	.uleb128 .Ltmp2215-.Lfunc_begin0        #     jumps to .Ltmp2215
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2214-.Lfunc_begin0        # >> Call Site 832 <<
	.uleb128 .Ltmp2216-.Ltmp2214            #   Call between .Ltmp2214 and .Ltmp2216
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2216-.Lfunc_begin0        # >> Call Site 833 <<
	.uleb128 .Ltmp2217-.Ltmp2216            #   Call between .Ltmp2216 and .Ltmp2217
	.uleb128 .Ltmp2218-.Lfunc_begin0        #     jumps to .Ltmp2218
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2219-.Lfunc_begin0        # >> Call Site 834 <<
	.uleb128 .Ltmp2222-.Ltmp2219            #   Call between .Ltmp2219 and .Ltmp2222
	.uleb128 .Ltmp2223-.Lfunc_begin0        #     jumps to .Ltmp2223
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2222-.Lfunc_begin0        # >> Call Site 835 <<
	.uleb128 .Ltmp2224-.Ltmp2222            #   Call between .Ltmp2222 and .Ltmp2224
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2224-.Lfunc_begin0        # >> Call Site 836 <<
	.uleb128 .Ltmp2225-.Ltmp2224            #   Call between .Ltmp2224 and .Ltmp2225
	.uleb128 .Ltmp2226-.Lfunc_begin0        #     jumps to .Ltmp2226
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2227-.Lfunc_begin0        # >> Call Site 837 <<
	.uleb128 .Ltmp2230-.Ltmp2227            #   Call between .Ltmp2227 and .Ltmp2230
	.uleb128 .Ltmp2231-.Lfunc_begin0        #     jumps to .Ltmp2231
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2230-.Lfunc_begin0        # >> Call Site 838 <<
	.uleb128 .Ltmp2232-.Ltmp2230            #   Call between .Ltmp2230 and .Ltmp2232
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2232-.Lfunc_begin0        # >> Call Site 839 <<
	.uleb128 .Ltmp2233-.Ltmp2232            #   Call between .Ltmp2232 and .Ltmp2233
	.uleb128 .Ltmp2234-.Lfunc_begin0        #     jumps to .Ltmp2234
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2235-.Lfunc_begin0        # >> Call Site 840 <<
	.uleb128 .Ltmp2238-.Ltmp2235            #   Call between .Ltmp2235 and .Ltmp2238
	.uleb128 .Ltmp2239-.Lfunc_begin0        #     jumps to .Ltmp2239
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2238-.Lfunc_begin0        # >> Call Site 841 <<
	.uleb128 .Ltmp2240-.Ltmp2238            #   Call between .Ltmp2238 and .Ltmp2240
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2240-.Lfunc_begin0        # >> Call Site 842 <<
	.uleb128 .Ltmp2241-.Ltmp2240            #   Call between .Ltmp2240 and .Ltmp2241
	.uleb128 .Ltmp2242-.Lfunc_begin0        #     jumps to .Ltmp2242
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2243-.Lfunc_begin0        # >> Call Site 843 <<
	.uleb128 .Ltmp2246-.Ltmp2243            #   Call between .Ltmp2243 and .Ltmp2246
	.uleb128 .Ltmp2247-.Lfunc_begin0        #     jumps to .Ltmp2247
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2246-.Lfunc_begin0        # >> Call Site 844 <<
	.uleb128 .Ltmp2248-.Ltmp2246            #   Call between .Ltmp2246 and .Ltmp2248
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2248-.Lfunc_begin0        # >> Call Site 845 <<
	.uleb128 .Ltmp2249-.Ltmp2248            #   Call between .Ltmp2248 and .Ltmp2249
	.uleb128 .Ltmp2250-.Lfunc_begin0        #     jumps to .Ltmp2250
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2251-.Lfunc_begin0        # >> Call Site 846 <<
	.uleb128 .Ltmp2254-.Ltmp2251            #   Call between .Ltmp2251 and .Ltmp2254
	.uleb128 .Ltmp2255-.Lfunc_begin0        #     jumps to .Ltmp2255
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2254-.Lfunc_begin0        # >> Call Site 847 <<
	.uleb128 .Ltmp2256-.Ltmp2254            #   Call between .Ltmp2254 and .Ltmp2256
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2256-.Lfunc_begin0        # >> Call Site 848 <<
	.uleb128 .Ltmp2257-.Ltmp2256            #   Call between .Ltmp2256 and .Ltmp2257
	.uleb128 .Ltmp2258-.Lfunc_begin0        #     jumps to .Ltmp2258
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2259-.Lfunc_begin0        # >> Call Site 849 <<
	.uleb128 .Ltmp2262-.Ltmp2259            #   Call between .Ltmp2259 and .Ltmp2262
	.uleb128 .Ltmp2263-.Lfunc_begin0        #     jumps to .Ltmp2263
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2262-.Lfunc_begin0        # >> Call Site 850 <<
	.uleb128 .Ltmp2264-.Ltmp2262            #   Call between .Ltmp2262 and .Ltmp2264
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2264-.Lfunc_begin0        # >> Call Site 851 <<
	.uleb128 .Ltmp2265-.Ltmp2264            #   Call between .Ltmp2264 and .Ltmp2265
	.uleb128 .Ltmp2266-.Lfunc_begin0        #     jumps to .Ltmp2266
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2267-.Lfunc_begin0        # >> Call Site 852 <<
	.uleb128 .Ltmp2270-.Ltmp2267            #   Call between .Ltmp2267 and .Ltmp2270
	.uleb128 .Ltmp2271-.Lfunc_begin0        #     jumps to .Ltmp2271
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2270-.Lfunc_begin0        # >> Call Site 853 <<
	.uleb128 .Ltmp2272-.Ltmp2270            #   Call between .Ltmp2270 and .Ltmp2272
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2272-.Lfunc_begin0        # >> Call Site 854 <<
	.uleb128 .Ltmp2273-.Ltmp2272            #   Call between .Ltmp2272 and .Ltmp2273
	.uleb128 .Ltmp2274-.Lfunc_begin0        #     jumps to .Ltmp2274
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2275-.Lfunc_begin0        # >> Call Site 855 <<
	.uleb128 .Ltmp2278-.Ltmp2275            #   Call between .Ltmp2275 and .Ltmp2278
	.uleb128 .Ltmp2279-.Lfunc_begin0        #     jumps to .Ltmp2279
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2278-.Lfunc_begin0        # >> Call Site 856 <<
	.uleb128 .Ltmp2280-.Ltmp2278            #   Call between .Ltmp2278 and .Ltmp2280
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2280-.Lfunc_begin0        # >> Call Site 857 <<
	.uleb128 .Ltmp2281-.Ltmp2280            #   Call between .Ltmp2280 and .Ltmp2281
	.uleb128 .Ltmp2282-.Lfunc_begin0        #     jumps to .Ltmp2282
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2283-.Lfunc_begin0        # >> Call Site 858 <<
	.uleb128 .Ltmp2286-.Ltmp2283            #   Call between .Ltmp2283 and .Ltmp2286
	.uleb128 .Ltmp2287-.Lfunc_begin0        #     jumps to .Ltmp2287
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2286-.Lfunc_begin0        # >> Call Site 859 <<
	.uleb128 .Ltmp2288-.Ltmp2286            #   Call between .Ltmp2286 and .Ltmp2288
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2288-.Lfunc_begin0        # >> Call Site 860 <<
	.uleb128 .Ltmp2289-.Ltmp2288            #   Call between .Ltmp2288 and .Ltmp2289
	.uleb128 .Ltmp2290-.Lfunc_begin0        #     jumps to .Ltmp2290
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2291-.Lfunc_begin0        # >> Call Site 861 <<
	.uleb128 .Ltmp2294-.Ltmp2291            #   Call between .Ltmp2291 and .Ltmp2294
	.uleb128 .Ltmp2295-.Lfunc_begin0        #     jumps to .Ltmp2295
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2294-.Lfunc_begin0        # >> Call Site 862 <<
	.uleb128 .Ltmp2296-.Ltmp2294            #   Call between .Ltmp2294 and .Ltmp2296
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2296-.Lfunc_begin0        # >> Call Site 863 <<
	.uleb128 .Ltmp2297-.Ltmp2296            #   Call between .Ltmp2296 and .Ltmp2297
	.uleb128 .Ltmp2298-.Lfunc_begin0        #     jumps to .Ltmp2298
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2299-.Lfunc_begin0        # >> Call Site 864 <<
	.uleb128 .Ltmp2302-.Ltmp2299            #   Call between .Ltmp2299 and .Ltmp2302
	.uleb128 .Ltmp2303-.Lfunc_begin0        #     jumps to .Ltmp2303
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2302-.Lfunc_begin0        # >> Call Site 865 <<
	.uleb128 .Ltmp2304-.Ltmp2302            #   Call between .Ltmp2302 and .Ltmp2304
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2304-.Lfunc_begin0        # >> Call Site 866 <<
	.uleb128 .Ltmp2305-.Ltmp2304            #   Call between .Ltmp2304 and .Ltmp2305
	.uleb128 .Ltmp2306-.Lfunc_begin0        #     jumps to .Ltmp2306
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2307-.Lfunc_begin0        # >> Call Site 867 <<
	.uleb128 .Ltmp2310-.Ltmp2307            #   Call between .Ltmp2307 and .Ltmp2310
	.uleb128 .Ltmp2311-.Lfunc_begin0        #     jumps to .Ltmp2311
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2310-.Lfunc_begin0        # >> Call Site 868 <<
	.uleb128 .Ltmp2312-.Ltmp2310            #   Call between .Ltmp2310 and .Ltmp2312
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2312-.Lfunc_begin0        # >> Call Site 869 <<
	.uleb128 .Ltmp2313-.Ltmp2312            #   Call between .Ltmp2312 and .Ltmp2313
	.uleb128 .Ltmp2314-.Lfunc_begin0        #     jumps to .Ltmp2314
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2315-.Lfunc_begin0        # >> Call Site 870 <<
	.uleb128 .Ltmp2318-.Ltmp2315            #   Call between .Ltmp2315 and .Ltmp2318
	.uleb128 .Ltmp2319-.Lfunc_begin0        #     jumps to .Ltmp2319
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2318-.Lfunc_begin0        # >> Call Site 871 <<
	.uleb128 .Ltmp2320-.Ltmp2318            #   Call between .Ltmp2318 and .Ltmp2320
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2320-.Lfunc_begin0        # >> Call Site 872 <<
	.uleb128 .Ltmp2321-.Ltmp2320            #   Call between .Ltmp2320 and .Ltmp2321
	.uleb128 .Ltmp2322-.Lfunc_begin0        #     jumps to .Ltmp2322
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2323-.Lfunc_begin0        # >> Call Site 873 <<
	.uleb128 .Ltmp2326-.Ltmp2323            #   Call between .Ltmp2323 and .Ltmp2326
	.uleb128 .Ltmp2327-.Lfunc_begin0        #     jumps to .Ltmp2327
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2326-.Lfunc_begin0        # >> Call Site 874 <<
	.uleb128 .Ltmp2328-.Ltmp2326            #   Call between .Ltmp2326 and .Ltmp2328
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2328-.Lfunc_begin0        # >> Call Site 875 <<
	.uleb128 .Ltmp2329-.Ltmp2328            #   Call between .Ltmp2328 and .Ltmp2329
	.uleb128 .Ltmp2330-.Lfunc_begin0        #     jumps to .Ltmp2330
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2331-.Lfunc_begin0        # >> Call Site 876 <<
	.uleb128 .Ltmp2334-.Ltmp2331            #   Call between .Ltmp2331 and .Ltmp2334
	.uleb128 .Ltmp2335-.Lfunc_begin0        #     jumps to .Ltmp2335
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2334-.Lfunc_begin0        # >> Call Site 877 <<
	.uleb128 .Ltmp2336-.Ltmp2334            #   Call between .Ltmp2334 and .Ltmp2336
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2336-.Lfunc_begin0        # >> Call Site 878 <<
	.uleb128 .Ltmp2337-.Ltmp2336            #   Call between .Ltmp2336 and .Ltmp2337
	.uleb128 .Ltmp2338-.Lfunc_begin0        #     jumps to .Ltmp2338
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2339-.Lfunc_begin0        # >> Call Site 879 <<
	.uleb128 .Ltmp2342-.Ltmp2339            #   Call between .Ltmp2339 and .Ltmp2342
	.uleb128 .Ltmp2343-.Lfunc_begin0        #     jumps to .Ltmp2343
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2342-.Lfunc_begin0        # >> Call Site 880 <<
	.uleb128 .Ltmp2344-.Ltmp2342            #   Call between .Ltmp2342 and .Ltmp2344
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2344-.Lfunc_begin0        # >> Call Site 881 <<
	.uleb128 .Ltmp2345-.Ltmp2344            #   Call between .Ltmp2344 and .Ltmp2345
	.uleb128 .Ltmp2346-.Lfunc_begin0        #     jumps to .Ltmp2346
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2347-.Lfunc_begin0        # >> Call Site 882 <<
	.uleb128 .Ltmp2350-.Ltmp2347            #   Call between .Ltmp2347 and .Ltmp2350
	.uleb128 .Ltmp2351-.Lfunc_begin0        #     jumps to .Ltmp2351
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2350-.Lfunc_begin0        # >> Call Site 883 <<
	.uleb128 .Ltmp2352-.Ltmp2350            #   Call between .Ltmp2350 and .Ltmp2352
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2352-.Lfunc_begin0        # >> Call Site 884 <<
	.uleb128 .Ltmp2353-.Ltmp2352            #   Call between .Ltmp2352 and .Ltmp2353
	.uleb128 .Ltmp2354-.Lfunc_begin0        #     jumps to .Ltmp2354
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2355-.Lfunc_begin0        # >> Call Site 885 <<
	.uleb128 .Ltmp2358-.Ltmp2355            #   Call between .Ltmp2355 and .Ltmp2358
	.uleb128 .Ltmp2359-.Lfunc_begin0        #     jumps to .Ltmp2359
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2358-.Lfunc_begin0        # >> Call Site 886 <<
	.uleb128 .Ltmp2360-.Ltmp2358            #   Call between .Ltmp2358 and .Ltmp2360
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2360-.Lfunc_begin0        # >> Call Site 887 <<
	.uleb128 .Ltmp2361-.Ltmp2360            #   Call between .Ltmp2360 and .Ltmp2361
	.uleb128 .Ltmp2362-.Lfunc_begin0        #     jumps to .Ltmp2362
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2363-.Lfunc_begin0        # >> Call Site 888 <<
	.uleb128 .Ltmp2366-.Ltmp2363            #   Call between .Ltmp2363 and .Ltmp2366
	.uleb128 .Ltmp2367-.Lfunc_begin0        #     jumps to .Ltmp2367
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2366-.Lfunc_begin0        # >> Call Site 889 <<
	.uleb128 .Ltmp2368-.Ltmp2366            #   Call between .Ltmp2366 and .Ltmp2368
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2368-.Lfunc_begin0        # >> Call Site 890 <<
	.uleb128 .Ltmp2369-.Ltmp2368            #   Call between .Ltmp2368 and .Ltmp2369
	.uleb128 .Ltmp2370-.Lfunc_begin0        #     jumps to .Ltmp2370
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2371-.Lfunc_begin0        # >> Call Site 891 <<
	.uleb128 .Ltmp2374-.Ltmp2371            #   Call between .Ltmp2371 and .Ltmp2374
	.uleb128 .Ltmp2375-.Lfunc_begin0        #     jumps to .Ltmp2375
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2374-.Lfunc_begin0        # >> Call Site 892 <<
	.uleb128 .Ltmp2376-.Ltmp2374            #   Call between .Ltmp2374 and .Ltmp2376
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2376-.Lfunc_begin0        # >> Call Site 893 <<
	.uleb128 .Ltmp2377-.Ltmp2376            #   Call between .Ltmp2376 and .Ltmp2377
	.uleb128 .Ltmp2378-.Lfunc_begin0        #     jumps to .Ltmp2378
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2379-.Lfunc_begin0        # >> Call Site 894 <<
	.uleb128 .Ltmp2382-.Ltmp2379            #   Call between .Ltmp2379 and .Ltmp2382
	.uleb128 .Ltmp2383-.Lfunc_begin0        #     jumps to .Ltmp2383
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2382-.Lfunc_begin0        # >> Call Site 895 <<
	.uleb128 .Ltmp2384-.Ltmp2382            #   Call between .Ltmp2382 and .Ltmp2384
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2384-.Lfunc_begin0        # >> Call Site 896 <<
	.uleb128 .Ltmp2385-.Ltmp2384            #   Call between .Ltmp2384 and .Ltmp2385
	.uleb128 .Ltmp2386-.Lfunc_begin0        #     jumps to .Ltmp2386
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2387-.Lfunc_begin0        # >> Call Site 897 <<
	.uleb128 .Ltmp2390-.Ltmp2387            #   Call between .Ltmp2387 and .Ltmp2390
	.uleb128 .Ltmp2391-.Lfunc_begin0        #     jumps to .Ltmp2391
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2390-.Lfunc_begin0        # >> Call Site 898 <<
	.uleb128 .Ltmp2392-.Ltmp2390            #   Call between .Ltmp2390 and .Ltmp2392
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2392-.Lfunc_begin0        # >> Call Site 899 <<
	.uleb128 .Ltmp2393-.Ltmp2392            #   Call between .Ltmp2392 and .Ltmp2393
	.uleb128 .Ltmp2394-.Lfunc_begin0        #     jumps to .Ltmp2394
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2395-.Lfunc_begin0        # >> Call Site 900 <<
	.uleb128 .Ltmp2398-.Ltmp2395            #   Call between .Ltmp2395 and .Ltmp2398
	.uleb128 .Ltmp2399-.Lfunc_begin0        #     jumps to .Ltmp2399
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2398-.Lfunc_begin0        # >> Call Site 901 <<
	.uleb128 .Ltmp2400-.Ltmp2398            #   Call between .Ltmp2398 and .Ltmp2400
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2400-.Lfunc_begin0        # >> Call Site 902 <<
	.uleb128 .Ltmp2401-.Ltmp2400            #   Call between .Ltmp2400 and .Ltmp2401
	.uleb128 .Ltmp2402-.Lfunc_begin0        #     jumps to .Ltmp2402
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2403-.Lfunc_begin0        # >> Call Site 903 <<
	.uleb128 .Ltmp2406-.Ltmp2403            #   Call between .Ltmp2403 and .Ltmp2406
	.uleb128 .Ltmp2407-.Lfunc_begin0        #     jumps to .Ltmp2407
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2406-.Lfunc_begin0        # >> Call Site 904 <<
	.uleb128 .Ltmp2408-.Ltmp2406            #   Call between .Ltmp2406 and .Ltmp2408
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2408-.Lfunc_begin0        # >> Call Site 905 <<
	.uleb128 .Ltmp2409-.Ltmp2408            #   Call between .Ltmp2408 and .Ltmp2409
	.uleb128 .Ltmp2410-.Lfunc_begin0        #     jumps to .Ltmp2410
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2411-.Lfunc_begin0        # >> Call Site 906 <<
	.uleb128 .Ltmp2414-.Ltmp2411            #   Call between .Ltmp2411 and .Ltmp2414
	.uleb128 .Ltmp2415-.Lfunc_begin0        #     jumps to .Ltmp2415
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2414-.Lfunc_begin0        # >> Call Site 907 <<
	.uleb128 .Ltmp2416-.Ltmp2414            #   Call between .Ltmp2414 and .Ltmp2416
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2416-.Lfunc_begin0        # >> Call Site 908 <<
	.uleb128 .Ltmp2417-.Ltmp2416            #   Call between .Ltmp2416 and .Ltmp2417
	.uleb128 .Ltmp2418-.Lfunc_begin0        #     jumps to .Ltmp2418
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2419-.Lfunc_begin0        # >> Call Site 909 <<
	.uleb128 .Ltmp2422-.Ltmp2419            #   Call between .Ltmp2419 and .Ltmp2422
	.uleb128 .Ltmp2423-.Lfunc_begin0        #     jumps to .Ltmp2423
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2422-.Lfunc_begin0        # >> Call Site 910 <<
	.uleb128 .Ltmp2424-.Ltmp2422            #   Call between .Ltmp2422 and .Ltmp2424
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2424-.Lfunc_begin0        # >> Call Site 911 <<
	.uleb128 .Ltmp2425-.Ltmp2424            #   Call between .Ltmp2424 and .Ltmp2425
	.uleb128 .Ltmp2426-.Lfunc_begin0        #     jumps to .Ltmp2426
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2427-.Lfunc_begin0        # >> Call Site 912 <<
	.uleb128 .Ltmp2430-.Ltmp2427            #   Call between .Ltmp2427 and .Ltmp2430
	.uleb128 .Ltmp2431-.Lfunc_begin0        #     jumps to .Ltmp2431
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2430-.Lfunc_begin0        # >> Call Site 913 <<
	.uleb128 .Ltmp2432-.Ltmp2430            #   Call between .Ltmp2430 and .Ltmp2432
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2432-.Lfunc_begin0        # >> Call Site 914 <<
	.uleb128 .Ltmp2433-.Ltmp2432            #   Call between .Ltmp2432 and .Ltmp2433
	.uleb128 .Ltmp2434-.Lfunc_begin0        #     jumps to .Ltmp2434
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2435-.Lfunc_begin0        # >> Call Site 915 <<
	.uleb128 .Ltmp2438-.Ltmp2435            #   Call between .Ltmp2435 and .Ltmp2438
	.uleb128 .Ltmp2439-.Lfunc_begin0        #     jumps to .Ltmp2439
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2438-.Lfunc_begin0        # >> Call Site 916 <<
	.uleb128 .Ltmp2440-.Ltmp2438            #   Call between .Ltmp2438 and .Ltmp2440
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2440-.Lfunc_begin0        # >> Call Site 917 <<
	.uleb128 .Ltmp2441-.Ltmp2440            #   Call between .Ltmp2440 and .Ltmp2441
	.uleb128 .Ltmp2442-.Lfunc_begin0        #     jumps to .Ltmp2442
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2443-.Lfunc_begin0        # >> Call Site 918 <<
	.uleb128 .Ltmp2446-.Ltmp2443            #   Call between .Ltmp2443 and .Ltmp2446
	.uleb128 .Ltmp2447-.Lfunc_begin0        #     jumps to .Ltmp2447
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2446-.Lfunc_begin0        # >> Call Site 919 <<
	.uleb128 .Ltmp2448-.Ltmp2446            #   Call between .Ltmp2446 and .Ltmp2448
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2448-.Lfunc_begin0        # >> Call Site 920 <<
	.uleb128 .Ltmp2449-.Ltmp2448            #   Call between .Ltmp2448 and .Ltmp2449
	.uleb128 .Ltmp2450-.Lfunc_begin0        #     jumps to .Ltmp2450
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2451-.Lfunc_begin0        # >> Call Site 921 <<
	.uleb128 .Ltmp2454-.Ltmp2451            #   Call between .Ltmp2451 and .Ltmp2454
	.uleb128 .Ltmp2455-.Lfunc_begin0        #     jumps to .Ltmp2455
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2454-.Lfunc_begin0        # >> Call Site 922 <<
	.uleb128 .Ltmp2456-.Ltmp2454            #   Call between .Ltmp2454 and .Ltmp2456
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2456-.Lfunc_begin0        # >> Call Site 923 <<
	.uleb128 .Ltmp2457-.Ltmp2456            #   Call between .Ltmp2456 and .Ltmp2457
	.uleb128 .Ltmp2458-.Lfunc_begin0        #     jumps to .Ltmp2458
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2459-.Lfunc_begin0        # >> Call Site 924 <<
	.uleb128 .Ltmp2462-.Ltmp2459            #   Call between .Ltmp2459 and .Ltmp2462
	.uleb128 .Ltmp2463-.Lfunc_begin0        #     jumps to .Ltmp2463
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp2462-.Lfunc_begin0        # >> Call Site 925 <<
	.uleb128 .Lfunc_end332-.Ltmp2462        #   Call between .Ltmp2462 and .Lfunc_end332
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end0:
	.p2align	2, 0x0
                                        # -- End function
	.type	_ZL3rng,@object                 # @_ZL3rng
	.local	_ZL3rng
	.comm	_ZL3rng,5000,8
	.type	g_sum,@object                   # @g_sum
	.bss
	.globl	g_sum
	.p2align	2, 0x0
g_sum:
	.word	0                               # 0x0
	.size	g_sum, 4

	.type	A,@object                       # @A
	.globl	A
	.p2align	4, 0x0
A:
	.space	8192
	.size	A, 8192

	.type	B,@object                       # @B
	.globl	B
	.p2align	4, 0x0
B:
	.space	8192
	.size	B, 8192

	.type	C,@object                       # @C
	.globl	C
	.p2align	4, 0x0
C:
	.space	8192
	.size	C, 8192

	.type	D,@object                       # @D
	.globl	D
	.p2align	4, 0x0
D:
	.space	8192
	.size	D, 8192

	.type	E,@object                       # @E
	.globl	E
	.p2align	4, 0x0
E:
	.space	8192
	.size	E, 8192

	.type	F,@object                       # @F
	.globl	F
	.p2align	4, 0x0
F:
	.space	8192
	.size	F, 8192

	.type	_ZL27benchmark_uniq_2_benchmark_,@object # @_ZL27benchmark_uniq_2_benchmark_
	.local	_ZL27benchmark_uniq_2_benchmark_
	.comm	_ZL27benchmark_uniq_2_benchmark_,8,8
	.type	.L.str,@object                  # @.str
	.section	.rodata.str1.8,"aMS",@progbits,1
	.p2align	3, 0x0
.L.str:
	.asciz	"benchAutoVecForLoopTC1"
	.size	.L.str, 23

	.type	_ZL27benchmark_uniq_3_benchmark_,@object # @_ZL27benchmark_uniq_3_benchmark_
	.local	_ZL27benchmark_uniq_3_benchmark_
	.comm	_ZL27benchmark_uniq_3_benchmark_,8,8
	.type	.L.str.4,@object                # @.str.4
	.p2align	3, 0x0
.L.str.4:
	.asciz	"benchForIC1VW4LoopTC1"
	.size	.L.str.4, 22

	.type	_ZL27benchmark_uniq_4_benchmark_,@object # @_ZL27benchmark_uniq_4_benchmark_
	.local	_ZL27benchmark_uniq_4_benchmark_
	.comm	_ZL27benchmark_uniq_4_benchmark_,8,8
	.type	.L.str.6,@object                # @.str.6
	.p2align	3, 0x0
.L.str.6:
	.asciz	"benchForIC2VW4LoopTC1"
	.size	.L.str.6, 22

	.type	_ZL27benchmark_uniq_5_benchmark_,@object # @_ZL27benchmark_uniq_5_benchmark_
	.local	_ZL27benchmark_uniq_5_benchmark_
	.comm	_ZL27benchmark_uniq_5_benchmark_,8,8
	.type	.L.str.8,@object                # @.str.8
	.p2align	3, 0x0
.L.str.8:
	.asciz	"benchForIC4VW4LoopTC1"
	.size	.L.str.8, 22

	.type	_ZL27benchmark_uniq_6_benchmark_,@object # @_ZL27benchmark_uniq_6_benchmark_
	.local	_ZL27benchmark_uniq_6_benchmark_
	.comm	_ZL27benchmark_uniq_6_benchmark_,8,8
	.type	.L.str.10,@object               # @.str.10
	.p2align	3, 0x0
.L.str.10:
	.asciz	"benchForLoopWithReductionAutoVecTC1"
	.size	.L.str.10, 36

	.type	_ZL27benchmark_uniq_7_benchmark_,@object # @_ZL27benchmark_uniq_7_benchmark_
	.local	_ZL27benchmark_uniq_7_benchmark_
	.comm	_ZL27benchmark_uniq_7_benchmark_,8,8
	.type	.L.str.12,@object               # @.str.12
	.p2align	3, 0x0
.L.str.12:
	.asciz	"benchForIC1VW4LoopWithReductionTC1"
	.size	.L.str.12, 35

	.type	_ZL27benchmark_uniq_8_benchmark_,@object # @_ZL27benchmark_uniq_8_benchmark_
	.local	_ZL27benchmark_uniq_8_benchmark_
	.comm	_ZL27benchmark_uniq_8_benchmark_,8,8
	.type	.L.str.14,@object               # @.str.14
	.p2align	3, 0x0
.L.str.14:
	.asciz	"benchForIC2VW4LoopWithReductionTC1"
	.size	.L.str.14, 35

	.type	_ZL27benchmark_uniq_9_benchmark_,@object # @_ZL27benchmark_uniq_9_benchmark_
	.local	_ZL27benchmark_uniq_9_benchmark_
	.comm	_ZL27benchmark_uniq_9_benchmark_,8,8
	.type	.L.str.16,@object               # @.str.16
	.p2align	3, 0x0
.L.str.16:
	.asciz	"benchForIC4VW4LoopWithReductionTC1"
	.size	.L.str.16, 35

	.type	_ZL28benchmark_uniq_10_benchmark_,@object # @_ZL28benchmark_uniq_10_benchmark_
	.local	_ZL28benchmark_uniq_10_benchmark_
	.comm	_ZL28benchmark_uniq_10_benchmark_,8,8
	.type	.L.str.18,@object               # @.str.18
	.p2align	3, 0x0
.L.str.18:
	.asciz	"benchForIC1VW1LoopWithReductionTC1"
	.size	.L.str.18, 35

	.type	_ZL28benchmark_uniq_11_benchmark_,@object # @_ZL28benchmark_uniq_11_benchmark_
	.local	_ZL28benchmark_uniq_11_benchmark_
	.comm	_ZL28benchmark_uniq_11_benchmark_,8,8
	.type	.L.str.20,@object               # @.str.20
	.p2align	3, 0x0
.L.str.20:
	.asciz	"benchForIC2VW1LoopWithReductionTC1"
	.size	.L.str.20, 35

	.type	_ZL28benchmark_uniq_12_benchmark_,@object # @_ZL28benchmark_uniq_12_benchmark_
	.local	_ZL28benchmark_uniq_12_benchmark_
	.comm	_ZL28benchmark_uniq_12_benchmark_,8,8
	.type	.L.str.22,@object               # @.str.22
	.p2align	3, 0x0
.L.str.22:
	.asciz	"benchForIC4VW1LoopWithReductionTC1"
	.size	.L.str.22, 35

	.type	_ZL28benchmark_uniq_13_benchmark_,@object # @_ZL28benchmark_uniq_13_benchmark_
	.local	_ZL28benchmark_uniq_13_benchmark_
	.comm	_ZL28benchmark_uniq_13_benchmark_,8,8
	.type	.L.str.24,@object               # @.str.24
	.p2align	3, 0x0
.L.str.24:
	.asciz	"benchAutoVecForBigLoopTC1"
	.size	.L.str.24, 26

	.type	_ZL28benchmark_uniq_14_benchmark_,@object # @_ZL28benchmark_uniq_14_benchmark_
	.local	_ZL28benchmark_uniq_14_benchmark_
	.comm	_ZL28benchmark_uniq_14_benchmark_,8,8
	.type	.L.str.26,@object               # @.str.26
	.p2align	3, 0x0
.L.str.26:
	.asciz	"benchForIC1VW4BigLoopTC1"
	.size	.L.str.26, 25

	.type	_ZL28benchmark_uniq_15_benchmark_,@object # @_ZL28benchmark_uniq_15_benchmark_
	.local	_ZL28benchmark_uniq_15_benchmark_
	.comm	_ZL28benchmark_uniq_15_benchmark_,8,8
	.type	.L.str.28,@object               # @.str.28
	.p2align	3, 0x0
.L.str.28:
	.asciz	"benchForIC2VW4BigLoopTC1"
	.size	.L.str.28, 25

	.type	_ZL28benchmark_uniq_16_benchmark_,@object # @_ZL28benchmark_uniq_16_benchmark_
	.local	_ZL28benchmark_uniq_16_benchmark_
	.comm	_ZL28benchmark_uniq_16_benchmark_,8,8
	.type	.L.str.30,@object               # @.str.30
	.p2align	3, 0x0
.L.str.30:
	.asciz	"benchForIC4VW4BigLoopTC1"
	.size	.L.str.30, 25

	.type	_ZL28benchmark_uniq_17_benchmark_,@object # @_ZL28benchmark_uniq_17_benchmark_
	.local	_ZL28benchmark_uniq_17_benchmark_
	.comm	_ZL28benchmark_uniq_17_benchmark_,8,8
	.type	.L.str.32,@object               # @.str.32
	.p2align	3, 0x0
.L.str.32:
	.asciz	"benchForBigLoopWithReductionAutoVecTC1"
	.size	.L.str.32, 39

	.type	_ZL28benchmark_uniq_18_benchmark_,@object # @_ZL28benchmark_uniq_18_benchmark_
	.local	_ZL28benchmark_uniq_18_benchmark_
	.comm	_ZL28benchmark_uniq_18_benchmark_,8,8
	.type	.L.str.34,@object               # @.str.34
	.p2align	3, 0x0
.L.str.34:
	.asciz	"benchForIC1VW4BigLoopWithReductionTC1"
	.size	.L.str.34, 38

	.type	_ZL28benchmark_uniq_19_benchmark_,@object # @_ZL28benchmark_uniq_19_benchmark_
	.local	_ZL28benchmark_uniq_19_benchmark_
	.comm	_ZL28benchmark_uniq_19_benchmark_,8,8
	.type	.L.str.36,@object               # @.str.36
	.p2align	3, 0x0
.L.str.36:
	.asciz	"benchForIC2VW4BigLoopWithReductionTC1"
	.size	.L.str.36, 38

	.type	_ZL28benchmark_uniq_20_benchmark_,@object # @_ZL28benchmark_uniq_20_benchmark_
	.local	_ZL28benchmark_uniq_20_benchmark_
	.comm	_ZL28benchmark_uniq_20_benchmark_,8,8
	.type	.L.str.38,@object               # @.str.38
	.p2align	3, 0x0
.L.str.38:
	.asciz	"benchForIC4VW4BigLoopWithReductionTC1"
	.size	.L.str.38, 38

	.type	_ZL28benchmark_uniq_21_benchmark_,@object # @_ZL28benchmark_uniq_21_benchmark_
	.local	_ZL28benchmark_uniq_21_benchmark_
	.comm	_ZL28benchmark_uniq_21_benchmark_,8,8
	.type	.L.str.40,@object               # @.str.40
	.p2align	3, 0x0
.L.str.40:
	.asciz	"benchForIC1VW1BigLoopWithReductionTC1"
	.size	.L.str.40, 38

	.type	_ZL28benchmark_uniq_22_benchmark_,@object # @_ZL28benchmark_uniq_22_benchmark_
	.local	_ZL28benchmark_uniq_22_benchmark_
	.comm	_ZL28benchmark_uniq_22_benchmark_,8,8
	.type	.L.str.42,@object               # @.str.42
	.p2align	3, 0x0
.L.str.42:
	.asciz	"benchForIC2VW1BigLoopWithReductionTC1"
	.size	.L.str.42, 38

	.type	_ZL28benchmark_uniq_23_benchmark_,@object # @_ZL28benchmark_uniq_23_benchmark_
	.local	_ZL28benchmark_uniq_23_benchmark_
	.comm	_ZL28benchmark_uniq_23_benchmark_,8,8
	.type	.L.str.44,@object               # @.str.44
	.p2align	3, 0x0
.L.str.44:
	.asciz	"benchForIC4VW1BigLoopWithReductionTC1"
	.size	.L.str.44, 38

	.type	_ZL28benchmark_uniq_24_benchmark_,@object # @_ZL28benchmark_uniq_24_benchmark_
	.local	_ZL28benchmark_uniq_24_benchmark_
	.comm	_ZL28benchmark_uniq_24_benchmark_,8,8
	.type	.L.str.46,@object               # @.str.46
	.p2align	3, 0x0
.L.str.46:
	.asciz	"benchAutoVecForLoopTC2"
	.size	.L.str.46, 23

	.type	_ZL28benchmark_uniq_25_benchmark_,@object # @_ZL28benchmark_uniq_25_benchmark_
	.local	_ZL28benchmark_uniq_25_benchmark_
	.comm	_ZL28benchmark_uniq_25_benchmark_,8,8
	.type	.L.str.48,@object               # @.str.48
	.p2align	3, 0x0
.L.str.48:
	.asciz	"benchForIC1VW4LoopTC2"
	.size	.L.str.48, 22

	.type	_ZL28benchmark_uniq_26_benchmark_,@object # @_ZL28benchmark_uniq_26_benchmark_
	.local	_ZL28benchmark_uniq_26_benchmark_
	.comm	_ZL28benchmark_uniq_26_benchmark_,8,8
	.type	.L.str.50,@object               # @.str.50
	.p2align	3, 0x0
.L.str.50:
	.asciz	"benchForIC2VW4LoopTC2"
	.size	.L.str.50, 22

	.type	_ZL28benchmark_uniq_27_benchmark_,@object # @_ZL28benchmark_uniq_27_benchmark_
	.local	_ZL28benchmark_uniq_27_benchmark_
	.comm	_ZL28benchmark_uniq_27_benchmark_,8,8
	.type	.L.str.52,@object               # @.str.52
	.p2align	3, 0x0
.L.str.52:
	.asciz	"benchForIC4VW4LoopTC2"
	.size	.L.str.52, 22

	.type	_ZL28benchmark_uniq_28_benchmark_,@object # @_ZL28benchmark_uniq_28_benchmark_
	.local	_ZL28benchmark_uniq_28_benchmark_
	.comm	_ZL28benchmark_uniq_28_benchmark_,8,8
	.type	.L.str.54,@object               # @.str.54
	.p2align	3, 0x0
.L.str.54:
	.asciz	"benchForLoopWithReductionAutoVecTC2"
	.size	.L.str.54, 36

	.type	_ZL28benchmark_uniq_29_benchmark_,@object # @_ZL28benchmark_uniq_29_benchmark_
	.local	_ZL28benchmark_uniq_29_benchmark_
	.comm	_ZL28benchmark_uniq_29_benchmark_,8,8
	.type	.L.str.56,@object               # @.str.56
	.p2align	3, 0x0
.L.str.56:
	.asciz	"benchForIC1VW4LoopWithReductionTC2"
	.size	.L.str.56, 35

	.type	_ZL28benchmark_uniq_30_benchmark_,@object # @_ZL28benchmark_uniq_30_benchmark_
	.local	_ZL28benchmark_uniq_30_benchmark_
	.comm	_ZL28benchmark_uniq_30_benchmark_,8,8
	.type	.L.str.58,@object               # @.str.58
	.p2align	3, 0x0
.L.str.58:
	.asciz	"benchForIC2VW4LoopWithReductionTC2"
	.size	.L.str.58, 35

	.type	_ZL28benchmark_uniq_31_benchmark_,@object # @_ZL28benchmark_uniq_31_benchmark_
	.local	_ZL28benchmark_uniq_31_benchmark_
	.comm	_ZL28benchmark_uniq_31_benchmark_,8,8
	.type	.L.str.60,@object               # @.str.60
	.p2align	3, 0x0
.L.str.60:
	.asciz	"benchForIC4VW4LoopWithReductionTC2"
	.size	.L.str.60, 35

	.type	_ZL28benchmark_uniq_32_benchmark_,@object # @_ZL28benchmark_uniq_32_benchmark_
	.local	_ZL28benchmark_uniq_32_benchmark_
	.comm	_ZL28benchmark_uniq_32_benchmark_,8,8
	.type	.L.str.62,@object               # @.str.62
	.p2align	3, 0x0
.L.str.62:
	.asciz	"benchForIC1VW1LoopWithReductionTC2"
	.size	.L.str.62, 35

	.type	_ZL28benchmark_uniq_33_benchmark_,@object # @_ZL28benchmark_uniq_33_benchmark_
	.local	_ZL28benchmark_uniq_33_benchmark_
	.comm	_ZL28benchmark_uniq_33_benchmark_,8,8
	.type	.L.str.64,@object               # @.str.64
	.p2align	3, 0x0
.L.str.64:
	.asciz	"benchForIC2VW1LoopWithReductionTC2"
	.size	.L.str.64, 35

	.type	_ZL28benchmark_uniq_34_benchmark_,@object # @_ZL28benchmark_uniq_34_benchmark_
	.local	_ZL28benchmark_uniq_34_benchmark_
	.comm	_ZL28benchmark_uniq_34_benchmark_,8,8
	.type	.L.str.66,@object               # @.str.66
	.p2align	3, 0x0
.L.str.66:
	.asciz	"benchForIC4VW1LoopWithReductionTC2"
	.size	.L.str.66, 35

	.type	_ZL28benchmark_uniq_35_benchmark_,@object # @_ZL28benchmark_uniq_35_benchmark_
	.local	_ZL28benchmark_uniq_35_benchmark_
	.comm	_ZL28benchmark_uniq_35_benchmark_,8,8
	.type	.L.str.68,@object               # @.str.68
	.p2align	3, 0x0
.L.str.68:
	.asciz	"benchAutoVecForBigLoopTC2"
	.size	.L.str.68, 26

	.type	_ZL28benchmark_uniq_36_benchmark_,@object # @_ZL28benchmark_uniq_36_benchmark_
	.local	_ZL28benchmark_uniq_36_benchmark_
	.comm	_ZL28benchmark_uniq_36_benchmark_,8,8
	.type	.L.str.70,@object               # @.str.70
	.p2align	3, 0x0
.L.str.70:
	.asciz	"benchForIC1VW4BigLoopTC2"
	.size	.L.str.70, 25

	.type	_ZL28benchmark_uniq_37_benchmark_,@object # @_ZL28benchmark_uniq_37_benchmark_
	.local	_ZL28benchmark_uniq_37_benchmark_
	.comm	_ZL28benchmark_uniq_37_benchmark_,8,8
	.type	.L.str.72,@object               # @.str.72
	.p2align	3, 0x0
.L.str.72:
	.asciz	"benchForIC2VW4BigLoopTC2"
	.size	.L.str.72, 25

	.type	_ZL28benchmark_uniq_38_benchmark_,@object # @_ZL28benchmark_uniq_38_benchmark_
	.local	_ZL28benchmark_uniq_38_benchmark_
	.comm	_ZL28benchmark_uniq_38_benchmark_,8,8
	.type	.L.str.74,@object               # @.str.74
	.p2align	3, 0x0
.L.str.74:
	.asciz	"benchForIC4VW4BigLoopTC2"
	.size	.L.str.74, 25

	.type	_ZL28benchmark_uniq_39_benchmark_,@object # @_ZL28benchmark_uniq_39_benchmark_
	.local	_ZL28benchmark_uniq_39_benchmark_
	.comm	_ZL28benchmark_uniq_39_benchmark_,8,8
	.type	.L.str.76,@object               # @.str.76
	.p2align	3, 0x0
.L.str.76:
	.asciz	"benchForBigLoopWithReductionAutoVecTC2"
	.size	.L.str.76, 39

	.type	_ZL28benchmark_uniq_40_benchmark_,@object # @_ZL28benchmark_uniq_40_benchmark_
	.local	_ZL28benchmark_uniq_40_benchmark_
	.comm	_ZL28benchmark_uniq_40_benchmark_,8,8
	.type	.L.str.78,@object               # @.str.78
	.p2align	3, 0x0
.L.str.78:
	.asciz	"benchForIC1VW4BigLoopWithReductionTC2"
	.size	.L.str.78, 38

	.type	_ZL28benchmark_uniq_41_benchmark_,@object # @_ZL28benchmark_uniq_41_benchmark_
	.local	_ZL28benchmark_uniq_41_benchmark_
	.comm	_ZL28benchmark_uniq_41_benchmark_,8,8
	.type	.L.str.80,@object               # @.str.80
	.p2align	3, 0x0
.L.str.80:
	.asciz	"benchForIC2VW4BigLoopWithReductionTC2"
	.size	.L.str.80, 38

	.type	_ZL28benchmark_uniq_42_benchmark_,@object # @_ZL28benchmark_uniq_42_benchmark_
	.local	_ZL28benchmark_uniq_42_benchmark_
	.comm	_ZL28benchmark_uniq_42_benchmark_,8,8
	.type	.L.str.82,@object               # @.str.82
	.p2align	3, 0x0
.L.str.82:
	.asciz	"benchForIC4VW4BigLoopWithReductionTC2"
	.size	.L.str.82, 38

	.type	_ZL28benchmark_uniq_43_benchmark_,@object # @_ZL28benchmark_uniq_43_benchmark_
	.local	_ZL28benchmark_uniq_43_benchmark_
	.comm	_ZL28benchmark_uniq_43_benchmark_,8,8
	.type	.L.str.84,@object               # @.str.84
	.p2align	3, 0x0
.L.str.84:
	.asciz	"benchForIC1VW1BigLoopWithReductionTC2"
	.size	.L.str.84, 38

	.type	_ZL28benchmark_uniq_44_benchmark_,@object # @_ZL28benchmark_uniq_44_benchmark_
	.local	_ZL28benchmark_uniq_44_benchmark_
	.comm	_ZL28benchmark_uniq_44_benchmark_,8,8
	.type	.L.str.86,@object               # @.str.86
	.p2align	3, 0x0
.L.str.86:
	.asciz	"benchForIC2VW1BigLoopWithReductionTC2"
	.size	.L.str.86, 38

	.type	_ZL28benchmark_uniq_45_benchmark_,@object # @_ZL28benchmark_uniq_45_benchmark_
	.local	_ZL28benchmark_uniq_45_benchmark_
	.comm	_ZL28benchmark_uniq_45_benchmark_,8,8
	.type	.L.str.88,@object               # @.str.88
	.p2align	3, 0x0
.L.str.88:
	.asciz	"benchForIC4VW1BigLoopWithReductionTC2"
	.size	.L.str.88, 38

	.type	_ZL28benchmark_uniq_46_benchmark_,@object # @_ZL28benchmark_uniq_46_benchmark_
	.local	_ZL28benchmark_uniq_46_benchmark_
	.comm	_ZL28benchmark_uniq_46_benchmark_,8,8
	.type	.L.str.90,@object               # @.str.90
	.p2align	3, 0x0
.L.str.90:
	.asciz	"benchAutoVecForLoopTC3"
	.size	.L.str.90, 23

	.type	_ZL28benchmark_uniq_47_benchmark_,@object # @_ZL28benchmark_uniq_47_benchmark_
	.local	_ZL28benchmark_uniq_47_benchmark_
	.comm	_ZL28benchmark_uniq_47_benchmark_,8,8
	.type	.L.str.92,@object               # @.str.92
	.p2align	3, 0x0
.L.str.92:
	.asciz	"benchForIC1VW4LoopTC3"
	.size	.L.str.92, 22

	.type	_ZL28benchmark_uniq_48_benchmark_,@object # @_ZL28benchmark_uniq_48_benchmark_
	.local	_ZL28benchmark_uniq_48_benchmark_
	.comm	_ZL28benchmark_uniq_48_benchmark_,8,8
	.type	.L.str.94,@object               # @.str.94
	.p2align	3, 0x0
.L.str.94:
	.asciz	"benchForIC2VW4LoopTC3"
	.size	.L.str.94, 22

	.type	_ZL28benchmark_uniq_49_benchmark_,@object # @_ZL28benchmark_uniq_49_benchmark_
	.local	_ZL28benchmark_uniq_49_benchmark_
	.comm	_ZL28benchmark_uniq_49_benchmark_,8,8
	.type	.L.str.96,@object               # @.str.96
	.p2align	3, 0x0
.L.str.96:
	.asciz	"benchForIC4VW4LoopTC3"
	.size	.L.str.96, 22

	.type	_ZL28benchmark_uniq_50_benchmark_,@object # @_ZL28benchmark_uniq_50_benchmark_
	.local	_ZL28benchmark_uniq_50_benchmark_
	.comm	_ZL28benchmark_uniq_50_benchmark_,8,8
	.type	.L.str.98,@object               # @.str.98
	.p2align	3, 0x0
.L.str.98:
	.asciz	"benchForLoopWithReductionAutoVecTC3"
	.size	.L.str.98, 36

	.type	_ZL28benchmark_uniq_51_benchmark_,@object # @_ZL28benchmark_uniq_51_benchmark_
	.local	_ZL28benchmark_uniq_51_benchmark_
	.comm	_ZL28benchmark_uniq_51_benchmark_,8,8
	.type	.L.str.100,@object              # @.str.100
	.p2align	3, 0x0
.L.str.100:
	.asciz	"benchForIC1VW4LoopWithReductionTC3"
	.size	.L.str.100, 35

	.type	_ZL28benchmark_uniq_52_benchmark_,@object # @_ZL28benchmark_uniq_52_benchmark_
	.local	_ZL28benchmark_uniq_52_benchmark_
	.comm	_ZL28benchmark_uniq_52_benchmark_,8,8
	.type	.L.str.102,@object              # @.str.102
	.p2align	3, 0x0
.L.str.102:
	.asciz	"benchForIC2VW4LoopWithReductionTC3"
	.size	.L.str.102, 35

	.type	_ZL28benchmark_uniq_53_benchmark_,@object # @_ZL28benchmark_uniq_53_benchmark_
	.local	_ZL28benchmark_uniq_53_benchmark_
	.comm	_ZL28benchmark_uniq_53_benchmark_,8,8
	.type	.L.str.104,@object              # @.str.104
	.p2align	3, 0x0
.L.str.104:
	.asciz	"benchForIC4VW4LoopWithReductionTC3"
	.size	.L.str.104, 35

	.type	_ZL28benchmark_uniq_54_benchmark_,@object # @_ZL28benchmark_uniq_54_benchmark_
	.local	_ZL28benchmark_uniq_54_benchmark_
	.comm	_ZL28benchmark_uniq_54_benchmark_,8,8
	.type	.L.str.106,@object              # @.str.106
	.p2align	3, 0x0
.L.str.106:
	.asciz	"benchForIC1VW1LoopWithReductionTC3"
	.size	.L.str.106, 35

	.type	_ZL28benchmark_uniq_55_benchmark_,@object # @_ZL28benchmark_uniq_55_benchmark_
	.local	_ZL28benchmark_uniq_55_benchmark_
	.comm	_ZL28benchmark_uniq_55_benchmark_,8,8
	.type	.L.str.108,@object              # @.str.108
	.p2align	3, 0x0
.L.str.108:
	.asciz	"benchForIC2VW1LoopWithReductionTC3"
	.size	.L.str.108, 35

	.type	_ZL28benchmark_uniq_56_benchmark_,@object # @_ZL28benchmark_uniq_56_benchmark_
	.local	_ZL28benchmark_uniq_56_benchmark_
	.comm	_ZL28benchmark_uniq_56_benchmark_,8,8
	.type	.L.str.110,@object              # @.str.110
	.p2align	3, 0x0
.L.str.110:
	.asciz	"benchForIC4VW1LoopWithReductionTC3"
	.size	.L.str.110, 35

	.type	_ZL28benchmark_uniq_57_benchmark_,@object # @_ZL28benchmark_uniq_57_benchmark_
	.local	_ZL28benchmark_uniq_57_benchmark_
	.comm	_ZL28benchmark_uniq_57_benchmark_,8,8
	.type	.L.str.112,@object              # @.str.112
	.p2align	3, 0x0
.L.str.112:
	.asciz	"benchAutoVecForBigLoopTC3"
	.size	.L.str.112, 26

	.type	_ZL28benchmark_uniq_58_benchmark_,@object # @_ZL28benchmark_uniq_58_benchmark_
	.local	_ZL28benchmark_uniq_58_benchmark_
	.comm	_ZL28benchmark_uniq_58_benchmark_,8,8
	.type	.L.str.114,@object              # @.str.114
	.p2align	3, 0x0
.L.str.114:
	.asciz	"benchForIC1VW4BigLoopTC3"
	.size	.L.str.114, 25

	.type	_ZL28benchmark_uniq_59_benchmark_,@object # @_ZL28benchmark_uniq_59_benchmark_
	.local	_ZL28benchmark_uniq_59_benchmark_
	.comm	_ZL28benchmark_uniq_59_benchmark_,8,8
	.type	.L.str.116,@object              # @.str.116
	.p2align	3, 0x0
.L.str.116:
	.asciz	"benchForIC2VW4BigLoopTC3"
	.size	.L.str.116, 25

	.type	_ZL28benchmark_uniq_60_benchmark_,@object # @_ZL28benchmark_uniq_60_benchmark_
	.local	_ZL28benchmark_uniq_60_benchmark_
	.comm	_ZL28benchmark_uniq_60_benchmark_,8,8
	.type	.L.str.118,@object              # @.str.118
	.p2align	3, 0x0
.L.str.118:
	.asciz	"benchForIC4VW4BigLoopTC3"
	.size	.L.str.118, 25

	.type	_ZL28benchmark_uniq_61_benchmark_,@object # @_ZL28benchmark_uniq_61_benchmark_
	.local	_ZL28benchmark_uniq_61_benchmark_
	.comm	_ZL28benchmark_uniq_61_benchmark_,8,8
	.type	.L.str.120,@object              # @.str.120
	.p2align	3, 0x0
.L.str.120:
	.asciz	"benchForBigLoopWithReductionAutoVecTC3"
	.size	.L.str.120, 39

	.type	_ZL28benchmark_uniq_62_benchmark_,@object # @_ZL28benchmark_uniq_62_benchmark_
	.local	_ZL28benchmark_uniq_62_benchmark_
	.comm	_ZL28benchmark_uniq_62_benchmark_,8,8
	.type	.L.str.122,@object              # @.str.122
	.p2align	3, 0x0
.L.str.122:
	.asciz	"benchForIC1VW4BigLoopWithReductionTC3"
	.size	.L.str.122, 38

	.type	_ZL28benchmark_uniq_63_benchmark_,@object # @_ZL28benchmark_uniq_63_benchmark_
	.local	_ZL28benchmark_uniq_63_benchmark_
	.comm	_ZL28benchmark_uniq_63_benchmark_,8,8
	.type	.L.str.124,@object              # @.str.124
	.p2align	3, 0x0
.L.str.124:
	.asciz	"benchForIC2VW4BigLoopWithReductionTC3"
	.size	.L.str.124, 38

	.type	_ZL28benchmark_uniq_64_benchmark_,@object # @_ZL28benchmark_uniq_64_benchmark_
	.local	_ZL28benchmark_uniq_64_benchmark_
	.comm	_ZL28benchmark_uniq_64_benchmark_,8,8
	.type	.L.str.126,@object              # @.str.126
	.p2align	3, 0x0
.L.str.126:
	.asciz	"benchForIC4VW4BigLoopWithReductionTC3"
	.size	.L.str.126, 38

	.type	_ZL28benchmark_uniq_65_benchmark_,@object # @_ZL28benchmark_uniq_65_benchmark_
	.local	_ZL28benchmark_uniq_65_benchmark_
	.comm	_ZL28benchmark_uniq_65_benchmark_,8,8
	.type	.L.str.128,@object              # @.str.128
	.p2align	3, 0x0
.L.str.128:
	.asciz	"benchForIC1VW1BigLoopWithReductionTC3"
	.size	.L.str.128, 38

	.type	_ZL28benchmark_uniq_66_benchmark_,@object # @_ZL28benchmark_uniq_66_benchmark_
	.local	_ZL28benchmark_uniq_66_benchmark_
	.comm	_ZL28benchmark_uniq_66_benchmark_,8,8
	.type	.L.str.130,@object              # @.str.130
	.p2align	3, 0x0
.L.str.130:
	.asciz	"benchForIC2VW1BigLoopWithReductionTC3"
	.size	.L.str.130, 38

	.type	_ZL28benchmark_uniq_67_benchmark_,@object # @_ZL28benchmark_uniq_67_benchmark_
	.local	_ZL28benchmark_uniq_67_benchmark_
	.comm	_ZL28benchmark_uniq_67_benchmark_,8,8
	.type	.L.str.132,@object              # @.str.132
	.p2align	3, 0x0
.L.str.132:
	.asciz	"benchForIC4VW1BigLoopWithReductionTC3"
	.size	.L.str.132, 38

	.type	_ZL28benchmark_uniq_68_benchmark_,@object # @_ZL28benchmark_uniq_68_benchmark_
	.local	_ZL28benchmark_uniq_68_benchmark_
	.comm	_ZL28benchmark_uniq_68_benchmark_,8,8
	.type	.L.str.134,@object              # @.str.134
	.p2align	3, 0x0
.L.str.134:
	.asciz	"benchAutoVecForLoopTC4"
	.size	.L.str.134, 23

	.type	_ZL28benchmark_uniq_69_benchmark_,@object # @_ZL28benchmark_uniq_69_benchmark_
	.local	_ZL28benchmark_uniq_69_benchmark_
	.comm	_ZL28benchmark_uniq_69_benchmark_,8,8
	.type	.L.str.136,@object              # @.str.136
	.p2align	3, 0x0
.L.str.136:
	.asciz	"benchForIC1VW4LoopTC4"
	.size	.L.str.136, 22

	.type	_ZL28benchmark_uniq_70_benchmark_,@object # @_ZL28benchmark_uniq_70_benchmark_
	.local	_ZL28benchmark_uniq_70_benchmark_
	.comm	_ZL28benchmark_uniq_70_benchmark_,8,8
	.type	.L.str.138,@object              # @.str.138
	.p2align	3, 0x0
.L.str.138:
	.asciz	"benchForIC2VW4LoopTC4"
	.size	.L.str.138, 22

	.type	_ZL28benchmark_uniq_71_benchmark_,@object # @_ZL28benchmark_uniq_71_benchmark_
	.local	_ZL28benchmark_uniq_71_benchmark_
	.comm	_ZL28benchmark_uniq_71_benchmark_,8,8
	.type	.L.str.140,@object              # @.str.140
	.p2align	3, 0x0
.L.str.140:
	.asciz	"benchForIC4VW4LoopTC4"
	.size	.L.str.140, 22

	.type	_ZL28benchmark_uniq_72_benchmark_,@object # @_ZL28benchmark_uniq_72_benchmark_
	.local	_ZL28benchmark_uniq_72_benchmark_
	.comm	_ZL28benchmark_uniq_72_benchmark_,8,8
	.type	.L.str.142,@object              # @.str.142
	.p2align	3, 0x0
.L.str.142:
	.asciz	"benchForLoopWithReductionAutoVecTC4"
	.size	.L.str.142, 36

	.type	_ZL28benchmark_uniq_73_benchmark_,@object # @_ZL28benchmark_uniq_73_benchmark_
	.local	_ZL28benchmark_uniq_73_benchmark_
	.comm	_ZL28benchmark_uniq_73_benchmark_,8,8
	.type	.L.str.144,@object              # @.str.144
	.p2align	3, 0x0
.L.str.144:
	.asciz	"benchForIC1VW4LoopWithReductionTC4"
	.size	.L.str.144, 35

	.type	_ZL28benchmark_uniq_74_benchmark_,@object # @_ZL28benchmark_uniq_74_benchmark_
	.local	_ZL28benchmark_uniq_74_benchmark_
	.comm	_ZL28benchmark_uniq_74_benchmark_,8,8
	.type	.L.str.146,@object              # @.str.146
	.p2align	3, 0x0
.L.str.146:
	.asciz	"benchForIC2VW4LoopWithReductionTC4"
	.size	.L.str.146, 35

	.type	_ZL28benchmark_uniq_75_benchmark_,@object # @_ZL28benchmark_uniq_75_benchmark_
	.local	_ZL28benchmark_uniq_75_benchmark_
	.comm	_ZL28benchmark_uniq_75_benchmark_,8,8
	.type	.L.str.148,@object              # @.str.148
	.p2align	3, 0x0
.L.str.148:
	.asciz	"benchForIC4VW4LoopWithReductionTC4"
	.size	.L.str.148, 35

	.type	_ZL28benchmark_uniq_76_benchmark_,@object # @_ZL28benchmark_uniq_76_benchmark_
	.local	_ZL28benchmark_uniq_76_benchmark_
	.comm	_ZL28benchmark_uniq_76_benchmark_,8,8
	.type	.L.str.150,@object              # @.str.150
	.p2align	3, 0x0
.L.str.150:
	.asciz	"benchForIC1VW1LoopWithReductionTC4"
	.size	.L.str.150, 35

	.type	_ZL28benchmark_uniq_77_benchmark_,@object # @_ZL28benchmark_uniq_77_benchmark_
	.local	_ZL28benchmark_uniq_77_benchmark_
	.comm	_ZL28benchmark_uniq_77_benchmark_,8,8
	.type	.L.str.152,@object              # @.str.152
	.p2align	3, 0x0
.L.str.152:
	.asciz	"benchForIC2VW1LoopWithReductionTC4"
	.size	.L.str.152, 35

	.type	_ZL28benchmark_uniq_78_benchmark_,@object # @_ZL28benchmark_uniq_78_benchmark_
	.local	_ZL28benchmark_uniq_78_benchmark_
	.comm	_ZL28benchmark_uniq_78_benchmark_,8,8
	.type	.L.str.154,@object              # @.str.154
	.p2align	3, 0x0
.L.str.154:
	.asciz	"benchForIC4VW1LoopWithReductionTC4"
	.size	.L.str.154, 35

	.type	_ZL28benchmark_uniq_79_benchmark_,@object # @_ZL28benchmark_uniq_79_benchmark_
	.local	_ZL28benchmark_uniq_79_benchmark_
	.comm	_ZL28benchmark_uniq_79_benchmark_,8,8
	.type	.L.str.156,@object              # @.str.156
	.p2align	3, 0x0
.L.str.156:
	.asciz	"benchAutoVecForBigLoopTC4"
	.size	.L.str.156, 26

	.type	_ZL28benchmark_uniq_80_benchmark_,@object # @_ZL28benchmark_uniq_80_benchmark_
	.local	_ZL28benchmark_uniq_80_benchmark_
	.comm	_ZL28benchmark_uniq_80_benchmark_,8,8
	.type	.L.str.158,@object              # @.str.158
	.p2align	3, 0x0
.L.str.158:
	.asciz	"benchForIC1VW4BigLoopTC4"
	.size	.L.str.158, 25

	.type	_ZL28benchmark_uniq_81_benchmark_,@object # @_ZL28benchmark_uniq_81_benchmark_
	.local	_ZL28benchmark_uniq_81_benchmark_
	.comm	_ZL28benchmark_uniq_81_benchmark_,8,8
	.type	.L.str.160,@object              # @.str.160
	.p2align	3, 0x0
.L.str.160:
	.asciz	"benchForIC2VW4BigLoopTC4"
	.size	.L.str.160, 25

	.type	_ZL28benchmark_uniq_82_benchmark_,@object # @_ZL28benchmark_uniq_82_benchmark_
	.local	_ZL28benchmark_uniq_82_benchmark_
	.comm	_ZL28benchmark_uniq_82_benchmark_,8,8
	.type	.L.str.162,@object              # @.str.162
	.p2align	3, 0x0
.L.str.162:
	.asciz	"benchForIC4VW4BigLoopTC4"
	.size	.L.str.162, 25

	.type	_ZL28benchmark_uniq_83_benchmark_,@object # @_ZL28benchmark_uniq_83_benchmark_
	.local	_ZL28benchmark_uniq_83_benchmark_
	.comm	_ZL28benchmark_uniq_83_benchmark_,8,8
	.type	.L.str.164,@object              # @.str.164
	.p2align	3, 0x0
.L.str.164:
	.asciz	"benchForBigLoopWithReductionAutoVecTC4"
	.size	.L.str.164, 39

	.type	_ZL28benchmark_uniq_84_benchmark_,@object # @_ZL28benchmark_uniq_84_benchmark_
	.local	_ZL28benchmark_uniq_84_benchmark_
	.comm	_ZL28benchmark_uniq_84_benchmark_,8,8
	.type	.L.str.166,@object              # @.str.166
	.p2align	3, 0x0
.L.str.166:
	.asciz	"benchForIC1VW4BigLoopWithReductionTC4"
	.size	.L.str.166, 38

	.type	_ZL28benchmark_uniq_85_benchmark_,@object # @_ZL28benchmark_uniq_85_benchmark_
	.local	_ZL28benchmark_uniq_85_benchmark_
	.comm	_ZL28benchmark_uniq_85_benchmark_,8,8
	.type	.L.str.168,@object              # @.str.168
	.p2align	3, 0x0
.L.str.168:
	.asciz	"benchForIC2VW4BigLoopWithReductionTC4"
	.size	.L.str.168, 38

	.type	_ZL28benchmark_uniq_86_benchmark_,@object # @_ZL28benchmark_uniq_86_benchmark_
	.local	_ZL28benchmark_uniq_86_benchmark_
	.comm	_ZL28benchmark_uniq_86_benchmark_,8,8
	.type	.L.str.170,@object              # @.str.170
	.p2align	3, 0x0
.L.str.170:
	.asciz	"benchForIC4VW4BigLoopWithReductionTC4"
	.size	.L.str.170, 38

	.type	_ZL28benchmark_uniq_87_benchmark_,@object # @_ZL28benchmark_uniq_87_benchmark_
	.local	_ZL28benchmark_uniq_87_benchmark_
	.comm	_ZL28benchmark_uniq_87_benchmark_,8,8
	.type	.L.str.172,@object              # @.str.172
	.p2align	3, 0x0
.L.str.172:
	.asciz	"benchForIC1VW1BigLoopWithReductionTC4"
	.size	.L.str.172, 38

	.type	_ZL28benchmark_uniq_88_benchmark_,@object # @_ZL28benchmark_uniq_88_benchmark_
	.local	_ZL28benchmark_uniq_88_benchmark_
	.comm	_ZL28benchmark_uniq_88_benchmark_,8,8
	.type	.L.str.174,@object              # @.str.174
	.p2align	3, 0x0
.L.str.174:
	.asciz	"benchForIC2VW1BigLoopWithReductionTC4"
	.size	.L.str.174, 38

	.type	_ZL28benchmark_uniq_89_benchmark_,@object # @_ZL28benchmark_uniq_89_benchmark_
	.local	_ZL28benchmark_uniq_89_benchmark_
	.comm	_ZL28benchmark_uniq_89_benchmark_,8,8
	.type	.L.str.176,@object              # @.str.176
	.p2align	3, 0x0
.L.str.176:
	.asciz	"benchForIC4VW1BigLoopWithReductionTC4"
	.size	.L.str.176, 38

	.type	_ZL28benchmark_uniq_90_benchmark_,@object # @_ZL28benchmark_uniq_90_benchmark_
	.local	_ZL28benchmark_uniq_90_benchmark_
	.comm	_ZL28benchmark_uniq_90_benchmark_,8,8
	.type	.L.str.178,@object              # @.str.178
	.p2align	3, 0x0
.L.str.178:
	.asciz	"benchAutoVecForLoopTC7"
	.size	.L.str.178, 23

	.type	_ZL28benchmark_uniq_91_benchmark_,@object # @_ZL28benchmark_uniq_91_benchmark_
	.local	_ZL28benchmark_uniq_91_benchmark_
	.comm	_ZL28benchmark_uniq_91_benchmark_,8,8
	.type	.L.str.180,@object              # @.str.180
	.p2align	3, 0x0
.L.str.180:
	.asciz	"benchForIC1VW4LoopTC7"
	.size	.L.str.180, 22

	.type	_ZL28benchmark_uniq_92_benchmark_,@object # @_ZL28benchmark_uniq_92_benchmark_
	.local	_ZL28benchmark_uniq_92_benchmark_
	.comm	_ZL28benchmark_uniq_92_benchmark_,8,8
	.type	.L.str.182,@object              # @.str.182
	.p2align	3, 0x0
.L.str.182:
	.asciz	"benchForIC2VW4LoopTC7"
	.size	.L.str.182, 22

	.type	_ZL28benchmark_uniq_93_benchmark_,@object # @_ZL28benchmark_uniq_93_benchmark_
	.local	_ZL28benchmark_uniq_93_benchmark_
	.comm	_ZL28benchmark_uniq_93_benchmark_,8,8
	.type	.L.str.184,@object              # @.str.184
	.p2align	3, 0x0
.L.str.184:
	.asciz	"benchForIC4VW4LoopTC7"
	.size	.L.str.184, 22

	.type	_ZL28benchmark_uniq_94_benchmark_,@object # @_ZL28benchmark_uniq_94_benchmark_
	.local	_ZL28benchmark_uniq_94_benchmark_
	.comm	_ZL28benchmark_uniq_94_benchmark_,8,8
	.type	.L.str.186,@object              # @.str.186
	.p2align	3, 0x0
.L.str.186:
	.asciz	"benchForLoopWithReductionAutoVecTC7"
	.size	.L.str.186, 36

	.type	_ZL28benchmark_uniq_95_benchmark_,@object # @_ZL28benchmark_uniq_95_benchmark_
	.local	_ZL28benchmark_uniq_95_benchmark_
	.comm	_ZL28benchmark_uniq_95_benchmark_,8,8
	.type	.L.str.188,@object              # @.str.188
	.p2align	3, 0x0
.L.str.188:
	.asciz	"benchForIC1VW4LoopWithReductionTC7"
	.size	.L.str.188, 35

	.type	_ZL28benchmark_uniq_96_benchmark_,@object # @_ZL28benchmark_uniq_96_benchmark_
	.local	_ZL28benchmark_uniq_96_benchmark_
	.comm	_ZL28benchmark_uniq_96_benchmark_,8,8
	.type	.L.str.190,@object              # @.str.190
	.p2align	3, 0x0
.L.str.190:
	.asciz	"benchForIC2VW4LoopWithReductionTC7"
	.size	.L.str.190, 35

	.type	_ZL28benchmark_uniq_97_benchmark_,@object # @_ZL28benchmark_uniq_97_benchmark_
	.local	_ZL28benchmark_uniq_97_benchmark_
	.comm	_ZL28benchmark_uniq_97_benchmark_,8,8
	.type	.L.str.192,@object              # @.str.192
	.p2align	3, 0x0
.L.str.192:
	.asciz	"benchForIC4VW4LoopWithReductionTC7"
	.size	.L.str.192, 35

	.type	_ZL28benchmark_uniq_98_benchmark_,@object # @_ZL28benchmark_uniq_98_benchmark_
	.local	_ZL28benchmark_uniq_98_benchmark_
	.comm	_ZL28benchmark_uniq_98_benchmark_,8,8
	.type	.L.str.194,@object              # @.str.194
	.p2align	3, 0x0
.L.str.194:
	.asciz	"benchForIC1VW1LoopWithReductionTC7"
	.size	.L.str.194, 35

	.type	_ZL28benchmark_uniq_99_benchmark_,@object # @_ZL28benchmark_uniq_99_benchmark_
	.local	_ZL28benchmark_uniq_99_benchmark_
	.comm	_ZL28benchmark_uniq_99_benchmark_,8,8
	.type	.L.str.196,@object              # @.str.196
	.p2align	3, 0x0
.L.str.196:
	.asciz	"benchForIC2VW1LoopWithReductionTC7"
	.size	.L.str.196, 35

	.type	_ZL29benchmark_uniq_100_benchmark_,@object # @_ZL29benchmark_uniq_100_benchmark_
	.local	_ZL29benchmark_uniq_100_benchmark_
	.comm	_ZL29benchmark_uniq_100_benchmark_,8,8
	.type	.L.str.198,@object              # @.str.198
	.p2align	3, 0x0
.L.str.198:
	.asciz	"benchForIC4VW1LoopWithReductionTC7"
	.size	.L.str.198, 35

	.type	_ZL29benchmark_uniq_101_benchmark_,@object # @_ZL29benchmark_uniq_101_benchmark_
	.local	_ZL29benchmark_uniq_101_benchmark_
	.comm	_ZL29benchmark_uniq_101_benchmark_,8,8
	.type	.L.str.200,@object              # @.str.200
	.p2align	3, 0x0
.L.str.200:
	.asciz	"benchAutoVecForBigLoopTC7"
	.size	.L.str.200, 26

	.type	_ZL29benchmark_uniq_102_benchmark_,@object # @_ZL29benchmark_uniq_102_benchmark_
	.local	_ZL29benchmark_uniq_102_benchmark_
	.comm	_ZL29benchmark_uniq_102_benchmark_,8,8
	.type	.L.str.202,@object              # @.str.202
	.p2align	3, 0x0
.L.str.202:
	.asciz	"benchForIC1VW4BigLoopTC7"
	.size	.L.str.202, 25

	.type	_ZL29benchmark_uniq_103_benchmark_,@object # @_ZL29benchmark_uniq_103_benchmark_
	.local	_ZL29benchmark_uniq_103_benchmark_
	.comm	_ZL29benchmark_uniq_103_benchmark_,8,8
	.type	.L.str.204,@object              # @.str.204
	.p2align	3, 0x0
.L.str.204:
	.asciz	"benchForIC2VW4BigLoopTC7"
	.size	.L.str.204, 25

	.type	_ZL29benchmark_uniq_104_benchmark_,@object # @_ZL29benchmark_uniq_104_benchmark_
	.local	_ZL29benchmark_uniq_104_benchmark_
	.comm	_ZL29benchmark_uniq_104_benchmark_,8,8
	.type	.L.str.206,@object              # @.str.206
	.p2align	3, 0x0
.L.str.206:
	.asciz	"benchForIC4VW4BigLoopTC7"
	.size	.L.str.206, 25

	.type	_ZL29benchmark_uniq_105_benchmark_,@object # @_ZL29benchmark_uniq_105_benchmark_
	.local	_ZL29benchmark_uniq_105_benchmark_
	.comm	_ZL29benchmark_uniq_105_benchmark_,8,8
	.type	.L.str.208,@object              # @.str.208
	.p2align	3, 0x0
.L.str.208:
	.asciz	"benchForBigLoopWithReductionAutoVecTC7"
	.size	.L.str.208, 39

	.type	_ZL29benchmark_uniq_106_benchmark_,@object # @_ZL29benchmark_uniq_106_benchmark_
	.local	_ZL29benchmark_uniq_106_benchmark_
	.comm	_ZL29benchmark_uniq_106_benchmark_,8,8
	.type	.L.str.210,@object              # @.str.210
	.p2align	3, 0x0
.L.str.210:
	.asciz	"benchForIC1VW4BigLoopWithReductionTC7"
	.size	.L.str.210, 38

	.type	_ZL29benchmark_uniq_107_benchmark_,@object # @_ZL29benchmark_uniq_107_benchmark_
	.local	_ZL29benchmark_uniq_107_benchmark_
	.comm	_ZL29benchmark_uniq_107_benchmark_,8,8
	.type	.L.str.212,@object              # @.str.212
	.p2align	3, 0x0
.L.str.212:
	.asciz	"benchForIC2VW4BigLoopWithReductionTC7"
	.size	.L.str.212, 38

	.type	_ZL29benchmark_uniq_108_benchmark_,@object # @_ZL29benchmark_uniq_108_benchmark_
	.local	_ZL29benchmark_uniq_108_benchmark_
	.comm	_ZL29benchmark_uniq_108_benchmark_,8,8
	.type	.L.str.214,@object              # @.str.214
	.p2align	3, 0x0
.L.str.214:
	.asciz	"benchForIC4VW4BigLoopWithReductionTC7"
	.size	.L.str.214, 38

	.type	_ZL29benchmark_uniq_109_benchmark_,@object # @_ZL29benchmark_uniq_109_benchmark_
	.local	_ZL29benchmark_uniq_109_benchmark_
	.comm	_ZL29benchmark_uniq_109_benchmark_,8,8
	.type	.L.str.216,@object              # @.str.216
	.p2align	3, 0x0
.L.str.216:
	.asciz	"benchForIC1VW1BigLoopWithReductionTC7"
	.size	.L.str.216, 38

	.type	_ZL29benchmark_uniq_110_benchmark_,@object # @_ZL29benchmark_uniq_110_benchmark_
	.local	_ZL29benchmark_uniq_110_benchmark_
	.comm	_ZL29benchmark_uniq_110_benchmark_,8,8
	.type	.L.str.218,@object              # @.str.218
	.p2align	3, 0x0
.L.str.218:
	.asciz	"benchForIC2VW1BigLoopWithReductionTC7"
	.size	.L.str.218, 38

	.type	_ZL29benchmark_uniq_111_benchmark_,@object # @_ZL29benchmark_uniq_111_benchmark_
	.local	_ZL29benchmark_uniq_111_benchmark_
	.comm	_ZL29benchmark_uniq_111_benchmark_,8,8
	.type	.L.str.220,@object              # @.str.220
	.p2align	3, 0x0
.L.str.220:
	.asciz	"benchForIC4VW1BigLoopWithReductionTC7"
	.size	.L.str.220, 38

	.type	_ZL29benchmark_uniq_112_benchmark_,@object # @_ZL29benchmark_uniq_112_benchmark_
	.local	_ZL29benchmark_uniq_112_benchmark_
	.comm	_ZL29benchmark_uniq_112_benchmark_,8,8
	.type	.L.str.222,@object              # @.str.222
	.p2align	3, 0x0
.L.str.222:
	.asciz	"benchAutoVecForLoopTC8"
	.size	.L.str.222, 23

	.type	_ZL29benchmark_uniq_113_benchmark_,@object # @_ZL29benchmark_uniq_113_benchmark_
	.local	_ZL29benchmark_uniq_113_benchmark_
	.comm	_ZL29benchmark_uniq_113_benchmark_,8,8
	.type	.L.str.224,@object              # @.str.224
	.p2align	3, 0x0
.L.str.224:
	.asciz	"benchForIC1VW4LoopTC8"
	.size	.L.str.224, 22

	.type	_ZL29benchmark_uniq_114_benchmark_,@object # @_ZL29benchmark_uniq_114_benchmark_
	.local	_ZL29benchmark_uniq_114_benchmark_
	.comm	_ZL29benchmark_uniq_114_benchmark_,8,8
	.type	.L.str.226,@object              # @.str.226
	.p2align	3, 0x0
.L.str.226:
	.asciz	"benchForIC2VW4LoopTC8"
	.size	.L.str.226, 22

	.type	_ZL29benchmark_uniq_115_benchmark_,@object # @_ZL29benchmark_uniq_115_benchmark_
	.local	_ZL29benchmark_uniq_115_benchmark_
	.comm	_ZL29benchmark_uniq_115_benchmark_,8,8
	.type	.L.str.228,@object              # @.str.228
	.p2align	3, 0x0
.L.str.228:
	.asciz	"benchForIC4VW4LoopTC8"
	.size	.L.str.228, 22

	.type	_ZL29benchmark_uniq_116_benchmark_,@object # @_ZL29benchmark_uniq_116_benchmark_
	.local	_ZL29benchmark_uniq_116_benchmark_
	.comm	_ZL29benchmark_uniq_116_benchmark_,8,8
	.type	.L.str.230,@object              # @.str.230
	.p2align	3, 0x0
.L.str.230:
	.asciz	"benchForLoopWithReductionAutoVecTC8"
	.size	.L.str.230, 36

	.type	_ZL29benchmark_uniq_117_benchmark_,@object # @_ZL29benchmark_uniq_117_benchmark_
	.local	_ZL29benchmark_uniq_117_benchmark_
	.comm	_ZL29benchmark_uniq_117_benchmark_,8,8
	.type	.L.str.232,@object              # @.str.232
	.p2align	3, 0x0
.L.str.232:
	.asciz	"benchForIC1VW4LoopWithReductionTC8"
	.size	.L.str.232, 35

	.type	_ZL29benchmark_uniq_118_benchmark_,@object # @_ZL29benchmark_uniq_118_benchmark_
	.local	_ZL29benchmark_uniq_118_benchmark_
	.comm	_ZL29benchmark_uniq_118_benchmark_,8,8
	.type	.L.str.234,@object              # @.str.234
	.p2align	3, 0x0
.L.str.234:
	.asciz	"benchForIC2VW4LoopWithReductionTC8"
	.size	.L.str.234, 35

	.type	_ZL29benchmark_uniq_119_benchmark_,@object # @_ZL29benchmark_uniq_119_benchmark_
	.local	_ZL29benchmark_uniq_119_benchmark_
	.comm	_ZL29benchmark_uniq_119_benchmark_,8,8
	.type	.L.str.236,@object              # @.str.236
	.p2align	3, 0x0
.L.str.236:
	.asciz	"benchForIC4VW4LoopWithReductionTC8"
	.size	.L.str.236, 35

	.type	_ZL29benchmark_uniq_120_benchmark_,@object # @_ZL29benchmark_uniq_120_benchmark_
	.local	_ZL29benchmark_uniq_120_benchmark_
	.comm	_ZL29benchmark_uniq_120_benchmark_,8,8
	.type	.L.str.238,@object              # @.str.238
	.p2align	3, 0x0
.L.str.238:
	.asciz	"benchForIC1VW1LoopWithReductionTC8"
	.size	.L.str.238, 35

	.type	_ZL29benchmark_uniq_121_benchmark_,@object # @_ZL29benchmark_uniq_121_benchmark_
	.local	_ZL29benchmark_uniq_121_benchmark_
	.comm	_ZL29benchmark_uniq_121_benchmark_,8,8
	.type	.L.str.240,@object              # @.str.240
	.p2align	3, 0x0
.L.str.240:
	.asciz	"benchForIC2VW1LoopWithReductionTC8"
	.size	.L.str.240, 35

	.type	_ZL29benchmark_uniq_122_benchmark_,@object # @_ZL29benchmark_uniq_122_benchmark_
	.local	_ZL29benchmark_uniq_122_benchmark_
	.comm	_ZL29benchmark_uniq_122_benchmark_,8,8
	.type	.L.str.242,@object              # @.str.242
	.p2align	3, 0x0
.L.str.242:
	.asciz	"benchForIC4VW1LoopWithReductionTC8"
	.size	.L.str.242, 35

	.type	_ZL29benchmark_uniq_123_benchmark_,@object # @_ZL29benchmark_uniq_123_benchmark_
	.local	_ZL29benchmark_uniq_123_benchmark_
	.comm	_ZL29benchmark_uniq_123_benchmark_,8,8
	.type	.L.str.244,@object              # @.str.244
	.p2align	3, 0x0
.L.str.244:
	.asciz	"benchAutoVecForBigLoopTC8"
	.size	.L.str.244, 26

	.type	_ZL29benchmark_uniq_124_benchmark_,@object # @_ZL29benchmark_uniq_124_benchmark_
	.local	_ZL29benchmark_uniq_124_benchmark_
	.comm	_ZL29benchmark_uniq_124_benchmark_,8,8
	.type	.L.str.246,@object              # @.str.246
	.p2align	3, 0x0
.L.str.246:
	.asciz	"benchForIC1VW4BigLoopTC8"
	.size	.L.str.246, 25

	.type	_ZL29benchmark_uniq_125_benchmark_,@object # @_ZL29benchmark_uniq_125_benchmark_
	.local	_ZL29benchmark_uniq_125_benchmark_
	.comm	_ZL29benchmark_uniq_125_benchmark_,8,8
	.type	.L.str.248,@object              # @.str.248
	.p2align	3, 0x0
.L.str.248:
	.asciz	"benchForIC2VW4BigLoopTC8"
	.size	.L.str.248, 25

	.type	_ZL29benchmark_uniq_126_benchmark_,@object # @_ZL29benchmark_uniq_126_benchmark_
	.local	_ZL29benchmark_uniq_126_benchmark_
	.comm	_ZL29benchmark_uniq_126_benchmark_,8,8
	.type	.L.str.250,@object              # @.str.250
	.p2align	3, 0x0
.L.str.250:
	.asciz	"benchForIC4VW4BigLoopTC8"
	.size	.L.str.250, 25

	.type	_ZL29benchmark_uniq_127_benchmark_,@object # @_ZL29benchmark_uniq_127_benchmark_
	.local	_ZL29benchmark_uniq_127_benchmark_
	.comm	_ZL29benchmark_uniq_127_benchmark_,8,8
	.type	.L.str.252,@object              # @.str.252
	.p2align	3, 0x0
.L.str.252:
	.asciz	"benchForBigLoopWithReductionAutoVecTC8"
	.size	.L.str.252, 39

	.type	_ZL29benchmark_uniq_128_benchmark_,@object # @_ZL29benchmark_uniq_128_benchmark_
	.local	_ZL29benchmark_uniq_128_benchmark_
	.comm	_ZL29benchmark_uniq_128_benchmark_,8,8
	.type	.L.str.254,@object              # @.str.254
	.p2align	3, 0x0
.L.str.254:
	.asciz	"benchForIC1VW4BigLoopWithReductionTC8"
	.size	.L.str.254, 38

	.type	_ZL29benchmark_uniq_129_benchmark_,@object # @_ZL29benchmark_uniq_129_benchmark_
	.local	_ZL29benchmark_uniq_129_benchmark_
	.comm	_ZL29benchmark_uniq_129_benchmark_,8,8
	.type	.L.str.256,@object              # @.str.256
	.p2align	3, 0x0
.L.str.256:
	.asciz	"benchForIC2VW4BigLoopWithReductionTC8"
	.size	.L.str.256, 38

	.type	_ZL29benchmark_uniq_130_benchmark_,@object # @_ZL29benchmark_uniq_130_benchmark_
	.local	_ZL29benchmark_uniq_130_benchmark_
	.comm	_ZL29benchmark_uniq_130_benchmark_,8,8
	.type	.L.str.258,@object              # @.str.258
	.p2align	3, 0x0
.L.str.258:
	.asciz	"benchForIC4VW4BigLoopWithReductionTC8"
	.size	.L.str.258, 38

	.type	_ZL29benchmark_uniq_131_benchmark_,@object # @_ZL29benchmark_uniq_131_benchmark_
	.local	_ZL29benchmark_uniq_131_benchmark_
	.comm	_ZL29benchmark_uniq_131_benchmark_,8,8
	.type	.L.str.260,@object              # @.str.260
	.p2align	3, 0x0
.L.str.260:
	.asciz	"benchForIC1VW1BigLoopWithReductionTC8"
	.size	.L.str.260, 38

	.type	_ZL29benchmark_uniq_132_benchmark_,@object # @_ZL29benchmark_uniq_132_benchmark_
	.local	_ZL29benchmark_uniq_132_benchmark_
	.comm	_ZL29benchmark_uniq_132_benchmark_,8,8
	.type	.L.str.262,@object              # @.str.262
	.p2align	3, 0x0
.L.str.262:
	.asciz	"benchForIC2VW1BigLoopWithReductionTC8"
	.size	.L.str.262, 38

	.type	_ZL29benchmark_uniq_133_benchmark_,@object # @_ZL29benchmark_uniq_133_benchmark_
	.local	_ZL29benchmark_uniq_133_benchmark_
	.comm	_ZL29benchmark_uniq_133_benchmark_,8,8
	.type	.L.str.264,@object              # @.str.264
	.p2align	3, 0x0
.L.str.264:
	.asciz	"benchForIC4VW1BigLoopWithReductionTC8"
	.size	.L.str.264, 38

	.type	_ZL29benchmark_uniq_134_benchmark_,@object # @_ZL29benchmark_uniq_134_benchmark_
	.local	_ZL29benchmark_uniq_134_benchmark_
	.comm	_ZL29benchmark_uniq_134_benchmark_,8,8
	.type	.L.str.266,@object              # @.str.266
	.p2align	3, 0x0
.L.str.266:
	.asciz	"benchAutoVecForLoopTC15"
	.size	.L.str.266, 24

	.type	_ZL29benchmark_uniq_135_benchmark_,@object # @_ZL29benchmark_uniq_135_benchmark_
	.local	_ZL29benchmark_uniq_135_benchmark_
	.comm	_ZL29benchmark_uniq_135_benchmark_,8,8
	.type	.L.str.268,@object              # @.str.268
	.p2align	3, 0x0
.L.str.268:
	.asciz	"benchForIC1VW4LoopTC15"
	.size	.L.str.268, 23

	.type	_ZL29benchmark_uniq_136_benchmark_,@object # @_ZL29benchmark_uniq_136_benchmark_
	.local	_ZL29benchmark_uniq_136_benchmark_
	.comm	_ZL29benchmark_uniq_136_benchmark_,8,8
	.type	.L.str.270,@object              # @.str.270
	.p2align	3, 0x0
.L.str.270:
	.asciz	"benchForIC2VW4LoopTC15"
	.size	.L.str.270, 23

	.type	_ZL29benchmark_uniq_137_benchmark_,@object # @_ZL29benchmark_uniq_137_benchmark_
	.local	_ZL29benchmark_uniq_137_benchmark_
	.comm	_ZL29benchmark_uniq_137_benchmark_,8,8
	.type	.L.str.272,@object              # @.str.272
	.p2align	3, 0x0
.L.str.272:
	.asciz	"benchForIC4VW4LoopTC15"
	.size	.L.str.272, 23

	.type	_ZL29benchmark_uniq_138_benchmark_,@object # @_ZL29benchmark_uniq_138_benchmark_
	.local	_ZL29benchmark_uniq_138_benchmark_
	.comm	_ZL29benchmark_uniq_138_benchmark_,8,8
	.type	.L.str.274,@object              # @.str.274
	.p2align	3, 0x0
.L.str.274:
	.asciz	"benchForLoopWithReductionAutoVecTC15"
	.size	.L.str.274, 37

	.type	_ZL29benchmark_uniq_139_benchmark_,@object # @_ZL29benchmark_uniq_139_benchmark_
	.local	_ZL29benchmark_uniq_139_benchmark_
	.comm	_ZL29benchmark_uniq_139_benchmark_,8,8
	.type	.L.str.276,@object              # @.str.276
	.p2align	3, 0x0
.L.str.276:
	.asciz	"benchForIC1VW4LoopWithReductionTC15"
	.size	.L.str.276, 36

	.type	_ZL29benchmark_uniq_140_benchmark_,@object # @_ZL29benchmark_uniq_140_benchmark_
	.local	_ZL29benchmark_uniq_140_benchmark_
	.comm	_ZL29benchmark_uniq_140_benchmark_,8,8
	.type	.L.str.278,@object              # @.str.278
	.p2align	3, 0x0
.L.str.278:
	.asciz	"benchForIC2VW4LoopWithReductionTC15"
	.size	.L.str.278, 36

	.type	_ZL29benchmark_uniq_141_benchmark_,@object # @_ZL29benchmark_uniq_141_benchmark_
	.local	_ZL29benchmark_uniq_141_benchmark_
	.comm	_ZL29benchmark_uniq_141_benchmark_,8,8
	.type	.L.str.280,@object              # @.str.280
	.p2align	3, 0x0
.L.str.280:
	.asciz	"benchForIC4VW4LoopWithReductionTC15"
	.size	.L.str.280, 36

	.type	_ZL29benchmark_uniq_142_benchmark_,@object # @_ZL29benchmark_uniq_142_benchmark_
	.local	_ZL29benchmark_uniq_142_benchmark_
	.comm	_ZL29benchmark_uniq_142_benchmark_,8,8
	.type	.L.str.282,@object              # @.str.282
	.p2align	3, 0x0
.L.str.282:
	.asciz	"benchForIC1VW1LoopWithReductionTC15"
	.size	.L.str.282, 36

	.type	_ZL29benchmark_uniq_143_benchmark_,@object # @_ZL29benchmark_uniq_143_benchmark_
	.local	_ZL29benchmark_uniq_143_benchmark_
	.comm	_ZL29benchmark_uniq_143_benchmark_,8,8
	.type	.L.str.284,@object              # @.str.284
	.p2align	3, 0x0
.L.str.284:
	.asciz	"benchForIC2VW1LoopWithReductionTC15"
	.size	.L.str.284, 36

	.type	_ZL29benchmark_uniq_144_benchmark_,@object # @_ZL29benchmark_uniq_144_benchmark_
	.local	_ZL29benchmark_uniq_144_benchmark_
	.comm	_ZL29benchmark_uniq_144_benchmark_,8,8
	.type	.L.str.286,@object              # @.str.286
	.p2align	3, 0x0
.L.str.286:
	.asciz	"benchForIC4VW1LoopWithReductionTC15"
	.size	.L.str.286, 36

	.type	_ZL29benchmark_uniq_145_benchmark_,@object # @_ZL29benchmark_uniq_145_benchmark_
	.local	_ZL29benchmark_uniq_145_benchmark_
	.comm	_ZL29benchmark_uniq_145_benchmark_,8,8
	.type	.L.str.288,@object              # @.str.288
	.p2align	3, 0x0
.L.str.288:
	.asciz	"benchAutoVecForBigLoopTC15"
	.size	.L.str.288, 27

	.type	_ZL29benchmark_uniq_146_benchmark_,@object # @_ZL29benchmark_uniq_146_benchmark_
	.local	_ZL29benchmark_uniq_146_benchmark_
	.comm	_ZL29benchmark_uniq_146_benchmark_,8,8
	.type	.L.str.290,@object              # @.str.290
	.p2align	3, 0x0
.L.str.290:
	.asciz	"benchForIC1VW4BigLoopTC15"
	.size	.L.str.290, 26

	.type	_ZL29benchmark_uniq_147_benchmark_,@object # @_ZL29benchmark_uniq_147_benchmark_
	.local	_ZL29benchmark_uniq_147_benchmark_
	.comm	_ZL29benchmark_uniq_147_benchmark_,8,8
	.type	.L.str.292,@object              # @.str.292
	.p2align	3, 0x0
.L.str.292:
	.asciz	"benchForIC2VW4BigLoopTC15"
	.size	.L.str.292, 26

	.type	_ZL29benchmark_uniq_148_benchmark_,@object # @_ZL29benchmark_uniq_148_benchmark_
	.local	_ZL29benchmark_uniq_148_benchmark_
	.comm	_ZL29benchmark_uniq_148_benchmark_,8,8
	.type	.L.str.294,@object              # @.str.294
	.p2align	3, 0x0
.L.str.294:
	.asciz	"benchForIC4VW4BigLoopTC15"
	.size	.L.str.294, 26

	.type	_ZL29benchmark_uniq_149_benchmark_,@object # @_ZL29benchmark_uniq_149_benchmark_
	.local	_ZL29benchmark_uniq_149_benchmark_
	.comm	_ZL29benchmark_uniq_149_benchmark_,8,8
	.type	.L.str.296,@object              # @.str.296
	.p2align	3, 0x0
.L.str.296:
	.asciz	"benchForBigLoopWithReductionAutoVecTC15"
	.size	.L.str.296, 40

	.type	_ZL29benchmark_uniq_150_benchmark_,@object # @_ZL29benchmark_uniq_150_benchmark_
	.local	_ZL29benchmark_uniq_150_benchmark_
	.comm	_ZL29benchmark_uniq_150_benchmark_,8,8
	.type	.L.str.298,@object              # @.str.298
	.p2align	3, 0x0
.L.str.298:
	.asciz	"benchForIC1VW4BigLoopWithReductionTC15"
	.size	.L.str.298, 39

	.type	_ZL29benchmark_uniq_151_benchmark_,@object # @_ZL29benchmark_uniq_151_benchmark_
	.local	_ZL29benchmark_uniq_151_benchmark_
	.comm	_ZL29benchmark_uniq_151_benchmark_,8,8
	.type	.L.str.300,@object              # @.str.300
	.p2align	3, 0x0
.L.str.300:
	.asciz	"benchForIC2VW4BigLoopWithReductionTC15"
	.size	.L.str.300, 39

	.type	_ZL29benchmark_uniq_152_benchmark_,@object # @_ZL29benchmark_uniq_152_benchmark_
	.local	_ZL29benchmark_uniq_152_benchmark_
	.comm	_ZL29benchmark_uniq_152_benchmark_,8,8
	.type	.L.str.302,@object              # @.str.302
	.p2align	3, 0x0
.L.str.302:
	.asciz	"benchForIC4VW4BigLoopWithReductionTC15"
	.size	.L.str.302, 39

	.type	_ZL29benchmark_uniq_153_benchmark_,@object # @_ZL29benchmark_uniq_153_benchmark_
	.local	_ZL29benchmark_uniq_153_benchmark_
	.comm	_ZL29benchmark_uniq_153_benchmark_,8,8
	.type	.L.str.304,@object              # @.str.304
	.p2align	3, 0x0
.L.str.304:
	.asciz	"benchForIC1VW1BigLoopWithReductionTC15"
	.size	.L.str.304, 39

	.type	_ZL29benchmark_uniq_154_benchmark_,@object # @_ZL29benchmark_uniq_154_benchmark_
	.local	_ZL29benchmark_uniq_154_benchmark_
	.comm	_ZL29benchmark_uniq_154_benchmark_,8,8
	.type	.L.str.306,@object              # @.str.306
	.p2align	3, 0x0
.L.str.306:
	.asciz	"benchForIC2VW1BigLoopWithReductionTC15"
	.size	.L.str.306, 39

	.type	_ZL29benchmark_uniq_155_benchmark_,@object # @_ZL29benchmark_uniq_155_benchmark_
	.local	_ZL29benchmark_uniq_155_benchmark_
	.comm	_ZL29benchmark_uniq_155_benchmark_,8,8
	.type	.L.str.308,@object              # @.str.308
	.p2align	3, 0x0
.L.str.308:
	.asciz	"benchForIC4VW1BigLoopWithReductionTC15"
	.size	.L.str.308, 39

	.type	_ZL29benchmark_uniq_156_benchmark_,@object # @_ZL29benchmark_uniq_156_benchmark_
	.local	_ZL29benchmark_uniq_156_benchmark_
	.comm	_ZL29benchmark_uniq_156_benchmark_,8,8
	.type	.L.str.310,@object              # @.str.310
	.p2align	3, 0x0
.L.str.310:
	.asciz	"benchAutoVecForLoopTC16"
	.size	.L.str.310, 24

	.type	_ZL29benchmark_uniq_157_benchmark_,@object # @_ZL29benchmark_uniq_157_benchmark_
	.local	_ZL29benchmark_uniq_157_benchmark_
	.comm	_ZL29benchmark_uniq_157_benchmark_,8,8
	.type	.L.str.312,@object              # @.str.312
	.p2align	3, 0x0
.L.str.312:
	.asciz	"benchForIC1VW4LoopTC16"
	.size	.L.str.312, 23

	.type	_ZL29benchmark_uniq_158_benchmark_,@object # @_ZL29benchmark_uniq_158_benchmark_
	.local	_ZL29benchmark_uniq_158_benchmark_
	.comm	_ZL29benchmark_uniq_158_benchmark_,8,8
	.type	.L.str.314,@object              # @.str.314
	.p2align	3, 0x0
.L.str.314:
	.asciz	"benchForIC2VW4LoopTC16"
	.size	.L.str.314, 23

	.type	_ZL29benchmark_uniq_159_benchmark_,@object # @_ZL29benchmark_uniq_159_benchmark_
	.local	_ZL29benchmark_uniq_159_benchmark_
	.comm	_ZL29benchmark_uniq_159_benchmark_,8,8
	.type	.L.str.316,@object              # @.str.316
	.p2align	3, 0x0
.L.str.316:
	.asciz	"benchForIC4VW4LoopTC16"
	.size	.L.str.316, 23

	.type	_ZL29benchmark_uniq_160_benchmark_,@object # @_ZL29benchmark_uniq_160_benchmark_
	.local	_ZL29benchmark_uniq_160_benchmark_
	.comm	_ZL29benchmark_uniq_160_benchmark_,8,8
	.type	.L.str.318,@object              # @.str.318
	.p2align	3, 0x0
.L.str.318:
	.asciz	"benchForLoopWithReductionAutoVecTC16"
	.size	.L.str.318, 37

	.type	_ZL29benchmark_uniq_161_benchmark_,@object # @_ZL29benchmark_uniq_161_benchmark_
	.local	_ZL29benchmark_uniq_161_benchmark_
	.comm	_ZL29benchmark_uniq_161_benchmark_,8,8
	.type	.L.str.320,@object              # @.str.320
	.p2align	3, 0x0
.L.str.320:
	.asciz	"benchForIC1VW4LoopWithReductionTC16"
	.size	.L.str.320, 36

	.type	_ZL29benchmark_uniq_162_benchmark_,@object # @_ZL29benchmark_uniq_162_benchmark_
	.local	_ZL29benchmark_uniq_162_benchmark_
	.comm	_ZL29benchmark_uniq_162_benchmark_,8,8
	.type	.L.str.322,@object              # @.str.322
	.p2align	3, 0x0
.L.str.322:
	.asciz	"benchForIC2VW4LoopWithReductionTC16"
	.size	.L.str.322, 36

	.type	_ZL29benchmark_uniq_163_benchmark_,@object # @_ZL29benchmark_uniq_163_benchmark_
	.local	_ZL29benchmark_uniq_163_benchmark_
	.comm	_ZL29benchmark_uniq_163_benchmark_,8,8
	.type	.L.str.324,@object              # @.str.324
	.p2align	3, 0x0
.L.str.324:
	.asciz	"benchForIC4VW4LoopWithReductionTC16"
	.size	.L.str.324, 36

	.type	_ZL29benchmark_uniq_164_benchmark_,@object # @_ZL29benchmark_uniq_164_benchmark_
	.local	_ZL29benchmark_uniq_164_benchmark_
	.comm	_ZL29benchmark_uniq_164_benchmark_,8,8
	.type	.L.str.326,@object              # @.str.326
	.p2align	3, 0x0
.L.str.326:
	.asciz	"benchForIC1VW1LoopWithReductionTC16"
	.size	.L.str.326, 36

	.type	_ZL29benchmark_uniq_165_benchmark_,@object # @_ZL29benchmark_uniq_165_benchmark_
	.local	_ZL29benchmark_uniq_165_benchmark_
	.comm	_ZL29benchmark_uniq_165_benchmark_,8,8
	.type	.L.str.328,@object              # @.str.328
	.p2align	3, 0x0
.L.str.328:
	.asciz	"benchForIC2VW1LoopWithReductionTC16"
	.size	.L.str.328, 36

	.type	_ZL29benchmark_uniq_166_benchmark_,@object # @_ZL29benchmark_uniq_166_benchmark_
	.local	_ZL29benchmark_uniq_166_benchmark_
	.comm	_ZL29benchmark_uniq_166_benchmark_,8,8
	.type	.L.str.330,@object              # @.str.330
	.p2align	3, 0x0
.L.str.330:
	.asciz	"benchForIC4VW1LoopWithReductionTC16"
	.size	.L.str.330, 36

	.type	_ZL29benchmark_uniq_167_benchmark_,@object # @_ZL29benchmark_uniq_167_benchmark_
	.local	_ZL29benchmark_uniq_167_benchmark_
	.comm	_ZL29benchmark_uniq_167_benchmark_,8,8
	.type	.L.str.332,@object              # @.str.332
	.p2align	3, 0x0
.L.str.332:
	.asciz	"benchAutoVecForBigLoopTC16"
	.size	.L.str.332, 27

	.type	_ZL29benchmark_uniq_168_benchmark_,@object # @_ZL29benchmark_uniq_168_benchmark_
	.local	_ZL29benchmark_uniq_168_benchmark_
	.comm	_ZL29benchmark_uniq_168_benchmark_,8,8
	.type	.L.str.334,@object              # @.str.334
	.p2align	3, 0x0
.L.str.334:
	.asciz	"benchForIC1VW4BigLoopTC16"
	.size	.L.str.334, 26

	.type	_ZL29benchmark_uniq_169_benchmark_,@object # @_ZL29benchmark_uniq_169_benchmark_
	.local	_ZL29benchmark_uniq_169_benchmark_
	.comm	_ZL29benchmark_uniq_169_benchmark_,8,8
	.type	.L.str.336,@object              # @.str.336
	.p2align	3, 0x0
.L.str.336:
	.asciz	"benchForIC2VW4BigLoopTC16"
	.size	.L.str.336, 26

	.type	_ZL29benchmark_uniq_170_benchmark_,@object # @_ZL29benchmark_uniq_170_benchmark_
	.local	_ZL29benchmark_uniq_170_benchmark_
	.comm	_ZL29benchmark_uniq_170_benchmark_,8,8
	.type	.L.str.338,@object              # @.str.338
	.p2align	3, 0x0
.L.str.338:
	.asciz	"benchForIC4VW4BigLoopTC16"
	.size	.L.str.338, 26

	.type	_ZL29benchmark_uniq_171_benchmark_,@object # @_ZL29benchmark_uniq_171_benchmark_
	.local	_ZL29benchmark_uniq_171_benchmark_
	.comm	_ZL29benchmark_uniq_171_benchmark_,8,8
	.type	.L.str.340,@object              # @.str.340
	.p2align	3, 0x0
.L.str.340:
	.asciz	"benchForBigLoopWithReductionAutoVecTC16"
	.size	.L.str.340, 40

	.type	_ZL29benchmark_uniq_172_benchmark_,@object # @_ZL29benchmark_uniq_172_benchmark_
	.local	_ZL29benchmark_uniq_172_benchmark_
	.comm	_ZL29benchmark_uniq_172_benchmark_,8,8
	.type	.L.str.342,@object              # @.str.342
	.p2align	3, 0x0
.L.str.342:
	.asciz	"benchForIC1VW4BigLoopWithReductionTC16"
	.size	.L.str.342, 39

	.type	_ZL29benchmark_uniq_173_benchmark_,@object # @_ZL29benchmark_uniq_173_benchmark_
	.local	_ZL29benchmark_uniq_173_benchmark_
	.comm	_ZL29benchmark_uniq_173_benchmark_,8,8
	.type	.L.str.344,@object              # @.str.344
	.p2align	3, 0x0
.L.str.344:
	.asciz	"benchForIC2VW4BigLoopWithReductionTC16"
	.size	.L.str.344, 39

	.type	_ZL29benchmark_uniq_174_benchmark_,@object # @_ZL29benchmark_uniq_174_benchmark_
	.local	_ZL29benchmark_uniq_174_benchmark_
	.comm	_ZL29benchmark_uniq_174_benchmark_,8,8
	.type	.L.str.346,@object              # @.str.346
	.p2align	3, 0x0
.L.str.346:
	.asciz	"benchForIC4VW4BigLoopWithReductionTC16"
	.size	.L.str.346, 39

	.type	_ZL29benchmark_uniq_175_benchmark_,@object # @_ZL29benchmark_uniq_175_benchmark_
	.local	_ZL29benchmark_uniq_175_benchmark_
	.comm	_ZL29benchmark_uniq_175_benchmark_,8,8
	.type	.L.str.348,@object              # @.str.348
	.p2align	3, 0x0
.L.str.348:
	.asciz	"benchForIC1VW1BigLoopWithReductionTC16"
	.size	.L.str.348, 39

	.type	_ZL29benchmark_uniq_176_benchmark_,@object # @_ZL29benchmark_uniq_176_benchmark_
	.local	_ZL29benchmark_uniq_176_benchmark_
	.comm	_ZL29benchmark_uniq_176_benchmark_,8,8
	.type	.L.str.350,@object              # @.str.350
	.p2align	3, 0x0
.L.str.350:
	.asciz	"benchForIC2VW1BigLoopWithReductionTC16"
	.size	.L.str.350, 39

	.type	_ZL29benchmark_uniq_177_benchmark_,@object # @_ZL29benchmark_uniq_177_benchmark_
	.local	_ZL29benchmark_uniq_177_benchmark_
	.comm	_ZL29benchmark_uniq_177_benchmark_,8,8
	.type	.L.str.352,@object              # @.str.352
	.p2align	3, 0x0
.L.str.352:
	.asciz	"benchForIC4VW1BigLoopWithReductionTC16"
	.size	.L.str.352, 39

	.type	_ZL29benchmark_uniq_178_benchmark_,@object # @_ZL29benchmark_uniq_178_benchmark_
	.local	_ZL29benchmark_uniq_178_benchmark_
	.comm	_ZL29benchmark_uniq_178_benchmark_,8,8
	.type	.L.str.354,@object              # @.str.354
	.p2align	3, 0x0
.L.str.354:
	.asciz	"benchAutoVecForLoopTC31"
	.size	.L.str.354, 24

	.type	_ZL29benchmark_uniq_179_benchmark_,@object # @_ZL29benchmark_uniq_179_benchmark_
	.local	_ZL29benchmark_uniq_179_benchmark_
	.comm	_ZL29benchmark_uniq_179_benchmark_,8,8
	.type	.L.str.356,@object              # @.str.356
	.p2align	3, 0x0
.L.str.356:
	.asciz	"benchForIC1VW4LoopTC31"
	.size	.L.str.356, 23

	.type	_ZL29benchmark_uniq_180_benchmark_,@object # @_ZL29benchmark_uniq_180_benchmark_
	.local	_ZL29benchmark_uniq_180_benchmark_
	.comm	_ZL29benchmark_uniq_180_benchmark_,8,8
	.type	.L.str.358,@object              # @.str.358
	.p2align	3, 0x0
.L.str.358:
	.asciz	"benchForIC2VW4LoopTC31"
	.size	.L.str.358, 23

	.type	_ZL29benchmark_uniq_181_benchmark_,@object # @_ZL29benchmark_uniq_181_benchmark_
	.local	_ZL29benchmark_uniq_181_benchmark_
	.comm	_ZL29benchmark_uniq_181_benchmark_,8,8
	.type	.L.str.360,@object              # @.str.360
	.p2align	3, 0x0
.L.str.360:
	.asciz	"benchForIC4VW4LoopTC31"
	.size	.L.str.360, 23

	.type	_ZL29benchmark_uniq_182_benchmark_,@object # @_ZL29benchmark_uniq_182_benchmark_
	.local	_ZL29benchmark_uniq_182_benchmark_
	.comm	_ZL29benchmark_uniq_182_benchmark_,8,8
	.type	.L.str.362,@object              # @.str.362
	.p2align	3, 0x0
.L.str.362:
	.asciz	"benchForLoopWithReductionAutoVecTC31"
	.size	.L.str.362, 37

	.type	_ZL29benchmark_uniq_183_benchmark_,@object # @_ZL29benchmark_uniq_183_benchmark_
	.local	_ZL29benchmark_uniq_183_benchmark_
	.comm	_ZL29benchmark_uniq_183_benchmark_,8,8
	.type	.L.str.364,@object              # @.str.364
	.p2align	3, 0x0
.L.str.364:
	.asciz	"benchForIC1VW4LoopWithReductionTC31"
	.size	.L.str.364, 36

	.type	_ZL29benchmark_uniq_184_benchmark_,@object # @_ZL29benchmark_uniq_184_benchmark_
	.local	_ZL29benchmark_uniq_184_benchmark_
	.comm	_ZL29benchmark_uniq_184_benchmark_,8,8
	.type	.L.str.366,@object              # @.str.366
	.p2align	3, 0x0
.L.str.366:
	.asciz	"benchForIC2VW4LoopWithReductionTC31"
	.size	.L.str.366, 36

	.type	_ZL29benchmark_uniq_185_benchmark_,@object # @_ZL29benchmark_uniq_185_benchmark_
	.local	_ZL29benchmark_uniq_185_benchmark_
	.comm	_ZL29benchmark_uniq_185_benchmark_,8,8
	.type	.L.str.368,@object              # @.str.368
	.p2align	3, 0x0
.L.str.368:
	.asciz	"benchForIC4VW4LoopWithReductionTC31"
	.size	.L.str.368, 36

	.type	_ZL29benchmark_uniq_186_benchmark_,@object # @_ZL29benchmark_uniq_186_benchmark_
	.local	_ZL29benchmark_uniq_186_benchmark_
	.comm	_ZL29benchmark_uniq_186_benchmark_,8,8
	.type	.L.str.370,@object              # @.str.370
	.p2align	3, 0x0
.L.str.370:
	.asciz	"benchForIC1VW1LoopWithReductionTC31"
	.size	.L.str.370, 36

	.type	_ZL29benchmark_uniq_187_benchmark_,@object # @_ZL29benchmark_uniq_187_benchmark_
	.local	_ZL29benchmark_uniq_187_benchmark_
	.comm	_ZL29benchmark_uniq_187_benchmark_,8,8
	.type	.L.str.372,@object              # @.str.372
	.p2align	3, 0x0
.L.str.372:
	.asciz	"benchForIC2VW1LoopWithReductionTC31"
	.size	.L.str.372, 36

	.type	_ZL29benchmark_uniq_188_benchmark_,@object # @_ZL29benchmark_uniq_188_benchmark_
	.local	_ZL29benchmark_uniq_188_benchmark_
	.comm	_ZL29benchmark_uniq_188_benchmark_,8,8
	.type	.L.str.374,@object              # @.str.374
	.p2align	3, 0x0
.L.str.374:
	.asciz	"benchForIC4VW1LoopWithReductionTC31"
	.size	.L.str.374, 36

	.type	_ZL29benchmark_uniq_189_benchmark_,@object # @_ZL29benchmark_uniq_189_benchmark_
	.local	_ZL29benchmark_uniq_189_benchmark_
	.comm	_ZL29benchmark_uniq_189_benchmark_,8,8
	.type	.L.str.376,@object              # @.str.376
	.p2align	3, 0x0
.L.str.376:
	.asciz	"benchAutoVecForBigLoopTC31"
	.size	.L.str.376, 27

	.type	_ZL29benchmark_uniq_190_benchmark_,@object # @_ZL29benchmark_uniq_190_benchmark_
	.local	_ZL29benchmark_uniq_190_benchmark_
	.comm	_ZL29benchmark_uniq_190_benchmark_,8,8
	.type	.L.str.378,@object              # @.str.378
	.p2align	3, 0x0
.L.str.378:
	.asciz	"benchForIC1VW4BigLoopTC31"
	.size	.L.str.378, 26

	.type	_ZL29benchmark_uniq_191_benchmark_,@object # @_ZL29benchmark_uniq_191_benchmark_
	.local	_ZL29benchmark_uniq_191_benchmark_
	.comm	_ZL29benchmark_uniq_191_benchmark_,8,8
	.type	.L.str.380,@object              # @.str.380
	.p2align	3, 0x0
.L.str.380:
	.asciz	"benchForIC2VW4BigLoopTC31"
	.size	.L.str.380, 26

	.type	_ZL29benchmark_uniq_192_benchmark_,@object # @_ZL29benchmark_uniq_192_benchmark_
	.local	_ZL29benchmark_uniq_192_benchmark_
	.comm	_ZL29benchmark_uniq_192_benchmark_,8,8
	.type	.L.str.382,@object              # @.str.382
	.p2align	3, 0x0
.L.str.382:
	.asciz	"benchForIC4VW4BigLoopTC31"
	.size	.L.str.382, 26

	.type	_ZL29benchmark_uniq_193_benchmark_,@object # @_ZL29benchmark_uniq_193_benchmark_
	.local	_ZL29benchmark_uniq_193_benchmark_
	.comm	_ZL29benchmark_uniq_193_benchmark_,8,8
	.type	.L.str.384,@object              # @.str.384
	.p2align	3, 0x0
.L.str.384:
	.asciz	"benchForBigLoopWithReductionAutoVecTC31"
	.size	.L.str.384, 40

	.type	_ZL29benchmark_uniq_194_benchmark_,@object # @_ZL29benchmark_uniq_194_benchmark_
	.local	_ZL29benchmark_uniq_194_benchmark_
	.comm	_ZL29benchmark_uniq_194_benchmark_,8,8
	.type	.L.str.386,@object              # @.str.386
	.p2align	3, 0x0
.L.str.386:
	.asciz	"benchForIC1VW4BigLoopWithReductionTC31"
	.size	.L.str.386, 39

	.type	_ZL29benchmark_uniq_195_benchmark_,@object # @_ZL29benchmark_uniq_195_benchmark_
	.local	_ZL29benchmark_uniq_195_benchmark_
	.comm	_ZL29benchmark_uniq_195_benchmark_,8,8
	.type	.L.str.388,@object              # @.str.388
	.p2align	3, 0x0
.L.str.388:
	.asciz	"benchForIC2VW4BigLoopWithReductionTC31"
	.size	.L.str.388, 39

	.type	_ZL29benchmark_uniq_196_benchmark_,@object # @_ZL29benchmark_uniq_196_benchmark_
	.local	_ZL29benchmark_uniq_196_benchmark_
	.comm	_ZL29benchmark_uniq_196_benchmark_,8,8
	.type	.L.str.390,@object              # @.str.390
	.p2align	3, 0x0
.L.str.390:
	.asciz	"benchForIC4VW4BigLoopWithReductionTC31"
	.size	.L.str.390, 39

	.type	_ZL29benchmark_uniq_197_benchmark_,@object # @_ZL29benchmark_uniq_197_benchmark_
	.local	_ZL29benchmark_uniq_197_benchmark_
	.comm	_ZL29benchmark_uniq_197_benchmark_,8,8
	.type	.L.str.392,@object              # @.str.392
	.p2align	3, 0x0
.L.str.392:
	.asciz	"benchForIC1VW1BigLoopWithReductionTC31"
	.size	.L.str.392, 39

	.type	_ZL29benchmark_uniq_198_benchmark_,@object # @_ZL29benchmark_uniq_198_benchmark_
	.local	_ZL29benchmark_uniq_198_benchmark_
	.comm	_ZL29benchmark_uniq_198_benchmark_,8,8
	.type	.L.str.394,@object              # @.str.394
	.p2align	3, 0x0
.L.str.394:
	.asciz	"benchForIC2VW1BigLoopWithReductionTC31"
	.size	.L.str.394, 39

	.type	_ZL29benchmark_uniq_199_benchmark_,@object # @_ZL29benchmark_uniq_199_benchmark_
	.local	_ZL29benchmark_uniq_199_benchmark_
	.comm	_ZL29benchmark_uniq_199_benchmark_,8,8
	.type	.L.str.396,@object              # @.str.396
	.p2align	3, 0x0
.L.str.396:
	.asciz	"benchForIC4VW1BigLoopWithReductionTC31"
	.size	.L.str.396, 39

	.type	_ZL29benchmark_uniq_200_benchmark_,@object # @_ZL29benchmark_uniq_200_benchmark_
	.local	_ZL29benchmark_uniq_200_benchmark_
	.comm	_ZL29benchmark_uniq_200_benchmark_,8,8
	.type	.L.str.398,@object              # @.str.398
	.p2align	3, 0x0
.L.str.398:
	.asciz	"benchAutoVecForLoopTC32"
	.size	.L.str.398, 24

	.type	_ZL29benchmark_uniq_201_benchmark_,@object # @_ZL29benchmark_uniq_201_benchmark_
	.local	_ZL29benchmark_uniq_201_benchmark_
	.comm	_ZL29benchmark_uniq_201_benchmark_,8,8
	.type	.L.str.400,@object              # @.str.400
	.p2align	3, 0x0
.L.str.400:
	.asciz	"benchForIC1VW4LoopTC32"
	.size	.L.str.400, 23

	.type	_ZL29benchmark_uniq_202_benchmark_,@object # @_ZL29benchmark_uniq_202_benchmark_
	.local	_ZL29benchmark_uniq_202_benchmark_
	.comm	_ZL29benchmark_uniq_202_benchmark_,8,8
	.type	.L.str.402,@object              # @.str.402
	.p2align	3, 0x0
.L.str.402:
	.asciz	"benchForIC2VW4LoopTC32"
	.size	.L.str.402, 23

	.type	_ZL29benchmark_uniq_203_benchmark_,@object # @_ZL29benchmark_uniq_203_benchmark_
	.local	_ZL29benchmark_uniq_203_benchmark_
	.comm	_ZL29benchmark_uniq_203_benchmark_,8,8
	.type	.L.str.404,@object              # @.str.404
	.p2align	3, 0x0
.L.str.404:
	.asciz	"benchForIC4VW4LoopTC32"
	.size	.L.str.404, 23

	.type	_ZL29benchmark_uniq_204_benchmark_,@object # @_ZL29benchmark_uniq_204_benchmark_
	.local	_ZL29benchmark_uniq_204_benchmark_
	.comm	_ZL29benchmark_uniq_204_benchmark_,8,8
	.type	.L.str.406,@object              # @.str.406
	.p2align	3, 0x0
.L.str.406:
	.asciz	"benchForLoopWithReductionAutoVecTC32"
	.size	.L.str.406, 37

	.type	_ZL29benchmark_uniq_205_benchmark_,@object # @_ZL29benchmark_uniq_205_benchmark_
	.local	_ZL29benchmark_uniq_205_benchmark_
	.comm	_ZL29benchmark_uniq_205_benchmark_,8,8
	.type	.L.str.408,@object              # @.str.408
	.p2align	3, 0x0
.L.str.408:
	.asciz	"benchForIC1VW4LoopWithReductionTC32"
	.size	.L.str.408, 36

	.type	_ZL29benchmark_uniq_206_benchmark_,@object # @_ZL29benchmark_uniq_206_benchmark_
	.local	_ZL29benchmark_uniq_206_benchmark_
	.comm	_ZL29benchmark_uniq_206_benchmark_,8,8
	.type	.L.str.410,@object              # @.str.410
	.p2align	3, 0x0
.L.str.410:
	.asciz	"benchForIC2VW4LoopWithReductionTC32"
	.size	.L.str.410, 36

	.type	_ZL29benchmark_uniq_207_benchmark_,@object # @_ZL29benchmark_uniq_207_benchmark_
	.local	_ZL29benchmark_uniq_207_benchmark_
	.comm	_ZL29benchmark_uniq_207_benchmark_,8,8
	.type	.L.str.412,@object              # @.str.412
	.p2align	3, 0x0
.L.str.412:
	.asciz	"benchForIC4VW4LoopWithReductionTC32"
	.size	.L.str.412, 36

	.type	_ZL29benchmark_uniq_208_benchmark_,@object # @_ZL29benchmark_uniq_208_benchmark_
	.local	_ZL29benchmark_uniq_208_benchmark_
	.comm	_ZL29benchmark_uniq_208_benchmark_,8,8
	.type	.L.str.414,@object              # @.str.414
	.p2align	3, 0x0
.L.str.414:
	.asciz	"benchForIC1VW1LoopWithReductionTC32"
	.size	.L.str.414, 36

	.type	_ZL29benchmark_uniq_209_benchmark_,@object # @_ZL29benchmark_uniq_209_benchmark_
	.local	_ZL29benchmark_uniq_209_benchmark_
	.comm	_ZL29benchmark_uniq_209_benchmark_,8,8
	.type	.L.str.416,@object              # @.str.416
	.p2align	3, 0x0
.L.str.416:
	.asciz	"benchForIC2VW1LoopWithReductionTC32"
	.size	.L.str.416, 36

	.type	_ZL29benchmark_uniq_210_benchmark_,@object # @_ZL29benchmark_uniq_210_benchmark_
	.local	_ZL29benchmark_uniq_210_benchmark_
	.comm	_ZL29benchmark_uniq_210_benchmark_,8,8
	.type	.L.str.418,@object              # @.str.418
	.p2align	3, 0x0
.L.str.418:
	.asciz	"benchForIC4VW1LoopWithReductionTC32"
	.size	.L.str.418, 36

	.type	_ZL29benchmark_uniq_211_benchmark_,@object # @_ZL29benchmark_uniq_211_benchmark_
	.local	_ZL29benchmark_uniq_211_benchmark_
	.comm	_ZL29benchmark_uniq_211_benchmark_,8,8
	.type	.L.str.420,@object              # @.str.420
	.p2align	3, 0x0
.L.str.420:
	.asciz	"benchAutoVecForBigLoopTC32"
	.size	.L.str.420, 27

	.type	_ZL29benchmark_uniq_212_benchmark_,@object # @_ZL29benchmark_uniq_212_benchmark_
	.local	_ZL29benchmark_uniq_212_benchmark_
	.comm	_ZL29benchmark_uniq_212_benchmark_,8,8
	.type	.L.str.422,@object              # @.str.422
	.p2align	3, 0x0
.L.str.422:
	.asciz	"benchForIC1VW4BigLoopTC32"
	.size	.L.str.422, 26

	.type	_ZL29benchmark_uniq_213_benchmark_,@object # @_ZL29benchmark_uniq_213_benchmark_
	.local	_ZL29benchmark_uniq_213_benchmark_
	.comm	_ZL29benchmark_uniq_213_benchmark_,8,8
	.type	.L.str.424,@object              # @.str.424
	.p2align	3, 0x0
.L.str.424:
	.asciz	"benchForIC2VW4BigLoopTC32"
	.size	.L.str.424, 26

	.type	_ZL29benchmark_uniq_214_benchmark_,@object # @_ZL29benchmark_uniq_214_benchmark_
	.local	_ZL29benchmark_uniq_214_benchmark_
	.comm	_ZL29benchmark_uniq_214_benchmark_,8,8
	.type	.L.str.426,@object              # @.str.426
	.p2align	3, 0x0
.L.str.426:
	.asciz	"benchForIC4VW4BigLoopTC32"
	.size	.L.str.426, 26

	.type	_ZL29benchmark_uniq_215_benchmark_,@object # @_ZL29benchmark_uniq_215_benchmark_
	.local	_ZL29benchmark_uniq_215_benchmark_
	.comm	_ZL29benchmark_uniq_215_benchmark_,8,8
	.type	.L.str.428,@object              # @.str.428
	.p2align	3, 0x0
.L.str.428:
	.asciz	"benchForBigLoopWithReductionAutoVecTC32"
	.size	.L.str.428, 40

	.type	_ZL29benchmark_uniq_216_benchmark_,@object # @_ZL29benchmark_uniq_216_benchmark_
	.local	_ZL29benchmark_uniq_216_benchmark_
	.comm	_ZL29benchmark_uniq_216_benchmark_,8,8
	.type	.L.str.430,@object              # @.str.430
	.p2align	3, 0x0
.L.str.430:
	.asciz	"benchForIC1VW4BigLoopWithReductionTC32"
	.size	.L.str.430, 39

	.type	_ZL29benchmark_uniq_217_benchmark_,@object # @_ZL29benchmark_uniq_217_benchmark_
	.local	_ZL29benchmark_uniq_217_benchmark_
	.comm	_ZL29benchmark_uniq_217_benchmark_,8,8
	.type	.L.str.432,@object              # @.str.432
	.p2align	3, 0x0
.L.str.432:
	.asciz	"benchForIC2VW4BigLoopWithReductionTC32"
	.size	.L.str.432, 39

	.type	_ZL29benchmark_uniq_218_benchmark_,@object # @_ZL29benchmark_uniq_218_benchmark_
	.local	_ZL29benchmark_uniq_218_benchmark_
	.comm	_ZL29benchmark_uniq_218_benchmark_,8,8
	.type	.L.str.434,@object              # @.str.434
	.p2align	3, 0x0
.L.str.434:
	.asciz	"benchForIC4VW4BigLoopWithReductionTC32"
	.size	.L.str.434, 39

	.type	_ZL29benchmark_uniq_219_benchmark_,@object # @_ZL29benchmark_uniq_219_benchmark_
	.local	_ZL29benchmark_uniq_219_benchmark_
	.comm	_ZL29benchmark_uniq_219_benchmark_,8,8
	.type	.L.str.436,@object              # @.str.436
	.p2align	3, 0x0
.L.str.436:
	.asciz	"benchForIC1VW1BigLoopWithReductionTC32"
	.size	.L.str.436, 39

	.type	_ZL29benchmark_uniq_220_benchmark_,@object # @_ZL29benchmark_uniq_220_benchmark_
	.local	_ZL29benchmark_uniq_220_benchmark_
	.comm	_ZL29benchmark_uniq_220_benchmark_,8,8
	.type	.L.str.438,@object              # @.str.438
	.p2align	3, 0x0
.L.str.438:
	.asciz	"benchForIC2VW1BigLoopWithReductionTC32"
	.size	.L.str.438, 39

	.type	_ZL29benchmark_uniq_221_benchmark_,@object # @_ZL29benchmark_uniq_221_benchmark_
	.local	_ZL29benchmark_uniq_221_benchmark_
	.comm	_ZL29benchmark_uniq_221_benchmark_,8,8
	.type	.L.str.440,@object              # @.str.440
	.p2align	3, 0x0
.L.str.440:
	.asciz	"benchForIC4VW1BigLoopWithReductionTC32"
	.size	.L.str.440, 39

	.type	_ZL29benchmark_uniq_222_benchmark_,@object # @_ZL29benchmark_uniq_222_benchmark_
	.local	_ZL29benchmark_uniq_222_benchmark_
	.comm	_ZL29benchmark_uniq_222_benchmark_,8,8
	.type	.L.str.442,@object              # @.str.442
	.p2align	3, 0x0
.L.str.442:
	.asciz	"benchAutoVecForLoopTC63"
	.size	.L.str.442, 24

	.type	_ZL29benchmark_uniq_223_benchmark_,@object # @_ZL29benchmark_uniq_223_benchmark_
	.local	_ZL29benchmark_uniq_223_benchmark_
	.comm	_ZL29benchmark_uniq_223_benchmark_,8,8
	.type	.L.str.444,@object              # @.str.444
	.p2align	3, 0x0
.L.str.444:
	.asciz	"benchForIC1VW4LoopTC63"
	.size	.L.str.444, 23

	.type	_ZL29benchmark_uniq_224_benchmark_,@object # @_ZL29benchmark_uniq_224_benchmark_
	.local	_ZL29benchmark_uniq_224_benchmark_
	.comm	_ZL29benchmark_uniq_224_benchmark_,8,8
	.type	.L.str.446,@object              # @.str.446
	.p2align	3, 0x0
.L.str.446:
	.asciz	"benchForIC2VW4LoopTC63"
	.size	.L.str.446, 23

	.type	_ZL29benchmark_uniq_225_benchmark_,@object # @_ZL29benchmark_uniq_225_benchmark_
	.local	_ZL29benchmark_uniq_225_benchmark_
	.comm	_ZL29benchmark_uniq_225_benchmark_,8,8
	.type	.L.str.448,@object              # @.str.448
	.p2align	3, 0x0
.L.str.448:
	.asciz	"benchForIC4VW4LoopTC63"
	.size	.L.str.448, 23

	.type	_ZL29benchmark_uniq_226_benchmark_,@object # @_ZL29benchmark_uniq_226_benchmark_
	.local	_ZL29benchmark_uniq_226_benchmark_
	.comm	_ZL29benchmark_uniq_226_benchmark_,8,8
	.type	.L.str.450,@object              # @.str.450
	.p2align	3, 0x0
.L.str.450:
	.asciz	"benchForLoopWithReductionAutoVecTC63"
	.size	.L.str.450, 37

	.type	_ZL29benchmark_uniq_227_benchmark_,@object # @_ZL29benchmark_uniq_227_benchmark_
	.local	_ZL29benchmark_uniq_227_benchmark_
	.comm	_ZL29benchmark_uniq_227_benchmark_,8,8
	.type	.L.str.452,@object              # @.str.452
	.p2align	3, 0x0
.L.str.452:
	.asciz	"benchForIC1VW4LoopWithReductionTC63"
	.size	.L.str.452, 36

	.type	_ZL29benchmark_uniq_228_benchmark_,@object # @_ZL29benchmark_uniq_228_benchmark_
	.local	_ZL29benchmark_uniq_228_benchmark_
	.comm	_ZL29benchmark_uniq_228_benchmark_,8,8
	.type	.L.str.454,@object              # @.str.454
	.p2align	3, 0x0
.L.str.454:
	.asciz	"benchForIC2VW4LoopWithReductionTC63"
	.size	.L.str.454, 36

	.type	_ZL29benchmark_uniq_229_benchmark_,@object # @_ZL29benchmark_uniq_229_benchmark_
	.local	_ZL29benchmark_uniq_229_benchmark_
	.comm	_ZL29benchmark_uniq_229_benchmark_,8,8
	.type	.L.str.456,@object              # @.str.456
	.p2align	3, 0x0
.L.str.456:
	.asciz	"benchForIC4VW4LoopWithReductionTC63"
	.size	.L.str.456, 36

	.type	_ZL29benchmark_uniq_230_benchmark_,@object # @_ZL29benchmark_uniq_230_benchmark_
	.local	_ZL29benchmark_uniq_230_benchmark_
	.comm	_ZL29benchmark_uniq_230_benchmark_,8,8
	.type	.L.str.458,@object              # @.str.458
	.p2align	3, 0x0
.L.str.458:
	.asciz	"benchForIC1VW1LoopWithReductionTC63"
	.size	.L.str.458, 36

	.type	_ZL29benchmark_uniq_231_benchmark_,@object # @_ZL29benchmark_uniq_231_benchmark_
	.local	_ZL29benchmark_uniq_231_benchmark_
	.comm	_ZL29benchmark_uniq_231_benchmark_,8,8
	.type	.L.str.460,@object              # @.str.460
	.p2align	3, 0x0
.L.str.460:
	.asciz	"benchForIC2VW1LoopWithReductionTC63"
	.size	.L.str.460, 36

	.type	_ZL29benchmark_uniq_232_benchmark_,@object # @_ZL29benchmark_uniq_232_benchmark_
	.local	_ZL29benchmark_uniq_232_benchmark_
	.comm	_ZL29benchmark_uniq_232_benchmark_,8,8
	.type	.L.str.462,@object              # @.str.462
	.p2align	3, 0x0
.L.str.462:
	.asciz	"benchForIC4VW1LoopWithReductionTC63"
	.size	.L.str.462, 36

	.type	_ZL29benchmark_uniq_233_benchmark_,@object # @_ZL29benchmark_uniq_233_benchmark_
	.local	_ZL29benchmark_uniq_233_benchmark_
	.comm	_ZL29benchmark_uniq_233_benchmark_,8,8
	.type	.L.str.464,@object              # @.str.464
	.p2align	3, 0x0
.L.str.464:
	.asciz	"benchAutoVecForBigLoopTC63"
	.size	.L.str.464, 27

	.type	_ZL29benchmark_uniq_234_benchmark_,@object # @_ZL29benchmark_uniq_234_benchmark_
	.local	_ZL29benchmark_uniq_234_benchmark_
	.comm	_ZL29benchmark_uniq_234_benchmark_,8,8
	.type	.L.str.466,@object              # @.str.466
	.p2align	3, 0x0
.L.str.466:
	.asciz	"benchForIC1VW4BigLoopTC63"
	.size	.L.str.466, 26

	.type	_ZL29benchmark_uniq_235_benchmark_,@object # @_ZL29benchmark_uniq_235_benchmark_
	.local	_ZL29benchmark_uniq_235_benchmark_
	.comm	_ZL29benchmark_uniq_235_benchmark_,8,8
	.type	.L.str.468,@object              # @.str.468
	.p2align	3, 0x0
.L.str.468:
	.asciz	"benchForIC2VW4BigLoopTC63"
	.size	.L.str.468, 26

	.type	_ZL29benchmark_uniq_236_benchmark_,@object # @_ZL29benchmark_uniq_236_benchmark_
	.local	_ZL29benchmark_uniq_236_benchmark_
	.comm	_ZL29benchmark_uniq_236_benchmark_,8,8
	.type	.L.str.470,@object              # @.str.470
	.p2align	3, 0x0
.L.str.470:
	.asciz	"benchForIC4VW4BigLoopTC63"
	.size	.L.str.470, 26

	.type	_ZL29benchmark_uniq_237_benchmark_,@object # @_ZL29benchmark_uniq_237_benchmark_
	.local	_ZL29benchmark_uniq_237_benchmark_
	.comm	_ZL29benchmark_uniq_237_benchmark_,8,8
	.type	.L.str.472,@object              # @.str.472
	.p2align	3, 0x0
.L.str.472:
	.asciz	"benchForBigLoopWithReductionAutoVecTC63"
	.size	.L.str.472, 40

	.type	_ZL29benchmark_uniq_238_benchmark_,@object # @_ZL29benchmark_uniq_238_benchmark_
	.local	_ZL29benchmark_uniq_238_benchmark_
	.comm	_ZL29benchmark_uniq_238_benchmark_,8,8
	.type	.L.str.474,@object              # @.str.474
	.p2align	3, 0x0
.L.str.474:
	.asciz	"benchForIC1VW4BigLoopWithReductionTC63"
	.size	.L.str.474, 39

	.type	_ZL29benchmark_uniq_239_benchmark_,@object # @_ZL29benchmark_uniq_239_benchmark_
	.local	_ZL29benchmark_uniq_239_benchmark_
	.comm	_ZL29benchmark_uniq_239_benchmark_,8,8
	.type	.L.str.476,@object              # @.str.476
	.p2align	3, 0x0
.L.str.476:
	.asciz	"benchForIC2VW4BigLoopWithReductionTC63"
	.size	.L.str.476, 39

	.type	_ZL29benchmark_uniq_240_benchmark_,@object # @_ZL29benchmark_uniq_240_benchmark_
	.local	_ZL29benchmark_uniq_240_benchmark_
	.comm	_ZL29benchmark_uniq_240_benchmark_,8,8
	.type	.L.str.478,@object              # @.str.478
	.p2align	3, 0x0
.L.str.478:
	.asciz	"benchForIC4VW4BigLoopWithReductionTC63"
	.size	.L.str.478, 39

	.type	_ZL29benchmark_uniq_241_benchmark_,@object # @_ZL29benchmark_uniq_241_benchmark_
	.local	_ZL29benchmark_uniq_241_benchmark_
	.comm	_ZL29benchmark_uniq_241_benchmark_,8,8
	.type	.L.str.480,@object              # @.str.480
	.p2align	3, 0x0
.L.str.480:
	.asciz	"benchForIC1VW1BigLoopWithReductionTC63"
	.size	.L.str.480, 39

	.type	_ZL29benchmark_uniq_242_benchmark_,@object # @_ZL29benchmark_uniq_242_benchmark_
	.local	_ZL29benchmark_uniq_242_benchmark_
	.comm	_ZL29benchmark_uniq_242_benchmark_,8,8
	.type	.L.str.482,@object              # @.str.482
	.p2align	3, 0x0
.L.str.482:
	.asciz	"benchForIC2VW1BigLoopWithReductionTC63"
	.size	.L.str.482, 39

	.type	_ZL29benchmark_uniq_243_benchmark_,@object # @_ZL29benchmark_uniq_243_benchmark_
	.local	_ZL29benchmark_uniq_243_benchmark_
	.comm	_ZL29benchmark_uniq_243_benchmark_,8,8
	.type	.L.str.484,@object              # @.str.484
	.p2align	3, 0x0
.L.str.484:
	.asciz	"benchForIC4VW1BigLoopWithReductionTC63"
	.size	.L.str.484, 39

	.type	_ZL29benchmark_uniq_244_benchmark_,@object # @_ZL29benchmark_uniq_244_benchmark_
	.local	_ZL29benchmark_uniq_244_benchmark_
	.comm	_ZL29benchmark_uniq_244_benchmark_,8,8
	.type	.L.str.486,@object              # @.str.486
	.p2align	3, 0x0
.L.str.486:
	.asciz	"benchAutoVecForLoopTC64"
	.size	.L.str.486, 24

	.type	_ZL29benchmark_uniq_245_benchmark_,@object # @_ZL29benchmark_uniq_245_benchmark_
	.local	_ZL29benchmark_uniq_245_benchmark_
	.comm	_ZL29benchmark_uniq_245_benchmark_,8,8
	.type	.L.str.488,@object              # @.str.488
	.p2align	3, 0x0
.L.str.488:
	.asciz	"benchForIC1VW4LoopTC64"
	.size	.L.str.488, 23

	.type	_ZL29benchmark_uniq_246_benchmark_,@object # @_ZL29benchmark_uniq_246_benchmark_
	.local	_ZL29benchmark_uniq_246_benchmark_
	.comm	_ZL29benchmark_uniq_246_benchmark_,8,8
	.type	.L.str.490,@object              # @.str.490
	.p2align	3, 0x0
.L.str.490:
	.asciz	"benchForIC2VW4LoopTC64"
	.size	.L.str.490, 23

	.type	_ZL29benchmark_uniq_247_benchmark_,@object # @_ZL29benchmark_uniq_247_benchmark_
	.local	_ZL29benchmark_uniq_247_benchmark_
	.comm	_ZL29benchmark_uniq_247_benchmark_,8,8
	.type	.L.str.492,@object              # @.str.492
	.p2align	3, 0x0
.L.str.492:
	.asciz	"benchForIC4VW4LoopTC64"
	.size	.L.str.492, 23

	.type	_ZL29benchmark_uniq_248_benchmark_,@object # @_ZL29benchmark_uniq_248_benchmark_
	.local	_ZL29benchmark_uniq_248_benchmark_
	.comm	_ZL29benchmark_uniq_248_benchmark_,8,8
	.type	.L.str.494,@object              # @.str.494
	.p2align	3, 0x0
.L.str.494:
	.asciz	"benchForLoopWithReductionAutoVecTC64"
	.size	.L.str.494, 37

	.type	_ZL29benchmark_uniq_249_benchmark_,@object # @_ZL29benchmark_uniq_249_benchmark_
	.local	_ZL29benchmark_uniq_249_benchmark_
	.comm	_ZL29benchmark_uniq_249_benchmark_,8,8
	.type	.L.str.496,@object              # @.str.496
	.p2align	3, 0x0
.L.str.496:
	.asciz	"benchForIC1VW4LoopWithReductionTC64"
	.size	.L.str.496, 36

	.type	_ZL29benchmark_uniq_250_benchmark_,@object # @_ZL29benchmark_uniq_250_benchmark_
	.local	_ZL29benchmark_uniq_250_benchmark_
	.comm	_ZL29benchmark_uniq_250_benchmark_,8,8
	.type	.L.str.498,@object              # @.str.498
	.p2align	3, 0x0
.L.str.498:
	.asciz	"benchForIC2VW4LoopWithReductionTC64"
	.size	.L.str.498, 36

	.type	_ZL29benchmark_uniq_251_benchmark_,@object # @_ZL29benchmark_uniq_251_benchmark_
	.local	_ZL29benchmark_uniq_251_benchmark_
	.comm	_ZL29benchmark_uniq_251_benchmark_,8,8
	.type	.L.str.500,@object              # @.str.500
	.p2align	3, 0x0
.L.str.500:
	.asciz	"benchForIC4VW4LoopWithReductionTC64"
	.size	.L.str.500, 36

	.type	_ZL29benchmark_uniq_252_benchmark_,@object # @_ZL29benchmark_uniq_252_benchmark_
	.local	_ZL29benchmark_uniq_252_benchmark_
	.comm	_ZL29benchmark_uniq_252_benchmark_,8,8
	.type	.L.str.502,@object              # @.str.502
	.p2align	3, 0x0
.L.str.502:
	.asciz	"benchForIC1VW1LoopWithReductionTC64"
	.size	.L.str.502, 36

	.type	_ZL29benchmark_uniq_253_benchmark_,@object # @_ZL29benchmark_uniq_253_benchmark_
	.local	_ZL29benchmark_uniq_253_benchmark_
	.comm	_ZL29benchmark_uniq_253_benchmark_,8,8
	.type	.L.str.504,@object              # @.str.504
	.p2align	3, 0x0
.L.str.504:
	.asciz	"benchForIC2VW1LoopWithReductionTC64"
	.size	.L.str.504, 36

	.type	_ZL29benchmark_uniq_254_benchmark_,@object # @_ZL29benchmark_uniq_254_benchmark_
	.local	_ZL29benchmark_uniq_254_benchmark_
	.comm	_ZL29benchmark_uniq_254_benchmark_,8,8
	.type	.L.str.506,@object              # @.str.506
	.p2align	3, 0x0
.L.str.506:
	.asciz	"benchForIC4VW1LoopWithReductionTC64"
	.size	.L.str.506, 36

	.type	_ZL29benchmark_uniq_255_benchmark_,@object # @_ZL29benchmark_uniq_255_benchmark_
	.local	_ZL29benchmark_uniq_255_benchmark_
	.comm	_ZL29benchmark_uniq_255_benchmark_,8,8
	.type	.L.str.508,@object              # @.str.508
	.p2align	3, 0x0
.L.str.508:
	.asciz	"benchAutoVecForBigLoopTC64"
	.size	.L.str.508, 27

	.type	_ZL29benchmark_uniq_256_benchmark_,@object # @_ZL29benchmark_uniq_256_benchmark_
	.local	_ZL29benchmark_uniq_256_benchmark_
	.comm	_ZL29benchmark_uniq_256_benchmark_,8,8
	.type	.L.str.510,@object              # @.str.510
	.p2align	3, 0x0
.L.str.510:
	.asciz	"benchForIC1VW4BigLoopTC64"
	.size	.L.str.510, 26

	.type	_ZL29benchmark_uniq_257_benchmark_,@object # @_ZL29benchmark_uniq_257_benchmark_
	.local	_ZL29benchmark_uniq_257_benchmark_
	.comm	_ZL29benchmark_uniq_257_benchmark_,8,8
	.type	.L.str.512,@object              # @.str.512
	.p2align	3, 0x0
.L.str.512:
	.asciz	"benchForIC2VW4BigLoopTC64"
	.size	.L.str.512, 26

	.type	_ZL29benchmark_uniq_258_benchmark_,@object # @_ZL29benchmark_uniq_258_benchmark_
	.local	_ZL29benchmark_uniq_258_benchmark_
	.comm	_ZL29benchmark_uniq_258_benchmark_,8,8
	.type	.L.str.514,@object              # @.str.514
	.p2align	3, 0x0
.L.str.514:
	.asciz	"benchForIC4VW4BigLoopTC64"
	.size	.L.str.514, 26

	.type	_ZL29benchmark_uniq_259_benchmark_,@object # @_ZL29benchmark_uniq_259_benchmark_
	.local	_ZL29benchmark_uniq_259_benchmark_
	.comm	_ZL29benchmark_uniq_259_benchmark_,8,8
	.type	.L.str.516,@object              # @.str.516
	.p2align	3, 0x0
.L.str.516:
	.asciz	"benchForBigLoopWithReductionAutoVecTC64"
	.size	.L.str.516, 40

	.type	_ZL29benchmark_uniq_260_benchmark_,@object # @_ZL29benchmark_uniq_260_benchmark_
	.local	_ZL29benchmark_uniq_260_benchmark_
	.comm	_ZL29benchmark_uniq_260_benchmark_,8,8
	.type	.L.str.518,@object              # @.str.518
	.p2align	3, 0x0
.L.str.518:
	.asciz	"benchForIC1VW4BigLoopWithReductionTC64"
	.size	.L.str.518, 39

	.type	_ZL29benchmark_uniq_261_benchmark_,@object # @_ZL29benchmark_uniq_261_benchmark_
	.local	_ZL29benchmark_uniq_261_benchmark_
	.comm	_ZL29benchmark_uniq_261_benchmark_,8,8
	.type	.L.str.520,@object              # @.str.520
	.p2align	3, 0x0
.L.str.520:
	.asciz	"benchForIC2VW4BigLoopWithReductionTC64"
	.size	.L.str.520, 39

	.type	_ZL29benchmark_uniq_262_benchmark_,@object # @_ZL29benchmark_uniq_262_benchmark_
	.local	_ZL29benchmark_uniq_262_benchmark_
	.comm	_ZL29benchmark_uniq_262_benchmark_,8,8
	.type	.L.str.522,@object              # @.str.522
	.p2align	3, 0x0
.L.str.522:
	.asciz	"benchForIC4VW4BigLoopWithReductionTC64"
	.size	.L.str.522, 39

	.type	_ZL29benchmark_uniq_263_benchmark_,@object # @_ZL29benchmark_uniq_263_benchmark_
	.local	_ZL29benchmark_uniq_263_benchmark_
	.comm	_ZL29benchmark_uniq_263_benchmark_,8,8
	.type	.L.str.524,@object              # @.str.524
	.p2align	3, 0x0
.L.str.524:
	.asciz	"benchForIC1VW1BigLoopWithReductionTC64"
	.size	.L.str.524, 39

	.type	_ZL29benchmark_uniq_264_benchmark_,@object # @_ZL29benchmark_uniq_264_benchmark_
	.local	_ZL29benchmark_uniq_264_benchmark_
	.comm	_ZL29benchmark_uniq_264_benchmark_,8,8
	.type	.L.str.526,@object              # @.str.526
	.p2align	3, 0x0
.L.str.526:
	.asciz	"benchForIC2VW1BigLoopWithReductionTC64"
	.size	.L.str.526, 39

	.type	_ZL29benchmark_uniq_265_benchmark_,@object # @_ZL29benchmark_uniq_265_benchmark_
	.local	_ZL29benchmark_uniq_265_benchmark_
	.comm	_ZL29benchmark_uniq_265_benchmark_,8,8
	.type	.L.str.528,@object              # @.str.528
	.p2align	3, 0x0
.L.str.528:
	.asciz	"benchForIC4VW1BigLoopWithReductionTC64"
	.size	.L.str.528, 39

	.type	_ZL29benchmark_uniq_266_benchmark_,@object # @_ZL29benchmark_uniq_266_benchmark_
	.local	_ZL29benchmark_uniq_266_benchmark_
	.comm	_ZL29benchmark_uniq_266_benchmark_,8,8
	.type	.L.str.530,@object              # @.str.530
	.p2align	3, 0x0
.L.str.530:
	.asciz	"benchAutoVecForLoopTC127"
	.size	.L.str.530, 25

	.type	_ZL29benchmark_uniq_267_benchmark_,@object # @_ZL29benchmark_uniq_267_benchmark_
	.local	_ZL29benchmark_uniq_267_benchmark_
	.comm	_ZL29benchmark_uniq_267_benchmark_,8,8
	.type	.L.str.532,@object              # @.str.532
	.p2align	3, 0x0
.L.str.532:
	.asciz	"benchForIC1VW4LoopTC127"
	.size	.L.str.532, 24

	.type	_ZL29benchmark_uniq_268_benchmark_,@object # @_ZL29benchmark_uniq_268_benchmark_
	.local	_ZL29benchmark_uniq_268_benchmark_
	.comm	_ZL29benchmark_uniq_268_benchmark_,8,8
	.type	.L.str.534,@object              # @.str.534
	.p2align	3, 0x0
.L.str.534:
	.asciz	"benchForIC2VW4LoopTC127"
	.size	.L.str.534, 24

	.type	_ZL29benchmark_uniq_269_benchmark_,@object # @_ZL29benchmark_uniq_269_benchmark_
	.local	_ZL29benchmark_uniq_269_benchmark_
	.comm	_ZL29benchmark_uniq_269_benchmark_,8,8
	.type	.L.str.536,@object              # @.str.536
	.p2align	3, 0x0
.L.str.536:
	.asciz	"benchForIC4VW4LoopTC127"
	.size	.L.str.536, 24

	.type	_ZL29benchmark_uniq_270_benchmark_,@object # @_ZL29benchmark_uniq_270_benchmark_
	.local	_ZL29benchmark_uniq_270_benchmark_
	.comm	_ZL29benchmark_uniq_270_benchmark_,8,8
	.type	.L.str.538,@object              # @.str.538
	.p2align	3, 0x0
.L.str.538:
	.asciz	"benchForLoopWithReductionAutoVecTC127"
	.size	.L.str.538, 38

	.type	_ZL29benchmark_uniq_271_benchmark_,@object # @_ZL29benchmark_uniq_271_benchmark_
	.local	_ZL29benchmark_uniq_271_benchmark_
	.comm	_ZL29benchmark_uniq_271_benchmark_,8,8
	.type	.L.str.540,@object              # @.str.540
	.p2align	3, 0x0
.L.str.540:
	.asciz	"benchForIC1VW4LoopWithReductionTC127"
	.size	.L.str.540, 37

	.type	_ZL29benchmark_uniq_272_benchmark_,@object # @_ZL29benchmark_uniq_272_benchmark_
	.local	_ZL29benchmark_uniq_272_benchmark_
	.comm	_ZL29benchmark_uniq_272_benchmark_,8,8
	.type	.L.str.542,@object              # @.str.542
	.p2align	3, 0x0
.L.str.542:
	.asciz	"benchForIC2VW4LoopWithReductionTC127"
	.size	.L.str.542, 37

	.type	_ZL29benchmark_uniq_273_benchmark_,@object # @_ZL29benchmark_uniq_273_benchmark_
	.local	_ZL29benchmark_uniq_273_benchmark_
	.comm	_ZL29benchmark_uniq_273_benchmark_,8,8
	.type	.L.str.544,@object              # @.str.544
	.p2align	3, 0x0
.L.str.544:
	.asciz	"benchForIC4VW4LoopWithReductionTC127"
	.size	.L.str.544, 37

	.type	_ZL29benchmark_uniq_274_benchmark_,@object # @_ZL29benchmark_uniq_274_benchmark_
	.local	_ZL29benchmark_uniq_274_benchmark_
	.comm	_ZL29benchmark_uniq_274_benchmark_,8,8
	.type	.L.str.546,@object              # @.str.546
	.p2align	3, 0x0
.L.str.546:
	.asciz	"benchForIC1VW1LoopWithReductionTC127"
	.size	.L.str.546, 37

	.type	_ZL29benchmark_uniq_275_benchmark_,@object # @_ZL29benchmark_uniq_275_benchmark_
	.local	_ZL29benchmark_uniq_275_benchmark_
	.comm	_ZL29benchmark_uniq_275_benchmark_,8,8
	.type	.L.str.548,@object              # @.str.548
	.p2align	3, 0x0
.L.str.548:
	.asciz	"benchForIC2VW1LoopWithReductionTC127"
	.size	.L.str.548, 37

	.type	_ZL29benchmark_uniq_276_benchmark_,@object # @_ZL29benchmark_uniq_276_benchmark_
	.local	_ZL29benchmark_uniq_276_benchmark_
	.comm	_ZL29benchmark_uniq_276_benchmark_,8,8
	.type	.L.str.550,@object              # @.str.550
	.p2align	3, 0x0
.L.str.550:
	.asciz	"benchForIC4VW1LoopWithReductionTC127"
	.size	.L.str.550, 37

	.type	_ZL29benchmark_uniq_277_benchmark_,@object # @_ZL29benchmark_uniq_277_benchmark_
	.local	_ZL29benchmark_uniq_277_benchmark_
	.comm	_ZL29benchmark_uniq_277_benchmark_,8,8
	.type	.L.str.552,@object              # @.str.552
	.p2align	3, 0x0
.L.str.552:
	.asciz	"benchAutoVecForBigLoopTC127"
	.size	.L.str.552, 28

	.type	_ZL29benchmark_uniq_278_benchmark_,@object # @_ZL29benchmark_uniq_278_benchmark_
	.local	_ZL29benchmark_uniq_278_benchmark_
	.comm	_ZL29benchmark_uniq_278_benchmark_,8,8
	.type	.L.str.554,@object              # @.str.554
	.p2align	3, 0x0
.L.str.554:
	.asciz	"benchForIC1VW4BigLoopTC127"
	.size	.L.str.554, 27

	.type	_ZL29benchmark_uniq_279_benchmark_,@object # @_ZL29benchmark_uniq_279_benchmark_
	.local	_ZL29benchmark_uniq_279_benchmark_
	.comm	_ZL29benchmark_uniq_279_benchmark_,8,8
	.type	.L.str.556,@object              # @.str.556
	.p2align	3, 0x0
.L.str.556:
	.asciz	"benchForIC2VW4BigLoopTC127"
	.size	.L.str.556, 27

	.type	_ZL29benchmark_uniq_280_benchmark_,@object # @_ZL29benchmark_uniq_280_benchmark_
	.local	_ZL29benchmark_uniq_280_benchmark_
	.comm	_ZL29benchmark_uniq_280_benchmark_,8,8
	.type	.L.str.558,@object              # @.str.558
	.p2align	3, 0x0
.L.str.558:
	.asciz	"benchForIC4VW4BigLoopTC127"
	.size	.L.str.558, 27

	.type	_ZL29benchmark_uniq_281_benchmark_,@object # @_ZL29benchmark_uniq_281_benchmark_
	.local	_ZL29benchmark_uniq_281_benchmark_
	.comm	_ZL29benchmark_uniq_281_benchmark_,8,8
	.type	.L.str.560,@object              # @.str.560
	.p2align	3, 0x0
.L.str.560:
	.asciz	"benchForBigLoopWithReductionAutoVecTC127"
	.size	.L.str.560, 41

	.type	_ZL29benchmark_uniq_282_benchmark_,@object # @_ZL29benchmark_uniq_282_benchmark_
	.local	_ZL29benchmark_uniq_282_benchmark_
	.comm	_ZL29benchmark_uniq_282_benchmark_,8,8
	.type	.L.str.562,@object              # @.str.562
	.p2align	3, 0x0
.L.str.562:
	.asciz	"benchForIC1VW4BigLoopWithReductionTC127"
	.size	.L.str.562, 40

	.type	_ZL29benchmark_uniq_283_benchmark_,@object # @_ZL29benchmark_uniq_283_benchmark_
	.local	_ZL29benchmark_uniq_283_benchmark_
	.comm	_ZL29benchmark_uniq_283_benchmark_,8,8
	.type	.L.str.564,@object              # @.str.564
	.p2align	3, 0x0
.L.str.564:
	.asciz	"benchForIC2VW4BigLoopWithReductionTC127"
	.size	.L.str.564, 40

	.type	_ZL29benchmark_uniq_284_benchmark_,@object # @_ZL29benchmark_uniq_284_benchmark_
	.local	_ZL29benchmark_uniq_284_benchmark_
	.comm	_ZL29benchmark_uniq_284_benchmark_,8,8
	.type	.L.str.566,@object              # @.str.566
	.p2align	3, 0x0
.L.str.566:
	.asciz	"benchForIC4VW4BigLoopWithReductionTC127"
	.size	.L.str.566, 40

	.type	_ZL29benchmark_uniq_285_benchmark_,@object # @_ZL29benchmark_uniq_285_benchmark_
	.local	_ZL29benchmark_uniq_285_benchmark_
	.comm	_ZL29benchmark_uniq_285_benchmark_,8,8
	.type	.L.str.568,@object              # @.str.568
	.p2align	3, 0x0
.L.str.568:
	.asciz	"benchForIC1VW1BigLoopWithReductionTC127"
	.size	.L.str.568, 40

	.type	_ZL29benchmark_uniq_286_benchmark_,@object # @_ZL29benchmark_uniq_286_benchmark_
	.local	_ZL29benchmark_uniq_286_benchmark_
	.comm	_ZL29benchmark_uniq_286_benchmark_,8,8
	.type	.L.str.570,@object              # @.str.570
	.p2align	3, 0x0
.L.str.570:
	.asciz	"benchForIC2VW1BigLoopWithReductionTC127"
	.size	.L.str.570, 40

	.type	_ZL29benchmark_uniq_287_benchmark_,@object # @_ZL29benchmark_uniq_287_benchmark_
	.local	_ZL29benchmark_uniq_287_benchmark_
	.comm	_ZL29benchmark_uniq_287_benchmark_,8,8
	.type	.L.str.572,@object              # @.str.572
	.p2align	3, 0x0
.L.str.572:
	.asciz	"benchForIC4VW1BigLoopWithReductionTC127"
	.size	.L.str.572, 40

	.type	_ZL29benchmark_uniq_288_benchmark_,@object # @_ZL29benchmark_uniq_288_benchmark_
	.local	_ZL29benchmark_uniq_288_benchmark_
	.comm	_ZL29benchmark_uniq_288_benchmark_,8,8
	.type	.L.str.574,@object              # @.str.574
	.p2align	3, 0x0
.L.str.574:
	.asciz	"benchAutoVecForLoopTC128"
	.size	.L.str.574, 25

	.type	_ZL29benchmark_uniq_289_benchmark_,@object # @_ZL29benchmark_uniq_289_benchmark_
	.local	_ZL29benchmark_uniq_289_benchmark_
	.comm	_ZL29benchmark_uniq_289_benchmark_,8,8
	.type	.L.str.576,@object              # @.str.576
	.p2align	3, 0x0
.L.str.576:
	.asciz	"benchForIC1VW4LoopTC128"
	.size	.L.str.576, 24

	.type	_ZL29benchmark_uniq_290_benchmark_,@object # @_ZL29benchmark_uniq_290_benchmark_
	.local	_ZL29benchmark_uniq_290_benchmark_
	.comm	_ZL29benchmark_uniq_290_benchmark_,8,8
	.type	.L.str.578,@object              # @.str.578
	.p2align	3, 0x0
.L.str.578:
	.asciz	"benchForIC2VW4LoopTC128"
	.size	.L.str.578, 24

	.type	_ZL29benchmark_uniq_291_benchmark_,@object # @_ZL29benchmark_uniq_291_benchmark_
	.local	_ZL29benchmark_uniq_291_benchmark_
	.comm	_ZL29benchmark_uniq_291_benchmark_,8,8
	.type	.L.str.580,@object              # @.str.580
	.p2align	3, 0x0
.L.str.580:
	.asciz	"benchForIC4VW4LoopTC128"
	.size	.L.str.580, 24

	.type	_ZL29benchmark_uniq_292_benchmark_,@object # @_ZL29benchmark_uniq_292_benchmark_
	.local	_ZL29benchmark_uniq_292_benchmark_
	.comm	_ZL29benchmark_uniq_292_benchmark_,8,8
	.type	.L.str.582,@object              # @.str.582
	.p2align	3, 0x0
.L.str.582:
	.asciz	"benchForLoopWithReductionAutoVecTC128"
	.size	.L.str.582, 38

	.type	_ZL29benchmark_uniq_293_benchmark_,@object # @_ZL29benchmark_uniq_293_benchmark_
	.local	_ZL29benchmark_uniq_293_benchmark_
	.comm	_ZL29benchmark_uniq_293_benchmark_,8,8
	.type	.L.str.584,@object              # @.str.584
	.p2align	3, 0x0
.L.str.584:
	.asciz	"benchForIC1VW4LoopWithReductionTC128"
	.size	.L.str.584, 37

	.type	_ZL29benchmark_uniq_294_benchmark_,@object # @_ZL29benchmark_uniq_294_benchmark_
	.local	_ZL29benchmark_uniq_294_benchmark_
	.comm	_ZL29benchmark_uniq_294_benchmark_,8,8
	.type	.L.str.586,@object              # @.str.586
	.p2align	3, 0x0
.L.str.586:
	.asciz	"benchForIC2VW4LoopWithReductionTC128"
	.size	.L.str.586, 37

	.type	_ZL29benchmark_uniq_295_benchmark_,@object # @_ZL29benchmark_uniq_295_benchmark_
	.local	_ZL29benchmark_uniq_295_benchmark_
	.comm	_ZL29benchmark_uniq_295_benchmark_,8,8
	.type	.L.str.588,@object              # @.str.588
	.p2align	3, 0x0
.L.str.588:
	.asciz	"benchForIC4VW4LoopWithReductionTC128"
	.size	.L.str.588, 37

	.type	_ZL29benchmark_uniq_296_benchmark_,@object # @_ZL29benchmark_uniq_296_benchmark_
	.local	_ZL29benchmark_uniq_296_benchmark_
	.comm	_ZL29benchmark_uniq_296_benchmark_,8,8
	.type	.L.str.590,@object              # @.str.590
	.p2align	3, 0x0
.L.str.590:
	.asciz	"benchForIC1VW1LoopWithReductionTC128"
	.size	.L.str.590, 37

	.type	_ZL29benchmark_uniq_297_benchmark_,@object # @_ZL29benchmark_uniq_297_benchmark_
	.local	_ZL29benchmark_uniq_297_benchmark_
	.comm	_ZL29benchmark_uniq_297_benchmark_,8,8
	.type	.L.str.592,@object              # @.str.592
	.p2align	3, 0x0
.L.str.592:
	.asciz	"benchForIC2VW1LoopWithReductionTC128"
	.size	.L.str.592, 37

	.type	_ZL29benchmark_uniq_298_benchmark_,@object # @_ZL29benchmark_uniq_298_benchmark_
	.local	_ZL29benchmark_uniq_298_benchmark_
	.comm	_ZL29benchmark_uniq_298_benchmark_,8,8
	.type	.L.str.594,@object              # @.str.594
	.p2align	3, 0x0
.L.str.594:
	.asciz	"benchForIC4VW1LoopWithReductionTC128"
	.size	.L.str.594, 37

	.type	_ZL29benchmark_uniq_299_benchmark_,@object # @_ZL29benchmark_uniq_299_benchmark_
	.local	_ZL29benchmark_uniq_299_benchmark_
	.comm	_ZL29benchmark_uniq_299_benchmark_,8,8
	.type	.L.str.596,@object              # @.str.596
	.p2align	3, 0x0
.L.str.596:
	.asciz	"benchAutoVecForBigLoopTC128"
	.size	.L.str.596, 28

	.type	_ZL29benchmark_uniq_300_benchmark_,@object # @_ZL29benchmark_uniq_300_benchmark_
	.local	_ZL29benchmark_uniq_300_benchmark_
	.comm	_ZL29benchmark_uniq_300_benchmark_,8,8
	.type	.L.str.598,@object              # @.str.598
	.p2align	3, 0x0
.L.str.598:
	.asciz	"benchForIC1VW4BigLoopTC128"
	.size	.L.str.598, 27

	.type	_ZL29benchmark_uniq_301_benchmark_,@object # @_ZL29benchmark_uniq_301_benchmark_
	.local	_ZL29benchmark_uniq_301_benchmark_
	.comm	_ZL29benchmark_uniq_301_benchmark_,8,8
	.type	.L.str.600,@object              # @.str.600
	.p2align	3, 0x0
.L.str.600:
	.asciz	"benchForIC2VW4BigLoopTC128"
	.size	.L.str.600, 27

	.type	_ZL29benchmark_uniq_302_benchmark_,@object # @_ZL29benchmark_uniq_302_benchmark_
	.local	_ZL29benchmark_uniq_302_benchmark_
	.comm	_ZL29benchmark_uniq_302_benchmark_,8,8
	.type	.L.str.602,@object              # @.str.602
	.p2align	3, 0x0
.L.str.602:
	.asciz	"benchForIC4VW4BigLoopTC128"
	.size	.L.str.602, 27

	.type	_ZL29benchmark_uniq_303_benchmark_,@object # @_ZL29benchmark_uniq_303_benchmark_
	.local	_ZL29benchmark_uniq_303_benchmark_
	.comm	_ZL29benchmark_uniq_303_benchmark_,8,8
	.type	.L.str.604,@object              # @.str.604
	.p2align	3, 0x0
.L.str.604:
	.asciz	"benchForBigLoopWithReductionAutoVecTC128"
	.size	.L.str.604, 41

	.type	_ZL29benchmark_uniq_304_benchmark_,@object # @_ZL29benchmark_uniq_304_benchmark_
	.local	_ZL29benchmark_uniq_304_benchmark_
	.comm	_ZL29benchmark_uniq_304_benchmark_,8,8
	.type	.L.str.606,@object              # @.str.606
	.p2align	3, 0x0
.L.str.606:
	.asciz	"benchForIC1VW4BigLoopWithReductionTC128"
	.size	.L.str.606, 40

	.type	_ZL29benchmark_uniq_305_benchmark_,@object # @_ZL29benchmark_uniq_305_benchmark_
	.local	_ZL29benchmark_uniq_305_benchmark_
	.comm	_ZL29benchmark_uniq_305_benchmark_,8,8
	.type	.L.str.608,@object              # @.str.608
	.p2align	3, 0x0
.L.str.608:
	.asciz	"benchForIC2VW4BigLoopWithReductionTC128"
	.size	.L.str.608, 40

	.type	_ZL29benchmark_uniq_306_benchmark_,@object # @_ZL29benchmark_uniq_306_benchmark_
	.local	_ZL29benchmark_uniq_306_benchmark_
	.comm	_ZL29benchmark_uniq_306_benchmark_,8,8
	.type	.L.str.610,@object              # @.str.610
	.p2align	3, 0x0
.L.str.610:
	.asciz	"benchForIC4VW4BigLoopWithReductionTC128"
	.size	.L.str.610, 40

	.type	_ZL29benchmark_uniq_307_benchmark_,@object # @_ZL29benchmark_uniq_307_benchmark_
	.local	_ZL29benchmark_uniq_307_benchmark_
	.comm	_ZL29benchmark_uniq_307_benchmark_,8,8
	.type	.L.str.612,@object              # @.str.612
	.p2align	3, 0x0
.L.str.612:
	.asciz	"benchForIC1VW1BigLoopWithReductionTC128"
	.size	.L.str.612, 40

	.type	_ZL29benchmark_uniq_308_benchmark_,@object # @_ZL29benchmark_uniq_308_benchmark_
	.local	_ZL29benchmark_uniq_308_benchmark_
	.comm	_ZL29benchmark_uniq_308_benchmark_,8,8
	.type	.L.str.614,@object              # @.str.614
	.p2align	3, 0x0
.L.str.614:
	.asciz	"benchForIC2VW1BigLoopWithReductionTC128"
	.size	.L.str.614, 40

	.type	_ZL29benchmark_uniq_309_benchmark_,@object # @_ZL29benchmark_uniq_309_benchmark_
	.local	_ZL29benchmark_uniq_309_benchmark_
	.comm	_ZL29benchmark_uniq_309_benchmark_,8,8
	.type	.L.str.616,@object              # @.str.616
	.p2align	3, 0x0
.L.str.616:
	.asciz	"benchForIC4VW1BigLoopWithReductionTC128"
	.size	.L.str.616, 40

	.section	.init_array,"aw",@init_array
	.p2align	3, 0x0
	.dword	_GLOBAL__sub_I_LoopInterleaving.cpp
	.hidden	DW.ref.__gxx_personality_v0
	.weak	DW.ref.__gxx_personality_v0
	.section	.data.DW.ref.__gxx_personality_v0,"awG",@progbits,DW.ref.__gxx_personality_v0,comdat
	.p2align	3, 0x0
	.type	DW.ref.__gxx_personality_v0,@object
	.size	DW.ref.__gxx_personality_v0, 8
DW.ref.__gxx_personality_v0:
	.dword	__gxx_personality_v0
	.section	".note.GNU-stack","",@progbits
	.addrsig
	.addrsig_sym _Z22benchAutoVecForLoopTC1RN9benchmark5StateE
	.addrsig_sym __gxx_personality_v0
	.addrsig_sym _Z21benchForIC1VW4LoopTC1RN9benchmark5StateE
	.addrsig_sym _Z21benchForIC2VW4LoopTC1RN9benchmark5StateE
	.addrsig_sym _Z21benchForIC4VW4LoopTC1RN9benchmark5StateE
	.addrsig_sym _Z35benchForLoopWithReductionAutoVecTC1RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC1VW4LoopWithReductionTC1RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC2VW4LoopWithReductionTC1RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC4VW4LoopWithReductionTC1RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC1VW1LoopWithReductionTC1RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC2VW1LoopWithReductionTC1RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC4VW1LoopWithReductionTC1RN9benchmark5StateE
	.addrsig_sym _Z25benchAutoVecForBigLoopTC1RN9benchmark5StateE
	.addrsig_sym _Z24benchForIC1VW4BigLoopTC1RN9benchmark5StateE
	.addrsig_sym _Z24benchForIC2VW4BigLoopTC1RN9benchmark5StateE
	.addrsig_sym _Z24benchForIC4VW4BigLoopTC1RN9benchmark5StateE
	.addrsig_sym _Z38benchForBigLoopWithReductionAutoVecTC1RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC1VW4BigLoopWithReductionTC1RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC2VW4BigLoopWithReductionTC1RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC4VW4BigLoopWithReductionTC1RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC1VW1BigLoopWithReductionTC1RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC2VW1BigLoopWithReductionTC1RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC4VW1BigLoopWithReductionTC1RN9benchmark5StateE
	.addrsig_sym _Z22benchAutoVecForLoopTC2RN9benchmark5StateE
	.addrsig_sym _Z21benchForIC1VW4LoopTC2RN9benchmark5StateE
	.addrsig_sym _Z21benchForIC2VW4LoopTC2RN9benchmark5StateE
	.addrsig_sym _Z21benchForIC4VW4LoopTC2RN9benchmark5StateE
	.addrsig_sym _Z35benchForLoopWithReductionAutoVecTC2RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC1VW4LoopWithReductionTC2RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC2VW4LoopWithReductionTC2RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC4VW4LoopWithReductionTC2RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC1VW1LoopWithReductionTC2RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC2VW1LoopWithReductionTC2RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC4VW1LoopWithReductionTC2RN9benchmark5StateE
	.addrsig_sym _Z25benchAutoVecForBigLoopTC2RN9benchmark5StateE
	.addrsig_sym _Z24benchForIC1VW4BigLoopTC2RN9benchmark5StateE
	.addrsig_sym _Z24benchForIC2VW4BigLoopTC2RN9benchmark5StateE
	.addrsig_sym _Z24benchForIC4VW4BigLoopTC2RN9benchmark5StateE
	.addrsig_sym _Z38benchForBigLoopWithReductionAutoVecTC2RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC1VW4BigLoopWithReductionTC2RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC2VW4BigLoopWithReductionTC2RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC4VW4BigLoopWithReductionTC2RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC1VW1BigLoopWithReductionTC2RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC2VW1BigLoopWithReductionTC2RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC4VW1BigLoopWithReductionTC2RN9benchmark5StateE
	.addrsig_sym _Z22benchAutoVecForLoopTC3RN9benchmark5StateE
	.addrsig_sym _Z21benchForIC1VW4LoopTC3RN9benchmark5StateE
	.addrsig_sym _Z21benchForIC2VW4LoopTC3RN9benchmark5StateE
	.addrsig_sym _Z21benchForIC4VW4LoopTC3RN9benchmark5StateE
	.addrsig_sym _Z35benchForLoopWithReductionAutoVecTC3RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC1VW4LoopWithReductionTC3RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC2VW4LoopWithReductionTC3RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC4VW4LoopWithReductionTC3RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC1VW1LoopWithReductionTC3RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC2VW1LoopWithReductionTC3RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC4VW1LoopWithReductionTC3RN9benchmark5StateE
	.addrsig_sym _Z25benchAutoVecForBigLoopTC3RN9benchmark5StateE
	.addrsig_sym _Z24benchForIC1VW4BigLoopTC3RN9benchmark5StateE
	.addrsig_sym _Z24benchForIC2VW4BigLoopTC3RN9benchmark5StateE
	.addrsig_sym _Z24benchForIC4VW4BigLoopTC3RN9benchmark5StateE
	.addrsig_sym _Z38benchForBigLoopWithReductionAutoVecTC3RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC1VW4BigLoopWithReductionTC3RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC2VW4BigLoopWithReductionTC3RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC4VW4BigLoopWithReductionTC3RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC1VW1BigLoopWithReductionTC3RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC2VW1BigLoopWithReductionTC3RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC4VW1BigLoopWithReductionTC3RN9benchmark5StateE
	.addrsig_sym _Z22benchAutoVecForLoopTC4RN9benchmark5StateE
	.addrsig_sym _Z21benchForIC1VW4LoopTC4RN9benchmark5StateE
	.addrsig_sym _Z21benchForIC2VW4LoopTC4RN9benchmark5StateE
	.addrsig_sym _Z21benchForIC4VW4LoopTC4RN9benchmark5StateE
	.addrsig_sym _Z35benchForLoopWithReductionAutoVecTC4RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC1VW4LoopWithReductionTC4RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC2VW4LoopWithReductionTC4RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC4VW4LoopWithReductionTC4RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC1VW1LoopWithReductionTC4RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC2VW1LoopWithReductionTC4RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC4VW1LoopWithReductionTC4RN9benchmark5StateE
	.addrsig_sym _Z25benchAutoVecForBigLoopTC4RN9benchmark5StateE
	.addrsig_sym _Z24benchForIC1VW4BigLoopTC4RN9benchmark5StateE
	.addrsig_sym _Z24benchForIC2VW4BigLoopTC4RN9benchmark5StateE
	.addrsig_sym _Z24benchForIC4VW4BigLoopTC4RN9benchmark5StateE
	.addrsig_sym _Z38benchForBigLoopWithReductionAutoVecTC4RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC1VW4BigLoopWithReductionTC4RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC2VW4BigLoopWithReductionTC4RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC4VW4BigLoopWithReductionTC4RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC1VW1BigLoopWithReductionTC4RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC2VW1BigLoopWithReductionTC4RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC4VW1BigLoopWithReductionTC4RN9benchmark5StateE
	.addrsig_sym _Z22benchAutoVecForLoopTC7RN9benchmark5StateE
	.addrsig_sym _Z21benchForIC1VW4LoopTC7RN9benchmark5StateE
	.addrsig_sym _Z21benchForIC2VW4LoopTC7RN9benchmark5StateE
	.addrsig_sym _Z21benchForIC4VW4LoopTC7RN9benchmark5StateE
	.addrsig_sym _Z35benchForLoopWithReductionAutoVecTC7RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC1VW4LoopWithReductionTC7RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC2VW4LoopWithReductionTC7RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC4VW4LoopWithReductionTC7RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC1VW1LoopWithReductionTC7RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC2VW1LoopWithReductionTC7RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC4VW1LoopWithReductionTC7RN9benchmark5StateE
	.addrsig_sym _Z25benchAutoVecForBigLoopTC7RN9benchmark5StateE
	.addrsig_sym _Z24benchForIC1VW4BigLoopTC7RN9benchmark5StateE
	.addrsig_sym _Z24benchForIC2VW4BigLoopTC7RN9benchmark5StateE
	.addrsig_sym _Z24benchForIC4VW4BigLoopTC7RN9benchmark5StateE
	.addrsig_sym _Z38benchForBigLoopWithReductionAutoVecTC7RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC1VW4BigLoopWithReductionTC7RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC2VW4BigLoopWithReductionTC7RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC4VW4BigLoopWithReductionTC7RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC1VW1BigLoopWithReductionTC7RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC2VW1BigLoopWithReductionTC7RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC4VW1BigLoopWithReductionTC7RN9benchmark5StateE
	.addrsig_sym _Z22benchAutoVecForLoopTC8RN9benchmark5StateE
	.addrsig_sym _Z21benchForIC1VW4LoopTC8RN9benchmark5StateE
	.addrsig_sym _Z21benchForIC2VW4LoopTC8RN9benchmark5StateE
	.addrsig_sym _Z21benchForIC4VW4LoopTC8RN9benchmark5StateE
	.addrsig_sym _Z35benchForLoopWithReductionAutoVecTC8RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC1VW4LoopWithReductionTC8RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC2VW4LoopWithReductionTC8RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC4VW4LoopWithReductionTC8RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC1VW1LoopWithReductionTC8RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC2VW1LoopWithReductionTC8RN9benchmark5StateE
	.addrsig_sym _Z34benchForIC4VW1LoopWithReductionTC8RN9benchmark5StateE
	.addrsig_sym _Z25benchAutoVecForBigLoopTC8RN9benchmark5StateE
	.addrsig_sym _Z24benchForIC1VW4BigLoopTC8RN9benchmark5StateE
	.addrsig_sym _Z24benchForIC2VW4BigLoopTC8RN9benchmark5StateE
	.addrsig_sym _Z24benchForIC4VW4BigLoopTC8RN9benchmark5StateE
	.addrsig_sym _Z38benchForBigLoopWithReductionAutoVecTC8RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC1VW4BigLoopWithReductionTC8RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC2VW4BigLoopWithReductionTC8RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC4VW4BigLoopWithReductionTC8RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC1VW1BigLoopWithReductionTC8RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC2VW1BigLoopWithReductionTC8RN9benchmark5StateE
	.addrsig_sym _Z37benchForIC4VW1BigLoopWithReductionTC8RN9benchmark5StateE
	.addrsig_sym _Z23benchAutoVecForLoopTC15RN9benchmark5StateE
	.addrsig_sym _Z22benchForIC1VW4LoopTC15RN9benchmark5StateE
	.addrsig_sym _Z22benchForIC2VW4LoopTC15RN9benchmark5StateE
	.addrsig_sym _Z22benchForIC4VW4LoopTC15RN9benchmark5StateE
	.addrsig_sym _Z36benchForLoopWithReductionAutoVecTC15RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC1VW4LoopWithReductionTC15RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC2VW4LoopWithReductionTC15RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC4VW4LoopWithReductionTC15RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC1VW1LoopWithReductionTC15RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC2VW1LoopWithReductionTC15RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC4VW1LoopWithReductionTC15RN9benchmark5StateE
	.addrsig_sym _Z26benchAutoVecForBigLoopTC15RN9benchmark5StateE
	.addrsig_sym _Z25benchForIC1VW4BigLoopTC15RN9benchmark5StateE
	.addrsig_sym _Z25benchForIC2VW4BigLoopTC15RN9benchmark5StateE
	.addrsig_sym _Z25benchForIC4VW4BigLoopTC15RN9benchmark5StateE
	.addrsig_sym _Z39benchForBigLoopWithReductionAutoVecTC15RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC1VW4BigLoopWithReductionTC15RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC2VW4BigLoopWithReductionTC15RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC4VW4BigLoopWithReductionTC15RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC1VW1BigLoopWithReductionTC15RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC2VW1BigLoopWithReductionTC15RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC4VW1BigLoopWithReductionTC15RN9benchmark5StateE
	.addrsig_sym _Z23benchAutoVecForLoopTC16RN9benchmark5StateE
	.addrsig_sym _Z22benchForIC1VW4LoopTC16RN9benchmark5StateE
	.addrsig_sym _Z22benchForIC2VW4LoopTC16RN9benchmark5StateE
	.addrsig_sym _Z22benchForIC4VW4LoopTC16RN9benchmark5StateE
	.addrsig_sym _Z36benchForLoopWithReductionAutoVecTC16RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC1VW4LoopWithReductionTC16RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC2VW4LoopWithReductionTC16RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC4VW4LoopWithReductionTC16RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC1VW1LoopWithReductionTC16RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC2VW1LoopWithReductionTC16RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC4VW1LoopWithReductionTC16RN9benchmark5StateE
	.addrsig_sym _Z26benchAutoVecForBigLoopTC16RN9benchmark5StateE
	.addrsig_sym _Z25benchForIC1VW4BigLoopTC16RN9benchmark5StateE
	.addrsig_sym _Z25benchForIC2VW4BigLoopTC16RN9benchmark5StateE
	.addrsig_sym _Z25benchForIC4VW4BigLoopTC16RN9benchmark5StateE
	.addrsig_sym _Z39benchForBigLoopWithReductionAutoVecTC16RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC1VW4BigLoopWithReductionTC16RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC2VW4BigLoopWithReductionTC16RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC4VW4BigLoopWithReductionTC16RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC1VW1BigLoopWithReductionTC16RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC2VW1BigLoopWithReductionTC16RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC4VW1BigLoopWithReductionTC16RN9benchmark5StateE
	.addrsig_sym _Z23benchAutoVecForLoopTC31RN9benchmark5StateE
	.addrsig_sym _Z22benchForIC1VW4LoopTC31RN9benchmark5StateE
	.addrsig_sym _Z22benchForIC2VW4LoopTC31RN9benchmark5StateE
	.addrsig_sym _Z22benchForIC4VW4LoopTC31RN9benchmark5StateE
	.addrsig_sym _Z36benchForLoopWithReductionAutoVecTC31RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC1VW4LoopWithReductionTC31RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC2VW4LoopWithReductionTC31RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC4VW4LoopWithReductionTC31RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC1VW1LoopWithReductionTC31RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC2VW1LoopWithReductionTC31RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC4VW1LoopWithReductionTC31RN9benchmark5StateE
	.addrsig_sym _Z26benchAutoVecForBigLoopTC31RN9benchmark5StateE
	.addrsig_sym _Z25benchForIC1VW4BigLoopTC31RN9benchmark5StateE
	.addrsig_sym _Z25benchForIC2VW4BigLoopTC31RN9benchmark5StateE
	.addrsig_sym _Z25benchForIC4VW4BigLoopTC31RN9benchmark5StateE
	.addrsig_sym _Z39benchForBigLoopWithReductionAutoVecTC31RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC1VW4BigLoopWithReductionTC31RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC2VW4BigLoopWithReductionTC31RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC4VW4BigLoopWithReductionTC31RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC1VW1BigLoopWithReductionTC31RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC2VW1BigLoopWithReductionTC31RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC4VW1BigLoopWithReductionTC31RN9benchmark5StateE
	.addrsig_sym _Z23benchAutoVecForLoopTC32RN9benchmark5StateE
	.addrsig_sym _Z22benchForIC1VW4LoopTC32RN9benchmark5StateE
	.addrsig_sym _Z22benchForIC2VW4LoopTC32RN9benchmark5StateE
	.addrsig_sym _Z22benchForIC4VW4LoopTC32RN9benchmark5StateE
	.addrsig_sym _Z36benchForLoopWithReductionAutoVecTC32RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC1VW4LoopWithReductionTC32RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC2VW4LoopWithReductionTC32RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC4VW4LoopWithReductionTC32RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC1VW1LoopWithReductionTC32RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC2VW1LoopWithReductionTC32RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC4VW1LoopWithReductionTC32RN9benchmark5StateE
	.addrsig_sym _Z26benchAutoVecForBigLoopTC32RN9benchmark5StateE
	.addrsig_sym _Z25benchForIC1VW4BigLoopTC32RN9benchmark5StateE
	.addrsig_sym _Z25benchForIC2VW4BigLoopTC32RN9benchmark5StateE
	.addrsig_sym _Z25benchForIC4VW4BigLoopTC32RN9benchmark5StateE
	.addrsig_sym _Z39benchForBigLoopWithReductionAutoVecTC32RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC1VW4BigLoopWithReductionTC32RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC2VW4BigLoopWithReductionTC32RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC4VW4BigLoopWithReductionTC32RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC1VW1BigLoopWithReductionTC32RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC2VW1BigLoopWithReductionTC32RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC4VW1BigLoopWithReductionTC32RN9benchmark5StateE
	.addrsig_sym _Z23benchAutoVecForLoopTC63RN9benchmark5StateE
	.addrsig_sym _Z22benchForIC1VW4LoopTC63RN9benchmark5StateE
	.addrsig_sym _Z22benchForIC2VW4LoopTC63RN9benchmark5StateE
	.addrsig_sym _Z22benchForIC4VW4LoopTC63RN9benchmark5StateE
	.addrsig_sym _Z36benchForLoopWithReductionAutoVecTC63RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC1VW4LoopWithReductionTC63RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC2VW4LoopWithReductionTC63RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC4VW4LoopWithReductionTC63RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC1VW1LoopWithReductionTC63RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC2VW1LoopWithReductionTC63RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC4VW1LoopWithReductionTC63RN9benchmark5StateE
	.addrsig_sym _Z26benchAutoVecForBigLoopTC63RN9benchmark5StateE
	.addrsig_sym _Z25benchForIC1VW4BigLoopTC63RN9benchmark5StateE
	.addrsig_sym _Z25benchForIC2VW4BigLoopTC63RN9benchmark5StateE
	.addrsig_sym _Z25benchForIC4VW4BigLoopTC63RN9benchmark5StateE
	.addrsig_sym _Z39benchForBigLoopWithReductionAutoVecTC63RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC1VW4BigLoopWithReductionTC63RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC2VW4BigLoopWithReductionTC63RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC4VW4BigLoopWithReductionTC63RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC1VW1BigLoopWithReductionTC63RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC2VW1BigLoopWithReductionTC63RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC4VW1BigLoopWithReductionTC63RN9benchmark5StateE
	.addrsig_sym _Z23benchAutoVecForLoopTC64RN9benchmark5StateE
	.addrsig_sym _Z22benchForIC1VW4LoopTC64RN9benchmark5StateE
	.addrsig_sym _Z22benchForIC2VW4LoopTC64RN9benchmark5StateE
	.addrsig_sym _Z22benchForIC4VW4LoopTC64RN9benchmark5StateE
	.addrsig_sym _Z36benchForLoopWithReductionAutoVecTC64RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC1VW4LoopWithReductionTC64RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC2VW4LoopWithReductionTC64RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC4VW4LoopWithReductionTC64RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC1VW1LoopWithReductionTC64RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC2VW1LoopWithReductionTC64RN9benchmark5StateE
	.addrsig_sym _Z35benchForIC4VW1LoopWithReductionTC64RN9benchmark5StateE
	.addrsig_sym _Z26benchAutoVecForBigLoopTC64RN9benchmark5StateE
	.addrsig_sym _Z25benchForIC1VW4BigLoopTC64RN9benchmark5StateE
	.addrsig_sym _Z25benchForIC2VW4BigLoopTC64RN9benchmark5StateE
	.addrsig_sym _Z25benchForIC4VW4BigLoopTC64RN9benchmark5StateE
	.addrsig_sym _Z39benchForBigLoopWithReductionAutoVecTC64RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC1VW4BigLoopWithReductionTC64RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC2VW4BigLoopWithReductionTC64RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC4VW4BigLoopWithReductionTC64RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC1VW1BigLoopWithReductionTC64RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC2VW1BigLoopWithReductionTC64RN9benchmark5StateE
	.addrsig_sym _Z38benchForIC4VW1BigLoopWithReductionTC64RN9benchmark5StateE
	.addrsig_sym _Z24benchAutoVecForLoopTC127RN9benchmark5StateE
	.addrsig_sym _Z23benchForIC1VW4LoopTC127RN9benchmark5StateE
	.addrsig_sym _Z23benchForIC2VW4LoopTC127RN9benchmark5StateE
	.addrsig_sym _Z23benchForIC4VW4LoopTC127RN9benchmark5StateE
	.addrsig_sym _Z37benchForLoopWithReductionAutoVecTC127RN9benchmark5StateE
	.addrsig_sym _Z36benchForIC1VW4LoopWithReductionTC127RN9benchmark5StateE
	.addrsig_sym _Z36benchForIC2VW4LoopWithReductionTC127RN9benchmark5StateE
	.addrsig_sym _Z36benchForIC4VW4LoopWithReductionTC127RN9benchmark5StateE
	.addrsig_sym _Z36benchForIC1VW1LoopWithReductionTC127RN9benchmark5StateE
	.addrsig_sym _Z36benchForIC2VW1LoopWithReductionTC127RN9benchmark5StateE
	.addrsig_sym _Z36benchForIC4VW1LoopWithReductionTC127RN9benchmark5StateE
	.addrsig_sym _Z27benchAutoVecForBigLoopTC127RN9benchmark5StateE
	.addrsig_sym _Z26benchForIC1VW4BigLoopTC127RN9benchmark5StateE
	.addrsig_sym _Z26benchForIC2VW4BigLoopTC127RN9benchmark5StateE
	.addrsig_sym _Z26benchForIC4VW4BigLoopTC127RN9benchmark5StateE
	.addrsig_sym _Z40benchForBigLoopWithReductionAutoVecTC127RN9benchmark5StateE
	.addrsig_sym _Z39benchForIC1VW4BigLoopWithReductionTC127RN9benchmark5StateE
	.addrsig_sym _Z39benchForIC2VW4BigLoopWithReductionTC127RN9benchmark5StateE
	.addrsig_sym _Z39benchForIC4VW4BigLoopWithReductionTC127RN9benchmark5StateE
	.addrsig_sym _Z39benchForIC1VW1BigLoopWithReductionTC127RN9benchmark5StateE
	.addrsig_sym _Z39benchForIC2VW1BigLoopWithReductionTC127RN9benchmark5StateE
	.addrsig_sym _Z39benchForIC4VW1BigLoopWithReductionTC127RN9benchmark5StateE
	.addrsig_sym _Z24benchAutoVecForLoopTC128RN9benchmark5StateE
	.addrsig_sym _Z23benchForIC1VW4LoopTC128RN9benchmark5StateE
	.addrsig_sym _Z23benchForIC2VW4LoopTC128RN9benchmark5StateE
	.addrsig_sym _Z23benchForIC4VW4LoopTC128RN9benchmark5StateE
	.addrsig_sym _Z37benchForLoopWithReductionAutoVecTC128RN9benchmark5StateE
	.addrsig_sym _Z36benchForIC1VW4LoopWithReductionTC128RN9benchmark5StateE
	.addrsig_sym _Z36benchForIC2VW4LoopWithReductionTC128RN9benchmark5StateE
	.addrsig_sym _Z36benchForIC4VW4LoopWithReductionTC128RN9benchmark5StateE
	.addrsig_sym _Z36benchForIC1VW1LoopWithReductionTC128RN9benchmark5StateE
	.addrsig_sym _Z36benchForIC2VW1LoopWithReductionTC128RN9benchmark5StateE
	.addrsig_sym _Z36benchForIC4VW1LoopWithReductionTC128RN9benchmark5StateE
	.addrsig_sym _Z27benchAutoVecForBigLoopTC128RN9benchmark5StateE
	.addrsig_sym _Z26benchForIC1VW4BigLoopTC128RN9benchmark5StateE
	.addrsig_sym _Z26benchForIC2VW4BigLoopTC128RN9benchmark5StateE
	.addrsig_sym _Z26benchForIC4VW4BigLoopTC128RN9benchmark5StateE
	.addrsig_sym _Z40benchForBigLoopWithReductionAutoVecTC128RN9benchmark5StateE
	.addrsig_sym _Z39benchForIC1VW4BigLoopWithReductionTC128RN9benchmark5StateE
	.addrsig_sym _Z39benchForIC2VW4BigLoopWithReductionTC128RN9benchmark5StateE
	.addrsig_sym _Z39benchForIC4VW4BigLoopWithReductionTC128RN9benchmark5StateE
	.addrsig_sym _Z39benchForIC1VW1BigLoopWithReductionTC128RN9benchmark5StateE
	.addrsig_sym _Z39benchForIC2VW1BigLoopWithReductionTC128RN9benchmark5StateE
	.addrsig_sym _Z39benchForIC4VW1BigLoopWithReductionTC128RN9benchmark5StateE
	.addrsig_sym _GLOBAL__sub_I_LoopInterleaving.cpp
	.addrsig_sym _Unwind_Resume
	.addrsig_sym _ZL3rng
	.addrsig_sym A
	.addrsig_sym B
	.addrsig_sym C
	.addrsig_sym D
	.addrsig_sym E
	.addrsig_sym F
